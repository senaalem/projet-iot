
application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f924  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019d8  0800fab4  0800fab4  00010ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801148c  0801148c  000130c4  2**0
                  CONTENTS
  4 .ARM          00000008  0801148c  0801148c  0001248c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011494  08011494  000130c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011494  08011494  00012494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011498  08011498  00012498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c4  20000000  0801149c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000780  200000c4  08011560  000130c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000844  08011560  00013844  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000130c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000241ca  00000000  00000000  000130f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e55  00000000  00000000  000372be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002060  00000000  00000000  0003c118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001947  00000000  00000000  0003e178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002755b  00000000  00000000  0003fabf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002593a  00000000  00000000  0006701a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7bde  00000000  00000000  0008c954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00174532  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009398  00000000  00000000  00174578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0017d910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c4 	.word	0x200000c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fa9c 	.word	0x0800fa9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c8 	.word	0x200000c8
 80001cc:	0800fa9c 	.word	0x0800fa9c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_ldivmod>:
 8000aac:	b97b      	cbnz	r3, 8000ace <__aeabi_ldivmod+0x22>
 8000aae:	b972      	cbnz	r2, 8000ace <__aeabi_ldivmod+0x22>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bfbe      	ittt	lt
 8000ab4:	2000      	movlt	r0, #0
 8000ab6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000aba:	e006      	blt.n	8000aca <__aeabi_ldivmod+0x1e>
 8000abc:	bf08      	it	eq
 8000abe:	2800      	cmpeq	r0, #0
 8000ac0:	bf1c      	itt	ne
 8000ac2:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ac6:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000aca:	f000 b9b5 	b.w	8000e38 <__aeabi_idiv0>
 8000ace:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad6:	2900      	cmp	r1, #0
 8000ad8:	db09      	blt.n	8000aee <__aeabi_ldivmod+0x42>
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	db1a      	blt.n	8000b14 <__aeabi_ldivmod+0x68>
 8000ade:	f000 f84d 	bl	8000b7c <__udivmoddi4>
 8000ae2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aea:	b004      	add	sp, #16
 8000aec:	4770      	bx	lr
 8000aee:	4240      	negs	r0, r0
 8000af0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	db1b      	blt.n	8000b30 <__aeabi_ldivmod+0x84>
 8000af8:	f000 f840 	bl	8000b7c <__udivmoddi4>
 8000afc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b04:	b004      	add	sp, #16
 8000b06:	4240      	negs	r0, r0
 8000b08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b0c:	4252      	negs	r2, r2
 8000b0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b12:	4770      	bx	lr
 8000b14:	4252      	negs	r2, r2
 8000b16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b1a:	f000 f82f 	bl	8000b7c <__udivmoddi4>
 8000b1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b26:	b004      	add	sp, #16
 8000b28:	4240      	negs	r0, r0
 8000b2a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b2e:	4770      	bx	lr
 8000b30:	4252      	negs	r2, r2
 8000b32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b36:	f000 f821 	bl	8000b7c <__udivmoddi4>
 8000b3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b42:	b004      	add	sp, #16
 8000b44:	4252      	negs	r2, r2
 8000b46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_uldivmod>:
 8000b4c:	b953      	cbnz	r3, 8000b64 <__aeabi_uldivmod+0x18>
 8000b4e:	b94a      	cbnz	r2, 8000b64 <__aeabi_uldivmod+0x18>
 8000b50:	2900      	cmp	r1, #0
 8000b52:	bf08      	it	eq
 8000b54:	2800      	cmpeq	r0, #0
 8000b56:	bf1c      	itt	ne
 8000b58:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b5c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b60:	f000 b96a 	b.w	8000e38 <__aeabi_idiv0>
 8000b64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b6c:	f000 f806 	bl	8000b7c <__udivmoddi4>
 8000b70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b78:	b004      	add	sp, #16
 8000b7a:	4770      	bx	lr

08000b7c <__udivmoddi4>:
 8000b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b80:	9d08      	ldr	r5, [sp, #32]
 8000b82:	460c      	mov	r4, r1
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d14e      	bne.n	8000c26 <__udivmoddi4+0xaa>
 8000b88:	4694      	mov	ip, r2
 8000b8a:	458c      	cmp	ip, r1
 8000b8c:	4686      	mov	lr, r0
 8000b8e:	fab2 f282 	clz	r2, r2
 8000b92:	d962      	bls.n	8000c5a <__udivmoddi4+0xde>
 8000b94:	b14a      	cbz	r2, 8000baa <__udivmoddi4+0x2e>
 8000b96:	f1c2 0320 	rsb	r3, r2, #32
 8000b9a:	4091      	lsls	r1, r2
 8000b9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ba0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba4:	4319      	orrs	r1, r3
 8000ba6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000baa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bae:	fa1f f68c 	uxth.w	r6, ip
 8000bb2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bb6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bba:	fb07 1114 	mls	r1, r7, r4, r1
 8000bbe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc2:	fb04 f106 	mul.w	r1, r4, r6
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	d90a      	bls.n	8000be0 <__udivmoddi4+0x64>
 8000bca:	eb1c 0303 	adds.w	r3, ip, r3
 8000bce:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000bd2:	f080 8112 	bcs.w	8000dfa <__udivmoddi4+0x27e>
 8000bd6:	4299      	cmp	r1, r3
 8000bd8:	f240 810f 	bls.w	8000dfa <__udivmoddi4+0x27e>
 8000bdc:	3c02      	subs	r4, #2
 8000bde:	4463      	add	r3, ip
 8000be0:	1a59      	subs	r1, r3, r1
 8000be2:	fa1f f38e 	uxth.w	r3, lr
 8000be6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bea:	fb07 1110 	mls	r1, r7, r0, r1
 8000bee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf2:	fb00 f606 	mul.w	r6, r0, r6
 8000bf6:	429e      	cmp	r6, r3
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x94>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c02:	f080 80fc 	bcs.w	8000dfe <__udivmoddi4+0x282>
 8000c06:	429e      	cmp	r6, r3
 8000c08:	f240 80f9 	bls.w	8000dfe <__udivmoddi4+0x282>
 8000c0c:	4463      	add	r3, ip
 8000c0e:	3802      	subs	r0, #2
 8000c10:	1b9b      	subs	r3, r3, r6
 8000c12:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c16:	2100      	movs	r1, #0
 8000c18:	b11d      	cbz	r5, 8000c22 <__udivmoddi4+0xa6>
 8000c1a:	40d3      	lsrs	r3, r2
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d905      	bls.n	8000c36 <__udivmoddi4+0xba>
 8000c2a:	b10d      	cbz	r5, 8000c30 <__udivmoddi4+0xb4>
 8000c2c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c30:	2100      	movs	r1, #0
 8000c32:	4608      	mov	r0, r1
 8000c34:	e7f5      	b.n	8000c22 <__udivmoddi4+0xa6>
 8000c36:	fab3 f183 	clz	r1, r3
 8000c3a:	2900      	cmp	r1, #0
 8000c3c:	d146      	bne.n	8000ccc <__udivmoddi4+0x150>
 8000c3e:	42a3      	cmp	r3, r4
 8000c40:	d302      	bcc.n	8000c48 <__udivmoddi4+0xcc>
 8000c42:	4290      	cmp	r0, r2
 8000c44:	f0c0 80f0 	bcc.w	8000e28 <__udivmoddi4+0x2ac>
 8000c48:	1a86      	subs	r6, r0, r2
 8000c4a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c4e:	2001      	movs	r0, #1
 8000c50:	2d00      	cmp	r5, #0
 8000c52:	d0e6      	beq.n	8000c22 <__udivmoddi4+0xa6>
 8000c54:	e9c5 6300 	strd	r6, r3, [r5]
 8000c58:	e7e3      	b.n	8000c22 <__udivmoddi4+0xa6>
 8000c5a:	2a00      	cmp	r2, #0
 8000c5c:	f040 8090 	bne.w	8000d80 <__udivmoddi4+0x204>
 8000c60:	eba1 040c 	sub.w	r4, r1, ip
 8000c64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c68:	fa1f f78c 	uxth.w	r7, ip
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c76:	fb08 4416 	mls	r4, r8, r6, r4
 8000c7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c7e:	fb07 f006 	mul.w	r0, r7, r6
 8000c82:	4298      	cmp	r0, r3
 8000c84:	d908      	bls.n	8000c98 <__udivmoddi4+0x11c>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x11a>
 8000c90:	4298      	cmp	r0, r3
 8000c92:	f200 80cd 	bhi.w	8000e30 <__udivmoddi4+0x2b4>
 8000c96:	4626      	mov	r6, r4
 8000c98:	1a1c      	subs	r4, r3, r0
 8000c9a:	fa1f f38e 	uxth.w	r3, lr
 8000c9e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ca2:	fb08 4410 	mls	r4, r8, r0, r4
 8000ca6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000caa:	fb00 f707 	mul.w	r7, r0, r7
 8000cae:	429f      	cmp	r7, r3
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0x148>
 8000cb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cb6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000cba:	d202      	bcs.n	8000cc2 <__udivmoddi4+0x146>
 8000cbc:	429f      	cmp	r7, r3
 8000cbe:	f200 80b0 	bhi.w	8000e22 <__udivmoddi4+0x2a6>
 8000cc2:	4620      	mov	r0, r4
 8000cc4:	1bdb      	subs	r3, r3, r7
 8000cc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cca:	e7a5      	b.n	8000c18 <__udivmoddi4+0x9c>
 8000ccc:	f1c1 0620 	rsb	r6, r1, #32
 8000cd0:	408b      	lsls	r3, r1
 8000cd2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cd6:	431f      	orrs	r7, r3
 8000cd8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cdc:	fa04 f301 	lsl.w	r3, r4, r1
 8000ce0:	ea43 030c 	orr.w	r3, r3, ip
 8000ce4:	40f4      	lsrs	r4, r6
 8000ce6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cea:	0c38      	lsrs	r0, r7, #16
 8000cec:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cf0:	fbb4 fef0 	udiv	lr, r4, r0
 8000cf4:	fa1f fc87 	uxth.w	ip, r7
 8000cf8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cfc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d00:	fb0e f90c 	mul.w	r9, lr, ip
 8000d04:	45a1      	cmp	r9, r4
 8000d06:	fa02 f201 	lsl.w	r2, r2, r1
 8000d0a:	d90a      	bls.n	8000d22 <__udivmoddi4+0x1a6>
 8000d0c:	193c      	adds	r4, r7, r4
 8000d0e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d12:	f080 8084 	bcs.w	8000e1e <__udivmoddi4+0x2a2>
 8000d16:	45a1      	cmp	r9, r4
 8000d18:	f240 8081 	bls.w	8000e1e <__udivmoddi4+0x2a2>
 8000d1c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d20:	443c      	add	r4, r7
 8000d22:	eba4 0409 	sub.w	r4, r4, r9
 8000d26:	fa1f f983 	uxth.w	r9, r3
 8000d2a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d2e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d32:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d36:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	d907      	bls.n	8000d4e <__udivmoddi4+0x1d2>
 8000d3e:	193c      	adds	r4, r7, r4
 8000d40:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000d44:	d267      	bcs.n	8000e16 <__udivmoddi4+0x29a>
 8000d46:	45a4      	cmp	ip, r4
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0x29a>
 8000d4a:	3b02      	subs	r3, #2
 8000d4c:	443c      	add	r4, r7
 8000d4e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d52:	fba0 9302 	umull	r9, r3, r0, r2
 8000d56:	eba4 040c 	sub.w	r4, r4, ip
 8000d5a:	429c      	cmp	r4, r3
 8000d5c:	46ce      	mov	lr, r9
 8000d5e:	469c      	mov	ip, r3
 8000d60:	d351      	bcc.n	8000e06 <__udivmoddi4+0x28a>
 8000d62:	d04e      	beq.n	8000e02 <__udivmoddi4+0x286>
 8000d64:	b155      	cbz	r5, 8000d7c <__udivmoddi4+0x200>
 8000d66:	ebb8 030e 	subs.w	r3, r8, lr
 8000d6a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d6e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d72:	40cb      	lsrs	r3, r1
 8000d74:	431e      	orrs	r6, r3
 8000d76:	40cc      	lsrs	r4, r1
 8000d78:	e9c5 6400 	strd	r6, r4, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	e750      	b.n	8000c22 <__udivmoddi4+0xa6>
 8000d80:	f1c2 0320 	rsb	r3, r2, #32
 8000d84:	fa20 f103 	lsr.w	r1, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d90:	4094      	lsls	r4, r2
 8000d92:	430c      	orrs	r4, r1
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d9c:	fa1f f78c 	uxth.w	r7, ip
 8000da0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da4:	fb08 3110 	mls	r1, r8, r0, r3
 8000da8:	0c23      	lsrs	r3, r4, #16
 8000daa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dae:	fb00 f107 	mul.w	r1, r0, r7
 8000db2:	4299      	cmp	r1, r3
 8000db4:	d908      	bls.n	8000dc8 <__udivmoddi4+0x24c>
 8000db6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dba:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000dbe:	d22c      	bcs.n	8000e1a <__udivmoddi4+0x29e>
 8000dc0:	4299      	cmp	r1, r3
 8000dc2:	d92a      	bls.n	8000e1a <__udivmoddi4+0x29e>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dd0:	fb08 3311 	mls	r3, r8, r1, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb01 f307 	mul.w	r3, r1, r7
 8000ddc:	42a3      	cmp	r3, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x276>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000de8:	d213      	bcs.n	8000e12 <__udivmoddi4+0x296>
 8000dea:	42a3      	cmp	r3, r4
 8000dec:	d911      	bls.n	8000e12 <__udivmoddi4+0x296>
 8000dee:	3902      	subs	r1, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	1ae4      	subs	r4, r4, r3
 8000df4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000df8:	e739      	b.n	8000c6e <__udivmoddi4+0xf2>
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	e6f0      	b.n	8000be0 <__udivmoddi4+0x64>
 8000dfe:	4608      	mov	r0, r1
 8000e00:	e706      	b.n	8000c10 <__udivmoddi4+0x94>
 8000e02:	45c8      	cmp	r8, r9
 8000e04:	d2ae      	bcs.n	8000d64 <__udivmoddi4+0x1e8>
 8000e06:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e0a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e0e:	3801      	subs	r0, #1
 8000e10:	e7a8      	b.n	8000d64 <__udivmoddi4+0x1e8>
 8000e12:	4631      	mov	r1, r6
 8000e14:	e7ed      	b.n	8000df2 <__udivmoddi4+0x276>
 8000e16:	4603      	mov	r3, r0
 8000e18:	e799      	b.n	8000d4e <__udivmoddi4+0x1d2>
 8000e1a:	4630      	mov	r0, r6
 8000e1c:	e7d4      	b.n	8000dc8 <__udivmoddi4+0x24c>
 8000e1e:	46d6      	mov	lr, sl
 8000e20:	e77f      	b.n	8000d22 <__udivmoddi4+0x1a6>
 8000e22:	4463      	add	r3, ip
 8000e24:	3802      	subs	r0, #2
 8000e26:	e74d      	b.n	8000cc4 <__udivmoddi4+0x148>
 8000e28:	4606      	mov	r6, r0
 8000e2a:	4623      	mov	r3, r4
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	e70f      	b.n	8000c50 <__udivmoddi4+0xd4>
 8000e30:	3e02      	subs	r6, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	e730      	b.n	8000c98 <__udivmoddi4+0x11c>
 8000e36:	bf00      	nop

08000e38 <__aeabi_idiv0>:
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e42:	463b      	mov	r3, r7
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
 8000e50:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e52:	4b29      	ldr	r3, [pc, #164]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e54:	4a29      	ldr	r2, [pc, #164]	@ (8000efc <MX_ADC1_Init+0xc0>)
 8000e56:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 8000e58:	4b27      	ldr	r3, [pc, #156]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e5a:	f44f 12e0 	mov.w	r2, #1835008	@ 0x1c0000
 8000e5e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e60:	4b25      	ldr	r3, [pc, #148]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e66:	4b24      	ldr	r3, [pc, #144]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e6c:	4b22      	ldr	r3, [pc, #136]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e72:	4b21      	ldr	r3, [pc, #132]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e74:	2204      	movs	r2, #4
 8000e76:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e78:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e84:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e92:	4b19      	ldr	r3, [pc, #100]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e98:	4b17      	ldr	r3, [pc, #92]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e9e:	4b16      	ldr	r3, [pc, #88]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ea6:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000eac:	4b12      	ldr	r3, [pc, #72]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eb4:	4810      	ldr	r0, [pc, #64]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000eb6:	f008 fda3 	bl	8009a00 <HAL_ADC_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000ec0:	f007 f962 	bl	8008188 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f00 <MX_ADC1_Init+0xc4>)
 8000ec6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ec8:	2306      	movs	r3, #6
 8000eca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000ecc:	2307      	movs	r3, #7
 8000ece:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ed0:	237f      	movs	r3, #127	@ 0x7f
 8000ed2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ed4:	2304      	movs	r3, #4
 8000ed6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000edc:	463b      	mov	r3, r7
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4805      	ldr	r0, [pc, #20]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000ee2:	f009 f959 	bl	800a198 <HAL_ADC_ConfigChannel>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000eec:	f007 f94c 	bl	8008188 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ef0:	bf00      	nop
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	200000e0 	.word	0x200000e0
 8000efc:	50040000 	.word	0x50040000
 8000f00:	3ef08000 	.word	0x3ef08000

08000f04 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b09e      	sub	sp, #120	@ 0x78
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	2254      	movs	r2, #84	@ 0x54
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f00d ff05 	bl	800ed34 <memset>
  if(adcHandle->Instance==ADC1)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a29      	ldr	r2, [pc, #164]	@ (8000fd4 <HAL_ADC_MspInit+0xd0>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d14a      	bne.n	8000fca <HAL_ADC_MspInit+0xc6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f34:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f38:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000f3a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f3e:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000f40:	2302      	movs	r3, #2
 8000f42:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000f44:	2301      	movs	r3, #1
 8000f46:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000f48:	2308      	movs	r3, #8
 8000f4a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000f4c:	2307      	movs	r3, #7
 8000f4e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000f50:	2302      	movs	r3, #2
 8000f52:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000f54:	2302      	movs	r3, #2
 8000f56:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000f58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f5e:	f107 0310 	add.w	r3, r7, #16
 8000f62:	4618      	mov	r0, r3
 8000f64:	f00b fef6 	bl	800cd54 <HAL_RCCEx_PeriphCLKConfig>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000f6e:	f007 f90b 	bl	8008188 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f72:	4b19      	ldr	r3, [pc, #100]	@ (8000fd8 <HAL_ADC_MspInit+0xd4>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f76:	4a18      	ldr	r2, [pc, #96]	@ (8000fd8 <HAL_ADC_MspInit+0xd4>)
 8000f78:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f7e:	4b16      	ldr	r3, [pc, #88]	@ (8000fd8 <HAL_ADC_MspInit+0xd4>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8a:	4b13      	ldr	r3, [pc, #76]	@ (8000fd8 <HAL_ADC_MspInit+0xd4>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8e:	4a12      	ldr	r2, [pc, #72]	@ (8000fd8 <HAL_ADC_MspInit+0xd4>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f96:	4b10      	ldr	r3, [pc, #64]	@ (8000fd8 <HAL_ADC_MspInit+0xd4>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000fa6:	230b      	movs	r3, #11
 8000fa8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fae:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4809      	ldr	r0, [pc, #36]	@ (8000fdc <HAL_ADC_MspInit+0xd8>)
 8000fb6:	f009 ff87 	bl	800aec8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2012      	movs	r0, #18
 8000fc0:	f009 ff4b 	bl	800ae5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000fc4:	2012      	movs	r0, #18
 8000fc6:	f009 ff64 	bl	800ae92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fca:	bf00      	nop
 8000fcc:	3778      	adds	r7, #120	@ 0x78
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	50040000 	.word	0x50040000
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	48000400 	.word	0x48000400

08000fe0 <aesroundkeys>:
u4_t AESKEY[11 * 16 / sizeof(u4_t)];

// generate 1+10 roundkeys for encryption with 128-bit key
// read 128-bit key from AESKEY in MSBF, generate roundkey words in place
static void aesroundkeys()
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
	int i;
	u4_t b;

	for (i = 0; i < 4; i++) {
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	e021      	b.n	8001030 <aesroundkeys+0x50>
		AESKEY[i] = swapmsbf(AESKEY[i]);
 8000fec:	4a37      	ldr	r2, [pc, #220]	@ (80010cc <aesroundkeys+0xec>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff4:	061a      	lsls	r2, r3, #24
 8000ff6:	4935      	ldr	r1, [pc, #212]	@ (80010cc <aesroundkeys+0xec>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ffe:	021b      	lsls	r3, r3, #8
 8001000:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001004:	431a      	orrs	r2, r3
 8001006:	4931      	ldr	r1, [pc, #196]	@ (80010cc <aesroundkeys+0xec>)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800100e:	0a1b      	lsrs	r3, r3, #8
 8001010:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001014:	431a      	orrs	r2, r3
 8001016:	492d      	ldr	r1, [pc, #180]	@ (80010cc <aesroundkeys+0xec>)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800101e:	0e1b      	lsrs	r3, r3, #24
 8001020:	431a      	orrs	r2, r3
 8001022:	492a      	ldr	r1, [pc, #168]	@ (80010cc <aesroundkeys+0xec>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i = 0; i < 4; i++) {
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3301      	adds	r3, #1
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b03      	cmp	r3, #3
 8001034:	ddda      	ble.n	8000fec <aesroundkeys+0xc>
	}

	b = AESKEY[3];
 8001036:	4b25      	ldr	r3, [pc, #148]	@ (80010cc <aesroundkeys+0xec>)
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	603b      	str	r3, [r7, #0]
	for (; i < 44; i++) {
 800103c:	e03c      	b.n	80010b8 <aesroundkeys+0xd8>
		if (i % 4 == 0) {
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	2b00      	cmp	r3, #0
 8001046:	d127      	bne.n	8001098 <aesroundkeys+0xb8>
			// b = SubWord(RotWord(b)) xor Rcon[i/4]
			b = (AES_S[u1(b >> 16)] << 24) ^ (AES_S[u1(b >> 8)] << 16)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	0c1b      	lsrs	r3, r3, #16
 800104c:	b2db      	uxtb	r3, r3
 800104e:	461a      	mov	r2, r3
 8001050:	4b1f      	ldr	r3, [pc, #124]	@ (80010d0 <aesroundkeys+0xf0>)
 8001052:	5c9b      	ldrb	r3, [r3, r2]
 8001054:	061a      	lsls	r2, r3, #24
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	0a1b      	lsrs	r3, r3, #8
 800105a:	b2db      	uxtb	r3, r3
 800105c:	4619      	mov	r1, r3
 800105e:	4b1c      	ldr	r3, [pc, #112]	@ (80010d0 <aesroundkeys+0xf0>)
 8001060:	5c5b      	ldrb	r3, [r3, r1]
 8001062:	041b      	lsls	r3, r3, #16
 8001064:	405a      	eors	r2, r3
					^ (AES_S[u1(b)] << 8) ^ (AES_S[b >> 24])
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	4619      	mov	r1, r3
 800106c:	4b18      	ldr	r3, [pc, #96]	@ (80010d0 <aesroundkeys+0xf0>)
 800106e:	5c5b      	ldrb	r3, [r3, r1]
 8001070:	021b      	lsls	r3, r3, #8
 8001072:	4053      	eors	r3, r2
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	0e12      	lsrs	r2, r2, #24
 8001078:	4915      	ldr	r1, [pc, #84]	@ (80010d0 <aesroundkeys+0xf0>)
 800107a:	5c8a      	ldrb	r2, [r1, r2]
 800107c:	4053      	eors	r3, r2
 800107e:	461a      	mov	r2, r3
					^ AES_RCON[(i - 4) / 4];
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b04      	subs	r3, #4
 8001084:	2b00      	cmp	r3, #0
 8001086:	da00      	bge.n	800108a <aesroundkeys+0xaa>
 8001088:	3303      	adds	r3, #3
 800108a:	109b      	asrs	r3, r3, #2
 800108c:	4619      	mov	r1, r3
 800108e:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <aesroundkeys+0xf4>)
 8001090:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			b = (AES_S[u1(b >> 16)] << 24) ^ (AES_S[u1(b >> 8)] << 16)
 8001094:	4053      	eors	r3, r2
 8001096:	603b      	str	r3, [r7, #0]
		}
		AESKEY[i] = b ^= AESKEY[i - 4];
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b04      	subs	r3, #4
 800109c:	4a0b      	ldr	r2, [pc, #44]	@ (80010cc <aesroundkeys+0xec>)
 800109e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	4053      	eors	r3, r2
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	4908      	ldr	r1, [pc, #32]	@ (80010cc <aesroundkeys+0xec>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (; i < 44; i++) {
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3301      	adds	r3, #1
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b2b      	cmp	r3, #43	@ 0x2b
 80010bc:	ddbf      	ble.n	800103e <aesroundkeys+0x5e>
	}
}
 80010be:	bf00      	nop
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	20000154 	.word	0x20000154
 80010d0:	080101d4 	.word	0x080101d4
 80010d4:	080101ac 	.word	0x080101ac

080010d8 <os_aes>:

u4_t os_aes(u1_t mode, xref2u1_t buf, u2_t len)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08c      	sub	sp, #48	@ 0x30
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	6039      	str	r1, [r7, #0]
 80010e2:	71fb      	strb	r3, [r7, #7]
 80010e4:	4613      	mov	r3, r2
 80010e6:	80bb      	strh	r3, [r7, #4]

	aesroundkeys();
 80010e8:	f7ff ff7a 	bl	8000fe0 <aesroundkeys>

	if (mode & AES_MICNOAUX) {
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d010      	beq.n	8001118 <os_aes+0x40>
		AESAUX[0] = AESAUX[1] = AESAUX[2] = AESAUX[3] = 0;
 80010f6:	4b5a      	ldr	r3, [pc, #360]	@ (8001260 <os_aes+0x188>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	4b58      	ldr	r3, [pc, #352]	@ (8001260 <os_aes+0x188>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	4a57      	ldr	r2, [pc, #348]	@ (8001260 <os_aes+0x188>)
 8001102:	6093      	str	r3, [r2, #8]
 8001104:	4b56      	ldr	r3, [pc, #344]	@ (8001260 <os_aes+0x188>)
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	4a55      	ldr	r2, [pc, #340]	@ (8001260 <os_aes+0x188>)
 800110a:	6053      	str	r3, [r2, #4]
 800110c:	4b54      	ldr	r3, [pc, #336]	@ (8001260 <os_aes+0x188>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	4a53      	ldr	r2, [pc, #332]	@ (8001260 <os_aes+0x188>)
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	f000 bc97 	b.w	8001a46 <os_aes+0x96e>
	} else {
		AESAUX[0] = swapmsbf(AESAUX[0]);
 8001118:	4b51      	ldr	r3, [pc, #324]	@ (8001260 <os_aes+0x188>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	061a      	lsls	r2, r3, #24
 800111e:	4b50      	ldr	r3, [pc, #320]	@ (8001260 <os_aes+0x188>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	021b      	lsls	r3, r3, #8
 8001124:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001128:	431a      	orrs	r2, r3
 800112a:	4b4d      	ldr	r3, [pc, #308]	@ (8001260 <os_aes+0x188>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	0a1b      	lsrs	r3, r3, #8
 8001130:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001134:	431a      	orrs	r2, r3
 8001136:	4b4a      	ldr	r3, [pc, #296]	@ (8001260 <os_aes+0x188>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	0e1b      	lsrs	r3, r3, #24
 800113c:	4313      	orrs	r3, r2
 800113e:	4a48      	ldr	r2, [pc, #288]	@ (8001260 <os_aes+0x188>)
 8001140:	6013      	str	r3, [r2, #0]
		AESAUX[1] = swapmsbf(AESAUX[1]);
 8001142:	4b47      	ldr	r3, [pc, #284]	@ (8001260 <os_aes+0x188>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	061a      	lsls	r2, r3, #24
 8001148:	4b45      	ldr	r3, [pc, #276]	@ (8001260 <os_aes+0x188>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	021b      	lsls	r3, r3, #8
 800114e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001152:	431a      	orrs	r2, r3
 8001154:	4b42      	ldr	r3, [pc, #264]	@ (8001260 <os_aes+0x188>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	0a1b      	lsrs	r3, r3, #8
 800115a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800115e:	431a      	orrs	r2, r3
 8001160:	4b3f      	ldr	r3, [pc, #252]	@ (8001260 <os_aes+0x188>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	0e1b      	lsrs	r3, r3, #24
 8001166:	4313      	orrs	r3, r2
 8001168:	4a3d      	ldr	r2, [pc, #244]	@ (8001260 <os_aes+0x188>)
 800116a:	6053      	str	r3, [r2, #4]
		AESAUX[2] = swapmsbf(AESAUX[2]);
 800116c:	4b3c      	ldr	r3, [pc, #240]	@ (8001260 <os_aes+0x188>)
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	061a      	lsls	r2, r3, #24
 8001172:	4b3b      	ldr	r3, [pc, #236]	@ (8001260 <os_aes+0x188>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	021b      	lsls	r3, r3, #8
 8001178:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800117c:	431a      	orrs	r2, r3
 800117e:	4b38      	ldr	r3, [pc, #224]	@ (8001260 <os_aes+0x188>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	0a1b      	lsrs	r3, r3, #8
 8001184:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001188:	431a      	orrs	r2, r3
 800118a:	4b35      	ldr	r3, [pc, #212]	@ (8001260 <os_aes+0x188>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	0e1b      	lsrs	r3, r3, #24
 8001190:	4313      	orrs	r3, r2
 8001192:	4a33      	ldr	r2, [pc, #204]	@ (8001260 <os_aes+0x188>)
 8001194:	6093      	str	r3, [r2, #8]
		AESAUX[3] = swapmsbf(AESAUX[3]);
 8001196:	4b32      	ldr	r3, [pc, #200]	@ (8001260 <os_aes+0x188>)
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	061a      	lsls	r2, r3, #24
 800119c:	4b30      	ldr	r3, [pc, #192]	@ (8001260 <os_aes+0x188>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	021b      	lsls	r3, r3, #8
 80011a2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80011a6:	431a      	orrs	r2, r3
 80011a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001260 <os_aes+0x188>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	0a1b      	lsrs	r3, r3, #8
 80011ae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80011b2:	431a      	orrs	r2, r3
 80011b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001260 <os_aes+0x188>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	0e1b      	lsrs	r3, r3, #24
 80011ba:	4313      	orrs	r3, r2
 80011bc:	4a28      	ldr	r2, [pc, #160]	@ (8001260 <os_aes+0x188>)
 80011be:	60d3      	str	r3, [r2, #12]
	}

	while ((signed char) len > 0) {
 80011c0:	f000 bc41 	b.w	8001a46 <os_aes+0x96e>
		u4_t a0, a1, a2, a3;
		u4_t t0, t1, t2, t3;
		u4_t *ki, *ke;

		// load input block
		if ((mode & AES_CTR)
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	f003 0304 	and.w	r3, r3, #4
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d109      	bne.n	80011e2 <os_aes+0x10a>
				|| ((mode & AES_MIC) && (mode & AES_MICNOAUX) == 0)) { // load CTR block or first MIC block
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d011      	beq.n	80011fc <os_aes+0x124>
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10c      	bne.n	80011fc <os_aes+0x124>
			a0 = AESAUX[0];
 80011e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001260 <os_aes+0x188>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
			a1 = AESAUX[1];
 80011e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001260 <os_aes+0x188>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	62bb      	str	r3, [r7, #40]	@ 0x28
			a2 = AESAUX[2];
 80011ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001260 <os_aes+0x188>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	627b      	str	r3, [r7, #36]	@ 0x24
			a3 = AESAUX[3];
 80011f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001260 <os_aes+0x188>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	623b      	str	r3, [r7, #32]
 80011fa:	e062      	b.n	80012c2 <os_aes+0x1ea>
		} else if ((mode & AES_MIC) && len <= 16) { // last MIC block
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d016      	beq.n	8001234 <os_aes+0x15c>
 8001206:	88bb      	ldrh	r3, [r7, #4]
 8001208:	2b10      	cmp	r3, #16
 800120a:	d813      	bhi.n	8001234 <os_aes+0x15c>
			a0 = a1 = a2 = a3 = 0; // load null block
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
 8001210:	6a3b      	ldr	r3, [r7, #32]
 8001212:	627b      	str	r3, [r7, #36]	@ 0x24
 8001214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001216:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800121a:	62fb      	str	r3, [r7, #44]	@ 0x2c
			mode |= ((len == 16) ? 1 : 2) << 4; // set MICSUB: CMAC subkey K1 or K2
 800121c:	88bb      	ldrh	r3, [r7, #4]
 800121e:	2b10      	cmp	r3, #16
 8001220:	d101      	bne.n	8001226 <os_aes+0x14e>
 8001222:	2210      	movs	r2, #16
 8001224:	e000      	b.n	8001228 <os_aes+0x150>
 8001226:	2220      	movs	r2, #32
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	4313      	orrs	r3, r2
 800122e:	b25b      	sxtb	r3, r3
 8001230:	71fb      	strb	r3, [r7, #7]
 8001232:	e046      	b.n	80012c2 <os_aes+0x1ea>
		} else
			LOADDATA: { // load data block (partially)
 8001234:	bf00      	nop
				for (t0 = 0; t0 < 16; t0++) {
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
 800123a:	e026      	b.n	800128a <os_aes+0x1b2>
					t1 =
							(t1 << 8)
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	021a      	lsls	r2, r3, #8
									| ((t0 < len) ? buf[t0] :
 8001240:	88bb      	ldrh	r3, [r7, #4]
 8001242:	69f9      	ldr	r1, [r7, #28]
 8001244:	4299      	cmp	r1, r3
 8001246:	d204      	bcs.n	8001252 <os_aes+0x17a>
 8001248:	6839      	ldr	r1, [r7, #0]
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	440b      	add	r3, r1
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	e009      	b.n	8001266 <os_aes+0x18e>
										(t0 == len) ? 0x80 : 0x00);
 8001252:	88bb      	ldrh	r3, [r7, #4]
									| ((t0 < len) ? buf[t0] :
 8001254:	69f9      	ldr	r1, [r7, #28]
 8001256:	4299      	cmp	r1, r3
 8001258:	d104      	bne.n	8001264 <os_aes+0x18c>
 800125a:	2380      	movs	r3, #128	@ 0x80
 800125c:	e003      	b.n	8001266 <os_aes+0x18e>
 800125e:	bf00      	nop
 8001260:	20000144 	.word	0x20000144
 8001264:	2300      	movs	r3, #0
					t1 =
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
					if ((t0 & 3) == 3) {
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	2b03      	cmp	r3, #3
 8001272:	d107      	bne.n	8001284 <os_aes+0x1ac>
						a0 = a1;
 8001274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001276:	62fb      	str	r3, [r7, #44]	@ 0x2c
						a1 = a2;
 8001278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127a:	62bb      	str	r3, [r7, #40]	@ 0x28
						a2 = a3;
 800127c:	6a3b      	ldr	r3, [r7, #32]
 800127e:	627b      	str	r3, [r7, #36]	@ 0x24
						a3 = t1;
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	623b      	str	r3, [r7, #32]
				for (t0 = 0; t0 < 16; t0++) {
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	3301      	adds	r3, #1
 8001288:	61fb      	str	r3, [r7, #28]
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	2b0f      	cmp	r3, #15
 800128e:	d9d5      	bls.n	800123c <os_aes+0x164>
					}
				}
				if (mode & AES_MIC) {
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d013      	beq.n	80012c2 <os_aes+0x1ea>
					a0 ^= AESAUX[0];
 800129a:	4ba0      	ldr	r3, [pc, #640]	@ (800151c <os_aes+0x444>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012a0:	4053      	eors	r3, r2
 80012a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
					a1 ^= AESAUX[1];
 80012a4:	4b9d      	ldr	r3, [pc, #628]	@ (800151c <os_aes+0x444>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012aa:	4053      	eors	r3, r2
 80012ac:	62bb      	str	r3, [r7, #40]	@ 0x28
					a2 ^= AESAUX[2];
 80012ae:	4b9b      	ldr	r3, [pc, #620]	@ (800151c <os_aes+0x444>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012b4:	4053      	eors	r3, r2
 80012b6:	627b      	str	r3, [r7, #36]	@ 0x24
					a3 ^= AESAUX[3];
 80012b8:	4b98      	ldr	r3, [pc, #608]	@ (800151c <os_aes+0x444>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	6a3a      	ldr	r2, [r7, #32]
 80012be:	4053      	eors	r3, r2
 80012c0:	623b      	str	r3, [r7, #32]
				}
			}

		// perform AES encryption on block in a0-a3
		ki = AESKEY;
 80012c2:	4b97      	ldr	r3, [pc, #604]	@ (8001520 <os_aes+0x448>)
 80012c4:	617b      	str	r3, [r7, #20]
		ke = ki + 8 * 4;
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	3380      	adds	r3, #128	@ 0x80
 80012ca:	613b      	str	r3, [r7, #16]
		a0 ^= ki[0];
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012d2:	4053      	eors	r3, r2
 80012d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		a1 ^= ki[1];
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	3304      	adds	r3, #4
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012de:	4053      	eors	r3, r2
 80012e0:	62bb      	str	r3, [r7, #40]	@ 0x28
		a2 ^= ki[2];
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	3308      	adds	r3, #8
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012ea:	4053      	eors	r3, r2
 80012ec:	627b      	str	r3, [r7, #36]	@ 0x24
		a3 ^= ki[3];
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	330c      	adds	r3, #12
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	6a3a      	ldr	r2, [r7, #32]
 80012f6:	4053      	eors	r3, r2
 80012f8:	623b      	str	r3, [r7, #32]
		do {
			AES_key4(t1, t2, t3, t0, 4);
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	61bb      	str	r3, [r7, #24]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	691b      	ldr	r3, [r3, #16]
 8001310:	61fb      	str	r3, [r7, #28]
			AES_expr4(t1, t2, t3, t0, a0);
 8001312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001314:	b2db      	uxtb	r3, r3
 8001316:	461a      	mov	r2, r3
 8001318:	4b82      	ldr	r3, [pc, #520]	@ (8001524 <os_aes+0x44c>)
 800131a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4053      	eors	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
 8001324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001326:	0a1b      	lsrs	r3, r3, #8
 8001328:	b2db      	uxtb	r3, r3
 800132a:	461a      	mov	r2, r3
 800132c:	4b7e      	ldr	r3, [pc, #504]	@ (8001528 <os_aes+0x450>)
 800132e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	4053      	eors	r3, r2
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800133a:	0c1b      	lsrs	r3, r3, #16
 800133c:	b2db      	uxtb	r3, r3
 800133e:	461a      	mov	r2, r3
 8001340:	4b7a      	ldr	r3, [pc, #488]	@ (800152c <os_aes+0x454>)
 8001342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	4053      	eors	r3, r2
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800134e:	0e1b      	lsrs	r3, r3, #24
 8001350:	4a77      	ldr	r2, [pc, #476]	@ (8001530 <os_aes+0x458>)
 8001352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001356:	69fa      	ldr	r2, [r7, #28]
 8001358:	4053      	eors	r3, r2
 800135a:	61fb      	str	r3, [r7, #28]
			AES_expr4(t2, t3, t0, t1, a1);
 800135c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800135e:	b2db      	uxtb	r3, r3
 8001360:	461a      	mov	r2, r3
 8001362:	4b70      	ldr	r3, [pc, #448]	@ (8001524 <os_aes+0x44c>)
 8001364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	4053      	eors	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	b2db      	uxtb	r3, r3
 8001374:	461a      	mov	r2, r3
 8001376:	4b6c      	ldr	r3, [pc, #432]	@ (8001528 <os_aes+0x450>)
 8001378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800137c:	68ba      	ldr	r2, [r7, #8]
 800137e:	4053      	eors	r3, r2
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001384:	0c1b      	lsrs	r3, r3, #16
 8001386:	b2db      	uxtb	r3, r3
 8001388:	461a      	mov	r2, r3
 800138a:	4b68      	ldr	r3, [pc, #416]	@ (800152c <os_aes+0x454>)
 800138c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001390:	69fa      	ldr	r2, [r7, #28]
 8001392:	4053      	eors	r3, r2
 8001394:	61fb      	str	r3, [r7, #28]
 8001396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001398:	0e1b      	lsrs	r3, r3, #24
 800139a:	4a65      	ldr	r2, [pc, #404]	@ (8001530 <os_aes+0x458>)
 800139c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4053      	eors	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
			AES_expr4(t3, t0, t1, t2, a2);
 80013a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b5d      	ldr	r3, [pc, #372]	@ (8001524 <os_aes+0x44c>)
 80013ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	4053      	eors	r3, r2
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ba:	0a1b      	lsrs	r3, r3, #8
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	461a      	mov	r2, r3
 80013c0:	4b59      	ldr	r3, [pc, #356]	@ (8001528 <os_aes+0x450>)
 80013c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c6:	69fa      	ldr	r2, [r7, #28]
 80013c8:	4053      	eors	r3, r2
 80013ca:	61fb      	str	r3, [r7, #28]
 80013cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ce:	0c1b      	lsrs	r3, r3, #16
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b55      	ldr	r3, [pc, #340]	@ (800152c <os_aes+0x454>)
 80013d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4053      	eors	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
 80013e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e2:	0e1b      	lsrs	r3, r3, #24
 80013e4:	4a52      	ldr	r2, [pc, #328]	@ (8001530 <os_aes+0x458>)
 80013e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	4053      	eors	r3, r2
 80013ee:	60fb      	str	r3, [r7, #12]
			AES_expr4(t0, t1, t2, t3, a3);
 80013f0:	6a3b      	ldr	r3, [r7, #32]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b4b      	ldr	r3, [pc, #300]	@ (8001524 <os_aes+0x44c>)
 80013f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013fc:	69fa      	ldr	r2, [r7, #28]
 80013fe:	4053      	eors	r3, r2
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	0a1b      	lsrs	r3, r3, #8
 8001406:	b2db      	uxtb	r3, r3
 8001408:	461a      	mov	r2, r3
 800140a:	4b47      	ldr	r3, [pc, #284]	@ (8001528 <os_aes+0x450>)
 800140c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4053      	eors	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
 8001416:	6a3b      	ldr	r3, [r7, #32]
 8001418:	0c1b      	lsrs	r3, r3, #16
 800141a:	b2db      	uxtb	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	4b43      	ldr	r3, [pc, #268]	@ (800152c <os_aes+0x454>)
 8001420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	4053      	eors	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	6a3b      	ldr	r3, [r7, #32]
 800142c:	0e1b      	lsrs	r3, r3, #24
 800142e:	4a40      	ldr	r2, [pc, #256]	@ (8001530 <os_aes+0x458>)
 8001430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001434:	68ba      	ldr	r2, [r7, #8]
 8001436:	4053      	eors	r3, r2
 8001438:	60bb      	str	r3, [r7, #8]

			AES_key4(a1, a2, a3, a0, 8);
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800143e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001444:	627b      	str	r3, [r7, #36]	@ 0x24
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800144a:	623b      	str	r3, [r7, #32]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	62fb      	str	r3, [r7, #44]	@ 0x2c
			AES_expr4(a1, a2, a3, a0, t0);
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	461a      	mov	r2, r3
 8001458:	4b32      	ldr	r3, [pc, #200]	@ (8001524 <os_aes+0x44c>)
 800145a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800145e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001460:	4053      	eors	r3, r2
 8001462:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	0a1b      	lsrs	r3, r3, #8
 8001468:	b2db      	uxtb	r3, r3
 800146a:	461a      	mov	r2, r3
 800146c:	4b2e      	ldr	r3, [pc, #184]	@ (8001528 <os_aes+0x450>)
 800146e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001474:	4053      	eors	r3, r2
 8001476:	627b      	str	r3, [r7, #36]	@ 0x24
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	0c1b      	lsrs	r3, r3, #16
 800147c:	b2db      	uxtb	r3, r3
 800147e:	461a      	mov	r2, r3
 8001480:	4b2a      	ldr	r3, [pc, #168]	@ (800152c <os_aes+0x454>)
 8001482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001486:	6a3a      	ldr	r2, [r7, #32]
 8001488:	4053      	eors	r3, r2
 800148a:	623b      	str	r3, [r7, #32]
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	0e1b      	lsrs	r3, r3, #24
 8001490:	4a27      	ldr	r2, [pc, #156]	@ (8001530 <os_aes+0x458>)
 8001492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001496:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001498:	4053      	eors	r3, r2
 800149a:	62fb      	str	r3, [r7, #44]	@ 0x2c
			AES_expr4(a2, a3, a0, a1, t1);
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b20      	ldr	r3, [pc, #128]	@ (8001524 <os_aes+0x44c>)
 80014a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014aa:	4053      	eors	r3, r2
 80014ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	0a1b      	lsrs	r3, r3, #8
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001528 <os_aes+0x450>)
 80014b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014bc:	6a3a      	ldr	r2, [r7, #32]
 80014be:	4053      	eors	r3, r2
 80014c0:	623b      	str	r3, [r7, #32]
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	0c1b      	lsrs	r3, r3, #16
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b18      	ldr	r3, [pc, #96]	@ (800152c <os_aes+0x454>)
 80014cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014d2:	4053      	eors	r3, r2
 80014d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	0e1b      	lsrs	r3, r3, #24
 80014da:	4a15      	ldr	r2, [pc, #84]	@ (8001530 <os_aes+0x458>)
 80014dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80014e2:	4053      	eors	r3, r2
 80014e4:	62bb      	str	r3, [r7, #40]	@ 0x28
			AES_expr4(a3, a0, a1, a2, t2);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001524 <os_aes+0x44c>)
 80014ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f2:	6a3a      	ldr	r2, [r7, #32]
 80014f4:	4053      	eors	r3, r2
 80014f6:	623b      	str	r3, [r7, #32]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	0a1b      	lsrs	r3, r3, #8
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	461a      	mov	r2, r3
 8001500:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <os_aes+0x450>)
 8001502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001506:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001508:	4053      	eors	r3, r2
 800150a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	0c1b      	lsrs	r3, r3, #16
 8001510:	b2db      	uxtb	r3, r3
 8001512:	461a      	mov	r2, r3
 8001514:	4b05      	ldr	r3, [pc, #20]	@ (800152c <os_aes+0x454>)
 8001516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800151a:	e00b      	b.n	8001534 <os_aes+0x45c>
 800151c:	20000144 	.word	0x20000144
 8001520:	20000154 	.word	0x20000154
 8001524:	08010ed4 	.word	0x08010ed4
 8001528:	08010ad4 	.word	0x08010ad4
 800152c:	080106d4 	.word	0x080106d4
 8001530:	080102d4 	.word	0x080102d4
 8001534:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001536:	4053      	eors	r3, r2
 8001538:	62bb      	str	r3, [r7, #40]	@ 0x28
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	0e1b      	lsrs	r3, r3, #24
 800153e:	4aa1      	ldr	r2, [pc, #644]	@ (80017c4 <os_aes+0x6ec>)
 8001540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001544:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001546:	4053      	eors	r3, r2
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
			AES_expr4(a0, a1, a2, a3, t3);
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	461a      	mov	r2, r3
 8001550:	4b9d      	ldr	r3, [pc, #628]	@ (80017c8 <os_aes+0x6f0>)
 8001552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001556:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001558:	4053      	eors	r3, r2
 800155a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	0a1b      	lsrs	r3, r3, #8
 8001560:	b2db      	uxtb	r3, r3
 8001562:	461a      	mov	r2, r3
 8001564:	4b99      	ldr	r3, [pc, #612]	@ (80017cc <os_aes+0x6f4>)
 8001566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800156a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800156c:	4053      	eors	r3, r2
 800156e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	0c1b      	lsrs	r3, r3, #16
 8001574:	b2db      	uxtb	r3, r3
 8001576:	461a      	mov	r2, r3
 8001578:	4b95      	ldr	r3, [pc, #596]	@ (80017d0 <os_aes+0x6f8>)
 800157a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800157e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001580:	4053      	eors	r3, r2
 8001582:	627b      	str	r3, [r7, #36]	@ 0x24
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	0e1b      	lsrs	r3, r3, #24
 8001588:	4a8e      	ldr	r2, [pc, #568]	@ (80017c4 <os_aes+0x6ec>)
 800158a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158e:	6a3a      	ldr	r2, [r7, #32]
 8001590:	4053      	eors	r3, r2
 8001592:	623b      	str	r3, [r7, #32]
		} while ((ki += 8) < ke);
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	3320      	adds	r3, #32
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	429a      	cmp	r2, r3
 80015a0:	f4ff aeab 	bcc.w	80012fa <os_aes+0x222>

		AES_key4(t1, t2, t3, t0, 4);
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	61bb      	str	r3, [r7, #24]
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	61fb      	str	r3, [r7, #28]
		AES_expr4(t1, t2, t3, t0, a0);
 80015bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	461a      	mov	r2, r3
 80015c2:	4b81      	ldr	r3, [pc, #516]	@ (80017c8 <os_aes+0x6f0>)
 80015c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4053      	eors	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
 80015ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015d0:	0a1b      	lsrs	r3, r3, #8
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b7d      	ldr	r3, [pc, #500]	@ (80017cc <os_aes+0x6f4>)
 80015d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	4053      	eors	r3, r2
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015e4:	0c1b      	lsrs	r3, r3, #16
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b79      	ldr	r3, [pc, #484]	@ (80017d0 <os_aes+0x6f8>)
 80015ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f0:	68ba      	ldr	r2, [r7, #8]
 80015f2:	4053      	eors	r3, r2
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015f8:	0e1b      	lsrs	r3, r3, #24
 80015fa:	4a72      	ldr	r2, [pc, #456]	@ (80017c4 <os_aes+0x6ec>)
 80015fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001600:	69fa      	ldr	r2, [r7, #28]
 8001602:	4053      	eors	r3, r2
 8001604:	61fb      	str	r3, [r7, #28]
		AES_expr4(t2, t3, t0, t1, a1);
 8001606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001608:	b2db      	uxtb	r3, r3
 800160a:	461a      	mov	r2, r3
 800160c:	4b6e      	ldr	r3, [pc, #440]	@ (80017c8 <os_aes+0x6f0>)
 800160e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	4053      	eors	r3, r2
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800161a:	0a1b      	lsrs	r3, r3, #8
 800161c:	b2db      	uxtb	r3, r3
 800161e:	461a      	mov	r2, r3
 8001620:	4b6a      	ldr	r3, [pc, #424]	@ (80017cc <os_aes+0x6f4>)
 8001622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	4053      	eors	r3, r2
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800162e:	0c1b      	lsrs	r3, r3, #16
 8001630:	b2db      	uxtb	r3, r3
 8001632:	461a      	mov	r2, r3
 8001634:	4b66      	ldr	r3, [pc, #408]	@ (80017d0 <os_aes+0x6f8>)
 8001636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800163a:	69fa      	ldr	r2, [r7, #28]
 800163c:	4053      	eors	r3, r2
 800163e:	61fb      	str	r3, [r7, #28]
 8001640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001642:	0e1b      	lsrs	r3, r3, #24
 8001644:	4a5f      	ldr	r2, [pc, #380]	@ (80017c4 <os_aes+0x6ec>)
 8001646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4053      	eors	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
		AES_expr4(t3, t0, t1, t2, a2);
 8001650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001652:	b2db      	uxtb	r3, r3
 8001654:	461a      	mov	r2, r3
 8001656:	4b5c      	ldr	r3, [pc, #368]	@ (80017c8 <os_aes+0x6f0>)
 8001658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800165c:	68ba      	ldr	r2, [r7, #8]
 800165e:	4053      	eors	r3, r2
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001664:	0a1b      	lsrs	r3, r3, #8
 8001666:	b2db      	uxtb	r3, r3
 8001668:	461a      	mov	r2, r3
 800166a:	4b58      	ldr	r3, [pc, #352]	@ (80017cc <os_aes+0x6f4>)
 800166c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001670:	69fa      	ldr	r2, [r7, #28]
 8001672:	4053      	eors	r3, r2
 8001674:	61fb      	str	r3, [r7, #28]
 8001676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001678:	0c1b      	lsrs	r3, r3, #16
 800167a:	b2db      	uxtb	r3, r3
 800167c:	461a      	mov	r2, r3
 800167e:	4b54      	ldr	r3, [pc, #336]	@ (80017d0 <os_aes+0x6f8>)
 8001680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4053      	eors	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
 800168a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168c:	0e1b      	lsrs	r3, r3, #24
 800168e:	4a4d      	ldr	r2, [pc, #308]	@ (80017c4 <os_aes+0x6ec>)
 8001690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	4053      	eors	r3, r2
 8001698:	60fb      	str	r3, [r7, #12]
		AES_expr4(t0, t1, t2, t3, a3);
 800169a:	6a3b      	ldr	r3, [r7, #32]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	461a      	mov	r2, r3
 80016a0:	4b49      	ldr	r3, [pc, #292]	@ (80017c8 <os_aes+0x6f0>)
 80016a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a6:	69fa      	ldr	r2, [r7, #28]
 80016a8:	4053      	eors	r3, r2
 80016aa:	61fb      	str	r3, [r7, #28]
 80016ac:	6a3b      	ldr	r3, [r7, #32]
 80016ae:	0a1b      	lsrs	r3, r3, #8
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	461a      	mov	r2, r3
 80016b4:	4b45      	ldr	r3, [pc, #276]	@ (80017cc <os_aes+0x6f4>)
 80016b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4053      	eors	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
 80016c0:	6a3b      	ldr	r3, [r7, #32]
 80016c2:	0c1b      	lsrs	r3, r3, #16
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	461a      	mov	r2, r3
 80016c8:	4b41      	ldr	r3, [pc, #260]	@ (80017d0 <os_aes+0x6f8>)
 80016ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	4053      	eors	r3, r2
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	6a3b      	ldr	r3, [r7, #32]
 80016d6:	0e1b      	lsrs	r3, r3, #24
 80016d8:	4a3a      	ldr	r2, [pc, #232]	@ (80017c4 <os_aes+0x6ec>)
 80016da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	4053      	eors	r3, r2
 80016e2:	60bb      	str	r3, [r7, #8]

		AES_expr(a0, t0, t1, t2, t3, 8);
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	0e1b      	lsrs	r3, r3, #24
 80016ee:	4a39      	ldr	r2, [pc, #228]	@ (80017d4 <os_aes+0x6fc>)
 80016f0:	5cd3      	ldrb	r3, [r2, r3]
 80016f2:	061b      	lsls	r3, r3, #24
 80016f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016f6:	4053      	eors	r3, r2
 80016f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	0c1b      	lsrs	r3, r3, #16
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	461a      	mov	r2, r3
 8001702:	4b34      	ldr	r3, [pc, #208]	@ (80017d4 <os_aes+0x6fc>)
 8001704:	5c9b      	ldrb	r3, [r3, r2]
 8001706:	041b      	lsls	r3, r3, #16
 8001708:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800170a:	4053      	eors	r3, r2
 800170c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	0a1b      	lsrs	r3, r3, #8
 8001712:	b2db      	uxtb	r3, r3
 8001714:	461a      	mov	r2, r3
 8001716:	4b2f      	ldr	r3, [pc, #188]	@ (80017d4 <os_aes+0x6fc>)
 8001718:	5c9b      	ldrb	r3, [r3, r2]
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800171e:	4053      	eors	r3, r2
 8001720:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	461a      	mov	r2, r3
 8001728:	4b2a      	ldr	r3, [pc, #168]	@ (80017d4 <os_aes+0x6fc>)
 800172a:	5c9b      	ldrb	r3, [r3, r2]
 800172c:	461a      	mov	r2, r3
 800172e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001730:	4053      	eors	r3, r2
 8001732:	62fb      	str	r3, [r7, #44]	@ 0x2c
		AES_expr(a1, t1, t2, t3, t0, 9);
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001738:	62bb      	str	r3, [r7, #40]	@ 0x28
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	0e1b      	lsrs	r3, r3, #24
 800173e:	4a25      	ldr	r2, [pc, #148]	@ (80017d4 <os_aes+0x6fc>)
 8001740:	5cd3      	ldrb	r3, [r2, r3]
 8001742:	061b      	lsls	r3, r3, #24
 8001744:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001746:	4053      	eors	r3, r2
 8001748:	62bb      	str	r3, [r7, #40]	@ 0x28
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	0c1b      	lsrs	r3, r3, #16
 800174e:	b2db      	uxtb	r3, r3
 8001750:	461a      	mov	r2, r3
 8001752:	4b20      	ldr	r3, [pc, #128]	@ (80017d4 <os_aes+0x6fc>)
 8001754:	5c9b      	ldrb	r3, [r3, r2]
 8001756:	041b      	lsls	r3, r3, #16
 8001758:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800175a:	4053      	eors	r3, r2
 800175c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	0a1b      	lsrs	r3, r3, #8
 8001762:	b2db      	uxtb	r3, r3
 8001764:	461a      	mov	r2, r3
 8001766:	4b1b      	ldr	r3, [pc, #108]	@ (80017d4 <os_aes+0x6fc>)
 8001768:	5c9b      	ldrb	r3, [r3, r2]
 800176a:	021b      	lsls	r3, r3, #8
 800176c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800176e:	4053      	eors	r3, r2
 8001770:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	b2db      	uxtb	r3, r3
 8001776:	461a      	mov	r2, r3
 8001778:	4b16      	ldr	r3, [pc, #88]	@ (80017d4 <os_aes+0x6fc>)
 800177a:	5c9b      	ldrb	r3, [r3, r2]
 800177c:	461a      	mov	r2, r3
 800177e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001780:	4053      	eors	r3, r2
 8001782:	62bb      	str	r3, [r7, #40]	@ 0x28
		AES_expr(a2, t2, t3, t0, t1, 10);
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001788:	627b      	str	r3, [r7, #36]	@ 0x24
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	0e1b      	lsrs	r3, r3, #24
 800178e:	4a11      	ldr	r2, [pc, #68]	@ (80017d4 <os_aes+0x6fc>)
 8001790:	5cd3      	ldrb	r3, [r2, r3]
 8001792:	061b      	lsls	r3, r3, #24
 8001794:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001796:	4053      	eors	r3, r2
 8001798:	627b      	str	r3, [r7, #36]	@ 0x24
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	0c1b      	lsrs	r3, r3, #16
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b0c      	ldr	r3, [pc, #48]	@ (80017d4 <os_aes+0x6fc>)
 80017a4:	5c9b      	ldrb	r3, [r3, r2]
 80017a6:	041b      	lsls	r3, r3, #16
 80017a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017aa:	4053      	eors	r3, r2
 80017ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b07      	ldr	r3, [pc, #28]	@ (80017d4 <os_aes+0x6fc>)
 80017b8:	5c9b      	ldrb	r3, [r3, r2]
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017be:	4053      	eors	r3, r2
 80017c0:	e00a      	b.n	80017d8 <os_aes+0x700>
 80017c2:	bf00      	nop
 80017c4:	080102d4 	.word	0x080102d4
 80017c8:	08010ed4 	.word	0x08010ed4
 80017cc:	08010ad4 	.word	0x08010ad4
 80017d0:	080106d4 	.word	0x080106d4
 80017d4:	080101d4 	.word	0x080101d4
 80017d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	461a      	mov	r2, r3
 80017e0:	4b5f      	ldr	r3, [pc, #380]	@ (8001960 <os_aes+0x888>)
 80017e2:	5c9b      	ldrb	r3, [r3, r2]
 80017e4:	461a      	mov	r2, r3
 80017e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e8:	4053      	eors	r3, r2
 80017ea:	627b      	str	r3, [r7, #36]	@ 0x24
		AES_expr(a3, t3, t0, t1, t2, 11);
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f0:	623b      	str	r3, [r7, #32]
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	0e1b      	lsrs	r3, r3, #24
 80017f6:	4a5a      	ldr	r2, [pc, #360]	@ (8001960 <os_aes+0x888>)
 80017f8:	5cd3      	ldrb	r3, [r2, r3]
 80017fa:	061b      	lsls	r3, r3, #24
 80017fc:	6a3a      	ldr	r2, [r7, #32]
 80017fe:	4053      	eors	r3, r2
 8001800:	623b      	str	r3, [r7, #32]
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	0c1b      	lsrs	r3, r3, #16
 8001806:	b2db      	uxtb	r3, r3
 8001808:	461a      	mov	r2, r3
 800180a:	4b55      	ldr	r3, [pc, #340]	@ (8001960 <os_aes+0x888>)
 800180c:	5c9b      	ldrb	r3, [r3, r2]
 800180e:	041b      	lsls	r3, r3, #16
 8001810:	6a3a      	ldr	r2, [r7, #32]
 8001812:	4053      	eors	r3, r2
 8001814:	623b      	str	r3, [r7, #32]
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	0a1b      	lsrs	r3, r3, #8
 800181a:	b2db      	uxtb	r3, r3
 800181c:	461a      	mov	r2, r3
 800181e:	4b50      	ldr	r3, [pc, #320]	@ (8001960 <os_aes+0x888>)
 8001820:	5c9b      	ldrb	r3, [r3, r2]
 8001822:	021b      	lsls	r3, r3, #8
 8001824:	6a3a      	ldr	r2, [r7, #32]
 8001826:	4053      	eors	r3, r2
 8001828:	623b      	str	r3, [r7, #32]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	461a      	mov	r2, r3
 8001830:	4b4b      	ldr	r3, [pc, #300]	@ (8001960 <os_aes+0x888>)
 8001832:	5c9b      	ldrb	r3, [r3, r2]
 8001834:	461a      	mov	r2, r3
 8001836:	6a3b      	ldr	r3, [r7, #32]
 8001838:	4053      	eors	r3, r2
 800183a:	623b      	str	r3, [r7, #32]
		// result of AES encryption in a0-a3

		if (mode & AES_MIC) {
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d056      	beq.n	80018f4 <os_aes+0x81c>
			if ((t1 = (mode & AES_MICSUB) >> 4) != 0) { // last block
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	111b      	asrs	r3, r3, #4
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	61bb      	str	r3, [r7, #24]
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d041      	beq.n	80018da <os_aes+0x802>
				do {
					// compute CMAC subkey K1 and K2
					t0 = a0 >> 31; // save MSB
 8001856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001858:	0fdb      	lsrs	r3, r3, #31
 800185a:	61fb      	str	r3, [r7, #28]
					a0 = (a0 << 1) | (a1 >> 31);
 800185c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800185e:	005a      	lsls	r2, r3, #1
 8001860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001862:	0fdb      	lsrs	r3, r3, #31
 8001864:	4313      	orrs	r3, r2
 8001866:	62fb      	str	r3, [r7, #44]	@ 0x2c
					a1 = (a1 << 1) | (a2 >> 31);
 8001868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800186a:	005a      	lsls	r2, r3, #1
 800186c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186e:	0fdb      	lsrs	r3, r3, #31
 8001870:	4313      	orrs	r3, r2
 8001872:	62bb      	str	r3, [r7, #40]	@ 0x28
					a2 = (a2 << 1) | (a3 >> 31);
 8001874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001876:	005a      	lsls	r2, r3, #1
 8001878:	6a3b      	ldr	r3, [r7, #32]
 800187a:	0fdb      	lsrs	r3, r3, #31
 800187c:	4313      	orrs	r3, r2
 800187e:	627b      	str	r3, [r7, #36]	@ 0x24
					a3 = (a3 << 1);
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	623b      	str	r3, [r7, #32]
					if (t0)
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <os_aes+0x7bc>
						a3 ^= 0x87;
 800188c:	6a3b      	ldr	r3, [r7, #32]
 800188e:	f083 0387 	eor.w	r3, r3, #135	@ 0x87
 8001892:	623b      	str	r3, [r7, #32]
				} while (--t1);
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	3b01      	subs	r3, #1
 8001898:	61bb      	str	r3, [r7, #24]
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1da      	bne.n	8001856 <os_aes+0x77e>

				AESAUX[0] ^= a0;
 80018a0:	4b30      	ldr	r3, [pc, #192]	@ (8001964 <os_aes+0x88c>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018a6:	4053      	eors	r3, r2
 80018a8:	4a2e      	ldr	r2, [pc, #184]	@ (8001964 <os_aes+0x88c>)
 80018aa:	6013      	str	r3, [r2, #0]
				AESAUX[1] ^= a1;
 80018ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001964 <os_aes+0x88c>)
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018b2:	4053      	eors	r3, r2
 80018b4:	4a2b      	ldr	r2, [pc, #172]	@ (8001964 <os_aes+0x88c>)
 80018b6:	6053      	str	r3, [r2, #4]
				AESAUX[2] ^= a2;
 80018b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001964 <os_aes+0x88c>)
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018be:	4053      	eors	r3, r2
 80018c0:	4a28      	ldr	r2, [pc, #160]	@ (8001964 <os_aes+0x88c>)
 80018c2:	6093      	str	r3, [r2, #8]
				AESAUX[3] ^= a3;
 80018c4:	4b27      	ldr	r3, [pc, #156]	@ (8001964 <os_aes+0x88c>)
 80018c6:	68da      	ldr	r2, [r3, #12]
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	4053      	eors	r3, r2
 80018cc:	4a25      	ldr	r2, [pc, #148]	@ (8001964 <os_aes+0x88c>)
 80018ce:	60d3      	str	r3, [r2, #12]
				mode &= ~AES_MICSUB;
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80018d6:	71fb      	strb	r3, [r7, #7]
				goto LOADDATA;
 80018d8:	e4ad      	b.n	8001236 <os_aes+0x15e>
			} else {
				// save cipher block as new iv
				AESAUX[0] = a0;
 80018da:	4a22      	ldr	r2, [pc, #136]	@ (8001964 <os_aes+0x88c>)
 80018dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018de:	6013      	str	r3, [r2, #0]
				AESAUX[1] = a1;
 80018e0:	4a20      	ldr	r2, [pc, #128]	@ (8001964 <os_aes+0x88c>)
 80018e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018e4:	6053      	str	r3, [r2, #4]
				AESAUX[2] = a2;
 80018e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001964 <os_aes+0x88c>)
 80018e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ea:	6093      	str	r3, [r2, #8]
				AESAUX[3] = a3;
 80018ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001964 <os_aes+0x88c>)
 80018ee:	6a3b      	ldr	r3, [r7, #32]
 80018f0:	60d3      	str	r3, [r2, #12]
 80018f2:	e094      	b.n	8001a1e <os_aes+0x946>
			}
		} else { // CIPHER
			if (mode & AES_CTR) { // xor block (partially)
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	f003 0304 	and.w	r3, r3, #4
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d034      	beq.n	8001968 <os_aes+0x890>
				t0 = (len > 16) ? 16 : len;
 80018fe:	88bb      	ldrh	r3, [r7, #4]
 8001900:	2b10      	cmp	r3, #16
 8001902:	bf28      	it	cs
 8001904:	2310      	movcs	r3, #16
 8001906:	b29b      	uxth	r3, r3
 8001908:	61fb      	str	r3, [r7, #28]
				for (t1 = 0; t1 < t0; t1++) {
 800190a:	2300      	movs	r3, #0
 800190c:	61bb      	str	r3, [r7, #24]
 800190e:	e01d      	b.n	800194c <os_aes+0x874>
					buf[t1] ^= (a0 >> 24);
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	4413      	add	r3, r2
 8001916:	7819      	ldrb	r1, [r3, #0]
 8001918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800191a:	0e1b      	lsrs	r3, r3, #24
 800191c:	b2da      	uxtb	r2, r3
 800191e:	6838      	ldr	r0, [r7, #0]
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	4403      	add	r3, r0
 8001924:	404a      	eors	r2, r1
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	701a      	strb	r2, [r3, #0]
					a0 <<= 8;
 800192a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800192c:	021b      	lsls	r3, r3, #8
 800192e:	62fb      	str	r3, [r7, #44]	@ 0x2c
					if ((t1 & 3) == 3) {
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	2b03      	cmp	r3, #3
 8001938:	d105      	bne.n	8001946 <os_aes+0x86e>
						a0 = a1;
 800193a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800193c:	62fb      	str	r3, [r7, #44]	@ 0x2c
						a1 = a2;
 800193e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001940:	62bb      	str	r3, [r7, #40]	@ 0x28
						a2 = a3;
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	627b      	str	r3, [r7, #36]	@ 0x24
				for (t1 = 0; t1 < t0; t1++) {
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	3301      	adds	r3, #1
 800194a:	61bb      	str	r3, [r7, #24]
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	429a      	cmp	r2, r3
 8001952:	d3dd      	bcc.n	8001910 <os_aes+0x838>
					}
				}
				// update counter
				AESAUX[3]++;
 8001954:	4b03      	ldr	r3, [pc, #12]	@ (8001964 <os_aes+0x88c>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	3301      	adds	r3, #1
 800195a:	4a02      	ldr	r2, [pc, #8]	@ (8001964 <os_aes+0x88c>)
 800195c:	60d3      	str	r3, [r2, #12]
 800195e:	e05e      	b.n	8001a1e <os_aes+0x946>
 8001960:	080101d4 	.word	0x080101d4
 8001964:	20000144 	.word	0x20000144
			} else { // ECB
				// store block
				msbf4_write(buf + 0, a0);
 8001968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800196a:	0e1b      	lsrs	r3, r3, #24
 800196c:	b2da      	uxtb	r2, r3
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	701a      	strb	r2, [r3, #0]
 8001972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001974:	0c1a      	lsrs	r2, r3, #16
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	3301      	adds	r3, #1
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	701a      	strb	r2, [r3, #0]
 800197e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001980:	0a1a      	lsrs	r2, r3, #8
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	3302      	adds	r3, #2
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	701a      	strb	r2, [r3, #0]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	3303      	adds	r3, #3
 800198e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	701a      	strb	r2, [r3, #0]
				msbf4_write(buf + 4, a1);
 8001994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001996:	0e1a      	lsrs	r2, r3, #24
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	3304      	adds	r3, #4
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	701a      	strb	r2, [r3, #0]
 80019a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019a2:	0c1a      	lsrs	r2, r3, #16
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	3305      	adds	r3, #5
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	701a      	strb	r2, [r3, #0]
 80019ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ae:	0a1a      	lsrs	r2, r3, #8
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	3306      	adds	r3, #6
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	701a      	strb	r2, [r3, #0]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	3307      	adds	r3, #7
 80019bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	701a      	strb	r2, [r3, #0]
				msbf4_write(buf + 8, a2);
 80019c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c4:	0e1a      	lsrs	r2, r3, #24
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	3308      	adds	r3, #8
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	701a      	strb	r2, [r3, #0]
 80019ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d0:	0c1a      	lsrs	r2, r3, #16
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	3309      	adds	r3, #9
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	701a      	strb	r2, [r3, #0]
 80019da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019dc:	0a1a      	lsrs	r2, r3, #8
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	330a      	adds	r3, #10
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	701a      	strb	r2, [r3, #0]
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	330b      	adds	r3, #11
 80019ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	701a      	strb	r2, [r3, #0]
				msbf4_write(buf + 12, a3);
 80019f0:	6a3b      	ldr	r3, [r7, #32]
 80019f2:	0e1a      	lsrs	r2, r3, #24
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	330c      	adds	r3, #12
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	701a      	strb	r2, [r3, #0]
 80019fc:	6a3b      	ldr	r3, [r7, #32]
 80019fe:	0c1a      	lsrs	r2, r3, #16
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	330d      	adds	r3, #13
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	701a      	strb	r2, [r3, #0]
 8001a08:	6a3b      	ldr	r3, [r7, #32]
 8001a0a:	0a1a      	lsrs	r2, r3, #8
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	330e      	adds	r3, #14
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	701a      	strb	r2, [r3, #0]
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	330f      	adds	r3, #15
 8001a18:	6a3a      	ldr	r2, [r7, #32]
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	701a      	strb	r2, [r3, #0]
			}
		}

		// update block state
		if ((mode & AES_MIC) == 0 || (mode & AES_MICNOAUX)) {
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d004      	beq.n	8001a32 <os_aes+0x95a>
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d005      	beq.n	8001a3e <os_aes+0x966>
			buf += 16;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	3310      	adds	r3, #16
 8001a36:	603b      	str	r3, [r7, #0]
			len -= 16;
 8001a38:	88bb      	ldrh	r3, [r7, #4]
 8001a3a:	3b10      	subs	r3, #16
 8001a3c:	80bb      	strh	r3, [r7, #4]
		}
		mode |= AES_MICNOAUX;
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	f043 0308 	orr.w	r3, r3, #8
 8001a44:	71fb      	strb	r3, [r7, #7]
	while ((signed char) len > 0) {
 8001a46:	88bb      	ldrh	r3, [r7, #4]
 8001a48:	b25b      	sxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f73f abba 	bgt.w	80011c4 <os_aes+0xec>
	}
	return AESAUX[0];
 8001a50:	4b02      	ldr	r3, [pc, #8]	@ (8001a5c <os_aes+0x984>)
 8001a52:	681b      	ldr	r3, [r3, #0]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3730      	adds	r7, #48	@ 0x30
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000144 	.word	0x20000144

08001a60 <bme68x_init>:
/* @brief This API reads the chip-id of the sensor which is the first step to
 * verify the sensor and also calibrates the sensor
 * As this API is the entry point, call this API before using other APIs.
 */
int8_t bme68x_init(struct bme68x_dev *dev)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	rslt = bme68x_soft_reset(dev);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 f901 	bl	8001c70 <bme68x_soft_reset>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME68X_OK) {
 8001a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d120      	bne.n	8001abc <bme68x_init+0x5c>
		rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	20d0      	movs	r0, #208	@ 0xd0
 8001a82:	f000 f8b1 	bl	8001be8 <bme68x_get_regs>
 8001a86:	4603      	mov	r3, r0
 8001a88:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME68X_OK) {
 8001a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d114      	bne.n	8001abc <bme68x_init+0x5c>
			if (dev->chip_id == BME68X_CHIP_ID) {
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b61      	cmp	r3, #97	@ 0x61
 8001a98:	d10e      	bne.n	8001ab8 <bme68x_init+0x58>
				/* Read Variant ID */
				rslt = read_variant_id(dev);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f002 f84c 	bl	8003b38 <read_variant_id>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	73fb      	strb	r3, [r7, #15]

				if (rslt == BME68X_OK) {
 8001aa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d107      	bne.n	8001abc <bme68x_init+0x5c>
					/* Get the Calibration data */
					rslt = get_calib_data(dev);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f001 ff3f 	bl	8003930 <get_calib_data>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	73fb      	strb	r3, [r7, #15]
 8001ab6:	e001      	b.n	8001abc <bme68x_init+0x5c>
				}
			} else {
				rslt = BME68X_E_DEV_NOT_FOUND;
 8001ab8:	23fd      	movs	r3, #253	@ 0xfd
 8001aba:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return rslt;
 8001abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <bme68x_set_regs>:
/*
 * @brief This API writes the given data to the register address of the sensor
 */
int8_t bme68x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data,
		uint32_t len, struct bme68x_dev *dev)
{
 8001ac8:	b5b0      	push	{r4, r5, r7, lr}
 8001aca:	b08a      	sub	sp, #40	@ 0x28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	603b      	str	r3, [r7, #0]
	int8_t rslt;

	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	f107 0314 	add.w	r3, r7, #20
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001ae8:	6838      	ldr	r0, [r7, #0]
 8001aea:	f001 fcfb 	bl	80034e4 <null_ptr_check>
 8001aee:	4603      	mov	r3, r0
 8001af0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if ((rslt == BME68X_OK) && reg_addr && reg_data) {
 8001af4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d16c      	bne.n	8001bd6 <bme68x_set_regs+0x10e>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d069      	beq.n	8001bd6 <bme68x_set_regs+0x10e>
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d066      	beq.n	8001bd6 <bme68x_set_regs+0x10e>
		if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2))) {
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d05d      	beq.n	8001bca <bme68x_set_regs+0x102>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b0a      	cmp	r3, #10
 8001b12:	d85a      	bhi.n	8001bca <bme68x_set_regs+0x102>
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
 8001b14:	2300      	movs	r3, #0
 8001b16:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001b18:	e034      	b.n	8001b84 <bme68x_set_regs+0xbc>
				if (dev->intf == BME68X_SPI_INTF) {
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	7b1b      	ldrb	r3, [r3, #12]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d118      	bne.n	8001b54 <bme68x_set_regs+0x8c>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 8001b22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	4413      	add	r3, r2
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	6839      	ldr	r1, [r7, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f001 fc18 	bl	8003362 <set_mem_page>
 8001b32:	4603      	mov	r3, r0
 8001b34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8001b38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	781a      	ldrb	r2, [r3, #0]
 8001b40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	3328      	adds	r3, #40	@ 0x28
 8001b4c:	443b      	add	r3, r7
 8001b4e:	f803 2c18 	strb.w	r2, [r3, #-24]
 8001b52:	e009      	b.n	8001b68 <bme68x_set_regs+0xa0>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
 8001b54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	441a      	add	r2, r3
 8001b5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	7812      	ldrb	r2, [r2, #0]
 8001b60:	3328      	adds	r3, #40	@ 0x28
 8001b62:	443b      	add	r3, r7
 8001b64:	f803 2c18 	strb.w	r2, [r3, #-24]
				}

				tmp_buff[(2 * index) + 1] = reg_data[index];
 8001b68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b6a:	68ba      	ldr	r2, [r7, #8]
 8001b6c:	441a      	add	r2, r3
 8001b6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	3301      	adds	r3, #1
 8001b74:	7812      	ldrb	r2, [r2, #0]
 8001b76:	3328      	adds	r3, #40	@ 0x28
 8001b78:	443b      	add	r3, r7
 8001b7a:	f803 2c18 	strb.w	r2, [r3, #-24]
			for (index = 0; index < len; index++) {
 8001b7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b80:	3301      	adds	r3, #1
 8001b82:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001b84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d8c6      	bhi.n	8001b1a <bme68x_set_regs+0x52>
			}

			/* Write the interleaved array */
			if (rslt == BME68X_OK) {
 8001b8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d11e      	bne.n	8001bd2 <bme68x_set_regs+0x10a>
				dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1],
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8001b98:	7c38      	ldrb	r0, [r7, #16]
						(2 * len) - 1, dev->intf_ptr);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	005b      	lsls	r3, r3, #1
				dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1],
 8001b9e:	1e5a      	subs	r2, r3, #1
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685d      	ldr	r5, [r3, #4]
 8001ba4:	f107 0310 	add.w	r3, r7, #16
 8001ba8:	1c59      	adds	r1, r3, #1
 8001baa:	462b      	mov	r3, r5
 8001bac:	47a0      	blx	r4
 8001bae:	4603      	mov	r3, r0
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
				if (dev->intf_rslt != 0) {
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d007      	beq.n	8001bd2 <bme68x_set_regs+0x10a>
					rslt = BME68X_E_COM_FAIL;
 8001bc2:	23fe      	movs	r3, #254	@ 0xfe
 8001bc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (rslt == BME68X_OK) {
 8001bc8:	e003      	b.n	8001bd2 <bme68x_set_regs+0x10a>
				}
			}
		} else {
			rslt = BME68X_E_INVALID_LENGTH;
 8001bca:	23fc      	movs	r3, #252	@ 0xfc
 8001bcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2))) {
 8001bd0:	e004      	b.n	8001bdc <bme68x_set_regs+0x114>
			if (rslt == BME68X_OK) {
 8001bd2:	bf00      	nop
		if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2))) {
 8001bd4:	e002      	b.n	8001bdc <bme68x_set_regs+0x114>
		}
	} else {
		rslt = BME68X_E_NULL_PTR;
 8001bd6:	23ff      	movs	r3, #255	@ 0xff
 8001bd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return rslt;
 8001bdc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3728      	adds	r7, #40	@ 0x28
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bdb0      	pop	{r4, r5, r7, pc}

08001be8 <bme68x_get_regs>:
/*
 * @brief This API reads the data from the given register address of sensor.
 */
int8_t bme68x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len,
		struct bme68x_dev *dev)
{
 8001be8:	b590      	push	{r4, r7, lr}
 8001bea:	b087      	sub	sp, #28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
 8001bf2:	603b      	str	r3, [r7, #0]
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001bf8:	6838      	ldr	r0, [r7, #0]
 8001bfa:	f001 fc73 	bl	80034e4 <null_ptr_check>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	75fb      	strb	r3, [r7, #23]
	if ((rslt == BME68X_OK) && reg_data) {
 8001c02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d12a      	bne.n	8001c60 <bme68x_get_regs+0x78>
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d027      	beq.n	8001c60 <bme68x_get_regs+0x78>
		if (dev->intf == BME68X_SPI_INTF) {
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	7b1b      	ldrb	r3, [r3, #12]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d10e      	bne.n	8001c36 <bme68x_get_regs+0x4e>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	6839      	ldr	r1, [r7, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f001 fba0 	bl	8003362 <set_mem_page>
 8001c22:	4603      	mov	r3, r0
 8001c24:	75fb      	strb	r3, [r7, #23]
			if (rslt == BME68X_OK) {
 8001c26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d103      	bne.n	8001c36 <bme68x_get_regs+0x4e>
				reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 8001c2e:	7bfb      	ldrb	r3, [r7, #15]
 8001c30:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c34:	73fb      	strb	r3, [r7, #15]
			}
		}

		dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	7bf8      	ldrb	r0, [r7, #15]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	68b9      	ldr	r1, [r7, #8]
 8001c44:	47a0      	blx	r4
 8001c46:	4603      	mov	r3, r0
 8001c48:	461a      	mov	r2, r3
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		if (dev->intf_rslt != 0) {
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d004      	beq.n	8001c64 <bme68x_get_regs+0x7c>
			rslt = BME68X_E_COM_FAIL;
 8001c5a:	23fe      	movs	r3, #254	@ 0xfe
 8001c5c:	75fb      	strb	r3, [r7, #23]
		if (dev->intf_rslt != 0) {
 8001c5e:	e001      	b.n	8001c64 <bme68x_get_regs+0x7c>
		}
	} else {
		rslt = BME68X_E_NULL_PTR;
 8001c60:	23ff      	movs	r3, #255	@ 0xff
 8001c62:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001c64:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	371c      	adds	r7, #28
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd90      	pop	{r4, r7, pc}

08001c70 <bme68x_soft_reset>:

/*
 * @brief This API soft-resets the sensor.
 */
int8_t bme68x_soft_reset(struct bme68x_dev *dev)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 8001c78:	23e0      	movs	r3, #224	@ 0xe0
 8001c7a:	73bb      	strb	r3, [r7, #14]

	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 8001c7c:	23b6      	movs	r3, #182	@ 0xb6
 8001c7e:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f001 fc2f 	bl	80034e4 <null_ptr_check>
 8001c86:	4603      	mov	r3, r0
 8001c88:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME68X_OK) {
 8001c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d12b      	bne.n	8001cea <bme68x_soft_reset+0x7a>
		if (dev->intf == BME68X_SPI_INTF) {
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	7b1b      	ldrb	r3, [r3, #12]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d104      	bne.n	8001ca4 <bme68x_soft_reset+0x34>
			rslt = get_mem_page(dev);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f001 fbc6 	bl	800342c <get_mem_page>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	73fb      	strb	r3, [r7, #15]
		}

		/* Reset the device */
		if (rslt == BME68X_OK) {
 8001ca4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d11e      	bne.n	8001cea <bme68x_soft_reset+0x7a>
			rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001cac:	f107 010d 	add.w	r1, r7, #13
 8001cb0:	f107 000e 	add.w	r0, r7, #14
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f7ff ff06 	bl	8001ac8 <bme68x_set_regs>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	73fb      	strb	r3, [r7, #15]

			/* Wait for 5ms */
			dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	6852      	ldr	r2, [r2, #4]
 8001cc8:	4611      	mov	r1, r2
 8001cca:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001cce:	4798      	blx	r3
			if (rslt == BME68X_OK) {
 8001cd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d108      	bne.n	8001cea <bme68x_soft_reset+0x7a>
				/* After reset get the memory page */
				if (dev->intf == BME68X_SPI_INTF) {
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	7b1b      	ldrb	r3, [r3, #12]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d104      	bne.n	8001cea <bme68x_soft_reset+0x7a>
					rslt = get_mem_page(dev);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f001 fba3 	bl	800342c <get_mem_page>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	73fb      	strb	r3, [r7, #15]
				}
			}
		}
	}

	return rslt;
 8001cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <bme68x_set_conf>:

/*
 * @brief This API is used to set the oversampling, filter and odr configuration
 */
int8_t bme68x_set_conf(struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t odr20 = 0, odr3 = 1;
 8001d02:	2300      	movs	r3, #0
 8001d04:	77bb      	strb	r3, [r7, #30]
 8001d06:	2301      	movs	r3, #1
 8001d08:	777b      	strb	r3, [r7, #29]
	uint8_t current_op_mode;

	/* Register data starting from BME68X_REG_CTRL_GAS_1(0x71) up to BME68X_REG_CONFIG(0x75) */
	uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 8001d0a:	4a7c      	ldr	r2, [pc, #496]	@ (8001efc <bme68x_set_conf+0x204>)
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d14:	6018      	str	r0, [r3, #0]
 8001d16:	3304      	adds	r3, #4
 8001d18:	7019      	strb	r1, [r3, #0]
	uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	2300      	movs	r3, #0
 8001d20:	743b      	strb	r3, [r7, #16]

	rslt = bme68x_get_op_mode(&current_op_mode, dev);
 8001d22:	f107 031c 	add.w	r3, r7, #28
 8001d26:	6839      	ldr	r1, [r7, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f000 f94a 	bl	8001fc2 <bme68x_get_op_mode>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	77fb      	strb	r3, [r7, #31]
	if (rslt == BME68X_OK) {
 8001d32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d105      	bne.n	8001d46 <bme68x_set_conf+0x4e>
		/* Configure only in the sleep mode */
		rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8001d3a:	6839      	ldr	r1, [r7, #0]
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	f000 f8df 	bl	8001f00 <bme68x_set_op_mode>
 8001d42:	4603      	mov	r3, r0
 8001d44:	77fb      	strb	r3, [r7, #31]
	}

	if (conf == NULL) {
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d102      	bne.n	8001d52 <bme68x_set_conf+0x5a>
		rslt = BME68X_E_NULL_PTR;
 8001d4c:	23ff      	movs	r3, #255	@ 0xff
 8001d4e:	77fb      	strb	r3, [r7, #31]
 8001d50:	e0b2      	b.n	8001eb8 <bme68x_set_conf+0x1c0>
	} else if (rslt == BME68X_OK) {
 8001d52:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f040 80ae 	bne.w	8001eb8 <bme68x_set_conf+0x1c0>
		/* Read the whole configuration and write it back once later */
		rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG,
 8001d5c:	7d38      	ldrb	r0, [r7, #20]
 8001d5e:	f107 010c 	add.w	r1, r7, #12
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	2205      	movs	r2, #5
 8001d66:	f7ff ff3f 	bl	8001be8 <bme68x_get_regs>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	77fb      	strb	r3, [r7, #31]
				dev);
		dev->info_msg = BME68X_OK;
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
		if (rslt == BME68X_OK) {
 8001d76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d108      	bne.n	8001d90 <bme68x_set_conf+0x98>
			rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3303      	adds	r3, #3
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	2107      	movs	r1, #7
 8001d86:	4618      	mov	r0, r3
 8001d88:	f001 fb7f 	bl	800348a <boundary_check>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	77fb      	strb	r3, [r7, #31]
		}

		if (rslt == BME68X_OK) {
 8001d90:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d108      	bne.n	8001daa <bme68x_set_conf+0xb2>
			rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	2105      	movs	r1, #5
 8001da0:	4618      	mov	r0, r3
 8001da2:	f001 fb72 	bl	800348a <boundary_check>
 8001da6:	4603      	mov	r3, r0
 8001da8:	77fb      	strb	r3, [r7, #31]
		}

		if (rslt == BME68X_OK) {
 8001daa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d108      	bne.n	8001dc4 <bme68x_set_conf+0xcc>
			rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3302      	adds	r3, #2
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	2105      	movs	r1, #5
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f001 fb65 	bl	800348a <boundary_check>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	77fb      	strb	r3, [r7, #31]
		}

		if (rslt == BME68X_OK) {
 8001dc4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d107      	bne.n	8001ddc <bme68x_set_conf+0xe4>
			rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	2105      	movs	r1, #5
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f001 fb59 	bl	800348a <boundary_check>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	77fb      	strb	r3, [r7, #31]
		}

		if (rslt == BME68X_OK) {
 8001ddc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d108      	bne.n	8001df6 <bme68x_set_conf+0xfe>
			rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3304      	adds	r3, #4
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	2108      	movs	r1, #8
 8001dec:	4618      	mov	r0, r3
 8001dee:	f001 fb4c 	bl	800348a <boundary_check>
 8001df2:	4603      	mov	r3, r0
 8001df4:	77fb      	strb	r3, [r7, #31]
		}

		if (rslt == BME68X_OK) {
 8001df6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d15c      	bne.n	8001eb8 <bme68x_set_conf+0x1c0>
			data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER,
 8001dfe:	7c3b      	ldrb	r3, [r7, #16]
 8001e00:	b25b      	sxtb	r3, r3
 8001e02:	f023 031c 	bic.w	r3, r3, #28
 8001e06:	b25a      	sxtb	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	78db      	ldrb	r3, [r3, #3]
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	b25b      	sxtb	r3, r3
 8001e10:	f003 031c 	and.w	r3, r3, #28
 8001e14:	b25b      	sxtb	r3, r3
 8001e16:	4313      	orrs	r3, r2
 8001e18:	b25b      	sxtb	r3, r3
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	743b      	strb	r3, [r7, #16]
					conf->filter);
			data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST,
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
 8001e20:	b25b      	sxtb	r3, r3
 8001e22:	f003 031f 	and.w	r3, r3, #31
 8001e26:	b25a      	sxtb	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	785b      	ldrb	r3, [r3, #1]
 8001e2c:	015b      	lsls	r3, r3, #5
 8001e2e:	b25b      	sxtb	r3, r3
 8001e30:	4313      	orrs	r3, r2
 8001e32:	b25b      	sxtb	r3, r3
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	73fb      	strb	r3, [r7, #15]
					conf->os_temp);
			data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP,
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	b25b      	sxtb	r3, r3
 8001e3c:	f023 031c 	bic.w	r3, r3, #28
 8001e40:	b25a      	sxtb	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	789b      	ldrb	r3, [r3, #2]
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	b25b      	sxtb	r3, r3
 8001e4a:	f003 031c 	and.w	r3, r3, #28
 8001e4e:	b25b      	sxtb	r3, r3
 8001e50:	4313      	orrs	r3, r2
 8001e52:	b25b      	sxtb	r3, r3
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	73fb      	strb	r3, [r7, #15]
					conf->os_pres);
			data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH,
 8001e58:	7b7b      	ldrb	r3, [r7, #13]
 8001e5a:	b25b      	sxtb	r3, r3
 8001e5c:	f023 0307 	bic.w	r3, r3, #7
 8001e60:	b25a      	sxtb	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	b25b      	sxtb	r3, r3
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	b25b      	sxtb	r3, r3
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	b25b      	sxtb	r3, r3
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	737b      	strb	r3, [r7, #13]
					conf->os_hum);
			if (conf->odr != BME68X_ODR_NONE) {
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	791b      	ldrb	r3, [r3, #4]
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d004      	beq.n	8001e88 <bme68x_set_conf+0x190>
				odr20 = conf->odr;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	791b      	ldrb	r3, [r3, #4]
 8001e82:	77bb      	strb	r3, [r7, #30]
				odr3 = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	777b      	strb	r3, [r7, #29]
			}

			data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 8001e88:	7c3b      	ldrb	r3, [r7, #16]
 8001e8a:	b25b      	sxtb	r3, r3
 8001e8c:	f003 031f 	and.w	r3, r3, #31
 8001e90:	b25a      	sxtb	r2, r3
 8001e92:	7fbb      	ldrb	r3, [r7, #30]
 8001e94:	015b      	lsls	r3, r3, #5
 8001e96:	b25b      	sxtb	r3, r3
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	b25b      	sxtb	r3, r3
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	743b      	strb	r3, [r7, #16]
			data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8001ea0:	7b3b      	ldrb	r3, [r7, #12]
 8001ea2:	b25b      	sxtb	r3, r3
 8001ea4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ea8:	b25a      	sxtb	r2, r3
 8001eaa:	7f7b      	ldrb	r3, [r7, #29]
 8001eac:	01db      	lsls	r3, r3, #7
 8001eae:	b25b      	sxtb	r3, r3
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	b25b      	sxtb	r3, r3
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	733b      	strb	r3, [r7, #12]
		}
	}

	if (rslt == BME68X_OK) {
 8001eb8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d109      	bne.n	8001ed4 <bme68x_set_conf+0x1dc>
		rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
 8001ec0:	f107 010c 	add.w	r1, r7, #12
 8001ec4:	f107 0014 	add.w	r0, r7, #20
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	2205      	movs	r2, #5
 8001ecc:	f7ff fdfc 	bl	8001ac8 <bme68x_set_regs>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	77fb      	strb	r3, [r7, #31]
	}

	if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK)) {
 8001ed4:	7f3b      	ldrb	r3, [r7, #28]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00a      	beq.n	8001ef0 <bme68x_set_conf+0x1f8>
 8001eda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d106      	bne.n	8001ef0 <bme68x_set_conf+0x1f8>
		rslt = bme68x_set_op_mode(current_op_mode, dev);
 8001ee2:	7f3b      	ldrb	r3, [r7, #28]
 8001ee4:	6839      	ldr	r1, [r7, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 f80a 	bl	8001f00 <bme68x_set_op_mode>
 8001eec:	4603      	mov	r3, r0
 8001eee:	77fb      	strb	r3, [r7, #31]
	}

	return rslt;
 8001ef0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3720      	adds	r7, #32
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	0800fab4 	.word	0x0800fab4

08001f00 <bme68x_set_op_mode>:

/*
 * @brief This API is used to set the operation mode of the sensor
 */
int8_t bme68x_set_op_mode(const uint8_t op_mode, struct bme68x_dev *dev)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	6039      	str	r1, [r7, #0]
 8001f0a:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	73bb      	strb	r3, [r7, #14]
	uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 8001f10:	2374      	movs	r3, #116	@ 0x74
 8001f12:	733b      	strb	r3, [r7, #12]

	/* Call until in sleep */
	do {
		rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 8001f14:	f107 010d 	add.w	r1, r7, #13
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	2074      	movs	r0, #116	@ 0x74
 8001f1e:	f7ff fe63 	bl	8001be8 <bme68x_get_regs>
 8001f22:	4603      	mov	r3, r0
 8001f24:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME68X_OK) {
 8001f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d11d      	bne.n	8001f6a <bme68x_set_op_mode+0x6a>
			/* Put to sleep before changing mode */
			pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 8001f2e:	7b7b      	ldrb	r3, [r7, #13]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	73bb      	strb	r3, [r7, #14]
			if (pow_mode != BME68X_SLEEP_MODE) {
 8001f36:	7bbb      	ldrb	r3, [r7, #14]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d016      	beq.n	8001f6a <bme68x_set_op_mode+0x6a>
				tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 8001f3c:	7b7b      	ldrb	r3, [r7, #13]
 8001f3e:	f023 0303 	bic.w	r3, r3, #3
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	737b      	strb	r3, [r7, #13]
				rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8001f46:	f107 010d 	add.w	r1, r7, #13
 8001f4a:	f107 000c 	add.w	r0, r7, #12
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f7ff fdb9 	bl	8001ac8 <bme68x_set_regs>
 8001f56:	4603      	mov	r3, r0
 8001f58:	73fb      	strb	r3, [r7, #15]
				dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	6852      	ldr	r2, [r2, #4]
 8001f62:	4611      	mov	r1, r2
 8001f64:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001f68:	4798      	blx	r3
			}
		}
	} while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 8001f6a:	7bbb      	ldrb	r3, [r7, #14]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <bme68x_set_op_mode+0x78>
 8001f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0cd      	beq.n	8001f14 <bme68x_set_op_mode+0x14>

	/* Already in sleep */
	if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK)) {
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d01b      	beq.n	8001fb6 <bme68x_set_op_mode+0xb6>
 8001f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d117      	bne.n	8001fb6 <bme68x_set_op_mode+0xb6>
		tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK)
 8001f86:	7b7b      	ldrb	r3, [r7, #13]
 8001f88:	b25b      	sxtb	r3, r3
 8001f8a:	f023 0303 	bic.w	r3, r3, #3
 8001f8e:	b25a      	sxtb	r2, r3
				| (op_mode & BME68X_MODE_MSK);
 8001f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	b25b      	sxtb	r3, r3
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	b25b      	sxtb	r3, r3
 8001f9e:	b2db      	uxtb	r3, r3
		tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK)
 8001fa0:	737b      	strb	r3, [r7, #13]
		rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8001fa2:	f107 010d 	add.w	r1, r7, #13
 8001fa6:	f107 000c 	add.w	r0, r7, #12
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f7ff fd8b 	bl	8001ac8 <bme68x_set_regs>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <bme68x_get_op_mode>:

/*
 * @brief This API is used to get the operation mode of the sensor.
 */
int8_t bme68x_get_op_mode(uint8_t *op_mode, struct bme68x_dev *dev)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b084      	sub	sp, #16
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t mode;

	if (op_mode) {
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00f      	beq.n	8001ff2 <bme68x_get_op_mode+0x30>
		rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
 8001fd2:	f107 010e 	add.w	r1, r7, #14
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	2074      	movs	r0, #116	@ 0x74
 8001fdc:	f7ff fe04 	bl	8001be8 <bme68x_get_regs>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	73fb      	strb	r3, [r7, #15]

		/* Masking the other register bit info*/
		*op_mode = mode & BME68X_MODE_MSK;
 8001fe4:	7bbb      	ldrb	r3, [r7, #14]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	701a      	strb	r2, [r3, #0]
 8001ff0:	e001      	b.n	8001ff6 <bme68x_get_op_mode+0x34>
	} else {
		rslt = BME68X_E_NULL_PTR;
 8001ff2:	23ff      	movs	r3, #255	@ 0xff
 8001ff4:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <bme68x_get_meas_dur>:
/*
 * @brief This API is used to get the remaining duration that can be used for heating.
 */
uint32_t bme68x_get_meas_dur(const uint8_t op_mode, struct bme68x_conf *conf,
		struct bme68x_dev *dev)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08a      	sub	sp, #40	@ 0x28
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
 8002010:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint32_t meas_dur = 0; /* Calculate in us */
 8002012:	2300      	movs	r3, #0
 8002014:	623b      	str	r3, [r7, #32]
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = { 0, 1, 2, 4, 8, 16 };
 8002016:	4a34      	ldr	r2, [pc, #208]	@ (80020e8 <bme68x_get_meas_dur+0xe4>)
 8002018:	f107 0314 	add.w	r3, r7, #20
 800201c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002020:	6018      	str	r0, [r3, #0]
 8002022:	3304      	adds	r3, #4
 8002024:	8019      	strh	r1, [r3, #0]

	if (conf != NULL) {
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d058      	beq.n	80020de <bme68x_get_meas_dur+0xda>
		/* Boundary check for temperature oversampling */
		rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	3301      	adds	r3, #1
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	2105      	movs	r1, #5
 8002034:	4618      	mov	r0, r3
 8002036:	f001 fa28 	bl	800348a <boundary_check>
 800203a:	4603      	mov	r3, r0
 800203c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		if (rslt == BME68X_OK) {
 8002040:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002044:	2b00      	cmp	r3, #0
 8002046:	d109      	bne.n	800205c <bme68x_get_meas_dur+0x58>
			/* Boundary check for pressure oversampling */
			rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	3302      	adds	r3, #2
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	2105      	movs	r1, #5
 8002050:	4618      	mov	r0, r3
 8002052:	f001 fa1a 	bl	800348a <boundary_check>
 8002056:	4603      	mov	r3, r0
 8002058:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}

		if (rslt == BME68X_OK) {
 800205c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002060:	2b00      	cmp	r3, #0
 8002062:	d108      	bne.n	8002076 <bme68x_get_meas_dur+0x72>
			/* Boundary check for humidity oversampling */
			rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	2105      	movs	r1, #5
 800206a:	4618      	mov	r0, r3
 800206c:	f001 fa0d 	bl	800348a <boundary_check>
 8002070:	4603      	mov	r3, r0
 8002072:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}

		if (rslt == BME68X_OK) {
 8002076:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800207a:	2b00      	cmp	r3, #0
 800207c:	d12f      	bne.n	80020de <bme68x_get_meas_dur+0xda>
			meas_cycles = os_to_meas_cycles[conf->os_temp];
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	785b      	ldrb	r3, [r3, #1]
 8002082:	3328      	adds	r3, #40	@ 0x28
 8002084:	443b      	add	r3, r7
 8002086:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800208a:	61fb      	str	r3, [r7, #28]
			meas_cycles += os_to_meas_cycles[conf->os_pres];
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	789b      	ldrb	r3, [r3, #2]
 8002090:	3328      	adds	r3, #40	@ 0x28
 8002092:	443b      	add	r3, r7
 8002094:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002098:	461a      	mov	r2, r3
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	4413      	add	r3, r2
 800209e:	61fb      	str	r3, [r7, #28]
			meas_cycles += os_to_meas_cycles[conf->os_hum];
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	3328      	adds	r3, #40	@ 0x28
 80020a6:	443b      	add	r3, r7
 80020a8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80020ac:	461a      	mov	r2, r3
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	4413      	add	r3, r2
 80020b2:	61fb      	str	r3, [r7, #28]

			/* TPH measurement duration */
			meas_dur = meas_cycles * UINT32_C(1963);
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f240 72ab 	movw	r2, #1963	@ 0x7ab
 80020ba:	fb02 f303 	mul.w	r3, r2, r3
 80020be:	623b      	str	r3, [r7, #32]
			meas_dur += UINT32_C(477 * 4); /* TPH switching duration */
 80020c0:	6a3b      	ldr	r3, [r7, #32]
 80020c2:	f203 7374 	addw	r3, r3, #1908	@ 0x774
 80020c6:	623b      	str	r3, [r7, #32]
			meas_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 80020c8:	6a3b      	ldr	r3, [r7, #32]
 80020ca:	f603 1351 	addw	r3, r3, #2385	@ 0x951
 80020ce:	623b      	str	r3, [r7, #32]

			if (op_mode != BME68X_PARALLEL_MODE) {
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d003      	beq.n	80020de <bme68x_get_meas_dur+0xda>
				meas_dur += UINT32_C(1000); /* Wake up duration of 1ms */
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80020dc:	623b      	str	r3, [r7, #32]
			}
		}
	}

	return meas_dur;
 80020de:	6a3b      	ldr	r3, [r7, #32]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3728      	adds	r7, #40	@ 0x28
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	0800fabc 	.word	0x0800fabc

080020ec <bme68x_get_data>:
 * from the sensor, compensates the data and store it in the bme68x_data
 * structure instance passed by the user.
 */
int8_t bme68x_get_data(uint8_t op_mode, struct bme68x_data *data,
		uint8_t *n_data, struct bme68x_dev *dev)
{
 80020ec:	b5b0      	push	{r4, r5, r7, lr}
 80020ee:	b09e      	sub	sp, #120	@ 0x78
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	4603      	mov	r3, r0
 80020fa:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t i = 0, j = 0, new_fields = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8002102:	2300      	movs	r3, #0
 8002104:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8002108:	2300      	movs	r3, #0
 800210a:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
	struct bme68x_data *field_ptr[3] = { 0 };
 800210e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]
 8002118:	609a      	str	r2, [r3, #8]
	struct bme68x_data field_data[3] = { { 0 } };
 800211a:	f107 0314 	add.w	r3, r7, #20
 800211e:	2254      	movs	r2, #84	@ 0x54
 8002120:	2100      	movs	r1, #0
 8002122:	4618      	mov	r0, r3
 8002124:	f00c fe06 	bl	800ed34 <memset>

	field_ptr[0] = &field_data[0];
 8002128:	f107 0314 	add.w	r3, r7, #20
 800212c:	66bb      	str	r3, [r7, #104]	@ 0x68
	field_ptr[1] = &field_data[1];
 800212e:	f107 0314 	add.w	r3, r7, #20
 8002132:	331c      	adds	r3, #28
 8002134:	66fb      	str	r3, [r7, #108]	@ 0x6c
	field_ptr[2] = &field_data[2];
 8002136:	f107 0314 	add.w	r3, r7, #20
 800213a:	3338      	adds	r3, #56	@ 0x38
 800213c:	673b      	str	r3, [r7, #112]	@ 0x70

	rslt = null_ptr_check(dev);
 800213e:	6838      	ldr	r0, [r7, #0]
 8002140:	f001 f9d0 	bl	80034e4 <null_ptr_check>
 8002144:	4603      	mov	r3, r0
 8002146:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	if ((rslt == BME68X_OK) && (data != NULL)) {
 800214a:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 800214e:	2b00      	cmp	r3, #0
 8002150:	f040 80c1 	bne.w	80022d6 <bme68x_get_data+0x1ea>
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 80bd 	beq.w	80022d6 <bme68x_get_data+0x1ea>
		/* Reading the sensor data in forced mode only */
		if (op_mode == BME68X_FORCED_MODE) {
 800215c:	7bfb      	ldrb	r3, [r7, #15]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d11c      	bne.n	800219c <bme68x_get_data+0xb0>
			rslt = read_field_data(0, data, dev);
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	68b9      	ldr	r1, [r7, #8]
 8002166:	2000      	movs	r0, #0
 8002168:	f000 fd8b 	bl	8002c82 <read_field_data>
 800216c:	4603      	mov	r3, r0
 800216e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			if (rslt == BME68X_OK) {
 8002172:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8002176:	2b00      	cmp	r3, #0
 8002178:	f040 80a1 	bne.w	80022be <bme68x_get_data+0x1d2>
				if (data->status & BME68X_NEW_DATA_MSK) {
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	b25b      	sxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	da03      	bge.n	800218e <bme68x_get_data+0xa2>
					new_fields = 1;
 8002186:	2301      	movs	r3, #1
 8002188:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 800218c:	e097      	b.n	80022be <bme68x_get_data+0x1d2>
				} else {
					new_fields = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
					rslt = BME68X_W_NO_NEW_DATA;
 8002194:	2302      	movs	r3, #2
 8002196:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800219a:	e090      	b.n	80022be <bme68x_get_data+0x1d2>
				}
			}
		} else if ((op_mode == BME68X_PARALLEL_MODE)
 800219c:	7bfb      	ldrb	r3, [r7, #15]
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d003      	beq.n	80021aa <bme68x_get_data+0xbe>
				|| (op_mode == BME68X_SEQUENTIAL_MODE)) {
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	f040 8087 	bne.w	80022b8 <bme68x_get_data+0x1cc>
			/* Read the 3 fields and count the number of new data fields */
			rslt = read_all_field_data(field_ptr, dev);
 80021aa:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80021ae:	6839      	ldr	r1, [r7, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f000 feaa 	bl	8002f0a <read_all_field_data>
 80021b6:	4603      	mov	r3, r0
 80021b8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

			new_fields = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
			for (i = 0; (i < 3) && (rslt == BME68X_OK); i++) {
 80021c2:	2300      	movs	r3, #0
 80021c4:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80021c8:	e014      	b.n	80021f4 <bme68x_get_data+0x108>
				if (field_ptr[i]->status & BME68X_NEW_DATA_MSK) {
 80021ca:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	3378      	adds	r3, #120	@ 0x78
 80021d2:	443b      	add	r3, r7
 80021d4:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	b25b      	sxtb	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	da04      	bge.n	80021ea <bme68x_get_data+0xfe>
					new_fields++;
 80021e0:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80021e4:	3301      	adds	r3, #1
 80021e6:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
			for (i = 0; (i < 3) && (rslt == BME68X_OK); i++) {
 80021ea:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80021ee:	3301      	adds	r3, #1
 80021f0:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80021f4:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d803      	bhi.n	8002204 <bme68x_get_data+0x118>
 80021fc:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0e2      	beq.n	80021ca <bme68x_get_data+0xde>
				}
			}

			/* Sort the sensor data in parallel & sequential modes*/
			for (i = 0; (i < 2) && (rslt == BME68X_OK); i++) {
 8002204:	2300      	movs	r3, #0
 8002206:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 800220a:	e01c      	b.n	8002246 <bme68x_get_data+0x15a>
				for (j = i + 1; j < 3; j++) {
 800220c:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002210:	3301      	adds	r3, #1
 8002212:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8002216:	e00d      	b.n	8002234 <bme68x_get_data+0x148>
					sort_sensor_data(i, j, field_ptr);
 8002218:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800221c:	f897 1075 	ldrb.w	r1, [r7, #117]	@ 0x75
 8002220:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002224:	4618      	mov	r0, r3
 8002226:	f001 fb09 	bl	800383c <sort_sensor_data>
				for (j = i + 1; j < 3; j++) {
 800222a:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 800222e:	3301      	adds	r3, #1
 8002230:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8002234:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8002238:	2b02      	cmp	r3, #2
 800223a:	d9ed      	bls.n	8002218 <bme68x_get_data+0x12c>
			for (i = 0; (i < 2) && (rslt == BME68X_OK); i++) {
 800223c:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002240:	3301      	adds	r3, #1
 8002242:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8002246:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800224a:	2b01      	cmp	r3, #1
 800224c:	d803      	bhi.n	8002256 <bme68x_get_data+0x16a>
 800224e:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0da      	beq.n	800220c <bme68x_get_data+0x120>
				}
			}

			/* Copy the sorted data */
			for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++) {
 8002256:	2300      	movs	r3, #0
 8002258:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 800225c:	e01c      	b.n	8002298 <bme68x_get_data+0x1ac>
				data[i] = *field_ptr[i];
 800225e:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	3378      	adds	r3, #120	@ 0x78
 8002266:	443b      	add	r3, r7
 8002268:	f853 1c10 	ldr.w	r1, [r3, #-16]
 800226c:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 8002270:	4613      	mov	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	1a9b      	subs	r3, r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	461a      	mov	r2, r3
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	4413      	add	r3, r2
 800227e:	461c      	mov	r4, r3
 8002280:	460d      	mov	r5, r1
 8002282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002286:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800228a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++) {
 800228e:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002292:	3301      	adds	r3, #1
 8002294:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8002298:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800229c:	2b02      	cmp	r3, #2
 800229e:	d803      	bhi.n	80022a8 <bme68x_get_data+0x1bc>
 80022a0:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0da      	beq.n	800225e <bme68x_get_data+0x172>
			}

			if (new_fields == 0) {
 80022a8:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d106      	bne.n	80022be <bme68x_get_data+0x1d2>
				rslt = BME68X_W_NO_NEW_DATA;
 80022b0:	2302      	movs	r3, #2
 80022b2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			if (new_fields == 0) {
 80022b6:	e002      	b.n	80022be <bme68x_get_data+0x1d2>
			}
		} else {
			rslt = BME68X_W_DEFINE_OP_MODE;
 80022b8:	2301      	movs	r3, #1
 80022ba:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		}

		if (n_data == NULL) {
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d103      	bne.n	80022cc <bme68x_get_data+0x1e0>
			rslt = BME68X_E_NULL_PTR;
 80022c4:	23ff      	movs	r3, #255	@ 0xff
 80022c6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (n_data == NULL) {
 80022ca:	e007      	b.n	80022dc <bme68x_get_data+0x1f0>
		} else {
			*n_data = new_fields;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f897 2074 	ldrb.w	r2, [r7, #116]	@ 0x74
 80022d2:	701a      	strb	r2, [r3, #0]
		if (n_data == NULL) {
 80022d4:	e002      	b.n	80022dc <bme68x_get_data+0x1f0>
		}
	} else {
		rslt = BME68X_E_NULL_PTR;
 80022d6:	23ff      	movs	r3, #255	@ 0xff
 80022d8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	}

	return rslt;
 80022dc:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3778      	adds	r7, #120	@ 0x78
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bdb0      	pop	{r4, r5, r7, pc}

080022e8 <bme68x_set_heatr_conf>:
/*
 * @brief This API is used to set the gas configuration of the sensor.
 */
int8_t bme68x_set_heatr_conf(uint8_t op_mode,
		const struct bme68x_heatr_conf *conf, struct bme68x_dev *dev)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
 80022f4:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t nb_conv = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	773b      	strb	r3, [r7, #28]
	uint8_t hctrl, run_gas = 0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	777b      	strb	r3, [r7, #29]
	uint8_t ctrl_gas_data[2];
	uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 80022fe:	f247 1370 	movw	r3, #29040	@ 0x7170
 8002302:	82bb      	strh	r3, [r7, #20]

	if (conf != NULL) {
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d06e      	beq.n	80023e8 <bme68x_set_heatr_conf+0x100>
		rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	2000      	movs	r0, #0
 800230e:	f7ff fdf7 	bl	8001f00 <bme68x_set_op_mode>
 8002312:	4603      	mov	r3, r0
 8002314:	77fb      	strb	r3, [r7, #31]
		if (rslt == BME68X_OK) {
 8002316:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d108      	bne.n	8002330 <bme68x_set_heatr_conf+0x48>
			rslt = set_conf(conf, op_mode, &nb_conv, dev);
 800231e:	f107 021c 	add.w	r2, r7, #28
 8002322:	7bf9      	ldrb	r1, [r7, #15]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68b8      	ldr	r0, [r7, #8]
 8002328:	f001 f8fc 	bl	8003524 <set_conf>
 800232c:	4603      	mov	r3, r0
 800232e:	77fb      	strb	r3, [r7, #31]
		}

		if (rslt == BME68X_OK) {
 8002330:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d159      	bne.n	80023ec <bme68x_set_heatr_conf+0x104>
			rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2,
 8002338:	f107 0118 	add.w	r1, r7, #24
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2202      	movs	r2, #2
 8002340:	2070      	movs	r0, #112	@ 0x70
 8002342:	f7ff fc51 	bl	8001be8 <bme68x_get_regs>
 8002346:	4603      	mov	r3, r0
 8002348:	77fb      	strb	r3, [r7, #31]
					dev);
			if (rslt == BME68X_OK) {
 800234a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d14c      	bne.n	80023ec <bme68x_set_heatr_conf+0x104>
				if (conf->enable == BME68X_ENABLE) {
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d10b      	bne.n	8002372 <bme68x_set_heatr_conf+0x8a>
					hctrl = BME68X_ENABLE_HEATER;
 800235a:	2300      	movs	r3, #0
 800235c:	77bb      	strb	r3, [r7, #30]
					if (dev->variant_id == BME68X_VARIANT_GAS_HIGH) {
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d102      	bne.n	800236c <bme68x_set_heatr_conf+0x84>
						run_gas = BME68X_ENABLE_GAS_MEAS_H;
 8002366:	2302      	movs	r3, #2
 8002368:	777b      	strb	r3, [r7, #29]
 800236a:	e006      	b.n	800237a <bme68x_set_heatr_conf+0x92>
					} else {
						run_gas = BME68X_ENABLE_GAS_MEAS_L;
 800236c:	2301      	movs	r3, #1
 800236e:	777b      	strb	r3, [r7, #29]
 8002370:	e003      	b.n	800237a <bme68x_set_heatr_conf+0x92>
					}
				} else {
					hctrl = BME68X_DISABLE_HEATER;
 8002372:	2301      	movs	r3, #1
 8002374:	77bb      	strb	r3, [r7, #30]
					run_gas = BME68X_DISABLE_GAS_MEAS;
 8002376:	2300      	movs	r3, #0
 8002378:	777b      	strb	r3, [r7, #29]
				}

				ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0],
 800237a:	7e3b      	ldrb	r3, [r7, #24]
 800237c:	b25b      	sxtb	r3, r3
 800237e:	f023 0308 	bic.w	r3, r3, #8
 8002382:	b25a      	sxtb	r2, r3
 8002384:	7fbb      	ldrb	r3, [r7, #30]
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	b25b      	sxtb	r3, r3
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	b25b      	sxtb	r3, r3
 8002390:	4313      	orrs	r3, r2
 8002392:	b25b      	sxtb	r3, r3
 8002394:	b2db      	uxtb	r3, r3
 8002396:	763b      	strb	r3, [r7, #24]
						BME68X_HCTRL, hctrl);
				ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1],
 8002398:	7e7b      	ldrb	r3, [r7, #25]
 800239a:	b25b      	sxtb	r3, r3
 800239c:	f023 030f 	bic.w	r3, r3, #15
 80023a0:	b25a      	sxtb	r2, r3
 80023a2:	7f3b      	ldrb	r3, [r7, #28]
 80023a4:	b25b      	sxtb	r3, r3
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	b25b      	sxtb	r3, r3
 80023ac:	4313      	orrs	r3, r2
 80023ae:	b25b      	sxtb	r3, r3
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	767b      	strb	r3, [r7, #25]
						BME68X_NBCONV, nb_conv);
				ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1],
 80023b4:	7e7b      	ldrb	r3, [r7, #25]
 80023b6:	b25b      	sxtb	r3, r3
 80023b8:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80023bc:	b25a      	sxtb	r2, r3
 80023be:	7f7b      	ldrb	r3, [r7, #29]
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	b25b      	sxtb	r3, r3
 80023c4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80023c8:	b25b      	sxtb	r3, r3
 80023ca:	4313      	orrs	r3, r2
 80023cc:	b25b      	sxtb	r3, r3
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	767b      	strb	r3, [r7, #25]
						BME68X_RUN_GAS, run_gas);
				rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 80023d2:	f107 0118 	add.w	r1, r7, #24
 80023d6:	f107 0014 	add.w	r0, r7, #20
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2202      	movs	r2, #2
 80023de:	f7ff fb73 	bl	8001ac8 <bme68x_set_regs>
 80023e2:	4603      	mov	r3, r0
 80023e4:	77fb      	strb	r3, [r7, #31]
 80023e6:	e001      	b.n	80023ec <bme68x_set_heatr_conf+0x104>
			}
		}
	} else {
		rslt = BME68X_E_NULL_PTR;
 80023e8:	23ff      	movs	r3, #255	@ 0xff
 80023ea:	77fb      	strb	r3, [r7, #31]
	}

	return rslt;
 80023ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3720      	adds	r7, #32
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <calc_temperature>:

#else

/* @brief This internal API is used to calculate the temperature value. */
static float calc_temperature(uint32_t temp_adc, struct bme68x_dev *dev)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b087      	sub	sp, #28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
	float var1;
	float var2;
	float calc_temp;

	/* calculate var1 data */
	var1 = ((((float) temp_adc / 16384.0f)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	ee07 3a90 	vmov	s15, r3
 8002408:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800240c:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80024f0 <calc_temperature+0xf8>
 8002410:	ee87 7aa6 	vdiv.f32	s14, s15, s13
			- ((float) dev->calib.par_t1 / 1024.0f))
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	8bdb      	ldrh	r3, [r3, #30]
 8002418:	ee07 3a90 	vmov	s15, r3
 800241c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002420:	ed9f 6a34 	vldr	s12, [pc, #208]	@ 80024f4 <calc_temperature+0xfc>
 8002424:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002428:	ee37 7a67 	vsub.f32	s14, s14, s15
			* ((float) dev->calib.par_t2));
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002432:	ee07 3a90 	vmov	s15, r3
 8002436:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	var1 = ((((float) temp_adc / 16384.0f)
 800243a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800243e:	edc7 7a05 	vstr	s15, [r7, #20]

	/* calculate var2 data */
	var2 = (((((float) temp_adc / 131072.0f)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	ee07 3a90 	vmov	s15, r3
 8002448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800244c:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80024f8 <calc_temperature+0x100>
 8002450:	ee87 7aa6 	vdiv.f32	s14, s15, s13
			- ((float) dev->calib.par_t1 / 8192.0f))
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	8bdb      	ldrh	r3, [r3, #30]
 8002458:	ee07 3a90 	vmov	s15, r3
 800245c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002460:	ed9f 6a26 	vldr	s12, [pc, #152]	@ 80024fc <calc_temperature+0x104>
 8002464:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002468:	ee37 7a67 	vsub.f32	s14, s14, s15
			* (((float) temp_adc / 131072.0f)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	ee07 3a90 	vmov	s15, r3
 8002472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002476:	ed9f 6a20 	vldr	s12, [pc, #128]	@ 80024f8 <calc_temperature+0x100>
 800247a:	eec7 6a86 	vdiv.f32	s13, s15, s12
					- ((float) dev->calib.par_t1 / 8192.0f)))
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	8bdb      	ldrh	r3, [r3, #30]
 8002482:	ee07 3a90 	vmov	s15, r3
 8002486:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800248a:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80024fc <calc_temperature+0x104>
 800248e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002492:	ee76 7ae7 	vsub.f32	s15, s13, s15
			* (((float) temp_adc / 131072.0f)
 8002496:	ee27 7a27 	vmul.f32	s14, s14, s15
			* ((float) dev->calib.par_t3 * 16.0f));
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	f993 3022 	ldrsb.w	r3, [r3, #34]	@ 0x22
 80024a0:	ee07 3a90 	vmov	s15, r3
 80024a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024a8:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80024ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
	var2 = (((((float) temp_adc / 131072.0f)
 80024b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b4:	edc7 7a04 	vstr	s15, [r7, #16]

	/* t_fine value*/
	dev->calib.t_fine = (var1 + var2);
 80024b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80024bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80024c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

	/* compensated temperature data*/
	calc_temp = ((dev->calib.t_fine) / 5120.0f);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80024d0:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8002500 <calc_temperature+0x108>
 80024d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024d8:	edc7 7a03 	vstr	s15, [r7, #12]

	return calc_temp;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	ee07 3a90 	vmov	s15, r3
}
 80024e2:	eeb0 0a67 	vmov.f32	s0, s15
 80024e6:	371c      	adds	r7, #28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	46800000 	.word	0x46800000
 80024f4:	44800000 	.word	0x44800000
 80024f8:	48000000 	.word	0x48000000
 80024fc:	46000000 	.word	0x46000000
 8002500:	45a00000 	.word	0x45a00000

08002504 <calc_pressure>:

/* @brief This internal API is used to calculate the pressure value. */
static float calc_pressure(uint32_t pres_adc, const struct bme68x_dev *dev)
{
 8002504:	b480      	push	{r7}
 8002506:	b087      	sub	sp, #28
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
	float var1;
	float var2;
	float var3;
	float calc_pres;

	var1 = (((float) dev->calib.t_fine / 2.0f) - 64000.0f);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8002514:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002518:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800251c:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8002758 <calc_pressure+0x254>
 8002520:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002524:	edc7 7a04 	vstr	s15, [r7, #16]
	var2 = var1 * var1 * (((float) dev->calib.par_p6) / (131072.0f));
 8002528:	edd7 7a04 	vldr	s15, [r7, #16]
 800252c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	f993 302e 	ldrsb.w	r3, [r3, #46]	@ 0x2e
 8002536:	ee07 3a90 	vmov	s15, r3
 800253a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800253e:	ed9f 6a87 	vldr	s12, [pc, #540]	@ 800275c <calc_pressure+0x258>
 8002542:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800254a:	edc7 7a03 	vstr	s15, [r7, #12]
	var2 = var2 + (var1 * ((float) dev->calib.par_p5) * 2.0f);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8002554:	ee07 3a90 	vmov	s15, r3
 8002558:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800255c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002564:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002568:	ed97 7a03 	vldr	s14, [r7, #12]
 800256c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002570:	edc7 7a03 	vstr	s15, [r7, #12]
	var2 = (var2 / 4.0f) + (((float) dev->calib.par_p4) * 65536.0f);
 8002574:	edd7 7a03 	vldr	s15, [r7, #12]
 8002578:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800257c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8002586:	ee07 3a90 	vmov	s15, r3
 800258a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800258e:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8002760 <calc_pressure+0x25c>
 8002592:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002596:	ee77 7a27 	vadd.f32	s15, s14, s15
 800259a:	edc7 7a03 	vstr	s15, [r7, #12]
	var1 = (((((float) dev->calib.par_p3 * var1 * var1) / 16384.0f)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	f993 3028 	ldrsb.w	r3, [r3, #40]	@ 0x28
 80025a4:	ee07 3a90 	vmov	s15, r3
 80025a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80025b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80025b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025bc:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8002764 <calc_pressure+0x260>
 80025c0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
			+ ((float) dev->calib.par_p2 * var1)) / 524288.0f);
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 80025ca:	ee07 3a90 	vmov	s15, r3
 80025ce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80025d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80025d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025da:	ee37 7a27 	vadd.f32	s14, s14, s15
	var1 = (((((float) dev->calib.par_p3 * var1 * var1) / 16384.0f)
 80025de:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8002768 <calc_pressure+0x264>
 80025e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025e6:	edc7 7a04 	vstr	s15, [r7, #16]
	var1 = ((1.0f + (var1 / 32768.0f)) * ((float) dev->calib.par_p1));
 80025ea:	ed97 7a04 	vldr	s14, [r7, #16]
 80025ee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800276c <calc_pressure+0x268>
 80025f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80025fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002602:	ee07 3a90 	vmov	s15, r3
 8002606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800260a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800260e:	edc7 7a04 	vstr	s15, [r7, #16]
	calc_pres = (1048576.0f - ((float) pres_adc));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	ee07 3a90 	vmov	s15, r3
 8002618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800261c:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8002770 <calc_pressure+0x26c>
 8002620:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002624:	edc7 7a05 	vstr	s15, [r7, #20]

	/* Avoid exception caused by division by zero */
	if ((int) var1 != 0) {
 8002628:	edd7 7a04 	vldr	s15, [r7, #16]
 800262c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002630:	ee17 3a90 	vmov	r3, s15
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 8081 	beq.w	800273c <calc_pressure+0x238>
		calc_pres = (((calc_pres - (var2 / 4096.0f)) * 6250.0f) / var1);
 800263a:	ed97 7a03 	vldr	s14, [r7, #12]
 800263e:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8002774 <calc_pressure+0x270>
 8002642:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002646:	ed97 7a05 	vldr	s14, [r7, #20]
 800264a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800264e:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8002778 <calc_pressure+0x274>
 8002652:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002656:	ed97 7a04 	vldr	s14, [r7, #16]
 800265a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800265e:	edc7 7a05 	vstr	s15, [r7, #20]
		var1 = (((float) dev->calib.par_p9) * calc_pres * calc_pres)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8002668:	ee07 3a90 	vmov	s15, r3
 800266c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002670:	edd7 7a05 	vldr	s15, [r7, #20]
 8002674:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002678:	edd7 7a05 	vldr	s15, [r7, #20]
 800267c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002680:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 800277c <calc_pressure+0x278>
 8002684:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002688:	edc7 7a04 	vstr	s15, [r7, #16]
				/ 2147483648.0f;
		var2 = calc_pres * (((float) dev->calib.par_p8) / 32768.0f);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8002692:	ee07 3a90 	vmov	s15, r3
 8002696:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800269a:	eddf 6a34 	vldr	s13, [pc, #208]	@ 800276c <calc_pressure+0x268>
 800269e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80026a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026aa:	edc7 7a03 	vstr	s15, [r7, #12]
		var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f)
 80026ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80026b2:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8002780 <calc_pressure+0x27c>
 80026b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80026ba:	edd7 6a05 	vldr	s13, [r7, #20]
 80026be:	ed9f 6a30 	vldr	s12, [pc, #192]	@ 8002780 <calc_pressure+0x27c>
 80026c2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80026c6:	ee27 7a27 	vmul.f32	s14, s14, s15
				* (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
 80026ca:	edd7 6a05 	vldr	s13, [r7, #20]
 80026ce:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8002780 <calc_pressure+0x27c>
 80026d2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80026d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80026e0:	ee07 3a90 	vmov	s15, r3
 80026e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80026e8:	ed9f 6a1c 	vldr	s12, [pc, #112]	@ 800275c <calc_pressure+0x258>
 80026ec:	eec6 7a86 	vdiv.f32	s15, s13, s12
		var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f)
 80026f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f4:	edc7 7a02 	vstr	s15, [r7, #8]
		calc_pres = (calc_pres
				+ (var1 + var2 + var3 + ((float) dev->calib.par_p7 * 128.0f))
 80026f8:	ed97 7a04 	vldr	s14, [r7, #16]
 80026fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002700:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002704:	edd7 7a02 	vldr	s15, [r7, #8]
 8002708:	ee37 7a27 	vadd.f32	s14, s14, s15
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	f993 302f 	ldrsb.w	r3, [r3, #47]	@ 0x2f
 8002712:	ee07 3a90 	vmov	s15, r3
 8002716:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800271a:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8002784 <calc_pressure+0x280>
 800271e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002722:	ee37 7a27 	vadd.f32	s14, s14, s15
						/ 16.0f);
 8002726:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800272a:	eec7 7a26 	vdiv.f32	s15, s14, s13
		calc_pres = (calc_pres
 800272e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002732:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002736:	edc7 7a05 	vstr	s15, [r7, #20]
 800273a:	e002      	b.n	8002742 <calc_pressure+0x23e>
	} else {
		calc_pres = 0;
 800273c:	f04f 0300 	mov.w	r3, #0
 8002740:	617b      	str	r3, [r7, #20]
	}

	return calc_pres;
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	ee07 3a90 	vmov	s15, r3
}
 8002748:	eeb0 0a67 	vmov.f32	s0, s15
 800274c:	371c      	adds	r7, #28
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	477a0000 	.word	0x477a0000
 800275c:	48000000 	.word	0x48000000
 8002760:	47800000 	.word	0x47800000
 8002764:	46800000 	.word	0x46800000
 8002768:	49000000 	.word	0x49000000
 800276c:	47000000 	.word	0x47000000
 8002770:	49800000 	.word	0x49800000
 8002774:	45800000 	.word	0x45800000
 8002778:	45c35000 	.word	0x45c35000
 800277c:	4f000000 	.word	0x4f000000
 8002780:	43800000 	.word	0x43800000
 8002784:	43000000 	.word	0x43000000

08002788 <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static float calc_humidity(uint16_t hum_adc, const struct bme68x_dev *dev)
{
 8002788:	b480      	push	{r7}
 800278a:	b089      	sub	sp, #36	@ 0x24
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	6039      	str	r1, [r7, #0]
 8002792:	80fb      	strh	r3, [r7, #6]
	float var3;
	float var4;
	float temp_comp;

	/* compensated temperature data*/
	temp_comp = ((dev->calib.t_fine) / 5120.0f);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800279a:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8002904 <calc_humidity+0x17c>
 800279e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027a2:	edc7 7a06 	vstr	s15, [r7, #24]
	var1 = (float) ((float) hum_adc)
 80027a6:	88fb      	ldrh	r3, [r7, #6]
 80027a8:	ee07 3a90 	vmov	s15, r3
 80027ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
			- (((float) dev->calib.par_h1 * 16.0f)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	8a1b      	ldrh	r3, [r3, #16]
 80027b4:	ee07 3a90 	vmov	s15, r3
 80027b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027bc:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80027c0:	ee67 6aa6 	vmul.f32	s13, s15, s13
					+ (((float) dev->calib.par_h3 / 2.0f) * temp_comp));
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80027ca:	ee07 3a90 	vmov	s15, r3
 80027ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027d2:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 80027d6:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 80027da:	edd7 7a06 	vldr	s15, [r7, #24]
 80027de:	ee66 7a27 	vmul.f32	s15, s12, s15
 80027e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
	var1 = (float) ((float) hum_adc)
 80027e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027ea:	edc7 7a05 	vstr	s15, [r7, #20]
	var2 = var1
			* ((float) (((float) dev->calib.par_h2 / 262144.0f)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	8a5b      	ldrh	r3, [r3, #18]
 80027f2:	ee07 3a90 	vmov	s15, r3
 80027f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027fa:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8002908 <calc_humidity+0x180>
 80027fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					* (1.0f
							+ (((float) dev->calib.par_h4 / 16384.0f)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8002808:	ee07 3a90 	vmov	s15, r3
 800280c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002810:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 800290c <calc_humidity+0x184>
 8002814:	eec7 6a86 	vdiv.f32	s13, s15, s12
									* temp_comp)
 8002818:	edd7 7a06 	vldr	s15, [r7, #24]
 800281c:	ee66 7aa7 	vmul.f32	s15, s13, s15
							+ (((float) dev->calib.par_h4 / 16384.0f)
 8002820:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002824:	ee77 6aa6 	vadd.f32	s13, s15, s13
							+ (((float) dev->calib.par_h5 / 1048576.0f)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	f993 3016 	ldrsb.w	r3, [r3, #22]
 800282e:	ee07 3a90 	vmov	s15, r3
 8002832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002836:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8002910 <calc_humidity+0x188>
 800283a:	ee87 6aa5 	vdiv.f32	s12, s15, s11
									* temp_comp * temp_comp))));
 800283e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002842:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002846:	edd7 7a06 	vldr	s15, [r7, #24]
 800284a:	ee66 7a27 	vmul.f32	s15, s12, s15
							+ (((float) dev->calib.par_h5 / 1048576.0f)
 800284e:	ee76 7aa7 	vadd.f32	s15, s13, s15
			* ((float) (((float) dev->calib.par_h2 / 262144.0f)
 8002852:	ee67 7a27 	vmul.f32	s15, s14, s15
	var2 = var1
 8002856:	ed97 7a05 	vldr	s14, [r7, #20]
 800285a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800285e:	edc7 7a04 	vstr	s15, [r7, #16]
	var3 = (float) dev->calib.par_h6 / 16384.0f;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	7ddb      	ldrb	r3, [r3, #23]
 8002866:	ee07 3a90 	vmov	s15, r3
 800286a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800286e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800290c <calc_humidity+0x184>
 8002872:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002876:	edc7 7a03 	vstr	s15, [r7, #12]
	var4 = (float) dev->calib.par_h7 / 2097152.0f;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8002880:	ee07 3a90 	vmov	s15, r3
 8002884:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002888:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8002914 <calc_humidity+0x18c>
 800288c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002890:	edc7 7a02 	vstr	s15, [r7, #8]
	calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
 8002894:	ed97 7a02 	vldr	s14, [r7, #8]
 8002898:	edd7 7a06 	vldr	s15, [r7, #24]
 800289c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80028a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80028ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80028b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028b8:	ed97 7a04 	vldr	s14, [r7, #16]
 80028bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028c0:	edc7 7a07 	vstr	s15, [r7, #28]
	if (calc_hum > 100.0f) {
 80028c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80028c8:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8002918 <calc_humidity+0x190>
 80028cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d4:	dd02      	ble.n	80028dc <calc_humidity+0x154>
		calc_hum = 100.0f;
 80028d6:	4b11      	ldr	r3, [pc, #68]	@ (800291c <calc_humidity+0x194>)
 80028d8:	61fb      	str	r3, [r7, #28]
 80028da:	e009      	b.n	80028f0 <calc_humidity+0x168>
	} else if (calc_hum < 0.0f) {
 80028dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80028e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e8:	d502      	bpl.n	80028f0 <calc_humidity+0x168>
		calc_hum = 0.0f;
 80028ea:	f04f 0300 	mov.w	r3, #0
 80028ee:	61fb      	str	r3, [r7, #28]
	}

	return calc_hum;
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	ee07 3a90 	vmov	s15, r3
}
 80028f6:	eeb0 0a67 	vmov.f32	s0, s15
 80028fa:	3724      	adds	r7, #36	@ 0x24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	45a00000 	.word	0x45a00000
 8002908:	48800000 	.word	0x48800000
 800290c:	46800000 	.word	0x46800000
 8002910:	49800000 	.word	0x49800000
 8002914:	4a000000 	.word	0x4a000000
 8002918:	42c80000 	.word	0x42c80000
 800291c:	42c80000 	.word	0x42c80000

08002920 <calc_gas_resistance_low>:

/* This internal API is used to calculate the gas resistance low value in float */
static float calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range,
		const struct bme68x_dev *dev)
{
 8002920:	b4b0      	push	{r4, r5, r7}
 8002922:	b0a9      	sub	sp, #164	@ 0xa4
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	603a      	str	r2, [r7, #0]
 800292a:	80fb      	strh	r3, [r7, #6]
 800292c:	460b      	mov	r3, r1
 800292e:	717b      	strb	r3, [r7, #5]
	float calc_gas_res;
	float var1;
	float var2;
	float var3;
	float gas_res_f = gas_res_adc;
 8002930:	88fb      	ldrh	r3, [r7, #6]
 8002932:	ee07 3a90 	vmov	s15, r3
 8002936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800293a:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
	float gas_range_f = (1U << gas_range); /*lint !e790 / Suspicious truncation, integral to float */
 800293e:	797b      	ldrb	r3, [r7, #5]
 8002940:	2201      	movs	r2, #1
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	ee07 3a90 	vmov	s15, r3
 800294a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800294e:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
	const float lookup_k1_range[16] = { 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -1.0f,
 8002952:	4b3e      	ldr	r3, [pc, #248]	@ (8002a4c <calc_gas_resistance_low+0x12c>)
 8002954:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8002958:	461d      	mov	r5, r3
 800295a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800295c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800295e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002960:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002962:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002964:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002966:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800296a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0.0f, -0.8f, 0.0f, 0.0f, -0.2f, -0.5f, 0.0f, -1.0f, 0.0f, 0.0f };
	const float lookup_k2_range[16] = { 0.0f, 0.0f, 0.0f, 0.0f, 0.1f, 0.7f,
 800296e:	4b38      	ldr	r3, [pc, #224]	@ (8002a50 <calc_gas_resistance_low+0x130>)
 8002970:	f107 0408 	add.w	r4, r7, #8
 8002974:	461d      	mov	r5, r3
 8002976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800297a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800297c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800297e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002980:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002982:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002986:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0.0f, -0.8f, -0.1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f };

	var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	f993 303e 	ldrsb.w	r3, [r3, #62]	@ 0x3e
 8002990:	ee07 3a90 	vmov	s15, r3
 8002994:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002998:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800299c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029a0:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8002a54 <calc_gas_resistance_low+0x134>
 80029a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029a8:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
	var2 = (var1) * (1.0f + lookup_k1_range[gas_range] / 100.0f);
 80029ac:	797b      	ldrb	r3, [r7, #5]
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	33a0      	adds	r3, #160	@ 0xa0
 80029b2:	443b      	add	r3, r7
 80029b4:	3b58      	subs	r3, #88	@ 0x58
 80029b6:	ed93 7a00 	vldr	s14, [r3]
 80029ba:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8002a58 <calc_gas_resistance_low+0x138>
 80029be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80029c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029ca:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 80029ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029d2:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
	var3 = 1.0f + (lookup_k2_range[gas_range] / 100.0f);
 80029d6:	797b      	ldrb	r3, [r7, #5]
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	33a0      	adds	r3, #160	@ 0xa0
 80029dc:	443b      	add	r3, r7
 80029de:	3b98      	subs	r3, #152	@ 0x98
 80029e0:	ed93 7a00 	vldr	s14, [r3]
 80029e4:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8002a58 <calc_gas_resistance_low+0x138>
 80029e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80029f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029f4:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
	calc_gas_res = 1.0f
			/ (float) (var3 * (0.000000125f) * gas_range_f
 80029f8:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80029fc:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002a5c <calc_gas_resistance_low+0x13c>
 8002a00:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a04:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8002a08:	ee27 7a27 	vmul.f32	s14, s14, s15
					* (((gas_res_f - 512.0f) / var2) + 1.0f));
 8002a0c:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002a10:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8002a60 <calc_gas_resistance_low+0x140>
 8002a14:	ee37 6ae6 	vsub.f32	s12, s15, s13
 8002a18:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8002a1c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002a20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a24:	ee77 7aa6 	vadd.f32	s15, s15, s13
			/ (float) (var3 * (0.000000125f) * gas_range_f
 8002a28:	ee27 7a27 	vmul.f32	s14, s14, s15
	calc_gas_res = 1.0f
 8002a2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a34:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

	return calc_gas_res;
 8002a38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a3c:	ee07 3a90 	vmov	s15, r3
}
 8002a40:	eeb0 0a67 	vmov.f32	s0, s15
 8002a44:	37a4      	adds	r7, #164	@ 0xa4
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bcb0      	pop	{r4, r5, r7}
 8002a4a:	4770      	bx	lr
 8002a4c:	0800fac4 	.word	0x0800fac4
 8002a50:	0800fb04 	.word	0x0800fb04
 8002a54:	44a78000 	.word	0x44a78000
 8002a58:	42c80000 	.word	0x42c80000
 8002a5c:	340637bd 	.word	0x340637bd
 8002a60:	44000000 	.word	0x44000000

08002a64 <calc_gas_resistance_high>:

/* This internal API is used to calculate the gas resistance value in float */
static float calc_gas_resistance_high(uint16_t gas_res_adc, uint8_t gas_range)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b087      	sub	sp, #28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	460a      	mov	r2, r1
 8002a6e:	80fb      	strh	r3, [r7, #6]
 8002a70:	4613      	mov	r3, r2
 8002a72:	717b      	strb	r3, [r7, #5]
	float calc_gas_res;
	uint32_t var1 = UINT32_C(262144) >> gas_range;
 8002a74:	797b      	ldrb	r3, [r7, #5]
 8002a76:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a7e:	617b      	str	r3, [r7, #20]
	int32_t var2 = (int32_t) gas_res_adc - INT32_C(512);
 8002a80:	88fb      	ldrh	r3, [r7, #6]
 8002a82:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8002a86:	613b      	str	r3, [r7, #16]

	var2 *= INT32_C(3);
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	4413      	add	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]
	var2 = INT32_C(4096) + var2;
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a98:	613b      	str	r3, [r7, #16]

	calc_gas_res = 1000000.0f * (float) var1 / (float) var2;
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	ee07 3a90 	vmov	s15, r3
 8002aa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aa4:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002ad4 <calc_gas_resistance_high+0x70>
 8002aa8:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	ee07 3a90 	vmov	s15, r3
 8002ab2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ab6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002aba:	edc7 7a03 	vstr	s15, [r7, #12]

	return calc_gas_res;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	ee07 3a90 	vmov	s15, r3
}
 8002ac4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ac8:	371c      	adds	r7, #28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	49742400 	.word	0x49742400

08002ad8 <calc_res_heat>:

/* This internal API is used to calculate the heater resistance value */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b08b      	sub	sp, #44	@ 0x2c
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	81fb      	strh	r3, [r7, #14]
	float var3;
	float var4;
	float var5;
	uint8_t res_heat;

	if (temp > 400) /* Cap temperature */
 8002ae4:	89fb      	ldrh	r3, [r7, #14]
 8002ae6:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002aea:	d902      	bls.n	8002af2 <calc_res_heat+0x1a>
	{
		temp = 400;
 8002aec:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002af0:	81fb      	strh	r3, [r7, #14]
	}

	var1 = (((float) dev->calib.par_gh1 / (16.0f)) + 49.0f);
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	f993 3019 	ldrsb.w	r3, [r3, #25]
 8002af8:	ee07 3a90 	vmov	s15, r3
 8002afc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b00:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8002b04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b08:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8002c1c <calc_res_heat+0x144>
 8002b0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b10:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	var2 = ((((float) dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002b1a:	ee07 3a90 	vmov	s15, r3
 8002b1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b22:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8002c20 <calc_res_heat+0x148>
 8002b26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b2a:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8002c24 <calc_res_heat+0x14c>
 8002b2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b32:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8002c28 <calc_res_heat+0x150>
 8002b36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b3a:	edc7 7a08 	vstr	s15, [r7, #32]
	var3 = ((float) dev->calib.par_gh3 / (1024.0f));
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8002b44:	ee07 3a90 	vmov	s15, r3
 8002b48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b4c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8002c2c <calc_res_heat+0x154>
 8002b50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b54:	edc7 7a07 	vstr	s15, [r7, #28]
	var4 = (var1 * (1.0f + (var2 * (float) temp)));
 8002b58:	89fb      	ldrh	r3, [r7, #14]
 8002b5a:	ee07 3a90 	vmov	s15, r3
 8002b5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b62:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b72:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b7a:	edc7 7a06 	vstr	s15, [r7, #24]
	var5 = (var4 + (var3 * (float) dev->amb_temp));
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8002b84:	ee07 3a90 	vmov	s15, r3
 8002b88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b8c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b94:	ed97 7a06 	vldr	s14, [r7, #24]
 8002b98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b9c:	edc7 7a05 	vstr	s15, [r7, #20]
	res_heat = (uint8_t) (3.4f
			* ((var5 * (4 / (4 + (float) dev->calib.res_heat_range))
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ba6:	ee07 3a90 	vmov	s15, r3
 8002baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bae:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002bb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bb6:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8002bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bbe:	edd7 7a05 	vldr	s15, [r7, #20]
 8002bc2:	ee27 7a27 	vmul.f32	s14, s14, s15
					* (1 / (1 + ((float) dev->calib.res_heat_val * 0.002f))))
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f993 303d 	ldrsb.w	r3, [r3, #61]	@ 0x3d
 8002bcc:	ee07 3a90 	vmov	s15, r3
 8002bd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bd4:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8002c30 <calc_res_heat+0x158>
 8002bd8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002bdc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002be0:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8002be4:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8002be8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002bec:	ee67 7a27 	vmul.f32	s15, s14, s15
					- 25));
 8002bf0:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8002bf4:	ee77 7ac7 	vsub.f32	s15, s15, s14
			* ((var5 * (4 / (4 + (float) dev->calib.res_heat_range))
 8002bf8:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002c34 <calc_res_heat+0x15c>
 8002bfc:	ee67 7a87 	vmul.f32	s15, s15, s14
	res_heat = (uint8_t) (3.4f
 8002c00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c04:	edc7 7a01 	vstr	s15, [r7, #4]
 8002c08:	793b      	ldrb	r3, [r7, #4]
 8002c0a:	74fb      	strb	r3, [r7, #19]

	return res_heat;
 8002c0c:	7cfb      	ldrb	r3, [r7, #19]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	372c      	adds	r7, #44	@ 0x2c
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	42440000 	.word	0x42440000
 8002c20:	47000000 	.word	0x47000000
 8002c24:	3a03126f 	.word	0x3a03126f
 8002c28:	3b1a0275 	.word	0x3b1a0275
 8002c2c:	44800000 	.word	0x44800000
 8002c30:	3b03126f 	.word	0x3b03126f
 8002c34:	4059999a 	.word	0x4059999a

08002c38 <calc_gas_wait>:

#endif

/* This internal API is used to calculate the gas wait */
static uint8_t calc_gas_wait(uint16_t dur)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	80fb      	strh	r3, [r7, #6]
	uint8_t factor = 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	73fb      	strb	r3, [r7, #15]
	uint8_t durval;

	if (dur >= 0xfc0) {
 8002c46:	88fb      	ldrh	r3, [r7, #6]
 8002c48:	f5b3 6f7c 	cmp.w	r3, #4032	@ 0xfc0
 8002c4c:	d308      	bcc.n	8002c60 <calc_gas_wait+0x28>
		durval = 0xff; /* Max duration*/
 8002c4e:	23ff      	movs	r3, #255	@ 0xff
 8002c50:	73bb      	strb	r3, [r7, #14]
 8002c52:	e00f      	b.n	8002c74 <calc_gas_wait+0x3c>
	} else {
		while (dur > 0x3F) {
			dur = dur / 4;
 8002c54:	88fb      	ldrh	r3, [r7, #6]
 8002c56:	089b      	lsrs	r3, r3, #2
 8002c58:	80fb      	strh	r3, [r7, #6]
			factor += 1;
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	73fb      	strb	r3, [r7, #15]
		while (dur > 0x3F) {
 8002c60:	88fb      	ldrh	r3, [r7, #6]
 8002c62:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c64:	d8f6      	bhi.n	8002c54 <calc_gas_wait+0x1c>
		}

		durval = (uint8_t) (dur + (factor * 64));
 8002c66:	88fb      	ldrh	r3, [r7, #6]
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	019b      	lsls	r3, r3, #6
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	4413      	add	r3, r2
 8002c72:	73bb      	strb	r3, [r7, #14]
	}

	return durval;
 8002c74:	7bbb      	ldrb	r3, [r7, #14]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3714      	adds	r7, #20
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <read_field_data>:

/* This internal API is used to read a single data of the sensor */
static int8_t read_field_data(uint8_t index, struct bme68x_data *data,
		struct bme68x_dev *dev)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b08e      	sub	sp, #56	@ 0x38
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	4603      	mov	r3, r0
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	607a      	str	r2, [r7, #4]
 8002c8e:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME68X_OK;
 8002c90:	2300      	movs	r3, #0
 8002c92:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t buff[BME68X_LEN_FIELD] = { 0 };
 8002c96:	2300      	movs	r3, #0
 8002c98:	613b      	str	r3, [r7, #16]
 8002c9a:	f107 0314 	add.w	r3, r7, #20
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	605a      	str	r2, [r3, #4]
 8002ca4:	609a      	str	r2, [r3, #8]
 8002ca6:	731a      	strb	r2, [r3, #12]
	uint8_t gas_range_l, gas_range_h;
	uint32_t adc_temp;
	uint32_t adc_pres;
	uint16_t adc_hum;
	uint16_t adc_gas_res_low, adc_gas_res_high;
	uint8_t tries = 5;
 8002ca8:	2305      	movs	r3, #5
 8002caa:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

	while ((tries) && (rslt == BME68X_OK)) {
 8002cae:	e11d      	b.n	8002eec <read_field_data+0x26a>
		rslt = bme68x_get_regs(
 8002cb0:	7bfb      	ldrb	r3, [r7, #15]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	0112      	lsls	r2, r2, #4
 8002cb6:	4413      	add	r3, r2
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	331d      	adds	r3, #29
 8002cbc:	b2d8      	uxtb	r0, r3
 8002cbe:	f107 0110 	add.w	r1, r7, #16
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2211      	movs	r2, #17
 8002cc6:	f7fe ff8f 	bl	8001be8 <bme68x_get_regs>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				((uint8_t) (BME68X_REG_FIELD0
						+ (index * BME68X_LEN_FIELD_OFFSET))), buff,
				(uint16_t) BME68X_LEN_FIELD, dev);
		if (!data) {
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d103      	bne.n	8002cde <read_field_data+0x5c>
			rslt = BME68X_E_NULL_PTR;
 8002cd6:	23ff      	movs	r3, #255	@ 0xff
 8002cd8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			break;
 8002cdc:	e10f      	b.n	8002efe <read_field_data+0x27c>
		}

		data->status = buff[0] & BME68X_NEW_DATA_MSK;
 8002cde:	7c3b      	ldrb	r3, [r7, #16]
 8002ce0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	701a      	strb	r2, [r3, #0]
		data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
 8002cea:	7c3b      	ldrb	r3, [r7, #16]
 8002cec:	f003 030f 	and.w	r3, r3, #15
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	705a      	strb	r2, [r3, #1]
		data->meas_index = buff[1];
 8002cf6:	7c7a      	ldrb	r2, [r7, #17]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	709a      	strb	r2, [r3, #2]

		/* read the raw data from the sensor */
		adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096)
 8002cfc:	7cbb      	ldrb	r3, [r7, #18]
 8002cfe:	031a      	lsls	r2, r3, #12
				| ((uint32_t) buff[3] * 16) | ((uint32_t) buff[4] / 16));
 8002d00:	7cfb      	ldrb	r3, [r7, #19]
 8002d02:	011b      	lsls	r3, r3, #4
 8002d04:	4313      	orrs	r3, r2
 8002d06:	7d3a      	ldrb	r2, [r7, #20]
 8002d08:	0912      	lsrs	r2, r2, #4
 8002d0a:	b2d2      	uxtb	r2, r2
		adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	633b      	str	r3, [r7, #48]	@ 0x30
		adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096)
 8002d10:	7d7b      	ldrb	r3, [r7, #21]
 8002d12:	031a      	lsls	r2, r3, #12
				| ((uint32_t) buff[6] * 16) | ((uint32_t) buff[7] / 16));
 8002d14:	7dbb      	ldrb	r3, [r7, #22]
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	7dfa      	ldrb	r2, [r7, #23]
 8002d1c:	0912      	lsrs	r2, r2, #4
 8002d1e:	b2d2      	uxtb	r2, r2
		adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
		adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8002d24:	7e3b      	ldrb	r3, [r7, #24]
 8002d26:	021b      	lsls	r3, r3, #8
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	7e7a      	ldrb	r2, [r7, #25]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	857b      	strh	r3, [r7, #42]	@ 0x2a
		adc_gas_res_low = (uint16_t) ((uint32_t) buff[13] * 4
 8002d30:	7f7b      	ldrb	r3, [r7, #29]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	b29b      	uxth	r3, r3
				| (((uint32_t) buff[14]) / 64));
 8002d36:	7fba      	ldrb	r2, [r7, #30]
		adc_gas_res_low = (uint16_t) ((uint32_t) buff[13] * 4
 8002d38:	0992      	lsrs	r2, r2, #6
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	853b      	strh	r3, [r7, #40]	@ 0x28
		adc_gas_res_high = (uint16_t) ((uint32_t) buff[15] * 4
 8002d40:	7ffb      	ldrb	r3, [r7, #31]
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	b29b      	uxth	r3, r3
				| (((uint32_t) buff[16]) / 64));
 8002d46:	f897 2020 	ldrb.w	r2, [r7, #32]
		adc_gas_res_high = (uint16_t) ((uint32_t) buff[15] * 4
 8002d4a:	0992      	lsrs	r2, r2, #6
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	84fb      	strh	r3, [r7, #38]	@ 0x26
		gas_range_l = buff[14] & BME68X_GAS_RANGE_MSK;
 8002d52:	7fbb      	ldrb	r3, [r7, #30]
 8002d54:	f003 030f 	and.w	r3, r3, #15
 8002d58:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		gas_range_h = buff[16] & BME68X_GAS_RANGE_MSK;
 8002d5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d60:	f003 030f 	and.w	r3, r3, #15
 8002d64:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		if (dev->variant_id == BME68X_VARIANT_GAS_HIGH) {
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d11c      	bne.n	8002daa <read_field_data+0x128>
			data->status |= buff[16] & BME68X_GASM_VALID_MSK;
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	b25a      	sxtb	r2, r3
 8002d76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d7a:	b25b      	sxtb	r3, r3
 8002d7c:	f003 0320 	and.w	r3, r3, #32
 8002d80:	b25b      	sxtb	r3, r3
 8002d82:	4313      	orrs	r3, r2
 8002d84:	b25b      	sxtb	r3, r3
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	701a      	strb	r2, [r3, #0]
			data->status |= buff[16] & BME68X_HEAT_STAB_MSK;
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	b25a      	sxtb	r2, r3
 8002d92:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d96:	b25b      	sxtb	r3, r3
 8002d98:	f003 0310 	and.w	r3, r3, #16
 8002d9c:	b25b      	sxtb	r3, r3
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	b25b      	sxtb	r3, r3
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	701a      	strb	r2, [r3, #0]
 8002da8:	e019      	b.n	8002dde <read_field_data+0x15c>
		} else {
			data->status |= buff[14] & BME68X_GASM_VALID_MSK;
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	b25a      	sxtb	r2, r3
 8002db0:	7fbb      	ldrb	r3, [r7, #30]
 8002db2:	b25b      	sxtb	r3, r3
 8002db4:	f003 0320 	and.w	r3, r3, #32
 8002db8:	b25b      	sxtb	r3, r3
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	b25b      	sxtb	r3, r3
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	701a      	strb	r2, [r3, #0]
			data->status |= buff[14] & BME68X_HEAT_STAB_MSK;
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	b25a      	sxtb	r2, r3
 8002dca:	7fbb      	ldrb	r3, [r7, #30]
 8002dcc:	b25b      	sxtb	r3, r3
 8002dce:	f003 0310 	and.w	r3, r3, #16
 8002dd2:	b25b      	sxtb	r3, r3
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	b25b      	sxtb	r3, r3
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	701a      	strb	r2, [r3, #0]
		}

		if ((data->status & BME68X_NEW_DATA_MSK) && (rslt == BME68X_OK)) {
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	b25b      	sxtb	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	da70      	bge.n	8002eca <read_field_data+0x248>
 8002de8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d16c      	bne.n	8002eca <read_field_data+0x248>
			rslt = bme68x_get_regs(BME68X_REG_RES_HEAT0 + data->gas_index,
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	785b      	ldrb	r3, [r3, #1]
 8002df4:	335a      	adds	r3, #90	@ 0x5a
 8002df6:	b2d8      	uxtb	r0, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	1cd9      	adds	r1, r3, #3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f7fe fef2 	bl	8001be8 <bme68x_get_regs>
 8002e04:	4603      	mov	r3, r0
 8002e06:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					&data->res_heat, 1, dev);
			if (rslt == BME68X_OK) {
 8002e0a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10c      	bne.n	8002e2c <read_field_data+0x1aa>
				rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0 + data->gas_index,
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	785b      	ldrb	r3, [r3, #1]
 8002e16:	3350      	adds	r3, #80	@ 0x50
 8002e18:	b2d8      	uxtb	r0, r3
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	1d19      	adds	r1, r3, #4
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f7fe fee1 	bl	8001be8 <bme68x_get_regs>
 8002e26:	4603      	mov	r3, r0
 8002e28:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						&data->idac, 1, dev);
			}

			if (rslt == BME68X_OK) {
 8002e2c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10c      	bne.n	8002e4e <read_field_data+0x1cc>
				rslt = bme68x_get_regs(BME68X_REG_GAS_WAIT0 + data->gas_index,
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	785b      	ldrb	r3, [r3, #1]
 8002e38:	3364      	adds	r3, #100	@ 0x64
 8002e3a:	b2d8      	uxtb	r0, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	1d59      	adds	r1, r3, #5
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f7fe fed0 	bl	8001be8 <bme68x_get_regs>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						&data->gas_wait, 1, dev);
			}

			if (rslt == BME68X_OK) {
 8002e4e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d139      	bne.n	8002eca <read_field_data+0x248>
				data->temperature = calc_temperature(adc_temp, dev);
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002e5a:	f7ff facd 	bl	80023f8 <calc_temperature>
 8002e5e:	eef0 7a40 	vmov.f32	s15, s0
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	edc3 7a03 	vstr	s15, [r3, #12]
				data->pressure = calc_pressure(adc_pres, dev);
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e6c:	f7ff fb4a 	bl	8002504 <calc_pressure>
 8002e70:	eef0 7a40 	vmov.f32	s15, s0
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	edc3 7a04 	vstr	s15, [r3, #16]
				data->humidity = calc_humidity(adc_hum, dev);
 8002e7a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff fc82 	bl	8002788 <calc_humidity>
 8002e84:	eef0 7a40 	vmov.f32	s15, s0
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	edc3 7a05 	vstr	s15, [r3, #20]
				if (dev->variant_id == BME68X_VARIANT_GAS_HIGH) {
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d10c      	bne.n	8002eb0 <read_field_data+0x22e>
					data->gas_resistance = calc_gas_resistance_high(
 8002e96:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002e9a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002e9c:	4611      	mov	r1, r2
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff fde0 	bl	8002a64 <calc_gas_resistance_high>
 8002ea4:	eef0 7a40 	vmov.f32	s15, s0
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	edc3 7a06 	vstr	s15, [r3, #24]
				} else {
					data->gas_resistance = calc_gas_resistance_low(
							adc_gas_res_low, gas_range_l, dev);
				}

				break;
 8002eae:	e026      	b.n	8002efe <read_field_data+0x27c>
					data->gas_resistance = calc_gas_resistance_low(
 8002eb0:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8002eb4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff fd31 	bl	8002920 <calc_gas_resistance_low>
 8002ebe:	eef0 7a40 	vmov.f32	s15, s0
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	edc3 7a06 	vstr	s15, [r3, #24]
				break;
 8002ec8:	e019      	b.n	8002efe <read_field_data+0x27c>
			}
		}

		if (rslt == BME68X_OK) {
 8002eca:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d107      	bne.n	8002ee2 <read_field_data+0x260>
			dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6852      	ldr	r2, [r2, #4]
 8002eda:	4611      	mov	r1, r2
 8002edc:	f242 7010 	movw	r0, #10000	@ 0x2710
 8002ee0:	4798      	blx	r3
		}

		tries--;
 8002ee2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	while ((tries) && (rslt == BME68X_OK)) {
 8002eec:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d004      	beq.n	8002efe <read_field_data+0x27c>
 8002ef4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f43f aed9 	beq.w	8002cb0 <read_field_data+0x2e>
	}

	return rslt;
 8002efe:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3738      	adds	r7, #56	@ 0x38
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <read_all_field_data>:

/* This internal API is used to read all data fields of the sensor */
static int8_t read_all_field_data(struct bme68x_data *const data[],
		struct bme68x_dev *dev)
{
 8002f0a:	b590      	push	{r4, r7, lr}
 8002f0c:	b09d      	sub	sp, #116	@ 0x74
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
 8002f12:	6039      	str	r1, [r7, #0]
	int8_t rslt = BME68X_OK;
 8002f14:	2300      	movs	r3, #0
 8002f16:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	uint8_t buff[BME68X_LEN_FIELD * 3] = { 0 };
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f22:	222f      	movs	r2, #47	@ 0x2f
 8002f24:	2100      	movs	r1, #0
 8002f26:	4618      	mov	r0, r3
 8002f28:	f00b ff04 	bl	800ed34 <memset>
	uint32_t adc_temp;
	uint32_t adc_pres;
	uint16_t adc_hum;
	uint16_t adc_gas_res_low, adc_gas_res_high;
	uint8_t off;
	uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60bb      	str	r3, [r7, #8]
 8002f30:	f107 030c 	add.w	r3, r7, #12
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	605a      	str	r2, [r3, #4]
 8002f3a:	609a      	str	r2, [r3, #8]
 8002f3c:	60da      	str	r2, [r3, #12]
 8002f3e:	611a      	str	r2, [r3, #16]
 8002f40:	615a      	str	r2, [r3, #20]
 8002f42:	831a      	strh	r2, [r3, #24]
	uint8_t i;

	if (!data[0] && !data[1] && !data[2]) {
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10c      	bne.n	8002f66 <read_all_field_data+0x5c>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3304      	adds	r3, #4
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d107      	bne.n	8002f66 <read_all_field_data+0x5c>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3308      	adds	r3, #8
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d102      	bne.n	8002f66 <read_all_field_data+0x5c>
		rslt = BME68X_E_NULL_PTR;
 8002f60:	23ff      	movs	r3, #255	@ 0xff
 8002f62:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	}

	if (rslt == BME68X_OK) {
 8002f66:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d109      	bne.n	8002f82 <read_all_field_data+0x78>
		rslt = bme68x_get_regs(BME68X_REG_FIELD0, buff,
 8002f6e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	2233      	movs	r2, #51	@ 0x33
 8002f76:	201d      	movs	r0, #29
 8002f78:	f7fe fe36 	bl	8001be8 <bme68x_get_regs>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				(uint32_t) BME68X_LEN_FIELD * 3, dev);
	}

	if (rslt == BME68X_OK) {
 8002f82:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d109      	bne.n	8002f9e <read_all_field_data+0x94>
		rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0, set_val, 30, dev);
 8002f8a:	f107 0108 	add.w	r1, r7, #8
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	221e      	movs	r2, #30
 8002f92:	2050      	movs	r0, #80	@ 0x50
 8002f94:	f7fe fe28 	bl	8001be8 <bme68x_get_regs>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	}

	for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++) {
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8002fa4:	e1ce      	b.n	8003344 <read_all_field_data+0x43a>
		off = (uint8_t) (i * BME68X_LEN_FIELD);
 8002fa6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002faa:	461a      	mov	r2, r3
 8002fac:	0112      	lsls	r2, r2, #4
 8002fae:	4413      	add	r3, r2
 8002fb0:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
		data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 8002fb4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002fb8:	3370      	adds	r3, #112	@ 0x70
 8002fba:	443b      	add	r3, r7
 8002fbc:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 8002fc0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	440b      	add	r3, r1
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	701a      	strb	r2, [r3, #0]
		data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 8002fd4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002fd8:	3370      	adds	r3, #112	@ 0x70
 8002fda:	443b      	add	r3, r7
 8002fdc:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 8002fe0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	440b      	add	r3, r1
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f002 020f 	and.w	r2, r2, #15
 8002ff0:	b2d2      	uxtb	r2, r2
 8002ff2:	705a      	strb	r2, [r3, #1]
		data[i]->meas_index = buff[off + 1];
 8002ff4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002ff8:	1c5a      	adds	r2, r3, #1
 8002ffa:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	440b      	add	r3, r1
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	3270      	adds	r2, #112	@ 0x70
 8003008:	443a      	add	r2, r7
 800300a:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 800300e:	709a      	strb	r2, [r3, #2]

		/* read the raw data from the sensor */
		adc_pres = (uint32_t) (((uint32_t) buff[off + 2] * 4096)
 8003010:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003014:	3302      	adds	r3, #2
 8003016:	3370      	adds	r3, #112	@ 0x70
 8003018:	443b      	add	r3, r7
 800301a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800301e:	031a      	lsls	r2, r3, #12
				| ((uint32_t) buff[off + 3] * 16)
 8003020:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003024:	3303      	adds	r3, #3
 8003026:	3370      	adds	r3, #112	@ 0x70
 8003028:	443b      	add	r3, r7
 800302a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	4313      	orrs	r3, r2
				| ((uint32_t) buff[off + 4] / 16));
 8003032:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8003036:	3204      	adds	r2, #4
 8003038:	3270      	adds	r2, #112	@ 0x70
 800303a:	443a      	add	r2, r7
 800303c:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8003040:	0912      	lsrs	r2, r2, #4
 8003042:	b2d2      	uxtb	r2, r2
		adc_pres = (uint32_t) (((uint32_t) buff[off + 2] * 4096)
 8003044:	4313      	orrs	r3, r2
 8003046:	66bb      	str	r3, [r7, #104]	@ 0x68
		adc_temp = (uint32_t) (((uint32_t) buff[off + 5] * 4096)
 8003048:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800304c:	3305      	adds	r3, #5
 800304e:	3370      	adds	r3, #112	@ 0x70
 8003050:	443b      	add	r3, r7
 8003052:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8003056:	031a      	lsls	r2, r3, #12
				| ((uint32_t) buff[off + 6] * 16)
 8003058:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800305c:	3306      	adds	r3, #6
 800305e:	3370      	adds	r3, #112	@ 0x70
 8003060:	443b      	add	r3, r7
 8003062:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	4313      	orrs	r3, r2
				| ((uint32_t) buff[off + 7] / 16));
 800306a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800306e:	3207      	adds	r2, #7
 8003070:	3270      	adds	r2, #112	@ 0x70
 8003072:	443a      	add	r2, r7
 8003074:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8003078:	0912      	lsrs	r2, r2, #4
 800307a:	b2d2      	uxtb	r2, r2
		adc_temp = (uint32_t) (((uint32_t) buff[off + 5] * 4096)
 800307c:	4313      	orrs	r3, r2
 800307e:	667b      	str	r3, [r7, #100]	@ 0x64
		adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256)
 8003080:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003084:	3308      	adds	r3, #8
 8003086:	3370      	adds	r3, #112	@ 0x70
 8003088:	443b      	add	r3, r7
 800308a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800308e:	021b      	lsls	r3, r3, #8
 8003090:	b29b      	uxth	r3, r3
				| (uint32_t) buff[off + 9]);
 8003092:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8003096:	3209      	adds	r2, #9
 8003098:	3270      	adds	r2, #112	@ 0x70
 800309a:	443a      	add	r2, r7
 800309c:	f812 2c48 	ldrb.w	r2, [r2, #-72]
		adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
		adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4
 80030a6:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80030aa:	330d      	adds	r3, #13
 80030ac:	3370      	adds	r3, #112	@ 0x70
 80030ae:	443b      	add	r3, r7
 80030b0:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	b29b      	uxth	r3, r3
				| (((uint32_t) buff[off + 14]) / 64));
 80030b8:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80030bc:	320e      	adds	r2, #14
 80030be:	3270      	adds	r2, #112	@ 0x70
 80030c0:	443a      	add	r2, r7
 80030c2:	f812 2c48 	ldrb.w	r2, [r2, #-72]
		adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4
 80030c6:	0992      	lsrs	r2, r2, #6
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
		adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4
 80030d0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80030d4:	330f      	adds	r3, #15
 80030d6:	3370      	adds	r3, #112	@ 0x70
 80030d8:	443b      	add	r3, r7
 80030da:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	b29b      	uxth	r3, r3
				| (((uint32_t) buff[off + 16]) / 64));
 80030e2:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80030e6:	3210      	adds	r2, #16
 80030e8:	3270      	adds	r2, #112	@ 0x70
 80030ea:	443a      	add	r2, r7
 80030ec:	f812 2c48 	ldrb.w	r2, [r2, #-72]
		adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4
 80030f0:	0992      	lsrs	r2, r2, #6
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	4313      	orrs	r3, r2
 80030f6:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		gas_range_l = buff[off + 14] & BME68X_GAS_RANGE_MSK;
 80030fa:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80030fe:	330e      	adds	r3, #14
 8003100:	3370      	adds	r3, #112	@ 0x70
 8003102:	443b      	add	r3, r7
 8003104:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8003108:	f003 030f 	and.w	r3, r3, #15
 800310c:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
		gas_range_h = buff[off + 16] & BME68X_GAS_RANGE_MSK;
 8003110:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003114:	3310      	adds	r3, #16
 8003116:	3370      	adds	r3, #112	@ 0x70
 8003118:	443b      	add	r3, r7
 800311a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
		if (dev->variant_id == BME68X_VARIANT_GAS_HIGH) {
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d13a      	bne.n	80031a4 <read_all_field_data+0x29a>
			data[i]->status |= buff[off + 16] & BME68X_GASM_VALID_MSK;
 800312e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	4413      	add	r3, r2
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	b25a      	sxtb	r2, r3
 800313e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003142:	3310      	adds	r3, #16
 8003144:	3370      	adds	r3, #112	@ 0x70
 8003146:	443b      	add	r3, r7
 8003148:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800314c:	b25b      	sxtb	r3, r3
 800314e:	f003 0320 	and.w	r3, r3, #32
 8003152:	b25b      	sxtb	r3, r3
 8003154:	4313      	orrs	r3, r2
 8003156:	b259      	sxtb	r1, r3
 8003158:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	4413      	add	r3, r2
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	b2ca      	uxtb	r2, r1
 8003166:	701a      	strb	r2, [r3, #0]
			data[i]->status |= buff[off + 16] & BME68X_HEAT_STAB_MSK;
 8003168:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	4413      	add	r3, r2
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	b25a      	sxtb	r2, r3
 8003178:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800317c:	3310      	adds	r3, #16
 800317e:	3370      	adds	r3, #112	@ 0x70
 8003180:	443b      	add	r3, r7
 8003182:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8003186:	b25b      	sxtb	r3, r3
 8003188:	f003 0310 	and.w	r3, r3, #16
 800318c:	b25b      	sxtb	r3, r3
 800318e:	4313      	orrs	r3, r2
 8003190:	b259      	sxtb	r1, r3
 8003192:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	4413      	add	r3, r2
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	b2ca      	uxtb	r2, r1
 80031a0:	701a      	strb	r2, [r3, #0]
 80031a2:	e039      	b.n	8003218 <read_all_field_data+0x30e>
		} else {
			data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
 80031a4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	4413      	add	r3, r2
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	b25a      	sxtb	r2, r3
 80031b4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80031b8:	330e      	adds	r3, #14
 80031ba:	3370      	adds	r3, #112	@ 0x70
 80031bc:	443b      	add	r3, r7
 80031be:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80031c2:	b25b      	sxtb	r3, r3
 80031c4:	f003 0320 	and.w	r3, r3, #32
 80031c8:	b25b      	sxtb	r3, r3
 80031ca:	4313      	orrs	r3, r2
 80031cc:	b259      	sxtb	r1, r3
 80031ce:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	4413      	add	r3, r2
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	b2ca      	uxtb	r2, r1
 80031dc:	701a      	strb	r2, [r3, #0]
			data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
 80031de:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	4413      	add	r3, r2
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	b25a      	sxtb	r2, r3
 80031ee:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80031f2:	330e      	adds	r3, #14
 80031f4:	3370      	adds	r3, #112	@ 0x70
 80031f6:	443b      	add	r3, r7
 80031f8:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80031fc:	b25b      	sxtb	r3, r3
 80031fe:	f003 0310 	and.w	r3, r3, #16
 8003202:	b25b      	sxtb	r3, r3
 8003204:	4313      	orrs	r3, r2
 8003206:	b259      	sxtb	r1, r3
 8003208:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	4413      	add	r3, r2
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	b2ca      	uxtb	r2, r1
 8003216:	701a      	strb	r2, [r3, #0]
		}

		data[i]->idac = set_val[data[i]->gas_index];
 8003218:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	4413      	add	r3, r2
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	785b      	ldrb	r3, [r3, #1]
 8003226:	4619      	mov	r1, r3
 8003228:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	4413      	add	r3, r2
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f101 0270 	add.w	r2, r1, #112	@ 0x70
 8003238:	443a      	add	r2, r7
 800323a:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 800323e:	711a      	strb	r2, [r3, #4]
		data[i]->res_heat = set_val[10 + data[i]->gas_index];
 8003240:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	4413      	add	r3, r2
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	785b      	ldrb	r3, [r3, #1]
 800324e:	f103 020a 	add.w	r2, r3, #10
 8003252:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	440b      	add	r3, r1
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	3270      	adds	r2, #112	@ 0x70
 8003260:	443a      	add	r2, r7
 8003262:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8003266:	70da      	strb	r2, [r3, #3]
		data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 8003268:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	4413      	add	r3, r2
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	785b      	ldrb	r3, [r3, #1]
 8003276:	f103 0214 	add.w	r2, r3, #20
 800327a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	440b      	add	r3, r1
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	3270      	adds	r2, #112	@ 0x70
 8003288:	443a      	add	r2, r7
 800328a:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 800328e:	715a      	strb	r2, [r3, #5]
		data[i]->temperature = calc_temperature(adc_temp, dev);
 8003290:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	4413      	add	r3, r2
 800329a:	681c      	ldr	r4, [r3, #0]
 800329c:	6839      	ldr	r1, [r7, #0]
 800329e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80032a0:	f7ff f8aa 	bl	80023f8 <calc_temperature>
 80032a4:	eef0 7a40 	vmov.f32	s15, s0
 80032a8:	edc4 7a03 	vstr	s15, [r4, #12]
		data[i]->pressure = calc_pressure(adc_pres, dev);
 80032ac:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	4413      	add	r3, r2
 80032b6:	681c      	ldr	r4, [r3, #0]
 80032b8:	6839      	ldr	r1, [r7, #0]
 80032ba:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80032bc:	f7ff f922 	bl	8002504 <calc_pressure>
 80032c0:	eef0 7a40 	vmov.f32	s15, s0
 80032c4:	edc4 7a04 	vstr	s15, [r4, #16]
		data[i]->humidity = calc_humidity(adc_hum, dev);
 80032c8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	4413      	add	r3, r2
 80032d2:	681c      	ldr	r4, [r3, #0]
 80032d4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80032d8:	6839      	ldr	r1, [r7, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff fa54 	bl	8002788 <calc_humidity>
 80032e0:	eef0 7a40 	vmov.f32	s15, s0
 80032e4:	edc4 7a05 	vstr	s15, [r4, #20]
		if (dev->variant_id == BME68X_VARIANT_GAS_HIGH) {
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d112      	bne.n	8003316 <read_all_field_data+0x40c>
			data[i]->gas_resistance = calc_gas_resistance_high(adc_gas_res_high,
 80032f0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	4413      	add	r3, r2
 80032fa:	681c      	ldr	r4, [r3, #0]
 80032fc:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8003300:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8003304:	4611      	mov	r1, r2
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff fbac 	bl	8002a64 <calc_gas_resistance_high>
 800330c:	eef0 7a40 	vmov.f32	s15, s0
 8003310:	edc4 7a06 	vstr	s15, [r4, #24]
 8003314:	e011      	b.n	800333a <read_all_field_data+0x430>
					gas_range_h);
		} else {
			data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low,
 8003316:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	4413      	add	r3, r2
 8003320:	681c      	ldr	r4, [r3, #0]
 8003322:	f897 105d 	ldrb.w	r1, [r7, #93]	@ 0x5d
 8003326:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff faf7 	bl	8002920 <calc_gas_resistance_low>
 8003332:	eef0 7a40 	vmov.f32	s15, s0
 8003336:	edc4 7a06 	vstr	s15, [r4, #24]
	for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++) {
 800333a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800333e:	3301      	adds	r3, #1
 8003340:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8003344:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003348:	2b02      	cmp	r3, #2
 800334a:	d804      	bhi.n	8003356 <read_all_field_data+0x44c>
 800334c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003350:	2b00      	cmp	r3, #0
 8003352:	f43f ae28 	beq.w	8002fa6 <read_all_field_data+0x9c>
					gas_range_l, dev);
		}
	}

	return rslt;
 8003356:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 800335a:	4618      	mov	r0, r3
 800335c:	3774      	adds	r7, #116	@ 0x74
 800335e:	46bd      	mov	sp, r7
 8003360:	bd90      	pop	{r4, r7, pc}

08003362 <set_mem_page>:

/* This internal API is used to switch between SPI memory pages */
static int8_t set_mem_page(uint8_t reg_addr, struct bme68x_dev *dev)
{
 8003362:	b590      	push	{r4, r7, lr}
 8003364:	b085      	sub	sp, #20
 8003366:	af00      	add	r7, sp, #0
 8003368:	4603      	mov	r3, r0
 800336a:	6039      	str	r1, [r7, #0]
 800336c:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 800336e:	6838      	ldr	r0, [r7, #0]
 8003370:	f000 f8b8 	bl	80034e4 <null_ptr_check>
 8003374:	4603      	mov	r3, r0
 8003376:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME68X_OK) {
 8003378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d14f      	bne.n	8003420 <set_mem_page+0xbe>
		if (reg_addr > 0x7f) {
 8003380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003384:	2b00      	cmp	r3, #0
 8003386:	da02      	bge.n	800338e <set_mem_page+0x2c>
			mem_page = BME68X_MEM_PAGE1;
 8003388:	2300      	movs	r3, #0
 800338a:	73bb      	strb	r3, [r7, #14]
 800338c:	e001      	b.n	8003392 <set_mem_page+0x30>
		} else {
			mem_page = BME68X_MEM_PAGE0;
 800338e:	2310      	movs	r3, #16
 8003390:	73bb      	strb	r3, [r7, #14]
		}

		if (mem_page != dev->mem_page) {
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	7b5b      	ldrb	r3, [r3, #13]
 8003396:	7bba      	ldrb	r2, [r7, #14]
 8003398:	429a      	cmp	r2, r3
 800339a:	d041      	beq.n	8003420 <set_mem_page+0xbe>
			dev->mem_page = mem_page;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	7bba      	ldrb	r2, [r7, #14]
 80033a0:	735a      	strb	r2, [r3, #13]
			dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK,
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f107 010d 	add.w	r1, r7, #13
 80033ae:	2201      	movs	r2, #1
 80033b0:	20f3      	movs	r0, #243	@ 0xf3
 80033b2:	47a0      	blx	r4
 80033b4:	4603      	mov	r3, r0
 80033b6:	461a      	mov	r2, r3
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
					&reg, 1, dev->intf_ptr);
			if (dev->intf_rslt != 0) {
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <set_mem_page+0x6a>
				rslt = BME68X_E_COM_FAIL;
 80033c8:	23fe      	movs	r3, #254	@ 0xfe
 80033ca:	73fb      	strb	r3, [r7, #15]
			}

			if (rslt == BME68X_OK) {
 80033cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d125      	bne.n	8003420 <set_mem_page+0xbe>
				reg = reg & (~BME68X_MEM_PAGE_MSK);
 80033d4:	7b7b      	ldrb	r3, [r7, #13]
 80033d6:	f023 0310 	bic.w	r3, r3, #16
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	737b      	strb	r3, [r7, #13]
				reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	7b5b      	ldrb	r3, [r3, #13]
 80033e2:	b25b      	sxtb	r3, r3
 80033e4:	f003 0310 	and.w	r3, r3, #16
 80033e8:	b25a      	sxtb	r2, r3
 80033ea:	7b7b      	ldrb	r3, [r7, #13]
 80033ec:	b25b      	sxtb	r3, r3
 80033ee:	4313      	orrs	r3, r2
 80033f0:	b25b      	sxtb	r3, r3
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	737b      	strb	r3, [r7, #13]
				dev->intf_rslt = dev->write(
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f107 010d 	add.w	r1, r7, #13
 8003402:	2201      	movs	r2, #1
 8003404:	2073      	movs	r0, #115	@ 0x73
 8003406:	47a0      	blx	r4
 8003408:	4603      	mov	r3, r0
 800340a:	461a      	mov	r2, r3
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
						BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1,
						dev->intf_ptr);
				if (dev->intf_rslt != 0) {
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <set_mem_page+0xbe>
					rslt = BME68X_E_COM_FAIL;
 800341c:	23fe      	movs	r3, #254	@ 0xfe
 800341e:	73fb      	strb	r3, [r7, #15]
				}
			}
		}
	}

	return rslt;
 8003420:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	bd90      	pop	{r4, r7, pc}

0800342c <get_mem_page>:

/* This internal API is used to get the current SPI memory page */
static int8_t get_mem_page(struct bme68x_dev *dev)
{
 800342c:	b590      	push	{r4, r7, lr}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f855 	bl	80034e4 <null_ptr_check>
 800343a:	4603      	mov	r3, r0
 800343c:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME68X_OK) {
 800343e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d11b      	bne.n	800347e <get_mem_page+0x52>
		dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK,
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f107 010e 	add.w	r1, r7, #14
 8003452:	2201      	movs	r2, #1
 8003454:	20f3      	movs	r0, #243	@ 0xf3
 8003456:	47a0      	blx	r4
 8003458:	4603      	mov	r3, r0
 800345a:	461a      	mov	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
				&reg, 1, dev->intf_ptr);
		if (dev->intf_rslt != 0) {
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <get_mem_page+0x46>
			rslt = BME68X_E_COM_FAIL;
 800346c:	23fe      	movs	r3, #254	@ 0xfe
 800346e:	73fb      	strb	r3, [r7, #15]
 8003470:	e005      	b.n	800347e <get_mem_page+0x52>
		} else {
			dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 8003472:	7bbb      	ldrb	r3, [r7, #14]
 8003474:	f003 0310 	and.w	r3, r3, #16
 8003478:	b2da      	uxtb	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	735a      	strb	r2, [r3, #13]
		}
	}

	return rslt;
 800347e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	bd90      	pop	{r4, r7, pc}

0800348a <boundary_check>:

/* This internal API is used to limit the max value of a parameter */
static int8_t boundary_check(uint8_t *value, uint8_t max,
		struct bme68x_dev *dev)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b086      	sub	sp, #24
 800348e:	af00      	add	r7, sp, #0
 8003490:	60f8      	str	r0, [r7, #12]
 8003492:	460b      	mov	r3, r1
 8003494:	607a      	str	r2, [r7, #4]
 8003496:	72fb      	strb	r3, [r7, #11]
	int8_t rslt;

	rslt = null_ptr_check(dev);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 f823 	bl	80034e4 <null_ptr_check>
 800349e:	4603      	mov	r3, r0
 80034a0:	75fb      	strb	r3, [r7, #23]
	if ((value != NULL) && (rslt == BME68X_OK)) {
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d015      	beq.n	80034d4 <boundary_check+0x4a>
 80034a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d111      	bne.n	80034d4 <boundary_check+0x4a>
		/* Check if value is above maximum value */
		if (*value > max) {
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	7afa      	ldrb	r2, [r7, #11]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d20e      	bcs.n	80034d8 <boundary_check+0x4e>
			/* Auto correct the invalid value to maximum value */
			*value = max;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	7afa      	ldrb	r2, [r7, #11]
 80034be:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME68X_I_PARAM_CORR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80034c6:	f043 0301 	orr.w	r3, r3, #1
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
		if (*value > max) {
 80034d2:	e001      	b.n	80034d8 <boundary_check+0x4e>
		}
	} else {
		rslt = BME68X_E_NULL_PTR;
 80034d4:	23ff      	movs	r3, #255	@ 0xff
 80034d6:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80034d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3718      	adds	r7, #24
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <null_ptr_check>:

/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
	int8_t rslt = BME68X_OK;
 80034ec:	2300      	movs	r3, #0
 80034ee:	73fb      	strb	r3, [r7, #15]

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00b      	beq.n	800350e <null_ptr_check+0x2a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d007      	beq.n	800350e <null_ptr_check+0x2a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <null_ptr_check+0x2a>
			|| (dev->delay_us == NULL)) {
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <null_ptr_check+0x2e>
		/* Device structure pointer is not valid */
		rslt = BME68X_E_NULL_PTR;
 800350e:	23ff      	movs	r3, #255	@ 0xff
 8003510:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8003512:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
	...

08003524 <set_conf>:

/* This internal API is used to set heater configurations */
static int8_t set_conf(const struct bme68x_heatr_conf *conf, uint8_t op_mode,
		uint8_t *nb_conv, struct bme68x_dev *dev)
{
 8003524:	b590      	push	{r4, r7, lr}
 8003526:	b093      	sub	sp, #76	@ 0x4c
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	607a      	str	r2, [r7, #4]
 800352e:	603b      	str	r3, [r7, #0]
 8003530:	460b      	mov	r3, r1
 8003532:	72fb      	strb	r3, [r7, #11]
	int8_t rslt = BME68X_OK;
 8003534:	2300      	movs	r3, #0
 8003536:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	uint8_t i;
	uint8_t shared_dur;
	uint8_t write_len = 0;
 800353a:	2300      	movs	r3, #0
 800353c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
	uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 8003540:	236e      	movs	r3, #110	@ 0x6e
 8003542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8003546:	4aa1      	ldr	r2, [pc, #644]	@ (80037cc <set_conf+0x2a8>)
 8003548:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800354c:	ca07      	ldmia	r2, {r0, r1, r2}
 800354e:	c303      	stmia	r3!, {r0, r1}
 8003550:	801a      	strh	r2, [r3, #0]
	uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8003552:	4a9e      	ldr	r2, [pc, #632]	@ (80037cc <set_conf+0x2a8>)
 8003554:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003558:	ca07      	ldmia	r2, {r0, r1, r2}
 800355a:	c303      	stmia	r3!, {r0, r1}
 800355c:	801a      	strh	r2, [r3, #0]
	uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 800355e:	4a9b      	ldr	r2, [pc, #620]	@ (80037cc <set_conf+0x2a8>)
 8003560:	f107 0320 	add.w	r3, r7, #32
 8003564:	ca07      	ldmia	r2, {r0, r1, r2}
 8003566:	c303      	stmia	r3!, {r0, r1}
 8003568:	801a      	strh	r2, [r3, #0]
	uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 800356a:	4a98      	ldr	r2, [pc, #608]	@ (80037cc <set_conf+0x2a8>)
 800356c:	f107 0314 	add.w	r3, r7, #20
 8003570:	ca07      	ldmia	r2, {r0, r1, r2}
 8003572:	c303      	stmia	r3!, {r0, r1}
 8003574:	801a      	strh	r2, [r3, #0]

	switch (op_mode) {
 8003576:	7afb      	ldrb	r3, [r7, #11]
 8003578:	2b03      	cmp	r3, #3
 800357a:	d024      	beq.n	80035c6 <set_conf+0xa2>
 800357c:	2b03      	cmp	r3, #3
 800357e:	f300 80f9 	bgt.w	8003774 <set_conf+0x250>
 8003582:	2b01      	cmp	r3, #1
 8003584:	d002      	beq.n	800358c <set_conf+0x68>
 8003586:	2b02      	cmp	r3, #2
 8003588:	d07c      	beq.n	8003684 <set_conf+0x160>
 800358a:	e0f3      	b.n	8003774 <set_conf+0x250>
	case BME68X_FORCED_MODE:
		rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 800358c:	235a      	movs	r3, #90	@ 0x5a
 800358e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
		rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	885b      	ldrh	r3, [r3, #2]
 8003596:	6839      	ldr	r1, [r7, #0]
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff fa9d 	bl	8002ad8 <calc_res_heat>
 800359e:	4603      	mov	r3, r0
 80035a0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
		gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 80035a4:	2364      	movs	r3, #100	@ 0x64
 80035a6:	f887 3020 	strb.w	r3, [r7, #32]
		gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	889b      	ldrh	r3, [r3, #4]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff fb42 	bl	8002c38 <calc_gas_wait>
 80035b4:	4603      	mov	r3, r0
 80035b6:	753b      	strb	r3, [r7, #20]
		(*nb_conv) = 0;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	701a      	strb	r2, [r3, #0]
		write_len = 1;
 80035be:	2301      	movs	r3, #1
 80035c0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
		break;
 80035c4:	e0db      	b.n	800377e <set_conf+0x25a>
	case BME68X_SEQUENTIAL_MODE:
		if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof)) {
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <set_conf+0xb2>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d103      	bne.n	80035de <set_conf+0xba>
			rslt = BME68X_E_NULL_PTR;
 80035d6:	23ff      	movs	r3, #255	@ 0xff
 80035d8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			break;
 80035dc:	e0cf      	b.n	800377e <set_conf+0x25a>
		}

		for (i = 0; i < conf->profile_len; i++) {
 80035de:	2300      	movs	r3, #0
 80035e0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80035e4:	e03f      	b.n	8003666 <set_conf+0x142>
			rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 80035e6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80035ea:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80035ee:	325a      	adds	r2, #90	@ 0x5a
 80035f0:	b2d2      	uxtb	r2, r2
 80035f2:	3348      	adds	r3, #72	@ 0x48
 80035f4:	443b      	add	r3, r7
 80035f6:	f803 2c10 	strb.w	r2, [r3, #-16]
			rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	4413      	add	r3, r2
 8003606:	881b      	ldrh	r3, [r3, #0]
 8003608:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 800360c:	6839      	ldr	r1, [r7, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff fa62 	bl	8002ad8 <calc_res_heat>
 8003614:	4603      	mov	r3, r0
 8003616:	461a      	mov	r2, r3
 8003618:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 800361c:	443b      	add	r3, r7
 800361e:	f803 2c1c 	strb.w	r2, [r3, #-28]
			gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8003622:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003626:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800362a:	3264      	adds	r2, #100	@ 0x64
 800362c:	b2d2      	uxtb	r2, r2
 800362e:	3348      	adds	r3, #72	@ 0x48
 8003630:	443b      	add	r3, r7
 8003632:	f803 2c28 	strb.w	r2, [r3, #-40]
			gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	4413      	add	r3, r2
 8003642:	881b      	ldrh	r3, [r3, #0]
 8003644:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff faf5 	bl	8002c38 <calc_gas_wait>
 800364e:	4603      	mov	r3, r0
 8003650:	461a      	mov	r2, r3
 8003652:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8003656:	443b      	add	r3, r7
 8003658:	f803 2c34 	strb.w	r2, [r3, #-52]
		for (i = 0; i < conf->profile_len; i++) {
 800365c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003660:	3301      	adds	r3, #1
 8003662:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	7c1b      	ldrb	r3, [r3, #16]
 800366a:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800366e:	429a      	cmp	r2, r3
 8003670:	d3b9      	bcc.n	80035e6 <set_conf+0xc2>
		}

		(*nb_conv) = conf->profile_len;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	7c1a      	ldrb	r2, [r3, #16]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	701a      	strb	r2, [r3, #0]
		write_len = conf->profile_len;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	7c1b      	ldrb	r3, [r3, #16]
 800367e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
		break;
 8003682:	e07c      	b.n	800377e <set_conf+0x25a>
	case BME68X_PARALLEL_MODE:
		if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof)) {
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <set_conf+0x170>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d103      	bne.n	800369c <set_conf+0x178>
			rslt = BME68X_E_NULL_PTR;
 8003694:	23ff      	movs	r3, #255	@ 0xff
 8003696:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			break;
 800369a:	e070      	b.n	800377e <set_conf+0x25a>
		}

		if (conf->shared_heatr_dur == 0) {
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8a5b      	ldrh	r3, [r3, #18]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d102      	bne.n	80036aa <set_conf+0x186>
			rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
 80036a4:	2303      	movs	r3, #3
 80036a6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		}

		for (i = 0; i < conf->profile_len; i++) {
 80036aa:	2300      	movs	r3, #0
 80036ac:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80036b0:	e03a      	b.n	8003728 <set_conf+0x204>
			rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 80036b2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80036b6:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80036ba:	325a      	adds	r2, #90	@ 0x5a
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	3348      	adds	r3, #72	@ 0x48
 80036c0:	443b      	add	r3, r7
 80036c2:	f803 2c10 	strb.w	r2, [r3, #-16]
			rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	4413      	add	r3, r2
 80036d2:	881b      	ldrh	r3, [r3, #0]
 80036d4:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 80036d8:	6839      	ldr	r1, [r7, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff f9fc 	bl	8002ad8 <calc_res_heat>
 80036e0:	4603      	mov	r3, r0
 80036e2:	461a      	mov	r2, r3
 80036e4:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 80036e8:	443b      	add	r3, r7
 80036ea:	f803 2c1c 	strb.w	r2, [r3, #-28]
			gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 80036ee:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80036f2:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80036f6:	3264      	adds	r2, #100	@ 0x64
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	3348      	adds	r3, #72	@ 0x48
 80036fc:	443b      	add	r3, r7
 80036fe:	f803 2c28 	strb.w	r2, [r3, #-40]
			gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	4413      	add	r3, r2
 800370e:	881a      	ldrh	r2, [r3, #0]
 8003710:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	3348      	adds	r3, #72	@ 0x48
 8003718:	443b      	add	r3, r7
 800371a:	f803 2c34 	strb.w	r2, [r3, #-52]
		for (i = 0; i < conf->profile_len; i++) {
 800371e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003722:	3301      	adds	r3, #1
 8003724:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	7c1b      	ldrb	r3, [r3, #16]
 800372c:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8003730:	429a      	cmp	r2, r3
 8003732:	d3be      	bcc.n	80036b2 <set_conf+0x18e>
		}

		(*nb_conv) = conf->profile_len;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	7c1a      	ldrb	r2, [r3, #16]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	701a      	strb	r2, [r3, #0]
		write_len = conf->profile_len;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	7c1b      	ldrb	r3, [r3, #16]
 8003740:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
		shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8a5b      	ldrh	r3, [r3, #18]
 8003748:	4618      	mov	r0, r3
 800374a:	f000 f841 	bl	80037d0 <calc_heatr_dur_shared>
 800374e:	4603      	mov	r3, r0
 8003750:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
		if (rslt == BME68X_OK) {
 8003754:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10f      	bne.n	800377c <set_conf+0x258>
			rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1,
 800375c:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8003760:	f107 0043 	add.w	r0, r7, #67	@ 0x43
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	2201      	movs	r2, #1
 8003768:	f7fe f9ae 	bl	8001ac8 <bme68x_set_regs>
 800376c:	4603      	mov	r3, r0
 800376e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
					dev);
		}

		break;
 8003772:	e003      	b.n	800377c <set_conf+0x258>
	default:
		rslt = BME68X_W_DEFINE_OP_MODE;
 8003774:	2301      	movs	r3, #1
 8003776:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800377a:	e000      	b.n	800377e <set_conf+0x25a>
		break;
 800377c:	bf00      	nop
	}

	if (rslt == BME68X_OK) {
 800377e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10b      	bne.n	800379e <set_conf+0x27a>
		rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 8003786:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800378a:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800378e:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	f7fe f998 	bl	8001ac8 <bme68x_set_regs>
 8003798:	4603      	mov	r3, r0
 800379a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	}

	if (rslt == BME68X_OK) {
 800379e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10b      	bne.n	80037be <set_conf+0x29a>
		rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 80037a6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80037aa:	f107 0114 	add.w	r1, r7, #20
 80037ae:	f107 0020 	add.w	r0, r7, #32
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	f7fe f988 	bl	8001ac8 <bme68x_set_regs>
 80037b8:	4603      	mov	r3, r0
 80037ba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	}

	return rslt;
 80037be:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	374c      	adds	r7, #76	@ 0x4c
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd90      	pop	{r4, r7, pc}
 80037ca:	bf00      	nop
 80037cc:	0800fb44 	.word	0x0800fb44

080037d0 <calc_heatr_dur_shared>:

/* This internal API is used to calculate the register value for
 * shared heater duration */
static uint8_t calc_heatr_dur_shared(uint16_t dur)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	80fb      	strh	r3, [r7, #6]
	uint8_t factor = 0;
 80037da:	2300      	movs	r3, #0
 80037dc:	73fb      	strb	r3, [r7, #15]
	uint8_t heatdurval;

	if (dur >= 0x783) {
 80037de:	88fb      	ldrh	r3, [r7, #6]
 80037e0:	f240 7282 	movw	r2, #1922	@ 0x782
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d902      	bls.n	80037ee <calc_heatr_dur_shared+0x1e>
		heatdurval = 0xff; /* Max duration */
 80037e8:	23ff      	movs	r3, #255	@ 0xff
 80037ea:	73bb      	strb	r3, [r7, #14]
 80037ec:	e01d      	b.n	800382a <calc_heatr_dur_shared+0x5a>
	} else {
		/* Step size of 0.477ms */
		dur = (uint16_t) (((uint32_t) dur * 1000) / 477);
 80037ee:	88fb      	ldrh	r3, [r7, #6]
 80037f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80037f4:	fb03 f202 	mul.w	r2, r3, r2
 80037f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003838 <calc_heatr_dur_shared+0x68>)
 80037fa:	fba3 1302 	umull	r1, r3, r3, r2
 80037fe:	1ad2      	subs	r2, r2, r3
 8003800:	0852      	lsrs	r2, r2, #1
 8003802:	4413      	add	r3, r2
 8003804:	0a1b      	lsrs	r3, r3, #8
 8003806:	80fb      	strh	r3, [r7, #6]
		while (dur > 0x3F) {
 8003808:	e005      	b.n	8003816 <calc_heatr_dur_shared+0x46>
			dur = dur >> 2;
 800380a:	88fb      	ldrh	r3, [r7, #6]
 800380c:	089b      	lsrs	r3, r3, #2
 800380e:	80fb      	strh	r3, [r7, #6]
			factor += 1;
 8003810:	7bfb      	ldrb	r3, [r7, #15]
 8003812:	3301      	adds	r3, #1
 8003814:	73fb      	strb	r3, [r7, #15]
		while (dur > 0x3F) {
 8003816:	88fb      	ldrh	r3, [r7, #6]
 8003818:	2b3f      	cmp	r3, #63	@ 0x3f
 800381a:	d8f6      	bhi.n	800380a <calc_heatr_dur_shared+0x3a>
		}

		heatdurval = (uint8_t) (dur + (factor * 64));
 800381c:	88fb      	ldrh	r3, [r7, #6]
 800381e:	b2da      	uxtb	r2, r3
 8003820:	7bfb      	ldrb	r3, [r7, #15]
 8003822:	019b      	lsls	r3, r3, #6
 8003824:	b2db      	uxtb	r3, r3
 8003826:	4413      	add	r3, r2
 8003828:	73bb      	strb	r3, [r7, #14]
	}

	return heatdurval;
 800382a:	7bbb      	ldrb	r3, [r7, #14]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	12c8b89f 	.word	0x12c8b89f

0800383c <sort_sensor_data>:

/* This internal API is used sort the sensor data */
static void sort_sensor_data(uint8_t low_index, uint8_t high_index,
		struct bme68x_data *field[])
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	603a      	str	r2, [r7, #0]
 8003846:	71fb      	strb	r3, [r7, #7]
 8003848:	460b      	mov	r3, r1
 800384a:	71bb      	strb	r3, [r7, #6]
	int16_t meas_index1;
	int16_t meas_index2;

	meas_index1 = (int16_t) field[low_index]->meas_index;
 800384c:	79fb      	ldrb	r3, [r7, #7]
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	4413      	add	r3, r2
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	789b      	ldrb	r3, [r3, #2]
 8003858:	81fb      	strh	r3, [r7, #14]
	meas_index2 = (int16_t) field[high_index]->meas_index;
 800385a:	79bb      	ldrb	r3, [r7, #6]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	4413      	add	r3, r2
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	789b      	ldrb	r3, [r3, #2]
 8003866:	81bb      	strh	r3, [r7, #12]
	if ((field[low_index]->status & BME68X_NEW_DATA_MSK)
 8003868:	79fb      	ldrb	r3, [r7, #7]
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	4413      	add	r3, r2
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	b25b      	sxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	da21      	bge.n	80038be <sort_sensor_data+0x82>
			&& (field[high_index]->status & BME68X_NEW_DATA_MSK)) {
 800387a:	79bb      	ldrb	r3, [r7, #6]
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	4413      	add	r3, r2
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	b25b      	sxtb	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	da18      	bge.n	80038be <sort_sensor_data+0x82>
		int16_t diff = meas_index2 - meas_index1;
 800388c:	89ba      	ldrh	r2, [r7, #12]
 800388e:	89fb      	ldrh	r3, [r7, #14]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	b29b      	uxth	r3, r3
 8003894:	817b      	strh	r3, [r7, #10]
		if (((diff > -3) && (diff < 0)) || (diff > 2)) {
 8003896:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800389a:	f113 0f02 	cmn.w	r3, #2
 800389e:	db03      	blt.n	80038a8 <sort_sensor_data+0x6c>
 80038a0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	db03      	blt.n	80038b0 <sort_sensor_data+0x74>
 80038a8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	dd16      	ble.n	80038de <sort_sensor_data+0xa2>
			swap_fields(low_index, high_index, field);
 80038b0:	79b9      	ldrb	r1, [r7, #6]
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 f816 	bl	80038e8 <swap_fields>
			&& (field[high_index]->status & BME68X_NEW_DATA_MSK)) {
 80038bc:	e00f      	b.n	80038de <sort_sensor_data+0xa2>
		}
	} else if (field[high_index]->status & BME68X_NEW_DATA_MSK) {
 80038be:	79bb      	ldrb	r3, [r7, #6]
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	4413      	add	r3, r2
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	b25b      	sxtb	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	da07      	bge.n	80038e0 <sort_sensor_data+0xa4>
		swap_fields(low_index, high_index, field);
 80038d0:	79b9      	ldrb	r1, [r7, #6]
 80038d2:	79fb      	ldrb	r3, [r7, #7]
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 f806 	bl	80038e8 <swap_fields>
	 *         - diff > 2, case 4.
	 *
	 *     Here the limits of -3 and 2 derive from the fact that there are 3 fields.
	 *     These values decrease or increase respectively if the number of fields increases.
	 */
}
 80038dc:	e000      	b.n	80038e0 <sort_sensor_data+0xa4>
			&& (field[high_index]->status & BME68X_NEW_DATA_MSK)) {
 80038de:	bf00      	nop
}
 80038e0:	bf00      	nop
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <swap_fields>:

/* This internal API is used sort the sensor data */
static void swap_fields(uint8_t index1, uint8_t index2,
		struct bme68x_data *field[])
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4603      	mov	r3, r0
 80038f0:	603a      	str	r2, [r7, #0]
 80038f2:	71fb      	strb	r3, [r7, #7]
 80038f4:	460b      	mov	r3, r1
 80038f6:	71bb      	strb	r3, [r7, #6]
	struct bme68x_data *temp;

	temp = field[index1];
 80038f8:	79fb      	ldrb	r3, [r7, #7]
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	4413      	add	r3, r2
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	60fb      	str	r3, [r7, #12]
	field[index1] = field[index2];
 8003904:	79bb      	ldrb	r3, [r7, #6]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	441a      	add	r2, r3
 800390c:	79fb      	ldrb	r3, [r7, #7]
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	6839      	ldr	r1, [r7, #0]
 8003912:	440b      	add	r3, r1
 8003914:	6812      	ldr	r2, [r2, #0]
 8003916:	601a      	str	r2, [r3, #0]
	field[index2] = temp;
 8003918:	79bb      	ldrb	r3, [r7, #6]
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	4413      	add	r3, r2
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	601a      	str	r2, [r3, #0]
}
 8003924:	bf00      	nop
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <get_calib_data>:
	return rslt;
}

/* This internal API is used to read the calibration coefficients */
static int8_t get_calib_data(struct bme68x_dev *dev)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08e      	sub	sp, #56	@ 0x38
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t coeff_array[BME68X_LEN_COEFF_ALL];

	rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1,
 8003938:	f107 010c 	add.w	r1, r7, #12
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2217      	movs	r2, #23
 8003940:	208a      	movs	r0, #138	@ 0x8a
 8003942:	f7fe f951 	bl	8001be8 <bme68x_get_regs>
 8003946:	4603      	mov	r3, r0
 8003948:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			dev);
	if (rslt == BME68X_OK) {
 800394c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10b      	bne.n	800396c <get_calib_data+0x3c>
		rslt = bme68x_get_regs(BME68X_REG_COEFF2,
 8003954:	f107 030c 	add.w	r3, r7, #12
 8003958:	f103 0117 	add.w	r1, r3, #23
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	220e      	movs	r2, #14
 8003960:	20e1      	movs	r0, #225	@ 0xe1
 8003962:	f7fe f941 	bl	8001be8 <bme68x_get_regs>
 8003966:	4603      	mov	r3, r0
 8003968:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				&coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
	}

	if (rslt == BME68X_OK) {
 800396c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10b      	bne.n	800398c <get_calib_data+0x5c>
		rslt = bme68x_get_regs(BME68X_REG_COEFF3,
 8003974:	f107 030c 	add.w	r3, r7, #12
 8003978:	f103 0125 	add.w	r1, r3, #37	@ 0x25
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2205      	movs	r2, #5
 8003980:	2000      	movs	r0, #0
 8003982:	f7fe f931 	bl	8001be8 <bme68x_get_regs>
 8003986:	4603      	mov	r3, r0
 8003988:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				&coeff_array[BME68X_LEN_COEFF1 + BME68X_LEN_COEFF2],
				BME68X_LEN_COEFF3, dev);
	}

	if (rslt == BME68X_OK) {
 800398c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8003990:	2b00      	cmp	r3, #0
 8003992:	f040 80cb 	bne.w	8003b2c <get_calib_data+0x1fc>
		/* Temperature related coefficients */
		dev->calib.par_t1 =
				(uint16_t) (BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T1_MSB],
 8003996:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800399a:	021b      	lsls	r3, r3, #8
 800399c:	b21a      	sxth	r2, r3
 800399e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80039a2:	b21b      	sxth	r3, r3
 80039a4:	4313      	orrs	r3, r2
 80039a6:	b21b      	sxth	r3, r3
 80039a8:	b29a      	uxth	r2, r3
		dev->calib.par_t1 =
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	83da      	strh	r2, [r3, #30]
						coeff_array[BME68X_IDX_T1_LSB]));
		dev->calib.par_t2 =
				(int16_t) (BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T2_MSB],
 80039ae:	7b7b      	ldrb	r3, [r7, #13]
 80039b0:	021b      	lsls	r3, r3, #8
 80039b2:	b21a      	sxth	r2, r3
 80039b4:	7b3b      	ldrb	r3, [r7, #12]
 80039b6:	b21b      	sxth	r3, r3
 80039b8:	4313      	orrs	r3, r2
 80039ba:	b21a      	sxth	r2, r3
		dev->calib.par_t2 =
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	841a      	strh	r2, [r3, #32]
						coeff_array[BME68X_IDX_T2_LSB]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME68X_IDX_T3]);
 80039c0:	7bbb      	ldrb	r3, [r7, #14]
 80039c2:	b25a      	sxtb	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

		/* Pressure related coefficients */
		dev->calib.par_p1 =
				(uint16_t) (BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P1_MSB],
 80039ca:	7c7b      	ldrb	r3, [r7, #17]
 80039cc:	021b      	lsls	r3, r3, #8
 80039ce:	b21a      	sxth	r2, r3
 80039d0:	7c3b      	ldrb	r3, [r7, #16]
 80039d2:	b21b      	sxth	r3, r3
 80039d4:	4313      	orrs	r3, r2
 80039d6:	b21b      	sxth	r3, r3
 80039d8:	b29a      	uxth	r2, r3
		dev->calib.par_p1 =
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	849a      	strh	r2, [r3, #36]	@ 0x24
						coeff_array[BME68X_IDX_P1_LSB]));
		dev->calib.par_p2 =
				(int16_t) (BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P2_MSB],
 80039de:	7cfb      	ldrb	r3, [r7, #19]
 80039e0:	021b      	lsls	r3, r3, #8
 80039e2:	b21a      	sxth	r2, r3
 80039e4:	7cbb      	ldrb	r3, [r7, #18]
 80039e6:	b21b      	sxth	r3, r3
 80039e8:	4313      	orrs	r3, r2
 80039ea:	b21a      	sxth	r2, r3
		dev->calib.par_p2 =
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	84da      	strh	r2, [r3, #38]	@ 0x26
						coeff_array[BME68X_IDX_P2_LSB]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME68X_IDX_P3];
 80039f0:	7d3b      	ldrb	r3, [r7, #20]
 80039f2:	b25a      	sxtb	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		dev->calib.par_p4 =
				(int16_t) (BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB],
 80039fa:	7dfb      	ldrb	r3, [r7, #23]
 80039fc:	021b      	lsls	r3, r3, #8
 80039fe:	b21a      	sxth	r2, r3
 8003a00:	7dbb      	ldrb	r3, [r7, #22]
 8003a02:	b21b      	sxth	r3, r3
 8003a04:	4313      	orrs	r3, r2
 8003a06:	b21a      	sxth	r2, r3
		dev->calib.par_p4 =
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
						coeff_array[BME68X_IDX_P4_LSB]));
		dev->calib.par_p5 =
				(int16_t) (BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P5_MSB],
 8003a0c:	7e7b      	ldrb	r3, [r7, #25]
 8003a0e:	021b      	lsls	r3, r3, #8
 8003a10:	b21a      	sxth	r2, r3
 8003a12:	7e3b      	ldrb	r3, [r7, #24]
 8003a14:	b21b      	sxth	r3, r3
 8003a16:	4313      	orrs	r3, r2
 8003a18:	b21a      	sxth	r2, r3
		dev->calib.par_p5 =
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	859a      	strh	r2, [r3, #44]	@ 0x2c
						coeff_array[BME68X_IDX_P5_LSB]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME68X_IDX_P6]);
 8003a1e:	7efb      	ldrb	r3, [r7, #27]
 8003a20:	b25a      	sxtb	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		dev->calib.par_p7 = (int8_t) (coeff_array[BME68X_IDX_P7]);
 8003a28:	7ebb      	ldrb	r3, [r7, #26]
 8003a2a:	b25a      	sxtb	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		dev->calib.par_p8 =
				(int16_t) (BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB],
 8003a32:	7ffb      	ldrb	r3, [r7, #31]
 8003a34:	021b      	lsls	r3, r3, #8
 8003a36:	b21a      	sxth	r2, r3
 8003a38:	7fbb      	ldrb	r3, [r7, #30]
 8003a3a:	b21b      	sxth	r3, r3
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	b21a      	sxth	r2, r3
		dev->calib.par_p8 =
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	861a      	strh	r2, [r3, #48]	@ 0x30
						coeff_array[BME68X_IDX_P8_LSB]));
		dev->calib.par_p9 =
				(int16_t) (BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P9_MSB],
 8003a44:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003a48:	021b      	lsls	r3, r3, #8
 8003a4a:	b21a      	sxth	r2, r3
 8003a4c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003a50:	b21b      	sxth	r3, r3
 8003a52:	4313      	orrs	r3, r2
 8003a54:	b21a      	sxth	r2, r3
		dev->calib.par_p9 =
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	865a      	strh	r2, [r3, #50]	@ 0x32
						coeff_array[BME68X_IDX_P9_LSB]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME68X_IDX_P10]);
 8003a5a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

		/* Humidity related coefficients */
		dev->calib.par_h1 =
				(uint16_t) (((uint16_t) coeff_array[BME68X_IDX_H1_MSB] << 4)
 8003a64:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003a68:	011b      	lsls	r3, r3, #4
						| (coeff_array[BME68X_IDX_H1_LSB]
 8003a6a:	b21a      	sxth	r2, r3
 8003a6c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003a70:	b21b      	sxth	r3, r3
								& BME68X_BIT_H1_DATA_MSK));
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	b21b      	sxth	r3, r3
						| (coeff_array[BME68X_IDX_H1_LSB]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	b21b      	sxth	r3, r3
				(uint16_t) (((uint16_t) coeff_array[BME68X_IDX_H1_MSB] << 4)
 8003a7c:	b29a      	uxth	r2, r3
		dev->calib.par_h1 =
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	821a      	strh	r2, [r3, #16]
		dev->calib.par_h2 =
				(uint16_t) (((uint16_t) coeff_array[BME68X_IDX_H2_MSB] << 4)
 8003a82:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a86:	011b      	lsls	r3, r3, #4
						| ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 8003a88:	b21a      	sxth	r2, r3
 8003a8a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003a8e:	091b      	lsrs	r3, r3, #4
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	b21b      	sxth	r3, r3
 8003a94:	4313      	orrs	r3, r2
 8003a96:	b21b      	sxth	r3, r3
				(uint16_t) (((uint16_t) coeff_array[BME68X_IDX_H2_MSB] << 4)
 8003a98:	b29a      	uxth	r2, r3
		dev->calib.par_h2 =
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	825a      	strh	r2, [r3, #18]
		dev->calib.par_h3 = (int8_t) coeff_array[BME68X_IDX_H3];
 8003a9e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003aa2:	b25a      	sxtb	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	751a      	strb	r2, [r3, #20]
		dev->calib.par_h4 = (int8_t) coeff_array[BME68X_IDX_H4];
 8003aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003aac:	b25a      	sxtb	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	755a      	strb	r2, [r3, #21]
		dev->calib.par_h5 = (int8_t) coeff_array[BME68X_IDX_H5];
 8003ab2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003ab6:	b25a      	sxtb	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	759a      	strb	r2, [r3, #22]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME68X_IDX_H6];
 8003abc:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	75da      	strb	r2, [r3, #23]
		dev->calib.par_h7 = (int8_t) coeff_array[BME68X_IDX_H7];
 8003ac4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003ac8:	b25a      	sxtb	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	761a      	strb	r2, [r3, #24]

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME68X_IDX_GH1];
 8003ace:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003ad2:	b25a      	sxtb	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	765a      	strb	r2, [r3, #25]
		dev->calib.par_gh2 = (int16_t) (BME68X_CONCAT_BYTES(
 8003ad8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003adc:	021b      	lsls	r3, r3, #8
 8003ade:	b21a      	sxth	r2, r3
 8003ae0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003ae4:	b21b      	sxth	r3, r3
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	b21a      	sxth	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	835a      	strh	r2, [r3, #26]
				coeff_array[BME68X_IDX_GH2_MSB],
				coeff_array[BME68X_IDX_GH2_LSB]));
		dev->calib.par_gh3 = (int8_t) coeff_array[BME68X_IDX_GH3];
 8003aee:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003af2:	b25a      	sxtb	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	771a      	strb	r2, [r3, #28]

		/* Other coefficients */
		dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE]
 8003af8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
				& BME68X_RHRANGE_MSK) / 16);
 8003afc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	da00      	bge.n	8003b06 <get_calib_data+0x1d6>
 8003b04:	330f      	adds	r3, #15
 8003b06:	111b      	asrs	r3, r3, #4
		dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE]
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		dev->calib.res_heat_val = (int8_t) coeff_array[BME68X_IDX_RES_HEAT_VAL];
 8003b10:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8003b14:	b25a      	sxtb	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
		dev->calib.range_sw_err =
				((int8_t) (coeff_array[BME68X_IDX_RANGE_SW_ERR]
 8003b1c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003b20:	b25b      	sxtb	r3, r3
		dev->calib.range_sw_err =
 8003b22:	111b      	asrs	r3, r3, #4
 8003b24:	b25a      	sxtb	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
						& BME68X_RSERROR_MSK)) / 16;
	}

	return rslt;
 8003b2c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3738      	adds	r7, #56	@ 0x38
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <read_variant_id>:

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme68x_dev *dev)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data = 0;
 8003b40:	2300      	movs	r3, #0
 8003b42:	73bb      	strb	r3, [r7, #14]

	/* Read variant ID information register */
	rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 8003b44:	f107 010e 	add.w	r1, r7, #14
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	20f0      	movs	r0, #240	@ 0xf0
 8003b4e:	f7fe f84b 	bl	8001be8 <bme68x_get_regs>
 8003b52:	4603      	mov	r3, r0
 8003b54:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME68X_OK) {
 8003b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d103      	bne.n	8003b66 <read_variant_id+0x2e>
		dev->variant_id = reg_data;
 8003b5e:	7bbb      	ldrb	r3, [r7, #14]
 8003b60:	461a      	mov	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	609a      	str	r2, [r3, #8]
	}

	return rslt;
 8003b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
	...

08003b74 <bme68x_start>:
float gas_lower_limit = 5000;   // Bad air quality limit
float gas_upper_limit = 50000;  // Good air quality limit

/* Complete init. function. */
int8_t bme68x_start(struct bme68x_data *dataPtr, I2C_HandleTypeDef *handler)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]

	// I2C handler copy
	memcpy(&BME68x_I2C_Handler, handler, sizeof(*handler));
 8003b7e:	2254      	movs	r2, #84	@ 0x54
 8003b80:	6839      	ldr	r1, [r7, #0]
 8003b82:	481e      	ldr	r0, [pc, #120]	@ (8003bfc <bme68x_start+0x88>)
 8003b84:	f00b f90b 	bl	800ed9e <memcpy>

	// Init.
	bme68x_interface_init(&bme, BME68X_I2C_INTF);
 8003b88:	2101      	movs	r1, #1
 8003b8a:	481d      	ldr	r0, [pc, #116]	@ (8003c00 <bme68x_start+0x8c>)
 8003b8c:	f000 f8ea 	bl	8003d64 <bme68x_interface_init>
	bme68x_init(&bme);
 8003b90:	481b      	ldr	r0, [pc, #108]	@ (8003c00 <bme68x_start+0x8c>)
 8003b92:	f7fd ff65 	bl	8001a60 <bme68x_init>

	// Init. for data variable
	BME68x_DATA = dataPtr;
 8003b96:	4a1b      	ldr	r2, [pc, #108]	@ (8003c04 <bme68x_start+0x90>)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6013      	str	r3, [r2, #0]

	// Configuration
	/* Check if rslt == BME68X_OK, report or handle if otherwise */
	conf.filter = BME68X_FILTER_SIZE_3;
 8003b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8003c08 <bme68x_start+0x94>)
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	70da      	strb	r2, [r3, #3]
	conf.odr = BME68X_ODR_NONE;
 8003ba2:	4b19      	ldr	r3, [pc, #100]	@ (8003c08 <bme68x_start+0x94>)
 8003ba4:	2208      	movs	r2, #8
 8003ba6:	711a      	strb	r2, [r3, #4]
	conf.os_hum = BME68X_OS_2X;
 8003ba8:	4b17      	ldr	r3, [pc, #92]	@ (8003c08 <bme68x_start+0x94>)
 8003baa:	2202      	movs	r2, #2
 8003bac:	701a      	strb	r2, [r3, #0]
	conf.os_pres = BME68X_OS_4X;
 8003bae:	4b16      	ldr	r3, [pc, #88]	@ (8003c08 <bme68x_start+0x94>)
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	709a      	strb	r2, [r3, #2]
	conf.os_temp = BME68X_OS_8X;
 8003bb4:	4b14      	ldr	r3, [pc, #80]	@ (8003c08 <bme68x_start+0x94>)
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	705a      	strb	r2, [r3, #1]
	bme68x_set_conf(&conf, &bme);
 8003bba:	4911      	ldr	r1, [pc, #68]	@ (8003c00 <bme68x_start+0x8c>)
 8003bbc:	4812      	ldr	r0, [pc, #72]	@ (8003c08 <bme68x_start+0x94>)
 8003bbe:	f7fe f89b 	bl	8001cf8 <bme68x_set_conf>

	// Heat conf.
	/* Check if rslt == BME68X_OK, report or handle if otherwise */
	heatr_conf.enable = BME68X_ENABLE;
 8003bc2:	4b12      	ldr	r3, [pc, #72]	@ (8003c0c <bme68x_start+0x98>)
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	701a      	strb	r2, [r3, #0]
	heatr_conf.heatr_temp = 320;
 8003bc8:	4b10      	ldr	r3, [pc, #64]	@ (8003c0c <bme68x_start+0x98>)
 8003bca:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003bce:	805a      	strh	r2, [r3, #2]
	heatr_conf.heatr_dur = 150;
 8003bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8003c0c <bme68x_start+0x98>)
 8003bd2:	2296      	movs	r2, #150	@ 0x96
 8003bd4:	809a      	strh	r2, [r3, #4]
	rslt = bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heatr_conf, &bme);
 8003bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8003c00 <bme68x_start+0x8c>)
 8003bd8:	490c      	ldr	r1, [pc, #48]	@ (8003c0c <bme68x_start+0x98>)
 8003bda:	2001      	movs	r0, #1
 8003bdc:	f7fe fb84 	bl	80022e8 <bme68x_set_heatr_conf>
 8003be0:	4603      	mov	r3, r0
 8003be2:	461a      	mov	r2, r3
 8003be4:	4b0a      	ldr	r3, [pc, #40]	@ (8003c10 <bme68x_start+0x9c>)
 8003be6:	701a      	strb	r2, [r3, #0]

	// Gather gas reference for the IAQ calculation
	bme68x_GetGasReference();
 8003be8:	f000 f906 	bl	8003df8 <bme68x_GetGasReference>

	return rslt;
 8003bec:	4b08      	ldr	r3, [pc, #32]	@ (8003c10 <bme68x_start+0x9c>)
 8003bee:	f993 3000 	ldrsb.w	r3, [r3]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20000204 	.word	0x20000204
 8003c00:	20000258 	.word	0x20000258
 8003c04:	200002a8 	.word	0x200002a8
 8003c08:	200002b0 	.word	0x200002b0
 8003c0c:	200002b8 	.word	0x200002b8
 8003c10:	200002ac 	.word	0x200002ac

08003c14 <bme68x_single_measure>:

/* Force mode measurement. */
int8_t bme68x_single_measure(struct bme68x_data *dataPtr)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]

	bme68x_set_op_mode(BME68X_FORCED_MODE, &bme);
 8003c1c:	4916      	ldr	r1, [pc, #88]	@ (8003c78 <bme68x_single_measure+0x64>)
 8003c1e:	2001      	movs	r0, #1
 8003c20:	f7fe f96e 	bl	8001f00 <bme68x_set_op_mode>

	/* Calculate delay period in microseconds */
	del_period = bme68x_get_meas_dur(BME68X_FORCED_MODE, &conf, &bme)
 8003c24:	4a14      	ldr	r2, [pc, #80]	@ (8003c78 <bme68x_single_measure+0x64>)
 8003c26:	4915      	ldr	r1, [pc, #84]	@ (8003c7c <bme68x_single_measure+0x68>)
 8003c28:	2001      	movs	r0, #1
 8003c2a:	f7fe f9eb 	bl	8002004 <bme68x_get_meas_dur>
 8003c2e:	4603      	mov	r3, r0
			+ (heatr_conf.heatr_dur * 1000);
 8003c30:	4a13      	ldr	r2, [pc, #76]	@ (8003c80 <bme68x_single_measure+0x6c>)
 8003c32:	8892      	ldrh	r2, [r2, #4]
 8003c34:	4611      	mov	r1, r2
 8003c36:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003c3a:	fb01 f202 	mul.w	r2, r1, r2
 8003c3e:	4413      	add	r3, r2
	del_period = bme68x_get_meas_dur(BME68X_FORCED_MODE, &conf, &bme)
 8003c40:	4a10      	ldr	r2, [pc, #64]	@ (8003c84 <bme68x_single_measure+0x70>)
 8003c42:	6013      	str	r3, [r2, #0]
	// bme.delay_us(del_period, bme.intf_ptr);
	HAL_Delay(del_period / 1000);
 8003c44:	4b0f      	ldr	r3, [pc, #60]	@ (8003c84 <bme68x_single_measure+0x70>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a0f      	ldr	r2, [pc, #60]	@ (8003c88 <bme68x_single_measure+0x74>)
 8003c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4e:	099b      	lsrs	r3, r3, #6
 8003c50:	4618      	mov	r0, r3
 8003c52:	f005 fcb1 	bl	80095b8 <HAL_Delay>

	/* Check if rslt == BME68X_OK, report or handle if otherwise */
	rslt = bme68x_get_data(BME68X_FORCED_MODE, dataPtr, &n_fields, &bme);
 8003c56:	4b08      	ldr	r3, [pc, #32]	@ (8003c78 <bme68x_single_measure+0x64>)
 8003c58:	4a0c      	ldr	r2, [pc, #48]	@ (8003c8c <bme68x_single_measure+0x78>)
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	2001      	movs	r0, #1
 8003c5e:	f7fe fa45 	bl	80020ec <bme68x_get_data>
 8003c62:	4603      	mov	r3, r0
 8003c64:	461a      	mov	r2, r3
 8003c66:	4b0a      	ldr	r3, [pc, #40]	@ (8003c90 <bme68x_single_measure+0x7c>)
 8003c68:	701a      	strb	r2, [r3, #0]

	return rslt;
 8003c6a:	4b09      	ldr	r3, [pc, #36]	@ (8003c90 <bme68x_single_measure+0x7c>)
 8003c6c:	f993 3000 	ldrsb.w	r3, [r3]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	20000258 	.word	0x20000258
 8003c7c:	200002b0 	.word	0x200002b0
 8003c80:	200002b8 	.word	0x200002b8
 8003c84:	200002cc 	.word	0x200002cc
 8003c88:	10624dd3 	.word	0x10624dd3
 8003c8c:	200002d0 	.word	0x200002d0
 8003c90:	200002ac 	.word	0x200002ac

08003c94 <bme68x_i2c_write>:

/* Necessary functions. */
// I2C write function.
BME68X_INTF_RET_TYPE bme68x_i2c_write(uint8_t reg_addr, const uint8_t *reg_data,
		uint32_t len, void *intf_ptr)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b08a      	sub	sp, #40	@ 0x28
 8003c98:	af04      	add	r7, sp, #16
 8003c9a:	60b9      	str	r1, [r7, #8]
 8003c9c:	607a      	str	r2, [r7, #4]
 8003c9e:	603b      	str	r3, [r7, #0]
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t*) intf_ptr;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	75fb      	strb	r3, [r7, #23]

	if (HAL_I2C_Mem_Write(&BME68x_I2C_Handler, (uint16_t) (dev_addr << 1),
 8003caa:	7dfb      	ldrb	r3, [r7, #23]
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	b299      	uxth	r1, r3
 8003cb2:	7bfb      	ldrb	r3, [r7, #15]
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	200f      	movs	r0, #15
 8003cbc:	9002      	str	r0, [sp, #8]
 8003cbe:	9301      	str	r3, [sp, #4]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	4806      	ldr	r0, [pc, #24]	@ (8003ce0 <bme68x_i2c_write+0x4c>)
 8003cc8:	f007 fb34 	bl	800b334 <HAL_I2C_Mem_Write>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <bme68x_i2c_write+0x42>
			reg_addr, 1, (uint8_t*) reg_data, len, 15) == HAL_OK)
		return 0;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	e000      	b.n	8003cd8 <bme68x_i2c_write+0x44>

	return 1;
 8003cd6:	2301      	movs	r3, #1
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	20000204 	.word	0x20000204

08003ce4 <bme68x_i2c_read>:

// I2C read function.
BME68X_INTF_RET_TYPE bme68x_i2c_read(uint8_t reg_addr, uint8_t *reg_data,
		uint32_t len, void *intf_ptr)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b08a      	sub	sp, #40	@ 0x28
 8003ce8:	af04      	add	r7, sp, #16
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	607a      	str	r2, [r7, #4]
 8003cee:	603b      	str	r3, [r7, #0]
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t*) intf_ptr;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	75fb      	strb	r3, [r7, #23]

	if (HAL_I2C_Mem_Read(&BME68x_I2C_Handler,
			(uint16_t) ((dev_addr << 1) | 0x1), reg_addr, 1, reg_data, len, 15)
 8003cfa:	7dfb      	ldrb	r3, [r7, #23]
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	b21b      	sxth	r3, r3
 8003d00:	f043 0301 	orr.w	r3, r3, #1
 8003d04:	b21b      	sxth	r3, r3
	if (HAL_I2C_Mem_Read(&BME68x_I2C_Handler,
 8003d06:	b299      	uxth	r1, r3
 8003d08:	7bfb      	ldrb	r3, [r7, #15]
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	200f      	movs	r0, #15
 8003d12:	9002      	str	r0, [sp, #8]
 8003d14:	9301      	str	r3, [sp, #4]
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	4806      	ldr	r0, [pc, #24]	@ (8003d38 <bme68x_i2c_read+0x54>)
 8003d1e:	f007 fc1d 	bl	800b55c <HAL_I2C_Mem_Read>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <bme68x_i2c_read+0x48>
			== HAL_OK)
		return 0;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	e000      	b.n	8003d2e <bme68x_i2c_read+0x4a>

	return 1;
 8003d2c:	2301      	movs	r3, #1
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	20000204 	.word	0x20000204

08003d3c <bme68x_delay_us>:

// BME68x delay function
void bme68x_delay_us(uint32_t period, void *intf_ptr)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
	HAL_Delay(period / 1000);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a05      	ldr	r2, [pc, #20]	@ (8003d60 <bme68x_delay_us+0x24>)
 8003d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4e:	099b      	lsrs	r3, r3, #6
 8003d50:	4618      	mov	r0, r3
 8003d52:	f005 fc31 	bl	80095b8 <HAL_Delay>
}
 8003d56:	bf00      	nop
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	10624dd3 	.word	0x10624dd3

08003d64 <bme68x_interface_init>:

// BME68x interface function
int8_t bme68x_interface_init(struct bme68x_dev *bme, uint8_t intf)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	70fb      	strb	r3, [r7, #3]
	int8_t rslt = BME68X_OK;
 8003d70:	2300      	movs	r3, #0
 8003d72:	73fb      	strb	r3, [r7, #15]

	if (bme != NULL) {
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d02c      	beq.n	8003dd4 <bme68x_interface_init+0x70>

		// Check for the device on the I2C line
		if (HAL_I2C_IsDeviceReady(&BME68x_I2C_Handler,
 8003d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8003de4 <bme68x_interface_init+0x80>)
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	b299      	uxth	r1, r3
 8003d82:	2305      	movs	r3, #5
 8003d84:	2205      	movs	r2, #5
 8003d86:	4818      	ldr	r0, [pc, #96]	@ (8003de8 <bme68x_interface_init+0x84>)
 8003d88:	f007 fd02 	bl	800b790 <HAL_I2C_IsDeviceReady>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d105      	bne.n	8003d9e <bme68x_interface_init+0x3a>
				(uint16_t) (dev_addr << 1), 5, 5) == HAL_OK) {
			// Device found at the I2C line.
			rslt = 0;
 8003d92:	2300      	movs	r3, #0
 8003d94:	73fb      	strb	r3, [r7, #15]
			rslt = -2; // Communication error.
			return rslt;
		}

		/* Bus configuration : I2C */
		if (intf == BME68X_I2C_INTF) {
 8003d96:	78fb      	ldrb	r3, [r7, #3]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d118      	bne.n	8003dce <bme68x_interface_init+0x6a>
 8003d9c:	e004      	b.n	8003da8 <bme68x_interface_init+0x44>
			rslt = -2; // Communication error.
 8003d9e:	23fe      	movs	r3, #254	@ 0xfe
 8003da0:	73fb      	strb	r3, [r7, #15]
			return rslt;
 8003da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003da6:	e019      	b.n	8003ddc <bme68x_interface_init+0x78>
			bme->read = bme68x_i2c_read;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a10      	ldr	r2, [pc, #64]	@ (8003dec <bme68x_interface_init+0x88>)
 8003dac:	641a      	str	r2, [r3, #64]	@ 0x40
			bme->write = bme68x_i2c_write;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a0f      	ldr	r2, [pc, #60]	@ (8003df0 <bme68x_interface_init+0x8c>)
 8003db2:	645a      	str	r2, [r3, #68]	@ 0x44
			bme->intf = BME68X_I2C_INTF;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	731a      	strb	r2, [r3, #12]
		} else {
			return -2;
		}

		bme->delay_us = bme68x_delay_us;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8003df4 <bme68x_interface_init+0x90>)
 8003dbe:	649a      	str	r2, [r3, #72]	@ 0x48
		bme->intf_ptr = &dev_addr;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a08      	ldr	r2, [pc, #32]	@ (8003de4 <bme68x_interface_init+0x80>)
 8003dc4:	605a      	str	r2, [r3, #4]
		bme->amb_temp = 30; /* The ambient temperature in deg C is used for defining the heater temperature */
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	221e      	movs	r2, #30
 8003dca:	739a      	strb	r2, [r3, #14]
 8003dcc:	e004      	b.n	8003dd8 <bme68x_interface_init+0x74>
			return -2;
 8003dce:	f06f 0301 	mvn.w	r3, #1
 8003dd2:	e003      	b.n	8003ddc <bme68x_interface_init+0x78>
	} else {
		rslt = BME68X_E_NULL_PTR;
 8003dd4:	23ff      	movs	r3, #255	@ 0xff
 8003dd6:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8003dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	20000000 	.word	0x20000000
 8003de8:	20000204 	.word	0x20000204
 8003dec:	08003ce5 	.word	0x08003ce5
 8003df0:	08003c95 	.word	0x08003c95
 8003df4:	08003d3d 	.word	0x08003d3d

08003df8 <bme68x_GetGasReference>:
 See more at http://www.dsbird.org.uk
 */

/* IAQ functions */
void bme68x_GetGasReference()
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
	// Now run the sensor for a burn-in period, then use combination of relative humidity and gas resistance to estimate indoor air quality as a percentage.

	int readings = 10;
 8003dfe:	230a      	movs	r3, #10
 8003e00:	603b      	str	r3, [r7, #0]
	for (int i = 1; i <= readings; i++) { // read gas for 10 x 0.150mS = 1.5secs
 8003e02:	2301      	movs	r3, #1
 8003e04:	607b      	str	r3, [r7, #4]
 8003e06:	e013      	b.n	8003e30 <bme68x_GetGasReference+0x38>
		bme68x_single_measure(BME68x_DATA);
 8003e08:	4b14      	ldr	r3, [pc, #80]	@ (8003e5c <bme68x_GetGasReference+0x64>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff ff01 	bl	8003c14 <bme68x_single_measure>
		gas_reference += BME68x_DATA->gas_resistance;
 8003e12:	4b12      	ldr	r3, [pc, #72]	@ (8003e5c <bme68x_GetGasReference+0x64>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	ed93 7a06 	vldr	s14, [r3, #24]
 8003e1a:	4b11      	ldr	r3, [pc, #68]	@ (8003e60 <bme68x_GetGasReference+0x68>)
 8003e1c:	edd3 7a00 	vldr	s15, [r3]
 8003e20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e24:	4b0e      	ldr	r3, [pc, #56]	@ (8003e60 <bme68x_GetGasReference+0x68>)
 8003e26:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 1; i <= readings; i++) { // read gas for 10 x 0.150mS = 1.5secs
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	607b      	str	r3, [r7, #4]
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	dde7      	ble.n	8003e08 <bme68x_GetGasReference+0x10>
	}
	gas_reference = gas_reference / readings;
 8003e38:	4b09      	ldr	r3, [pc, #36]	@ (8003e60 <bme68x_GetGasReference+0x68>)
 8003e3a:	edd3 6a00 	vldr	s13, [r3]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	ee07 3a90 	vmov	s15, r3
 8003e44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e4c:	4b04      	ldr	r3, [pc, #16]	@ (8003e60 <bme68x_GetGasReference+0x68>)
 8003e4e:	edc3 7a00 	vstr	s15, [r3]

}
 8003e52:	bf00      	nop
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	200002a8 	.word	0x200002a8
 8003e60:	20000004 	.word	0x20000004
 8003e64:	00000000 	.word	0x00000000

08003e68 <bme68x_GetHumidityScore>:

//Calculate humidity contribution to IAQ index
int8_t bme68x_GetHumidityScore()
{
 8003e68:	b5b0      	push	{r4, r5, r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0

	if (BME68x_DATA->humidity >= 38 && BME68x_DATA->humidity <= 42) // Humidity +/-5% around optimum
 8003e6e:	4b52      	ldr	r3, [pc, #328]	@ (8003fb8 <bme68x_GetHumidityScore+0x150>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	edd3 7a05 	vldr	s15, [r3, #20]
 8003e76:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8003fbc <bme68x_GetHumidityScore+0x154>
 8003e7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e82:	db0e      	blt.n	8003ea2 <bme68x_GetHumidityScore+0x3a>
 8003e84:	4b4c      	ldr	r3, [pc, #304]	@ (8003fb8 <bme68x_GetHumidityScore+0x150>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	edd3 7a05 	vldr	s15, [r3, #20]
 8003e8c:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8003fc0 <bme68x_GetHumidityScore+0x158>
 8003e90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e98:	d803      	bhi.n	8003ea2 <bme68x_GetHumidityScore+0x3a>
		humidity_score = 0.25 * 100;
 8003e9a:	4b4a      	ldr	r3, [pc, #296]	@ (8003fc4 <bme68x_GetHumidityScore+0x15c>)
 8003e9c:	4a4a      	ldr	r2, [pc, #296]	@ (8003fc8 <bme68x_GetHumidityScore+0x160>)
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	e076      	b.n	8003f90 <bme68x_GetHumidityScore+0x128>
	else { // Humidity is sub-optimal
		if (BME68x_DATA->humidity < 38)
 8003ea2:	4b45      	ldr	r3, [pc, #276]	@ (8003fb8 <bme68x_GetHumidityScore+0x150>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	edd3 7a05 	vldr	s15, [r3, #20]
 8003eaa:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8003fbc <bme68x_GetHumidityScore+0x154>
 8003eae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eb6:	d52e      	bpl.n	8003f16 <bme68x_GetHumidityScore+0xae>
			humidity_score = 0.25 / hum_reference * BME68x_DATA->humidity * 100;
 8003eb8:	4b44      	ldr	r3, [pc, #272]	@ (8003fcc <bme68x_GetHumidityScore+0x164>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fc fb3b 	bl	8000538 <__aeabi_f2d>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	f04f 0000 	mov.w	r0, #0
 8003eca:	4941      	ldr	r1, [pc, #260]	@ (8003fd0 <bme68x_GetHumidityScore+0x168>)
 8003ecc:	f7fc fcb6 	bl	800083c <__aeabi_ddiv>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4614      	mov	r4, r2
 8003ed6:	461d      	mov	r5, r3
 8003ed8:	4b37      	ldr	r3, [pc, #220]	@ (8003fb8 <bme68x_GetHumidityScore+0x150>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fc fb2a 	bl	8000538 <__aeabi_f2d>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4620      	mov	r0, r4
 8003eea:	4629      	mov	r1, r5
 8003eec:	f7fc fb7c 	bl	80005e8 <__aeabi_dmul>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4610      	mov	r0, r2
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	f04f 0200 	mov.w	r2, #0
 8003efc:	4b35      	ldr	r3, [pc, #212]	@ (8003fd4 <bme68x_GetHumidityScore+0x16c>)
 8003efe:	f7fc fb73 	bl	80005e8 <__aeabi_dmul>
 8003f02:	4602      	mov	r2, r0
 8003f04:	460b      	mov	r3, r1
 8003f06:	4610      	mov	r0, r2
 8003f08:	4619      	mov	r1, r3
 8003f0a:	f7fc fd7f 	bl	8000a0c <__aeabi_d2f>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	4a2c      	ldr	r2, [pc, #176]	@ (8003fc4 <bme68x_GetHumidityScore+0x15c>)
 8003f12:	6013      	str	r3, [r2, #0]
 8003f14:	e03c      	b.n	8003f90 <bme68x_GetHumidityScore+0x128>
		else {
			humidity_score = ((-0.25 / (100 - hum_reference)
 8003f16:	4b2d      	ldr	r3, [pc, #180]	@ (8003fcc <bme68x_GetHumidityScore+0x164>)
 8003f18:	edd3 7a00 	vldr	s15, [r3]
 8003f1c:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8003fd8 <bme68x_GetHumidityScore+0x170>
 8003f20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f24:	ee17 0a90 	vmov	r0, s15
 8003f28:	f7fc fb06 	bl	8000538 <__aeabi_f2d>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	460b      	mov	r3, r1
 8003f30:	f04f 0000 	mov.w	r0, #0
 8003f34:	4929      	ldr	r1, [pc, #164]	@ (8003fdc <bme68x_GetHumidityScore+0x174>)
 8003f36:	f7fc fc81 	bl	800083c <__aeabi_ddiv>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4614      	mov	r4, r2
 8003f40:	461d      	mov	r5, r3
					* BME68x_DATA->humidity) + 0.416666) * 100;
 8003f42:	4b1d      	ldr	r3, [pc, #116]	@ (8003fb8 <bme68x_GetHumidityScore+0x150>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7fc faf5 	bl	8000538 <__aeabi_f2d>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	4620      	mov	r0, r4
 8003f54:	4629      	mov	r1, r5
 8003f56:	f7fc fb47 	bl	80005e8 <__aeabi_dmul>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	4610      	mov	r0, r2
 8003f60:	4619      	mov	r1, r3
 8003f62:	a313      	add	r3, pc, #76	@ (adr r3, 8003fb0 <bme68x_GetHumidityScore+0x148>)
 8003f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f68:	f7fc f988 	bl	800027c <__adddf3>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	460b      	mov	r3, r1
 8003f70:	4610      	mov	r0, r2
 8003f72:	4619      	mov	r1, r3
 8003f74:	f04f 0200 	mov.w	r2, #0
 8003f78:	4b16      	ldr	r3, [pc, #88]	@ (8003fd4 <bme68x_GetHumidityScore+0x16c>)
 8003f7a:	f7fc fb35 	bl	80005e8 <__aeabi_dmul>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	460b      	mov	r3, r1
 8003f82:	4610      	mov	r0, r2
 8003f84:	4619      	mov	r1, r3
 8003f86:	f7fc fd41 	bl	8000a0c <__aeabi_d2f>
 8003f8a:	4603      	mov	r3, r0
			humidity_score = ((-0.25 / (100 - hum_reference)
 8003f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8003fc4 <bme68x_GetHumidityScore+0x15c>)
 8003f8e:	6013      	str	r3, [r2, #0]
		}
	}

	return humidity_score;
 8003f90:	4b0c      	ldr	r3, [pc, #48]	@ (8003fc4 <bme68x_GetHumidityScore+0x15c>)
 8003f92:	edd3 7a00 	vldr	s15, [r3]
 8003f96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f9a:	edc7 7a01 	vstr	s15, [r7, #4]
 8003f9e:	793b      	ldrb	r3, [r7, #4]
 8003fa0:	b25b      	sxtb	r3, r3
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8003faa:	bf00      	nop
 8003fac:	f3af 8000 	nop.w
 8003fb0:	ded6ba8c 	.word	0xded6ba8c
 8003fb4:	3fdaaaa7 	.word	0x3fdaaaa7
 8003fb8:	200002a8 	.word	0x200002a8
 8003fbc:	42180000 	.word	0x42180000
 8003fc0:	42280000 	.word	0x42280000
 8003fc4:	200002d4 	.word	0x200002d4
 8003fc8:	41c80000 	.word	0x41c80000
 8003fcc:	20000008 	.word	0x20000008
 8003fd0:	3fd00000 	.word	0x3fd00000
 8003fd4:	40590000 	.word	0x40590000
 8003fd8:	42c80000 	.word	0x42c80000
 8003fdc:	bfd00000 	.word	0xbfd00000

08003fe0 <bme68x_GetGasScore>:

//Calculate gas contribution to IAQ index
int8_t bme68x_GetGasScore()
{
 8003fe0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003fe4:	b082      	sub	sp, #8
 8003fe6:	af00      	add	r7, sp, #0

	gas_score = (0.75 / (gas_upper_limit - gas_lower_limit) * gas_reference
 8003fe8:	4b42      	ldr	r3, [pc, #264]	@ (80040f4 <bme68x_GetGasScore+0x114>)
 8003fea:	ed93 7a00 	vldr	s14, [r3]
 8003fee:	4b42      	ldr	r3, [pc, #264]	@ (80040f8 <bme68x_GetGasScore+0x118>)
 8003ff0:	edd3 7a00 	vldr	s15, [r3]
 8003ff4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ff8:	ee17 0a90 	vmov	r0, s15
 8003ffc:	f7fc fa9c 	bl	8000538 <__aeabi_f2d>
 8004000:	4602      	mov	r2, r0
 8004002:	460b      	mov	r3, r1
 8004004:	f04f 0000 	mov.w	r0, #0
 8004008:	493c      	ldr	r1, [pc, #240]	@ (80040fc <bme68x_GetGasScore+0x11c>)
 800400a:	f7fc fc17 	bl	800083c <__aeabi_ddiv>
 800400e:	4602      	mov	r2, r0
 8004010:	460b      	mov	r3, r1
 8004012:	4614      	mov	r4, r2
 8004014:	461d      	mov	r5, r3
 8004016:	4b3a      	ldr	r3, [pc, #232]	@ (8004100 <bme68x_GetGasScore+0x120>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f7fc fa8c 	bl	8000538 <__aeabi_f2d>
 8004020:	4602      	mov	r2, r0
 8004022:	460b      	mov	r3, r1
 8004024:	4620      	mov	r0, r4
 8004026:	4629      	mov	r1, r5
 8004028:	f7fc fade 	bl	80005e8 <__aeabi_dmul>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	4690      	mov	r8, r2
 8004032:	4699      	mov	r9, r3
			- (gas_lower_limit * (0.75 / (gas_upper_limit - gas_lower_limit))))
 8004034:	4b30      	ldr	r3, [pc, #192]	@ (80040f8 <bme68x_GetGasScore+0x118>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4618      	mov	r0, r3
 800403a:	f7fc fa7d 	bl	8000538 <__aeabi_f2d>
 800403e:	4604      	mov	r4, r0
 8004040:	460d      	mov	r5, r1
 8004042:	4b2c      	ldr	r3, [pc, #176]	@ (80040f4 <bme68x_GetGasScore+0x114>)
 8004044:	ed93 7a00 	vldr	s14, [r3]
 8004048:	4b2b      	ldr	r3, [pc, #172]	@ (80040f8 <bme68x_GetGasScore+0x118>)
 800404a:	edd3 7a00 	vldr	s15, [r3]
 800404e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004052:	ee17 0a90 	vmov	r0, s15
 8004056:	f7fc fa6f 	bl	8000538 <__aeabi_f2d>
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	f04f 0000 	mov.w	r0, #0
 8004062:	4926      	ldr	r1, [pc, #152]	@ (80040fc <bme68x_GetGasScore+0x11c>)
 8004064:	f7fc fbea 	bl	800083c <__aeabi_ddiv>
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	4620      	mov	r0, r4
 800406e:	4629      	mov	r1, r5
 8004070:	f7fc faba 	bl	80005e8 <__aeabi_dmul>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4640      	mov	r0, r8
 800407a:	4649      	mov	r1, r9
 800407c:	f7fc f8fc 	bl	8000278 <__aeabi_dsub>
 8004080:	4602      	mov	r2, r0
 8004082:	460b      	mov	r3, r1
 8004084:	4610      	mov	r0, r2
 8004086:	4619      	mov	r1, r3
			* 100.00;
 8004088:	f04f 0200 	mov.w	r2, #0
 800408c:	4b1d      	ldr	r3, [pc, #116]	@ (8004104 <bme68x_GetGasScore+0x124>)
 800408e:	f7fc faab 	bl	80005e8 <__aeabi_dmul>
 8004092:	4602      	mov	r2, r0
 8004094:	460b      	mov	r3, r1
 8004096:	4610      	mov	r0, r2
 8004098:	4619      	mov	r1, r3
 800409a:	f7fc fcb7 	bl	8000a0c <__aeabi_d2f>
 800409e:	4603      	mov	r3, r0
	gas_score = (0.75 / (gas_upper_limit - gas_lower_limit) * gas_reference
 80040a0:	4a19      	ldr	r2, [pc, #100]	@ (8004108 <bme68x_GetGasScore+0x128>)
 80040a2:	6013      	str	r3, [r2, #0]
	if (gas_score > 75)
 80040a4:	4b18      	ldr	r3, [pc, #96]	@ (8004108 <bme68x_GetGasScore+0x128>)
 80040a6:	edd3 7a00 	vldr	s15, [r3]
 80040aa:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800410c <bme68x_GetGasScore+0x12c>
 80040ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040b6:	dd02      	ble.n	80040be <bme68x_GetGasScore+0xde>
		gas_score = 75; // Sometimes gas readings can go outside of expected scale maximum
 80040b8:	4b13      	ldr	r3, [pc, #76]	@ (8004108 <bme68x_GetGasScore+0x128>)
 80040ba:	4a15      	ldr	r2, [pc, #84]	@ (8004110 <bme68x_GetGasScore+0x130>)
 80040bc:	601a      	str	r2, [r3, #0]
	if (gas_score < 0)
 80040be:	4b12      	ldr	r3, [pc, #72]	@ (8004108 <bme68x_GetGasScore+0x128>)
 80040c0:	edd3 7a00 	vldr	s15, [r3]
 80040c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040cc:	d503      	bpl.n	80040d6 <bme68x_GetGasScore+0xf6>
		gas_score = 0; // Sometimes gas readings can go outside of expected scale minimum
 80040ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004108 <bme68x_GetGasScore+0x128>)
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]

	return gas_score;
 80040d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004108 <bme68x_GetGasScore+0x128>)
 80040d8:	edd3 7a00 	vldr	s15, [r3]
 80040dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040e0:	edc7 7a01 	vstr	s15, [r7, #4]
 80040e4:	793b      	ldrb	r3, [r7, #4]
 80040e6:	b25b      	sxtb	r3, r3
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80040f2:	bf00      	nop
 80040f4:	20000010 	.word	0x20000010
 80040f8:	2000000c 	.word	0x2000000c
 80040fc:	3fe80000 	.word	0x3fe80000
 8004100:	20000004 	.word	0x20000004
 8004104:	40590000 	.word	0x40590000
 8004108:	200002d8 	.word	0x200002d8
 800410c:	42960000 	.word	0x42960000
 8004110:	42960000 	.word	0x42960000

08004114 <bme68x_iaq>:

float bme68x_iaq()
{
 8004114:	b590      	push	{r4, r7, lr}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0

	float air_quality_score = (100
			- (bme68x_GetHumidityScore(BME68x_DATA)
 800411a:	4b1e      	ldr	r3, [pc, #120]	@ (8004194 <bme68x_iaq+0x80>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f7ff fea2 	bl	8003e68 <bme68x_GetHumidityScore>
 8004124:	4603      	mov	r3, r0
 8004126:	461c      	mov	r4, r3
					+ bme68x_GetGasScore(BME68x_DATA))) * 5;
 8004128:	4b1a      	ldr	r3, [pc, #104]	@ (8004194 <bme68x_iaq+0x80>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4618      	mov	r0, r3
 800412e:	f7ff ff57 	bl	8003fe0 <bme68x_GetGasScore>
 8004132:	4603      	mov	r3, r0
 8004134:	4423      	add	r3, r4
			- (bme68x_GetHumidityScore(BME68x_DATA)
 8004136:	f1c3 0264 	rsb	r2, r3, #100	@ 0x64
					+ bme68x_GetGasScore(BME68x_DATA))) * 5;
 800413a:	4613      	mov	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
	float air_quality_score = (100
 8004140:	ee07 3a90 	vmov	s15, r3
 8004144:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004148:	edc7 7a01 	vstr	s15, [r7, #4]

	// If 5 measurements passed, recalculate the gas reference.
	if ((getgasreference_count++) % 5 == 0)
 800414c:	4b12      	ldr	r3, [pc, #72]	@ (8004198 <bme68x_iaq+0x84>)
 800414e:	f993 2000 	ldrsb.w	r2, [r3]
 8004152:	b2d3      	uxtb	r3, r2
 8004154:	3301      	adds	r3, #1
 8004156:	b2db      	uxtb	r3, r3
 8004158:	b259      	sxtb	r1, r3
 800415a:	4b0f      	ldr	r3, [pc, #60]	@ (8004198 <bme68x_iaq+0x84>)
 800415c:	7019      	strb	r1, [r3, #0]
 800415e:	4b0f      	ldr	r3, [pc, #60]	@ (800419c <bme68x_iaq+0x88>)
 8004160:	fb83 1302 	smull	r1, r3, r3, r2
 8004164:	1059      	asrs	r1, r3, #1
 8004166:	17d3      	asrs	r3, r2, #31
 8004168:	1ac9      	subs	r1, r1, r3
 800416a:	460b      	mov	r3, r1
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	440b      	add	r3, r1
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	b25b      	sxtb	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d104      	bne.n	8004182 <bme68x_iaq+0x6e>
		bme68x_GetGasReference(BME68x_DATA);
 8004178:	4b06      	ldr	r3, [pc, #24]	@ (8004194 <bme68x_iaq+0x80>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff fe3b 	bl	8003df8 <bme68x_GetGasReference>

	return air_quality_score;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	ee07 3a90 	vmov	s15, r3

}
 8004188:	eeb0 0a67 	vmov.f32	s0, s15
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	bd90      	pop	{r4, r7, pc}
 8004192:	bf00      	nop
 8004194:	200002a8 	.word	0x200002a8
 8004198:	200002dc 	.word	0x200002dc
 800419c:	66666667 	.word	0x66666667

080041a0 <cayenne_lpp_reset>:
#include <string.h>

#include "cayenne_lpp.h"

void cayenne_lpp_reset(cayenne_lpp_t *lpp)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
	memset(lpp->buffer, 0, CAYENNE_LPP_MAX_BUFFER_SIZE);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	222a      	movs	r2, #42	@ 0x2a
 80041ac:	2100      	movs	r1, #0
 80041ae:	4618      	mov	r0, r3
 80041b0:	f00a fdc0 	bl	800ed34 <memset>
	lpp->cursor = 0;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
}
 80041bc:	bf00      	nop
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <cayenne_lpp_add_analog_input>:
	lpp->buffer[lpp->cursor++] = value;
}

void cayenne_lpp_add_analog_input(cayenne_lpp_t *lpp, uint8_t channel,
		float value)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	460b      	mov	r3, r1
 80041ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80041d2:	72fb      	strb	r3, [r7, #11]
	assert(
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80041da:	3304      	adds	r3, #4
 80041dc:	2b29      	cmp	r3, #41	@ 0x29
 80041de:	d905      	bls.n	80041ec <cayenne_lpp_add_analog_input+0x28>
 80041e0:	4b24      	ldr	r3, [pc, #144]	@ (8004274 <cayenne_lpp_add_analog_input+0xb0>)
 80041e2:	4a25      	ldr	r2, [pc, #148]	@ (8004278 <cayenne_lpp_add_analog_input+0xb4>)
 80041e4:	2134      	movs	r1, #52	@ 0x34
 80041e6:	4825      	ldr	r0, [pc, #148]	@ (800427c <cayenne_lpp_add_analog_input+0xb8>)
 80041e8:	f00a fcb2 	bl	800eb50 <__assert_func>
			(lpp->cursor + CAYENNE_LPP_ANALOG_INPUT_SIZE) < CAYENNE_LPP_MAX_BUFFER_SIZE);

	int16_t val = value * 100;
 80041ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80041f0:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8004280 <cayenne_lpp_add_analog_input+0xbc>
 80041f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041fc:	ee17 3a90 	vmov	r3, s15
 8004200:	82fb      	strh	r3, [r7, #22]
	lpp->buffer[lpp->cursor++] = channel;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8004208:	1c5a      	adds	r2, r3, #1
 800420a:	b2d1      	uxtb	r1, r2
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	f882 102a 	strb.w	r1, [r2, #42]	@ 0x2a
 8004212:	4619      	mov	r1, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	7afa      	ldrb	r2, [r7, #11]
 8004218:	545a      	strb	r2, [r3, r1]
	lpp->buffer[lpp->cursor++] = CAYENNE_LPP_ANALOG_INPUT;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8004220:	1c5a      	adds	r2, r3, #1
 8004222:	b2d1      	uxtb	r1, r2
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	f882 102a 	strb.w	r1, [r2, #42]	@ 0x2a
 800422a:	461a      	mov	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2102      	movs	r1, #2
 8004230:	5499      	strb	r1, [r3, r2]
	lpp->buffer[lpp->cursor++] = val >> 8;
 8004232:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004236:	121b      	asrs	r3, r3, #8
 8004238:	b219      	sxth	r1, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	b2d0      	uxtb	r0, r2
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	f882 002a 	strb.w	r0, [r2, #42]	@ 0x2a
 800424a:	461a      	mov	r2, r3
 800424c:	b2c9      	uxtb	r1, r1
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	5499      	strb	r1, [r3, r2]
	lpp->buffer[lpp->cursor++] = val;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8004258:	1c5a      	adds	r2, r3, #1
 800425a:	b2d1      	uxtb	r1, r2
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	f882 102a 	strb.w	r1, [r2, #42]	@ 0x2a
 8004262:	461a      	mov	r2, r3
 8004264:	8afb      	ldrh	r3, [r7, #22]
 8004266:	b2d9      	uxtb	r1, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	5499      	strb	r1, [r3, r2]
}
 800426c:	bf00      	nop
 800426e:	3718      	adds	r7, #24
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	0800fc0c 	.word	0x0800fc0c
 8004278:	080112d4 	.word	0x080112d4
 800427c:	0800fba0 	.word	0x0800fba0
 8004280:	42c80000 	.word	0x42c80000

08004284 <cayenne_lpp_add_temperature>:
	lpp->buffer[lpp->cursor++] = value;
}

void cayenne_lpp_add_temperature(cayenne_lpp_t *lpp, uint8_t channel,
		float celsius)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	460b      	mov	r3, r1
 800428e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004292:	72fb      	strb	r3, [r7, #11]
	assert(
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800429a:	3304      	adds	r3, #4
 800429c:	2b29      	cmp	r3, #41	@ 0x29
 800429e:	d905      	bls.n	80042ac <cayenne_lpp_add_temperature+0x28>
 80042a0:	4b24      	ldr	r3, [pc, #144]	@ (8004334 <cayenne_lpp_add_temperature+0xb0>)
 80042a2:	4a25      	ldr	r2, [pc, #148]	@ (8004338 <cayenne_lpp_add_temperature+0xb4>)
 80042a4:	2165      	movs	r1, #101	@ 0x65
 80042a6:	4825      	ldr	r0, [pc, #148]	@ (800433c <cayenne_lpp_add_temperature+0xb8>)
 80042a8:	f00a fc52 	bl	800eb50 <__assert_func>
			(lpp->cursor + CAYENNE_LPP_TEMPERATURE_SIZE) < CAYENNE_LPP_MAX_BUFFER_SIZE);

	int16_t val = celsius * 10;
 80042ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80042b0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80042b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042bc:	ee17 3a90 	vmov	r3, s15
 80042c0:	82fb      	strh	r3, [r7, #22]
	lpp->buffer[lpp->cursor++] = channel;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80042c8:	1c5a      	adds	r2, r3, #1
 80042ca:	b2d1      	uxtb	r1, r2
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	f882 102a 	strb.w	r1, [r2, #42]	@ 0x2a
 80042d2:	4619      	mov	r1, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	7afa      	ldrb	r2, [r7, #11]
 80042d8:	545a      	strb	r2, [r3, r1]
	lpp->buffer[lpp->cursor++] = CAYENNE_LPP_TEMPERATURE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	b2d1      	uxtb	r1, r2
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	f882 102a 	strb.w	r1, [r2, #42]	@ 0x2a
 80042ea:	461a      	mov	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2167      	movs	r1, #103	@ 0x67
 80042f0:	5499      	strb	r1, [r3, r2]
	lpp->buffer[lpp->cursor++] = val >> 8;
 80042f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80042f6:	121b      	asrs	r3, r3, #8
 80042f8:	b219      	sxth	r1, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8004300:	1c5a      	adds	r2, r3, #1
 8004302:	b2d0      	uxtb	r0, r2
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	f882 002a 	strb.w	r0, [r2, #42]	@ 0x2a
 800430a:	461a      	mov	r2, r3
 800430c:	b2c9      	uxtb	r1, r1
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	5499      	strb	r1, [r3, r2]
	lpp->buffer[lpp->cursor++] = val;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	b2d1      	uxtb	r1, r2
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	f882 102a 	strb.w	r1, [r2, #42]	@ 0x2a
 8004322:	461a      	mov	r2, r3
 8004324:	8afb      	ldrh	r3, [r7, #22]
 8004326:	b2d9      	uxtb	r1, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	5499      	strb	r1, [r3, r2]
}
 800432c:	bf00      	nop
 800432e:	3718      	adds	r7, #24
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	0800fd3c 	.word	0x0800fd3c
 8004338:	080112f4 	.word	0x080112f4
 800433c:	0800fba0 	.word	0x0800fba0

08004340 <debug_init>:
/*  ************************************** */
/*    DO NOT CHANGE BELOW THIS LINE        */
/*  ************************************** */

void debug_init()
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
//    debug_led(0);

// configure USART1 (115200/8N1, tx-only)

// print banner
	debug_str("\r\n============== DEBUG STARTED ==============\r\n");
 8004344:	4802      	ldr	r0, [pc, #8]	@ (8004350 <debug_init+0x10>)
 8004346:	f000 f88d 	bl	8004464 <debug_str>
}
 800434a:	bf00      	nop
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	0800ff10 	.word	0x0800ff10

08004354 <debug_led>:

void debug_led(int val)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, val);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	b2db      	uxtb	r3, r3
 8004360:	461a      	mov	r2, r3
 8004362:	2102      	movs	r1, #2
 8004364:	4803      	ldr	r0, [pc, #12]	@ (8004374 <debug_led+0x20>)
 8004366:	f006 ff19 	bl	800b19c <HAL_GPIO_WritePin>
}
 800436a:	bf00      	nop
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	48000400 	.word	0x48000400

08004378 <debug_char>:

void debug_char(char c)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	4603      	mov	r3, r0
 8004380:	71fb      	strb	r3, [r7, #7]
	char buffer[] = "";
 8004382:	2300      	movs	r3, #0
 8004384:	733b      	strb	r3, [r7, #12]
	buffer[0] = c;
 8004386:	79fb      	ldrb	r3, [r7, #7]
 8004388:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&myUART, buffer, sizeof(buffer), HAL_MAX_DELAY);
 800438a:	f107 010c 	add.w	r1, r7, #12
 800438e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004392:	2201      	movs	r2, #1
 8004394:	4803      	ldr	r0, [pc, #12]	@ (80043a4 <debug_char+0x2c>)
 8004396:	f009 ff09 	bl	800e1ac <HAL_UART_Transmit>
}
 800439a:	bf00      	nop
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	2000066c 	.word	0x2000066c

080043a8 <debug_hex>:

void debug_hex(u1_t b)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	4603      	mov	r3, r0
 80043b0:	71fb      	strb	r3, [r7, #7]
	debug_char("0123456789ABCDEF"[b >> 4]);
 80043b2:	79fb      	ldrb	r3, [r7, #7]
 80043b4:	091b      	lsrs	r3, r3, #4
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	461a      	mov	r2, r3
 80043ba:	4b08      	ldr	r3, [pc, #32]	@ (80043dc <debug_hex+0x34>)
 80043bc:	5c9b      	ldrb	r3, [r3, r2]
 80043be:	4618      	mov	r0, r3
 80043c0:	f7ff ffda 	bl	8004378 <debug_char>
	debug_char("0123456789ABCDEF"[b & 0xF]);
 80043c4:	79fb      	ldrb	r3, [r7, #7]
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	4a04      	ldr	r2, [pc, #16]	@ (80043dc <debug_hex+0x34>)
 80043cc:	5cd3      	ldrb	r3, [r2, r3]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7ff ffd2 	bl	8004378 <debug_char>
}
 80043d4:	bf00      	nop
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	0800ff40 	.word	0x0800ff40

080043e0 <debug_uint>:
	debug_char('\r');
	debug_char('\n');
}

void debug_uint(u4_t v)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
	for (s1_t n = 24; n >= 0; n -= 8) {
 80043e8:	2318      	movs	r3, #24
 80043ea:	73fb      	strb	r3, [r7, #15]
 80043ec:	e00c      	b.n	8004408 <debug_uint+0x28>
		debug_hex(v >> n);
 80043ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	fa22 f303 	lsr.w	r3, r2, r3
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff ffd4 	bl	80043a8 <debug_hex>
	for (s1_t n = 24; n >= 0; n -= 8) {
 8004400:	7bfb      	ldrb	r3, [r7, #15]
 8004402:	3b08      	subs	r3, #8
 8004404:	b2db      	uxtb	r3, r3
 8004406:	73fb      	strb	r3, [r7, #15]
 8004408:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800440c:	2b00      	cmp	r3, #0
 800440e:	daee      	bge.n	80043ee <debug_uint+0xe>
	}
}
 8004410:	bf00      	nop
 8004412:	bf00      	nop
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <debug_int>:

void debug_int(s4_t v)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b08a      	sub	sp, #40	@ 0x28
 800441e:	af02      	add	r7, sp, #8
 8004420:	6078      	str	r0, [r7, #4]
	char buf[10], *p = buf;
 8004422:	f107 030c 	add.w	r3, r7, #12
 8004426:	61fb      	str	r3, [r7, #28]
	int n = debug_fmt(buf, sizeof(buf), v, 10, 0, 0);
 8004428:	f107 000c 	add.w	r0, r7, #12
 800442c:	2300      	movs	r3, #0
 800442e:	9301      	str	r3, [sp, #4]
 8004430:	2300      	movs	r3, #0
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	230a      	movs	r3, #10
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	210a      	movs	r1, #10
 800443a:	f000 f852 	bl	80044e2 <debug_fmt>
 800443e:	61b8      	str	r0, [r7, #24]
	while (n--)
 8004440:	e006      	b.n	8004450 <debug_int+0x36>
		debug_char(*p++);
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	1c5a      	adds	r2, r3, #1
 8004446:	61fa      	str	r2, [r7, #28]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff ff94 	bl	8004378 <debug_char>
	while (n--)
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	1e5a      	subs	r2, r3, #1
 8004454:	61ba      	str	r2, [r7, #24]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1f3      	bne.n	8004442 <debug_int+0x28>
}
 800445a:	bf00      	nop
 800445c:	bf00      	nop
 800445e:	3720      	adds	r7, #32
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <debug_str>:

void debug_str(const char *str)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
	while (*str) {
 800446c:	e006      	b.n	800447c <debug_str+0x18>
		debug_char(*str++);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	1c5a      	adds	r2, r3, #1
 8004472:	607a      	str	r2, [r7, #4]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff ff7e 	bl	8004378 <debug_char>
	while (*str) {
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1f4      	bne.n	800446e <debug_str+0xa>
	}
}
 8004484:	bf00      	nop
 8004486:	bf00      	nop
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <debug_val>:
	debug_char('\r');
	debug_char('\n');
}

void debug_val(const char *label, u4_t val)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b082      	sub	sp, #8
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
 8004496:	6039      	str	r1, [r7, #0]
	debug_str(label);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7ff ffe3 	bl	8004464 <debug_str>
	debug_uint(val);
 800449e:	6838      	ldr	r0, [r7, #0]
 80044a0:	f7ff ff9e 	bl	80043e0 <debug_uint>
	debug_char('\r');
 80044a4:	200d      	movs	r0, #13
 80044a6:	f7ff ff67 	bl	8004378 <debug_char>
	debug_char('\n');
 80044aa:	200a      	movs	r0, #10
 80044ac:	f7ff ff64 	bl	8004378 <debug_char>
}
 80044b0:	bf00      	nop
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <debug_valdec>:

void debug_valdec(const char *label, s4_t val)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
	debug_str(label);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7ff ffce 	bl	8004464 <debug_str>
	debug_int(val);
 80044c8:	6838      	ldr	r0, [r7, #0]
 80044ca:	f7ff ffa6 	bl	800441a <debug_int>
	debug_char('\r');
 80044ce:	200d      	movs	r0, #13
 80044d0:	f7ff ff52 	bl	8004378 <debug_char>
	debug_char('\n');
 80044d4:	200a      	movs	r0, #10
 80044d6:	f7ff ff4f 	bl	8004378 <debug_char>
}
 80044da:	bf00      	nop
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <debug_fmt>:

int debug_fmt(char *buf, int max, s4_t val, int base, int width, char pad)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b093      	sub	sp, #76	@ 0x4c
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	60f8      	str	r0, [r7, #12]
 80044ea:	60b9      	str	r1, [r7, #8]
 80044ec:	607a      	str	r2, [r7, #4]
 80044ee:	603b      	str	r3, [r7, #0]
	char num[33], *p = num, *b = buf;
 80044f0:	f107 0314 	add.w	r3, r7, #20
 80044f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	643b      	str	r3, [r7, #64]	@ 0x40
	u4_t m, v;
	// special handling of negative decimals
	v = (base == 10 && val < 0) ? -val : val;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b0a      	cmp	r3, #10
 80044fe:	d105      	bne.n	800450c <debug_fmt+0x2a>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	da02      	bge.n	800450c <debug_fmt+0x2a>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	425b      	negs	r3, r3
 800450a:	e000      	b.n	800450e <debug_fmt+0x2c>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	// generate digits backwards
	do {
		*p++ = ((m = v % base) <= 9) ? m + '0' : m + 'A' - 10;
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004514:	fbb3 f1f2 	udiv	r1, r3, r2
 8004518:	fb01 f202 	mul.w	r2, r1, r2
 800451c:	1a9b      	subs	r3, r3, r2
 800451e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004522:	2b09      	cmp	r3, #9
 8004524:	d804      	bhi.n	8004530 <debug_fmt+0x4e>
 8004526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004528:	b2db      	uxtb	r3, r3
 800452a:	3330      	adds	r3, #48	@ 0x30
 800452c:	b2da      	uxtb	r2, r3
 800452e:	e003      	b.n	8004538 <debug_fmt+0x56>
 8004530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004532:	b2db      	uxtb	r3, r3
 8004534:	3337      	adds	r3, #55	@ 0x37
 8004536:	b2da      	uxtb	r2, r3
 8004538:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800453a:	1c59      	adds	r1, r3, #1
 800453c:	6479      	str	r1, [r7, #68]	@ 0x44
 800453e:	701a      	strb	r2, [r3, #0]
	} while (v /= base);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004544:	fbb2 f3f3 	udiv	r3, r2, r3
 8004548:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800454a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1df      	bne.n	8004510 <debug_fmt+0x2e>
	// prefix negative decimals with '-'
	if (base == 10 && val < 0) {
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	2b0a      	cmp	r3, #10
 8004554:	d10e      	bne.n	8004574 <debug_fmt+0x92>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	da0b      	bge.n	8004574 <debug_fmt+0x92>
		*p++ = '-';
 800455c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800455e:	1c5a      	adds	r2, r3, #1
 8004560:	647a      	str	r2, [r7, #68]	@ 0x44
 8004562:	222d      	movs	r2, #45	@ 0x2d
 8004564:	701a      	strb	r2, [r3, #0]
	}
	// add leading zeroes or spaces
	while (b - buf < max - 1 && b - buf < width - (p - num)) {
 8004566:	e005      	b.n	8004574 <debug_fmt+0x92>
		*b++ = pad;
 8004568:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800456a:	1c5a      	adds	r2, r3, #1
 800456c:	643a      	str	r2, [r7, #64]	@ 0x40
 800456e:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8004572:	701a      	strb	r2, [r3, #0]
	while (b - buf < max - 1 && b - buf < width - (p - num)) {
 8004574:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	1ad2      	subs	r2, r2, r3
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	3b01      	subs	r3, #1
 800457e:	429a      	cmp	r2, r3
 8004580:	da0a      	bge.n	8004598 <debug_fmt+0xb6>
 8004582:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	1ad2      	subs	r2, r2, r3
 8004588:	f107 0314 	add.w	r3, r7, #20
 800458c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800458e:	1acb      	subs	r3, r1, r3
 8004590:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004592:	1acb      	subs	r3, r1, r3
 8004594:	429a      	cmp	r2, r3
 8004596:	dbe7      	blt.n	8004568 <debug_fmt+0x86>
	}
	// copy digits and sign forwards
	do
		*b++ = *--p;
 8004598:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800459a:	3b01      	subs	r3, #1
 800459c:	647b      	str	r3, [r7, #68]	@ 0x44
 800459e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045a0:	1c5a      	adds	r2, r3, #1
 80045a2:	643a      	str	r2, [r7, #64]	@ 0x40
 80045a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045a6:	7812      	ldrb	r2, [r2, #0]
 80045a8:	701a      	strb	r2, [r3, #0]
	while (b - buf < max && p > num);
 80045aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	dd04      	ble.n	80045c0 <debug_fmt+0xde>
 80045b6:	f107 0314 	add.w	r3, r7, #20
 80045ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045bc:	429a      	cmp	r2, r3
 80045be:	d8eb      	bhi.n	8004598 <debug_fmt+0xb6>
	// return number of characters written
	return b - buf;
 80045c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	1ad3      	subs	r3, r2, r3
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	374c      	adds	r7, #76	@ 0x4c
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
	...

080045d4 <debug_event>:

void debug_event(int ev)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
			[EV_TXCOMPLETE] = "TXCOMPLETE", [EV_LOST_TSYNC] = "LOST_TSYNC",
			[EV_RESET] = "RESET", [EV_RXCOMPLETE] = "RXCOMPLETE", [EV_LINK_DEAD
					] = "LINK_DEAD", [EV_LINK_ALIVE] = "LINK_ALIVE",
			[EV_SCAN_FOUND] = "SCAN_FOUND", [EV_TXSTART] = "EV_TXSTART", };
	debug_str(
			(ev < sizeof(evnames) / sizeof(evnames[0])) ?
 80045dc:	687b      	ldr	r3, [r7, #4]
	debug_str(
 80045de:	2b11      	cmp	r3, #17
 80045e0:	d804      	bhi.n	80045ec <debug_event+0x18>
 80045e2:	4a09      	ldr	r2, [pc, #36]	@ (8004608 <debug_event+0x34>)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045ea:	e000      	b.n	80045ee <debug_event+0x1a>
 80045ec:	4b07      	ldr	r3, [pc, #28]	@ (800460c <debug_event+0x38>)
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7ff ff38 	bl	8004464 <debug_str>
					evnames[ev] : "EV_UNKNOWN");
	debug_char('\r');
 80045f4:	200d      	movs	r0, #13
 80045f6:	f7ff febf 	bl	8004378 <debug_char>
	debug_char('\n');
 80045fa:	200a      	movs	r0, #10
 80045fc:	f7ff febc 	bl	8004378 <debug_char>
}
 8004600:	bf00      	nop
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	20000014 	.word	0x20000014
 800460c:	0800ff54 	.word	0x0800ff54

08004610 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b088      	sub	sp, #32
 8004614:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004616:	f107 030c 	add.w	r3, r7, #12
 800461a:	2200      	movs	r2, #0
 800461c:	601a      	str	r2, [r3, #0]
 800461e:	605a      	str	r2, [r3, #4]
 8004620:	609a      	str	r2, [r3, #8]
 8004622:	60da      	str	r2, [r3, #12]
 8004624:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004626:	4b33      	ldr	r3, [pc, #204]	@ (80046f4 <MX_GPIO_Init+0xe4>)
 8004628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800462a:	4a32      	ldr	r2, [pc, #200]	@ (80046f4 <MX_GPIO_Init+0xe4>)
 800462c:	f043 0304 	orr.w	r3, r3, #4
 8004630:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004632:	4b30      	ldr	r3, [pc, #192]	@ (80046f4 <MX_GPIO_Init+0xe4>)
 8004634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004636:	f003 0304 	and.w	r3, r3, #4
 800463a:	60bb      	str	r3, [r7, #8]
 800463c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800463e:	4b2d      	ldr	r3, [pc, #180]	@ (80046f4 <MX_GPIO_Init+0xe4>)
 8004640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004642:	4a2c      	ldr	r2, [pc, #176]	@ (80046f4 <MX_GPIO_Init+0xe4>)
 8004644:	f043 0301 	orr.w	r3, r3, #1
 8004648:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800464a:	4b2a      	ldr	r3, [pc, #168]	@ (80046f4 <MX_GPIO_Init+0xe4>)
 800464c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	607b      	str	r3, [r7, #4]
 8004654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004656:	4b27      	ldr	r3, [pc, #156]	@ (80046f4 <MX_GPIO_Init+0xe4>)
 8004658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800465a:	4a26      	ldr	r2, [pc, #152]	@ (80046f4 <MX_GPIO_Init+0xe4>)
 800465c:	f043 0302 	orr.w	r3, r3, #2
 8004660:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004662:	4b24      	ldr	r3, [pc, #144]	@ (80046f4 <MX_GPIO_Init+0xe4>)
 8004664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	603b      	str	r3, [r7, #0]
 800466c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Alim_temp_Pin|RST_Pin|NSS_Pin, GPIO_PIN_RESET);
 800466e:	2200      	movs	r2, #0
 8004670:	f648 0180 	movw	r1, #34944	@ 0x8880
 8004674:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004678:	f006 fd90 	bl	800b19c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800467c:	2200      	movs	r2, #0
 800467e:	2102      	movs	r1, #2
 8004680:	481d      	ldr	r0, [pc, #116]	@ (80046f8 <MX_GPIO_Init+0xe8>)
 8004682:	f006 fd8b 	bl	800b19c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Alim_temp_Pin RST_Pin NSS_Pin */
  GPIO_InitStruct.Pin = Alim_temp_Pin|RST_Pin|NSS_Pin;
 8004686:	f648 0380 	movw	r3, #34944	@ 0x8880
 800468a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800468c:	2301      	movs	r3, #1
 800468e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004694:	2300      	movs	r3, #0
 8004696:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004698:	f107 030c 	add.w	r3, r7, #12
 800469c:	4619      	mov	r1, r3
 800469e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80046a2:	f006 fc11 	bl	800aec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80046a6:	2302      	movs	r3, #2
 80046a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046aa:	2301      	movs	r3, #1
 80046ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ae:	2300      	movs	r3, #0
 80046b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046b2:	2300      	movs	r3, #0
 80046b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80046b6:	f107 030c 	add.w	r3, r7, #12
 80046ba:	4619      	mov	r1, r3
 80046bc:	480e      	ldr	r0, [pc, #56]	@ (80046f8 <MX_GPIO_Init+0xe8>)
 80046be:	f006 fc03 	bl	800aec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO0_Pin DIO1_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin|DIO1_Pin;
 80046c2:	23c0      	movs	r3, #192	@ 0xc0
 80046c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80046c6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80046ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046cc:	2300      	movs	r3, #0
 80046ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046d0:	f107 030c 	add.w	r3, r7, #12
 80046d4:	4619      	mov	r1, r3
 80046d6:	4808      	ldr	r0, [pc, #32]	@ (80046f8 <MX_GPIO_Init+0xe8>)
 80046d8:	f006 fbf6 	bl	800aec8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80046dc:	2200      	movs	r2, #0
 80046de:	2100      	movs	r1, #0
 80046e0:	2017      	movs	r0, #23
 80046e2:	f006 fbba 	bl	800ae5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80046e6:	2017      	movs	r0, #23
 80046e8:	f006 fbd3 	bl	800ae92 <HAL_NVIC_EnableIRQ>

}
 80046ec:	bf00      	nop
 80046ee:	3720      	adds	r7, #32
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	40021000 	.word	0x40021000
 80046f8:	48000400 	.word	0x48000400

080046fc <hal_io_init>:

// -----------------------------------------------------------------------------
// I/O

static void hal_io_init()
{
 80046fc:	b480      	push	{r7}
 80046fe:	af00      	add	r7, sp, #0
	//already done by cubemx
}
 8004700:	bf00      	nop
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <hal_pin_rxtx>:

// val ==1  => tx 1, rx 0 ; val == 0 => tx 0, rx 1
void hal_pin_rxtx(u1_t val)
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	4603      	mov	r3, r0
 8004712:	71fb      	strb	r3, [r7, #7]
  #ifdef TX_GPIO_Port
    HAL_GPIO_WritePin(RX_GPIO_Port,RX_Pin,~val);
    HAL_GPIO_WritePin(TX_GPIO_Port,TX_Pin,val);
  #endif
#endif
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <hal_pin_nss>:

// set radio NSS pin to given value
void hal_pin_nss(u1_t val)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	4603      	mov	r3, r0
 8004728:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, val);
 800472a:	79fb      	ldrb	r3, [r7, #7]
 800472c:	461a      	mov	r2, r3
 800472e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004732:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004736:	f006 fd31 	bl	800b19c <HAL_GPIO_WritePin>
}
 800473a:	bf00      	nop
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <hal_pin_rst>:

// set radio RST pin to given value (or keep floating!)
void hal_pin_rst(u1_t val)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b08c      	sub	sp, #48	@ 0x30
 8004746:	af00      	add	r7, sp, #0
 8004748:	4603      	mov	r3, r0
 800474a:	71fb      	strb	r3, [r7, #7]
	if (val == 0 || val == 1) { // drive pin
 800474c:	79fb      	ldrb	r3, [r7, #7]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <hal_pin_rst+0x16>
 8004752:	79fb      	ldrb	r3, [r7, #7]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d116      	bne.n	8004786 <hal_pin_rst+0x44>
		GPIO_InitTypeDef GPIO_InitStruct;
		GPIO_InitStruct.Pin = RST_Pin;
 8004758:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800475c:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800475e:	2301      	movs	r3, #1
 8004760:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004762:	2300      	movs	r3, #0
 8004764:	62bb      	str	r3, [r7, #40]	@ 0x28
		HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8004766:	f107 031c 	add.w	r3, r7, #28
 800476a:	4619      	mov	r1, r3
 800476c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004770:	f006 fbaa 	bl	800aec8 <HAL_GPIO_Init>

		HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, val);
 8004774:	79fb      	ldrb	r3, [r7, #7]
 8004776:	461a      	mov	r2, r3
 8004778:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800477c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004780:	f006 fd0c 	bl	800b19c <HAL_GPIO_WritePin>
	if (val == 0 || val == 1) { // drive pin
 8004784:	e00e      	b.n	80047a4 <hal_pin_rst+0x62>

	} else { // keep pin floating
		GPIO_InitTypeDef GPIO_InitStruct;
		GPIO_InitStruct.Pin = RST_Pin;
 8004786:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800478a:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800478c:	2300      	movs	r3, #0
 800478e:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004790:	2300      	movs	r3, #0
 8004792:	613b      	str	r3, [r7, #16]
		HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8004794:	f107 0308 	add.w	r3, r7, #8
 8004798:	4619      	mov	r1, r3
 800479a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800479e:	f006 fb93 	bl	800aec8 <HAL_GPIO_Init>
	}
}
 80047a2:	bf00      	nop
 80047a4:	bf00      	nop
 80047a6:	3730      	adds	r7, #48	@ 0x30
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <HAL_GPIO_EXTI_Callback>:

extern void radio_irq_handler(u1_t dio);

// generic EXTI IRQ handler for all channels
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin_int)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	4603      	mov	r3, r0
 80047b4:	80fb      	strh	r3, [r7, #6]
	// DIO 0
	if (GPIO_Pin_int == DIO0_Pin) {
 80047b6:	88fb      	ldrh	r3, [r7, #6]
 80047b8:	2b40      	cmp	r3, #64	@ 0x40
 80047ba:	d102      	bne.n	80047c2 <HAL_GPIO_EXTI_Callback+0x16>
		// invoke radio handler (on IRQ!)
		radio_irq_handler(0);
 80047bc:	2000      	movs	r0, #0
 80047be:	f004 fa4b 	bl	8008c58 <radio_irq_handler>
	}
	// DIO 1
	if (GPIO_Pin_int == DIO1_Pin) {
 80047c2:	88fb      	ldrh	r3, [r7, #6]
 80047c4:	2b80      	cmp	r3, #128	@ 0x80
 80047c6:	d102      	bne.n	80047ce <HAL_GPIO_EXTI_Callback+0x22>
		// invoke radio handler (on IRQ!)
		radio_irq_handler(1);
 80047c8:	2001      	movs	r0, #1
 80047ca:	f004 fa45 	bl	8008c58 <radio_irq_handler>
	// DIO 2
//	if(GPIO_Pin_int == DIO2_Pin) {
	//    // invoke radio handler (on IRQ!)
//	    radio_irq_handler(2);
//	}
}
 80047ce:	bf00      	nop
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <hal_spi_init>:

// -----------------------------------------------------------------------------
// SPI
void hal_spi_init()
{
 80047d6:	b480      	push	{r7}
 80047d8:	af00      	add	r7, sp, #0
	// already done by cube mx
}
 80047da:	bf00      	nop
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <hal_spi>:

// perform SPI transaction with radio
u1_t hal_spi(u1_t out)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af02      	add	r7, sp, #8
 80047ea:	4603      	mov	r3, r0
 80047ec:	71fb      	strb	r3, [r7, #7]
	char outbuffer[] = "";
 80047ee:	2300      	movs	r3, #0
 80047f0:	733b      	strb	r3, [r7, #12]
	char inbuffer[] = "";
 80047f2:	2300      	movs	r3, #0
 80047f4:	723b      	strb	r3, [r7, #8]
	outbuffer[0] = out;
 80047f6:	79fb      	ldrb	r3, [r7, #7]
 80047f8:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&mySPI, outbuffer, inbuffer, sizeof(outbuffer),
 80047fa:	f107 0208 	add.w	r2, r7, #8
 80047fe:	f107 010c 	add.w	r1, r7, #12
 8004802:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	2301      	movs	r3, #1
 800480a:	4804      	ldr	r0, [pc, #16]	@ (800481c <hal_spi+0x38>)
 800480c:	f008 fe2d 	bl	800d46a <HAL_SPI_TransmitReceive>
	HAL_MAX_DELAY);
	return inbuffer[0];
 8004810:	7a3b      	ldrb	r3, [r7, #8]
}
 8004812:	4618      	mov	r0, r3
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	2000056c 	.word	0x2000056c

08004820 <hal_time_init>:

// -----------------------------------------------------------------------------
// TIME
static void hal_time_init()
{
 8004820:	b480      	push	{r7}
 8004822:	af00      	add	r7, sp, #0
	// already done by cubemx
}
 8004824:	bf00      	nop
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
	...

08004830 <hal_ticks>:

u4_t hal_ticks()
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
	hal_disableIRQs();
 8004836:	f000 f8a5 	bl	8004984 <hal_disableIRQs>
	u4_t t = HAL.ticks;
 800483a:	4b13      	ldr	r3, [pc, #76]	@ (8004888 <hal_ticks+0x58>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	607b      	str	r3, [r7, #4]
	u2_t cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 8004840:	4b12      	ldr	r3, [pc, #72]	@ (800488c <hal_ticks+0x5c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004846:	807b      	strh	r3, [r7, #2]
	if (__HAL_TIM_GET_FLAG(&myTIMER, TIM_FLAG_CC1) != RESET) {
 8004848:	4b10      	ldr	r3, [pc, #64]	@ (800488c <hal_ticks+0x5c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b02      	cmp	r3, #2
 8004854:	d10d      	bne.n	8004872 <hal_ticks+0x42>
		if (__HAL_TIM_GET_IT_SOURCE(&myTIMER, TIM_IT_CC1) != RESET) {
 8004856:	4b0d      	ldr	r3, [pc, #52]	@ (800488c <hal_ticks+0x5c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b02      	cmp	r3, #2
 8004862:	d106      	bne.n	8004872 <hal_ticks+0x42>
			cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 8004864:	4b09      	ldr	r3, [pc, #36]	@ (800488c <hal_ticks+0x5c>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486a:	807b      	strh	r3, [r7, #2]
			t++;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3301      	adds	r3, #1
 8004870:	607b      	str	r3, [r7, #4]
		}
	}
	hal_enableIRQs();
 8004872:	f000 f897 	bl	80049a4 <hal_enableIRQs>
	return (t << 16) | cnt;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	041a      	lsls	r2, r3, #16
 800487a:	887b      	ldrh	r3, [r7, #2]
 800487c:	4313      	orrs	r3, r2
}
 800487e:	4618      	mov	r0, r3
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	200002e0 	.word	0x200002e0
 800488c:	20000620 	.word	0x20000620

08004890 <hal_ticksplusplus>:

void hal_ticksplusplus(void)
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
	HAL.ticks++;
 8004894:	4b04      	ldr	r3, [pc, #16]	@ (80048a8 <hal_ticksplusplus+0x18>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	3301      	adds	r3, #1
 800489a:	4a03      	ldr	r2, [pc, #12]	@ (80048a8 <hal_ticksplusplus+0x18>)
 800489c:	6053      	str	r3, [r2, #4]
}
 800489e:	bf00      	nop
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	200002e0 	.word	0x200002e0

080048ac <deltaticks>:

// return modified delta ticks from now to specified ticktime (0 for past, FFFF for far future)
static u2_t deltaticks(u4_t time)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
	u4_t t = hal_ticks();
 80048b4:	f7ff ffbc 	bl	8004830 <hal_ticks>
 80048b8:	60f8      	str	r0, [r7, #12]
	s4_t d = time - t;
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	60bb      	str	r3, [r7, #8]
	if (d <= 0)
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	dc01      	bgt.n	80048cc <deltaticks+0x20>
		return 0;    // in the past
 80048c8:	2300      	movs	r3, #0
 80048ca:	e008      	b.n	80048de <deltaticks+0x32>
	if ((d >> 16) != 0)
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	141b      	asrs	r3, r3, #16
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d002      	beq.n	80048da <deltaticks+0x2e>
		return 0xFFFF; // far ahead
 80048d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80048d8:	e001      	b.n	80048de <deltaticks+0x32>
	return (u2_t) d;
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	b29b      	uxth	r3, r3
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <hal_waitUntil>:

void hal_waitUntil(u4_t time)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b082      	sub	sp, #8
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
	while (deltaticks(time) != 0)
 80048ee:	bf00      	nop
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7ff ffdb 	bl	80048ac <deltaticks>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1f9      	bne.n	80048f0 <hal_waitUntil+0xa>
		; // busy wait until timestamp is reached
}
 80048fc:	bf00      	nop
 80048fe:	bf00      	nop
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
	...

08004908 <hal_checkTimer>:

// check and rewind for target time
u1_t hal_checkTimer(u4_t time)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
	u2_t dt;
	myTIMER.Instance->SR &= ~TIM_SR_CC1IF; // clear any pending interrupts
 8004910:	4b1b      	ldr	r3, [pc, #108]	@ (8004980 <hal_checkTimer+0x78>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	691a      	ldr	r2, [r3, #16]
 8004916:	4b1a      	ldr	r3, [pc, #104]	@ (8004980 <hal_checkTimer+0x78>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 0202 	bic.w	r2, r2, #2
 800491e:	611a      	str	r2, [r3, #16]
	if ((dt = deltaticks(time)) < 5) { // event is now (a few ticks ahead)
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7ff ffc3 	bl	80048ac <deltaticks>
 8004926:	4603      	mov	r3, r0
 8004928:	81fb      	strh	r3, [r7, #14]
 800492a:	89fb      	ldrh	r3, [r7, #14]
 800492c:	2b04      	cmp	r3, #4
 800492e:	d809      	bhi.n	8004944 <hal_checkTimer+0x3c>
		myTIMER.Instance->DIER &= ~TIM_DIER_CC1IE; // disable IE
 8004930:	4b13      	ldr	r3, [pc, #76]	@ (8004980 <hal_checkTimer+0x78>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68da      	ldr	r2, [r3, #12]
 8004936:	4b12      	ldr	r3, [pc, #72]	@ (8004980 <hal_checkTimer+0x78>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 0202 	bic.w	r2, r2, #2
 800493e:	60da      	str	r2, [r3, #12]
		return 1;
 8004940:	2301      	movs	r3, #1
 8004942:	e018      	b.n	8004976 <hal_checkTimer+0x6e>
	} else { // rewind timer (fully or to exact time))
		myTIMER.Instance->CCR1 = myTIMER.Instance->CNT + dt;   // set comparator
 8004944:	4b0e      	ldr	r3, [pc, #56]	@ (8004980 <hal_checkTimer+0x78>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800494a:	89fa      	ldrh	r2, [r7, #14]
 800494c:	4b0c      	ldr	r3, [pc, #48]	@ (8004980 <hal_checkTimer+0x78>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	440a      	add	r2, r1
 8004952:	635a      	str	r2, [r3, #52]	@ 0x34
		myTIMER.Instance->DIER |= TIM_DIER_CC1IE;  // enable IE
 8004954:	4b0a      	ldr	r3, [pc, #40]	@ (8004980 <hal_checkTimer+0x78>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68da      	ldr	r2, [r3, #12]
 800495a:	4b09      	ldr	r3, [pc, #36]	@ (8004980 <hal_checkTimer+0x78>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f042 0202 	orr.w	r2, r2, #2
 8004962:	60da      	str	r2, [r3, #12]
		myTIMER.Instance->CCER |= TIM_CCER_CC1E; // enable capture/compare uint 2
 8004964:	4b06      	ldr	r3, [pc, #24]	@ (8004980 <hal_checkTimer+0x78>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6a1a      	ldr	r2, [r3, #32]
 800496a:	4b05      	ldr	r3, [pc, #20]	@ (8004980 <hal_checkTimer+0x78>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f042 0201 	orr.w	r2, r2, #1
 8004972:	621a      	str	r2, [r3, #32]
		return 0;
 8004974:	2300      	movs	r3, #0
	}
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	20000620 	.word	0x20000620

08004984 <hal_disableIRQs>:

// -----------------------------------------------------------------------------
// IRQ
void hal_disableIRQs()
{
 8004984:	b480      	push	{r7}
 8004986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004988:	b672      	cpsid	i
}
 800498a:	bf00      	nop
	__disable_irq();
	//__set_BASEPRI(1 << 4);
	HAL.irqlevel++;
 800498c:	4b04      	ldr	r3, [pc, #16]	@ (80049a0 <hal_disableIRQs+0x1c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	3301      	adds	r3, #1
 8004992:	4a03      	ldr	r2, [pc, #12]	@ (80049a0 <hal_disableIRQs+0x1c>)
 8004994:	6013      	str	r3, [r2, #0]
}
 8004996:	bf00      	nop
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	200002e0 	.word	0x200002e0

080049a4 <hal_enableIRQs>:

void hal_enableIRQs()
{
 80049a4:	b480      	push	{r7}
 80049a6:	af00      	add	r7, sp, #0
	if (--HAL.irqlevel == 0) {
 80049a8:	4b07      	ldr	r3, [pc, #28]	@ (80049c8 <hal_enableIRQs+0x24>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	3b01      	subs	r3, #1
 80049ae:	4a06      	ldr	r2, [pc, #24]	@ (80049c8 <hal_enableIRQs+0x24>)
 80049b0:	6013      	str	r3, [r2, #0]
 80049b2:	4b05      	ldr	r3, [pc, #20]	@ (80049c8 <hal_enableIRQs+0x24>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <hal_enableIRQs+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 80049ba:	b662      	cpsie	i
}
 80049bc:	bf00      	nop
		__enable_irq();
		//__set_BASEPRI(0);
	}
}
 80049be:	bf00      	nop
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	200002e0 	.word	0x200002e0

080049cc <hal_sleep>:

void hal_sleep()
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
	// low power sleep mode
#ifndef CFG_no_low_power_sleep_mode
	// PWR->CR |= PWR_CR_LPSDSR;
#endif
	// suspend execution until IRQ, regardless of the CPSR I-bit
	__WFI();
 80049d0:	bf30      	wfi
}
 80049d2:	bf00      	nop
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <hal_init>:

// -----------------------------------------------------------------------------

void hal_init()
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	af00      	add	r7, sp, #0
	memset(&HAL, 0x00, sizeof(HAL));
 80049e0:	2208      	movs	r2, #8
 80049e2:	2100      	movs	r1, #0
 80049e4:	4807      	ldr	r0, [pc, #28]	@ (8004a04 <hal_init+0x28>)
 80049e6:	f00a f9a5 	bl	800ed34 <memset>
	hal_disableIRQs();
 80049ea:	f7ff ffcb 	bl	8004984 <hal_disableIRQs>
	// configure radio I/O and interrupt handler
	hal_io_init();
 80049ee:	f7ff fe85 	bl	80046fc <hal_io_init>
	// configure radio SPI
	hal_spi_init();
 80049f2:	f7ff fef0 	bl	80047d6 <hal_spi_init>
	// configure timer and interrupt handler
	hal_time_init();
 80049f6:	f7ff ff13 	bl	8004820 <hal_time_init>
	hal_enableIRQs();
 80049fa:	f7ff ffd3 	bl	80049a4 <hal_enableIRQs>
}
 80049fe:	bf00      	nop
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	200002e0 	.word	0x200002e0

08004a08 <hal_failed>:

void hal_failed()
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
	// HALT...
	hal_disableIRQs();
 8004a0c:	f7ff ffba 	bl	8004984 <hal_disableIRQs>
	hal_sleep();
 8004a10:	f7ff ffdc 	bl	80049cc <hal_sleep>
	while (1)
 8004a14:	bf00      	nop
 8004a16:	e7fd      	b.n	8004a14 <hal_failed+0xc>

08004a18 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8004a8c <MX_I2C1_Init+0x74>)
 8004a1e:	4a1c      	ldr	r2, [pc, #112]	@ (8004a90 <MX_I2C1_Init+0x78>)
 8004a20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8004a22:	4b1a      	ldr	r3, [pc, #104]	@ (8004a8c <MX_I2C1_Init+0x74>)
 8004a24:	4a1b      	ldr	r2, [pc, #108]	@ (8004a94 <MX_I2C1_Init+0x7c>)
 8004a26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004a28:	4b18      	ldr	r3, [pc, #96]	@ (8004a8c <MX_I2C1_Init+0x74>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004a2e:	4b17      	ldr	r3, [pc, #92]	@ (8004a8c <MX_I2C1_Init+0x74>)
 8004a30:	2201      	movs	r2, #1
 8004a32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004a34:	4b15      	ldr	r3, [pc, #84]	@ (8004a8c <MX_I2C1_Init+0x74>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004a3a:	4b14      	ldr	r3, [pc, #80]	@ (8004a8c <MX_I2C1_Init+0x74>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004a40:	4b12      	ldr	r3, [pc, #72]	@ (8004a8c <MX_I2C1_Init+0x74>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004a46:	4b11      	ldr	r3, [pc, #68]	@ (8004a8c <MX_I2C1_Init+0x74>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8004a8c <MX_I2C1_Init+0x74>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004a52:	480e      	ldr	r0, [pc, #56]	@ (8004a8c <MX_I2C1_Init+0x74>)
 8004a54:	f006 fbd2 	bl	800b1fc <HAL_I2C_Init>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004a5e:	f003 fb93 	bl	8008188 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004a62:	2100      	movs	r1, #0
 8004a64:	4809      	ldr	r0, [pc, #36]	@ (8004a8c <MX_I2C1_Init+0x74>)
 8004a66:	f007 fa41 	bl	800beec <HAL_I2CEx_ConfigAnalogFilter>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004a70:	f003 fb8a 	bl	8008188 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004a74:	2100      	movs	r1, #0
 8004a76:	4805      	ldr	r0, [pc, #20]	@ (8004a8c <MX_I2C1_Init+0x74>)
 8004a78:	f007 fa83 	bl	800bf82 <HAL_I2CEx_ConfigDigitalFilter>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004a82:	f003 fb81 	bl	8008188 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004a86:	bf00      	nop
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	200002e8 	.word	0x200002e8
 8004a90:	40005400 	.word	0x40005400
 8004a94:	10d19ce4 	.word	0x10d19ce4

08004a98 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b09e      	sub	sp, #120	@ 0x78
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aa0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	605a      	str	r2, [r3, #4]
 8004aaa:	609a      	str	r2, [r3, #8]
 8004aac:	60da      	str	r2, [r3, #12]
 8004aae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004ab0:	f107 0310 	add.w	r3, r7, #16
 8004ab4:	2254      	movs	r2, #84	@ 0x54
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f00a f93b 	bl	800ed34 <memset>
  if(i2cHandle->Instance==I2C1)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a1f      	ldr	r2, [pc, #124]	@ (8004b40 <HAL_I2C_MspInit+0xa8>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d137      	bne.n	8004b38 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004ac8:	2340      	movs	r3, #64	@ 0x40
 8004aca:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004acc:	2300      	movs	r3, #0
 8004ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ad0:	f107 0310 	add.w	r3, r7, #16
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f008 f93d 	bl	800cd54 <HAL_RCCEx_PeriphCLKConfig>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004ae0:	f003 fb52 	bl	8008188 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ae4:	4b17      	ldr	r3, [pc, #92]	@ (8004b44 <HAL_I2C_MspInit+0xac>)
 8004ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ae8:	4a16      	ldr	r2, [pc, #88]	@ (8004b44 <HAL_I2C_MspInit+0xac>)
 8004aea:	f043 0301 	orr.w	r3, r3, #1
 8004aee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004af0:	4b14      	ldr	r3, [pc, #80]	@ (8004b44 <HAL_I2C_MspInit+0xac>)
 8004af2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	60fb      	str	r3, [r7, #12]
 8004afa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004afc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004b00:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b02:	2312      	movs	r3, #18
 8004b04:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b06:	2300      	movs	r3, #0
 8004b08:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004b0e:	2304      	movs	r3, #4
 8004b10:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b12:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004b16:	4619      	mov	r1, r3
 8004b18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004b1c:	f006 f9d4 	bl	800aec8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004b20:	4b08      	ldr	r3, [pc, #32]	@ (8004b44 <HAL_I2C_MspInit+0xac>)
 8004b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b24:	4a07      	ldr	r2, [pc, #28]	@ (8004b44 <HAL_I2C_MspInit+0xac>)
 8004b26:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004b2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b2c:	4b05      	ldr	r3, [pc, #20]	@ (8004b44 <HAL_I2C_MspInit+0xac>)
 8004b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b34:	60bb      	str	r3, [r7, #8]
 8004b36:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004b38:	bf00      	nop
 8004b3a:	3778      	adds	r7, #120	@ 0x78
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	40005400 	.word	0x40005400
 8004b44:	40021000 	.word	0x40021000

08004b48 <getSf>:
enum {
	RSSI_OFF = 64, SNR_SCALEUP = 4
};

inline sf_t getSf(rps_t params)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	4603      	mov	r3, r0
 8004b50:	80fb      	strh	r3, [r7, #6]
	return (sf_t) (params & 0x7);
 8004b52:	88fb      	ldrh	r3, [r7, #6]
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	f003 0307 	and.w	r3, r3, #7
 8004b5a:	b2db      	uxtb	r3, r3
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <getBw>:
inline rps_t setSf(rps_t params, sf_t sf)
{
	return (rps_t) ((params & ~0x7) | sf);
}
inline bw_t getBw(rps_t params)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	4603      	mov	r3, r0
 8004b70:	80fb      	strh	r3, [r7, #6]
	return (bw_t) ((params >> 3) & 0x3);
 8004b72:	88fb      	ldrh	r3, [r7, #6]
 8004b74:	08db      	lsrs	r3, r3, #3
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	f003 0303 	and.w	r3, r3, #3
 8004b7e:	b2db      	uxtb	r3, r3
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <getCr>:
inline rps_t setBw(rps_t params, bw_t cr)
{
	return (rps_t) ((params & ~0x18) | (cr << 3));
}
inline cr_t getCr(rps_t params)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	4603      	mov	r3, r0
 8004b94:	80fb      	strh	r3, [r7, #6]
	return (cr_t) ((params >> 5) & 0x3);
 8004b96:	88fb      	ldrh	r3, [r7, #6]
 8004b98:	095b      	lsrs	r3, r3, #5
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	b2db      	uxtb	r3, r3
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <setCr>:
inline rps_t setCr(rps_t params, cr_t cr)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	460a      	mov	r2, r1
 8004bba:	80fb      	strh	r3, [r7, #6]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	717b      	strb	r3, [r7, #5]
	return (rps_t) ((params & ~0x60) | (cr << 5));
 8004bc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bc4:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8004bc8:	b21a      	sxth	r2, r3
 8004bca:	797b      	ldrb	r3, [r7, #5]
 8004bcc:	015b      	lsls	r3, r3, #5
 8004bce:	b21b      	sxth	r3, r3
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	b21b      	sxth	r3, r3
 8004bd4:	b29b      	uxth	r3, r3
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <getNocrc>:
inline int getNocrc(rps_t params)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b083      	sub	sp, #12
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	4603      	mov	r3, r0
 8004bea:	80fb      	strh	r3, [r7, #6]
	return ((params >> 7) & 0x1);
 8004bec:	88fb      	ldrh	r3, [r7, #6]
 8004bee:	09db      	lsrs	r3, r3, #7
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	f003 0301 	and.w	r3, r3, #1
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <setNocrc>:
inline rps_t setNocrc(rps_t params, int nocrc)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	4603      	mov	r3, r0
 8004c0a:	6039      	str	r1, [r7, #0]
 8004c0c:	80fb      	strh	r3, [r7, #6]
	return (rps_t) ((params & ~0x80) | (nocrc << 7));
 8004c0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c16:	b21a      	sxth	r2, r3
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	01db      	lsls	r3, r3, #7
 8004c1c:	b21b      	sxth	r3, r3
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	b21b      	sxth	r3, r3
 8004c22:	b29b      	uxth	r3, r3
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <getIh>:
inline int getIh(rps_t params)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	4603      	mov	r3, r0
 8004c38:	80fb      	strh	r3, [r7, #6]
	return ((params >> 8) & 0xFF);
 8004c3a:	88fb      	ldrh	r3, [r7, #6]
 8004c3c:	0a1b      	lsrs	r3, r3, #8
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	b2db      	uxtb	r3, r3
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <setIh>:
inline rps_t setIh(rps_t params, int ih)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b083      	sub	sp, #12
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	4603      	mov	r3, r0
 8004c56:	6039      	str	r1, [r7, #0]
 8004c58:	80fb      	strh	r3, [r7, #6]
	return (rps_t) ((params & ~0xFF00) | (ih << 8));
 8004c5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	b21a      	sxth	r2, r3
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	021b      	lsls	r3, r3, #8
 8004c66:	b21b      	sxth	r3, r3
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	b21b      	sxth	r3, r3
 8004c6c:	b29b      	uxth	r3, r3
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
	...

08004c7c <updr2rps>:
	return ((r1 ^ r2) & 0x1F) == 0;
}

extern const u1_t _DR2RPS_CRC[];
inline rps_t updr2rps(dr_t dr)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	4603      	mov	r3, r0
 8004c84:	71fb      	strb	r3, [r7, #7]
	return (rps_t) _DR2RPS_CRC[dr + 1];
 8004c86:	79fb      	ldrb	r3, [r7, #7]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	4a04      	ldr	r2, [pc, #16]	@ (8004c9c <updr2rps+0x20>)
 8004c8c:	5cd3      	ldrb	r3, [r2, r3]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	08011310 	.word	0x08011310

08004ca0 <dndr2rps>:
inline rps_t dndr2rps(dr_t dr)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	71fb      	strb	r3, [r7, #7]
	return setNocrc(updr2rps(dr), 1);
 8004caa:	79fb      	ldrb	r3, [r7, #7]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7ff ffe5 	bl	8004c7c <updr2rps>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2101      	movs	r1, #1
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7ff ffa3 	bl	8004c02 <setNocrc>
 8004cbc:	4603      	mov	r3, r0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
	...

08004cc8 <decDR>:
inline dr_t incDR(dr_t dr)
{
	return _DR2RPS_CRC[dr + 2] == ILLEGAL_RPS ? dr : (dr_t) (dr + 1);
} // increase data rate
inline dr_t decDR(dr_t dr)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	4603      	mov	r3, r0
 8004cd0:	71fb      	strb	r3, [r7, #7]
	return _DR2RPS_CRC[dr] == ILLEGAL_RPS ? dr : (dr_t) (dr - 1);
 8004cd2:	79fb      	ldrb	r3, [r7, #7]
 8004cd4:	4a07      	ldr	r2, [pc, #28]	@ (8004cf4 <decDR+0x2c>)
 8004cd6:	5cd3      	ldrb	r3, [r2, r3]
 8004cd8:	2bff      	cmp	r3, #255	@ 0xff
 8004cda:	d003      	beq.n	8004ce4 <decDR+0x1c>
 8004cdc:	79fb      	ldrb	r3, [r7, #7]
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	e000      	b.n	8004ce6 <decDR+0x1e>
 8004ce4:	79fb      	ldrb	r3, [r7, #7]
} // decrease data rate
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	08011310 	.word	0x08011310

08004cf8 <validDR>:
inline dr_t assertDR(dr_t dr)
{
	return _DR2RPS_CRC[dr + 1] == ILLEGAL_RPS ? DR_DFLTMIN : dr;
}   // force into a valid DR
inline bit_t validDR(dr_t dr)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	4603      	mov	r3, r0
 8004d00:	71fb      	strb	r3, [r7, #7]
	return _DR2RPS_CRC[dr + 1] != ILLEGAL_RPS;
 8004d02:	79fb      	ldrb	r3, [r7, #7]
 8004d04:	3301      	adds	r3, #1
 8004d06:	4a06      	ldr	r2, [pc, #24]	@ (8004d20 <validDR+0x28>)
 8004d08:	5cd3      	ldrb	r3, [r2, r3]
 8004d0a:	2bff      	cmp	r3, #255	@ 0xff
 8004d0c:	bf14      	ite	ne
 8004d0e:	2301      	movne	r3, #1
 8004d10:	2300      	moveq	r3, #0
 8004d12:	b2db      	uxtb	r3, r3
} // in range
 8004d14:	4618      	mov	r0, r3
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	08011310 	.word	0x08011310

08004d24 <lowerDR>:
inline dr_t lowerDR(dr_t dr, u1_t n)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	460a      	mov	r2, r1
 8004d2e:	71fb      	strb	r3, [r7, #7]
 8004d30:	4613      	mov	r3, r2
 8004d32:	71bb      	strb	r3, [r7, #6]
	while (n--) {
 8004d34:	e005      	b.n	8004d42 <lowerDR+0x1e>
		dr = decDR(dr);
 8004d36:	79fb      	ldrb	r3, [r7, #7]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7ff ffc5 	bl	8004cc8 <decDR>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	71fb      	strb	r3, [r7, #7]
	while (n--) {
 8004d42:	79bb      	ldrb	r3, [r7, #6]
 8004d44:	1e5a      	subs	r2, r3, #1
 8004d46:	71ba      	strb	r2, [r7, #6]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1f4      	bne.n	8004d36 <lowerDR+0x12>
	}
	return dr;
 8004d4c:	79fb      	ldrb	r3, [r7, #7]
} // decrease data rate by n steps
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <os_rlsbf2>:

#if !defined(HAS_os_calls)

#if !defined(os_rlsbf2)
u2_t os_rlsbf2(xref2cu1_t buf)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b083      	sub	sp, #12
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
	return (u2_t) (buf[0] | (buf[1] << 8));
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	b21a      	sxth	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	3301      	adds	r3, #1
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	021b      	lsls	r3, r3, #8
 8004d6c:	b21b      	sxth	r3, r3
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	b21b      	sxth	r3, r3
 8004d72:	b29b      	uxth	r3, r3
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <os_rlsbf4>:
#endif

#if !defined(os_rlsbf4)
u4_t os_rlsbf4(xref2cu1_t buf)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
	return (u4_t) (buf[0] | (buf[1] << 8) | ((u4_t) buf[2] << 16)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	3301      	adds	r3, #1
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	021b      	lsls	r3, r3, #8
 8004d96:	4313      	orrs	r3, r2
 8004d98:	461a      	mov	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	3302      	adds	r3, #2
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	041b      	lsls	r3, r3, #16
 8004da2:	431a      	orrs	r2, r3
			| ((u4_t) buf[3] << 24));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	3303      	adds	r3, #3
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	061b      	lsls	r3, r3, #24
	return (u4_t) (buf[0] | (buf[1] << 8) | ((u4_t) buf[2] << 16)
 8004dac:	4313      	orrs	r3, r2
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <os_rmsbf4>:
#endif

#if !defined(os_rmsbf4)
u4_t os_rmsbf4(xref2cu1_t buf)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b083      	sub	sp, #12
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
	return (u4_t) (buf[3] | (buf[2] << 8) | ((u4_t) buf[1] << 16)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	3303      	adds	r3, #3
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	461a      	mov	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	3302      	adds	r3, #2
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	021b      	lsls	r3, r3, #8
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	041b      	lsls	r3, r3, #16
 8004dde:	431a      	orrs	r2, r3
			| ((u4_t) buf[0] << 24));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	061b      	lsls	r3, r3, #24
	return (u4_t) (buf[3] | (buf[2] << 8) | ((u4_t) buf[1] << 16)
 8004de6:	4313      	orrs	r3, r2
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <os_wlsbf2>:
#endif

#if !defined(os_wlsbf2)
void os_wlsbf2(xref2u1_t buf, u2_t v)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	807b      	strh	r3, [r7, #2]
	buf[0] = v;
 8004e00:	887b      	ldrh	r3, [r7, #2]
 8004e02:	b2da      	uxtb	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	701a      	strb	r2, [r3, #0]
	buf[1] = v >> 8;
 8004e08:	887b      	ldrh	r3, [r7, #2]
 8004e0a:	0a1b      	lsrs	r3, r3, #8
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	3301      	adds	r3, #1
 8004e12:	b2d2      	uxtb	r2, r2
 8004e14:	701a      	strb	r2, [r3, #0]
}
 8004e16:	bf00      	nop
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <os_wlsbf4>:
#endif

#if !defined(os_wlsbf4)
void os_wlsbf4(xref2u1_t buf, u4_t v)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
 8004e2a:	6039      	str	r1, [r7, #0]
	buf[0] = v;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	701a      	strb	r2, [r3, #0]
	buf[1] = v >> 8;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	0a1a      	lsrs	r2, r3, #8
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	b2d2      	uxtb	r2, r2
 8004e3e:	701a      	strb	r2, [r3, #0]
	buf[2] = v >> 16;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	0c1a      	lsrs	r2, r3, #16
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	3302      	adds	r3, #2
 8004e48:	b2d2      	uxtb	r2, r2
 8004e4a:	701a      	strb	r2, [r3, #0]
	buf[3] = v >> 24;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	0e1a      	lsrs	r2, r3, #24
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	3303      	adds	r3, #3
 8004e54:	b2d2      	uxtb	r2, r2
 8004e56:	701a      	strb	r2, [r3, #0]
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <os_wmsbf4>:
#endif

#if !defined(os_wmsbf4)
void os_wmsbf4(xref2u1_t buf, u4_t v)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
	buf[3] = v;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	3303      	adds	r3, #3
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	b2d2      	uxtb	r2, r2
 8004e76:	701a      	strb	r2, [r3, #0]
	buf[2] = v >> 8;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	0a1a      	lsrs	r2, r3, #8
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	3302      	adds	r3, #2
 8004e80:	b2d2      	uxtb	r2, r2
 8004e82:	701a      	strb	r2, [r3, #0]
	buf[1] = v >> 16;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	0c1a      	lsrs	r2, r3, #16
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	b2d2      	uxtb	r2, r2
 8004e8e:	701a      	strb	r2, [r3, #0]
	buf[0] = v >> 24;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	0e1b      	lsrs	r3, r3, #24
 8004e94:	b2da      	uxtb	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	701a      	strb	r2, [r3, #0]
}
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <os_getBattLevel>:
#endif

#if !defined(os_getBattLevel)
u1_t os_getBattLevel(void)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	af00      	add	r7, sp, #0
	return MCMD_DEVS_BATT_NOINFO;
 8004eaa:	23ff      	movs	r3, #255	@ 0xff
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <os_crc16>:
#endif

#if !defined(os_crc16)
// New CRC-16 CCITT(XMODEM) checksum for beacons:
u2_t os_crc16(xref2u1_t data, uint len)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b087      	sub	sp, #28
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
 8004ebe:	6039      	str	r1, [r7, #0]
	u2_t remainder = 0;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	82fb      	strh	r3, [r7, #22]
	u2_t polynomial = 0x1021;
 8004ec4:	f241 0321 	movw	r3, #4129	@ 0x1021
 8004ec8:	81bb      	strh	r3, [r7, #12]
	for (uint i = 0; i < len; i++) {
 8004eca:	2300      	movs	r3, #0
 8004ecc:	613b      	str	r3, [r7, #16]
 8004ece:	e026      	b.n	8004f1e <os_crc16+0x68>
		remainder ^= data[i] << 8;
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	021b      	lsls	r3, r3, #8
 8004eda:	b21a      	sxth	r2, r3
 8004edc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004ee0:	4053      	eors	r3, r2
 8004ee2:	b21b      	sxth	r3, r3
 8004ee4:	82fb      	strh	r3, [r7, #22]
		for (u1_t bit = 8; bit > 0; bit--) {
 8004ee6:	2308      	movs	r3, #8
 8004ee8:	73fb      	strb	r3, [r7, #15]
 8004eea:	e012      	b.n	8004f12 <os_crc16+0x5c>
			if ((remainder & 0x8000))
 8004eec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	da08      	bge.n	8004f06 <os_crc16+0x50>
				remainder = (remainder << 1) ^ polynomial;
 8004ef4:	8afb      	ldrh	r3, [r7, #22]
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	b21a      	sxth	r2, r3
 8004efa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004efe:	4053      	eors	r3, r2
 8004f00:	b21b      	sxth	r3, r3
 8004f02:	82fb      	strh	r3, [r7, #22]
 8004f04:	e002      	b.n	8004f0c <os_crc16+0x56>
			else
				remainder <<= 1;
 8004f06:	8afb      	ldrh	r3, [r7, #22]
 8004f08:	005b      	lsls	r3, r3, #1
 8004f0a:	82fb      	strh	r3, [r7, #22]
		for (u1_t bit = 8; bit > 0; bit--) {
 8004f0c:	7bfb      	ldrb	r3, [r7, #15]
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	73fb      	strb	r3, [r7, #15]
 8004f12:	7bfb      	ldrb	r3, [r7, #15]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1e9      	bne.n	8004eec <os_crc16+0x36>
	for (uint i = 0; i < len; i++) {
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	613b      	str	r3, [r7, #16]
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d3d4      	bcc.n	8004ed0 <os_crc16+0x1a>
		}
	}
	return remainder;
 8004f26:	8afb      	ldrh	r3, [r7, #22]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	371c      	adds	r7, #28
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <micB0>:

// ================================================================================
// BEG AES

static void micB0(u4_t devaddr, u4_t seqno, int dndir, int len)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
 8004f40:	603b      	str	r3, [r7, #0]
	os_clearMem(AESaux, 16);
 8004f42:	2210      	movs	r2, #16
 8004f44:	2100      	movs	r1, #0
 8004f46:	4810      	ldr	r0, [pc, #64]	@ (8004f88 <micB0+0x54>)
 8004f48:	f009 fef4 	bl	800ed34 <memset>
	AESaux[0] = 0x49;
 8004f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8004f88 <micB0+0x54>)
 8004f4e:	2249      	movs	r2, #73	@ 0x49
 8004f50:	701a      	strb	r2, [r3, #0]
	AESaux[5] = dndir ? 1 : 0;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	bf14      	ite	ne
 8004f58:	2301      	movne	r3, #1
 8004f5a:	2300      	moveq	r3, #0
 8004f5c:	b2da      	uxtb	r2, r3
 8004f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f8c <micB0+0x58>)
 8004f60:	701a      	strb	r2, [r3, #0]
	AESaux[15] = len;
 8004f62:	4b0b      	ldr	r3, [pc, #44]	@ (8004f90 <micB0+0x5c>)
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	b2d2      	uxtb	r2, r2
 8004f68:	701a      	strb	r2, [r3, #0]
	os_wlsbf4(AESaux + 6, devaddr);
 8004f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8004f94 <micB0+0x60>)
 8004f6c:	68f9      	ldr	r1, [r7, #12]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7ff ff57 	bl	8004e22 <os_wlsbf4>
	os_wlsbf4(AESaux + 10, seqno);
 8004f74:	4b08      	ldr	r3, [pc, #32]	@ (8004f98 <micB0+0x64>)
 8004f76:	68b9      	ldr	r1, [r7, #8]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7ff ff52 	bl	8004e22 <os_wlsbf4>
}
 8004f7e:	bf00      	nop
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	20000144 	.word	0x20000144
 8004f8c:	20000149 	.word	0x20000149
 8004f90:	20000153 	.word	0x20000153
 8004f94:	2000014a 	.word	0x2000014a
 8004f98:	2000014e 	.word	0x2000014e

08004f9c <aes_verifyMic>:

static int aes_verifyMic(xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir,
		xref2u1_t pdu, int len)
{
 8004f9c:	b590      	push	{r4, r7, lr}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
 8004fa8:	603b      	str	r3, [r7, #0]
	micB0(devaddr, seqno, dndir, len);
 8004faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	6879      	ldr	r1, [r7, #4]
 8004fb0:	68b8      	ldr	r0, [r7, #8]
 8004fb2:	f7ff ffbf 	bl	8004f34 <micB0>
	os_copyMem(AESkey, key, 16);
 8004fb6:	2210      	movs	r2, #16
 8004fb8:	68f9      	ldr	r1, [r7, #12]
 8004fba:	480d      	ldr	r0, [pc, #52]	@ (8004ff0 <aes_verifyMic+0x54>)
 8004fbc:	f009 feef 	bl	800ed9e <memcpy>
	return os_aes(AES_MIC, pdu, len) == os_rmsbf4(pdu + len);
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	6a39      	ldr	r1, [r7, #32]
 8004fc8:	2002      	movs	r0, #2
 8004fca:	f7fc f885 	bl	80010d8 <os_aes>
 8004fce:	4604      	mov	r4, r0
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd2:	6a3a      	ldr	r2, [r7, #32]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7ff feef 	bl	8004dba <os_rmsbf4>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	429c      	cmp	r4, r3
 8004fe0:	bf0c      	ite	eq
 8004fe2:	2301      	moveq	r3, #1
 8004fe4:	2300      	movne	r3, #0
 8004fe6:	b2db      	uxtb	r3, r3
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd90      	pop	{r4, r7, pc}
 8004ff0:	20000154 	.word	0x20000154

08004ff4 <aes_appendMic>:

static void aes_appendMic(xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir,
		xref2u1_t pdu, int len)
{
 8004ff4:	b590      	push	{r4, r7, lr}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
 8005000:	603b      	str	r3, [r7, #0]
	micB0(devaddr, seqno, dndir, len);
 8005002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	6879      	ldr	r1, [r7, #4]
 8005008:	68b8      	ldr	r0, [r7, #8]
 800500a:	f7ff ff93 	bl	8004f34 <micB0>
	os_copyMem(AESkey, key, 16);
 800500e:	2210      	movs	r2, #16
 8005010:	68f9      	ldr	r1, [r7, #12]
 8005012:	480b      	ldr	r0, [pc, #44]	@ (8005040 <aes_appendMic+0x4c>)
 8005014:	f009 fec3 	bl	800ed9e <memcpy>
	// MSB because of internal structure of AES
	os_wmsbf4(pdu + len, os_aes(AES_MIC, pdu, len));
 8005018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501a:	6a3a      	ldr	r2, [r7, #32]
 800501c:	18d4      	adds	r4, r2, r3
 800501e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005020:	b29b      	uxth	r3, r3
 8005022:	461a      	mov	r2, r3
 8005024:	6a39      	ldr	r1, [r7, #32]
 8005026:	2002      	movs	r0, #2
 8005028:	f7fc f856 	bl	80010d8 <os_aes>
 800502c:	4603      	mov	r3, r0
 800502e:	4619      	mov	r1, r3
 8005030:	4620      	mov	r0, r4
 8005032:	f7ff ff17 	bl	8004e64 <os_wmsbf4>
}
 8005036:	bf00      	nop
 8005038:	3714      	adds	r7, #20
 800503a:	46bd      	mov	sp, r7
 800503c:	bd90      	pop	{r4, r7, pc}
 800503e:	bf00      	nop
 8005040:	20000154 	.word	0x20000154

08005044 <aes_appendMic0>:

static void aes_appendMic0(xref2u1_t pdu, int len)
{
 8005044:	b590      	push	{r4, r7, lr}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
	os_getDevKey(AESkey);
 800504e:	480b      	ldr	r0, [pc, #44]	@ (800507c <aes_appendMic0+0x38>)
 8005050:	f002 fe38 	bl	8007cc4 <os_getDevKey>
	os_wmsbf4(pdu + len, os_aes(AES_MIC | AES_MICNOAUX, pdu, len)); // MSB because of internal structure of AES
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	18d4      	adds	r4, r2, r3
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	b29b      	uxth	r3, r3
 800505e:	461a      	mov	r2, r3
 8005060:	6879      	ldr	r1, [r7, #4]
 8005062:	200a      	movs	r0, #10
 8005064:	f7fc f838 	bl	80010d8 <os_aes>
 8005068:	4603      	mov	r3, r0
 800506a:	4619      	mov	r1, r3
 800506c:	4620      	mov	r0, r4
 800506e:	f7ff fef9 	bl	8004e64 <os_wmsbf4>
}
 8005072:	bf00      	nop
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	bd90      	pop	{r4, r7, pc}
 800507a:	bf00      	nop
 800507c:	20000154 	.word	0x20000154

08005080 <aes_verifyMic0>:

static int aes_verifyMic0(xref2u1_t pdu, int len)
{
 8005080:	b590      	push	{r4, r7, lr}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
	os_getDevKey(AESkey);
 800508a:	480d      	ldr	r0, [pc, #52]	@ (80050c0 <aes_verifyMic0+0x40>)
 800508c:	f002 fe1a 	bl	8007cc4 <os_getDevKey>
	return os_aes(AES_MIC | AES_MICNOAUX, pdu, len) == os_rmsbf4(pdu + len);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	b29b      	uxth	r3, r3
 8005094:	461a      	mov	r2, r3
 8005096:	6879      	ldr	r1, [r7, #4]
 8005098:	200a      	movs	r0, #10
 800509a:	f7fc f81d 	bl	80010d8 <os_aes>
 800509e:	4604      	mov	r4, r0
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	4413      	add	r3, r2
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7ff fe87 	bl	8004dba <os_rmsbf4>
 80050ac:	4603      	mov	r3, r0
 80050ae:	429c      	cmp	r4, r3
 80050b0:	bf0c      	ite	eq
 80050b2:	2301      	moveq	r3, #1
 80050b4:	2300      	movne	r3, #0
 80050b6:	b2db      	uxtb	r3, r3
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd90      	pop	{r4, r7, pc}
 80050c0:	20000154 	.word	0x20000154

080050c4 <aes_encrypt>:

static void aes_encrypt(xref2u1_t pdu, int len)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
	os_getDevKey(AESkey);
 80050ce:	4807      	ldr	r0, [pc, #28]	@ (80050ec <aes_encrypt+0x28>)
 80050d0:	f002 fdf8 	bl	8007cc4 <os_getDevKey>
	os_aes(AES_ENC, pdu, len);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	461a      	mov	r2, r3
 80050da:	6879      	ldr	r1, [r7, #4]
 80050dc:	2000      	movs	r0, #0
 80050de:	f7fb fffb 	bl	80010d8 <os_aes>
}
 80050e2:	bf00      	nop
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	20000154 	.word	0x20000154

080050f0 <aes_cipher>:

static void aes_cipher(xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir,
		xref2u1_t payload, int len)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
 80050fc:	603b      	str	r3, [r7, #0]
	if (len <= 0)
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	2b00      	cmp	r3, #0
 8005102:	dd29      	ble.n	8005158 <aes_cipher+0x68>
		return;
	os_clearMem(AESaux, 16);
 8005104:	2210      	movs	r2, #16
 8005106:	2100      	movs	r1, #0
 8005108:	4815      	ldr	r0, [pc, #84]	@ (8005160 <aes_cipher+0x70>)
 800510a:	f009 fe13 	bl	800ed34 <memset>
	AESaux[0] = AESaux[15] = 1; // mode=cipher / dir=down / block counter=1
 800510e:	4b15      	ldr	r3, [pc, #84]	@ (8005164 <aes_cipher+0x74>)
 8005110:	2201      	movs	r2, #1
 8005112:	701a      	strb	r2, [r3, #0]
 8005114:	4a12      	ldr	r2, [pc, #72]	@ (8005160 <aes_cipher+0x70>)
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	7013      	strb	r3, [r2, #0]
	AESaux[5] = dndir ? 1 : 0;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	bf14      	ite	ne
 8005120:	2301      	movne	r3, #1
 8005122:	2300      	moveq	r3, #0
 8005124:	b2da      	uxtb	r2, r3
 8005126:	4b10      	ldr	r3, [pc, #64]	@ (8005168 <aes_cipher+0x78>)
 8005128:	701a      	strb	r2, [r3, #0]
	os_wlsbf4(AESaux + 6, devaddr);
 800512a:	4b10      	ldr	r3, [pc, #64]	@ (800516c <aes_cipher+0x7c>)
 800512c:	68b9      	ldr	r1, [r7, #8]
 800512e:	4618      	mov	r0, r3
 8005130:	f7ff fe77 	bl	8004e22 <os_wlsbf4>
	os_wlsbf4(AESaux + 10, seqno);
 8005134:	4b0e      	ldr	r3, [pc, #56]	@ (8005170 <aes_cipher+0x80>)
 8005136:	6879      	ldr	r1, [r7, #4]
 8005138:	4618      	mov	r0, r3
 800513a:	f7ff fe72 	bl	8004e22 <os_wlsbf4>
	os_copyMem(AESkey, key, 16);
 800513e:	2210      	movs	r2, #16
 8005140:	68f9      	ldr	r1, [r7, #12]
 8005142:	480c      	ldr	r0, [pc, #48]	@ (8005174 <aes_cipher+0x84>)
 8005144:	f009 fe2b 	bl	800ed9e <memcpy>
	os_aes(AES_CTR, payload, len);
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	b29b      	uxth	r3, r3
 800514c:	461a      	mov	r2, r3
 800514e:	69b9      	ldr	r1, [r7, #24]
 8005150:	2004      	movs	r0, #4
 8005152:	f7fb ffc1 	bl	80010d8 <os_aes>
 8005156:	e000      	b.n	800515a <aes_cipher+0x6a>
		return;
 8005158:	bf00      	nop
}
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	20000144 	.word	0x20000144
 8005164:	20000153 	.word	0x20000153
 8005168:	20000149 	.word	0x20000149
 800516c:	2000014a 	.word	0x2000014a
 8005170:	2000014e 	.word	0x2000014e
 8005174:	20000154 	.word	0x20000154

08005178 <aes_sessKeys>:

static void aes_sessKeys(u2_t devnonce, xref2cu1_t artnonce, xref2u1_t nwkkey,
		xref2u1_t artkey)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	60b9      	str	r1, [r7, #8]
 8005180:	607a      	str	r2, [r7, #4]
 8005182:	603b      	str	r3, [r7, #0]
 8005184:	4603      	mov	r3, r0
 8005186:	81fb      	strh	r3, [r7, #14]
	os_clearMem(nwkkey, 16);
 8005188:	2210      	movs	r2, #16
 800518a:	2100      	movs	r1, #0
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f009 fdd1 	bl	800ed34 <memset>
	nwkkey[0] = 0x01;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	701a      	strb	r2, [r3, #0]
	os_copyMem(nwkkey + 1, artnonce, LEN_ARTNONCE + LEN_NETID);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	3301      	adds	r3, #1
 800519c:	2206      	movs	r2, #6
 800519e:	68b9      	ldr	r1, [r7, #8]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f009 fdfc 	bl	800ed9e <memcpy>
	os_wlsbf2(nwkkey + 1 + LEN_ARTNONCE + LEN_NETID, devnonce);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	3307      	adds	r3, #7
 80051aa:	89fa      	ldrh	r2, [r7, #14]
 80051ac:	4611      	mov	r1, r2
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7ff fe20 	bl	8004df4 <os_wlsbf2>
	os_copyMem(artkey, nwkkey, 16);
 80051b4:	2210      	movs	r2, #16
 80051b6:	6879      	ldr	r1, [r7, #4]
 80051b8:	6838      	ldr	r0, [r7, #0]
 80051ba:	f009 fdf0 	bl	800ed9e <memcpy>
	artkey[0] = 0x02;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2202      	movs	r2, #2
 80051c2:	701a      	strb	r2, [r3, #0]

	os_getDevKey(AESkey);
 80051c4:	4809      	ldr	r0, [pc, #36]	@ (80051ec <aes_sessKeys+0x74>)
 80051c6:	f002 fd7d 	bl	8007cc4 <os_getDevKey>
	os_aes(AES_ENC, nwkkey, 16);
 80051ca:	2210      	movs	r2, #16
 80051cc:	6879      	ldr	r1, [r7, #4]
 80051ce:	2000      	movs	r0, #0
 80051d0:	f7fb ff82 	bl	80010d8 <os_aes>
	os_getDevKey(AESkey);
 80051d4:	4805      	ldr	r0, [pc, #20]	@ (80051ec <aes_sessKeys+0x74>)
 80051d6:	f002 fd75 	bl	8007cc4 <os_getDevKey>
	os_aes(AES_ENC, artkey, 16);
 80051da:	2210      	movs	r2, #16
 80051dc:	6839      	ldr	r1, [r7, #0]
 80051de:	2000      	movs	r0, #0
 80051e0:	f7fb ff7a 	bl	80010d8 <os_aes>
}
 80051e4:	bf00      	nop
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	20000154 	.word	0x20000154

080051f0 <getSensitivity>:
		{ 141 - 138, 141 - 135, 141 - 132 },  // SF11
		{ 141 - 141, 141 - 138, 141 - 135 }   // SF12
};

int getSensitivity(rps_t rps)
{
 80051f0:	b590      	push	{r4, r7, lr}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	4603      	mov	r3, r0
 80051f8:	80fb      	strh	r3, [r7, #6]
	return -141 + SENSITIVITY[getSf(rps)][getBw(rps)];
 80051fa:	88fb      	ldrh	r3, [r7, #6]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7ff fca3 	bl	8004b48 <getSf>
 8005202:	4603      	mov	r3, r0
 8005204:	461c      	mov	r4, r3
 8005206:	88fb      	ldrh	r3, [r7, #6]
 8005208:	4618      	mov	r0, r3
 800520a:	f7ff fcad 	bl	8004b68 <getBw>
 800520e:	4603      	mov	r3, r0
 8005210:	4619      	mov	r1, r3
 8005212:	4a06      	ldr	r2, [pc, #24]	@ (800522c <getSensitivity+0x3c>)
 8005214:	4623      	mov	r3, r4
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	4423      	add	r3, r4
 800521a:	4413      	add	r3, r2
 800521c:	440b      	add	r3, r1
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	3b8d      	subs	r3, #141	@ 0x8d
}
 8005222:	4618      	mov	r0, r3
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	bd90      	pop	{r4, r7, pc}
 800522a:	bf00      	nop
 800522c:	0801132c 	.word	0x0801132c

08005230 <calcAirTime>:

ostime_t calcAirTime(rps_t rps, u1_t plen)
{
 8005230:	b590      	push	{r4, r7, lr}
 8005232:	b087      	sub	sp, #28
 8005234:	af00      	add	r7, sp, #0
 8005236:	4603      	mov	r3, r0
 8005238:	460a      	mov	r2, r1
 800523a:	80fb      	strh	r3, [r7, #6]
 800523c:	4613      	mov	r3, r2
 800523e:	717b      	strb	r3, [r7, #5]
	u1_t bw = getBw(rps);  // 0,1,2 = 125,250,500kHz
 8005240:	88fb      	ldrh	r3, [r7, #6]
 8005242:	4618      	mov	r0, r3
 8005244:	f7ff fc90 	bl	8004b68 <getBw>
 8005248:	4603      	mov	r3, r0
 800524a:	72fb      	strb	r3, [r7, #11]
	u1_t sf = getSf(rps);  // 0=FSK, 1..6 = SF7..12
 800524c:	88fb      	ldrh	r3, [r7, #6]
 800524e:	4618      	mov	r0, r3
 8005250:	f7ff fc7a 	bl	8004b48 <getSf>
 8005254:	4603      	mov	r3, r0
 8005256:	72bb      	strb	r3, [r7, #10]
	if (sf == FSK) {
 8005258:	7abb      	ldrb	r3, [r7, #10]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10c      	bne.n	8005278 <calcAirTime+0x48>
		return (plen + /*preamble*/5 + /*syncword*/3 + /*len*/1 + /*crc*/2)
 800525e:	797b      	ldrb	r3, [r7, #5]
 8005260:	330b      	adds	r3, #11
				* /*bits/byte*/8 * (s4_t) OSTICKS_PER_SEC / /*kbit/s*/50000;
 8005262:	f44f 327a 	mov.w	r2, #256000	@ 0x3e800
 8005266:	fb02 f303 	mul.w	r3, r2, r3
 800526a:	4a3c      	ldr	r2, [pc, #240]	@ (800535c <calcAirTime+0x12c>)
 800526c:	fb82 1203 	smull	r1, r2, r2, r3
 8005270:	1312      	asrs	r2, r2, #12
 8005272:	17db      	asrs	r3, r3, #31
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	e06d      	b.n	8005354 <calcAirTime+0x124>
	}
	u1_t sfx = 4 * (sf + (7 - SF7));
 8005278:	7abb      	ldrb	r3, [r7, #10]
 800527a:	3306      	adds	r3, #6
 800527c:	b2db      	uxtb	r3, r3
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	75fb      	strb	r3, [r7, #23]
	u1_t q = sfx - (sf >= SF11 ? 8 : 0);
 8005282:	7abb      	ldrb	r3, [r7, #10]
 8005284:	2b04      	cmp	r3, #4
 8005286:	d901      	bls.n	800528c <calcAirTime+0x5c>
 8005288:	2308      	movs	r3, #8
 800528a:	e000      	b.n	800528e <calcAirTime+0x5e>
 800528c:	2300      	movs	r3, #0
 800528e:	7dfa      	ldrb	r2, [r7, #23]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	727b      	strb	r3, [r7, #9]
	int tmp = 8 * plen - sfx + 28 + (getNocrc(rps) ? 0 : 16)
 8005294:	797b      	ldrb	r3, [r7, #5]
 8005296:	00da      	lsls	r2, r3, #3
 8005298:	7dfb      	ldrb	r3, [r7, #23]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	f103 041c 	add.w	r4, r3, #28
 80052a0:	88fb      	ldrh	r3, [r7, #6]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7ff fc9d 	bl	8004be2 <getNocrc>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <calcAirTime+0x82>
 80052ae:	2300      	movs	r3, #0
 80052b0:	e000      	b.n	80052b4 <calcAirTime+0x84>
 80052b2:	2310      	movs	r3, #16
 80052b4:	441c      	add	r4, r3
			- (getIh(rps) ? 20 : 0);
 80052b6:	88fb      	ldrh	r3, [r7, #6]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7ff fcb9 	bl	8004c30 <getIh>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <calcAirTime+0x98>
 80052c4:	2314      	movs	r3, #20
 80052c6:	e000      	b.n	80052ca <calcAirTime+0x9a>
 80052c8:	2300      	movs	r3, #0
	int tmp = 8 * plen - sfx + 28 + (getNocrc(rps) ? 0 : 16)
 80052ca:	1ae3      	subs	r3, r4, r3
 80052cc:	613b      	str	r3, [r7, #16]
	if (tmp > 0) {
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	dd15      	ble.n	8005300 <calcAirTime+0xd0>
		tmp = (tmp + q - 1) / q;
 80052d4:	7a7a      	ldrb	r2, [r7, #9]
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	4413      	add	r3, r2
 80052da:	1e5a      	subs	r2, r3, #1
 80052dc:	7a7b      	ldrb	r3, [r7, #9]
 80052de:	fb92 f3f3 	sdiv	r3, r2, r3
 80052e2:	613b      	str	r3, [r7, #16]
		tmp *= getCr(rps) + 5;
 80052e4:	88fb      	ldrh	r3, [r7, #6]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7ff fc50 	bl	8004b8c <getCr>
 80052ec:	4603      	mov	r3, r0
 80052ee:	1d5a      	adds	r2, r3, #5
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	fb02 f303 	mul.w	r3, r2, r3
 80052f6:	613b      	str	r3, [r7, #16]
		tmp += 8;
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	3308      	adds	r3, #8
 80052fc:	613b      	str	r3, [r7, #16]
 80052fe:	e001      	b.n	8005304 <calcAirTime+0xd4>
	} else {
		tmp = 8;
 8005300:	2308      	movs	r3, #8
 8005302:	613b      	str	r3, [r7, #16]
	}
	tmp = (tmp << 2) + /*preamble*/49 /* 4 * (8 + 4.25) */;
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	3331      	adds	r3, #49	@ 0x31
 800530a:	613b      	str	r3, [r7, #16]
	//
	// osticks =  tmp * OSTICKS_PER_SEC * 1<<sf / bw
	//
	// 3 => counter reduced divisor 125000/8 => 15625
	// 2 => counter 2 shift on tmp
	sfx = sf + (7 - SF7) - (3 + 2) - bw;
 800530c:	7aba      	ldrb	r2, [r7, #10]
 800530e:	7afb      	ldrb	r3, [r7, #11]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	b2db      	uxtb	r3, r3
 8005314:	3301      	adds	r3, #1
 8005316:	75fb      	strb	r3, [r7, #23]
	int div = 15625;
 8005318:	f643 5309 	movw	r3, #15625	@ 0x3d09
 800531c:	60fb      	str	r3, [r7, #12]
	if (sfx > 4) {
 800531e:	7dfb      	ldrb	r3, [r7, #23]
 8005320:	2b04      	cmp	r3, #4
 8005322:	d907      	bls.n	8005334 <calcAirTime+0x104>
		// prevent 32bit signed int overflow in last step
		div >>= sfx - 4;
 8005324:	7dfb      	ldrb	r3, [r7, #23]
 8005326:	3b04      	subs	r3, #4
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	fa42 f303 	asr.w	r3, r2, r3
 800532e:	60fb      	str	r3, [r7, #12]
		sfx = 4;
 8005330:	2304      	movs	r3, #4
 8005332:	75fb      	strb	r3, [r7, #23]
	}
	// Need 32bit arithmetic for this last step
	return (((ostime_t) tmp << sfx) * OSTICKS_PER_SEC + div / 2) / div;
 8005334:	7dfb      	ldrb	r3, [r7, #23]
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	fa02 f303 	lsl.w	r3, r2, r3
 800533c:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8005340:	fb03 f202 	mul.w	r2, r3, r2
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	0fd9      	lsrs	r1, r3, #31
 8005348:	440b      	add	r3, r1
 800534a:	105b      	asrs	r3, r3, #1
 800534c:	441a      	add	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8005354:	4618      	mov	r0, r3
 8005356:	371c      	adds	r7, #28
 8005358:	46bd      	mov	sp, r7
 800535a:	bd90      	pop	{r4, r7, pc}
 800535c:	14f8b589 	.word	0x14f8b589

08005360 <calcRxWindow>:
    us2osticksRound(128<<0)   // ------    DR_SF7CR
#endif
		};

static ostime_t calcRxWindow(u1_t secs, dr_t dr)
{
 8005360:	b480      	push	{r7}
 8005362:	b087      	sub	sp, #28
 8005364:	af00      	add	r7, sp, #0
 8005366:	4603      	mov	r3, r0
 8005368:	460a      	mov	r2, r1
 800536a:	71fb      	strb	r3, [r7, #7]
 800536c:	4613      	mov	r3, r2
 800536e:	71bb      	strb	r3, [r7, #6]
	ostime_t rxoff, err;
	if (secs == 0) {
 8005370:	79fb      	ldrb	r3, [r7, #7]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d108      	bne.n	8005388 <calcRxWindow+0x28>
		// aka 128 secs (next becaon)
		rxoff = LMIC.drift;
 8005376:	4b22      	ldr	r3, [pc, #136]	@ (8005400 <calcRxWindow+0xa0>)
 8005378:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 800537c:	617b      	str	r3, [r7, #20]
		err = LMIC.lastDriftDiff;
 800537e:	4b20      	ldr	r3, [pc, #128]	@ (8005400 <calcRxWindow+0xa0>)
 8005380:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 8005384:	613b      	str	r3, [r7, #16]
 8005386:	e011      	b.n	80053ac <calcRxWindow+0x4c>
	} else {
		// scheduled RX window within secs into current beacon period
		rxoff = (LMIC.drift * (ostime_t) secs) >> BCN_INTV_exp;
 8005388:	4b1d      	ldr	r3, [pc, #116]	@ (8005400 <calcRxWindow+0xa0>)
 800538a:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 800538e:	461a      	mov	r2, r3
 8005390:	79fb      	ldrb	r3, [r7, #7]
 8005392:	fb02 f303 	mul.w	r3, r2, r3
 8005396:	11db      	asrs	r3, r3, #7
 8005398:	617b      	str	r3, [r7, #20]
		err = (LMIC.lastDriftDiff * (ostime_t) secs) >> BCN_INTV_exp;
 800539a:	4b19      	ldr	r3, [pc, #100]	@ (8005400 <calcRxWindow+0xa0>)
 800539c:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 80053a0:	461a      	mov	r2, r3
 80053a2:	79fb      	ldrb	r3, [r7, #7]
 80053a4:	fb02 f303 	mul.w	r3, r2, r3
 80053a8:	11db      	asrs	r3, r3, #7
 80053aa:	613b      	str	r3, [r7, #16]
	}
	u1_t rxsyms = MINRX_SYMS;
 80053ac:	2305      	movs	r3, #5
 80053ae:	73fb      	strb	r3, [r7, #15]
	err += (ostime_t) LMIC.maxDriftDiff * LMIC.missedBcns;
 80053b0:	4b13      	ldr	r3, [pc, #76]	@ (8005400 <calcRxWindow+0xa0>)
 80053b2:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 80053b6:	461a      	mov	r2, r3
 80053b8:	4b11      	ldr	r3, [pc, #68]	@ (8005400 <calcRxWindow+0xa0>)
 80053ba:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 80053be:	fb02 f303 	mul.w	r3, r2, r3
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	4413      	add	r3, r2
 80053c6:	613b      	str	r3, [r7, #16]
	LMIC.rxsyms = MINRX_SYMS + (err / dr2hsym(dr));
 80053c8:	79bb      	ldrb	r3, [r7, #6]
 80053ca:	4a0e      	ldr	r2, [pc, #56]	@ (8005404 <calcRxWindow+0xa4>)
 80053cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	3305      	adds	r3, #5
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	4b08      	ldr	r3, [pc, #32]	@ (8005400 <calcRxWindow+0xa0>)
 80053de:	741a      	strb	r2, [r3, #16]

	return (rxsyms - PAMBL_SYMS) * dr2hsym(dr) + rxoff;
 80053e0:	7bfb      	ldrb	r3, [r7, #15]
 80053e2:	3b08      	subs	r3, #8
 80053e4:	79ba      	ldrb	r2, [r7, #6]
 80053e6:	4907      	ldr	r1, [pc, #28]	@ (8005404 <calcRxWindow+0xa4>)
 80053e8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80053ec:	fb03 f202 	mul.w	r2, r3, r2
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	4413      	add	r3, r2
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	371c      	adds	r7, #28
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	2000033c 	.word	0x2000033c
 8005404:	08011350 	.word	0x08011350

08005408 <calcBcnRxWindowFromMillis>:

// Setup beacon RX parameters assuming we have an error of ms (aka +/-(ms/2))
static void calcBcnRxWindowFromMillis(u1_t ms, bit_t ini)
{
 8005408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800540c:	b087      	sub	sp, #28
 800540e:	af00      	add	r7, sp, #0
 8005410:	4606      	mov	r6, r0
 8005412:	4608      	mov	r0, r1
 8005414:	4631      	mov	r1, r6
 8005416:	73f9      	strb	r1, [r7, #15]
 8005418:	4601      	mov	r1, r0
 800541a:	73b9      	strb	r1, [r7, #14]
	if (ini) {
 800541c:	7bb9      	ldrb	r1, [r7, #14]
 800541e:	2900      	cmp	r1, #0
 8005420:	d014      	beq.n	800544c <calcBcnRxWindowFromMillis+0x44>
		LMIC.drift = 0;
 8005422:	493b      	ldr	r1, [pc, #236]	@ (8005510 <calcBcnRxWindowFromMillis+0x108>)
 8005424:	2000      	movs	r0, #0
 8005426:	f8a1 00b4 	strh.w	r0, [r1, #180]	@ 0xb4
		LMIC.maxDriftDiff = 0;
 800542a:	4939      	ldr	r1, [pc, #228]	@ (8005510 <calcBcnRxWindowFromMillis+0x108>)
 800542c:	2000      	movs	r0, #0
 800542e:	f8a1 00b8 	strh.w	r0, [r1, #184]	@ 0xb8
		LMIC.missedBcns = 0;
 8005432:	4937      	ldr	r1, [pc, #220]	@ (8005510 <calcBcnRxWindowFromMillis+0x108>)
 8005434:	2000      	movs	r0, #0
 8005436:	f881 0131 	strb.w	r0, [r1, #305]	@ 0x131
		LMIC.bcninfo.flags |= BCN_NODRIFT | BCN_NODDIFF;
 800543a:	4935      	ldr	r1, [pc, #212]	@ (8005510 <calcBcnRxWindowFromMillis+0x108>)
 800543c:	f891 1196 	ldrb.w	r1, [r1, #406]	@ 0x196
 8005440:	f041 010c 	orr.w	r1, r1, #12
 8005444:	b2c8      	uxtb	r0, r1
 8005446:	4932      	ldr	r1, [pc, #200]	@ (8005510 <calcBcnRxWindowFromMillis+0x108>)
 8005448:	f881 0196 	strb.w	r0, [r1, #406]	@ 0x196
	}
	ostime_t hsym = dr2hsym(DR_BCN);
 800544c:	2142      	movs	r1, #66	@ 0x42
 800544e:	6179      	str	r1, [r7, #20]
	LMIC.bcnRxsyms = MINRX_SYMS + ms2osticksCeil(ms) / hsym;
 8005450:	7bf9      	ldrb	r1, [r7, #15]
 8005452:	2000      	movs	r0, #0
 8005454:	460c      	mov	r4, r1
 8005456:	4605      	mov	r5, r0
 8005458:	4620      	mov	r0, r4
 800545a:	4629      	mov	r1, r5
 800545c:	f04f 0a00 	mov.w	sl, #0
 8005460:	f04f 0b00 	mov.w	fp, #0
 8005464:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8005468:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 800546c:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8005470:	4650      	mov	r0, sl
 8005472:	4659      	mov	r1, fp
 8005474:	1b02      	subs	r2, r0, r4
 8005476:	eb61 0305 	sbc.w	r3, r1, r5
 800547a:	f04f 0000 	mov.w	r0, #0
 800547e:	f04f 0100 	mov.w	r1, #0
 8005482:	0099      	lsls	r1, r3, #2
 8005484:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8005488:	0090      	lsls	r0, r2, #2
 800548a:	4602      	mov	r2, r0
 800548c:	460b      	mov	r3, r1
 800548e:	eb12 0804 	adds.w	r8, r2, r4
 8005492:	eb43 0905 	adc.w	r9, r3, r5
 8005496:	f04f 0200 	mov.w	r2, #0
 800549a:	f04f 0300 	mov.w	r3, #0
 800549e:	ea4f 2309 	mov.w	r3, r9, lsl #8
 80054a2:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 80054a6:	ea4f 2208 	mov.w	r2, r8, lsl #8
 80054aa:	4690      	mov	r8, r2
 80054ac:	4699      	mov	r9, r3
 80054ae:	4642      	mov	r2, r8
 80054b0:	464b      	mov	r3, r9
 80054b2:	f240 31e7 	movw	r1, #999	@ 0x3e7
 80054b6:	1851      	adds	r1, r2, r1
 80054b8:	6039      	str	r1, [r7, #0]
 80054ba:	f143 0300 	adc.w	r3, r3, #0
 80054be:	607b      	str	r3, [r7, #4]
 80054c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80054c4:	f04f 0300 	mov.w	r3, #0
 80054c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054cc:	f7fb faee 	bl	8000aac <__aeabi_ldivmod>
 80054d0:	4602      	mov	r2, r0
 80054d2:	460b      	mov	r3, r1
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	3305      	adds	r3, #5
 80054de:	b2da      	uxtb	r2, r3
 80054e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005510 <calcBcnRxWindowFromMillis+0x108>)
 80054e2:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
	LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks
 80054e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005510 <calcBcnRxWindowFromMillis+0x108>)
 80054e8:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80054ec:	f503 127a 	add.w	r2, r3, #4096000	@ 0x3e8000
			- (LMIC.bcnRxsyms - PAMBL_SYMS) * hsym;
 80054f0:	4b07      	ldr	r3, [pc, #28]	@ (8005510 <calcBcnRxWindowFromMillis+0x108>)
 80054f2:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 80054f6:	3b08      	subs	r3, #8
 80054f8:	6979      	ldr	r1, [r7, #20]
 80054fa:	fb01 f303 	mul.w	r3, r1, r3
 80054fe:	1ad3      	subs	r3, r2, r3
	LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks
 8005500:	4a03      	ldr	r2, [pc, #12]	@ (8005510 <calcBcnRxWindowFromMillis+0x108>)
 8005502:	f8c2 318c 	str.w	r3, [r2, #396]	@ 0x18c
}
 8005506:	bf00      	nop
 8005508:	371c      	adds	r7, #28
 800550a:	46bd      	mov	sp, r7
 800550c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005510:	2000033c 	.word	0x2000033c

08005514 <rxschedInit>:

// Setup scheduled RX window (ping/multicast slot)
static void rxschedInit(xref2rxsched_t rxsched)
{
 8005514:	b590      	push	{r4, r7, lr}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
	os_clearMem(AESkey, 16);
 800551c:	2210      	movs	r2, #16
 800551e:	2100      	movs	r1, #0
 8005520:	482e      	ldr	r0, [pc, #184]	@ (80055dc <rxschedInit+0xc8>)
 8005522:	f009 fc07 	bl	800ed34 <memset>
	os_clearMem(LMIC.frame + 8, 8);
 8005526:	4b2e      	ldr	r3, [pc, #184]	@ (80055e0 <rxschedInit+0xcc>)
 8005528:	2208      	movs	r2, #8
 800552a:	2100      	movs	r1, #0
 800552c:	4618      	mov	r0, r3
 800552e:	f009 fc01 	bl	800ed34 <memset>
	os_wlsbf4(LMIC.frame, LMIC.bcninfo.time);
 8005532:	4b2c      	ldr	r3, [pc, #176]	@ (80055e4 <rxschedInit+0xd0>)
 8005534:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8005538:	4619      	mov	r1, r3
 800553a:	482b      	ldr	r0, [pc, #172]	@ (80055e8 <rxschedInit+0xd4>)
 800553c:	f7ff fc71 	bl	8004e22 <os_wlsbf4>
	os_wlsbf4(LMIC.frame + 4, LMIC.devaddr);
 8005540:	4a2a      	ldr	r2, [pc, #168]	@ (80055ec <rxschedInit+0xd8>)
 8005542:	4b28      	ldr	r3, [pc, #160]	@ (80055e4 <rxschedInit+0xd0>)
 8005544:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005548:	4619      	mov	r1, r3
 800554a:	4610      	mov	r0, r2
 800554c:	f7ff fc69 	bl	8004e22 <os_wlsbf4>
	os_aes(AES_ENC, LMIC.frame, 16);
 8005550:	2210      	movs	r2, #16
 8005552:	4925      	ldr	r1, [pc, #148]	@ (80055e8 <rxschedInit+0xd4>)
 8005554:	2000      	movs	r0, #0
 8005556:	f7fb fdbf 	bl	80010d8 <os_aes>
	u1_t intvExp = rxsched->intvExp;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	785b      	ldrb	r3, [r3, #1]
 800555e:	73fb      	strb	r3, [r7, #15]
	ostime_t off = os_rlsbf2(LMIC.frame) & (0x0FFF >> (7 - intvExp)); // random offset (slot units)
 8005560:	4821      	ldr	r0, [pc, #132]	@ (80055e8 <rxschedInit+0xd4>)
 8005562:	f7ff fbf8 	bl	8004d56 <os_rlsbf2>
 8005566:	4603      	mov	r3, r0
 8005568:	4619      	mov	r1, r3
 800556a:	7bfb      	ldrb	r3, [r7, #15]
 800556c:	f1c3 0307 	rsb	r3, r3, #7
 8005570:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8005574:	fa42 f303 	asr.w	r3, r2, r3
 8005578:	400b      	ands	r3, r1
 800557a:	60bb      	str	r3, [r7, #8]
	rxsched->rxbase = (LMIC.bcninfo.txtime +
 800557c:	4b19      	ldr	r3, [pc, #100]	@ (80055e4 <rxschedInit+0xd0>)
 800557e:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
	BCN_RESERVE_osticks + ms2osticks(BCN_SLOT_SPAN_ms * off)); // random offset osticks
 8005582:	4619      	mov	r1, r3
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	4613      	mov	r3, r2
 8005588:	011b      	lsls	r3, r3, #4
 800558a:	1a9b      	subs	r3, r3, r2
 800558c:	019b      	lsls	r3, r3, #6
 800558e:	440b      	add	r3, r1
 8005590:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 8005594:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005598:	461a      	mov	r2, r3
	rxsched->rxbase = (LMIC.bcninfo.txtime +
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	605a      	str	r2, [r3, #4]
	rxsched->slot = 0;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	709a      	strb	r2, [r3, #2]
	rxsched->rxtime = rxsched->rxbase
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685c      	ldr	r4, [r3, #4]
			- calcRxWindow(/*secs BCN_RESERVE*/2 + (1 << intvExp), rxsched->dr);
 80055a8:	7bfb      	ldrb	r3, [r7, #15]
 80055aa:	2201      	movs	r2, #1
 80055ac:	fa02 f303 	lsl.w	r3, r2, r3
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	3302      	adds	r3, #2
 80055b4:	b2da      	uxtb	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	4619      	mov	r1, r3
 80055bc:	4610      	mov	r0, r2
 80055be:	f7ff fecf 	bl	8005360 <calcRxWindow>
 80055c2:	4603      	mov	r3, r0
 80055c4:	1ae2      	subs	r2, r4, r3
	rxsched->rxtime = rxsched->rxbase
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	609a      	str	r2, [r3, #8]
	rxsched->rxsyms = LMIC.rxsyms;
 80055ca:	4b06      	ldr	r3, [pc, #24]	@ (80055e4 <rxschedInit+0xd0>)
 80055cc:	7c1a      	ldrb	r2, [r3, #16]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	70da      	strb	r2, [r3, #3]
}
 80055d2:	bf00      	nop
 80055d4:	3714      	adds	r7, #20
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd90      	pop	{r4, r7, pc}
 80055da:	bf00      	nop
 80055dc:	20000154 	.word	0x20000154
 80055e0:	2000048c 	.word	0x2000048c
 80055e4:	2000033c 	.word	0x2000033c
 80055e8:	20000484 	.word	0x20000484
 80055ec:	20000488 	.word	0x20000488

080055f0 <rxschedNext>:

static bit_t rxschedNext(xref2rxsched_t rxsched, ostime_t cando)
{
 80055f0:	b590      	push	{r4, r7, lr}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
	again: if (rxsched->rxtime - cando >= 0)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	689a      	ldr	r2, [r3, #8]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	db01      	blt.n	800560a <rxschedNext+0x1a>
		return 1;
 8005606:	2301      	movs	r3, #1
 8005608:	e03a      	b.n	8005680 <rxschedNext+0x90>
	u1_t slot;
	if ((slot = rxsched->slot) >= 128)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	789b      	ldrb	r3, [r3, #2]
 800560e:	73fb      	strb	r3, [r7, #15]
 8005610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005614:	2b00      	cmp	r3, #0
 8005616:	da01      	bge.n	800561c <rxschedNext+0x2c>
		return 0;
 8005618:	2300      	movs	r3, #0
 800561a:	e031      	b.n	8005680 <rxschedNext+0x90>
	u1_t intv = 1 << rxsched->intvExp;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	785b      	ldrb	r3, [r3, #1]
 8005620:	461a      	mov	r2, r3
 8005622:	2301      	movs	r3, #1
 8005624:	4093      	lsls	r3, r2
 8005626:	73bb      	strb	r3, [r7, #14]
	if ((rxsched->slot = (slot += (intv))) >= 128)
 8005628:	7bfa      	ldrb	r2, [r7, #15]
 800562a:	7bbb      	ldrb	r3, [r7, #14]
 800562c:	4413      	add	r3, r2
 800562e:	73fb      	strb	r3, [r7, #15]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	7bfa      	ldrb	r2, [r7, #15]
 8005634:	709a      	strb	r2, [r3, #2]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	789b      	ldrb	r3, [r3, #2]
 800563a:	b25b      	sxtb	r3, r3
 800563c:	2b00      	cmp	r3, #0
 800563e:	da01      	bge.n	8005644 <rxschedNext+0x54>
		return 0;
 8005640:	2300      	movs	r3, #0
 8005642:	e01d      	b.n	8005680 <rxschedNext+0x90>
	rxsched->rxtime = rxsched->rxbase
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6859      	ldr	r1, [r3, #4]
			+ ((BCN_WINDOW_osticks * (ostime_t) slot) >> BCN_INTV_exp)
 8005648:	7bfa      	ldrb	r2, [r7, #15]
 800564a:	4613      	mov	r3, r2
 800564c:	011b      	lsls	r3, r3, #4
 800564e:	1a9b      	subs	r3, r3, r2
 8005650:	049b      	lsls	r3, r3, #18
 8005652:	11db      	asrs	r3, r3, #7
 8005654:	18cc      	adds	r4, r1, r3
			- calcRxWindow(/*secs BCN_RESERVE*/2 + slot + intv, rxsched->dr);
 8005656:	7bfa      	ldrb	r2, [r7, #15]
 8005658:	7bbb      	ldrb	r3, [r7, #14]
 800565a:	4413      	add	r3, r2
 800565c:	b2db      	uxtb	r3, r3
 800565e:	3302      	adds	r3, #2
 8005660:	b2da      	uxtb	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	4619      	mov	r1, r3
 8005668:	4610      	mov	r0, r2
 800566a:	f7ff fe79 	bl	8005360 <calcRxWindow>
 800566e:	4603      	mov	r3, r0
 8005670:	1ae2      	subs	r2, r4, r3
	rxsched->rxtime = rxsched->rxbase
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	609a      	str	r2, [r3, #8]
	rxsched->rxsyms = LMIC.rxsyms;
 8005676:	4b04      	ldr	r3, [pc, #16]	@ (8005688 <rxschedNext+0x98>)
 8005678:	7c1a      	ldrb	r2, [r3, #16]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	70da      	strb	r2, [r3, #3]
	goto again;
 800567e:	e7bc      	b.n	80055fa <rxschedNext+0xa>
}
 8005680:	4618      	mov	r0, r3
 8005682:	3714      	adds	r7, #20
 8005684:	46bd      	mov	sp, r7
 8005686:	bd90      	pop	{r4, r7, pc}
 8005688:	2000033c 	.word	0x2000033c

0800568c <rndDelay>:

static ostime_t rndDelay(u1_t secSpan)
{
 800568c:	b590      	push	{r4, r7, lr}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	4603      	mov	r3, r0
 8005694:	71fb      	strb	r3, [r7, #7]
	u2_t r = os_getRndU2();
 8005696:	f003 fab9 	bl	8008c0c <radio_rand1>
 800569a:	4603      	mov	r3, r0
 800569c:	021b      	lsls	r3, r3, #8
 800569e:	b21c      	sxth	r4, r3
 80056a0:	f003 fab4 	bl	8008c0c <radio_rand1>
 80056a4:	4603      	mov	r3, r0
 80056a6:	b21b      	sxth	r3, r3
 80056a8:	4323      	orrs	r3, r4
 80056aa:	b21b      	sxth	r3, r3
 80056ac:	817b      	strh	r3, [r7, #10]
	ostime_t delay = r;
 80056ae:	897b      	ldrh	r3, [r7, #10]
 80056b0:	60fb      	str	r3, [r7, #12]
	if (delay > OSTICKS_PER_SEC)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80056b8:	dd0b      	ble.n	80056d2 <rndDelay+0x46>
		delay = r % (u2_t) OSTICKS_PER_SEC;
 80056ba:	897b      	ldrh	r3, [r7, #10]
 80056bc:	4a11      	ldr	r2, [pc, #68]	@ (8005704 <rndDelay+0x78>)
 80056be:	fba2 1203 	umull	r1, r2, r2, r3
 80056c2:	0ad2      	lsrs	r2, r2, #11
 80056c4:	f44f 41fa 	mov.w	r1, #32000	@ 0x7d00
 80056c8:	fb01 f202 	mul.w	r2, r1, r2
 80056cc:	1a9b      	subs	r3, r3, r2
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	60fb      	str	r3, [r7, #12]
	if (secSpan > 0)
 80056d2:	79fb      	ldrb	r3, [r7, #7]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d010      	beq.n	80056fa <rndDelay+0x6e>
		delay += ((u1_t) r % secSpan) * OSTICKS_PER_SEC;
 80056d8:	897b      	ldrh	r3, [r7, #10]
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	79fa      	ldrb	r2, [r7, #7]
 80056de:	fbb3 f1f2 	udiv	r1, r3, r2
 80056e2:	fb01 f202 	mul.w	r2, r1, r2
 80056e6:	1a9b      	subs	r3, r3, r2
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	461a      	mov	r2, r3
 80056ec:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80056f0:	fb02 f303 	mul.w	r3, r2, r3
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	4413      	add	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]
	return delay;
 80056fa:	68fb      	ldr	r3, [r7, #12]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3714      	adds	r7, #20
 8005700:	46bd      	mov	sp, r7
 8005702:	bd90      	pop	{r4, r7, pc}
 8005704:	10624dd3 	.word	0x10624dd3

08005708 <txDelay>:

static void txDelay(ostime_t reftime, u1_t secSpan)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	460b      	mov	r3, r1
 8005712:	70fb      	strb	r3, [r7, #3]
	reftime += rndDelay(secSpan);
 8005714:	78fb      	ldrb	r3, [r7, #3]
 8005716:	4618      	mov	r0, r3
 8005718:	f7ff ffb8 	bl	800568c <rndDelay>
 800571c:	4602      	mov	r2, r0
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4413      	add	r3, r2
 8005722:	607b      	str	r3, [r7, #4]
	if (LMIC.globalDutyRate == 0 || (reftime - LMIC.globalDutyAvail) > 0) {
 8005724:	4b0e      	ldr	r3, [pc, #56]	@ (8005760 <txDelay+0x58>)
 8005726:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d006      	beq.n	800573c <txDelay+0x34>
 800572e:	4b0c      	ldr	r3, [pc, #48]	@ (8005760 <txDelay+0x58>)
 8005730:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b00      	cmp	r3, #0
 800573a:	dd0c      	ble.n	8005756 <txDelay+0x4e>
		LMIC.globalDutyAvail = reftime;
 800573c:	4a08      	ldr	r2, [pc, #32]	@ (8005760 <txDelay+0x58>)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
		LMIC.opmode |= OP_RNDTX;
 8005744:	4b06      	ldr	r3, [pc, #24]	@ (8005760 <txDelay+0x58>)
 8005746:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800574a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800574e:	b29a      	uxth	r2, r3
 8005750:	4b03      	ldr	r3, [pc, #12]	@ (8005760 <txDelay+0x58>)
 8005752:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	}
}
 8005756:	bf00      	nop
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	2000033c 	.word	0x2000033c

08005764 <setDrJoin>:

static void setDrJoin(u1_t reason, u1_t dr)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	4603      	mov	r3, r0
 800576c:	460a      	mov	r2, r1
 800576e:	71fb      	strb	r3, [r7, #7]
 8005770:	4613      	mov	r3, r2
 8005772:	71bb      	strb	r3, [r7, #6]
					e_.deveui = MAIN::CDEV->getEui(),
					e_.dr = dr|DR_PAGE,
					e_.txpow = LMIC.adrTxPow,
					e_.prevdr = LMIC.datarate|DR_PAGE,
					e_.prevtxpow = LMIC.adrTxPow));
	LMIC.datarate = dr;
 8005774:	4a04      	ldr	r2, [pc, #16]	@ (8005788 <setDrJoin+0x24>)
 8005776:	79bb      	ldrb	r3, [r7, #6]
 8005778:	f882 30b0 	strb.w	r3, [r2, #176]	@ 0xb0
	DO_DEVDB(LMIC.datarate,datarate);
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr
 8005788:	2000033c 	.word	0x2000033c

0800578c <setDrTxpow>:

static void setDrTxpow(u1_t reason, u1_t dr, s1_t pow)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	4603      	mov	r3, r0
 8005794:	71fb      	strb	r3, [r7, #7]
 8005796:	460b      	mov	r3, r1
 8005798:	71bb      	strb	r3, [r7, #6]
 800579a:	4613      	mov	r3, r2
 800579c:	717b      	strb	r3, [r7, #5]
					e_.dr = dr|DR_PAGE,
					e_.txpow = pow,
					e_.prevdr = LMIC.datarate|DR_PAGE,
					e_.prevtxpow = LMIC.adrTxPow));

	if (pow != KEEP_TXPOW)
 800579e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80057a2:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 80057a6:	d003      	beq.n	80057b0 <setDrTxpow+0x24>
		LMIC.adrTxPow = pow;
 80057a8:	4a0e      	ldr	r2, [pc, #56]	@ (80057e4 <setDrTxpow+0x58>)
 80057aa:	797b      	ldrb	r3, [r7, #5]
 80057ac:	f882 30af 	strb.w	r3, [r2, #175]	@ 0xaf
	if (LMIC.datarate != dr) {
 80057b0:	4b0c      	ldr	r3, [pc, #48]	@ (80057e4 <setDrTxpow+0x58>)
 80057b2:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80057b6:	79ba      	ldrb	r2, [r7, #6]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d00c      	beq.n	80057d6 <setDrTxpow+0x4a>
		LMIC.datarate = dr;
 80057bc:	4a09      	ldr	r2, [pc, #36]	@ (80057e4 <setDrTxpow+0x58>)
 80057be:	79bb      	ldrb	r3, [r7, #6]
 80057c0:	f882 30b0 	strb.w	r3, [r2, #176]	@ 0xb0
		DO_DEVDB(LMIC.datarate,datarate);
		LMIC.opmode |= OP_NEXTCHNL;
 80057c4:	4b07      	ldr	r3, [pc, #28]	@ (80057e4 <setDrTxpow+0x58>)
 80057c6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80057ca:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	4b04      	ldr	r3, [pc, #16]	@ (80057e4 <setDrTxpow+0x58>)
 80057d2:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	}
}
 80057d6:	bf00      	nop
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	2000033c 	.word	0x2000033c

080057e8 <initDefaultChannels>:
		// Default operational frequencies
		EU868_F1 | BAND_CENTI, EU868_F2 | BAND_CENTI, EU868_F3 | BAND_CENTI,
		EU868_F4 | BAND_MILLI, EU868_F5 | BAND_MILLI, EU868_F6 | BAND_DECI };

static void initDefaultChannels(bit_t join)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	4603      	mov	r3, r0
 80057f0:	71fb      	strb	r3, [r7, #7]
	os_clearMem(&LMIC.channelFreq, sizeof(LMIC.channelFreq));
 80057f2:	2240      	movs	r2, #64	@ 0x40
 80057f4:	2100      	movs	r1, #0
 80057f6:	483a      	ldr	r0, [pc, #232]	@ (80058e0 <initDefaultChannels+0xf8>)
 80057f8:	f009 fa9c 	bl	800ed34 <memset>
	os_clearMem(&LMIC.channelDrMap, sizeof(LMIC.channelDrMap));
 80057fc:	2220      	movs	r2, #32
 80057fe:	2100      	movs	r1, #0
 8005800:	4838      	ldr	r0, [pc, #224]	@ (80058e4 <initDefaultChannels+0xfc>)
 8005802:	f009 fa97 	bl	800ed34 <memset>
	os_clearMem(&LMIC.bands, sizeof(LMIC.bands));
 8005806:	2220      	movs	r2, #32
 8005808:	2100      	movs	r1, #0
 800580a:	4837      	ldr	r0, [pc, #220]	@ (80058e8 <initDefaultChannels+0x100>)
 800580c:	f009 fa92 	bl	800ed34 <memset>

	LMIC.channelMap = (1 << NUM_DEFAULT_CHANNELS) - 1;
 8005810:	4b36      	ldr	r3, [pc, #216]	@ (80058ec <initDefaultChannels+0x104>)
 8005812:	223f      	movs	r2, #63	@ 0x3f
 8005814:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	u1_t su = join ? 0 : NUM_DEFAULT_CHANNELS;
 8005818:	79fb      	ldrb	r3, [r7, #7]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <initDefaultChannels+0x3a>
 800581e:	2300      	movs	r3, #0
 8005820:	e000      	b.n	8005824 <initDefaultChannels+0x3c>
 8005822:	2306      	movs	r3, #6
 8005824:	73fb      	strb	r3, [r7, #15]
	for (u1_t fu = 0; fu < NUM_DEFAULT_CHANNELS; fu++, su++) {
 8005826:	2300      	movs	r3, #0
 8005828:	73bb      	strb	r3, [r7, #14]
 800582a:	e014      	b.n	8005856 <initDefaultChannels+0x6e>
		LMIC.channelFreq[fu] = iniChannelFreq[su];
 800582c:	7bfa      	ldrb	r2, [r7, #15]
 800582e:	7bbb      	ldrb	r3, [r7, #14]
 8005830:	492f      	ldr	r1, [pc, #188]	@ (80058f0 <initDefaultChannels+0x108>)
 8005832:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005836:	492d      	ldr	r1, [pc, #180]	@ (80058ec <initDefaultChannels+0x104>)
 8005838:	3310      	adds	r3, #16
 800583a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		LMIC.channelDrMap[fu] = DR_RANGE_MAP(DR_SF12, DR_SF7);
 800583e:	7bbb      	ldrb	r3, [r7, #14]
 8005840:	4a2a      	ldr	r2, [pc, #168]	@ (80058ec <initDefaultChannels+0x104>)
 8005842:	3340      	adds	r3, #64	@ 0x40
 8005844:	213f      	movs	r1, #63	@ 0x3f
 8005846:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (u1_t fu = 0; fu < NUM_DEFAULT_CHANNELS; fu++, su++) {
 800584a:	7bbb      	ldrb	r3, [r7, #14]
 800584c:	3301      	adds	r3, #1
 800584e:	73bb      	strb	r3, [r7, #14]
 8005850:	7bfb      	ldrb	r3, [r7, #15]
 8005852:	3301      	adds	r3, #1
 8005854:	73fb      	strb	r3, [r7, #15]
 8005856:	7bbb      	ldrb	r3, [r7, #14]
 8005858:	2b05      	cmp	r3, #5
 800585a:	d9e7      	bls.n	800582c <initDefaultChannels+0x44>
//    if( !join ) {
//        LMIC.channelDrMap[5] = DR_RANGE_MAP(DR_SF12,DR_SF7);
//        LMIC.channelDrMap[1] = DR_RANGE_MAP(DR_SF12,DR_FSK);
//    }

	LMIC.bands[BAND_MILLI].txcap = 1000;  // 0.1%
 800585c:	4b23      	ldr	r3, [pc, #140]	@ (80058ec <initDefaultChannels+0x104>)
 800585e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005862:	841a      	strh	r2, [r3, #32]
	LMIC.bands[BAND_MILLI].txpow = 14;
 8005864:	4b21      	ldr	r3, [pc, #132]	@ (80058ec <initDefaultChannels+0x104>)
 8005866:	220e      	movs	r2, #14
 8005868:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	LMIC.bands[BAND_MILLI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 800586c:	f003 f9ce 	bl	8008c0c <radio_rand1>
 8005870:	4603      	mov	r3, r0
 8005872:	f003 030f 	and.w	r3, r3, #15
 8005876:	b2da      	uxtb	r2, r3
 8005878:	4b1c      	ldr	r3, [pc, #112]	@ (80058ec <initDefaultChannels+0x104>)
 800587a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	LMIC.bands[BAND_CENTI].txcap = 100;   // 1%
 800587e:	4b1b      	ldr	r3, [pc, #108]	@ (80058ec <initDefaultChannels+0x104>)
 8005880:	2264      	movs	r2, #100	@ 0x64
 8005882:	851a      	strh	r2, [r3, #40]	@ 0x28
	LMIC.bands[BAND_CENTI].txpow = 14;
 8005884:	4b19      	ldr	r3, [pc, #100]	@ (80058ec <initDefaultChannels+0x104>)
 8005886:	220e      	movs	r2, #14
 8005888:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	LMIC.bands[BAND_CENTI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 800588c:	f003 f9be 	bl	8008c0c <radio_rand1>
 8005890:	4603      	mov	r3, r0
 8005892:	f003 030f 	and.w	r3, r3, #15
 8005896:	b2da      	uxtb	r2, r3
 8005898:	4b14      	ldr	r3, [pc, #80]	@ (80058ec <initDefaultChannels+0x104>)
 800589a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	LMIC.bands[BAND_DECI].txcap = 10;    // 10%
 800589e:	4b13      	ldr	r3, [pc, #76]	@ (80058ec <initDefaultChannels+0x104>)
 80058a0:	220a      	movs	r2, #10
 80058a2:	861a      	strh	r2, [r3, #48]	@ 0x30
	LMIC.bands[BAND_DECI].txpow = 27;
 80058a4:	4b11      	ldr	r3, [pc, #68]	@ (80058ec <initDefaultChannels+0x104>)
 80058a6:	221b      	movs	r2, #27
 80058a8:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
	LMIC.bands[BAND_DECI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 80058ac:	f003 f9ae 	bl	8008c0c <radio_rand1>
 80058b0:	4603      	mov	r3, r0
 80058b2:	f003 030f 	and.w	r3, r3, #15
 80058b6:	b2da      	uxtb	r2, r3
 80058b8:	4b0c      	ldr	r3, [pc, #48]	@ (80058ec <initDefaultChannels+0x104>)
 80058ba:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
	LMIC.bands[BAND_MILLI].avail = LMIC.bands[BAND_CENTI].avail =
			LMIC.bands[BAND_DECI].avail = os_getTime();
 80058be:	f002 fc7b 	bl	80081b8 <os_getTime>
 80058c2:	4603      	mov	r3, r0
 80058c4:	4a09      	ldr	r2, [pc, #36]	@ (80058ec <initDefaultChannels+0x104>)
 80058c6:	6353      	str	r3, [r2, #52]	@ 0x34
 80058c8:	4b08      	ldr	r3, [pc, #32]	@ (80058ec <initDefaultChannels+0x104>)
 80058ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
	LMIC.bands[BAND_MILLI].avail = LMIC.bands[BAND_CENTI].avail =
 80058cc:	4a07      	ldr	r2, [pc, #28]	@ (80058ec <initDefaultChannels+0x104>)
 80058ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80058d0:	4b06      	ldr	r3, [pc, #24]	@ (80058ec <initDefaultChannels+0x104>)
 80058d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d4:	4a05      	ldr	r2, [pc, #20]	@ (80058ec <initDefaultChannels+0x104>)
 80058d6:	6253      	str	r3, [r2, #36]	@ 0x24
}
 80058d8:	bf00      	nop
 80058da:	3710      	adds	r7, #16
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	2000037c 	.word	0x2000037c
 80058e4:	200003bc 	.word	0x200003bc
 80058e8:	2000035c 	.word	0x2000035c
 80058ec:	2000033c 	.word	0x2000033c
 80058f0:	08011370 	.word	0x08011370

080058f4 <LMIC_setupChannel>:
	b->lastchnl = os_getRndU1() % MAX_CHANNELS;
	return 1;
}

bit_t LMIC_setupChannel(u1_t chidx, u4_t freq, u2_t drmap, s1_t band)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6039      	str	r1, [r7, #0]
 80058fc:	4611      	mov	r1, r2
 80058fe:	461a      	mov	r2, r3
 8005900:	4603      	mov	r3, r0
 8005902:	71fb      	strb	r3, [r7, #7]
 8005904:	460b      	mov	r3, r1
 8005906:	80bb      	strh	r3, [r7, #4]
 8005908:	4613      	mov	r3, r2
 800590a:	71bb      	strb	r3, [r7, #6]
	if (chidx >= MAX_CHANNELS)
 800590c:	79fb      	ldrb	r3, [r7, #7]
 800590e:	2b0f      	cmp	r3, #15
 8005910:	d901      	bls.n	8005916 <LMIC_setupChannel+0x22>
		return 0;
 8005912:	2300      	movs	r3, #0
 8005914:	e054      	b.n	80059c0 <LMIC_setupChannel+0xcc>
	if (band == -1) {
 8005916:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800591a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800591e:	d121      	bne.n	8005964 <LMIC_setupChannel+0x70>
		if (freq >= 869400000 && freq <= 869650000)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	4a2a      	ldr	r2, [pc, #168]	@ (80059cc <LMIC_setupChannel+0xd8>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d908      	bls.n	800593a <LMIC_setupChannel+0x46>
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	4a29      	ldr	r2, [pc, #164]	@ (80059d0 <LMIC_setupChannel+0xdc>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d804      	bhi.n	800593a <LMIC_setupChannel+0x46>
			freq |= BAND_DECI;   // 10% 27dBm
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	f043 0302 	orr.w	r3, r3, #2
 8005936:	603b      	str	r3, [r7, #0]
 8005938:	e021      	b.n	800597e <LMIC_setupChannel+0x8a>
		else if ((freq >= 868000000 && freq <= 868600000)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	4a25      	ldr	r2, [pc, #148]	@ (80059d4 <LMIC_setupChannel+0xe0>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d903      	bls.n	800594a <LMIC_setupChannel+0x56>
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	4a24      	ldr	r2, [pc, #144]	@ (80059d8 <LMIC_setupChannel+0xe4>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d907      	bls.n	800595a <LMIC_setupChannel+0x66>
				|| (freq >= 869700000 && freq <= 870000000))
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	4a23      	ldr	r2, [pc, #140]	@ (80059dc <LMIC_setupChannel+0xe8>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d315      	bcc.n	800597e <LMIC_setupChannel+0x8a>
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	4a22      	ldr	r2, [pc, #136]	@ (80059e0 <LMIC_setupChannel+0xec>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d811      	bhi.n	800597e <LMIC_setupChannel+0x8a>
			freq |= BAND_CENTI;  // 1% 14dBm 
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	f043 0301 	orr.w	r3, r3, #1
 8005960:	603b      	str	r3, [r7, #0]
 8005962:	e00c      	b.n	800597e <LMIC_setupChannel+0x8a>
		else
			freq |= BAND_MILLI;  // 0.1% 14dBm
	} else {
		if (band > BAND_AUX)
 8005964:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005968:	2b03      	cmp	r3, #3
 800596a:	dd01      	ble.n	8005970 <LMIC_setupChannel+0x7c>
			return 0;
 800596c:	2300      	movs	r3, #0
 800596e:	e027      	b.n	80059c0 <LMIC_setupChannel+0xcc>
		freq = (freq & ~3) | band;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	f023 0203 	bic.w	r2, r3, #3
 8005976:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800597a:	4313      	orrs	r3, r2
 800597c:	603b      	str	r3, [r7, #0]
	}
	LMIC.channelFreq[chidx] = freq;
 800597e:	79fb      	ldrb	r3, [r7, #7]
 8005980:	4918      	ldr	r1, [pc, #96]	@ (80059e4 <LMIC_setupChannel+0xf0>)
 8005982:	3310      	adds	r3, #16
 8005984:	683a      	ldr	r2, [r7, #0]
 8005986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	LMIC.channelDrMap[chidx] =
 800598a:	88bb      	ldrh	r3, [r7, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d001      	beq.n	8005994 <LMIC_setupChannel+0xa0>
 8005990:	88ba      	ldrh	r2, [r7, #4]
 8005992:	e000      	b.n	8005996 <LMIC_setupChannel+0xa2>
 8005994:	223f      	movs	r2, #63	@ 0x3f
 8005996:	79fb      	ldrb	r3, [r7, #7]
 8005998:	4912      	ldr	r1, [pc, #72]	@ (80059e4 <LMIC_setupChannel+0xf0>)
 800599a:	3340      	adds	r3, #64	@ 0x40
 800599c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			drmap == 0 ? DR_RANGE_MAP(DR_SF12, DR_SF7) : drmap;
	LMIC.channelMap |= 1 << chidx;  // enabled right away
 80059a0:	4b10      	ldr	r3, [pc, #64]	@ (80059e4 <LMIC_setupChannel+0xf0>)
 80059a2:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80059a6:	b21a      	sxth	r2, r3
 80059a8:	79fb      	ldrb	r3, [r7, #7]
 80059aa:	2101      	movs	r1, #1
 80059ac:	fa01 f303 	lsl.w	r3, r1, r3
 80059b0:	b21b      	sxth	r3, r3
 80059b2:	4313      	orrs	r3, r2
 80059b4:	b21b      	sxth	r3, r3
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	4b0a      	ldr	r3, [pc, #40]	@ (80059e4 <LMIC_setupChannel+0xf0>)
 80059ba:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	return 1;
 80059be:	2301      	movs	r3, #1
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	33d1fdbf 	.word	0x33d1fdbf
 80059d0:	33d5ce50 	.word	0x33d5ce50
 80059d4:	33bca0ff 	.word	0x33bca0ff
 80059d8:	33c5c8c0 	.word	0x33c5c8c0
 80059dc:	33d691a0 	.word	0x33d691a0
 80059e0:	33db2580 	.word	0x33db2580
 80059e4:	2000033c 	.word	0x2000033c

080059e8 <convFreq>:
	LMIC.channelDrMap[channel] = 0;
	LMIC.channelMap &= ~(1 << channel);
}

static u4_t convFreq(xref2u1_t ptr)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
	u4_t freq = (os_rlsbf4(ptr - 1) >> 8) * 100;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7ff f9c3 	bl	8004d80 <os_rlsbf4>
 80059fa:	4603      	mov	r3, r0
 80059fc:	0a1b      	lsrs	r3, r3, #8
 80059fe:	2264      	movs	r2, #100	@ 0x64
 8005a00:	fb02 f303 	mul.w	r3, r2, r3
 8005a04:	60fb      	str	r3, [r7, #12]
	if (freq < EU868_FREQ_MIN || freq > EU868_FREQ_MAX)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	4a06      	ldr	r2, [pc, #24]	@ (8005a24 <convFreq+0x3c>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d303      	bcc.n	8005a16 <convFreq+0x2e>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	4a05      	ldr	r2, [pc, #20]	@ (8005a28 <convFreq+0x40>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d901      	bls.n	8005a1a <convFreq+0x32>
		freq = 0;
 8005a16:	2300      	movs	r3, #0
 8005a18:	60fb      	str	r3, [r7, #12]
	return freq;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	337055c0 	.word	0x337055c0
 8005a28:	33db2580 	.word	0x33db2580

08005a2c <mapChannels>:

static u1_t mapChannels(u1_t chpage, u2_t chmap)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	4603      	mov	r3, r0
 8005a34:	460a      	mov	r2, r1
 8005a36:	71fb      	strb	r3, [r7, #7]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	80bb      	strh	r3, [r7, #4]
	// Bad page, disable all channel, enable non-existent
	if (chpage != 0 || chmap == 0 || (chmap & ~LMIC.channelMap) != 0)
 8005a3c:	79fb      	ldrb	r3, [r7, #7]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10a      	bne.n	8005a58 <mapChannels+0x2c>
 8005a42:	88bb      	ldrh	r3, [r7, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d007      	beq.n	8005a58 <mapChannels+0x2c>
 8005a48:	88ba      	ldrh	r2, [r7, #4]
 8005a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8005abc <mapChannels+0x90>)
 8005a4c:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8005a50:	43db      	mvns	r3, r3
 8005a52:	4013      	ands	r3, r2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d001      	beq.n	8005a5c <mapChannels+0x30>
		return 0;  // illegal input
 8005a58:	2300      	movs	r3, #0
 8005a5a:	e028      	b.n	8005aae <mapChannels+0x82>
	for (u1_t chnl = 0; chnl < MAX_CHANNELS; chnl++) {
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	73fb      	strb	r3, [r7, #15]
 8005a60:	e01d      	b.n	8005a9e <mapChannels+0x72>
		if ((chmap & (1 << chnl)) != 0 && LMIC.channelFreq[chnl] == 0)
 8005a62:	88ba      	ldrh	r2, [r7, #4]
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
 8005a66:	fa42 f303 	asr.w	r3, r2, r3
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d012      	beq.n	8005a98 <mapChannels+0x6c>
 8005a72:	7bfb      	ldrb	r3, [r7, #15]
 8005a74:	4a11      	ldr	r2, [pc, #68]	@ (8005abc <mapChannels+0x90>)
 8005a76:	3310      	adds	r3, #16
 8005a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10b      	bne.n	8005a98 <mapChannels+0x6c>
			chmap &= ~(1 << chnl); // ignore - channel is not defined
 8005a80:	7bfb      	ldrb	r3, [r7, #15]
 8005a82:	2201      	movs	r2, #1
 8005a84:	fa02 f303 	lsl.w	r3, r2, r3
 8005a88:	b21b      	sxth	r3, r3
 8005a8a:	43db      	mvns	r3, r3
 8005a8c:	b21a      	sxth	r2, r3
 8005a8e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005a92:	4013      	ands	r3, r2
 8005a94:	b21b      	sxth	r3, r3
 8005a96:	80bb      	strh	r3, [r7, #4]
	for (u1_t chnl = 0; chnl < MAX_CHANNELS; chnl++) {
 8005a98:	7bfb      	ldrb	r3, [r7, #15]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	73fb      	strb	r3, [r7, #15]
 8005a9e:	7bfb      	ldrb	r3, [r7, #15]
 8005aa0:	2b0f      	cmp	r3, #15
 8005aa2:	d9de      	bls.n	8005a62 <mapChannels+0x36>
	}
	LMIC.channelMap = chmap;
 8005aa4:	4a05      	ldr	r2, [pc, #20]	@ (8005abc <mapChannels+0x90>)
 8005aa6:	88bb      	ldrh	r3, [r7, #4]
 8005aa8:	f8a2 30a0 	strh.w	r3, [r2, #160]	@ 0xa0
	return 1;
 8005aac:	2301      	movs	r3, #1
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3714      	adds	r7, #20
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	2000033c 	.word	0x2000033c

08005ac0 <updateTx>:

static void updateTx(ostime_t txbeg)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
	u4_t freq = LMIC.channelFreq[LMIC.txChnl];
 8005ac8:	4b21      	ldr	r3, [pc, #132]	@ (8005b50 <updateTx+0x90>)
 8005aca:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8005ace:	4a20      	ldr	r2, [pc, #128]	@ (8005b50 <updateTx+0x90>)
 8005ad0:	3310      	adds	r3, #16
 8005ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ad6:	617b      	str	r3, [r7, #20]
	// Update global/band specific duty cycle stats
	ostime_t airtime = calcAirTime(LMIC.rps, LMIC.dataLen);
 8005ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8005b50 <updateTx+0x90>)
 8005ada:	89db      	ldrh	r3, [r3, #14]
 8005adc:	4a1c      	ldr	r2, [pc, #112]	@ (8005b50 <updateTx+0x90>)
 8005ade:	f892 2147 	ldrb.w	r2, [r2, #327]	@ 0x147
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7ff fba3 	bl	8005230 <calcAirTime>
 8005aea:	6138      	str	r0, [r7, #16]
	// Update channel/global duty cycle stats
	xref2band_t band = &LMIC.bands[freq & 0x3];
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f003 0303 	and.w	r3, r3, #3
 8005af2:	3304      	adds	r3, #4
 8005af4:	00db      	lsls	r3, r3, #3
 8005af6:	4a16      	ldr	r2, [pc, #88]	@ (8005b50 <updateTx+0x90>)
 8005af8:	4413      	add	r3, r2
 8005afa:	60fb      	str	r3, [r7, #12]
	LMIC.freq = freq & ~(u4_t) 3;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	f023 0303 	bic.w	r3, r3, #3
 8005b02:	4a13      	ldr	r2, [pc, #76]	@ (8005b50 <updateTx+0x90>)
 8005b04:	6093      	str	r3, [r2, #8]
	LMIC.txpow = band->txpow;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8005b0c:	4b10      	ldr	r3, [pc, #64]	@ (8005b50 <updateTx+0x90>)
 8005b0e:	749a      	strb	r2, [r3, #18]
	band->avail = txbeg + airtime * band->txcap;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	881b      	ldrh	r3, [r3, #0]
 8005b14:	461a      	mov	r2, r3
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	fb03 f202 	mul.w	r2, r3, r2
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	441a      	add	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	605a      	str	r2, [r3, #4]
	if (LMIC.globalDutyRate != 0)
 8005b24:	4b0a      	ldr	r3, [pc, #40]	@ (8005b50 <updateTx+0x90>)
 8005b26:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00b      	beq.n	8005b46 <updateTx+0x86>
		LMIC.globalDutyAvail = txbeg + (airtime << LMIC.globalDutyRate);
 8005b2e:	4b08      	ldr	r3, [pc, #32]	@ (8005b50 <updateTx+0x90>)
 8005b30:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 8005b34:	461a      	mov	r2, r3
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	fa03 f202 	lsl.w	r2, r3, r2
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4413      	add	r3, r2
 8005b40:	4a03      	ldr	r2, [pc, #12]	@ (8005b50 <updateTx+0x90>)
 8005b42:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
}
 8005b46:	bf00      	nop
 8005b48:	3718      	adds	r7, #24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	2000033c 	.word	0x2000033c

08005b54 <nextTx>:

static ostime_t nextTx(ostime_t now)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b087      	sub	sp, #28
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
	u1_t bmap = 0xF;
 8005b5c:	230f      	movs	r3, #15
 8005b5e:	75fb      	strb	r3, [r7, #23]
	do {
		ostime_t mintime = now + /*10h*/36000 * OSTICKS_PER_SEC;
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	4b48      	ldr	r3, [pc, #288]	@ (8005c84 <nextTx+0x130>)
 8005b64:	4413      	add	r3, r2
 8005b66:	613b      	str	r3, [r7, #16]
		u1_t band = 0;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	73fb      	strb	r3, [r7, #15]
		for (u1_t bi = 0; bi < 4; bi++) {
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	73bb      	strb	r3, [r7, #14]
 8005b70:	e01d      	b.n	8005bae <nextTx+0x5a>
			if ((bmap & (1 << bi)) && mintime - LMIC.bands[bi].avail > 0)
 8005b72:	7dfa      	ldrb	r2, [r7, #23]
 8005b74:	7bbb      	ldrb	r3, [r7, #14]
 8005b76:	fa42 f303 	asr.w	r3, r2, r3
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d012      	beq.n	8005ba8 <nextTx+0x54>
 8005b82:	7bbb      	ldrb	r3, [r7, #14]
 8005b84:	4a40      	ldr	r2, [pc, #256]	@ (8005c88 <nextTx+0x134>)
 8005b86:	3304      	adds	r3, #4
 8005b88:	00db      	lsls	r3, r3, #3
 8005b8a:	4413      	add	r3, r2
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	dd08      	ble.n	8005ba8 <nextTx+0x54>
				mintime = LMIC.bands[band = bi].avail;
 8005b96:	7bbb      	ldrb	r3, [r7, #14]
 8005b98:	73fb      	strb	r3, [r7, #15]
 8005b9a:	7bfb      	ldrb	r3, [r7, #15]
 8005b9c:	4a3a      	ldr	r2, [pc, #232]	@ (8005c88 <nextTx+0x134>)
 8005b9e:	3304      	adds	r3, #4
 8005ba0:	00db      	lsls	r3, r3, #3
 8005ba2:	4413      	add	r3, r2
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	613b      	str	r3, [r7, #16]
		for (u1_t bi = 0; bi < 4; bi++) {
 8005ba8:	7bbb      	ldrb	r3, [r7, #14]
 8005baa:	3301      	adds	r3, #1
 8005bac:	73bb      	strb	r3, [r7, #14]
 8005bae:	7bbb      	ldrb	r3, [r7, #14]
 8005bb0:	2b03      	cmp	r3, #3
 8005bb2:	d9de      	bls.n	8005b72 <nextTx+0x1e>
		}
		// Find next channel in given band
		u1_t chnl = LMIC.bands[band].lastchnl;
 8005bb4:	7bfb      	ldrb	r3, [r7, #15]
 8005bb6:	4a34      	ldr	r2, [pc, #208]	@ (8005c88 <nextTx+0x134>)
 8005bb8:	3304      	adds	r3, #4
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	4413      	add	r3, r2
 8005bbe:	78db      	ldrb	r3, [r3, #3]
 8005bc0:	737b      	strb	r3, [r7, #13]
		for (u1_t ci = 0; ci < MAX_CHANNELS; ci++) {
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	733b      	strb	r3, [r7, #12]
 8005bc6:	e042      	b.n	8005c4e <nextTx+0xfa>
			if ((chnl = (chnl + 1)) >= MAX_CHANNELS)
 8005bc8:	7b7b      	ldrb	r3, [r7, #13]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	737b      	strb	r3, [r7, #13]
 8005bce:	7b7b      	ldrb	r3, [r7, #13]
 8005bd0:	2b0f      	cmp	r3, #15
 8005bd2:	d902      	bls.n	8005bda <nextTx+0x86>
				chnl -= MAX_CHANNELS;
 8005bd4:	7b7b      	ldrb	r3, [r7, #13]
 8005bd6:	3b10      	subs	r3, #16
 8005bd8:	737b      	strb	r3, [r7, #13]
			if ((LMIC.channelMap & (1 << chnl)) != 0 &&  // channel enabled
 8005bda:	4b2b      	ldr	r3, [pc, #172]	@ (8005c88 <nextTx+0x134>)
 8005bdc:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8005be0:	461a      	mov	r2, r3
 8005be2:	7b7b      	ldrb	r3, [r7, #13]
 8005be4:	fa42 f303 	asr.w	r3, r2, r3
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d02b      	beq.n	8005c48 <nextTx+0xf4>
					(LMIC.channelDrMap[chnl] & (1 << (LMIC.datarate & 0xF)))
 8005bf0:	7b7b      	ldrb	r3, [r7, #13]
 8005bf2:	4a25      	ldr	r2, [pc, #148]	@ (8005c88 <nextTx+0x134>)
 8005bf4:	3340      	adds	r3, #64	@ 0x40
 8005bf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	4b22      	ldr	r3, [pc, #136]	@ (8005c88 <nextTx+0x134>)
 8005bfe:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8005c02:	f003 030f 	and.w	r3, r3, #15
							!= 0 && band == (LMIC.channelFreq[chnl] & 0x3)) { // in selected band
 8005c06:	fa42 f303 	asr.w	r3, r2, r3
 8005c0a:	f003 0301 	and.w	r3, r3, #1
			if ((LMIC.channelMap & (1 << chnl)) != 0 &&  // channel enabled
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d01a      	beq.n	8005c48 <nextTx+0xf4>
							!= 0 && band == (LMIC.channelFreq[chnl] & 0x3)) { // in selected band
 8005c12:	7bfa      	ldrb	r2, [r7, #15]
 8005c14:	7b7b      	ldrb	r3, [r7, #13]
 8005c16:	491c      	ldr	r1, [pc, #112]	@ (8005c88 <nextTx+0x134>)
 8005c18:	3310      	adds	r3, #16
 8005c1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005c1e:	f003 0303 	and.w	r3, r3, #3
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d110      	bne.n	8005c48 <nextTx+0xf4>
				LMIC.txChnl = LMIC.bands[band].lastchnl = chnl;
 8005c26:	7bfa      	ldrb	r2, [r7, #15]
 8005c28:	4917      	ldr	r1, [pc, #92]	@ (8005c88 <nextTx+0x134>)
 8005c2a:	1d13      	adds	r3, r2, #4
 8005c2c:	00db      	lsls	r3, r3, #3
 8005c2e:	440b      	add	r3, r1
 8005c30:	7b79      	ldrb	r1, [r7, #13]
 8005c32:	70d9      	strb	r1, [r3, #3]
 8005c34:	4914      	ldr	r1, [pc, #80]	@ (8005c88 <nextTx+0x134>)
 8005c36:	1d13      	adds	r3, r2, #4
 8005c38:	00db      	lsls	r3, r3, #3
 8005c3a:	440b      	add	r3, r1
 8005c3c:	78da      	ldrb	r2, [r3, #3]
 8005c3e:	4b12      	ldr	r3, [pc, #72]	@ (8005c88 <nextTx+0x134>)
 8005c40:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
				return mintime;
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	e016      	b.n	8005c76 <nextTx+0x122>
		for (u1_t ci = 0; ci < MAX_CHANNELS; ci++) {
 8005c48:	7b3b      	ldrb	r3, [r7, #12]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	733b      	strb	r3, [r7, #12]
 8005c4e:	7b3b      	ldrb	r3, [r7, #12]
 8005c50:	2b0f      	cmp	r3, #15
 8005c52:	d9b9      	bls.n	8005bc8 <nextTx+0x74>
			}
		}
		if ((bmap &= ~(1 << band)) == 0) {
 8005c54:	7bfb      	ldrb	r3, [r7, #15]
 8005c56:	2201      	movs	r2, #1
 8005c58:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5c:	b25b      	sxtb	r3, r3
 8005c5e:	43db      	mvns	r3, r3
 8005c60:	b25a      	sxtb	r2, r3
 8005c62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c66:	4013      	ands	r3, r2
 8005c68:	b25b      	sxtb	r3, r3
 8005c6a:	75fb      	strb	r3, [r7, #23]
 8005c6c:	7dfb      	ldrb	r3, [r7, #23]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f47f af76 	bne.w	8005b60 <nextTx+0xc>
			// No feasible channel  found!
			return mintime;
 8005c74:	693b      	ldr	r3, [r7, #16]
		}
	} while (1);
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	371c      	adds	r7, #28
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	44aa2000 	.word	0x44aa2000
 8005c88:	2000033c 	.word	0x2000033c

08005c8c <setBcnRxParams>:

static void setBcnRxParams(void)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	af00      	add	r7, sp, #0
	LMIC.dataLen = 0;
 8005c90:	4b10      	ldr	r3, [pc, #64]	@ (8005cd4 <setBcnRxParams+0x48>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
	LMIC.freq = LMIC.channelFreq[LMIC.bcnChnl] & ~(u4_t) 3;
 8005c98:	4b0e      	ldr	r3, [pc, #56]	@ (8005cd4 <setBcnRxParams+0x48>)
 8005c9a:	f893 3188 	ldrb.w	r3, [r3, #392]	@ 0x188
 8005c9e:	4a0d      	ldr	r2, [pc, #52]	@ (8005cd4 <setBcnRxParams+0x48>)
 8005ca0:	3310      	adds	r3, #16
 8005ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ca6:	f023 0303 	bic.w	r3, r3, #3
 8005caa:	4a0a      	ldr	r2, [pc, #40]	@ (8005cd4 <setBcnRxParams+0x48>)
 8005cac:	6093      	str	r3, [r2, #8]
	LMIC.rps = setIh(setNocrc(dndr2rps((dr_t) DR_BCN), 1), LEN_BCN);
 8005cae:	2003      	movs	r0, #3
 8005cb0:	f7fe fff6 	bl	8004ca0 <dndr2rps>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2101      	movs	r1, #1
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7fe ffa2 	bl	8004c02 <setNocrc>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2111      	movs	r1, #17
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7fe ffc3 	bl	8004c4e <setIh>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	461a      	mov	r2, r3
 8005ccc:	4b01      	ldr	r3, [pc, #4]	@ (8005cd4 <setBcnRxParams+0x48>)
 8005cce:	81da      	strh	r2, [r3, #14]
}
 8005cd0:	bf00      	nop
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	2000033c 	.word	0x2000033c

08005cd8 <initJoinLoop>:

#define setRx1Params() /*LMIC.freq/rps remain unchanged*/

static void initJoinLoop(void)
{
 8005cd8:	b598      	push	{r3, r4, r7, lr}
 8005cda:	af00      	add	r7, sp, #0
#if CFG_TxContinuousMode
  LMIC.txChnl = 0;
#else
	LMIC.txChnl = os_getRndU1() % NUM_DEFAULT_CHANNELS;
 8005cdc:	f002 ff96 	bl	8008c0c <radio_rand1>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	4b15      	ldr	r3, [pc, #84]	@ (8005d3c <initJoinLoop+0x64>)
 8005ce6:	fba3 1302 	umull	r1, r3, r3, r2
 8005cea:	0899      	lsrs	r1, r3, #2
 8005cec:	460b      	mov	r3, r1
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	440b      	add	r3, r1
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	b2da      	uxtb	r2, r3
 8005cf8:	4b11      	ldr	r3, [pc, #68]	@ (8005d40 <initJoinLoop+0x68>)
 8005cfa:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
#endif
	LMIC.adrTxPow = 14;
 8005cfe:	4b10      	ldr	r3, [pc, #64]	@ (8005d40 <initJoinLoop+0x68>)
 8005d00:	220e      	movs	r2, #14
 8005d02:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf
	setDrJoin(DRCHG_SET, DR_SF7);
 8005d06:	2105      	movs	r1, #5
 8005d08:	2000      	movs	r0, #0
 8005d0a:	f7ff fd2b 	bl	8005764 <setDrJoin>
	initDefaultChannels(1);
 8005d0e:	2001      	movs	r0, #1
 8005d10:	f7ff fd6a 	bl	80057e8 <initDefaultChannels>
	ASSERT((LMIC.opmode & OP_NEXTCHNL) == 0);
 8005d14:	4b0a      	ldr	r3, [pc, #40]	@ (8005d40 <initJoinLoop+0x68>)
 8005d16:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8005d1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d001      	beq.n	8005d26 <initJoinLoop+0x4e>
 8005d22:	f7fe fe71 	bl	8004a08 <hal_failed>
	LMIC.txend = LMIC.bands[BAND_MILLI].avail + rndDelay(8);
 8005d26:	4b06      	ldr	r3, [pc, #24]	@ (8005d40 <initJoinLoop+0x68>)
 8005d28:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8005d2a:	2008      	movs	r0, #8
 8005d2c:	f7ff fcae 	bl	800568c <rndDelay>
 8005d30:	4603      	mov	r3, r0
 8005d32:	4423      	add	r3, r4
 8005d34:	4a02      	ldr	r2, [pc, #8]	@ (8005d40 <initJoinLoop+0x68>)
 8005d36:	6013      	str	r3, [r2, #0]
}
 8005d38:	bf00      	nop
 8005d3a:	bd98      	pop	{r3, r4, r7, pc}
 8005d3c:	aaaaaaab 	.word	0xaaaaaaab
 8005d40:	2000033c 	.word	0x2000033c

08005d44 <nextJoinState>:

static ostime_t nextJoinState(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
	u1_t failed = 0;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	71fb      	strb	r3, [r7, #7]

	// Try 869.x and then 864.x with same DR
	// If both fail try next lower datarate
	if (++LMIC.txChnl == NUM_DEFAULT_CHANNELS)
 8005d4e:	4b30      	ldr	r3, [pc, #192]	@ (8005e10 <nextJoinState+0xcc>)
 8005d50:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8005d54:	3301      	adds	r3, #1
 8005d56:	b2da      	uxtb	r2, r3
 8005d58:	4b2d      	ldr	r3, [pc, #180]	@ (8005e10 <nextJoinState+0xcc>)
 8005d5a:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
 8005d5e:	4b2c      	ldr	r3, [pc, #176]	@ (8005e10 <nextJoinState+0xcc>)
 8005d60:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8005d64:	2b06      	cmp	r3, #6
 8005d66:	d103      	bne.n	8005d70 <nextJoinState+0x2c>
		LMIC.txChnl = 0;
 8005d68:	4b29      	ldr	r3, [pc, #164]	@ (8005e10 <nextJoinState+0xcc>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
	if ((++LMIC.txCnt & 1) == 0) {
 8005d70:	4b27      	ldr	r3, [pc, #156]	@ (8005e10 <nextJoinState+0xcc>)
 8005d72:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8005d76:	3301      	adds	r3, #1
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	4b25      	ldr	r3, [pc, #148]	@ (8005e10 <nextJoinState+0xcc>)
 8005d7c:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
 8005d80:	4b23      	ldr	r3, [pc, #140]	@ (8005e10 <nextJoinState+0xcc>)
 8005d82:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d112      	bne.n	8005db4 <nextJoinState+0x70>
		// Lower DR every 2nd try (having tried 868.x and 864.x with the same DR)
		if (LMIC.datarate == DR_SF9)
 8005d8e:	4b20      	ldr	r3, [pc, #128]	@ (8005e10 <nextJoinState+0xcc>)
 8005d90:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8005d94:	2b03      	cmp	r3, #3
 8005d96:	d102      	bne.n	8005d9e <nextJoinState+0x5a>
			failed = 1; // we have tried all DR - signal EV_JOIN_FAILED
 8005d98:	2301      	movs	r3, #1
 8005d9a:	71fb      	strb	r3, [r7, #7]
 8005d9c:	e00a      	b.n	8005db4 <nextJoinState+0x70>
		else
			setDrJoin(DRCHG_NOJACC, decDR((dr_t) LMIC.datarate));
 8005d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8005e10 <nextJoinState+0xcc>)
 8005da0:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8005da4:	4618      	mov	r0, r3
 8005da6:	f7fe ff8f 	bl	8004cc8 <decDR>
 8005daa:	4603      	mov	r3, r0
 8005dac:	4619      	mov	r1, r3
 8005dae:	2001      	movs	r0, #1
 8005db0:	f7ff fcd8 	bl	8005764 <setDrJoin>
	}
	// Clear NEXTCHNL because join state engine controls channel hopping
	LMIC.opmode &= ~OP_NEXTCHNL;
 8005db4:	4b16      	ldr	r3, [pc, #88]	@ (8005e10 <nextJoinState+0xcc>)
 8005db6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8005dba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	4b13      	ldr	r3, [pc, #76]	@ (8005e10 <nextJoinState+0xcc>)
 8005dc2:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	// Move txend to randomize synchronized concurrent joins.
	// Duty cycle is based on txend.
	ostime_t time = os_getTime();
 8005dc6:	f002 f9f7 	bl	80081b8 <os_getTime>
 8005dca:	6038      	str	r0, [r7, #0]
	if (time - LMIC.bands[BAND_MILLI].avail < 0)
 8005dcc:	4b10      	ldr	r3, [pc, #64]	@ (8005e10 <nextJoinState+0xcc>)
 8005dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	da02      	bge.n	8005dde <nextJoinState+0x9a>
		time = LMIC.bands[BAND_MILLI].avail;
 8005dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8005e10 <nextJoinState+0xcc>)
 8005dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ddc:	603b      	str	r3, [r7, #0]
	// Avoid collision with JOIN ACCEPT @ SF12 being sent by GW (but we missed it)
			? DNW2_SAFETY_ZONE
			// Otherwise: randomize join (street lamp case):
			// SF12:255, SF11:127, .., SF7:8secs
			:
				DNW2_SAFETY_ZONE + rndDelay(255 >> LMIC.datarate));
 8005dde:	4b0c      	ldr	r3, [pc, #48]	@ (8005e10 <nextJoinState+0xcc>)
 8005de0:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8005de4:	461a      	mov	r2, r3
 8005de6:	23ff      	movs	r3, #255	@ 0xff
 8005de8:	4113      	asrs	r3, r2
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7ff fc4d 	bl	800568c <rndDelay>
 8005df2:	4603      	mov	r3, r0
 8005df4:	f503 33bb 	add.w	r3, r3, #95744	@ 0x17600
 8005df8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
	LMIC.txend = time + (isTESTMODE()
 8005dfc:	683a      	ldr	r2, [r7, #0]
 8005dfe:	4413      	add	r3, r2
 8005e00:	4a03      	ldr	r2, [pc, #12]	@ (8005e10 <nextJoinState+0xcc>)
 8005e02:	6013      	str	r3, [r2, #0]
	// 1 - triggers EV_JOIN_FAILED event
	return failed;
 8005e04:	79fb      	ldrb	r3, [r7, #7]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3708      	adds	r7, #8
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	2000033c 	.word	0x2000033c

08005e14 <runEngineUpdate>:
#else
#error Unsupported frequency band!
#endif

static void runEngineUpdate(xref2osjob_t osjob)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
	engineUpdate();
 8005e1c:	f001 fcb6 	bl	800778c <engineUpdate>
}
 8005e20:	bf00      	nop
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <reportEvent>:

static void reportEvent(ev_t ev)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	4603      	mov	r3, r0
 8005e30:	71fb      	strb	r3, [r7, #7]
	EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
					e_.eui = MAIN::CDEV->getEui(),
					e_.info = ev));
	ON_LMIC_EVENT(ev);
 8005e32:	79fb      	ldrb	r3, [r7, #7]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f001 fffd 	bl	8007e34 <onEvent>
	engineUpdate();
 8005e3a:	f001 fca7 	bl	800778c <engineUpdate>
}
 8005e3e:	bf00      	nop
 8005e40:	3708      	adds	r7, #8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <runReset>:

static void runReset(xref2osjob_t osjob)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b082      	sub	sp, #8
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
	// Disable session
	LMIC_reset();
 8005e4e:	f001 fe67 	bl	8007b20 <LMIC_reset>
	LMIC_startJoining();
 8005e52:	f001 fa0f 	bl	8007274 <LMIC_startJoining>
	reportEvent(EV_RESET);
 8005e56:	200c      	movs	r0, #12
 8005e58:	f7ff ffe6 	bl	8005e28 <reportEvent>
}
 8005e5c:	bf00      	nop
 8005e5e:	3708      	adds	r7, #8
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <stateJustJoined>:

static void stateJustJoined(void)
{
 8005e64:	b480      	push	{r7}
 8005e66:	af00      	add	r7, sp, #0
	LMIC.seqnoDn = LMIC.seqnoUp = 0;
 8005e68:	4b2f      	ldr	r3, [pc, #188]	@ (8005f28 <stateJustJoined+0xc4>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
 8005e70:	4b2d      	ldr	r3, [pc, #180]	@ (8005f28 <stateJustJoined+0xc4>)
 8005e72:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8005e76:	4a2c      	ldr	r2, [pc, #176]	@ (8005f28 <stateJustJoined+0xc4>)
 8005e78:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
	LMIC.rejoinCnt = 0;
 8005e7c:	4b2a      	ldr	r3, [pc, #168]	@ (8005f28 <stateJustJoined+0xc4>)
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
	LMIC.dnConf = LMIC.adrChanged = LMIC.ladrAns = LMIC.devsAns = 0;
 8005e84:	4b28      	ldr	r3, [pc, #160]	@ (8005f28 <stateJustJoined+0xc4>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
 8005e8c:	4b26      	ldr	r3, [pc, #152]	@ (8005f28 <stateJustJoined+0xc4>)
 8005e8e:	f893 2126 	ldrb.w	r2, [r3, #294]	@ 0x126
 8005e92:	4b25      	ldr	r3, [pc, #148]	@ (8005f28 <stateJustJoined+0xc4>)
 8005e94:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
 8005e98:	4b23      	ldr	r3, [pc, #140]	@ (8005f28 <stateJustJoined+0xc4>)
 8005e9a:	f893 2125 	ldrb.w	r2, [r3, #293]	@ 0x125
 8005e9e:	4b22      	ldr	r3, [pc, #136]	@ (8005f28 <stateJustJoined+0xc4>)
 8005ea0:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
 8005ea4:	4b20      	ldr	r3, [pc, #128]	@ (8005f28 <stateJustJoined+0xc4>)
 8005ea6:	f893 2122 	ldrb.w	r2, [r3, #290]	@ 0x122
 8005eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8005f28 <stateJustJoined+0xc4>)
 8005eac:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
	LMIC.moreData = LMIC.dn2Ans = LMIC.snchAns = LMIC.dutyCapAns = 0;
 8005eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8005f28 <stateJustJoined+0xc4>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
 8005eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8005f28 <stateJustJoined+0xc4>)
 8005eba:	f893 2129 	ldrb.w	r2, [r3, #297]	@ 0x129
 8005ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8005f28 <stateJustJoined+0xc4>)
 8005ec0:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
 8005ec4:	4b18      	ldr	r3, [pc, #96]	@ (8005f28 <stateJustJoined+0xc4>)
 8005ec6:	f893 212a 	ldrb.w	r2, [r3, #298]	@ 0x12a
 8005eca:	4b17      	ldr	r3, [pc, #92]	@ (8005f28 <stateJustJoined+0xc4>)
 8005ecc:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
 8005ed0:	4b15      	ldr	r3, [pc, #84]	@ (8005f28 <stateJustJoined+0xc4>)
 8005ed2:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8005ed6:	4b14      	ldr	r3, [pc, #80]	@ (8005f28 <stateJustJoined+0xc4>)
 8005ed8:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
	LMIC.pingSetAns = 0;
 8005edc:	4b12      	ldr	r3, [pc, #72]	@ (8005f28 <stateJustJoined+0xc4>)
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
	LMIC.upRepeat = 0;
 8005ee4:	4b10      	ldr	r3, [pc, #64]	@ (8005f28 <stateJustJoined+0xc4>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
	LMIC.adrAckReq = LINK_CHECK_INIT;
 8005eec:	4b0e      	ldr	r3, [pc, #56]	@ (8005f28 <stateJustJoined+0xc4>)
 8005eee:	22f4      	movs	r2, #244	@ 0xf4
 8005ef0:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
	LMIC.dn2Dr = DR_DNW2;
 8005ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8005f28 <stateJustJoined+0xc4>)
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
	LMIC.dn2Freq = FREQ_DNW2;
 8005efc:	4b0a      	ldr	r3, [pc, #40]	@ (8005f28 <stateJustJoined+0xc4>)
 8005efe:	4a0b      	ldr	r2, [pc, #44]	@ (8005f2c <stateJustJoined+0xc8>)
 8005f00:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
	LMIC.bcnChnl = CHNL_BCN;
 8005f04:	4b08      	ldr	r3, [pc, #32]	@ (8005f28 <stateJustJoined+0xc4>)
 8005f06:	2205      	movs	r2, #5
 8005f08:	f883 2188 	strb.w	r2, [r3, #392]	@ 0x188
	LMIC.ping.freq = FREQ_PING;
 8005f0c:	4b06      	ldr	r3, [pc, #24]	@ (8005f28 <stateJustJoined+0xc4>)
 8005f0e:	4a07      	ldr	r2, [pc, #28]	@ (8005f2c <stateJustJoined+0xc8>)
 8005f10:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
	LMIC.ping.dr = DR_PING;
 8005f14:	4b04      	ldr	r3, [pc, #16]	@ (8005f28 <stateJustJoined+0xc4>)
 8005f16:	2203      	movs	r2, #3
 8005f18:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
}
 8005f1c:	bf00      	nop
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	2000033c 	.word	0x2000033c
 8005f2c:	33d3e608 	.word	0x33d3e608

08005f30 <decodeBeacon>:
// ================================================================================
// Decoding frames

// Decode beacon  - do not overwrite bcninfo unless we have a match!
static int decodeBeacon(void)
{
 8005f30:	b590      	push	{r4, r7, lr}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
	ASSERT(LMIC.dataLen == LEN_BCN); // implicit header RX guarantees this
 8005f36:	4b46      	ldr	r3, [pc, #280]	@ (8006050 <decodeBeacon+0x120>)
 8005f38:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8005f3c:	2b11      	cmp	r3, #17
 8005f3e:	d001      	beq.n	8005f44 <decodeBeacon+0x14>
 8005f40:	f7fe fd62 	bl	8004a08 <hal_failed>
	xref2u1_t d = LMIC.frame;
 8005f44:	4b43      	ldr	r3, [pc, #268]	@ (8006054 <decodeBeacon+0x124>)
 8005f46:	607b      	str	r3, [r7, #4]
	if (
#if defined CFG_eu868
	d[OFF_BCN_CRC1] != (u1_t) os_crc16(d, OFF_BCN_CRC1)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3307      	adds	r3, #7
 8005f4c:	781c      	ldrb	r4, [r3, #0]
 8005f4e:	2107      	movs	r1, #7
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7fe ffb0 	bl	8004eb6 <os_crc16>
 8005f56:	4603      	mov	r3, r0
 8005f58:	b2db      	uxtb	r3, r3
	if (
 8005f5a:	429c      	cmp	r4, r3
 8005f5c:	d001      	beq.n	8005f62 <decodeBeacon+0x32>
#elif CFG_us915
        os_rlsbf2(&d[OFF_BCN_CRC1]) != os_crc16(d,OFF_BCN_CRC1)
#endif
			)
		return 0;   // first (common) part fails CRC check
 8005f5e:	2300      	movs	r3, #0
 8005f60:	e071      	b.n	8006046 <decodeBeacon+0x116>
	// First set of fields is ok
	u4_t bcnnetid = os_rlsbf4(&d[OFF_BCN_NETID]) & 0xFFFFFF;
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f7fe ff0c 	bl	8004d80 <os_rlsbf4>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005f6e:	603b      	str	r3, [r7, #0]
	if (bcnnetid != LMIC.netid)
 8005f70:	4b37      	ldr	r3, [pc, #220]	@ (8006050 <decodeBeacon+0x120>)
 8005f72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d002      	beq.n	8005f82 <decodeBeacon+0x52>
		return -1;  // not the beacon we're looking for
 8005f7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f80:	e061      	b.n	8006046 <decodeBeacon+0x116>

	LMIC.bcninfo.flags &= ~(BCN_PARTIAL | BCN_FULL);
 8005f82:	4b33      	ldr	r3, [pc, #204]	@ (8006050 <decodeBeacon+0x120>)
 8005f84:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8005f88:	f023 0303 	bic.w	r3, r3, #3
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	4b30      	ldr	r3, [pc, #192]	@ (8006050 <decodeBeacon+0x120>)
 8005f90:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
	// Match - update bcninfo structure
	LMIC.bcninfo.snr = LMIC.snr;
 8005f94:	4b2e      	ldr	r3, [pc, #184]	@ (8006050 <decodeBeacon+0x120>)
 8005f96:	f993 200d 	ldrsb.w	r2, [r3, #13]
 8005f9a:	4b2d      	ldr	r3, [pc, #180]	@ (8006050 <decodeBeacon+0x120>)
 8005f9c:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
	LMIC.bcninfo.rssi = LMIC.rssi;
 8005fa0:	4b2b      	ldr	r3, [pc, #172]	@ (8006050 <decodeBeacon+0x120>)
 8005fa2:	f993 200c 	ldrsb.w	r2, [r3, #12]
 8005fa6:	4b2a      	ldr	r3, [pc, #168]	@ (8006050 <decodeBeacon+0x120>)
 8005fa8:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
	LMIC.bcninfo.txtime = LMIC.rxtime - AIRTIME_BCN_osticks;
 8005fac:	4b28      	ldr	r3, [pc, #160]	@ (8006050 <decodeBeacon+0x120>)
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f5a3 5390 	sub.w	r3, r3, #4608	@ 0x1200
 8005fb4:	3b0c      	subs	r3, #12
 8005fb6:	4a26      	ldr	r2, [pc, #152]	@ (8006050 <decodeBeacon+0x120>)
 8005fb8:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
	LMIC.bcninfo.time = os_rlsbf4(&d[OFF_BCN_TIME]);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	3303      	adds	r3, #3
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7fe fedd 	bl	8004d80 <os_rlsbf4>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	4a21      	ldr	r2, [pc, #132]	@ (8006050 <decodeBeacon+0x120>)
 8005fca:	f8c2 3198 	str.w	r3, [r2, #408]	@ 0x198
	LMIC.bcninfo.flags |= BCN_PARTIAL;
 8005fce:	4b20      	ldr	r3, [pc, #128]	@ (8006050 <decodeBeacon+0x120>)
 8005fd0:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8005fd4:	f043 0301 	orr.w	r3, r3, #1
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	4b1d      	ldr	r3, [pc, #116]	@ (8006050 <decodeBeacon+0x120>)
 8005fdc:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196

	// Check 2nd set
	if (os_rlsbf2(&d[OFF_BCN_CRC2]) != os_crc16(d, OFF_BCN_CRC2))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	330f      	adds	r3, #15
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7fe feb6 	bl	8004d56 <os_rlsbf2>
 8005fea:	4603      	mov	r3, r0
 8005fec:	461c      	mov	r4, r3
 8005fee:	210f      	movs	r1, #15
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f7fe ff60 	bl	8004eb6 <os_crc16>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	429c      	cmp	r4, r3
 8005ffa:	d001      	beq.n	8006000 <decodeBeacon+0xd0>
		return 1;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e022      	b.n	8006046 <decodeBeacon+0x116>
	// Second set of fields is ok
	LMIC.bcninfo.lat = (s4_t) os_rlsbf4(&d[OFF_BCN_LAT - 1]) >> 8; // read as signed 24-bit
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	3308      	adds	r3, #8
 8006004:	4618      	mov	r0, r3
 8006006:	f7fe febb 	bl	8004d80 <os_rlsbf4>
 800600a:	4603      	mov	r3, r0
 800600c:	121b      	asrs	r3, r3, #8
 800600e:	4a10      	ldr	r2, [pc, #64]	@ (8006050 <decodeBeacon+0x120>)
 8006010:	f8c2 31a0 	str.w	r3, [r2, #416]	@ 0x1a0
	LMIC.bcninfo.lon = (s4_t) os_rlsbf4(&d[OFF_BCN_LON - 1]) >> 8; // ditto
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	330b      	adds	r3, #11
 8006018:	4618      	mov	r0, r3
 800601a:	f7fe feb1 	bl	8004d80 <os_rlsbf4>
 800601e:	4603      	mov	r3, r0
 8006020:	121b      	asrs	r3, r3, #8
 8006022:	4a0b      	ldr	r2, [pc, #44]	@ (8006050 <decodeBeacon+0x120>)
 8006024:	f8c2 31a4 	str.w	r3, [r2, #420]	@ 0x1a4
	LMIC.bcninfo.info = d[OFF_BCN_INFO];
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	7a1a      	ldrb	r2, [r3, #8]
 800602c:	4b08      	ldr	r3, [pc, #32]	@ (8006050 <decodeBeacon+0x120>)
 800602e:	f883 219c 	strb.w	r2, [r3, #412]	@ 0x19c
	LMIC.bcninfo.flags |= BCN_FULL;
 8006032:	4b07      	ldr	r3, [pc, #28]	@ (8006050 <decodeBeacon+0x120>)
 8006034:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8006038:	f043 0302 	orr.w	r3, r3, #2
 800603c:	b2da      	uxtb	r2, r3
 800603e:	4b04      	ldr	r3, [pc, #16]	@ (8006050 <decodeBeacon+0x120>)
 8006040:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
	return 2;
 8006044:	2302      	movs	r3, #2
}
 8006046:	4618      	mov	r0, r3
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	bd90      	pop	{r4, r7, pc}
 800604e:	bf00      	nop
 8006050:	2000033c 	.word	0x2000033c
 8006054:	20000484 	.word	0x20000484

08006058 <decodeFrame>:

static bit_t decodeFrame(void)
{
 8006058:	b590      	push	{r4, r7, lr}
 800605a:	b09b      	sub	sp, #108	@ 0x6c
 800605c:	af02      	add	r7, sp, #8
	xref2u1_t d = LMIC.frame;
 800605e:	4b98      	ldr	r3, [pc, #608]	@ (80062c0 <decodeFrame+0x268>)
 8006060:	64bb      	str	r3, [r7, #72]	@ 0x48
	u1_t hdr = d[0];
 8006062:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	u1_t ftype = hdr & HDR_FTYPE;
 800606a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800606e:	f023 031f 	bic.w	r3, r3, #31
 8006072:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	int dlen = LMIC.dataLen;
 8006076:	4b93      	ldr	r3, [pc, #588]	@ (80062c4 <decodeFrame+0x26c>)
 8006078:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 800607c:	643b      	str	r3, [r7, #64]	@ 0x40
	if (dlen < OFF_DAT_OPTS + 4 || (hdr & HDR_MAJOR) != HDR_MAJOR_V1
 800607e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006080:	2b0b      	cmp	r3, #11
 8006082:	dd0d      	ble.n	80060a0 <decodeFrame+0x48>
 8006084:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006088:	f003 0303 	and.w	r3, r3, #3
 800608c:	2b00      	cmp	r3, #0
 800608e:	d107      	bne.n	80060a0 <decodeFrame+0x48>
			|| (ftype != HDR_FTYPE_DADN && ftype != HDR_FTYPE_DCDN)) {
 8006090:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8006094:	2b60      	cmp	r3, #96	@ 0x60
 8006096:	d014      	beq.n	80060c2 <decodeFrame+0x6a>
 8006098:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800609c:	2ba0      	cmp	r3, #160	@ 0xa0
 800609e:	d010      	beq.n	80060c2 <decodeFrame+0x6a>
		// Basic sanity checks failed
		EV(specCond, WARN, (e_.reason = EV::specCond_t::UNEXPECTED_FRAME,
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = dlen < 4 ? 0 : os_rlsbf4(&d[dlen-4]),
						e_.info2 = hdr + (dlen<<8)));
		norx: LMIC.dataLen = 0;
 80060a0:	bf00      	nop
 80060a2:	e008      	b.n	80060b6 <decodeFrame+0x5e>
	if (addr != LMIC.devaddr) {
		EV(specCond, WARN, (e_.reason = EV::specCond_t::ALIEN_ADDRESS,
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = addr,
						e_.info2 = LMIC.devaddr));
		goto norx;
 80060a4:	bf00      	nop
 80060a6:	e006      	b.n	80060b6 <decodeFrame+0x5e>
	}
	if (poff > pend) {
		EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = 0x1000000 + (poff-pend) + (fct<<8) + (dlen<<16)));
		goto norx;
 80060a8:	bf00      	nop
 80060aa:	e004      	b.n	80060b6 <decodeFrame+0x5e>
		EV(spe3Cond, ERR, (e_.reason = EV::spe3Cond_t::CORRUPTED_MIC,
						e_.eui1 = MAIN::CDEV->getEui(),
						e_.info1 = Base::lsbf4(&d[pend]),
						e_.info2 = seqno,
						e_.info3 = LMIC.devaddr));
		goto norx;
 80060ac:	bf00      	nop
 80060ae:	e002      	b.n	80060b6 <decodeFrame+0x5e>
		if ((s4_t) seqno > (s4_t) LMIC.seqnoDn) {
			EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_ROLL_OVER,
							e_.eui = MAIN::CDEV->getEui(),
							e_.info = LMIC.seqnoDn,
							e_.info2 = seqno));
			goto norx;
 80060b0:	bf00      	nop
 80060b2:	e000      	b.n	80060b6 <decodeFrame+0x5e>
				|| ftype != HDR_FTYPE_DCDN) {
			EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_OBSOLETE,
							e_.eui = MAIN::CDEV->getEui(),
							e_.info = LMIC.seqnoDn,
							e_.info2 = seqno));
			goto norx;
 80060b4:	bf00      	nop
		norx: LMIC.dataLen = 0;
 80060b6:	4b83      	ldr	r3, [pc, #524]	@ (80062c4 <decodeFrame+0x26c>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
		return 0;
 80060be:	2300      	movs	r3, #0
 80060c0:	e2f6      	b.n	80066b0 <decodeFrame+0x658>
	int fct = d[OFF_DAT_FCT];
 80060c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060c4:	3305      	adds	r3, #5
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	u4_t addr = os_rlsbf4(&d[OFF_DAT_ADDR]);
 80060ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060cc:	3301      	adds	r3, #1
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7fe fe56 	bl	8004d80 <os_rlsbf4>
 80060d4:	63b8      	str	r0, [r7, #56]	@ 0x38
	u4_t seqno = os_rlsbf2(&d[OFF_DAT_SEQNO]);
 80060d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060d8:	3306      	adds	r3, #6
 80060da:	4618      	mov	r0, r3
 80060dc:	f7fe fe3b 	bl	8004d56 <os_rlsbf2>
 80060e0:	4603      	mov	r3, r0
 80060e2:	637b      	str	r3, [r7, #52]	@ 0x34
	int olen = fct & FCT_OPTLEN;
 80060e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060e6:	f003 030f 	and.w	r3, r3, #15
 80060ea:	633b      	str	r3, [r7, #48]	@ 0x30
	int ackup = (fct & FCT_ACK) != 0 ? 1 : 0;   // ACK last up frame
 80060ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060ee:	115b      	asrs	r3, r3, #5
 80060f0:	f003 0301 	and.w	r3, r3, #1
 80060f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int poff = OFF_DAT_OPTS + olen;
 80060f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f8:	3308      	adds	r3, #8
 80060fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
	int pend = dlen - 4;  // MIC
 80060fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060fe:	3b04      	subs	r3, #4
 8006100:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (addr != LMIC.devaddr) {
 8006102:	4b70      	ldr	r3, [pc, #448]	@ (80062c4 <decodeFrame+0x26c>)
 8006104:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006108:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800610a:	429a      	cmp	r2, r3
 800610c:	d1ca      	bne.n	80060a4 <decodeFrame+0x4c>
	if (poff > pend) {
 800610e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006112:	429a      	cmp	r2, r3
 8006114:	dcc8      	bgt.n	80060a8 <decodeFrame+0x50>
	int port = -1;
 8006116:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800611a:	65bb      	str	r3, [r7, #88]	@ 0x58
	int replayConf = 0;
 800611c:	2300      	movs	r3, #0
 800611e:	657b      	str	r3, [r7, #84]	@ 0x54
	if (pend > poff)
 8006120:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006122:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006124:	429a      	cmp	r2, r3
 8006126:	dd07      	ble.n	8006138 <decodeFrame+0xe0>
		port = d[poff++];
 8006128:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800612a:	1c5a      	adds	r2, r3, #1
 800612c:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800612e:	461a      	mov	r2, r3
 8006130:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006132:	4413      	add	r3, r2
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	65bb      	str	r3, [r7, #88]	@ 0x58
	seqno = LMIC.seqnoDn + (u2_t) (seqno - LMIC.seqnoDn);
 8006138:	4b62      	ldr	r3, [pc, #392]	@ (80062c4 <decodeFrame+0x26c>)
 800613a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800613e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006140:	b291      	uxth	r1, r2
 8006142:	4a60      	ldr	r2, [pc, #384]	@ (80062c4 <decodeFrame+0x26c>)
 8006144:	f8d2 2118 	ldr.w	r2, [r2, #280]	@ 0x118
 8006148:	b292      	uxth	r2, r2
 800614a:	1a8a      	subs	r2, r1, r2
 800614c:	b292      	uxth	r2, r2
 800614e:	4413      	add	r3, r2
 8006150:	637b      	str	r3, [r7, #52]	@ 0x34
	if (!aes_verifyMic(LMIC.nwkKey, LMIC.devaddr, seqno, /*dn*/1, d, pend)) {
 8006152:	4b5c      	ldr	r3, [pc, #368]	@ (80062c4 <decodeFrame+0x26c>)
 8006154:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 8006158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800615a:	9301      	str	r3, [sp, #4]
 800615c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	2301      	movs	r3, #1
 8006162:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006164:	4858      	ldr	r0, [pc, #352]	@ (80062c8 <decodeFrame+0x270>)
 8006166:	f7fe ff19 	bl	8004f9c <aes_verifyMic>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d09d      	beq.n	80060ac <decodeFrame+0x54>
	if (seqno < LMIC.seqnoDn) {
 8006170:	4b54      	ldr	r3, [pc, #336]	@ (80062c4 <decodeFrame+0x26c>)
 8006172:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8006176:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006178:	429a      	cmp	r2, r3
 800617a:	d219      	bcs.n	80061b0 <decodeFrame+0x158>
		if ((s4_t) seqno > (s4_t) LMIC.seqnoDn) {
 800617c:	4b51      	ldr	r3, [pc, #324]	@ (80062c4 <decodeFrame+0x26c>)
 800617e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8006182:	461a      	mov	r2, r3
 8006184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006186:	429a      	cmp	r2, r3
 8006188:	db92      	blt.n	80060b0 <decodeFrame+0x58>
		if (seqno != LMIC.seqnoDn - 1 || !LMIC.dnConf
 800618a:	4b4e      	ldr	r3, [pc, #312]	@ (80062c4 <decodeFrame+0x26c>)
 800618c:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8006190:	3b01      	subs	r3, #1
 8006192:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006194:	429a      	cmp	r2, r3
 8006196:	d18d      	bne.n	80060b4 <decodeFrame+0x5c>
 8006198:	4b4a      	ldr	r3, [pc, #296]	@ (80062c4 <decodeFrame+0x26c>)
 800619a:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d088      	beq.n	80060b4 <decodeFrame+0x5c>
				|| ftype != HDR_FTYPE_DCDN) {
 80061a2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80061a6:	2ba0      	cmp	r3, #160	@ 0xa0
 80061a8:	d184      	bne.n	80060b4 <decodeFrame+0x5c>
		}
		// Replay of previous sequence number allowed only if
		// previous frame and repeated both requested confirmation
		replayConf = 1;
 80061aa:	2301      	movs	r3, #1
 80061ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80061ae:	e00e      	b.n	80061ce <decodeFrame+0x176>
			EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_SKIP,
							e_.eui = MAIN::CDEV->getEui(),
							e_.info = LMIC.seqnoDn,
							e_.info2 = seqno));
		}
		LMIC.seqnoDn = seqno + 1;  // next number to be expected
 80061b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061b2:	3301      	adds	r3, #1
 80061b4:	4a43      	ldr	r2, [pc, #268]	@ (80062c4 <decodeFrame+0x26c>)
 80061b6:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
		DO_DEVDB(LMIC.seqnoDn,seqnoDn);
		// DN frame requested confirmation - provide ACK once with next UP frame
		LMIC.dnConf = (ftype == HDR_FTYPE_DCDN ? FCT_ACK : 0);
 80061ba:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80061be:	2ba0      	cmp	r3, #160	@ 0xa0
 80061c0:	d101      	bne.n	80061c6 <decodeFrame+0x16e>
 80061c2:	2220      	movs	r2, #32
 80061c4:	e000      	b.n	80061c8 <decodeFrame+0x170>
 80061c6:	2200      	movs	r2, #0
 80061c8:	4b3e      	ldr	r3, [pc, #248]	@ (80062c4 <decodeFrame+0x26c>)
 80061ca:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
	}

	if (LMIC.dnConf || (fct & FCT_MORE))
 80061ce:	4b3d      	ldr	r3, [pc, #244]	@ (80062c4 <decodeFrame+0x26c>)
 80061d0:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d104      	bne.n	80061e2 <decodeFrame+0x18a>
 80061d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061da:	f003 0310 	and.w	r3, r3, #16
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d008      	beq.n	80061f4 <decodeFrame+0x19c>
		LMIC.opmode |= OP_POLL;
 80061e2:	4b38      	ldr	r3, [pc, #224]	@ (80062c4 <decodeFrame+0x26c>)
 80061e4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80061e8:	f043 0310 	orr.w	r3, r3, #16
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	4b35      	ldr	r3, [pc, #212]	@ (80062c4 <decodeFrame+0x26c>)
 80061f0:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac

	// We heard from network
	LMIC.adrChanged = LMIC.rejoinCnt = 0;
 80061f4:	4b33      	ldr	r3, [pc, #204]	@ (80062c4 <decodeFrame+0x26c>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
 80061fc:	4b31      	ldr	r3, [pc, #196]	@ (80062c4 <decodeFrame+0x26c>)
 80061fe:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 8006202:	4b30      	ldr	r3, [pc, #192]	@ (80062c4 <decodeFrame+0x26c>)
 8006204:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
	if (LMIC.adrAckReq != LINK_CHECK_OFF)
 8006208:	4b2e      	ldr	r3, [pc, #184]	@ (80062c4 <decodeFrame+0x26c>)
 800620a:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 800620e:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 8006212:	d003      	beq.n	800621c <decodeFrame+0x1c4>
		LMIC.adrAckReq = LINK_CHECK_INIT;
 8006214:	4b2b      	ldr	r3, [pc, #172]	@ (80062c4 <decodeFrame+0x26c>)
 8006216:	22f4      	movs	r2, #244	@ 0xf4
 8006218:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121

	// Process OPTS
	int m = LMIC.rssi - RSSI_OFF - getSensitivity(LMIC.rps);
 800621c:	4b29      	ldr	r3, [pc, #164]	@ (80062c4 <decodeFrame+0x26c>)
 800621e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8006222:	f1a3 0440 	sub.w	r4, r3, #64	@ 0x40
 8006226:	4b27      	ldr	r3, [pc, #156]	@ (80062c4 <decodeFrame+0x26c>)
 8006228:	89db      	ldrh	r3, [r3, #14]
 800622a:	4618      	mov	r0, r3
 800622c:	f7fe ffe0 	bl	80051f0 <getSensitivity>
 8006230:	4603      	mov	r3, r0
 8006232:	1ae3      	subs	r3, r4, r3
 8006234:	627b      	str	r3, [r7, #36]	@ 0x24
	LMIC.margin = m < 0 ? 0 : m > 254 ? 254 : m;
 8006236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006238:	2b00      	cmp	r3, #0
 800623a:	db05      	blt.n	8006248 <decodeFrame+0x1f0>
 800623c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623e:	2bfe      	cmp	r3, #254	@ 0xfe
 8006240:	bfa8      	it	ge
 8006242:	23fe      	movge	r3, #254	@ 0xfe
 8006244:	b2db      	uxtb	r3, r3
 8006246:	e000      	b.n	800624a <decodeFrame+0x1f2>
 8006248:	2300      	movs	r3, #0
 800624a:	4a1e      	ldr	r2, [pc, #120]	@ (80062c4 <decodeFrame+0x26c>)
 800624c:	f882 3124 	strb.w	r3, [r2, #292]	@ 0x124

	xref2u1_t opts = &d[OFF_DAT_OPTS];
 8006250:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006252:	3308      	adds	r3, #8
 8006254:	623b      	str	r3, [r7, #32]
	int oidx = 0;
 8006256:	2300      	movs	r3, #0
 8006258:	653b      	str	r3, [r7, #80]	@ 0x50
	while (oidx < olen) {
 800625a:	e1b5      	b.n	80065c8 <decodeFrame+0x570>
		switch (opts[oidx]) {
 800625c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800625e:	6a3a      	ldr	r2, [r7, #32]
 8006260:	4413      	add	r3, r2
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	3b02      	subs	r3, #2
 8006266:	2b10      	cmp	r3, #16
 8006268:	f200 81ba 	bhi.w	80065e0 <decodeFrame+0x588>
 800626c:	a201      	add	r2, pc, #4	@ (adr r2, 8006274 <decodeFrame+0x21c>)
 800626e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006272:	bf00      	nop
 8006274:	080062b9 	.word	0x080062b9
 8006278:	080062cd 	.word	0x080062cd
 800627c:	0800642b 	.word	0x0800642b
 8006280:	080063a7 	.word	0x080063a7
 8006284:	08006397 	.word	0x08006397
 8006288:	08006479 	.word	0x08006479
 800628c:	080065e1 	.word	0x080065e1
 8006290:	080065e1 	.word	0x080065e1
 8006294:	080065e1 	.word	0x080065e1
 8006298:	080065e1 	.word	0x080065e1
 800629c:	080065e1 	.word	0x080065e1
 80062a0:	080065e1 	.word	0x080065e1
 80062a4:	080065e1 	.word	0x080065e1
 80062a8:	080065e1 	.word	0x080065e1
 80062ac:	080065e1 	.word	0x080065e1
 80062b0:	08006505 	.word	0x08006505
 80062b4:	08006547 	.word	0x08006547
		case MCMD_LCHK_ANS: {
			//int gwmargin = opts[oidx+1];
			//int ngws = opts[oidx+2];
			oidx += 3;
 80062b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062ba:	3303      	adds	r3, #3
 80062bc:	653b      	str	r3, [r7, #80]	@ 0x50
			continue;
 80062be:	e183      	b.n	80065c8 <decodeFrame+0x570>
 80062c0:	20000484 	.word	0x20000484
 80062c4:	2000033c 	.word	0x2000033c
 80062c8:	20000430 	.word	0x20000430
		}
		case MCMD_LADR_REQ: {
			u1_t p1 = opts[oidx + 1];            // txpow + DR
 80062cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062ce:	3301      	adds	r3, #1
 80062d0:	6a3a      	ldr	r2, [r7, #32]
 80062d2:	4413      	add	r3, r2
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	72bb      	strb	r3, [r7, #10]
			u2_t chmap = os_rlsbf2(&opts[oidx + 2]); // list of enabled channels
 80062d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062da:	3302      	adds	r3, #2
 80062dc:	6a3a      	ldr	r2, [r7, #32]
 80062de:	4413      	add	r3, r2
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fe fd38 	bl	8004d56 <os_rlsbf2>
 80062e6:	4603      	mov	r3, r0
 80062e8:	813b      	strh	r3, [r7, #8]
			u1_t chpage = opts[oidx + 4] & MCMD_LADR_CHPAGE_MASK; // channel page
 80062ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062ec:	3304      	adds	r3, #4
 80062ee:	6a3a      	ldr	r2, [r7, #32]
 80062f0:	4413      	add	r3, r2
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	f023 030f 	bic.w	r3, r3, #15
 80062f8:	71fb      	strb	r3, [r7, #7]
			u1_t uprpt = opts[oidx + 4] & MCMD_LADR_REPEAT_MASK; // up repeat count
 80062fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062fc:	3304      	adds	r3, #4
 80062fe:	6a3a      	ldr	r2, [r7, #32]
 8006300:	4413      	add	r3, r2
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	f003 030f 	and.w	r3, r3, #15
 8006308:	71bb      	strb	r3, [r7, #6]
			oidx += 5;
 800630a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800630c:	3305      	adds	r3, #5
 800630e:	653b      	str	r3, [r7, #80]	@ 0x50

			LMIC.ladrAns = 0x80
 8006310:	4bb0      	ldr	r3, [pc, #704]	@ (80065d4 <decodeFrame+0x57c>)
 8006312:	2287      	movs	r2, #135	@ 0x87
 8006314:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
					|     // Include an answer into next frame up
					MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK
					| MCMD_LADR_ANS_DRACK;
			if (!mapChannels(chpage, chmap))
 8006318:	893a      	ldrh	r2, [r7, #8]
 800631a:	79fb      	ldrb	r3, [r7, #7]
 800631c:	4611      	mov	r1, r2
 800631e:	4618      	mov	r0, r3
 8006320:	f7ff fb84 	bl	8005a2c <mapChannels>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d108      	bne.n	800633c <decodeFrame+0x2e4>
				LMIC.ladrAns &= ~MCMD_LADR_ANS_CHACK;
 800632a:	4baa      	ldr	r3, [pc, #680]	@ (80065d4 <decodeFrame+0x57c>)
 800632c:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8006330:	f023 0301 	bic.w	r3, r3, #1
 8006334:	b2da      	uxtb	r2, r3
 8006336:	4ba7      	ldr	r3, [pc, #668]	@ (80065d4 <decodeFrame+0x57c>)
 8006338:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
			dr_t dr = (dr_t) (p1 >> MCMD_LADR_DR_SHIFT);
 800633c:	7abb      	ldrb	r3, [r7, #10]
 800633e:	091b      	lsrs	r3, r3, #4
 8006340:	717b      	strb	r3, [r7, #5]
			if (!validDR(dr)) {
 8006342:	797b      	ldrb	r3, [r7, #5]
 8006344:	4618      	mov	r0, r3
 8006346:	f7fe fcd7 	bl	8004cf8 <validDR>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d108      	bne.n	8006362 <decodeFrame+0x30a>
				LMIC.ladrAns &= ~MCMD_LADR_ANS_DRACK;
 8006350:	4ba0      	ldr	r3, [pc, #640]	@ (80065d4 <decodeFrame+0x57c>)
 8006352:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8006356:	f023 0302 	bic.w	r3, r3, #2
 800635a:	b2da      	uxtb	r2, r3
 800635c:	4b9d      	ldr	r3, [pc, #628]	@ (80065d4 <decodeFrame+0x57c>)
 800635e:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
				EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
								e_.eui = MAIN::CDEV->getEui(),
								e_.info = Base::lsbf4(&d[pend]),
								e_.info2 = Base::msbf4(&opts[oidx-4])));
			}
			if ((LMIC.ladrAns & 0x7F)
 8006362:	4b9c      	ldr	r3, [pc, #624]	@ (80065d4 <decodeFrame+0x57c>)
 8006364:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8006368:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800636c:	2b07      	cmp	r3, #7
 800636e:	d10d      	bne.n	800638c <decodeFrame+0x334>
					== (MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK
							| MCMD_LADR_ANS_DRACK)) {
				// Nothing went wrong - use settings
				LMIC.upRepeat = uprpt;
 8006370:	4a98      	ldr	r2, [pc, #608]	@ (80065d4 <decodeFrame+0x57c>)
 8006372:	79bb      	ldrb	r3, [r7, #6]
 8006374:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
				setDrTxpow(DRCHG_NWKCMD, dr, pow2dBm(p1));
 8006378:	7abb      	ldrb	r3, [r7, #10]
 800637a:	f003 030f 	and.w	r3, r3, #15
 800637e:	4a96      	ldr	r2, [pc, #600]	@ (80065d8 <decodeFrame+0x580>)
 8006380:	56d2      	ldrsb	r2, [r2, r3]
 8006382:	797b      	ldrb	r3, [r7, #5]
 8006384:	4619      	mov	r1, r3
 8006386:	2004      	movs	r0, #4
 8006388:	f7ff fa00 	bl	800578c <setDrTxpow>
			}
			LMIC.adrChanged = 1;  // Trigger an ACK to NWK
 800638c:	4b91      	ldr	r3, [pc, #580]	@ (80065d4 <decodeFrame+0x57c>)
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
			continue;
 8006394:	e118      	b.n	80065c8 <decodeFrame+0x570>
		}
		case MCMD_DEVS_REQ: {
			LMIC.devsAns = 1;
 8006396:	4b8f      	ldr	r3, [pc, #572]	@ (80065d4 <decodeFrame+0x57c>)
 8006398:	2201      	movs	r2, #1
 800639a:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
			oidx += 1;
 800639e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063a0:	3301      	adds	r3, #1
 80063a2:	653b      	str	r3, [r7, #80]	@ 0x50
			continue;
 80063a4:	e110      	b.n	80065c8 <decodeFrame+0x570>
		}
		case MCMD_DN2P_SET: {
			dr_t dr = (dr_t) (opts[oidx + 1] & 0x0F);
 80063a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063a8:	3301      	adds	r3, #1
 80063aa:	6a3a      	ldr	r2, [r7, #32]
 80063ac:	4413      	add	r3, r2
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	f003 030f 	and.w	r3, r3, #15
 80063b4:	74bb      	strb	r3, [r7, #18]
			u4_t freq = convFreq(&opts[oidx + 2]);
 80063b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063b8:	3302      	adds	r3, #2
 80063ba:	6a3a      	ldr	r2, [r7, #32]
 80063bc:	4413      	add	r3, r2
 80063be:	4618      	mov	r0, r3
 80063c0:	f7ff fb12 	bl	80059e8 <convFreq>
 80063c4:	60f8      	str	r0, [r7, #12]
			oidx += 5;
 80063c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063c8:	3305      	adds	r3, #5
 80063ca:	653b      	str	r3, [r7, #80]	@ 0x50
			LMIC.dn2Ans = 0x80;   // answer pending
 80063cc:	4b81      	ldr	r3, [pc, #516]	@ (80065d4 <decodeFrame+0x57c>)
 80063ce:	2280      	movs	r2, #128	@ 0x80
 80063d0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
			if (validDR(dr))
 80063d4:	7cbb      	ldrb	r3, [r7, #18]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7fe fc8e 	bl	8004cf8 <validDR>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d008      	beq.n	80063f4 <decodeFrame+0x39c>
				LMIC.dn2Ans |= MCMD_DN2P_ANS_DRACK;
 80063e2:	4b7c      	ldr	r3, [pc, #496]	@ (80065d4 <decodeFrame+0x57c>)
 80063e4:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80063e8:	f043 0302 	orr.w	r3, r3, #2
 80063ec:	b2da      	uxtb	r2, r3
 80063ee:	4b79      	ldr	r3, [pc, #484]	@ (80065d4 <decodeFrame+0x57c>)
 80063f0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
			if (freq != 0)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d008      	beq.n	800640c <decodeFrame+0x3b4>
				LMIC.dn2Ans |= MCMD_DN2P_ANS_CHACK;
 80063fa:	4b76      	ldr	r3, [pc, #472]	@ (80065d4 <decodeFrame+0x57c>)
 80063fc:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8006400:	f043 0301 	orr.w	r3, r3, #1
 8006404:	b2da      	uxtb	r2, r3
 8006406:	4b73      	ldr	r3, [pc, #460]	@ (80065d4 <decodeFrame+0x57c>)
 8006408:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
			if (LMIC.dn2Ans
 800640c:	4b71      	ldr	r3, [pc, #452]	@ (80065d4 <decodeFrame+0x57c>)
 800640e:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8006412:	2b83      	cmp	r3, #131	@ 0x83
 8006414:	f040 80d7 	bne.w	80065c6 <decodeFrame+0x56e>
					== (0x80 | MCMD_DN2P_ANS_DRACK | MCMD_DN2P_ANS_CHACK)) {
				LMIC.dn2Dr = dr;
 8006418:	4a6e      	ldr	r2, [pc, #440]	@ (80065d4 <decodeFrame+0x57c>)
 800641a:	7cbb      	ldrb	r3, [r7, #18]
 800641c:	f882 312b 	strb.w	r3, [r2, #299]	@ 0x12b
				LMIC.dn2Freq = freq;
 8006420:	4a6c      	ldr	r2, [pc, #432]	@ (80065d4 <decodeFrame+0x57c>)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
				DO_DEVDB(LMIC.dn2Dr,dn2Dr);DO_DEVDB(LMIC.dn2Freq,dn2Freq);
			}
			continue;
 8006428:	e0cd      	b.n	80065c6 <decodeFrame+0x56e>
		}
		case MCMD_DCAP_REQ: {
			u1_t cap = opts[oidx + 1];
 800642a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800642c:	3301      	adds	r3, #1
 800642e:	6a3a      	ldr	r2, [r7, #32]
 8006430:	4413      	add	r3, r2
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	72fb      	strb	r3, [r7, #11]
			oidx += 2;
 8006436:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006438:	3302      	adds	r3, #2
 800643a:	653b      	str	r3, [r7, #80]	@ 0x50
			// A value cap=0xFF means device is OFF unless enabled again manually.
			if (cap == 0xFF)
 800643c:	7afb      	ldrb	r3, [r7, #11]
 800643e:	2bff      	cmp	r3, #255	@ 0xff
 8006440:	d108      	bne.n	8006454 <decodeFrame+0x3fc>
				LMIC.opmode |= OP_SHUTDOWN;  // stop any sending
 8006442:	4b64      	ldr	r3, [pc, #400]	@ (80065d4 <decodeFrame+0x57c>)
 8006444:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006448:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800644c:	b29a      	uxth	r2, r3
 800644e:	4b61      	ldr	r3, [pc, #388]	@ (80065d4 <decodeFrame+0x57c>)
 8006450:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			LMIC.globalDutyRate = cap & 0xF;
 8006454:	7afb      	ldrb	r3, [r7, #11]
 8006456:	f003 030f 	and.w	r3, r3, #15
 800645a:	b2da      	uxtb	r2, r3
 800645c:	4b5d      	ldr	r3, [pc, #372]	@ (80065d4 <decodeFrame+0x57c>)
 800645e:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
			LMIC.globalDutyAvail = os_getTime();
 8006462:	f001 fea9 	bl	80081b8 <os_getTime>
 8006466:	4603      	mov	r3, r0
 8006468:	4a5a      	ldr	r2, [pc, #360]	@ (80065d4 <decodeFrame+0x57c>)
 800646a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
			DO_DEVDB(cap,dutyCap);
			LMIC.dutyCapAns = 1;
 800646e:	4b59      	ldr	r3, [pc, #356]	@ (80065d4 <decodeFrame+0x57c>)
 8006470:	2201      	movs	r2, #1
 8006472:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
			continue;
 8006476:	e0a7      	b.n	80065c8 <decodeFrame+0x570>
		}
		case MCMD_SNCH_REQ: {
			u1_t chidx = opts[oidx + 1];  // channel
 8006478:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800647a:	3301      	adds	r3, #1
 800647c:	6a3a      	ldr	r2, [r7, #32]
 800647e:	4413      	add	r3, r2
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	76fb      	strb	r3, [r7, #27]
			u4_t freq = convFreq(&opts[oidx + 2]); // freq
 8006484:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006486:	3302      	adds	r3, #2
 8006488:	6a3a      	ldr	r2, [r7, #32]
 800648a:	4413      	add	r3, r2
 800648c:	4618      	mov	r0, r3
 800648e:	f7ff faab 	bl	80059e8 <convFreq>
 8006492:	6178      	str	r0, [r7, #20]
			u1_t drs = opts[oidx + 5];  // datarate span
 8006494:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006496:	3305      	adds	r3, #5
 8006498:	6a3a      	ldr	r2, [r7, #32]
 800649a:	4413      	add	r3, r2
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	74fb      	strb	r3, [r7, #19]
			LMIC.snchAns = 0x80;
 80064a0:	4b4c      	ldr	r3, [pc, #304]	@ (80065d4 <decodeFrame+0x57c>)
 80064a2:	2280      	movs	r2, #128	@ 0x80
 80064a4:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
			if (freq != 0
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d026      	beq.n	80064fc <decodeFrame+0x4a4>
					&& LMIC_setupChannel(chidx, freq,
							DR_RANGE_MAP(drs & 0xF, drs >> 4), -1))
 80064ae:	7cfb      	ldrb	r3, [r7, #19]
 80064b0:	f003 030f 	and.w	r3, r3, #15
 80064b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80064b8:	fa02 f303 	lsl.w	r3, r2, r3
 80064bc:	b21a      	sxth	r2, r3
 80064be:	7cfb      	ldrb	r3, [r7, #19]
 80064c0:	091b      	lsrs	r3, r3, #4
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	f1c3 030f 	rsb	r3, r3, #15
 80064c8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80064cc:	fa41 f303 	asr.w	r3, r1, r3
 80064d0:	b21b      	sxth	r3, r3
 80064d2:	4013      	ands	r3, r2
 80064d4:	b21b      	sxth	r3, r3
					&& LMIC_setupChannel(chidx, freq,
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	7ef8      	ldrb	r0, [r7, #27]
 80064da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80064de:	6979      	ldr	r1, [r7, #20]
 80064e0:	f7ff fa08 	bl	80058f4 <LMIC_setupChannel>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d008      	beq.n	80064fc <decodeFrame+0x4a4>
				LMIC.snchAns |= MCMD_SNCH_ANS_DRACK | MCMD_SNCH_ANS_FQACK;
 80064ea:	4b3a      	ldr	r3, [pc, #232]	@ (80065d4 <decodeFrame+0x57c>)
 80064ec:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 80064f0:	f043 0303 	orr.w	r3, r3, #3
 80064f4:	b2da      	uxtb	r2, r3
 80064f6:	4b37      	ldr	r3, [pc, #220]	@ (80065d4 <decodeFrame+0x57c>)
 80064f8:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
			oidx += 6;
 80064fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064fe:	3306      	adds	r3, #6
 8006500:	653b      	str	r3, [r7, #80]	@ 0x50
			continue;
 8006502:	e061      	b.n	80065c8 <decodeFrame+0x570>
		}
		case MCMD_PING_SET: {
			u4_t freq = convFreq(&opts[oidx + 1]);
 8006504:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006506:	3301      	adds	r3, #1
 8006508:	6a3a      	ldr	r2, [r7, #32]
 800650a:	4413      	add	r3, r2
 800650c:	4618      	mov	r0, r3
 800650e:	f7ff fa6b 	bl	80059e8 <convFreq>
 8006512:	61f8      	str	r0, [r7, #28]
			oidx += 4;
 8006514:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006516:	3304      	adds	r3, #4
 8006518:	653b      	str	r3, [r7, #80]	@ 0x50
			u1_t flags = 0x80;
 800651a:	2380      	movs	r3, #128	@ 0x80
 800651c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			if (freq != 0) {
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d009      	beq.n	800653a <decodeFrame+0x4e2>
				flags |= MCMD_PING_ANS_FQACK;
 8006526:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800652a:	f043 0301 	orr.w	r3, r3, #1
 800652e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
				LMIC.ping.freq = freq;
 8006532:	4a28      	ldr	r2, [pc, #160]	@ (80065d4 <decodeFrame+0x57c>)
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
				DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);DO_DEVDB(LMIC.ping.freq, pingFreq);DO_DEVDB(LMIC.ping.dr, pingDr);
			}
			LMIC.pingSetAns = flags;
 800653a:	4a26      	ldr	r2, [pc, #152]	@ (80065d4 <decodeFrame+0x57c>)
 800653c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006540:	f882 3133 	strb.w	r3, [r2, #307]	@ 0x133
			continue;
 8006544:	e040      	b.n	80065c8 <decodeFrame+0x570>
		}
		case MCMD_BCNI_ANS: {
			// Ignore if tracking already enabled
			if ((LMIC.opmode & OP_TRACK) == 0) {
 8006546:	4b23      	ldr	r3, [pc, #140]	@ (80065d4 <decodeFrame+0x57c>)
 8006548:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	2b00      	cmp	r3, #0
 8006552:	d134      	bne.n	80065be <decodeFrame+0x566>
				LMIC.bcnChnl = opts[oidx + 3];
 8006554:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006556:	3303      	adds	r3, #3
 8006558:	6a3a      	ldr	r2, [r7, #32]
 800655a:	4413      	add	r3, r2
 800655c:	781a      	ldrb	r2, [r3, #0]
 800655e:	4b1d      	ldr	r3, [pc, #116]	@ (80065d4 <decodeFrame+0x57c>)
 8006560:	f883 2188 	strb.w	r2, [r3, #392]	@ 0x188
				// Enable tracking - bcninfoTries
				LMIC.opmode |= OP_TRACK;
 8006564:	4b1b      	ldr	r3, [pc, #108]	@ (80065d4 <decodeFrame+0x57c>)
 8006566:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800656a:	f043 0302 	orr.w	r3, r3, #2
 800656e:	b29a      	uxth	r2, r3
 8006570:	4b18      	ldr	r3, [pc, #96]	@ (80065d4 <decodeFrame+0x57c>)
 8006572:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
				// Cleared later in txComplete handling - triggers EV_BEACON_FOUND
				ASSERT(LMIC.bcninfoTries != 0);
 8006576:	4b17      	ldr	r3, [pc, #92]	@ (80065d4 <decodeFrame+0x57c>)
 8006578:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 800657c:	2b00      	cmp	r3, #0
 800657e:	d101      	bne.n	8006584 <decodeFrame+0x52c>
 8006580:	f7fe fa42 	bl	8004a08 <hal_failed>
				// Setup RX parameters
				LMIC.bcninfo.txtime =
						(LMIC.rxtime
 8006584:	4b13      	ldr	r3, [pc, #76]	@ (80065d4 <decodeFrame+0x57c>)
 8006586:	685c      	ldr	r4, [r3, #4]
								+ ms2osticks(
 8006588:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800658a:	3301      	adds	r3, #1
 800658c:	6a3a      	ldr	r2, [r7, #32]
 800658e:	4413      	add	r3, r2
 8006590:	4618      	mov	r0, r3
 8006592:	f7fe fbe0 	bl	8004d56 <os_rlsbf2>
 8006596:	4603      	mov	r3, r0
 8006598:	461a      	mov	r2, r3
 800659a:	4613      	mov	r3, r2
 800659c:	011b      	lsls	r3, r3, #4
 800659e:	1a9b      	subs	r3, r3, r2
 80065a0:	019b      	lsls	r3, r3, #6
 80065a2:	18e2      	adds	r2, r4, r3
										os_rlsbf2(&opts[oidx + 1])
												* MCMD_BCNI_TUNIT)
								+ ms2osticksCeil(MCMD_BCNI_TUNIT / 2)
								- BCN_INTV_osticks);
 80065a4:	4b0d      	ldr	r3, [pc, #52]	@ (80065dc <decodeFrame+0x584>)
 80065a6:	4413      	add	r3, r2
				LMIC.bcninfo.txtime =
 80065a8:	4a0a      	ldr	r2, [pc, #40]	@ (80065d4 <decodeFrame+0x57c>)
 80065aa:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
				LMIC.bcninfo.flags = 0; // txtime above cannot be used as reference (BCN_PARTIAL|BCN_FULL cleared)
 80065ae:	4b09      	ldr	r3, [pc, #36]	@ (80065d4 <decodeFrame+0x57c>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
				calcBcnRxWindowFromMillis(MCMD_BCNI_TUNIT, 1); // error of +/-N ms 
 80065b6:	2101      	movs	r1, #1
 80065b8:	201e      	movs	r0, #30
 80065ba:	f7fe ff25 	bl	8005408 <calcBcnRxWindowFromMillis>
								e_.info = (LMIC.missedBcns |
										(osticks2us(LMIC.bcninfo.txtime + BCN_INTV_osticks
														- LMIC.bcnRxtime) << 8)),
								e_.time = MAIN::CDEV->ostime2ustime(LMIC.bcninfo.txtime + BCN_INTV_osticks)));
			}
			oidx += 4;
 80065be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065c0:	3304      	adds	r3, #4
 80065c2:	653b      	str	r3, [r7, #80]	@ 0x50
			continue;
 80065c4:	e000      	b.n	80065c8 <decodeFrame+0x570>
			continue;
 80065c6:	bf00      	nop
	while (oidx < olen) {
 80065c8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80065ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065cc:	429a      	cmp	r2, r3
 80065ce:	f6ff ae45 	blt.w	800625c <decodeFrame+0x204>
 80065d2:	e006      	b.n	80065e2 <decodeFrame+0x58a>
 80065d4:	2000033c 	.word	0x2000033c
 80065d8:	0801131c 	.word	0x0801131c
 80065dc:	ffc181e0 	.word	0xffc181e0
		}
		}EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = Base::lsbf4(&d[pend]),
						e_.info2 = Base::msbf4(&opts[oidx])));
		break;
 80065e0:	bf00      	nop
		EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = 0x1000000 + (oidx) + (olen<<8)));
	}

	if (!replayConf) {
 80065e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d11d      	bne.n	8006624 <decodeFrame+0x5cc>
		// Handle payload only if not a replay
		// Decrypt payload - if any
		if (port >= 0 && pend - poff > 0)
 80065e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	db1a      	blt.n	8006624 <decodeFrame+0x5cc>
 80065ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	dd15      	ble.n	8006624 <decodeFrame+0x5cc>
			aes_cipher(port <= 0 ? LMIC.nwkKey : LMIC.artKey, LMIC.devaddr,
 80065f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	dc01      	bgt.n	8006602 <decodeFrame+0x5aa>
 80065fe:	482e      	ldr	r0, [pc, #184]	@ (80066b8 <decodeFrame+0x660>)
 8006600:	e000      	b.n	8006604 <decodeFrame+0x5ac>
 8006602:	482e      	ldr	r0, [pc, #184]	@ (80066bc <decodeFrame+0x664>)
 8006604:	4b2e      	ldr	r3, [pc, #184]	@ (80066c0 <decodeFrame+0x668>)
 8006606:	f8d3 4114 	ldr.w	r4, [r3, #276]	@ 0x114
 800660a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800660c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800660e:	4413      	add	r3, r2
 8006610:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006612:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006614:	1a8a      	subs	r2, r1, r2
 8006616:	9201      	str	r2, [sp, #4]
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	2301      	movs	r3, #1
 800661c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800661e:	4621      	mov	r1, r4
 8006620:	f7fe fd66 	bl	80050f0 <aes_cipher>
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = Base::lsbf4(&d[pend]),
						e_.info2 = seqno));
	}

	if ( // NWK acks but we don't have a frame pending
 8006624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006626:	2b00      	cmp	r3, #0
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = seqno,
						e_.info2 = ackup));
	}

	if (LMIC.txCnt != 0) // we requested an ACK
 8006628:	4b25      	ldr	r3, [pc, #148]	@ (80066c0 <decodeFrame+0x668>)
 800662a:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 800662e:	2b00      	cmp	r3, #0
 8006630:	d010      	beq.n	8006654 <decodeFrame+0x5fc>
		LMIC.txrxFlags |= ackup ? TXRX_ACK : TXRX_NACK;
 8006632:	4b23      	ldr	r3, [pc, #140]	@ (80066c0 <decodeFrame+0x668>)
 8006634:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8006638:	b25b      	sxtb	r3, r3
 800663a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800663c:	2a00      	cmp	r2, #0
 800663e:	d002      	beq.n	8006646 <decodeFrame+0x5ee>
 8006640:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 8006644:	e000      	b.n	8006648 <decodeFrame+0x5f0>
 8006646:	2240      	movs	r2, #64	@ 0x40
 8006648:	4313      	orrs	r3, r2
 800664a:	b25b      	sxtb	r3, r3
 800664c:	b2da      	uxtb	r2, r3
 800664e:	4b1c      	ldr	r3, [pc, #112]	@ (80066c0 <decodeFrame+0x668>)
 8006650:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145

	if (port < 0) {
 8006654:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006656:	2b00      	cmp	r3, #0
 8006658:	da12      	bge.n	8006680 <decodeFrame+0x628>
		LMIC.txrxFlags |= TXRX_NOPORT;
 800665a:	4b19      	ldr	r3, [pc, #100]	@ (80066c0 <decodeFrame+0x668>)
 800665c:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8006660:	f043 0320 	orr.w	r3, r3, #32
 8006664:	b2da      	uxtb	r2, r3
 8006666:	4b16      	ldr	r3, [pc, #88]	@ (80066c0 <decodeFrame+0x668>)
 8006668:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		LMIC.dataBeg = poff;
 800666c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800666e:	b2da      	uxtb	r2, r3
 8006670:	4b13      	ldr	r3, [pc, #76]	@ (80066c0 <decodeFrame+0x668>)
 8006672:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
		LMIC.dataLen = 0;
 8006676:	4b12      	ldr	r3, [pc, #72]	@ (80066c0 <decodeFrame+0x668>)
 8006678:	2200      	movs	r2, #0
 800667a:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 800667e:	e016      	b.n	80066ae <decodeFrame+0x656>
	} else {
		LMIC.txrxFlags |= TXRX_PORT;
 8006680:	4b0f      	ldr	r3, [pc, #60]	@ (80066c0 <decodeFrame+0x668>)
 8006682:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8006686:	f043 0310 	orr.w	r3, r3, #16
 800668a:	b2da      	uxtb	r2, r3
 800668c:	4b0c      	ldr	r3, [pc, #48]	@ (80066c0 <decodeFrame+0x668>)
 800668e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		LMIC.dataBeg = poff;
 8006692:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006694:	b2da      	uxtb	r2, r3
 8006696:	4b0a      	ldr	r3, [pc, #40]	@ (80066c0 <decodeFrame+0x668>)
 8006698:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
		LMIC.dataLen = pend - poff;
 800669c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800669e:	b2da      	uxtb	r2, r3
 80066a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	b2da      	uxtb	r2, r3
 80066a8:	4b05      	ldr	r3, [pc, #20]	@ (80066c0 <decodeFrame+0x668>)
 80066aa:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
	}
	return 1;
 80066ae:	2301      	movs	r3, #1
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3764      	adds	r7, #100	@ 0x64
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd90      	pop	{r4, r7, pc}
 80066b8:	20000430 	.word	0x20000430
 80066bc:	20000440 	.word	0x20000440
 80066c0:	2000033c 	.word	0x2000033c

080066c4 <setupRx2>:

// ================================================================================
// TX/RX transaction support

static void setupRx2(void)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	af00      	add	r7, sp, #0
	LMIC.txrxFlags = TXRX_DNW2;
 80066c8:	4b0d      	ldr	r3, [pc, #52]	@ (8006700 <setupRx2+0x3c>)
 80066ca:	2202      	movs	r2, #2
 80066cc:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	LMIC.rps = dndr2rps(LMIC.dn2Dr);
 80066d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006700 <setupRx2+0x3c>)
 80066d2:	f893 312b 	ldrb.w	r3, [r3, #299]	@ 0x12b
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7fe fae2 	bl	8004ca0 <dndr2rps>
 80066dc:	4603      	mov	r3, r0
 80066de:	461a      	mov	r2, r3
 80066e0:	4b07      	ldr	r3, [pc, #28]	@ (8006700 <setupRx2+0x3c>)
 80066e2:	81da      	strh	r2, [r3, #14]
	LMIC.freq = LMIC.dn2Freq;
 80066e4:	4b06      	ldr	r3, [pc, #24]	@ (8006700 <setupRx2+0x3c>)
 80066e6:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80066ea:	4a05      	ldr	r2, [pc, #20]	@ (8006700 <setupRx2+0x3c>)
 80066ec:	6093      	str	r3, [r2, #8]
	LMIC.dataLen = 0;
 80066ee:	4b04      	ldr	r3, [pc, #16]	@ (8006700 <setupRx2+0x3c>)
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
	os_radio(RADIO_RX);
 80066f6:	2002      	movs	r0, #2
 80066f8:	f002 fb84 	bl	8008e04 <os_radio>
}
 80066fc:	bf00      	nop
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	2000033c 	.word	0x2000033c

08006704 <schedRx2>:

static void schedRx2(ostime_t delay, osjobcb_t func)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
	// Add 1.5 symbols we need 5 out of 8. Try to sync 1.5 symbols into the preamble.
	LMIC.rxtime = LMIC.txend + delay
 800670e:	4b0e      	ldr	r3, [pc, #56]	@ (8006748 <schedRx2+0x44>)
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	18d1      	adds	r1, r2, r3
			+ (PAMBL_SYMS - MINRX_SYMS) * dr2hsym(LMIC.dn2Dr);
 8006716:	4b0c      	ldr	r3, [pc, #48]	@ (8006748 <schedRx2+0x44>)
 8006718:	f893 312b 	ldrb.w	r3, [r3, #299]	@ 0x12b
 800671c:	461a      	mov	r2, r3
 800671e:	4b0b      	ldr	r3, [pc, #44]	@ (800674c <schedRx2+0x48>)
 8006720:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006724:	4613      	mov	r3, r2
 8006726:	005b      	lsls	r3, r3, #1
 8006728:	4413      	add	r3, r2
 800672a:	440b      	add	r3, r1
	LMIC.rxtime = LMIC.txend + delay
 800672c:	4a06      	ldr	r2, [pc, #24]	@ (8006748 <schedRx2+0x44>)
 800672e:	6053      	str	r3, [r2, #4]
	os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 8006730:	4b05      	ldr	r3, [pc, #20]	@ (8006748 <schedRx2+0x44>)
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	3b40      	subs	r3, #64	@ 0x40
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	4619      	mov	r1, r3
 800673a:	4805      	ldr	r0, [pc, #20]	@ (8006750 <schedRx2+0x4c>)
 800673c:	f001 fda6 	bl	800828c <os_setTimedCallback>
}
 8006740:	bf00      	nop
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	2000033c 	.word	0x2000033c
 800674c:	08011350 	.word	0x08011350
 8006750:	20000350 	.word	0x20000350

08006754 <setupRx1>:

static void setupRx1(osjobcb_t func)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
	LMIC.txrxFlags = TXRX_DNW1;
 800675c:	4b0d      	ldr	r3, [pc, #52]	@ (8006794 <setupRx1+0x40>)
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	// Turn LMIC.rps from TX over to RX
	LMIC.rps = setNocrc(LMIC.rps, 1);
 8006764:	4b0b      	ldr	r3, [pc, #44]	@ (8006794 <setupRx1+0x40>)
 8006766:	89db      	ldrh	r3, [r3, #14]
 8006768:	2101      	movs	r1, #1
 800676a:	4618      	mov	r0, r3
 800676c:	f7fe fa49 	bl	8004c02 <setNocrc>
 8006770:	4603      	mov	r3, r0
 8006772:	461a      	mov	r2, r3
 8006774:	4b07      	ldr	r3, [pc, #28]	@ (8006794 <setupRx1+0x40>)
 8006776:	81da      	strh	r2, [r3, #14]
	LMIC.dataLen = 0;
 8006778:	4b06      	ldr	r3, [pc, #24]	@ (8006794 <setupRx1+0x40>)
 800677a:	2200      	movs	r2, #0
 800677c:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
	LMIC.osjob.func = func;
 8006780:	4a04      	ldr	r2, [pc, #16]	@ (8006794 <setupRx1+0x40>)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	61d3      	str	r3, [r2, #28]
	os_radio(RADIO_RX);
 8006786:	2002      	movs	r0, #2
 8006788:	f002 fb3c 	bl	8008e04 <os_radio>
}
 800678c:	bf00      	nop
 800678e:	3708      	adds	r7, #8
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	2000033c 	.word	0x2000033c

08006798 <txDone>:

// Called by HAL once TX complete and delivers exact end of TX time stamp in LMIC.rxtime
static void txDone(ostime_t delay, osjobcb_t func)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
	if ((LMIC.opmode & (OP_TRACK | OP_PINGABLE | OP_PINGINI))
 80067a2:	4b22      	ldr	r3, [pc, #136]	@ (800682c <txDone+0x94>)
 80067a4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80067a8:	461a      	mov	r2, r3
 80067aa:	f240 6302 	movw	r3, #1538	@ 0x602
 80067ae:	4013      	ands	r3, r2
 80067b0:	f240 4202 	movw	r2, #1026	@ 0x402
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d10b      	bne.n	80067d0 <txDone+0x38>
			== (OP_TRACK | OP_PINGABLE)) {
		rxschedInit(&LMIC.ping);    // note: reuses LMIC.frame buffer!
 80067b8:	481d      	ldr	r0, [pc, #116]	@ (8006830 <txDone+0x98>)
 80067ba:	f7fe feab 	bl	8005514 <rxschedInit>
		LMIC.opmode |= OP_PINGINI;
 80067be:	4b1b      	ldr	r3, [pc, #108]	@ (800682c <txDone+0x94>)
 80067c0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80067c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	4b18      	ldr	r3, [pc, #96]	@ (800682c <txDone+0x94>)
 80067cc:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	setRx1Params();
	// LMIC.rxsyms carries the TX datarate (can be != LMIC.datarate [confirm retries etc.])
	// Setup receive - LMIC.rxtime is preloaded with 1.5 symbols offset to tune
	// into the middle of the 8 symbols preamble.
#if defined(CFG_eu868)
	if ( /* TX datarate */LMIC.rxsyms == DR_FSK) {
 80067d0:	4b16      	ldr	r3, [pc, #88]	@ (800682c <txDone+0x94>)
 80067d2:	7c1b      	ldrb	r3, [r3, #16]
 80067d4:	2b07      	cmp	r3, #7
 80067d6:	d10a      	bne.n	80067ee <txDone+0x56>
		LMIC.rxtime = LMIC.txend + delay - PRERX_FSK * us2osticksRound(160);
 80067d8:	4b14      	ldr	r3, [pc, #80]	@ (800682c <txDone+0x94>)
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4413      	add	r3, r2
 80067e0:	3b05      	subs	r3, #5
 80067e2:	4a12      	ldr	r2, [pc, #72]	@ (800682c <txDone+0x94>)
 80067e4:	6053      	str	r3, [r2, #4]
		LMIC.rxsyms = RXLEN_FSK;
 80067e6:	4b11      	ldr	r3, [pc, #68]	@ (800682c <txDone+0x94>)
 80067e8:	2208      	movs	r2, #8
 80067ea:	741a      	strb	r2, [r3, #16]
 80067ec:	e012      	b.n	8006814 <txDone+0x7c>
	} else
#endif
	{
		LMIC.rxtime = LMIC.txend + delay
 80067ee:	4b0f      	ldr	r3, [pc, #60]	@ (800682c <txDone+0x94>)
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	18d1      	adds	r1, r2, r3
				+ (PAMBL_SYMS - MINRX_SYMS) * dr2hsym(LMIC.dndr);
 80067f6:	4b0d      	ldr	r3, [pc, #52]	@ (800682c <txDone+0x94>)
 80067f8:	7c5b      	ldrb	r3, [r3, #17]
 80067fa:	461a      	mov	r2, r3
 80067fc:	4b0d      	ldr	r3, [pc, #52]	@ (8006834 <txDone+0x9c>)
 80067fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006802:	4613      	mov	r3, r2
 8006804:	005b      	lsls	r3, r3, #1
 8006806:	4413      	add	r3, r2
 8006808:	440b      	add	r3, r1
		LMIC.rxtime = LMIC.txend + delay
 800680a:	4a08      	ldr	r2, [pc, #32]	@ (800682c <txDone+0x94>)
 800680c:	6053      	str	r3, [r2, #4]
		LMIC.rxsyms = MINRX_SYMS;
 800680e:	4b07      	ldr	r3, [pc, #28]	@ (800682c <txDone+0x94>)
 8006810:	2205      	movs	r2, #5
 8006812:	741a      	strb	r2, [r3, #16]
	}
	os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 8006814:	4b05      	ldr	r3, [pc, #20]	@ (800682c <txDone+0x94>)
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	3b40      	subs	r3, #64	@ 0x40
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	4619      	mov	r1, r3
 800681e:	4806      	ldr	r0, [pc, #24]	@ (8006838 <txDone+0xa0>)
 8006820:	f001 fd34 	bl	800828c <os_setTimedCallback>
}
 8006824:	bf00      	nop
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	2000033c 	.word	0x2000033c
 8006830:	20000470 	.word	0x20000470
 8006834:	08011350 	.word	0x08011350
 8006838:	20000350 	.word	0x20000350

0800683c <onJoinFailed>:

// ======================================== Join frames

static void onJoinFailed(xref2osjob_t osjob)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
	// Notify app - must call LMIC_reset() to stop joining
	// otherwise join procedure continues.
	reportEvent(EV_JOIN_FAILED);
 8006844:	2008      	movs	r0, #8
 8006846:	f7ff faef 	bl	8005e28 <reportEvent>
}
 800684a:	bf00      	nop
 800684c:	3708      	adds	r7, #8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
	...

08006854 <processJoinAccept>:

static bit_t processJoinAccept(void)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af00      	add	r7, sp, #0
	ASSERT(LMIC.txrxFlags != TXRX_DNW1 || LMIC.dataLen != 0);
 800685a:	4b99      	ldr	r3, [pc, #612]	@ (8006ac0 <processJoinAccept+0x26c>)
 800685c:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8006860:	2b01      	cmp	r3, #1
 8006862:	d106      	bne.n	8006872 <processJoinAccept+0x1e>
 8006864:	4b96      	ldr	r3, [pc, #600]	@ (8006ac0 <processJoinAccept+0x26c>)
 8006866:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <processJoinAccept+0x1e>
 800686e:	f7fe f8cb 	bl	8004a08 <hal_failed>
	ASSERT((LMIC.opmode & OP_TXRXPEND) != 0);
 8006872:	4b93      	ldr	r3, [pc, #588]	@ (8006ac0 <processJoinAccept+0x26c>)
 8006874:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006878:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <processJoinAccept+0x30>
 8006880:	f7fe f8c2 	bl	8004a08 <hal_failed>

	if (LMIC.dataLen == 0) {
 8006884:	4b8e      	ldr	r3, [pc, #568]	@ (8006ac0 <processJoinAccept+0x26c>)
 8006886:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 800688a:	2b00      	cmp	r3, #0
 800688c:	d14c      	bne.n	8006928 <processJoinAccept+0xd4>
		nojoinframe: if ((LMIC.opmode & OP_JOINING) == 0) {
 800688e:	bf00      	nop
 8006890:	e000      	b.n	8006894 <processJoinAccept+0x40>
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = dlen < 4 ? 0 : mic,
						e_.info2 = hdr + (dlen<<8)));
		badframe: if ((LMIC.txrxFlags & TXRX_DNW1) != 0)
			return 0;
		goto nojoinframe;
 8006892:	bf00      	nop
		nojoinframe: if ((LMIC.opmode & OP_JOINING) == 0) {
 8006894:	4b8a      	ldr	r3, [pc, #552]	@ (8006ac0 <processJoinAccept+0x26c>)
 8006896:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800689a:	f003 0304 	and.w	r3, r3, #4
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d123      	bne.n	80068ea <processJoinAccept+0x96>
			ASSERT((LMIC.opmode & OP_REJOIN) != 0);
 80068a2:	4b87      	ldr	r3, [pc, #540]	@ (8006ac0 <processJoinAccept+0x26c>)
 80068a4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80068a8:	f003 0320 	and.w	r3, r3, #32
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d101      	bne.n	80068b4 <processJoinAccept+0x60>
 80068b0:	f7fe f8aa 	bl	8004a08 <hal_failed>
			LMIC.opmode &= ~(OP_REJOIN | OP_TXRXPEND);
 80068b4:	4b82      	ldr	r3, [pc, #520]	@ (8006ac0 <processJoinAccept+0x26c>)
 80068b6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80068ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80068be:	b29a      	uxth	r2, r3
 80068c0:	4b7f      	ldr	r3, [pc, #508]	@ (8006ac0 <processJoinAccept+0x26c>)
 80068c2:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			if (LMIC.rejoinCnt < 10)
 80068c6:	4b7e      	ldr	r3, [pc, #504]	@ (8006ac0 <processJoinAccept+0x26c>)
 80068c8:	f893 30b2 	ldrb.w	r3, [r3, #178]	@ 0xb2
 80068cc:	2b09      	cmp	r3, #9
 80068ce:	d807      	bhi.n	80068e0 <processJoinAccept+0x8c>
				LMIC.rejoinCnt++;
 80068d0:	4b7b      	ldr	r3, [pc, #492]	@ (8006ac0 <processJoinAccept+0x26c>)
 80068d2:	f893 30b2 	ldrb.w	r3, [r3, #178]	@ 0xb2
 80068d6:	3301      	adds	r3, #1
 80068d8:	b2da      	uxtb	r2, r3
 80068da:	4b79      	ldr	r3, [pc, #484]	@ (8006ac0 <processJoinAccept+0x26c>)
 80068dc:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
			reportEvent(EV_REJOIN_FAILED);
 80068e0:	2009      	movs	r0, #9
 80068e2:	f7ff faa1 	bl	8005e28 <reportEvent>
			return 1;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e0e6      	b.n	8006ab8 <processJoinAccept+0x264>
		LMIC.opmode &= ~OP_TXRXPEND;
 80068ea:	4b75      	ldr	r3, [pc, #468]	@ (8006ac0 <processJoinAccept+0x26c>)
 80068ec:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80068f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	4b72      	ldr	r3, [pc, #456]	@ (8006ac0 <processJoinAccept+0x26c>)
 80068f8:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		ostime_t delay = nextJoinState();
 80068fc:	f7ff fa22 	bl	8005d44 <nextJoinState>
 8006900:	6078      	str	r0, [r7, #4]
		os_setTimedCallback(&LMIC.osjob, os_getTime() + delay,
 8006902:	f001 fc59 	bl	80081b8 <os_getTime>
 8006906:	4602      	mov	r2, r0
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	18d1      	adds	r1, r2, r3
				(delay & 1) != 0 ? FUNC_ADDR(onJoinFailed) // one JOIN iteration done and failed
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f003 0301 	and.w	r3, r3, #1
		os_setTimedCallback(&LMIC.osjob, os_getTime() + delay,
 8006912:	2b00      	cmp	r3, #0
 8006914:	d001      	beq.n	800691a <processJoinAccept+0xc6>
 8006916:	4b6b      	ldr	r3, [pc, #428]	@ (8006ac4 <processJoinAccept+0x270>)
 8006918:	e000      	b.n	800691c <processJoinAccept+0xc8>
 800691a:	4b6b      	ldr	r3, [pc, #428]	@ (8006ac8 <processJoinAccept+0x274>)
 800691c:	461a      	mov	r2, r3
 800691e:	486b      	ldr	r0, [pc, #428]	@ (8006acc <processJoinAccept+0x278>)
 8006920:	f001 fcb4 	bl	800828c <os_setTimedCallback>
		return 1;
 8006924:	2301      	movs	r3, #1
 8006926:	e0c7      	b.n	8006ab8 <processJoinAccept+0x264>
	u1_t hdr = LMIC.frame[0];
 8006928:	4b65      	ldr	r3, [pc, #404]	@ (8006ac0 <processJoinAccept+0x26c>)
 800692a:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 800692e:	757b      	strb	r3, [r7, #21]
	u1_t dlen = LMIC.dataLen;
 8006930:	4b63      	ldr	r3, [pc, #396]	@ (8006ac0 <processJoinAccept+0x26c>)
 8006932:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8006936:	75fb      	strb	r3, [r7, #23]
	u4_t mic = os_rlsbf4(&LMIC.frame[dlen - 4]); // safe before modified by encrypt!
 8006938:	7dfb      	ldrb	r3, [r7, #23]
 800693a:	3b04      	subs	r3, #4
 800693c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006940:	4a5f      	ldr	r2, [pc, #380]	@ (8006ac0 <processJoinAccept+0x26c>)
 8006942:	4413      	add	r3, r2
 8006944:	4618      	mov	r0, r3
 8006946:	f7fe fa1b 	bl	8004d80 <os_rlsbf4>
 800694a:	6138      	str	r0, [r7, #16]
	if ((dlen != LEN_JA && dlen != LEN_JAEXT)
 800694c:	7dfb      	ldrb	r3, [r7, #23]
 800694e:	2b11      	cmp	r3, #17
 8006950:	d002      	beq.n	8006958 <processJoinAccept+0x104>
 8006952:	7dfb      	ldrb	r3, [r7, #23]
 8006954:	2b21      	cmp	r3, #33	@ 0x21
 8006956:	d104      	bne.n	8006962 <processJoinAccept+0x10e>
			|| (hdr & (HDR_FTYPE | HDR_MAJOR))
 8006958:	7d7b      	ldrb	r3, [r7, #21]
 800695a:	f003 03e3 	and.w	r3, r3, #227	@ 0xe3
 800695e:	2b20      	cmp	r3, #32
 8006960:	d00b      	beq.n	800697a <processJoinAccept+0x126>
		badframe: if ((LMIC.txrxFlags & TXRX_DNW1) != 0)
 8006962:	bf00      	nop
 8006964:	e000      	b.n	8006968 <processJoinAccept+0x114>
	}
	aes_encrypt(LMIC.frame + 1, dlen - 1);
	if (!aes_verifyMic0(LMIC.frame, dlen - 4)) {
		EV(specCond, ERR, (e_.reason = EV::specCond_t::JOIN_BAD_MIC,
						e_.info = mic));
		goto badframe;
 8006966:	bf00      	nop
		badframe: if ((LMIC.txrxFlags & TXRX_DNW1) != 0)
 8006968:	4b55      	ldr	r3, [pc, #340]	@ (8006ac0 <processJoinAccept+0x26c>)
 800696a:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	2b00      	cmp	r3, #0
 8006974:	d08d      	beq.n	8006892 <processJoinAccept+0x3e>
			return 0;
 8006976:	2300      	movs	r3, #0
 8006978:	e09e      	b.n	8006ab8 <processJoinAccept+0x264>
	aes_encrypt(LMIC.frame + 1, dlen - 1);
 800697a:	4a55      	ldr	r2, [pc, #340]	@ (8006ad0 <processJoinAccept+0x27c>)
 800697c:	7dfb      	ldrb	r3, [r7, #23]
 800697e:	3b01      	subs	r3, #1
 8006980:	4619      	mov	r1, r3
 8006982:	4610      	mov	r0, r2
 8006984:	f7fe fb9e 	bl	80050c4 <aes_encrypt>
	if (!aes_verifyMic0(LMIC.frame, dlen - 4)) {
 8006988:	7dfb      	ldrb	r3, [r7, #23]
 800698a:	3b04      	subs	r3, #4
 800698c:	4619      	mov	r1, r3
 800698e:	4851      	ldr	r0, [pc, #324]	@ (8006ad4 <processJoinAccept+0x280>)
 8006990:	f7fe fb76 	bl	8005080 <aes_verifyMic0>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d0e5      	beq.n	8006966 <processJoinAccept+0x112>
	}

	u4_t addr = os_rlsbf4(LMIC.frame + OFF_JA_DEVADDR);
 800699a:	4b4f      	ldr	r3, [pc, #316]	@ (8006ad8 <processJoinAccept+0x284>)
 800699c:	4618      	mov	r0, r3
 800699e:	f7fe f9ef 	bl	8004d80 <os_rlsbf4>
 80069a2:	60f8      	str	r0, [r7, #12]
	LMIC.devaddr = addr;
 80069a4:	4a46      	ldr	r2, [pc, #280]	@ (8006ac0 <processJoinAccept+0x26c>)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
	LMIC.netid = os_rlsbf4(&LMIC.frame[OFF_JA_NETID]) & 0xFFFFFF;
 80069ac:	484b      	ldr	r0, [pc, #300]	@ (8006adc <processJoinAccept+0x288>)
 80069ae:	f7fe f9e7 	bl	8004d80 <os_rlsbf4>
 80069b2:	4603      	mov	r3, r0
 80069b4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80069b8:	4a41      	ldr	r2, [pc, #260]	@ (8006ac0 <processJoinAccept+0x26c>)
 80069ba:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

#if defined(CFG_eu868)
	initDefaultChannels(0);
 80069be:	2000      	movs	r0, #0
 80069c0:	f7fe ff12 	bl	80057e8 <initDefaultChannels>
#endif
	if (dlen > LEN_JA) {
 80069c4:	7dfb      	ldrb	r3, [r7, #23]
 80069c6:	2b11      	cmp	r3, #17
 80069c8:	d920      	bls.n	8006a0c <processJoinAccept+0x1b8>
#if defined(CFG_us915)
        goto badframe;
#endif
		dlen = OFF_CFLIST;
 80069ca:	230d      	movs	r3, #13
 80069cc:	75fb      	strb	r3, [r7, #23]
		for (u1_t chidx = 3; chidx < 8; chidx++, dlen += 3) {
 80069ce:	2303      	movs	r3, #3
 80069d0:	75bb      	strb	r3, [r7, #22]
 80069d2:	e018      	b.n	8006a06 <processJoinAccept+0x1b2>
			u4_t freq = convFreq(&LMIC.frame[dlen]);
 80069d4:	7dfb      	ldrb	r3, [r7, #23]
 80069d6:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80069da:	4a39      	ldr	r2, [pc, #228]	@ (8006ac0 <processJoinAccept+0x26c>)
 80069dc:	4413      	add	r3, r2
 80069de:	4618      	mov	r0, r3
 80069e0:	f7ff f802 	bl	80059e8 <convFreq>
 80069e4:	60b8      	str	r0, [r7, #8]
			if (freq)
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d006      	beq.n	80069fa <processJoinAccept+0x1a6>
				LMIC_setupChannel(chidx, freq, 0, -1);
 80069ec:	7db8      	ldrb	r0, [r7, #22]
 80069ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80069f2:	2200      	movs	r2, #0
 80069f4:	68b9      	ldr	r1, [r7, #8]
 80069f6:	f7fe ff7d 	bl	80058f4 <LMIC_setupChannel>
		for (u1_t chidx = 3; chidx < 8; chidx++, dlen += 3) {
 80069fa:	7dbb      	ldrb	r3, [r7, #22]
 80069fc:	3301      	adds	r3, #1
 80069fe:	75bb      	strb	r3, [r7, #22]
 8006a00:	7dfb      	ldrb	r3, [r7, #23]
 8006a02:	3303      	adds	r3, #3
 8006a04:	75fb      	strb	r3, [r7, #23]
 8006a06:	7dbb      	ldrb	r3, [r7, #22]
 8006a08:	2b07      	cmp	r3, #7
 8006a0a:	d9e3      	bls.n	80069d4 <processJoinAccept+0x180>
		}
	}

	// already incremented when JOIN REQ got sent off
	aes_sessKeys(LMIC.devNonce - 1, &LMIC.frame[OFF_JA_ARTNONCE], LMIC.nwkKey,
 8006a0c:	4b2c      	ldr	r3, [pc, #176]	@ (8006ac0 <processJoinAccept+0x26c>)
 8006a0e:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 8006a12:	3b01      	subs	r3, #1
 8006a14:	b298      	uxth	r0, r3
 8006a16:	4b32      	ldr	r3, [pc, #200]	@ (8006ae0 <processJoinAccept+0x28c>)
 8006a18:	4a32      	ldr	r2, [pc, #200]	@ (8006ae4 <processJoinAccept+0x290>)
 8006a1a:	492d      	ldr	r1, [pc, #180]	@ (8006ad0 <processJoinAccept+0x27c>)
 8006a1c:	f7fe fbac 	bl	8005178 <aes_sessKeys>
					e_.mic = mic,
					e_.reason = ((LMIC.opmode & OP_REJOIN) != 0
							? EV::joininfo_t::REJOIN_ACCEPT
							: EV::joininfo_t::ACCEPT)));

	ASSERT((LMIC.opmode & (OP_JOINING | OP_REJOIN)) != 0);
 8006a20:	4b27      	ldr	r3, [pc, #156]	@ (8006ac0 <processJoinAccept+0x26c>)
 8006a22:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006a26:	f003 0324 	and.w	r3, r3, #36	@ 0x24
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d101      	bne.n	8006a32 <processJoinAccept+0x1de>
 8006a2e:	f7fd ffeb 	bl	8004a08 <hal_failed>
	if ((LMIC.opmode & OP_REJOIN) != 0) {
 8006a32:	4b23      	ldr	r3, [pc, #140]	@ (8006ac0 <processJoinAccept+0x26c>)
 8006a34:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006a38:	f003 0320 	and.w	r3, r3, #32
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00e      	beq.n	8006a5e <processJoinAccept+0x20a>
		// Lower DR every try below current UP DR
		LMIC.datarate = lowerDR(LMIC.datarate, LMIC.rejoinCnt);
 8006a40:	4b1f      	ldr	r3, [pc, #124]	@ (8006ac0 <processJoinAccept+0x26c>)
 8006a42:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8006a46:	4a1e      	ldr	r2, [pc, #120]	@ (8006ac0 <processJoinAccept+0x26c>)
 8006a48:	f892 20b2 	ldrb.w	r2, [r2, #178]	@ 0xb2
 8006a4c:	4611      	mov	r1, r2
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7fe f968 	bl	8004d24 <lowerDR>
 8006a54:	4603      	mov	r3, r0
 8006a56:	461a      	mov	r2, r3
 8006a58:	4b19      	ldr	r3, [pc, #100]	@ (8006ac0 <processJoinAccept+0x26c>)
 8006a5a:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
	}
	LMIC.opmode &= ~(OP_JOINING | OP_TRACK | OP_REJOIN | OP_TXRXPEND
 8006a5e:	4b18      	ldr	r3, [pc, #96]	@ (8006ac0 <processJoinAccept+0x26c>)
 8006a60:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006a64:	f423 7329 	bic.w	r3, r3, #676	@ 0x2a4
 8006a68:	f023 0302 	bic.w	r3, r3, #2
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	4b14      	ldr	r3, [pc, #80]	@ (8006ac0 <processJoinAccept+0x26c>)
 8006a70:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			| OP_PINGINI) | OP_NEXTCHNL;
	LMIC.txCnt = 0;
 8006a74:	4b12      	ldr	r3, [pc, #72]	@ (8006ac0 <processJoinAccept+0x26c>)
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	stateJustJoined();
 8006a7c:	f7ff f9f2 	bl	8005e64 <stateJustJoined>
	LMIC.dn2Dr = LMIC.frame[OFF_JA_DLSET] & 0x0F;
 8006a80:	4b0f      	ldr	r3, [pc, #60]	@ (8006ac0 <processJoinAccept+0x26c>)
 8006a82:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 8006a86:	f003 030f 	and.w	r3, r3, #15
 8006a8a:	b2da      	uxtb	r2, r3
 8006a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8006ac0 <processJoinAccept+0x26c>)
 8006a8e:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
	LMIC.rxDelay = LMIC.frame[OFF_JA_RXDLY];
 8006a92:	4b0b      	ldr	r3, [pc, #44]	@ (8006ac0 <processJoinAccept+0x26c>)
 8006a94:	f893 2154 	ldrb.w	r2, [r3, #340]	@ 0x154
 8006a98:	4b09      	ldr	r3, [pc, #36]	@ (8006ac0 <processJoinAccept+0x26c>)
 8006a9a:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
	if (LMIC.rxDelay == 0)
 8006a9e:	4b08      	ldr	r3, [pc, #32]	@ (8006ac0 <processJoinAccept+0x26c>)
 8006aa0:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d103      	bne.n	8006ab0 <processJoinAccept+0x25c>
		LMIC.rxDelay = 1;
 8006aa8:	4b05      	ldr	r3, [pc, #20]	@ (8006ac0 <processJoinAccept+0x26c>)
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
	reportEvent(EV_JOINED);
 8006ab0:	2006      	movs	r0, #6
 8006ab2:	f7ff f9b9 	bl	8005e28 <reportEvent>
	return 1;
 8006ab6:	2301      	movs	r3, #1
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3718      	adds	r7, #24
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	2000033c 	.word	0x2000033c
 8006ac4:	0800683d 	.word	0x0800683d
 8006ac8:	08005e15 	.word	0x08005e15
 8006acc:	20000350 	.word	0x20000350
 8006ad0:	20000485 	.word	0x20000485
 8006ad4:	20000484 	.word	0x20000484
 8006ad8:	2000048b 	.word	0x2000048b
 8006adc:	20000488 	.word	0x20000488
 8006ae0:	20000440 	.word	0x20000440
 8006ae4:	20000430 	.word	0x20000430

08006ae8 <processRx2Jacc>:

static void processRx2Jacc(xref2osjob_t osjob)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
	if (LMIC.dataLen == 0)
 8006af0:	4b07      	ldr	r3, [pc, #28]	@ (8006b10 <processRx2Jacc+0x28>)
 8006af2:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d103      	bne.n	8006b02 <processRx2Jacc+0x1a>
		LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 8006afa:	4b05      	ldr	r3, [pc, #20]	@ (8006b10 <processRx2Jacc+0x28>)
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	processJoinAccept();
 8006b02:	f7ff fea7 	bl	8006854 <processJoinAccept>
}
 8006b06:	bf00      	nop
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	2000033c 	.word	0x2000033c

08006b14 <setupRx2Jacc>:

static void setupRx2Jacc(xref2osjob_t osjob)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
	LMIC.osjob.func = FUNC_ADDR(processRx2Jacc);
 8006b1c:	4b04      	ldr	r3, [pc, #16]	@ (8006b30 <setupRx2Jacc+0x1c>)
 8006b1e:	4a05      	ldr	r2, [pc, #20]	@ (8006b34 <setupRx2Jacc+0x20>)
 8006b20:	61da      	str	r2, [r3, #28]
	setupRx2();
 8006b22:	f7ff fdcf 	bl	80066c4 <setupRx2>
}
 8006b26:	bf00      	nop
 8006b28:	3708      	adds	r7, #8
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	2000033c 	.word	0x2000033c
 8006b34:	08006ae9 	.word	0x08006ae9

08006b38 <processRx1Jacc>:

static void processRx1Jacc(xref2osjob_t osjob)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
	if (LMIC.dataLen == 0 || !processJoinAccept())
 8006b40:	4b08      	ldr	r3, [pc, #32]	@ (8006b64 <processRx1Jacc+0x2c>)
 8006b42:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d004      	beq.n	8006b54 <processRx1Jacc+0x1c>
 8006b4a:	f7ff fe83 	bl	8006854 <processJoinAccept>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d103      	bne.n	8006b5c <processRx1Jacc+0x24>
		schedRx2(DELAY_JACC2_osticks, FUNC_ADDR(setupRx2Jacc));
 8006b54:	4904      	ldr	r1, [pc, #16]	@ (8006b68 <processRx1Jacc+0x30>)
 8006b56:	4805      	ldr	r0, [pc, #20]	@ (8006b6c <processRx1Jacc+0x34>)
 8006b58:	f7ff fdd4 	bl	8006704 <schedRx2>
}
 8006b5c:	bf00      	nop
 8006b5e:	3708      	adds	r7, #8
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	2000033c 	.word	0x2000033c
 8006b68:	08006b15 	.word	0x08006b15
 8006b6c:	0002ee00 	.word	0x0002ee00

08006b70 <setupRx1Jacc>:

static void setupRx1Jacc(xref2osjob_t osjob)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
	setupRx1(FUNC_ADDR(processRx1Jacc));
 8006b78:	4803      	ldr	r0, [pc, #12]	@ (8006b88 <setupRx1Jacc+0x18>)
 8006b7a:	f7ff fdeb 	bl	8006754 <setupRx1>
}
 8006b7e:	bf00      	nop
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	08006b39 	.word	0x08006b39

08006b8c <jreqDone>:

static void jreqDone(xref2osjob_t osjob)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
	txDone(DELAY_JACC1_osticks, FUNC_ADDR(setupRx1Jacc));
 8006b94:	4903      	ldr	r1, [pc, #12]	@ (8006ba4 <jreqDone+0x18>)
 8006b96:	4804      	ldr	r0, [pc, #16]	@ (8006ba8 <jreqDone+0x1c>)
 8006b98:	f7ff fdfe 	bl	8006798 <txDone>
}
 8006b9c:	bf00      	nop
 8006b9e:	3708      	adds	r7, #8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	08006b71 	.word	0x08006b71
 8006ba8:	00027100 	.word	0x00027100

08006bac <processRx2DnDataDelay>:

// Fwd decl.
static bit_t processDnData(void);

static void processRx2DnDataDelay(xref2osjob_t osjob)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
	processDnData();
 8006bb4:	f000 fbc6 	bl	8007344 <processDnData>
}
 8006bb8:	bf00      	nop
 8006bba:	3708      	adds	r7, #8
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <processRx2DnData>:

static void processRx2DnData(xref2osjob_t osjob)
{
 8006bc0:	b590      	push	{r4, r7, lr}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
	if (LMIC.dataLen == 0) {
 8006bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8006c08 <processRx2DnData+0x48>)
 8006bca:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d115      	bne.n	8006bfe <processRx2DnData+0x3e>
		LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 8006bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006c08 <processRx2DnData+0x48>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		// Delay callback processing to avoid up TX while gateway is txing our missed frame! 
		// Since DNW2 uses SF12 by default we wait 3 secs.
		os_setTimedCallback(&LMIC.osjob,
				(os_getTime() + DNW2_SAFETY_ZONE + rndDelay(2)),
 8006bda:	f001 faed 	bl	80081b8 <os_getTime>
 8006bde:	4603      	mov	r3, r0
 8006be0:	f503 34bb 	add.w	r4, r3, #95744	@ 0x17600
 8006be4:	f504 7480 	add.w	r4, r4, #256	@ 0x100
 8006be8:	2002      	movs	r0, #2
 8006bea:	f7fe fd4f 	bl	800568c <rndDelay>
 8006bee:	4603      	mov	r3, r0
		os_setTimedCallback(&LMIC.osjob,
 8006bf0:	4423      	add	r3, r4
 8006bf2:	4a06      	ldr	r2, [pc, #24]	@ (8006c0c <processRx2DnData+0x4c>)
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	4806      	ldr	r0, [pc, #24]	@ (8006c10 <processRx2DnData+0x50>)
 8006bf8:	f001 fb48 	bl	800828c <os_setTimedCallback>
				FUNC_ADDR(processRx2DnDataDelay));
		return;
 8006bfc:	e001      	b.n	8006c02 <processRx2DnData+0x42>
	}
	processDnData();
 8006bfe:	f000 fba1 	bl	8007344 <processDnData>
}
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd90      	pop	{r4, r7, pc}
 8006c08:	2000033c 	.word	0x2000033c
 8006c0c:	08006bad 	.word	0x08006bad
 8006c10:	20000350 	.word	0x20000350

08006c14 <setupRx2DnData>:

static void setupRx2DnData(xref2osjob_t osjob)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
	LMIC.osjob.func = FUNC_ADDR(processRx2DnData);
 8006c1c:	4b04      	ldr	r3, [pc, #16]	@ (8006c30 <setupRx2DnData+0x1c>)
 8006c1e:	4a05      	ldr	r2, [pc, #20]	@ (8006c34 <setupRx2DnData+0x20>)
 8006c20:	61da      	str	r2, [r3, #28]
	setupRx2();
 8006c22:	f7ff fd4f 	bl	80066c4 <setupRx2>
}
 8006c26:	bf00      	nop
 8006c28:	3708      	adds	r7, #8
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	2000033c 	.word	0x2000033c
 8006c34:	08006bc1 	.word	0x08006bc1

08006c38 <processRx1DnData>:

static void processRx1DnData(xref2osjob_t osjob)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
	if (LMIC.dataLen == 0 || !processDnData())
 8006c40:	4b0d      	ldr	r3, [pc, #52]	@ (8006c78 <processRx1DnData+0x40>)
 8006c42:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d004      	beq.n	8006c54 <processRx1DnData+0x1c>
 8006c4a:	f000 fb7b 	bl	8007344 <processDnData>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10c      	bne.n	8006c6e <processRx1DnData+0x36>
		schedRx2(sec2osticks(LMIC.rxDelay + (int )DELAY_EXTDNW2),
 8006c54:	4b08      	ldr	r3, [pc, #32]	@ (8006c78 <processRx1DnData+0x40>)
 8006c56:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006c62:	fb02 f303 	mul.w	r3, r2, r3
 8006c66:	4905      	ldr	r1, [pc, #20]	@ (8006c7c <processRx1DnData+0x44>)
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f7ff fd4b 	bl	8006704 <schedRx2>
				FUNC_ADDR(setupRx2DnData));
}
 8006c6e:	bf00      	nop
 8006c70:	3708      	adds	r7, #8
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	2000033c 	.word	0x2000033c
 8006c7c:	08006c15 	.word	0x08006c15

08006c80 <setupRx1DnData>:

static void setupRx1DnData(xref2osjob_t osjob)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
	setupRx1(FUNC_ADDR(processRx1DnData));
 8006c88:	4803      	ldr	r0, [pc, #12]	@ (8006c98 <setupRx1DnData+0x18>)
 8006c8a:	f7ff fd63 	bl	8006754 <setupRx1>
}
 8006c8e:	bf00      	nop
 8006c90:	3708      	adds	r7, #8
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	08006c39 	.word	0x08006c39

08006c9c <updataDone>:

static void updataDone(xref2osjob_t osjob)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
	txDone(sec2osticks(LMIC.rxDelay), FUNC_ADDR(setupRx1DnData));
 8006ca4:	4b07      	ldr	r3, [pc, #28]	@ (8006cc4 <updataDone+0x28>)
 8006ca6:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 8006caa:	461a      	mov	r2, r3
 8006cac:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006cb0:	fb02 f303 	mul.w	r3, r2, r3
 8006cb4:	4904      	ldr	r1, [pc, #16]	@ (8006cc8 <updataDone+0x2c>)
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7ff fd6e 	bl	8006798 <txDone>
}
 8006cbc:	bf00      	nop
 8006cbe:	3708      	adds	r7, #8
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	2000033c 	.word	0x2000033c
 8006cc8:	08006c81 	.word	0x08006c81

08006ccc <buildDataFrame>:

// ======================================== 

static void buildDataFrame(void)
{
 8006ccc:	b590      	push	{r4, r7, lr}
 8006cce:	b087      	sub	sp, #28
 8006cd0:	af02      	add	r7, sp, #8
	bit_t txdata = ((LMIC.opmode & (OP_TXDATA | OP_POLL)) != OP_POLL);
 8006cd2:	4ba3      	ldr	r3, [pc, #652]	@ (8006f60 <buildDataFrame+0x294>)
 8006cd4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006cd8:	f003 0318 	and.w	r3, r3, #24
 8006cdc:	2b10      	cmp	r3, #16
 8006cde:	bf14      	ite	ne
 8006ce0:	2301      	movne	r3, #1
 8006ce2:	2300      	moveq	r3, #0
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	73fb      	strb	r3, [r7, #15]
	u1_t dlen = txdata ? LMIC.pendTxLen : 0;
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d003      	beq.n	8006cf6 <buildDataFrame+0x2a>
 8006cee:	4b9c      	ldr	r3, [pc, #624]	@ (8006f60 <buildDataFrame+0x294>)
 8006cf0:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 8006cf4:	e000      	b.n	8006cf8 <buildDataFrame+0x2c>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	71bb      	strb	r3, [r7, #6]

	// Piggyback MAC options
	// Prioritize by importance
	int end = OFF_DAT_OPTS;
 8006cfa:	2308      	movs	r3, #8
 8006cfc:	60bb      	str	r3, [r7, #8]
	if ((LMIC.opmode & (OP_TRACK | OP_PINGABLE)) == (OP_TRACK | OP_PINGABLE)) {
 8006cfe:	4b98      	ldr	r3, [pc, #608]	@ (8006f60 <buildDataFrame+0x294>)
 8006d00:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006d04:	461a      	mov	r2, r3
 8006d06:	f240 4302 	movw	r3, #1026	@ 0x402
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	f240 4202 	movw	r2, #1026	@ 0x402
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d11c      	bne.n	8006d4e <buildDataFrame+0x82>
		// Indicate pingability in every UP frame
		LMIC.frame[end] = MCMD_PING_IND;
 8006d14:	4a92      	ldr	r2, [pc, #584]	@ (8006f60 <buildDataFrame+0x294>)
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	4413      	add	r3, r2
 8006d1a:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006d1e:	2210      	movs	r2, #16
 8006d20:	701a      	strb	r2, [r3, #0]
		LMIC.frame[end + 1] = LMIC.ping.dr | (LMIC.ping.intvExp << 4);
 8006d22:	4b8f      	ldr	r3, [pc, #572]	@ (8006f60 <buildDataFrame+0x294>)
 8006d24:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8006d28:	b25a      	sxtb	r2, r3
 8006d2a:	4b8d      	ldr	r3, [pc, #564]	@ (8006f60 <buildDataFrame+0x294>)
 8006d2c:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8006d30:	011b      	lsls	r3, r3, #4
 8006d32:	b25b      	sxtb	r3, r3
 8006d34:	4313      	orrs	r3, r2
 8006d36:	b25a      	sxtb	r2, r3
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	b2d1      	uxtb	r1, r2
 8006d3e:	4a88      	ldr	r2, [pc, #544]	@ (8006f60 <buildDataFrame+0x294>)
 8006d40:	4413      	add	r3, r2
 8006d42:	460a      	mov	r2, r1
 8006d44:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		end += 2;
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	3302      	adds	r3, #2
 8006d4c:	60bb      	str	r3, [r7, #8]
	}
	if (LMIC.dutyCapAns) {
 8006d4e:	4b84      	ldr	r3, [pc, #528]	@ (8006f60 <buildDataFrame+0x294>)
 8006d50:	f893 3129 	ldrb.w	r3, [r3, #297]	@ 0x129
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00d      	beq.n	8006d74 <buildDataFrame+0xa8>
		LMIC.frame[end] = MCMD_DCAP_ANS;
 8006d58:	4a81      	ldr	r2, [pc, #516]	@ (8006f60 <buildDataFrame+0x294>)
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006d62:	2204      	movs	r2, #4
 8006d64:	701a      	strb	r2, [r3, #0]
		end += 1;
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	60bb      	str	r3, [r7, #8]
		LMIC.dutyCapAns = 0;
 8006d6c:	4b7c      	ldr	r3, [pc, #496]	@ (8006f60 <buildDataFrame+0x294>)
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
	}
	if (LMIC.dn2Ans) {
 8006d74:	4b7a      	ldr	r3, [pc, #488]	@ (8006f60 <buildDataFrame+0x294>)
 8006d76:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d01a      	beq.n	8006db4 <buildDataFrame+0xe8>
		LMIC.frame[end + 0] = MCMD_DN2P_ANS;
 8006d7e:	4a78      	ldr	r2, [pc, #480]	@ (8006f60 <buildDataFrame+0x294>)
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	4413      	add	r3, r2
 8006d84:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006d88:	2205      	movs	r2, #5
 8006d8a:	701a      	strb	r2, [r3, #0]
		LMIC.frame[end + 1] = LMIC.dn2Ans & ~MCMD_DN2P_ANS_RFU;
 8006d8c:	4b74      	ldr	r3, [pc, #464]	@ (8006f60 <buildDataFrame+0x294>)
 8006d8e:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	3301      	adds	r3, #1
 8006d96:	f002 0203 	and.w	r2, r2, #3
 8006d9a:	b2d1      	uxtb	r1, r2
 8006d9c:	4a70      	ldr	r2, [pc, #448]	@ (8006f60 <buildDataFrame+0x294>)
 8006d9e:	4413      	add	r3, r2
 8006da0:	460a      	mov	r2, r1
 8006da2:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		end += 2;
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	3302      	adds	r3, #2
 8006daa:	60bb      	str	r3, [r7, #8]
		LMIC.dn2Ans = 0;
 8006dac:	4b6c      	ldr	r3, [pc, #432]	@ (8006f60 <buildDataFrame+0x294>)
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
	}
	if (LMIC.devsAns) {  // answer to device status
 8006db4:	4b6a      	ldr	r3, [pc, #424]	@ (8006f60 <buildDataFrame+0x294>)
 8006db6:	f893 3126 	ldrb.w	r3, [r3, #294]	@ 0x126
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d021      	beq.n	8006e02 <buildDataFrame+0x136>
		LMIC.frame[end + 0] = MCMD_DEVS_ANS;
 8006dbe:	4a68      	ldr	r2, [pc, #416]	@ (8006f60 <buildDataFrame+0x294>)
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006dc8:	2206      	movs	r2, #6
 8006dca:	701a      	strb	r2, [r3, #0]
		LMIC.frame[end + 1] = os_getBattLevel();
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	1c5c      	adds	r4, r3, #1
 8006dd0:	f7fe f869 	bl	8004ea6 <os_getBattLevel>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	4b61      	ldr	r3, [pc, #388]	@ (8006f60 <buildDataFrame+0x294>)
 8006dda:	4423      	add	r3, r4
 8006ddc:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		LMIC.frame[end + 2] = LMIC.margin;
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	3302      	adds	r3, #2
 8006de4:	4a5e      	ldr	r2, [pc, #376]	@ (8006f60 <buildDataFrame+0x294>)
 8006de6:	f892 1124 	ldrb.w	r1, [r2, #292]	@ 0x124
 8006dea:	4a5d      	ldr	r2, [pc, #372]	@ (8006f60 <buildDataFrame+0x294>)
 8006dec:	4413      	add	r3, r2
 8006dee:	460a      	mov	r2, r1
 8006df0:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		end += 3;
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	3303      	adds	r3, #3
 8006df8:	60bb      	str	r3, [r7, #8]
		LMIC.devsAns = 0;
 8006dfa:	4b59      	ldr	r3, [pc, #356]	@ (8006f60 <buildDataFrame+0x294>)
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
	}
	if (LMIC.ladrAns) {  // answer to ADR change
 8006e02:	4b57      	ldr	r3, [pc, #348]	@ (8006f60 <buildDataFrame+0x294>)
 8006e04:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d01a      	beq.n	8006e42 <buildDataFrame+0x176>
		LMIC.frame[end + 0] = MCMD_LADR_ANS;
 8006e0c:	4a54      	ldr	r2, [pc, #336]	@ (8006f60 <buildDataFrame+0x294>)
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	4413      	add	r3, r2
 8006e12:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006e16:	2203      	movs	r2, #3
 8006e18:	701a      	strb	r2, [r3, #0]
		LMIC.frame[end + 1] = LMIC.ladrAns & ~MCMD_LADR_ANS_RFU;
 8006e1a:	4b51      	ldr	r3, [pc, #324]	@ (8006f60 <buildDataFrame+0x294>)
 8006e1c:	f893 2125 	ldrb.w	r2, [r3, #293]	@ 0x125
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	3301      	adds	r3, #1
 8006e24:	f002 0207 	and.w	r2, r2, #7
 8006e28:	b2d1      	uxtb	r1, r2
 8006e2a:	4a4d      	ldr	r2, [pc, #308]	@ (8006f60 <buildDataFrame+0x294>)
 8006e2c:	4413      	add	r3, r2
 8006e2e:	460a      	mov	r2, r1
 8006e30:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		end += 2;
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	3302      	adds	r3, #2
 8006e38:	60bb      	str	r3, [r7, #8]
		LMIC.ladrAns = 0;
 8006e3a:	4b49      	ldr	r3, [pc, #292]	@ (8006f60 <buildDataFrame+0x294>)
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
	}
	if (LMIC.bcninfoTries > 0) {
 8006e42:	4b47      	ldr	r3, [pc, #284]	@ (8006f60 <buildDataFrame+0x294>)
 8006e44:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d009      	beq.n	8006e60 <buildDataFrame+0x194>
		LMIC.frame[end] = MCMD_BCNI_REQ;
 8006e4c:	4a44      	ldr	r2, [pc, #272]	@ (8006f60 <buildDataFrame+0x294>)
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	4413      	add	r3, r2
 8006e52:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006e56:	2212      	movs	r2, #18
 8006e58:	701a      	strb	r2, [r3, #0]
		end += 1;
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	60bb      	str	r3, [r7, #8]
	}
	if (LMIC.adrChanged) {
 8006e60:	4b3f      	ldr	r3, [pc, #252]	@ (8006f60 <buildDataFrame+0x294>)
 8006e62:	f893 3122 	ldrb.w	r3, [r3, #290]	@ 0x122
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00c      	beq.n	8006e84 <buildDataFrame+0x1b8>
		if (LMIC.adrAckReq < 0)
 8006e6a:	4b3d      	ldr	r3, [pc, #244]	@ (8006f60 <buildDataFrame+0x294>)
 8006e6c:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	da03      	bge.n	8006e7c <buildDataFrame+0x1b0>
			LMIC.adrAckReq = 0;
 8006e74:	4b3a      	ldr	r3, [pc, #232]	@ (8006f60 <buildDataFrame+0x294>)
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
		LMIC.adrChanged = 0;
 8006e7c:	4b38      	ldr	r3, [pc, #224]	@ (8006f60 <buildDataFrame+0x294>)
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
	}
	if (LMIC.pingSetAns != 0) {
 8006e84:	4b36      	ldr	r3, [pc, #216]	@ (8006f60 <buildDataFrame+0x294>)
 8006e86:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d01a      	beq.n	8006ec4 <buildDataFrame+0x1f8>
		LMIC.frame[end + 0] = MCMD_PING_ANS;
 8006e8e:	4a34      	ldr	r2, [pc, #208]	@ (8006f60 <buildDataFrame+0x294>)
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	4413      	add	r3, r2
 8006e94:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006e98:	2211      	movs	r2, #17
 8006e9a:	701a      	strb	r2, [r3, #0]
		LMIC.frame[end + 1] = LMIC.pingSetAns & ~MCMD_PING_ANS_RFU;
 8006e9c:	4b30      	ldr	r3, [pc, #192]	@ (8006f60 <buildDataFrame+0x294>)
 8006e9e:	f893 2133 	ldrb.w	r2, [r3, #307]	@ 0x133
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	f002 0201 	and.w	r2, r2, #1
 8006eaa:	b2d1      	uxtb	r1, r2
 8006eac:	4a2c      	ldr	r2, [pc, #176]	@ (8006f60 <buildDataFrame+0x294>)
 8006eae:	4413      	add	r3, r2
 8006eb0:	460a      	mov	r2, r1
 8006eb2:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		end += 2;
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	3302      	adds	r3, #2
 8006eba:	60bb      	str	r3, [r7, #8]
		LMIC.pingSetAns = 0;
 8006ebc:	4b28      	ldr	r3, [pc, #160]	@ (8006f60 <buildDataFrame+0x294>)
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
	}
	if (LMIC.snchAns) {
 8006ec4:	4b26      	ldr	r3, [pc, #152]	@ (8006f60 <buildDataFrame+0x294>)
 8006ec6:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d01a      	beq.n	8006f04 <buildDataFrame+0x238>
		LMIC.frame[end + 0] = MCMD_SNCH_ANS;
 8006ece:	4a24      	ldr	r2, [pc, #144]	@ (8006f60 <buildDataFrame+0x294>)
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006ed8:	2207      	movs	r2, #7
 8006eda:	701a      	strb	r2, [r3, #0]
		LMIC.frame[end + 1] = LMIC.snchAns & ~MCMD_SNCH_ANS_RFU;
 8006edc:	4b20      	ldr	r3, [pc, #128]	@ (8006f60 <buildDataFrame+0x294>)
 8006ede:	f893 212a 	ldrb.w	r2, [r3, #298]	@ 0x12a
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	f002 0203 	and.w	r2, r2, #3
 8006eea:	b2d1      	uxtb	r1, r2
 8006eec:	4a1c      	ldr	r2, [pc, #112]	@ (8006f60 <buildDataFrame+0x294>)
 8006eee:	4413      	add	r3, r2
 8006ef0:	460a      	mov	r2, r1
 8006ef2:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		end += 2;
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	3302      	adds	r3, #2
 8006efa:	60bb      	str	r3, [r7, #8]
		LMIC.snchAns = 0;
 8006efc:	4b18      	ldr	r3, [pc, #96]	@ (8006f60 <buildDataFrame+0x294>)
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
	}
	ASSERT(end <= OFF_DAT_OPTS + 16);
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	2b18      	cmp	r3, #24
 8006f08:	dd01      	ble.n	8006f0e <buildDataFrame+0x242>
 8006f0a:	f7fd fd7d 	bl	8004a08 <hal_failed>

	u1_t flen = end + (txdata ? 5 + dlen : 4);
 8006f0e:	7bfb      	ldrb	r3, [r7, #15]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d003      	beq.n	8006f1c <buildDataFrame+0x250>
 8006f14:	79bb      	ldrb	r3, [r7, #6]
 8006f16:	3305      	adds	r3, #5
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	e000      	b.n	8006f1e <buildDataFrame+0x252>
 8006f1c:	2304      	movs	r3, #4
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	b2d2      	uxtb	r2, r2
 8006f22:	4413      	add	r3, r2
 8006f24:	71fb      	strb	r3, [r7, #7]
	if (flen > MAX_LEN_FRAME) {
 8006f26:	79fb      	ldrb	r3, [r7, #7]
 8006f28:	2b40      	cmp	r3, #64	@ 0x40
 8006f2a:	d905      	bls.n	8006f38 <buildDataFrame+0x26c>
		// Options and payload too big - delay payload
		txdata = 0;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	73fb      	strb	r3, [r7, #15]
		flen = end + 4;
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	3304      	adds	r3, #4
 8006f36:	71fb      	strb	r3, [r7, #7]
	}
	LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DAUP | HDR_MAJOR_V1;
 8006f38:	4b09      	ldr	r3, [pc, #36]	@ (8006f60 <buildDataFrame+0x294>)
 8006f3a:	2240      	movs	r2, #64	@ 0x40
 8006f3c:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
	LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 8006f40:	4b07      	ldr	r3, [pc, #28]	@ (8006f60 <buildDataFrame+0x294>)
 8006f42:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 8006f46:	4b06      	ldr	r3, [pc, #24]	@ (8006f60 <buildDataFrame+0x294>)
 8006f48:	f893 3127 	ldrb.w	r3, [r3, #295]	@ 0x127
			| (LMIC.adrAckReq >= 0 ? FCT_ADRARQ : 0) | (end - OFF_DAT_OPTS));
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	b25b      	sxtb	r3, r3
 8006f52:	4a03      	ldr	r2, [pc, #12]	@ (8006f60 <buildDataFrame+0x294>)
 8006f54:	f992 2121 	ldrsb.w	r2, [r2, #289]	@ 0x121
 8006f58:	2a00      	cmp	r2, #0
 8006f5a:	db03      	blt.n	8006f64 <buildDataFrame+0x298>
 8006f5c:	2240      	movs	r2, #64	@ 0x40
 8006f5e:	e002      	b.n	8006f66 <buildDataFrame+0x29a>
 8006f60:	2000033c 	.word	0x2000033c
 8006f64:	2200      	movs	r2, #0
 8006f66:	4313      	orrs	r3, r2
 8006f68:	b25a      	sxtb	r2, r3
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	3b08      	subs	r3, #8
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	b25b      	sxtb	r3, r3
 8006f74:	4313      	orrs	r3, r2
 8006f76:	b25b      	sxtb	r3, r3
 8006f78:	b2da      	uxtb	r2, r3
	LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 8006f7a:	4b40      	ldr	r3, [pc, #256]	@ (800707c <buildDataFrame+0x3b0>)
 8006f7c:	f883 214d 	strb.w	r2, [r3, #333]	@ 0x14d
	os_wlsbf4(LMIC.frame + OFF_DAT_ADDR, LMIC.devaddr);
 8006f80:	4a3f      	ldr	r2, [pc, #252]	@ (8007080 <buildDataFrame+0x3b4>)
 8006f82:	4b3e      	ldr	r3, [pc, #248]	@ (800707c <buildDataFrame+0x3b0>)
 8006f84:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006f88:	4619      	mov	r1, r3
 8006f8a:	4610      	mov	r0, r2
 8006f8c:	f7fd ff49 	bl	8004e22 <os_wlsbf4>

	if (LMIC.txCnt == 0) {
 8006f90:	4b3a      	ldr	r3, [pc, #232]	@ (800707c <buildDataFrame+0x3b0>)
 8006f92:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d106      	bne.n	8006fa8 <buildDataFrame+0x2dc>
		LMIC.seqnoUp += 1;
 8006f9a:	4b38      	ldr	r3, [pc, #224]	@ (800707c <buildDataFrame+0x3b0>)
 8006f9c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	4a36      	ldr	r2, [pc, #216]	@ (800707c <buildDataFrame+0x3b0>)
 8006fa4:	f8c2 311c 	str.w	r3, [r2, #284]	@ 0x11c
						e_.info = LMIC.seqnoUp-1,
						e_.info2 = ((LMIC.txCnt+1) |
								(DRADJUST[LMIC.txCnt+1] << 8) |
								((LMIC.datarate|DR_PAGE)<<16))));
	}
	os_wlsbf2(LMIC.frame + OFF_DAT_SEQNO, LMIC.seqnoUp - 1);
 8006fa8:	4a36      	ldr	r2, [pc, #216]	@ (8007084 <buildDataFrame+0x3b8>)
 8006faa:	4b34      	ldr	r3, [pc, #208]	@ (800707c <buildDataFrame+0x3b0>)
 8006fac:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	4610      	mov	r0, r2
 8006fba:	f7fd ff1b 	bl	8004df4 <os_wlsbf2>

	// Clear pending DN confirmation
	LMIC.dnConf = 0;
 8006fbe:	4b2f      	ldr	r3, [pc, #188]	@ (800707c <buildDataFrame+0x3b0>)
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120

	if (txdata) {
 8006fc6:	7bfb      	ldrb	r3, [r7, #15]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d03e      	beq.n	800704a <buildDataFrame+0x37e>
		if (LMIC.pendTxConf) {
 8006fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800707c <buildDataFrame+0x3b0>)
 8006fce:	f893 30bb 	ldrb.w	r3, [r3, #187]	@ 0xbb
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00c      	beq.n	8006ff0 <buildDataFrame+0x324>
			// Confirmed only makes sense if we have a payload (or at least a port)
			LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DCUP | HDR_MAJOR_V1;
 8006fd6:	4b29      	ldr	r3, [pc, #164]	@ (800707c <buildDataFrame+0x3b0>)
 8006fd8:	2280      	movs	r2, #128	@ 0x80
 8006fda:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
			if (LMIC.txCnt == 0)
 8006fde:	4b27      	ldr	r3, [pc, #156]	@ (800707c <buildDataFrame+0x3b0>)
 8006fe0:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d103      	bne.n	8006ff0 <buildDataFrame+0x324>
				LMIC.txCnt = 1;
 8006fe8:	4b24      	ldr	r3, [pc, #144]	@ (800707c <buildDataFrame+0x3b0>)
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		}
		LMIC.frame[end] = LMIC.pendTxPort;
 8006ff0:	4b22      	ldr	r3, [pc, #136]	@ (800707c <buildDataFrame+0x3b0>)
 8006ff2:	f893 10ba 	ldrb.w	r1, [r3, #186]	@ 0xba
 8006ff6:	4a21      	ldr	r2, [pc, #132]	@ (800707c <buildDataFrame+0x3b0>)
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8007000:	460a      	mov	r2, r1
 8007002:	701a      	strb	r2, [r3, #0]
		os_copyMem(LMIC.frame + end + 1, LMIC.pendTxData, dlen);
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	3301      	adds	r3, #1
 8007008:	4a1f      	ldr	r2, [pc, #124]	@ (8007088 <buildDataFrame+0x3bc>)
 800700a:	4413      	add	r3, r2
 800700c:	79ba      	ldrb	r2, [r7, #6]
 800700e:	491f      	ldr	r1, [pc, #124]	@ (800708c <buildDataFrame+0x3c0>)
 8007010:	4618      	mov	r0, r3
 8007012:	f007 fec4 	bl	800ed9e <memcpy>
		aes_cipher(LMIC.pendTxPort == 0 ? LMIC.nwkKey : LMIC.artKey,
 8007016:	4b19      	ldr	r3, [pc, #100]	@ (800707c <buildDataFrame+0x3b0>)
 8007018:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800701c:	2b00      	cmp	r3, #0
 800701e:	d101      	bne.n	8007024 <buildDataFrame+0x358>
 8007020:	481b      	ldr	r0, [pc, #108]	@ (8007090 <buildDataFrame+0x3c4>)
 8007022:	e000      	b.n	8007026 <buildDataFrame+0x35a>
 8007024:	481b      	ldr	r0, [pc, #108]	@ (8007094 <buildDataFrame+0x3c8>)
 8007026:	4b15      	ldr	r3, [pc, #84]	@ (800707c <buildDataFrame+0x3b0>)
 8007028:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
				LMIC.devaddr, LMIC.seqnoUp - 1,
 800702c:	4b13      	ldr	r3, [pc, #76]	@ (800707c <buildDataFrame+0x3b0>)
 800702e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
		aes_cipher(LMIC.pendTxPort == 0 ? LMIC.nwkKey : LMIC.artKey,
 8007032:	1e5c      	subs	r4, r3, #1
				/*up*/0, LMIC.frame + end + 1, dlen);
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	3301      	adds	r3, #1
		aes_cipher(LMIC.pendTxPort == 0 ? LMIC.nwkKey : LMIC.artKey,
 8007038:	4a13      	ldr	r2, [pc, #76]	@ (8007088 <buildDataFrame+0x3bc>)
 800703a:	4413      	add	r3, r2
 800703c:	79ba      	ldrb	r2, [r7, #6]
 800703e:	9201      	str	r2, [sp, #4]
 8007040:	9300      	str	r3, [sp, #0]
 8007042:	2300      	movs	r3, #0
 8007044:	4622      	mov	r2, r4
 8007046:	f7fe f853 	bl	80050f0 <aes_cipher>
	}
	aes_appendMic(LMIC.nwkKey, LMIC.devaddr, LMIC.seqnoUp - 1, /*up*/0,
 800704a:	4b0c      	ldr	r3, [pc, #48]	@ (800707c <buildDataFrame+0x3b0>)
 800704c:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 8007050:	4b0a      	ldr	r3, [pc, #40]	@ (800707c <buildDataFrame+0x3b0>)
 8007052:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8007056:	1e5a      	subs	r2, r3, #1
 8007058:	79fb      	ldrb	r3, [r7, #7]
 800705a:	3b04      	subs	r3, #4
 800705c:	9301      	str	r3, [sp, #4]
 800705e:	4b0a      	ldr	r3, [pc, #40]	@ (8007088 <buildDataFrame+0x3bc>)
 8007060:	9300      	str	r3, [sp, #0]
 8007062:	2300      	movs	r3, #0
 8007064:	480a      	ldr	r0, [pc, #40]	@ (8007090 <buildDataFrame+0x3c4>)
 8007066:	f7fd ffc5 	bl	8004ff4 <aes_appendMic>
					e_.fct = LMIC.frame[LORA::OFF_DAT_FCT],
					e_.port = LMIC.pendTxPort,
					e_.plen = txdata ? dlen : 0,
					e_.opts.length = end-LORA::OFF_DAT_OPTS,
					memcpy(&e_.opts[0], LMIC.frame+LORA::OFF_DAT_OPTS, end-LORA::OFF_DAT_OPTS)));
	LMIC.dataLen = flen;
 800706a:	4a04      	ldr	r2, [pc, #16]	@ (800707c <buildDataFrame+0x3b0>)
 800706c:	79fb      	ldrb	r3, [r7, #7]
 800706e:	f882 3147 	strb.w	r3, [r2, #327]	@ 0x147
}
 8007072:	bf00      	nop
 8007074:	3714      	adds	r7, #20
 8007076:	46bd      	mov	sp, r7
 8007078:	bd90      	pop	{r4, r7, pc}
 800707a:	bf00      	nop
 800707c:	2000033c 	.word	0x2000033c
 8007080:	20000485 	.word	0x20000485
 8007084:	2000048a 	.word	0x2000048a
 8007088:	20000484 	.word	0x20000484
 800708c:	200003f9 	.word	0x200003f9
 8007090:	20000430 	.word	0x20000430
 8007094:	20000440 	.word	0x20000440

08007098 <onBcnRx>:

// Callback from HAL during scan mode or when job timer expires.
static void onBcnRx(xref2osjob_t job)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
	// If we arrive via job timer make sure to put radio to rest.
	os_radio(RADIO_RST);
 80070a0:	2000      	movs	r0, #0
 80070a2:	f001 feaf 	bl	8008e04 <os_radio>
	os_clearCallback(&LMIC.osjob);
 80070a6:	4823      	ldr	r0, [pc, #140]	@ (8007134 <onBcnRx+0x9c>)
 80070a8:	f001 f8ac 	bl	8008204 <os_clearCallback>
	if (LMIC.dataLen == 0) {
 80070ac:	4b22      	ldr	r3, [pc, #136]	@ (8007138 <onBcnRx+0xa0>)
 80070ae:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10c      	bne.n	80070d0 <onBcnRx+0x38>
		// Nothing received - timeout
		LMIC.opmode &= ~(OP_SCAN | OP_TRACK);
 80070b6:	4b20      	ldr	r3, [pc, #128]	@ (8007138 <onBcnRx+0xa0>)
 80070b8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80070bc:	f023 0303 	bic.w	r3, r3, #3
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	4b1d      	ldr	r3, [pc, #116]	@ (8007138 <onBcnRx+0xa0>)
 80070c4:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		reportEvent(EV_SCAN_TIMEOUT);
 80070c8:	2001      	movs	r0, #1
 80070ca:	f7fe fead 	bl	8005e28 <reportEvent>
		return;
 80070ce:	e02d      	b.n	800712c <onBcnRx+0x94>
	}
	if (decodeBeacon() <= 0) {
 80070d0:	f7fe ff2e 	bl	8005f30 <decodeBeacon>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	dc0f      	bgt.n	80070fa <onBcnRx+0x62>
		// Something is wrong with the beacon - continue scan
		LMIC.dataLen = 0;
 80070da:	4b17      	ldr	r3, [pc, #92]	@ (8007138 <onBcnRx+0xa0>)
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
		os_radio(RADIO_RXON);
 80070e2:	2003      	movs	r0, #3
 80070e4:	f001 fe8e 	bl	8008e04 <os_radio>
		os_setTimedCallback(&LMIC.osjob, LMIC.bcninfo.txtime,
 80070e8:	4b13      	ldr	r3, [pc, #76]	@ (8007138 <onBcnRx+0xa0>)
 80070ea:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80070ee:	4a13      	ldr	r2, [pc, #76]	@ (800713c <onBcnRx+0xa4>)
 80070f0:	4619      	mov	r1, r3
 80070f2:	4810      	ldr	r0, [pc, #64]	@ (8007134 <onBcnRx+0x9c>)
 80070f4:	f001 f8ca 	bl	800828c <os_setTimedCallback>
				FUNC_ADDR(onBcnRx));
		return;
 80070f8:	e018      	b.n	800712c <onBcnRx+0x94>
	}
	// Found our 1st beacon
	// We don't have a previous beacon to calc some drift - assume
	// an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
	calcBcnRxWindowFromMillis(13, 1);
 80070fa:	2101      	movs	r1, #1
 80070fc:	200d      	movs	r0, #13
 80070fe:	f7fe f983 	bl	8005408 <calcBcnRxWindowFromMillis>
	LMIC.opmode &= ~OP_SCAN;          // turn SCAN off
 8007102:	4b0d      	ldr	r3, [pc, #52]	@ (8007138 <onBcnRx+0xa0>)
 8007104:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007108:	f023 0301 	bic.w	r3, r3, #1
 800710c:	b29a      	uxth	r2, r3
 800710e:	4b0a      	ldr	r3, [pc, #40]	@ (8007138 <onBcnRx+0xa0>)
 8007110:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	LMIC.opmode |= OP_TRACK;         // auto enable tracking
 8007114:	4b08      	ldr	r3, [pc, #32]	@ (8007138 <onBcnRx+0xa0>)
 8007116:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800711a:	f043 0302 	orr.w	r3, r3, #2
 800711e:	b29a      	uxth	r2, r3
 8007120:	4b05      	ldr	r3, [pc, #20]	@ (8007138 <onBcnRx+0xa0>)
 8007122:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	reportEvent(EV_BEACON_FOUND);    // can be disabled in callback
 8007126:	2002      	movs	r0, #2
 8007128:	f7fe fe7e 	bl	8005e28 <reportEvent>
}
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	20000350 	.word	0x20000350
 8007138:	2000033c 	.word	0x2000033c
 800713c:	08007099 	.word	0x08007099

08007140 <startScan>:
// netid defines when scan stops (any or specific beacon)
// This mode ends with events: EV_SCAN_TIMEOUT/EV_SCAN_BEACON
// Implicitely cancels any pending TX/RX transaction.
// Also cancels an onpoing joining procedure.
static void startScan(void)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	af00      	add	r7, sp, #0
	ASSERT(LMIC.devaddr != 0 && (LMIC.opmode & OP_JOINING) == 0);
 8007144:	4b27      	ldr	r3, [pc, #156]	@ (80071e4 <startScan+0xa4>)
 8007146:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800714a:	2b00      	cmp	r3, #0
 800714c:	d006      	beq.n	800715c <startScan+0x1c>
 800714e:	4b25      	ldr	r3, [pc, #148]	@ (80071e4 <startScan+0xa4>)
 8007150:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007154:	f003 0304 	and.w	r3, r3, #4
 8007158:	2b00      	cmp	r3, #0
 800715a:	d001      	beq.n	8007160 <startScan+0x20>
 800715c:	f7fd fc54 	bl	8004a08 <hal_failed>
	if ((LMIC.opmode & OP_SHUTDOWN) != 0)
 8007160:	4b20      	ldr	r3, [pc, #128]	@ (80071e4 <startScan+0xa4>)
 8007162:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800716a:	2b00      	cmp	r3, #0
 800716c:	d137      	bne.n	80071de <startScan+0x9e>
		return;
	// Cancel onging TX/RX transaction
	LMIC.txCnt = LMIC.dnConf = LMIC.bcninfo.flags = 0;
 800716e:	4b1d      	ldr	r3, [pc, #116]	@ (80071e4 <startScan+0xa4>)
 8007170:	2200      	movs	r2, #0
 8007172:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
 8007176:	4b1b      	ldr	r3, [pc, #108]	@ (80071e4 <startScan+0xa4>)
 8007178:	f893 2196 	ldrb.w	r2, [r3, #406]	@ 0x196
 800717c:	4b19      	ldr	r3, [pc, #100]	@ (80071e4 <startScan+0xa4>)
 800717e:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
 8007182:	4b18      	ldr	r3, [pc, #96]	@ (80071e4 <startScan+0xa4>)
 8007184:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 8007188:	4b16      	ldr	r3, [pc, #88]	@ (80071e4 <startScan+0xa4>)
 800718a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	LMIC.opmode = (LMIC.opmode | OP_SCAN) & ~(OP_TXRXPEND);
 800718e:	4b15      	ldr	r3, [pc, #84]	@ (80071e4 <startScan+0xa4>)
 8007190:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007194:	f043 0301 	orr.w	r3, r3, #1
 8007198:	b29b      	uxth	r3, r3
 800719a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800719e:	b29a      	uxth	r2, r3
 80071a0:	4b10      	ldr	r3, [pc, #64]	@ (80071e4 <startScan+0xa4>)
 80071a2:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	setBcnRxParams();
 80071a6:	f7fe fd71 	bl	8005c8c <setBcnRxParams>
	LMIC.rxtime = LMIC.bcninfo.txtime =
			os_getTime() + sec2osticks(BCN_INTV_sec + 1);
 80071aa:	f001 f805 	bl	80081b8 <os_getTime>
 80071ae:	4603      	mov	r3, r0
 80071b0:	f503 137b 	add.w	r3, r3, #4112384	@ 0x3ec000
 80071b4:	f503 5374 	add.w	r3, r3, #15616	@ 0x3d00
	LMIC.rxtime = LMIC.bcninfo.txtime =
 80071b8:	4a0a      	ldr	r2, [pc, #40]	@ (80071e4 <startScan+0xa4>)
 80071ba:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
 80071be:	4b09      	ldr	r3, [pc, #36]	@ (80071e4 <startScan+0xa4>)
 80071c0:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80071c4:	4a07      	ldr	r2, [pc, #28]	@ (80071e4 <startScan+0xa4>)
 80071c6:	6053      	str	r3, [r2, #4]
	os_setTimedCallback(&LMIC.osjob, LMIC.rxtime, FUNC_ADDR(onBcnRx));
 80071c8:	4b06      	ldr	r3, [pc, #24]	@ (80071e4 <startScan+0xa4>)
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	4a06      	ldr	r2, [pc, #24]	@ (80071e8 <startScan+0xa8>)
 80071ce:	4619      	mov	r1, r3
 80071d0:	4806      	ldr	r0, [pc, #24]	@ (80071ec <startScan+0xac>)
 80071d2:	f001 f85b 	bl	800828c <os_setTimedCallback>
	os_radio(RADIO_RXON);
 80071d6:	2003      	movs	r0, #3
 80071d8:	f001 fe14 	bl	8008e04 <os_radio>
 80071dc:	e000      	b.n	80071e0 <startScan+0xa0>
		return;
 80071de:	bf00      	nop
}
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	2000033c 	.word	0x2000033c
 80071e8:	08007099 	.word	0x08007099
 80071ec:	20000350 	.word	0x20000350

080071f0 <buildJoinRequest>:
// Join stuff
//
// ================================================================================

static void buildJoinRequest(u1_t ftype)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	4603      	mov	r3, r0
 80071f8:	71fb      	strb	r3, [r7, #7]
	// Do not use pendTxData since we might have a pending
	// user level frame in there. Use RX holding area instead.
	xref2u1_t d = LMIC.frame;
 80071fa:	4b16      	ldr	r3, [pc, #88]	@ (8007254 <buildJoinRequest+0x64>)
 80071fc:	60fb      	str	r3, [r7, #12]
	d[OFF_JR_HDR] = ftype;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	79fa      	ldrb	r2, [r7, #7]
 8007202:	701a      	strb	r2, [r3, #0]
	os_getArtEui(d + OFF_JR_ARTEUI);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	3301      	adds	r3, #1
 8007208:	4618      	mov	r0, r3
 800720a:	f000 fd33 	bl	8007c74 <os_getArtEui>
	os_getDevEui(d + OFF_JR_DEVEUI);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	3309      	adds	r3, #9
 8007212:	4618      	mov	r0, r3
 8007214:	f000 fd42 	bl	8007c9c <os_getDevEui>
	os_wlsbf2(d + OFF_JR_DEVNONCE, LMIC.devNonce);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	3311      	adds	r3, #17
 800721c:	4a0e      	ldr	r2, [pc, #56]	@ (8007258 <buildJoinRequest+0x68>)
 800721e:	f8b2 20f2 	ldrh.w	r2, [r2, #242]	@ 0xf2
 8007222:	4611      	mov	r1, r2
 8007224:	4618      	mov	r0, r3
 8007226:	f7fd fde5 	bl	8004df4 <os_wlsbf2>
	aes_appendMic0(d, OFF_JR_MIC);
 800722a:	2113      	movs	r1, #19
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f7fd ff09 	bl	8005044 <aes_appendMic0>
					e_.oldaddr = LMIC.devaddr,
					e_.mic = Base::lsbf4(&d[LORA::OFF_JR_MIC]),
					e_.reason = ((LMIC.opmode & OP_REJOIN) != 0
							? EV::joininfo_t::REJOIN_REQUEST
							: EV::joininfo_t::REQUEST)));
	LMIC.dataLen = LEN_JR;
 8007232:	4b09      	ldr	r3, [pc, #36]	@ (8007258 <buildJoinRequest+0x68>)
 8007234:	2217      	movs	r2, #23
 8007236:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
	LMIC.devNonce++;
 800723a:	4b07      	ldr	r3, [pc, #28]	@ (8007258 <buildJoinRequest+0x68>)
 800723c:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 8007240:	3301      	adds	r3, #1
 8007242:	b29a      	uxth	r2, r3
 8007244:	4b04      	ldr	r3, [pc, #16]	@ (8007258 <buildJoinRequest+0x68>)
 8007246:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
	DO_DEVDB(LMIC.devNonce,devNonce);
}
 800724a:	bf00      	nop
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	20000484 	.word	0x20000484
 8007258:	2000033c 	.word	0x2000033c

0800725c <startJoining>:

static void startJoining(xref2osjob_t osjob)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
	reportEvent(EV_JOINING);
 8007264:	2005      	movs	r0, #5
 8007266:	f7fe fddf 	bl	8005e28 <reportEvent>
}
 800726a:	bf00      	nop
 800726c:	3708      	adds	r7, #8
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
	...

08007274 <LMIC_startJoining>:

// Start join procedure if not already joined.
bit_t LMIC_startJoining(void)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	af00      	add	r7, sp, #0
	if (LMIC.devaddr == 0) {
 8007278:	4b20      	ldr	r3, [pc, #128]	@ (80072fc <LMIC_startJoining+0x88>)
 800727a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800727e:	2b00      	cmp	r3, #0
 8007280:	d138      	bne.n	80072f4 <LMIC_startJoining+0x80>
		// There should be no TX/RX going on
		ASSERT((LMIC.opmode & (OP_POLL | OP_TXRXPEND)) == 0);
 8007282:	4b1e      	ldr	r3, [pc, #120]	@ (80072fc <LMIC_startJoining+0x88>)
 8007284:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007288:	f003 0390 	and.w	r3, r3, #144	@ 0x90
 800728c:	2b00      	cmp	r3, #0
 800728e:	d001      	beq.n	8007294 <LMIC_startJoining+0x20>
 8007290:	f7fd fbba 	bl	8004a08 <hal_failed>
		// Lift any previous duty limitation
		LMIC.globalDutyRate = 0;
 8007294:	4b19      	ldr	r3, [pc, #100]	@ (80072fc <LMIC_startJoining+0x88>)
 8007296:	2200      	movs	r2, #0
 8007298:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
		// Cancel scanning
		LMIC.opmode &= ~(OP_SCAN | OP_REJOIN | OP_LINKDEAD | OP_NEXTCHNL);
 800729c:	4b17      	ldr	r3, [pc, #92]	@ (80072fc <LMIC_startJoining+0x88>)
 800729e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80072a2:	f423 53c1 	bic.w	r3, r3, #6176	@ 0x1820
 80072a6:	f023 0301 	bic.w	r3, r3, #1
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	4b13      	ldr	r3, [pc, #76]	@ (80072fc <LMIC_startJoining+0x88>)
 80072ae:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		// Setup state
		LMIC.rejoinCnt = LMIC.txCnt = LMIC.pendTxConf = 0;
 80072b2:	4b12      	ldr	r3, [pc, #72]	@ (80072fc <LMIC_startJoining+0x88>)
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 20bb 	strb.w	r2, [r3, #187]	@ 0xbb
 80072ba:	4b10      	ldr	r3, [pc, #64]	@ (80072fc <LMIC_startJoining+0x88>)
 80072bc:	f893 20bb 	ldrb.w	r2, [r3, #187]	@ 0xbb
 80072c0:	4b0e      	ldr	r3, [pc, #56]	@ (80072fc <LMIC_startJoining+0x88>)
 80072c2:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
 80072c6:	4b0d      	ldr	r3, [pc, #52]	@ (80072fc <LMIC_startJoining+0x88>)
 80072c8:	f893 2144 	ldrb.w	r2, [r3, #324]	@ 0x144
 80072cc:	4b0b      	ldr	r3, [pc, #44]	@ (80072fc <LMIC_startJoining+0x88>)
 80072ce:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
		initJoinLoop();
 80072d2:	f7fe fd01 	bl	8005cd8 <initJoinLoop>
		LMIC.opmode |= OP_JOINING;
 80072d6:	4b09      	ldr	r3, [pc, #36]	@ (80072fc <LMIC_startJoining+0x88>)
 80072d8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80072dc:	f043 0304 	orr.w	r3, r3, #4
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	4b06      	ldr	r3, [pc, #24]	@ (80072fc <LMIC_startJoining+0x88>)
 80072e4:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		// reportEvent will call engineUpdate which then starts sending JOIN REQUESTS
		os_setCallback(&LMIC.osjob, FUNC_ADDR(startJoining));
 80072e8:	4905      	ldr	r1, [pc, #20]	@ (8007300 <LMIC_startJoining+0x8c>)
 80072ea:	4806      	ldr	r0, [pc, #24]	@ (8007304 <LMIC_startJoining+0x90>)
 80072ec:	f000 ffa8 	bl	8008240 <os_setCallback>
		return 1;
 80072f0:	2301      	movs	r3, #1
 80072f2:	e000      	b.n	80072f6 <LMIC_startJoining+0x82>
	}
	return 0; // already joined
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	2000033c 	.word	0x2000033c
 8007300:	0800725d 	.word	0x0800725d
 8007304:	20000350 	.word	0x20000350

08007308 <processPingRx>:
//
//
// ================================================================================

static void processPingRx(xref2osjob_t osjob)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
	if (LMIC.dataLen != 0) {
 8007310:	4b0b      	ldr	r3, [pc, #44]	@ (8007340 <processPingRx+0x38>)
 8007312:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00c      	beq.n	8007334 <processPingRx+0x2c>
		LMIC.txrxFlags = TXRX_PING;
 800731a:	4b09      	ldr	r3, [pc, #36]	@ (8007340 <processPingRx+0x38>)
 800731c:	2204      	movs	r2, #4
 800731e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		if (decodeFrame()) {
 8007322:	f7fe fe99 	bl	8006058 <decodeFrame>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d003      	beq.n	8007334 <processPingRx+0x2c>
			reportEvent(EV_RXCOMPLETE);
 800732c:	200d      	movs	r0, #13
 800732e:	f7fe fd7b 	bl	8005e28 <reportEvent>
			return;
 8007332:	e001      	b.n	8007338 <processPingRx+0x30>
		}
	}
	// Pick next ping slot
	engineUpdate();
 8007334:	f000 fa2a 	bl	800778c <engineUpdate>
}
 8007338:	3708      	adds	r7, #8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	2000033c 	.word	0x2000033c

08007344 <processDnData>:

static bit_t processDnData(void)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	af00      	add	r7, sp, #0
	ASSERT((LMIC.opmode & OP_TXRXPEND) != 0);
 8007348:	4b76      	ldr	r3, [pc, #472]	@ (8007524 <processDnData+0x1e0>)
 800734a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800734e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007352:	2b00      	cmp	r3, #0
 8007354:	d101      	bne.n	800735a <processDnData+0x16>
 8007356:	f7fd fb57 	bl	8004a08 <hal_failed>

	if (LMIC.dataLen == 0) {
 800735a:	4b72      	ldr	r3, [pc, #456]	@ (8007524 <processDnData+0x1e0>)
 800735c:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8007360:	2b00      	cmp	r3, #0
 8007362:	f040 80ce 	bne.w	8007502 <processDnData+0x1be>
		norx: if (LMIC.txCnt != 0) {
 8007366:	bf00      	nop
 8007368:	e000      	b.n	800736c <processDnData+0x28>
		return 1;
	}
	if (!decodeFrame()) {
		if ((LMIC.txrxFlags & TXRX_DNW1) != 0)
			return 0;
		goto norx;
 800736a:	bf00      	nop
		norx: if (LMIC.txCnt != 0) {
 800736c:	4b6d      	ldr	r3, [pc, #436]	@ (8007524 <processDnData+0x1e0>)
 800736e:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8007372:	2b00      	cmp	r3, #0
 8007374:	d038      	beq.n	80073e8 <processDnData+0xa4>
			if (LMIC.txCnt < TXCONF_ATTEMPTS) {
 8007376:	4b6b      	ldr	r3, [pc, #428]	@ (8007524 <processDnData+0x1e0>)
 8007378:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 800737c:	2b07      	cmp	r3, #7
 800737e:	d82e      	bhi.n	80073de <processDnData+0x9a>
				LMIC.txCnt += 1;
 8007380:	4b68      	ldr	r3, [pc, #416]	@ (8007524 <processDnData+0x1e0>)
 8007382:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8007386:	3301      	adds	r3, #1
 8007388:	b2da      	uxtb	r2, r3
 800738a:	4b66      	ldr	r3, [pc, #408]	@ (8007524 <processDnData+0x1e0>)
 800738c:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
				setDrTxpow(DRCHG_NOACK,
 8007390:	4b64      	ldr	r3, [pc, #400]	@ (8007524 <processDnData+0x1e0>)
 8007392:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
						lowerDR(LMIC.datarate, DRADJUST[LMIC.txCnt]),
 8007396:	4a63      	ldr	r2, [pc, #396]	@ (8007524 <processDnData+0x1e0>)
 8007398:	f892 2144 	ldrb.w	r2, [r2, #324]	@ 0x144
 800739c:	4611      	mov	r1, r2
 800739e:	4a62      	ldr	r2, [pc, #392]	@ (8007528 <processDnData+0x1e4>)
 80073a0:	5c52      	ldrb	r2, [r2, r1]
				setDrTxpow(DRCHG_NOACK,
 80073a2:	4611      	mov	r1, r2
 80073a4:	4618      	mov	r0, r3
 80073a6:	f7fd fcbd 	bl	8004d24 <lowerDR>
 80073aa:	4603      	mov	r3, r0
 80073ac:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 80073b0:	4619      	mov	r1, r3
 80073b2:	2002      	movs	r0, #2
 80073b4:	f7fe f9ea 	bl	800578c <setDrTxpow>
				txDelay(LMIC.rxtime, RETRY_PERIOD_secs);
 80073b8:	4b5a      	ldr	r3, [pc, #360]	@ (8007524 <processDnData+0x1e0>)
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	2103      	movs	r1, #3
 80073be:	4618      	mov	r0, r3
 80073c0:	f7fe f9a2 	bl	8005708 <txDelay>
				LMIC.opmode &= ~OP_TXRXPEND;
 80073c4:	4b57      	ldr	r3, [pc, #348]	@ (8007524 <processDnData+0x1e0>)
 80073c6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80073ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	4b54      	ldr	r3, [pc, #336]	@ (8007524 <processDnData+0x1e0>)
 80073d2:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
				engineUpdate();
 80073d6:	f000 f9d9 	bl	800778c <engineUpdate>
				return 1;
 80073da:	2301      	movs	r3, #1
 80073dc:	e09f      	b.n	800751e <processDnData+0x1da>
			LMIC.txrxFlags = TXRX_NACK | TXRX_NOPORT;
 80073de:	4b51      	ldr	r3, [pc, #324]	@ (8007524 <processDnData+0x1e0>)
 80073e0:	2260      	movs	r2, #96	@ 0x60
 80073e2:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
 80073e6:	e003      	b.n	80073f0 <processDnData+0xac>
			LMIC.txrxFlags = TXRX_NOPORT;
 80073e8:	4b4e      	ldr	r3, [pc, #312]	@ (8007524 <processDnData+0x1e0>)
 80073ea:	2220      	movs	r2, #32
 80073ec:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		if (LMIC.adrAckReq != LINK_CHECK_OFF)
 80073f0:	4b4c      	ldr	r3, [pc, #304]	@ (8007524 <processDnData+0x1e0>)
 80073f2:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 80073f6:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 80073fa:	d009      	beq.n	8007410 <processDnData+0xcc>
			LMIC.adrAckReq += 1;
 80073fc:	4b49      	ldr	r3, [pc, #292]	@ (8007524 <processDnData+0x1e0>)
 80073fe:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 8007402:	b2db      	uxtb	r3, r3
 8007404:	3301      	adds	r3, #1
 8007406:	b2db      	uxtb	r3, r3
 8007408:	b25a      	sxtb	r2, r3
 800740a:	4b46      	ldr	r3, [pc, #280]	@ (8007524 <processDnData+0x1e0>)
 800740c:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
		LMIC.dataBeg = LMIC.dataLen = 0;
 8007410:	4b44      	ldr	r3, [pc, #272]	@ (8007524 <processDnData+0x1e0>)
 8007412:	2200      	movs	r2, #0
 8007414:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 8007418:	4b42      	ldr	r3, [pc, #264]	@ (8007524 <processDnData+0x1e0>)
 800741a:	f893 2147 	ldrb.w	r2, [r3, #327]	@ 0x147
 800741e:	4b41      	ldr	r3, [pc, #260]	@ (8007524 <processDnData+0x1e0>)
 8007420:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
 8007424:	e000      	b.n	8007428 <processDnData+0xe4>
	}
	goto txcomplete;
 8007426:	bf00      	nop
		txcomplete: LMIC.opmode &= ~(OP_TXDATA | OP_TXRXPEND);
 8007428:	4b3e      	ldr	r3, [pc, #248]	@ (8007524 <processDnData+0x1e0>)
 800742a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800742e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007432:	b29a      	uxth	r2, r3
 8007434:	4b3b      	ldr	r3, [pc, #236]	@ (8007524 <processDnData+0x1e0>)
 8007436:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		if ((LMIC.txrxFlags & (TXRX_DNW1 | TXRX_DNW2 | TXRX_PING)) != 0
 800743a:	4b3a      	ldr	r3, [pc, #232]	@ (8007524 <processDnData+0x1e0>)
 800743c:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8007440:	f003 0307 	and.w	r3, r3, #7
 8007444:	2b00      	cmp	r3, #0
 8007446:	d012      	beq.n	800746e <processDnData+0x12a>
				&& (LMIC.opmode & OP_LINKDEAD) != 0) {
 8007448:	4b36      	ldr	r3, [pc, #216]	@ (8007524 <processDnData+0x1e0>)
 800744a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800744e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00b      	beq.n	800746e <processDnData+0x12a>
			LMIC.opmode &= ~OP_LINKDEAD;
 8007456:	4b33      	ldr	r3, [pc, #204]	@ (8007524 <processDnData+0x1e0>)
 8007458:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800745c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007460:	b29a      	uxth	r2, r3
 8007462:	4b30      	ldr	r3, [pc, #192]	@ (8007524 <processDnData+0x1e0>)
 8007464:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			reportEvent(EV_LINK_ALIVE);
 8007468:	200f      	movs	r0, #15
 800746a:	f7fe fcdd 	bl	8005e28 <reportEvent>
		reportEvent(EV_TXCOMPLETE);
 800746e:	200a      	movs	r0, #10
 8007470:	f7fe fcda 	bl	8005e28 <reportEvent>
		if (LMIC.adrAckReq > LINK_CHECK_DEAD) {
 8007474:	4b2b      	ldr	r3, [pc, #172]	@ (8007524 <processDnData+0x1e0>)
 8007476:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 800747a:	2b18      	cmp	r3, #24
 800747c:	dd1c      	ble.n	80074b8 <processDnData+0x174>
			setDrTxpow(DRCHG_NOADRACK, decDR((dr_t) LMIC.datarate), KEEP_TXPOW);
 800747e:	4b29      	ldr	r3, [pc, #164]	@ (8007524 <processDnData+0x1e0>)
 8007480:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8007484:	4618      	mov	r0, r3
 8007486:	f7fd fc1f 	bl	8004cc8 <decDR>
 800748a:	4603      	mov	r3, r0
 800748c:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 8007490:	4619      	mov	r1, r3
 8007492:	2003      	movs	r0, #3
 8007494:	f7fe f97a 	bl	800578c <setDrTxpow>
			LMIC.adrAckReq = LINK_CHECK_CONT;
 8007498:	4b22      	ldr	r3, [pc, #136]	@ (8007524 <processDnData+0x1e0>)
 800749a:	220c      	movs	r2, #12
 800749c:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
			LMIC.opmode |= OP_REJOIN | OP_LINKDEAD;
 80074a0:	4b20      	ldr	r3, [pc, #128]	@ (8007524 <processDnData+0x1e0>)
 80074a2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80074a6:	f443 5381 	orr.w	r3, r3, #4128	@ 0x1020
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	4b1d      	ldr	r3, [pc, #116]	@ (8007524 <processDnData+0x1e0>)
 80074ae:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			reportEvent(EV_LINK_DEAD);
 80074b2:	200e      	movs	r0, #14
 80074b4:	f7fe fcb8 	bl	8005e28 <reportEvent>
		if (LMIC.bcninfoTries > 0) {
 80074b8:	4b1a      	ldr	r3, [pc, #104]	@ (8007524 <processDnData+0x1e0>)
 80074ba:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d01d      	beq.n	80074fe <processDnData+0x1ba>
			if ((LMIC.opmode & OP_TRACK) != 0) {
 80074c2:	4b18      	ldr	r3, [pc, #96]	@ (8007524 <processDnData+0x1e0>)
 80074c4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80074c8:	f003 0302 	and.w	r3, r3, #2
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d007      	beq.n	80074e0 <processDnData+0x19c>
				reportEvent(EV_BEACON_FOUND);
 80074d0:	2002      	movs	r0, #2
 80074d2:	f7fe fca9 	bl	8005e28 <reportEvent>
				LMIC.bcninfoTries = 0;
 80074d6:	4b13      	ldr	r3, [pc, #76]	@ (8007524 <processDnData+0x1e0>)
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
 80074de:	e00e      	b.n	80074fe <processDnData+0x1ba>
			} else if (--LMIC.bcninfoTries == 0) {
 80074e0:	4b10      	ldr	r3, [pc, #64]	@ (8007524 <processDnData+0x1e0>)
 80074e2:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 80074e6:	3b01      	subs	r3, #1
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	4b0e      	ldr	r3, [pc, #56]	@ (8007524 <processDnData+0x1e0>)
 80074ec:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
 80074f0:	4b0c      	ldr	r3, [pc, #48]	@ (8007524 <processDnData+0x1e0>)
 80074f2:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d101      	bne.n	80074fe <processDnData+0x1ba>
				startScan();   // NWK did not answer - try scan
 80074fa:	f7ff fe21 	bl	8007140 <startScan>
		return 1;
 80074fe:	2301      	movs	r3, #1
 8007500:	e00d      	b.n	800751e <processDnData+0x1da>
	if (!decodeFrame()) {
 8007502:	f7fe fda9 	bl	8006058 <decodeFrame>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d18c      	bne.n	8007426 <processDnData+0xe2>
		if ((LMIC.txrxFlags & TXRX_DNW1) != 0)
 800750c:	4b05      	ldr	r3, [pc, #20]	@ (8007524 <processDnData+0x1e0>)
 800750e:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8007512:	f003 0301 	and.w	r3, r3, #1
 8007516:	2b00      	cmp	r3, #0
 8007518:	f43f af27 	beq.w	800736a <processDnData+0x26>
			return 0;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	2000033c 	.word	0x2000033c
 8007528:	08011344 	.word	0x08011344

0800752c <processBeacon>:

static void processBeacon(xref2osjob_t osjob)
{
 800752c:	b590      	push	{r4, r7, lr}
 800752e:	b087      	sub	sp, #28
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
	ostime_t lasttx = LMIC.bcninfo.txtime; // save here - decodeBeacon might overwrite
 8007534:	4b81      	ldr	r3, [pc, #516]	@ (800773c <processBeacon+0x210>)
 8007536:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 800753a:	60fb      	str	r3, [r7, #12]
	u1_t flags = LMIC.bcninfo.flags;
 800753c:	4b7f      	ldr	r3, [pc, #508]	@ (800773c <processBeacon+0x210>)
 800753e:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8007542:	72fb      	strb	r3, [r7, #11]
	ev_t ev;

	if (LMIC.dataLen != 0 && decodeBeacon() >= 1) {
 8007544:	4b7d      	ldr	r3, [pc, #500]	@ (800773c <processBeacon+0x210>)
 8007546:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 800754a:	2b00      	cmp	r3, #0
 800754c:	f000 8087 	beq.w	800765e <processBeacon+0x132>
 8007550:	f7fe fcee 	bl	8005f30 <decodeBeacon>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	f340 8081 	ble.w	800765e <processBeacon+0x132>
		ev = EV_BEACON_TRACKED;
 800755c:	2304      	movs	r3, #4
 800755e:	75fb      	strb	r3, [r7, #23]
		if ((flags & (BCN_PARTIAL | BCN_FULL)) == 0) {
 8007560:	7afb      	ldrb	r3, [r7, #11]
 8007562:	f003 0303 	and.w	r3, r3, #3
 8007566:	2b00      	cmp	r3, #0
 8007568:	d104      	bne.n	8007574 <processBeacon+0x48>
			// We don't have a previous beacon to calc some drift - assume
			// an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
			calcBcnRxWindowFromMillis(13, 0);
 800756a:	2100      	movs	r1, #0
 800756c:	200d      	movs	r0, #13
 800756e:	f7fd ff4b 	bl	8005408 <calcBcnRxWindowFromMillis>
			goto rev;
 8007572:	e0d2      	b.n	800771a <processBeacon+0x1ee>
		}
		// We have a previous BEACON to calculate some drift
		s2_t drift = BCN_INTV_osticks - (LMIC.bcninfo.txtime - lasttx);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	b29a      	uxth	r2, r3
 8007578:	4b70      	ldr	r3, [pc, #448]	@ (800773c <processBeacon+0x210>)
 800757a:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 800757e:	b29b      	uxth	r3, r3
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	b29b      	uxth	r3, r3
 8007584:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8007588:	b29b      	uxth	r3, r3
 800758a:	82bb      	strh	r3, [r7, #20]
		if (LMIC.missedBcns > 0) {
 800758c:	4b6b      	ldr	r3, [pc, #428]	@ (800773c <processBeacon+0x210>)
 800758e:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8007592:	2b00      	cmp	r3, #0
 8007594:	d013      	beq.n	80075be <processBeacon+0x92>
			drift = LMIC.drift + (drift - LMIC.drift) / (LMIC.missedBcns + 1);
 8007596:	4b69      	ldr	r3, [pc, #420]	@ (800773c <processBeacon+0x210>)
 8007598:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 800759c:	b29a      	uxth	r2, r3
 800759e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80075a2:	4966      	ldr	r1, [pc, #408]	@ (800773c <processBeacon+0x210>)
 80075a4:	f9b1 10b4 	ldrsh.w	r1, [r1, #180]	@ 0xb4
 80075a8:	1a59      	subs	r1, r3, r1
 80075aa:	4b64      	ldr	r3, [pc, #400]	@ (800773c <processBeacon+0x210>)
 80075ac:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 80075b0:	3301      	adds	r3, #1
 80075b2:	fb91 f3f3 	sdiv	r3, r1, r3
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	4413      	add	r3, r2
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	82bb      	strh	r3, [r7, #20]
		}
		if ((LMIC.bcninfo.flags & BCN_NODRIFT) == 0) {
 80075be:	4b5f      	ldr	r3, [pc, #380]	@ (800773c <processBeacon+0x210>)
 80075c0:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 80075c4:	f003 0304 	and.w	r3, r3, #4
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d127      	bne.n	800761c <processBeacon+0xf0>
			s2_t diff = LMIC.drift - drift;
 80075cc:	4b5b      	ldr	r3, [pc, #364]	@ (800773c <processBeacon+0x210>)
 80075ce:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	8abb      	ldrh	r3, [r7, #20]
 80075d6:	1ad3      	subs	r3, r2, r3
 80075d8:	b29b      	uxth	r3, r3
 80075da:	827b      	strh	r3, [r7, #18]
			if (diff < 0)
 80075dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	da03      	bge.n	80075ec <processBeacon+0xc0>
				diff = -diff;
 80075e4:	8a7b      	ldrh	r3, [r7, #18]
 80075e6:	425b      	negs	r3, r3
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	827b      	strh	r3, [r7, #18]
			LMIC.lastDriftDiff = diff;
 80075ec:	4a53      	ldr	r2, [pc, #332]	@ (800773c <processBeacon+0x210>)
 80075ee:	8a7b      	ldrh	r3, [r7, #18]
 80075f0:	f8a2 30b6 	strh.w	r3, [r2, #182]	@ 0xb6
			if (LMIC.maxDriftDiff < diff)
 80075f4:	4b51      	ldr	r3, [pc, #324]	@ (800773c <processBeacon+0x210>)
 80075f6:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 80075fa:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80075fe:	429a      	cmp	r2, r3
 8007600:	dd03      	ble.n	800760a <processBeacon+0xde>
				LMIC.maxDriftDiff = diff;
 8007602:	4a4e      	ldr	r2, [pc, #312]	@ (800773c <processBeacon+0x210>)
 8007604:	8a7b      	ldrh	r3, [r7, #18]
 8007606:	f8a2 30b8 	strh.w	r3, [r2, #184]	@ 0xb8
			LMIC.bcninfo.flags &= ~BCN_NODDIFF;
 800760a:	4b4c      	ldr	r3, [pc, #304]	@ (800773c <processBeacon+0x210>)
 800760c:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8007610:	f023 0308 	bic.w	r3, r3, #8
 8007614:	b2da      	uxtb	r2, r3
 8007616:	4b49      	ldr	r3, [pc, #292]	@ (800773c <processBeacon+0x210>)
 8007618:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
		}
		LMIC.drift = drift;
 800761c:	4a47      	ldr	r2, [pc, #284]	@ (800773c <processBeacon+0x210>)
 800761e:	8abb      	ldrh	r3, [r7, #20]
 8007620:	f8a2 30b4 	strh.w	r3, [r2, #180]	@ 0xb4
		LMIC.missedBcns = LMIC.rejoinCnt = 0;
 8007624:	4b45      	ldr	r3, [pc, #276]	@ (800773c <processBeacon+0x210>)
 8007626:	2200      	movs	r2, #0
 8007628:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
 800762c:	4b43      	ldr	r3, [pc, #268]	@ (800773c <processBeacon+0x210>)
 800762e:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 8007632:	4b42      	ldr	r3, [pc, #264]	@ (800773c <processBeacon+0x210>)
 8007634:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
		LMIC.bcninfo.flags &= ~BCN_NODRIFT;
 8007638:	4b40      	ldr	r3, [pc, #256]	@ (800773c <processBeacon+0x210>)
 800763a:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 800763e:	f023 0304 	bic.w	r3, r3, #4
 8007642:	b2da      	uxtb	r2, r3
 8007644:	4b3d      	ldr	r3, [pc, #244]	@ (800773c <processBeacon+0x210>)
 8007646:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
		EV(devCond,INFO,(e_.reason = EV::devCond_t::CLOCK_DRIFT,
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = drift,
						e_.info2 = /*occasion BEACON*/0));
		ASSERT((LMIC.bcninfo.flags & (BCN_PARTIAL | BCN_FULL)) != 0);
 800764a:	4b3c      	ldr	r3, [pc, #240]	@ (800773c <processBeacon+0x210>)
 800764c:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8007650:	f003 0303 	and.w	r3, r3, #3
 8007654:	2b00      	cmp	r3, #0
 8007656:	d14c      	bne.n	80076f2 <processBeacon+0x1c6>
 8007658:	f7fd f9d6 	bl	8004a08 <hal_failed>
	if (LMIC.dataLen != 0 && decodeBeacon() >= 1) {
 800765c:	e049      	b.n	80076f2 <processBeacon+0x1c6>
	} else {
		ev = EV_BEACON_MISSED;
 800765e:	2303      	movs	r3, #3
 8007660:	75fb      	strb	r3, [r7, #23]
		LMIC.bcninfo.txtime += BCN_INTV_osticks - LMIC.drift;
 8007662:	4b36      	ldr	r3, [pc, #216]	@ (800773c <processBeacon+0x210>)
 8007664:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8007668:	4b34      	ldr	r3, [pc, #208]	@ (800773c <processBeacon+0x210>)
 800766a:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 800766e:	f5c3 137a 	rsb	r3, r3, #4096000	@ 0x3e8000
 8007672:	4413      	add	r3, r2
 8007674:	4a31      	ldr	r2, [pc, #196]	@ (800773c <processBeacon+0x210>)
 8007676:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
		LMIC.bcninfo.time += BCN_INTV_sec;
 800767a:	4b30      	ldr	r3, [pc, #192]	@ (800773c <processBeacon+0x210>)
 800767c:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8007680:	3380      	adds	r3, #128	@ 0x80
 8007682:	4a2e      	ldr	r2, [pc, #184]	@ (800773c <processBeacon+0x210>)
 8007684:	f8c2 3198 	str.w	r3, [r2, #408]	@ 0x198
		LMIC.missedBcns++;
 8007688:	4b2c      	ldr	r3, [pc, #176]	@ (800773c <processBeacon+0x210>)
 800768a:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 800768e:	3301      	adds	r3, #1
 8007690:	b2da      	uxtb	r2, r3
 8007692:	4b2a      	ldr	r3, [pc, #168]	@ (800773c <processBeacon+0x210>)
 8007694:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
		// Delay any possible TX after surmised beacon - it's there although we missed it
		txDelay(LMIC.bcninfo.txtime + BCN_RESERVE_osticks, 4);
 8007698:	4b28      	ldr	r3, [pc, #160]	@ (800773c <processBeacon+0x210>)
 800769a:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 800769e:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 80076a2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80076a6:	2104      	movs	r1, #4
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7fe f82d 	bl	8005708 <txDelay>
		if (LMIC.missedBcns > MAX_MISSED_BCNS)
 80076ae:	4b23      	ldr	r3, [pc, #140]	@ (800773c <processBeacon+0x210>)
 80076b0:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 80076b4:	2b14      	cmp	r3, #20
 80076b6:	d908      	bls.n	80076ca <processBeacon+0x19e>
			LMIC.opmode |= OP_REJOIN;  // try if we can roam to another network
 80076b8:	4b20      	ldr	r3, [pc, #128]	@ (800773c <processBeacon+0x210>)
 80076ba:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80076be:	f043 0320 	orr.w	r3, r3, #32
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	4b1d      	ldr	r3, [pc, #116]	@ (800773c <processBeacon+0x210>)
 80076c6:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		if (LMIC.bcnRxsyms > MAX_RXSYMS) {
 80076ca:	4b1c      	ldr	r3, [pc, #112]	@ (800773c <processBeacon+0x210>)
 80076cc:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 80076d0:	2b64      	cmp	r3, #100	@ 0x64
 80076d2:	d90f      	bls.n	80076f4 <processBeacon+0x1c8>
			LMIC.opmode &= ~(OP_TRACK | OP_PINGABLE | OP_PINGINI | OP_REJOIN);
 80076d4:	4b19      	ldr	r3, [pc, #100]	@ (800773c <processBeacon+0x210>)
 80076d6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80076da:	f423 63c4 	bic.w	r3, r3, #1568	@ 0x620
 80076de:	f023 0302 	bic.w	r3, r3, #2
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	4b15      	ldr	r3, [pc, #84]	@ (800773c <processBeacon+0x210>)
 80076e6:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			reportEvent(EV_LOST_TSYNC);
 80076ea:	200b      	movs	r0, #11
 80076ec:	f7fe fb9c 	bl	8005e28 <reportEvent>
			return;
 80076f0:	e021      	b.n	8007736 <processBeacon+0x20a>
	if (LMIC.dataLen != 0 && decodeBeacon() >= 1) {
 80076f2:	bf00      	nop
		}
	}
	LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks
 80076f4:	4b11      	ldr	r3, [pc, #68]	@ (800773c <processBeacon+0x210>)
 80076f6:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80076fa:	f503 147a 	add.w	r4, r3, #4096000	@ 0x3e8000
			- calcRxWindow(0, DR_BCN);
 80076fe:	2103      	movs	r1, #3
 8007700:	2000      	movs	r0, #0
 8007702:	f7fd fe2d 	bl	8005360 <calcRxWindow>
 8007706:	4603      	mov	r3, r0
 8007708:	1ae3      	subs	r3, r4, r3
	LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks
 800770a:	4a0c      	ldr	r2, [pc, #48]	@ (800773c <processBeacon+0x210>)
 800770c:	f8c2 318c 	str.w	r3, [r2, #396]	@ 0x18c
	LMIC.bcnRxsyms = LMIC.rxsyms;
 8007710:	4b0a      	ldr	r3, [pc, #40]	@ (800773c <processBeacon+0x210>)
 8007712:	7c1a      	ldrb	r2, [r3, #16]
 8007714:	4b09      	ldr	r3, [pc, #36]	@ (800773c <processBeacon+0x210>)
 8007716:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
	rev:
#if CFG_us915
    LMIC.bcnChnl = (LMIC.bcnChnl+1) & 7;
#endif
	if ((LMIC.opmode & OP_PINGINI) != 0)
 800771a:	4b08      	ldr	r3, [pc, #32]	@ (800773c <processBeacon+0x210>)
 800771c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007720:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007724:	2b00      	cmp	r3, #0
 8007726:	d002      	beq.n	800772e <processBeacon+0x202>
		rxschedInit(&LMIC.ping);  // note: reuses LMIC.frame buffer!
 8007728:	4805      	ldr	r0, [pc, #20]	@ (8007740 <processBeacon+0x214>)
 800772a:	f7fd fef3 	bl	8005514 <rxschedInit>
	reportEvent(ev);
 800772e:	7dfb      	ldrb	r3, [r7, #23]
 8007730:	4618      	mov	r0, r3
 8007732:	f7fe fb79 	bl	8005e28 <reportEvent>
}
 8007736:	371c      	adds	r7, #28
 8007738:	46bd      	mov	sp, r7
 800773a:	bd90      	pop	{r4, r7, pc}
 800773c:	2000033c 	.word	0x2000033c
 8007740:	20000470 	.word	0x20000470

08007744 <startRxBcn>:

static void startRxBcn(xref2osjob_t osjob)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
	LMIC.osjob.func = FUNC_ADDR(processBeacon);
 800774c:	4b04      	ldr	r3, [pc, #16]	@ (8007760 <startRxBcn+0x1c>)
 800774e:	4a05      	ldr	r2, [pc, #20]	@ (8007764 <startRxBcn+0x20>)
 8007750:	61da      	str	r2, [r3, #28]
	os_radio(RADIO_RX);
 8007752:	2002      	movs	r0, #2
 8007754:	f001 fb56 	bl	8008e04 <os_radio>
}
 8007758:	bf00      	nop
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	2000033c 	.word	0x2000033c
 8007764:	0800752d 	.word	0x0800752d

08007768 <startRxPing>:

static void startRxPing(xref2osjob_t osjob)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
	LMIC.osjob.func = FUNC_ADDR(processPingRx);
 8007770:	4b04      	ldr	r3, [pc, #16]	@ (8007784 <startRxPing+0x1c>)
 8007772:	4a05      	ldr	r2, [pc, #20]	@ (8007788 <startRxPing+0x20>)
 8007774:	61da      	str	r2, [r3, #28]
	os_radio(RADIO_RX);
 8007776:	2002      	movs	r0, #2
 8007778:	f001 fb44 	bl	8008e04 <os_radio>
}
 800777c:	bf00      	nop
 800777e:	3708      	adds	r7, #8
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	2000033c 	.word	0x2000033c
 8007788:	08007309 	.word	0x08007309

0800778c <engineUpdate>:

// Decide what to do next for the MAC layer of a device
static void engineUpdate(void)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af00      	add	r7, sp, #0
	// Check for ongoing state: scan or TX/RX transaction
	if ((LMIC.opmode & (OP_SCAN | OP_TXRXPEND | OP_SHUTDOWN)) != 0)
 8007792:	4b90      	ldr	r3, [pc, #576]	@ (80079d4 <engineUpdate+0x248>)
 8007794:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007798:	f003 03c1 	and.w	r3, r3, #193	@ 0xc1
 800779c:	2b00      	cmp	r3, #0
 800779e:	f040 81ab 	bne.w	8007af8 <engineUpdate+0x36c>
		return;

	if (LMIC.devaddr == 0 && (LMIC.opmode & OP_JOINING) == 0) {
 80077a2:	4b8c      	ldr	r3, [pc, #560]	@ (80079d4 <engineUpdate+0x248>)
 80077a4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d109      	bne.n	80077c0 <engineUpdate+0x34>
 80077ac:	4b89      	ldr	r3, [pc, #548]	@ (80079d4 <engineUpdate+0x248>)
 80077ae:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80077b2:	f003 0304 	and.w	r3, r3, #4
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d102      	bne.n	80077c0 <engineUpdate+0x34>
		LMIC_startJoining();
 80077ba:	f7ff fd5b 	bl	8007274 <LMIC_startJoining>
		return;
 80077be:	e19e      	b.n	8007afe <engineUpdate+0x372>
	}

	ostime_t now = os_getTime();
 80077c0:	f000 fcfa 	bl	80081b8 <os_getTime>
 80077c4:	60b8      	str	r0, [r7, #8]
	ostime_t rxtime = 0;
 80077c6:	2300      	movs	r3, #0
 80077c8:	617b      	str	r3, [r7, #20]
	ostime_t txbeg = 0;
 80077ca:	2300      	movs	r3, #0
 80077cc:	613b      	str	r3, [r7, #16]

	if ((LMIC.opmode & OP_TRACK) != 0) {
 80077ce:	4b81      	ldr	r3, [pc, #516]	@ (80079d4 <engineUpdate+0x248>)
 80077d0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80077d4:	f003 0302 	and.w	r3, r3, #2
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00f      	beq.n	80077fc <engineUpdate+0x70>
		// We are tracking a beacon
		ASSERT(now + RX_RAMPUP - LMIC.bcnRxtime <= 0);
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80077e2:	4b7c      	ldr	r3, [pc, #496]	@ (80079d4 <engineUpdate+0x248>)
 80077e4:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	dd01      	ble.n	80077f2 <engineUpdate+0x66>
 80077ee:	f7fd f90b 	bl	8004a08 <hal_failed>
		rxtime = LMIC.bcnRxtime - RX_RAMPUP;
 80077f2:	4b78      	ldr	r3, [pc, #480]	@ (80079d4 <engineUpdate+0x248>)
 80077f4:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 80077f8:	3b40      	subs	r3, #64	@ 0x40
 80077fa:	617b      	str	r3, [r7, #20]
	}

	if ((LMIC.opmode & (OP_JOINING | OP_REJOIN | OP_TXDATA | OP_POLL)) != 0) {
 80077fc:	4b75      	ldr	r3, [pc, #468]	@ (80079d4 <engineUpdate+0x248>)
 80077fe:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007802:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8007806:	2b00      	cmp	r3, #0
 8007808:	f000 80f2 	beq.w	80079f0 <engineUpdate+0x264>
		// Need to TX some data...
		// Assuming txChnl points to channel which first becomes available again.
		bit_t jacc = ((LMIC.opmode & (OP_JOINING | OP_REJOIN)) != 0 ? 1 : 0);
 800780c:	4b71      	ldr	r3, [pc, #452]	@ (80079d4 <engineUpdate+0x248>)
 800780e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007812:	f003 0324 	and.w	r3, r3, #36	@ 0x24
 8007816:	2b00      	cmp	r3, #0
 8007818:	bf14      	ite	ne
 800781a:	2301      	movne	r3, #1
 800781c:	2300      	moveq	r3, #0
 800781e:	b2db      	uxtb	r3, r3
 8007820:	71fb      	strb	r3, [r7, #7]
		// Find next suitable channel and return availability time
		if ((LMIC.opmode & OP_NEXTCHNL) != 0) {
 8007822:	4b6c      	ldr	r3, [pc, #432]	@ (80079d4 <engineUpdate+0x248>)
 8007824:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007828:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800782c:	2b00      	cmp	r3, #0
 800782e:	d012      	beq.n	8007856 <engineUpdate+0xca>
			txbeg = LMIC.txend = nextTx(now);
 8007830:	68b8      	ldr	r0, [r7, #8]
 8007832:	f7fe f98f 	bl	8005b54 <nextTx>
 8007836:	4603      	mov	r3, r0
 8007838:	4a66      	ldr	r2, [pc, #408]	@ (80079d4 <engineUpdate+0x248>)
 800783a:	6013      	str	r3, [r2, #0]
 800783c:	4b65      	ldr	r3, [pc, #404]	@ (80079d4 <engineUpdate+0x248>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	613b      	str	r3, [r7, #16]
			LMIC.opmode &= ~OP_NEXTCHNL;
 8007842:	4b64      	ldr	r3, [pc, #400]	@ (80079d4 <engineUpdate+0x248>)
 8007844:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007848:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800784c:	b29a      	uxth	r2, r3
 800784e:	4b61      	ldr	r3, [pc, #388]	@ (80079d4 <engineUpdate+0x248>)
 8007850:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8007854:	e002      	b.n	800785c <engineUpdate+0xd0>
		} else {
			txbeg = LMIC.txend;
 8007856:	4b5f      	ldr	r3, [pc, #380]	@ (80079d4 <engineUpdate+0x248>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	613b      	str	r3, [r7, #16]
		}
		// Delayed TX or waiting for duty cycle?
		if ((LMIC.globalDutyRate != 0 || (LMIC.opmode & OP_RNDTX) != 0)
 800785c:	4b5d      	ldr	r3, [pc, #372]	@ (80079d4 <engineUpdate+0x248>)
 800785e:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 8007862:	2b00      	cmp	r3, #0
 8007864:	d106      	bne.n	8007874 <engineUpdate+0xe8>
 8007866:	4b5b      	ldr	r3, [pc, #364]	@ (80079d4 <engineUpdate+0x248>)
 8007868:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800786c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00a      	beq.n	800788a <engineUpdate+0xfe>
				&& (txbeg - LMIC.globalDutyAvail) < 0)
 8007874:	4b57      	ldr	r3, [pc, #348]	@ (80079d4 <engineUpdate+0x248>)
 8007876:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	2b00      	cmp	r3, #0
 8007880:	da03      	bge.n	800788a <engineUpdate+0xfe>
			txbeg = LMIC.globalDutyAvail;
 8007882:	4b54      	ldr	r3, [pc, #336]	@ (80079d4 <engineUpdate+0x248>)
 8007884:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007888:	613b      	str	r3, [r7, #16]
		// If we're tracking a beacon...
		// then make sure TX-RX transaction is complete before beacon
		if ((LMIC.opmode & OP_TRACK) != 0
 800788a:	4b52      	ldr	r3, [pc, #328]	@ (80079d4 <engineUpdate+0x248>)
 800788c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007890:	f003 0302 	and.w	r3, r3, #2
 8007894:	2b00      	cmp	r3, #0
 8007896:	d017      	beq.n	80078c8 <engineUpdate+0x13c>
				&& txbeg + (jacc ? JOIN_GUARD_osticks : TXRX_GUARD_osticks)
 8007898:	79fb      	ldrb	r3, [r7, #7]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d001      	beq.n	80078a2 <engineUpdate+0x116>
 800789e:	4a4e      	ldr	r2, [pc, #312]	@ (80079d8 <engineUpdate+0x24c>)
 80078a0:	e000      	b.n	80078a4 <engineUpdate+0x118>
 80078a2:	4a4e      	ldr	r2, [pc, #312]	@ (80079dc <engineUpdate+0x250>)
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	441a      	add	r2, r3
						- rxtime > 0) {
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	1ad3      	subs	r3, r2, r3
				&& txbeg + (jacc ? JOIN_GUARD_osticks : TXRX_GUARD_osticks)
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	dd0b      	ble.n	80078c8 <engineUpdate+0x13c>
			// Not enough time to complete TX-RX before beacon - postpone after beacon.
			// In order to avoid clustering of postponed TX right after beacon randomize start!
			txDelay(rxtime + BCN_RESERVE_osticks, 16);
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 80078b6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80078ba:	2110      	movs	r1, #16
 80078bc:	4618      	mov	r0, r3
 80078be:	f7fd ff23 	bl	8005708 <txDelay>
			txbeg = 0;
 80078c2:	2300      	movs	r3, #0
 80078c4:	613b      	str	r3, [r7, #16]
			goto checkrx;
 80078c6:	e09b      	b.n	8007a00 <engineUpdate+0x274>
		}
		// Earliest possible time vs overhead to setup radio
		if (txbeg - (now + TX_RAMPUP) < 0) {
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	3340      	adds	r3, #64	@ 0x40
 80078cc:	693a      	ldr	r2, [r7, #16]
 80078ce:	1ad3      	subs	r3, r2, r3
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	da70      	bge.n	80079b6 <engineUpdate+0x22a>
			// We could send right now!
			txbeg = now;
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	613b      	str	r3, [r7, #16]
			dr_t txdr = (dr_t) LMIC.datarate;
 80078d8:	4b3e      	ldr	r3, [pc, #248]	@ (80079d4 <engineUpdate+0x248>)
 80078da:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80078de:	73fb      	strb	r3, [r7, #15]
			if (jacc) {
 80078e0:	79fb      	ldrb	r3, [r7, #7]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d01d      	beq.n	8007922 <engineUpdate+0x196>
				u1_t ftype;
				if ((LMIC.opmode & OP_REJOIN) != 0) {
 80078e6:	4b3b      	ldr	r3, [pc, #236]	@ (80079d4 <engineUpdate+0x248>)
 80078e8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80078ec:	f003 0320 	and.w	r3, r3, #32
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00c      	beq.n	800790e <engineUpdate+0x182>
					txdr = lowerDR(txdr, LMIC.rejoinCnt);
 80078f4:	4b37      	ldr	r3, [pc, #220]	@ (80079d4 <engineUpdate+0x248>)
 80078f6:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 80078fa:	7bfb      	ldrb	r3, [r7, #15]
 80078fc:	4611      	mov	r1, r2
 80078fe:	4618      	mov	r0, r3
 8007900:	f7fd fa10 	bl	8004d24 <lowerDR>
 8007904:	4603      	mov	r3, r0
 8007906:	73fb      	strb	r3, [r7, #15]
					ftype = HDR_FTYPE_REJOIN;
 8007908:	23c0      	movs	r3, #192	@ 0xc0
 800790a:	73bb      	strb	r3, [r7, #14]
 800790c:	e001      	b.n	8007912 <engineUpdate+0x186>
				} else {
					ftype = HDR_FTYPE_JREQ;
 800790e:	2300      	movs	r3, #0
 8007910:	73bb      	strb	r3, [r7, #14]
				}
				buildJoinRequest(ftype);
 8007912:	7bbb      	ldrb	r3, [r7, #14]
 8007914:	4618      	mov	r0, r3
 8007916:	f7ff fc6b 	bl	80071f0 <buildJoinRequest>
				LMIC.osjob.func = FUNC_ADDR(jreqDone);
 800791a:	4b2e      	ldr	r3, [pc, #184]	@ (80079d4 <engineUpdate+0x248>)
 800791c:	4a30      	ldr	r2, [pc, #192]	@ (80079e0 <engineUpdate+0x254>)
 800791e:	61da      	str	r2, [r3, #28]
 8007920:	e01d      	b.n	800795e <engineUpdate+0x1d2>
			} else {
				if (LMIC.seqnoDn >= 0xFFFFFF80) {
 8007922:	4b2c      	ldr	r3, [pc, #176]	@ (80079d4 <engineUpdate+0x248>)
 8007924:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8007928:	f113 0f81 	cmn.w	r3, #129	@ 0x81
 800792c:	d907      	bls.n	800793e <engineUpdate+0x1b2>
									e_.eui = MAIN::CDEV->getEui(),
									e_.info = LMIC.seqnoDn,
									e_.info2 = 0));
					// Device has to react! NWK will not roll over and just stop sending.
					// Thus, we have N frames to detect a possible lock up.
					reset: os_setCallback(&LMIC.osjob, FUNC_ADDR(runReset));
 800792e:	bf00      	nop
 8007930:	e000      	b.n	8007934 <engineUpdate+0x1a8>
					EV(specCond, ERR, (e_.reason = EV::specCond_t::UPSEQNO_ROLL_OVER,
									e_.eui = MAIN::CDEV->getEui(),
									e_.info2 = LMIC.seqnoUp));
					// Do not run RESET event callback from here!
					// App code might do some stuff after send unaware of RESET.
					goto reset;
 8007932:	bf00      	nop
					reset: os_setCallback(&LMIC.osjob, FUNC_ADDR(runReset));
 8007934:	492b      	ldr	r1, [pc, #172]	@ (80079e4 <engineUpdate+0x258>)
 8007936:	482c      	ldr	r0, [pc, #176]	@ (80079e8 <engineUpdate+0x25c>)
 8007938:	f000 fc82 	bl	8008240 <os_setCallback>
					return;
 800793c:	e0df      	b.n	8007afe <engineUpdate+0x372>
				if ((LMIC.txCnt == 0 && LMIC.seqnoUp == 0xFFFFFFFF)) {
 800793e:	4b25      	ldr	r3, [pc, #148]	@ (80079d4 <engineUpdate+0x248>)
 8007940:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8007944:	2b00      	cmp	r3, #0
 8007946:	d105      	bne.n	8007954 <engineUpdate+0x1c8>
 8007948:	4b22      	ldr	r3, [pc, #136]	@ (80079d4 <engineUpdate+0x248>)
 800794a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800794e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007952:	d0ee      	beq.n	8007932 <engineUpdate+0x1a6>
				}
				buildDataFrame();
 8007954:	f7ff f9ba 	bl	8006ccc <buildDataFrame>
				LMIC.osjob.func = FUNC_ADDR(updataDone);
 8007958:	4b1e      	ldr	r3, [pc, #120]	@ (80079d4 <engineUpdate+0x248>)
 800795a:	4a24      	ldr	r2, [pc, #144]	@ (80079ec <engineUpdate+0x260>)
 800795c:	61da      	str	r2, [r3, #28]
			}
			LMIC.rps = setCr(updr2rps(txdr), (cr_t) LMIC.errcr);
 800795e:	7bfb      	ldrb	r3, [r7, #15]
 8007960:	4618      	mov	r0, r3
 8007962:	f7fd f98b 	bl	8004c7c <updr2rps>
 8007966:	4603      	mov	r3, r0
 8007968:	461a      	mov	r2, r3
 800796a:	4b1a      	ldr	r3, [pc, #104]	@ (80079d4 <engineUpdate+0x248>)
 800796c:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8007970:	4619      	mov	r1, r3
 8007972:	4610      	mov	r0, r2
 8007974:	f7fd f91c 	bl	8004bb0 <setCr>
 8007978:	4603      	mov	r3, r0
 800797a:	461a      	mov	r2, r3
 800797c:	4b15      	ldr	r3, [pc, #84]	@ (80079d4 <engineUpdate+0x248>)
 800797e:	81da      	strh	r2, [r3, #14]
			LMIC.dndr = txdr; // carry TX datarate (can be != LMIC.datarate) over to txDone/setupRx1
 8007980:	4a14      	ldr	r2, [pc, #80]	@ (80079d4 <engineUpdate+0x248>)
 8007982:	7bfb      	ldrb	r3, [r7, #15]
 8007984:	7453      	strb	r3, [r2, #17]
			LMIC.opmode = (LMIC.opmode & ~(OP_POLL | OP_RNDTX)) | OP_TXRXPEND
 8007986:	4b13      	ldr	r3, [pc, #76]	@ (80079d4 <engineUpdate+0x248>)
 8007988:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800798c:	b21b      	sxth	r3, r3
					| OP_NEXTCHNL;
 800798e:	f423 6319 	bic.w	r3, r3, #2448	@ 0x990
 8007992:	b21b      	sxth	r3, r3
 8007994:	f443 6308 	orr.w	r3, r3, #2176	@ 0x880
 8007998:	b21b      	sxth	r3, r3
 800799a:	b29a      	uxth	r2, r3
			LMIC.opmode = (LMIC.opmode & ~(OP_POLL | OP_RNDTX)) | OP_TXRXPEND
 800799c:	4b0d      	ldr	r3, [pc, #52]	@ (80079d4 <engineUpdate+0x248>)
 800799e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			updateTx(txbeg);
 80079a2:	6938      	ldr	r0, [r7, #16]
 80079a4:	f7fe f88c 	bl	8005ac0 <updateTx>
			reportEvent(EV_TXSTART);
 80079a8:	2011      	movs	r0, #17
 80079aa:	f7fe fa3d 	bl	8005e28 <reportEvent>
			os_radio(RADIO_TX);
 80079ae:	2001      	movs	r0, #1
 80079b0:	f001 fa28 	bl	8008e04 <os_radio>
			return;
 80079b4:	e0a3      	b.n	8007afe <engineUpdate+0x372>
		}
		// Cannot yet TX
		if ((LMIC.opmode & OP_TRACK) == 0)
 80079b6:	4b07      	ldr	r3, [pc, #28]	@ (80079d4 <engineUpdate+0x248>)
 80079b8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80079bc:	f003 0302 	and.w	r3, r3, #2
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f000 808c 	beq.w	8007ade <engineUpdate+0x352>
			goto txdelay;
		// We don't track the beacon - nothing else to do - so wait for the time to TX
		// Consider RX tasks
		if (txbeg == 0) // zero indicates no TX pending
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d119      	bne.n	8007a00 <engineUpdate+0x274>
			txbeg += 1; // TX delayed by one tick (insignificant amount of time)
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	3301      	adds	r3, #1
 80079d0:	613b      	str	r3, [r7, #16]
 80079d2:	e015      	b.n	8007a00 <engineUpdate+0x274>
 80079d4:	2000033c 	.word	0x2000033c
 80079d8:	00046500 	.word	0x00046500
 80079dc:	0002ee00 	.word	0x0002ee00
 80079e0:	08006b8d 	.word	0x08006b8d
 80079e4:	08005e47 	.word	0x08005e47
 80079e8:	20000350 	.word	0x20000350
 80079ec:	08006c9d 	.word	0x08006c9d
	} else {
		// No TX pending - no scheduled RX
		if ((LMIC.opmode & OP_TRACK) == 0)
 80079f0:	4b44      	ldr	r3, [pc, #272]	@ (8007b04 <engineUpdate+0x378>)
 80079f2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80079f6:	f003 0302 	and.w	r3, r3, #2
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d07e      	beq.n	8007afc <engineUpdate+0x370>
			return;
	}

	// Are we pingable?
	checkrx: if ((LMIC.opmode & OP_PINGINI) != 0) {
 80079fe:	bf00      	nop
 8007a00:	4b40      	ldr	r3, [pc, #256]	@ (8007b04 <engineUpdate+0x378>)
 8007a02:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007a06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d041      	beq.n	8007a92 <engineUpdate+0x306>
		// One more RX slot in this beacon period?
		if (rxschedNext(&LMIC.ping, now + RX_RAMPUP)) {
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	3340      	adds	r3, #64	@ 0x40
 8007a12:	4619      	mov	r1, r3
 8007a14:	483c      	ldr	r0, [pc, #240]	@ (8007b08 <engineUpdate+0x37c>)
 8007a16:	f7fd fdeb 	bl	80055f0 <rxschedNext>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d038      	beq.n	8007a92 <engineUpdate+0x306>
			if (txbeg != 0 && (txbeg - LMIC.ping.rxtime) < 0)
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d006      	beq.n	8007a34 <engineUpdate+0x2a8>
 8007a26:	4b37      	ldr	r3, [pc, #220]	@ (8007b04 <engineUpdate+0x378>)
 8007a28:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8007a2c:	693a      	ldr	r2, [r7, #16]
 8007a2e:	1ad3      	subs	r3, r2, r3
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	db56      	blt.n	8007ae2 <engineUpdate+0x356>
				goto txdelay;
			LMIC.rxsyms = LMIC.ping.rxsyms;
 8007a34:	4b33      	ldr	r3, [pc, #204]	@ (8007b04 <engineUpdate+0x378>)
 8007a36:	f893 2137 	ldrb.w	r2, [r3, #311]	@ 0x137
 8007a3a:	4b32      	ldr	r3, [pc, #200]	@ (8007b04 <engineUpdate+0x378>)
 8007a3c:	741a      	strb	r2, [r3, #16]
			LMIC.rxtime = LMIC.ping.rxtime;
 8007a3e:	4b31      	ldr	r3, [pc, #196]	@ (8007b04 <engineUpdate+0x378>)
 8007a40:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8007a44:	4a2f      	ldr	r2, [pc, #188]	@ (8007b04 <engineUpdate+0x378>)
 8007a46:	6053      	str	r3, [r2, #4]
			LMIC.freq = LMIC.ping.freq;
 8007a48:	4b2e      	ldr	r3, [pc, #184]	@ (8007b04 <engineUpdate+0x378>)
 8007a4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8007a4e:	4a2d      	ldr	r2, [pc, #180]	@ (8007b04 <engineUpdate+0x378>)
 8007a50:	6093      	str	r3, [r2, #8]
			LMIC.rps = dndr2rps(LMIC.ping.dr);
 8007a52:	4b2c      	ldr	r3, [pc, #176]	@ (8007b04 <engineUpdate+0x378>)
 8007a54:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7fd f921 	bl	8004ca0 <dndr2rps>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	461a      	mov	r2, r3
 8007a62:	4b28      	ldr	r3, [pc, #160]	@ (8007b04 <engineUpdate+0x378>)
 8007a64:	81da      	strh	r2, [r3, #14]
			LMIC.dataLen = 0;
 8007a66:	4b27      	ldr	r3, [pc, #156]	@ (8007b04 <engineUpdate+0x378>)
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
			ASSERT(LMIC.rxtime - now+RX_RAMPUP >= 0);
 8007a6e:	4b25      	ldr	r3, [pc, #148]	@ (8007b04 <engineUpdate+0x378>)
 8007a70:	685a      	ldr	r2, [r3, #4]
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	f113 0f40 	cmn.w	r3, #64	@ 0x40
 8007a7a:	da01      	bge.n	8007a80 <engineUpdate+0x2f4>
 8007a7c:	f7fc ffc4 	bl	8004a08 <hal_failed>
			os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP,
 8007a80:	4b20      	ldr	r3, [pc, #128]	@ (8007b04 <engineUpdate+0x378>)
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	3b40      	subs	r3, #64	@ 0x40
 8007a86:	4a21      	ldr	r2, [pc, #132]	@ (8007b0c <engineUpdate+0x380>)
 8007a88:	4619      	mov	r1, r3
 8007a8a:	4821      	ldr	r0, [pc, #132]	@ (8007b10 <engineUpdate+0x384>)
 8007a8c:	f000 fbfe 	bl	800828c <os_setTimedCallback>
					FUNC_ADDR(startRxPing));
			return;
 8007a90:	e035      	b.n	8007afe <engineUpdate+0x372>
		}
		// no - just wait for the beacon
	}

	if (txbeg != 0 && (txbeg - rxtime) < 0)
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d004      	beq.n	8007aa2 <engineUpdate+0x316>
 8007a98:	693a      	ldr	r2, [r7, #16]
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	db21      	blt.n	8007ae6 <engineUpdate+0x35a>
		goto txdelay;

	setBcnRxParams();
 8007aa2:	f7fe f8f3 	bl	8005c8c <setBcnRxParams>
	LMIC.rxsyms = LMIC.bcnRxsyms;
 8007aa6:	4b17      	ldr	r3, [pc, #92]	@ (8007b04 <engineUpdate+0x378>)
 8007aa8:	f893 2189 	ldrb.w	r2, [r3, #393]	@ 0x189
 8007aac:	4b15      	ldr	r3, [pc, #84]	@ (8007b04 <engineUpdate+0x378>)
 8007aae:	741a      	strb	r2, [r3, #16]
	LMIC.rxtime = LMIC.bcnRxtime;
 8007ab0:	4b14      	ldr	r3, [pc, #80]	@ (8007b04 <engineUpdate+0x378>)
 8007ab2:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8007ab6:	4a13      	ldr	r2, [pc, #76]	@ (8007b04 <engineUpdate+0x378>)
 8007ab8:	6053      	str	r3, [r2, #4]
	if (now - rxtime >= 0) {
 8007aba:	68ba      	ldr	r2, [r7, #8]
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	db06      	blt.n	8007ad2 <engineUpdate+0x346>
		LMIC.osjob.func = FUNC_ADDR(processBeacon);
 8007ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8007b04 <engineUpdate+0x378>)
 8007ac6:	4a13      	ldr	r2, [pc, #76]	@ (8007b14 <engineUpdate+0x388>)
 8007ac8:	61da      	str	r2, [r3, #28]
		os_radio(RADIO_RX);
 8007aca:	2002      	movs	r0, #2
 8007acc:	f001 f99a 	bl	8008e04 <os_radio>
		return;
 8007ad0:	e015      	b.n	8007afe <engineUpdate+0x372>
	}
	os_setTimedCallback(&LMIC.osjob, rxtime, FUNC_ADDR(startRxBcn));
 8007ad2:	4a11      	ldr	r2, [pc, #68]	@ (8007b18 <engineUpdate+0x38c>)
 8007ad4:	6979      	ldr	r1, [r7, #20]
 8007ad6:	480e      	ldr	r0, [pc, #56]	@ (8007b10 <engineUpdate+0x384>)
 8007ad8:	f000 fbd8 	bl	800828c <os_setTimedCallback>
	return;
 8007adc:	e00f      	b.n	8007afe <engineUpdate+0x372>
			goto txdelay;
 8007ade:	bf00      	nop
 8007ae0:	e002      	b.n	8007ae8 <engineUpdate+0x35c>
				goto txdelay;
 8007ae2:	bf00      	nop
 8007ae4:	e000      	b.n	8007ae8 <engineUpdate+0x35c>
		goto txdelay;
 8007ae6:	bf00      	nop

	txdelay: EV(devCond, INFO, (e_.reason = EV::devCond_t::TX_DELAY,
					e_.eui = MAIN::CDEV->getEui(),
					e_.info = osticks2ms(txbeg-now),
					e_.info2 = LMIC.seqnoUp-1));
	os_setTimedCallback(&LMIC.osjob, txbeg - TX_RAMPUP,
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	3b40      	subs	r3, #64	@ 0x40
 8007aec:	4a0b      	ldr	r2, [pc, #44]	@ (8007b1c <engineUpdate+0x390>)
 8007aee:	4619      	mov	r1, r3
 8007af0:	4807      	ldr	r0, [pc, #28]	@ (8007b10 <engineUpdate+0x384>)
 8007af2:	f000 fbcb 	bl	800828c <os_setTimedCallback>
 8007af6:	e002      	b.n	8007afe <engineUpdate+0x372>
		return;
 8007af8:	bf00      	nop
 8007afa:	e000      	b.n	8007afe <engineUpdate+0x372>
			return;
 8007afc:	bf00      	nop
			FUNC_ADDR(runEngineUpdate));
}
 8007afe:	3718      	adds	r7, #24
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	2000033c 	.word	0x2000033c
 8007b08:	20000470 	.word	0x20000470
 8007b0c:	08007769 	.word	0x08007769
 8007b10:	20000350 	.word	0x20000350
 8007b14:	0800752d 	.word	0x0800752d
 8007b18:	08007745 	.word	0x08007745
 8007b1c:	08005e15 	.word	0x08005e15

08007b20 <LMIC_reset>:
	os_radio(RADIO_RST);
	LMIC.opmode |= OP_SHUTDOWN;
}

void LMIC_reset(void)
{
 8007b20:	b598      	push	{r3, r4, r7, lr}
 8007b22:	af00      	add	r7, sp, #0
	EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
					e_.eui = MAIN::CDEV->getEui(),
					e_.info = EV_RESET));
	os_radio(RADIO_RST);
 8007b24:	2000      	movs	r0, #0
 8007b26:	f001 f96d 	bl	8008e04 <os_radio>
	os_clearCallback(&LMIC.osjob);
 8007b2a:	4821      	ldr	r0, [pc, #132]	@ (8007bb0 <LMIC_reset+0x90>)
 8007b2c:	f000 fb6a 	bl	8008204 <os_clearCallback>

	os_clearMem((xref2u1_t )&LMIC, SIZEOFEXPR(LMIC));
 8007b30:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 8007b34:	2100      	movs	r1, #0
 8007b36:	481f      	ldr	r0, [pc, #124]	@ (8007bb4 <LMIC_reset+0x94>)
 8007b38:	f007 f8fc 	bl	800ed34 <memset>
	LMIC.devaddr = 0;
 8007b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8007bb4 <LMIC_reset+0x94>)
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
	LMIC.devNonce = os_getRndU2();
 8007b44:	f001 f862 	bl	8008c0c <radio_rand1>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	021b      	lsls	r3, r3, #8
 8007b4c:	b21c      	sxth	r4, r3
 8007b4e:	f001 f85d 	bl	8008c0c <radio_rand1>
 8007b52:	4603      	mov	r3, r0
 8007b54:	b21b      	sxth	r3, r3
 8007b56:	4323      	orrs	r3, r4
 8007b58:	b21b      	sxth	r3, r3
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	4b15      	ldr	r3, [pc, #84]	@ (8007bb4 <LMIC_reset+0x94>)
 8007b5e:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
	LMIC.opmode = OP_NONE;
 8007b62:	4b14      	ldr	r3, [pc, #80]	@ (8007bb4 <LMIC_reset+0x94>)
 8007b64:	2200      	movs	r2, #0
 8007b66:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	LMIC.errcr = CR_4_5;
 8007b6a:	4b12      	ldr	r3, [pc, #72]	@ (8007bb4 <LMIC_reset+0x94>)
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
	LMIC.adrEnabled = FCT_ADREN;
 8007b72:	4b10      	ldr	r3, [pc, #64]	@ (8007bb4 <LMIC_reset+0x94>)
 8007b74:	2280      	movs	r2, #128	@ 0x80
 8007b76:	f883 2127 	strb.w	r2, [r3, #295]	@ 0x127
	LMIC.dn2Dr = DR_DNW2;   // we need this for 2nd DN window of join accept
 8007b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8007bb4 <LMIC_reset+0x94>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
	LMIC.dn2Freq = FREQ_DNW2; // ditto
 8007b82:	4b0c      	ldr	r3, [pc, #48]	@ (8007bb4 <LMIC_reset+0x94>)
 8007b84:	4a0c      	ldr	r2, [pc, #48]	@ (8007bb8 <LMIC_reset+0x98>)
 8007b86:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
	LMIC.rxDelay = DELAY_DNW1;
 8007b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8007bb4 <LMIC_reset+0x94>)
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
	LMIC.ping.freq = FREQ_PING; // defaults for ping
 8007b92:	4b08      	ldr	r3, [pc, #32]	@ (8007bb4 <LMIC_reset+0x94>)
 8007b94:	4a08      	ldr	r2, [pc, #32]	@ (8007bb8 <LMIC_reset+0x98>)
 8007b96:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
	LMIC.ping.dr = DR_PING;   // ditto
 8007b9a:	4b06      	ldr	r3, [pc, #24]	@ (8007bb4 <LMIC_reset+0x94>)
 8007b9c:	2203      	movs	r2, #3
 8007b9e:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
	LMIC.ping.intvExp = 0xFF;
 8007ba2:	4b04      	ldr	r3, [pc, #16]	@ (8007bb4 <LMIC_reset+0x94>)
 8007ba4:	22ff      	movs	r2, #255	@ 0xff
 8007ba6:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
#if defined(CFG_us915)
    initDefaultChannels();
#endif
	DO_DEVDB(LMIC.devaddr, devaddr);DO_DEVDB(LMIC.devNonce, devNonce);DO_DEVDB(LMIC.dn2Dr, dn2Dr);DO_DEVDB(LMIC.dn2Freq, dn2Freq);DO_DEVDB(LMIC.ping.freq, pingFreq);DO_DEVDB(LMIC.ping.dr, pingDr);DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
}
 8007baa:	bf00      	nop
 8007bac:	bd98      	pop	{r3, r4, r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	20000350 	.word	0x20000350
 8007bb4:	2000033c 	.word	0x2000033c
 8007bb8:	33d3e608 	.word	0x33d3e608

08007bbc <LMIC_init>:

void LMIC_init(void)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	af00      	add	r7, sp, #0
	LMIC.opmode = OP_SHUTDOWN;
 8007bc0:	4b04      	ldr	r3, [pc, #16]	@ (8007bd4 <LMIC_init+0x18>)
 8007bc2:	2240      	movs	r2, #64	@ 0x40
 8007bc4:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
}
 8007bc8:	bf00      	nop
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	2000033c 	.word	0x2000033c

08007bd8 <LMIC_setTxData>:
	os_radio(RADIO_RST);
	engineUpdate();
}

void LMIC_setTxData(void)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	af00      	add	r7, sp, #0
	LMIC.opmode |= OP_TXDATA;
 8007bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8007c0c <LMIC_setTxData+0x34>)
 8007bde:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007be2:	f043 0308 	orr.w	r3, r3, #8
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	4b08      	ldr	r3, [pc, #32]	@ (8007c0c <LMIC_setTxData+0x34>)
 8007bea:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	if ((LMIC.opmode & OP_JOINING) == 0)
 8007bee:	4b07      	ldr	r3, [pc, #28]	@ (8007c0c <LMIC_setTxData+0x34>)
 8007bf0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007bf4:	f003 0304 	and.w	r3, r3, #4
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d103      	bne.n	8007c04 <LMIC_setTxData+0x2c>
		LMIC.txCnt = 0;             // cancel any ongoing TX/RX retries
 8007bfc:	4b03      	ldr	r3, [pc, #12]	@ (8007c0c <LMIC_setTxData+0x34>)
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	engineUpdate();
 8007c04:	f7ff fdc2 	bl	800778c <engineUpdate>
}
 8007c08:	bf00      	nop
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	2000033c 	.word	0x2000033c

08007c10 <LMIC_setTxData2>:

//
int LMIC_setTxData2(u1_t port, xref2u1_t data, u1_t dlen, u1_t confirmed)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6039      	str	r1, [r7, #0]
 8007c18:	4611      	mov	r1, r2
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	71fb      	strb	r3, [r7, #7]
 8007c20:	460b      	mov	r3, r1
 8007c22:	71bb      	strb	r3, [r7, #6]
 8007c24:	4613      	mov	r3, r2
 8007c26:	717b      	strb	r3, [r7, #5]
	if (dlen > SIZEOFEXPR(LMIC.pendTxData))
 8007c28:	79bb      	ldrb	r3, [r7, #6]
 8007c2a:	2b34      	cmp	r3, #52	@ 0x34
 8007c2c:	d902      	bls.n	8007c34 <LMIC_setTxData2+0x24>
		return -2;
 8007c2e:	f06f 0301 	mvn.w	r3, #1
 8007c32:	e017      	b.n	8007c64 <LMIC_setTxData2+0x54>
	if (data != (xref2u1_t) 0)
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d005      	beq.n	8007c46 <LMIC_setTxData2+0x36>
		os_copyMem(LMIC.pendTxData, data, dlen);
 8007c3a:	79bb      	ldrb	r3, [r7, #6]
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	6839      	ldr	r1, [r7, #0]
 8007c40:	480a      	ldr	r0, [pc, #40]	@ (8007c6c <LMIC_setTxData2+0x5c>)
 8007c42:	f007 f8ac 	bl	800ed9e <memcpy>
	LMIC.pendTxConf = confirmed;
 8007c46:	4a0a      	ldr	r2, [pc, #40]	@ (8007c70 <LMIC_setTxData2+0x60>)
 8007c48:	797b      	ldrb	r3, [r7, #5]
 8007c4a:	f882 30bb 	strb.w	r3, [r2, #187]	@ 0xbb
	LMIC.pendTxPort = port;
 8007c4e:	4a08      	ldr	r2, [pc, #32]	@ (8007c70 <LMIC_setTxData2+0x60>)
 8007c50:	79fb      	ldrb	r3, [r7, #7]
 8007c52:	f882 30ba 	strb.w	r3, [r2, #186]	@ 0xba
	LMIC.pendTxLen = dlen;
 8007c56:	4a06      	ldr	r2, [pc, #24]	@ (8007c70 <LMIC_setTxData2+0x60>)
 8007c58:	79bb      	ldrb	r3, [r7, #6]
 8007c5a:	f882 30bc 	strb.w	r3, [r2, #188]	@ 0xbc
	LMIC_setTxData();
 8007c5e:	f7ff ffbb 	bl	8007bd8 <LMIC_setTxData>
	return 0;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3708      	adds	r7, #8
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	200003f9 	.word	0x200003f9
 8007c70:	2000033c 	.word	0x2000033c

08007c74 <os_getArtEui>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// provide application router ID (8 bytes, LSBF)
void os_getArtEui(u1_t *buf)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
	memcpy(buf, APPEUI, 8);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4906      	ldr	r1, [pc, #24]	@ (8007c98 <os_getArtEui+0x24>)
 8007c80:	461a      	mov	r2, r3
 8007c82:	460b      	mov	r3, r1
 8007c84:	cb03      	ldmia	r3!, {r0, r1}
 8007c86:	6010      	str	r0, [r2, #0]
 8007c88:	6051      	str	r1, [r2, #4]
}
 8007c8a:	bf00      	nop
 8007c8c:	370c      	adds	r7, #12
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	080113a0 	.word	0x080113a0

08007c9c <os_getDevEui>:

// provide device ID (8 bytes, LSBF)
void os_getDevEui(u1_t *buf)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
	memcpy(buf, DEVEUI, 8);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4906      	ldr	r1, [pc, #24]	@ (8007cc0 <os_getDevEui+0x24>)
 8007ca8:	461a      	mov	r2, r3
 8007caa:	460b      	mov	r3, r1
 8007cac:	cb03      	ldmia	r3!, {r0, r1}
 8007cae:	6010      	str	r0, [r2, #0]
 8007cb0:	6051      	str	r1, [r2, #4]
}
 8007cb2:	bf00      	nop
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	080113a8 	.word	0x080113a8

08007cc4 <os_getDevKey>:

// provide device key (16 bytes)
void os_getDevKey(u1_t *buf)
{
 8007cc4:	b4b0      	push	{r4, r5, r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
	memcpy(buf, DEVKEY, 16);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	4a06      	ldr	r2, [pc, #24]	@ (8007ce8 <os_getDevKey+0x24>)
 8007cd0:	461c      	mov	r4, r3
 8007cd2:	4615      	mov	r5, r2
 8007cd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007cd6:	6020      	str	r0, [r4, #0]
 8007cd8:	6061      	str	r1, [r4, #4]
 8007cda:	60a2      	str	r2, [r4, #8]
 8007cdc:	60e3      	str	r3, [r4, #12]
}
 8007cde:	bf00      	nop
 8007ce0:	370c      	adds	r7, #12
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bcb0      	pop	{r4, r5, r7}
 8007ce6:	4770      	bx	lr
 8007ce8:	080113b0 	.word	0x080113b0

08007cec <initsensor>:

void initsensor()
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	af00      	add	r7, sp, #0
	// Here you init your sensors
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8007cf0:	217f      	movs	r1, #127	@ 0x7f
 8007cf2:	4802      	ldr	r0, [pc, #8]	@ (8007cfc <initsensor+0x10>)
 8007cf4:	f002 ff44 	bl	800ab80 <HAL_ADCEx_Calibration_Start>
}
 8007cf8:	bf00      	nop
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	200000e0 	.word	0x200000e0

08007d00 <initsensor_bme>:

void initsensor_bme()
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	af00      	add	r7, sp, #0
	// Here you init your sensors
	bme68x_start(&data, &hi2c1);
 8007d04:	4902      	ldr	r1, [pc, #8]	@ (8007d10 <initsensor_bme+0x10>)
 8007d06:	4803      	ldr	r0, [pc, #12]	@ (8007d14 <initsensor_bme+0x14>)
 8007d08:	f7fb ff34 	bl	8003b74 <bme68x_start>
}
 8007d0c:	bf00      	nop
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	200002e8 	.word	0x200002e8
 8007d14:	200004f0 	.word	0x200004f0

08007d18 <initfunc>:

void initfunc(osjob_t *j)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
	// initialize sensor hardware
	initsensor();
 8007d20:	f7ff ffe4 	bl	8007cec <initsensor>
	initsensor_bme();
 8007d24:	f7ff ffec 	bl	8007d00 <initsensor_bme>
	// reset MAC state
	LMIC_reset();
 8007d28:	f7ff fefa 	bl	8007b20 <LMIC_reset>
	// start joining
	LMIC_startJoining();
 8007d2c:	f7ff faa2 	bl	8007274 <LMIC_startJoining>
	// init done - onEvent() callback will be invoked...
}
 8007d30:	bf00      	nop
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <readsensor_bme>:
	u2_t value = temp; /// read from everything ...make your own sensor
	return value;
}

void readsensor_bme()
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	af00      	add	r7, sp, #0
	if (bme68x_single_measure(&data) == 0) {
 8007d3c:	4807      	ldr	r0, [pc, #28]	@ (8007d5c <readsensor_bme+0x24>)
 8007d3e:	f7fb ff69 	bl	8003c14 <bme68x_single_measure>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d106      	bne.n	8007d56 <readsensor_bme+0x1e>
		// Measurement is successful, so continue with IAQ
		data.iaq_score = bme68x_iaq(); // Calculate IAQ
 8007d48:	f7fc f9e4 	bl	8004114 <bme68x_iaq>
 8007d4c:	eef0 7a40 	vmov.f32	s15, s0
 8007d50:	4b02      	ldr	r3, [pc, #8]	@ (8007d5c <readsensor_bme+0x24>)
 8007d52:	edc3 7a02 	vstr	s15, [r3, #8]
	} /// read from everything ...make your own sensor
}
 8007d56:	bf00      	nop
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	200004f0 	.word	0x200004f0

08007d60 <reportfunc_bme>:
}

static osjob_t reportjob_bme;
// report bme sensor value every minute
static void reportfunc_bme(osjob_t *j)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
	// read sensor
	readsensor_bme();
 8007d68:	f7ff ffe6 	bl	8007d38 <readsensor_bme>

	debug_valdec("val = ", data.temperature);
 8007d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8007dd8 <reportfunc_bme+0x78>)
 8007d6e:	edd3 7a03 	vldr	s15, [r3, #12]
 8007d72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d76:	ee17 1a90 	vmov	r1, s15
 8007d7a:	4818      	ldr	r0, [pc, #96]	@ (8007ddc <reportfunc_bme+0x7c>)
 8007d7c:	f7fc fb9c 	bl	80044b8 <debug_valdec>
	// prepare and schedule data for transmission
	cayenne_lpp_reset(&lpp_desc);
 8007d80:	4817      	ldr	r0, [pc, #92]	@ (8007de0 <reportfunc_bme+0x80>)
 8007d82:	f7fc fa0d 	bl	80041a0 <cayenne_lpp_reset>
	cayenne_lpp_add_temperature(&lpp_desc, 0, data.temperature);
 8007d86:	4b14      	ldr	r3, [pc, #80]	@ (8007dd8 <reportfunc_bme+0x78>)
 8007d88:	edd3 7a03 	vldr	s15, [r3, #12]
 8007d8c:	eeb0 0a67 	vmov.f32	s0, s15
 8007d90:	2100      	movs	r1, #0
 8007d92:	4813      	ldr	r0, [pc, #76]	@ (8007de0 <reportfunc_bme+0x80>)
 8007d94:	f7fc fa76 	bl	8004284 <cayenne_lpp_add_temperature>
	cayenne_lpp_add_analog_input(&lpp_desc, 0, data.iaq_score);
 8007d98:	4b0f      	ldr	r3, [pc, #60]	@ (8007dd8 <reportfunc_bme+0x78>)
 8007d9a:	edd3 7a02 	vldr	s15, [r3, #8]
 8007d9e:	eeb0 0a67 	vmov.f32	s0, s15
 8007da2:	2100      	movs	r1, #0
 8007da4:	480e      	ldr	r0, [pc, #56]	@ (8007de0 <reportfunc_bme+0x80>)
 8007da6:	f7fc fa0d 	bl	80041c4 <cayenne_lpp_add_analog_input>
	// La fonction LMIC_setTxData2 envoie
	LMIC_setTxData2(1, &lpp_desc, 4 * 2, 0);
 8007daa:	2300      	movs	r3, #0
 8007dac:	2208      	movs	r2, #8
 8007dae:	490c      	ldr	r1, [pc, #48]	@ (8007de0 <reportfunc_bme+0x80>)
 8007db0:	2001      	movs	r0, #1
 8007db2:	f7ff ff2d 	bl	8007c10 <LMIC_setTxData2>
	// la trame Lora : lpp_desc
	// (port 1, 2 bytes, unconfirmed)
	// reschedule job in 15 seconds
	os_setTimedCallback(j, os_getTime() + sec2osticks(15), reportfunc_bme);
 8007db6:	f000 f9ff 	bl	80081b8 <os_getTime>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	f503 23ea 	add.w	r3, r3, #479232	@ 0x75000
 8007dc0:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8007dc4:	4a07      	ldr	r2, [pc, #28]	@ (8007de4 <reportfunc_bme+0x84>)
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 fa5f 	bl	800828c <os_setTimedCallback>
}
 8007dce:	bf00      	nop
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	200004f0 	.word	0x200004f0
 8007ddc:	08010030 	.word	0x08010030
 8007de0:	2000050c 	.word	0x2000050c
 8007de4:	08007d61 	.word	0x08007d61

08007de8 <blinkfunc>:
}

static osjob_t blinkjob;
static u1_t ledstate = 0;
static void blinkfunc(osjob_t *j)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
	// toggle LED
	ledstate = !ledstate;
 8007df0:	4b0e      	ldr	r3, [pc, #56]	@ (8007e2c <blinkfunc+0x44>)
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	bf0c      	ite	eq
 8007df8:	2301      	moveq	r3, #1
 8007dfa:	2300      	movne	r3, #0
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	461a      	mov	r2, r3
 8007e00:	4b0a      	ldr	r3, [pc, #40]	@ (8007e2c <blinkfunc+0x44>)
 8007e02:	701a      	strb	r2, [r3, #0]
	debug_led(ledstate);
 8007e04:	4b09      	ldr	r3, [pc, #36]	@ (8007e2c <blinkfunc+0x44>)
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7fc faa3 	bl	8004354 <debug_led>
	// reschedule blink job
	os_setTimedCallback(j, os_getTime() + ms2osticks(100), blinkfunc);
 8007e0e:	f000 f9d3 	bl	80081b8 <os_getTime>
 8007e12:	4603      	mov	r3, r0
 8007e14:	f503 6348 	add.w	r3, r3, #3200	@ 0xc80
 8007e18:	4a05      	ldr	r2, [pc, #20]	@ (8007e30 <blinkfunc+0x48>)
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 fa35 	bl	800828c <os_setTimedCallback>
}
 8007e22:	bf00      	nop
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	20000550 	.word	0x20000550
 8007e30:	08007de9 	.word	0x08007de9

08007e34 <onEvent>:

//////////////////////////////////////////////////
// LMIC EVENT CALLBACK
//////////////////////////////////////////////////
void onEvent(ev_t ev)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	71fb      	strb	r3, [r7, #7]
	debug_event(ev);
 8007e3e:	79fb      	ldrb	r3, [r7, #7]
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7fc fbc7 	bl	80045d4 <debug_event>
	switch (ev) {
 8007e46:	79fb      	ldrb	r3, [r7, #7]
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	2b0e      	cmp	r3, #14
 8007e4c:	f200 8093 	bhi.w	8007f76 <onEvent+0x142>
 8007e50:	a201      	add	r2, pc, #4	@ (adr r2, 8007e58 <onEvent+0x24>)
 8007e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e56:	bf00      	nop
 8007e58:	08007ebf 	.word	0x08007ebf
 8007e5c:	08007ec7 	.word	0x08007ec7
 8007e60:	08007ecf 	.word	0x08007ecf
 8007e64:	08007ed7 	.word	0x08007ed7
 8007e68:	08007e95 	.word	0x08007e95
 8007e6c:	08007ea3 	.word	0x08007ea3
 8007e70:	08007edf 	.word	0x08007edf
 8007e74:	08007eb7 	.word	0x08007eb7
 8007e78:	08007ee7 	.word	0x08007ee7
 8007e7c:	08007eef 	.word	0x08007eef
 8007e80:	08007f4f 	.word	0x08007f4f
 8007e84:	08007f57 	.word	0x08007f57
 8007e88:	08007f5f 	.word	0x08007f5f
 8007e8c:	08007f67 	.word	0x08007f67
 8007e90:	08007f6f 	.word	0x08007f6f
	// network joined, session established
	case EV_JOINING:
		debug_str("try joining\r\n");
 8007e94:	483c      	ldr	r0, [pc, #240]	@ (8007f88 <onEvent+0x154>)
 8007e96:	f7fc fae5 	bl	8004464 <debug_str>
		blinkfunc(&blinkjob);
 8007e9a:	483c      	ldr	r0, [pc, #240]	@ (8007f8c <onEvent+0x158>)
 8007e9c:	f7ff ffa4 	bl	8007de8 <blinkfunc>
		break;
 8007ea0:	e06e      	b.n	8007f80 <onEvent+0x14c>
	case EV_JOINED:
		// kick-off periodic sensor job
		os_clearCallback(&blinkjob);
 8007ea2:	483a      	ldr	r0, [pc, #232]	@ (8007f8c <onEvent+0x158>)
 8007ea4:	f000 f9ae 	bl	8008204 <os_clearCallback>
		debug_led(1);
 8007ea8:	2001      	movs	r0, #1
 8007eaa:	f7fc fa53 	bl	8004354 <debug_led>
		// reportfunc(&reportjob);
		reportfunc_bme(&reportjob_bme);
 8007eae:	4838      	ldr	r0, [pc, #224]	@ (8007f90 <onEvent+0x15c>)
 8007eb0:	f7ff ff56 	bl	8007d60 <reportfunc_bme>
		break;
 8007eb4:	e064      	b.n	8007f80 <onEvent+0x14c>
	case EV_JOIN_FAILED:
		debug_str("join failed\r\n");
 8007eb6:	4837      	ldr	r0, [pc, #220]	@ (8007f94 <onEvent+0x160>)
 8007eb8:	f7fc fad4 	bl	8004464 <debug_str>
		break;
 8007ebc:	e060      	b.n	8007f80 <onEvent+0x14c>
	case EV_SCAN_TIMEOUT:
		debug_str("EV_SCAN_TIMEOUT\r\n");
 8007ebe:	4836      	ldr	r0, [pc, #216]	@ (8007f98 <onEvent+0x164>)
 8007ec0:	f7fc fad0 	bl	8004464 <debug_str>
		break;
 8007ec4:	e05c      	b.n	8007f80 <onEvent+0x14c>
	case EV_BEACON_FOUND:
		debug_str("EV_BEACON_FOUND\r\n");
 8007ec6:	4835      	ldr	r0, [pc, #212]	@ (8007f9c <onEvent+0x168>)
 8007ec8:	f7fc facc 	bl	8004464 <debug_str>
		break;
 8007ecc:	e058      	b.n	8007f80 <onEvent+0x14c>
	case EV_BEACON_MISSED:
		debug_str("EV_BEACON_MISSED\r\n");
 8007ece:	4834      	ldr	r0, [pc, #208]	@ (8007fa0 <onEvent+0x16c>)
 8007ed0:	f7fc fac8 	bl	8004464 <debug_str>
		break;
 8007ed4:	e054      	b.n	8007f80 <onEvent+0x14c>
	case EV_BEACON_TRACKED:
		debug_str("EV_BEACON_TRACKED\r\n");
 8007ed6:	4833      	ldr	r0, [pc, #204]	@ (8007fa4 <onEvent+0x170>)
 8007ed8:	f7fc fac4 	bl	8004464 <debug_str>
		break;
 8007edc:	e050      	b.n	8007f80 <onEvent+0x14c>
	case EV_RFU1:
		debug_str("EV_RFU1\r\n");
 8007ede:	4832      	ldr	r0, [pc, #200]	@ (8007fa8 <onEvent+0x174>)
 8007ee0:	f7fc fac0 	bl	8004464 <debug_str>
		break;
 8007ee4:	e04c      	b.n	8007f80 <onEvent+0x14c>
	case EV_REJOIN_FAILED:
		debug_str("EV_REJOIN_FAILED\r\n");
 8007ee6:	4831      	ldr	r0, [pc, #196]	@ (8007fac <onEvent+0x178>)
 8007ee8:	f7fc fabc 	bl	8004464 <debug_str>
		break;
 8007eec:	e048      	b.n	8007f80 <onEvent+0x14c>
	case EV_TXCOMPLETE:
		debug_str("EV_TXCOMPLETE (includes waiting for RX windows)\r\n");
 8007eee:	4830      	ldr	r0, [pc, #192]	@ (8007fb0 <onEvent+0x17c>)
 8007ef0:	f7fc fab8 	bl	8004464 <debug_str>
		if (LMIC.txrxFlags & TXRX_ACK)
 8007ef4:	4b2f      	ldr	r3, [pc, #188]	@ (8007fb4 <onEvent+0x180>)
 8007ef6:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8007efa:	b25b      	sxtb	r3, r3
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	da02      	bge.n	8007f06 <onEvent+0xd2>
			debug_str("Received ack\r\n");
 8007f00:	482d      	ldr	r0, [pc, #180]	@ (8007fb8 <onEvent+0x184>)
 8007f02:	f7fc faaf 	bl	8004464 <debug_str>
		if (LMIC.dataLen) {
 8007f06:	4b2b      	ldr	r3, [pc, #172]	@ (8007fb4 <onEvent+0x180>)
 8007f08:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d036      	beq.n	8007f7e <onEvent+0x14a>
			debug_valdec("Received bytes of payload\r\n:", LMIC.dataLen);
 8007f10:	4b28      	ldr	r3, [pc, #160]	@ (8007fb4 <onEvent+0x180>)
 8007f12:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8007f16:	4619      	mov	r1, r3
 8007f18:	4828      	ldr	r0, [pc, #160]	@ (8007fbc <onEvent+0x188>)
 8007f1a:	f7fc facd 	bl	80044b8 <debug_valdec>
			debug_val("Data = :", LMIC.frame[LMIC.dataBeg]);
 8007f1e:	4b25      	ldr	r3, [pc, #148]	@ (8007fb4 <onEvent+0x180>)
 8007f20:	f893 3146 	ldrb.w	r3, [r3, #326]	@ 0x146
 8007f24:	461a      	mov	r2, r3
 8007f26:	4b23      	ldr	r3, [pc, #140]	@ (8007fb4 <onEvent+0x180>)
 8007f28:	4413      	add	r3, r2
 8007f2a:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8007f2e:	4619      	mov	r1, r3
 8007f30:	4823      	ldr	r0, [pc, #140]	@ (8007fc0 <onEvent+0x18c>)
 8007f32:	f7fc faac 	bl	800448e <debug_val>
			debug_led(LMIC.frame[LMIC.dataBeg]);
 8007f36:	4b1f      	ldr	r3, [pc, #124]	@ (8007fb4 <onEvent+0x180>)
 8007f38:	f893 3146 	ldrb.w	r3, [r3, #326]	@ 0x146
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8007fb4 <onEvent+0x180>)
 8007f40:	4413      	add	r3, r2
 8007f42:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7fc fa04 	bl	8004354 <debug_led>
		}
		break;
 8007f4c:	e017      	b.n	8007f7e <onEvent+0x14a>
	case EV_LOST_TSYNC:
		debug_str("EV_LOST_TSYNC\r\n");
 8007f4e:	481d      	ldr	r0, [pc, #116]	@ (8007fc4 <onEvent+0x190>)
 8007f50:	f7fc fa88 	bl	8004464 <debug_str>
		break;
 8007f54:	e014      	b.n	8007f80 <onEvent+0x14c>
	case EV_RESET:
		debug_str("EV_RESET\r\n");
 8007f56:	481c      	ldr	r0, [pc, #112]	@ (8007fc8 <onEvent+0x194>)
 8007f58:	f7fc fa84 	bl	8004464 <debug_str>
		break;
 8007f5c:	e010      	b.n	8007f80 <onEvent+0x14c>
	case EV_RXCOMPLETE:
		// data received in ping slot
		debug_str("EV_RXCOMPLETE\r\n");
 8007f5e:	481b      	ldr	r0, [pc, #108]	@ (8007fcc <onEvent+0x198>)
 8007f60:	f7fc fa80 	bl	8004464 <debug_str>
		break;
 8007f64:	e00c      	b.n	8007f80 <onEvent+0x14c>
	case EV_LINK_DEAD:
		debug_str("EV_LINK_DEAD\r\n");
 8007f66:	481a      	ldr	r0, [pc, #104]	@ (8007fd0 <onEvent+0x19c>)
 8007f68:	f7fc fa7c 	bl	8004464 <debug_str>
		break;
 8007f6c:	e008      	b.n	8007f80 <onEvent+0x14c>
	case EV_LINK_ALIVE:
		debug_str("EV_LINK_ALIVE\r\n");
 8007f6e:	4819      	ldr	r0, [pc, #100]	@ (8007fd4 <onEvent+0x1a0>)
 8007f70:	f7fc fa78 	bl	8004464 <debug_str>
		break;
 8007f74:	e004      	b.n	8007f80 <onEvent+0x14c>
	default:
		debug_str("Unknown event\r\n");
 8007f76:	4818      	ldr	r0, [pc, #96]	@ (8007fd8 <onEvent+0x1a4>)
 8007f78:	f7fc fa74 	bl	8004464 <debug_str>
		break;
 8007f7c:	e000      	b.n	8007f80 <onEvent+0x14c>
		break;
 8007f7e:	bf00      	nop
	}
}
 8007f80:	bf00      	nop
 8007f82:	3708      	adds	r7, #8
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	08010050 	.word	0x08010050
 8007f8c:	20000544 	.word	0x20000544
 8007f90:	20000538 	.word	0x20000538
 8007f94:	08010060 	.word	0x08010060
 8007f98:	08010070 	.word	0x08010070
 8007f9c:	08010084 	.word	0x08010084
 8007fa0:	08010098 	.word	0x08010098
 8007fa4:	080100ac 	.word	0x080100ac
 8007fa8:	080100c0 	.word	0x080100c0
 8007fac:	080100cc 	.word	0x080100cc
 8007fb0:	080100e0 	.word	0x080100e0
 8007fb4:	2000033c 	.word	0x2000033c
 8007fb8:	08010114 	.word	0x08010114
 8007fbc:	08010124 	.word	0x08010124
 8007fc0:	08010144 	.word	0x08010144
 8007fc4:	08010150 	.word	0x08010150
 8007fc8:	08010160 	.word	0x08010160
 8007fcc:	0801016c 	.word	0x0801016c
 8007fd0:	0801017c 	.word	0x0801017c
 8007fd4:	0801018c 	.word	0x0801018c
 8007fd8:	0801019c 	.word	0x0801019c

08007fdc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8007fe2:	f001 fa74 	bl	80094ce <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8007fe6:	f000 f83b 	bl	8008060 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8007fea:	f7fc fb11 	bl	8004610 <MX_GPIO_Init>
	MX_SPI3_Init();
 8007fee:	f000 ff35 	bl	8008e5c <MX_SPI3_Init>
	MX_TIM7_Init();
 8007ff2:	f001 f941 	bl	8009278 <MX_TIM7_Init>
	MX_ADC1_Init();
 8007ff6:	f7f8 ff21 	bl	8000e3c <MX_ADC1_Init>
	MX_TIM6_Init();
 8007ffa:	f001 f905 	bl	8009208 <MX_TIM6_Init>
	MX_I2C1_Init();
 8007ffe:	f7fc fd0b 	bl	8004a18 <MX_I2C1_Init>
	MX_USART2_UART_Init();
 8008002:	f001 f9b3 	bl	800936c <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim6);
 8008006:	4812      	ldr	r0, [pc, #72]	@ (8008050 <main+0x74>)
 8008008:	f005 fe0a 	bl	800dc20 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);   // <----------- change to your setup
 800800c:	4811      	ldr	r0, [pc, #68]	@ (8008054 <main+0x78>)
 800800e:	f005 fe07 	bl	800dc20 <HAL_TIM_Base_Start_IT>
	__HAL_SPI_ENABLE(&hspi3);        // <----------- change to your setup
 8008012:	4b11      	ldr	r3, [pc, #68]	@ (8008058 <main+0x7c>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	4b0f      	ldr	r3, [pc, #60]	@ (8008058 <main+0x7c>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008020:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(Alim_temp_GPIO_Port, Alim_temp_Pin, GPIO_PIN_SET);
 8008022:	2201      	movs	r2, #1
 8008024:	2180      	movs	r1, #128	@ 0x80
 8008026:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800802a:	f003 f8b7 	bl	800b19c <HAL_GPIO_WritePin>
	osjob_t initjob;
	// initialize runtime env
	os_init();
 800802e:	f000 f8b1 	bl	8008194 <os_init>
	// initialize debug library
	debug_init();
 8008032:	f7fc f985 	bl	8004340 <debug_init>
	// setup initial job
	os_setCallback(&initjob, initfunc);
 8008036:	1d3b      	adds	r3, r7, #4
 8008038:	4908      	ldr	r1, [pc, #32]	@ (800805c <main+0x80>)
 800803a:	4618      	mov	r0, r3
 800803c:	f000 f900 	bl	8008240 <os_setCallback>
	// execute scheduled jobs and events
	os_runloop();
 8008040:	f000 f95a 	bl	80082f8 <os_runloop>
	// (not reached)
	return 0;
 8008044:	2300      	movs	r3, #0

		}
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
}
 8008046:	4618      	mov	r0, r3
 8008048:	3710      	adds	r7, #16
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	200005d4 	.word	0x200005d4
 8008054:	20000620 	.word	0x20000620
 8008058:	2000056c 	.word	0x2000056c
 800805c:	08007d19 	.word	0x08007d19

08008060 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b096      	sub	sp, #88	@ 0x58
 8008064:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8008066:	f107 0314 	add.w	r3, r7, #20
 800806a:	2244      	movs	r2, #68	@ 0x44
 800806c:	2100      	movs	r1, #0
 800806e:	4618      	mov	r0, r3
 8008070:	f006 fe60 	bl	800ed34 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8008074:	463b      	mov	r3, r7
 8008076:	2200      	movs	r2, #0
 8008078:	601a      	str	r2, [r3, #0]
 800807a:	605a      	str	r2, [r3, #4]
 800807c:	609a      	str	r2, [r3, #8]
 800807e:	60da      	str	r2, [r3, #12]
 8008080:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8008082:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008086:	f003 ffd7 	bl	800c038 <HAL_PWREx_ControlVoltageScaling>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d001      	beq.n	8008094 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8008090:	f000 f87a 	bl	8008188 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008094:	2302      	movs	r3, #2
 8008096:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008098:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800809c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800809e:	2310      	movs	r3, #16
 80080a0:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80080a2:	2302      	movs	r3, #2
 80080a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80080a6:	2302      	movs	r3, #2
 80080a8:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80080aa:	2301      	movs	r3, #1
 80080ac:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 80080ae:	230a      	movs	r3, #10
 80080b0:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80080b2:	2307      	movs	r3, #7
 80080b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80080b6:	2302      	movs	r3, #2
 80080b8:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80080ba:	2302      	movs	r3, #2
 80080bc:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80080be:	f107 0314 	add.w	r3, r7, #20
 80080c2:	4618      	mov	r0, r3
 80080c4:	f004 f80e 	bl	800c0e4 <HAL_RCC_OscConfig>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d001      	beq.n	80080d2 <SystemClock_Config+0x72>
		Error_Handler();
 80080ce:	f000 f85b 	bl	8008188 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80080d2:	230f      	movs	r3, #15
 80080d4:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80080d6:	2303      	movs	r3, #3
 80080d8:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80080da:	2300      	movs	r3, #0
 80080dc:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80080de:	2300      	movs	r3, #0
 80080e0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80080e2:	2300      	movs	r3, #0
 80080e4:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80080e6:	463b      	mov	r3, r7
 80080e8:	2104      	movs	r1, #4
 80080ea:	4618      	mov	r0, r3
 80080ec:	f004 fc0e 	bl	800c90c <HAL_RCC_ClockConfig>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d001      	beq.n	80080fa <SystemClock_Config+0x9a>
		Error_Handler();
 80080f6:	f000 f847 	bl	8008188 <Error_Handler>
	}
}
 80080fa:	bf00      	nop
 80080fc:	3758      	adds	r7, #88	@ 0x58
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
	...

08008104 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
	if (htim == &htim6) {
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4a09      	ldr	r2, [pc, #36]	@ (8008134 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d102      	bne.n	800811a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_ADC_Start_IT(&hadc1);
 8008114:	4808      	ldr	r0, [pc, #32]	@ (8008138 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8008116:	f001 fdb5 	bl	8009c84 <HAL_ADC_Start_IT>
	}
	if (htim->Instance == htim7.Instance) {
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	4b07      	ldr	r3, [pc, #28]	@ (800813c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	429a      	cmp	r2, r3
 8008124:	d101      	bne.n	800812a <HAL_TIM_PeriodElapsedCallback+0x26>
		hal_ticksplusplus();
 8008126:	f7fc fbb3 	bl	8004890 <hal_ticksplusplus>
	}
}
 800812a:	bf00      	nop
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	200005d4 	.word	0x200005d4
 8008138:	200000e0 	.word	0x200000e0
 800813c:	20000620 	.word	0x20000620

08008140 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4a0c      	ldr	r2, [pc, #48]	@ (800817c <HAL_ADC_ConvCpltCallback+0x3c>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d110      	bne.n	8008172 <HAL_ADC_ConvCpltCallback+0x32>
		n_temp = HAL_ADC_GetValue(&hadc1);
 8008150:	480a      	ldr	r0, [pc, #40]	@ (800817c <HAL_ADC_ConvCpltCallback+0x3c>)
 8008152:	f001 fe4b 	bl	8009dec <HAL_ADC_GetValue>
 8008156:	4603      	mov	r3, r0
 8008158:	4a09      	ldr	r2, [pc, #36]	@ (8008180 <HAL_ADC_ConvCpltCallback+0x40>)
 800815a:	6013      	str	r3, [r2, #0]
		temp = 188686 - 147 * n_temp;
 800815c:	4b08      	ldr	r3, [pc, #32]	@ (8008180 <HAL_ADC_ConvCpltCallback+0x40>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2293      	movs	r2, #147	@ 0x93
 8008162:	fb02 f303 	mul.w	r3, r2, r3
 8008166:	f5c3 3338 	rsb	r3, r3, #188416	@ 0x2e000
 800816a:	f503 7387 	add.w	r3, r3, #270	@ 0x10e
 800816e:	4a05      	ldr	r2, [pc, #20]	@ (8008184 <HAL_ADC_ConvCpltCallback+0x44>)
 8008170:	6013      	str	r3, [r2, #0]
	}
}
 8008172:	bf00      	nop
 8008174:	3708      	adds	r7, #8
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	200000e0 	.word	0x200000e0
 8008180:	200004e8 	.word	0x200004e8
 8008184:	200004ec 	.word	0x200004ec

08008188 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8008188:	b480      	push	{r7}
 800818a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800818c:	b672      	cpsid	i
}
 800818e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8008190:	bf00      	nop
 8008192:	e7fd      	b.n	8008190 <Error_Handler+0x8>

08008194 <os_init>:
	osjob_t *scheduledjobs;
	osjob_t *runnablejobs;
} OS;

void os_init()
{
 8008194:	b580      	push	{r7, lr}
 8008196:	af00      	add	r7, sp, #0
	memset(&OS, 0x00, sizeof(OS));
 8008198:	2208      	movs	r2, #8
 800819a:	2100      	movs	r1, #0
 800819c:	4805      	ldr	r0, [pc, #20]	@ (80081b4 <os_init+0x20>)
 800819e:	f006 fdc9 	bl	800ed34 <memset>
	hal_init();
 80081a2:	f7fc fc1b 	bl	80049dc <hal_init>
	radio_init();
 80081a6:	f000 fcbd 	bl	8008b24 <radio_init>
	LMIC_init();
 80081aa:	f7ff fd07 	bl	8007bbc <LMIC_init>
}
 80081ae:	bf00      	nop
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	20000554 	.word	0x20000554

080081b8 <os_getTime>:

ostime_t os_getTime()
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	af00      	add	r7, sp, #0
	return hal_ticks();
 80081bc:	f7fc fb38 	bl	8004830 <hal_ticks>
 80081c0:	4603      	mov	r3, r0
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <unlinkjob>:

// unlink job from queue, return if removed
static int unlinkjob(osjob_t **pnext, osjob_t *job)
{
 80081c6:	b480      	push	{r7}
 80081c8:	b083      	sub	sp, #12
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
 80081ce:	6039      	str	r1, [r7, #0]
	for (; *pnext; pnext = &((*pnext)->next)) {
 80081d0:	e00d      	b.n	80081ee <unlinkjob+0x28>
		if (*pnext == job) { // unlink
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	683a      	ldr	r2, [r7, #0]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d105      	bne.n	80081e8 <unlinkjob+0x22>
			*pnext = job->next;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	601a      	str	r2, [r3, #0]
			return 1;
 80081e4:	2301      	movs	r3, #1
 80081e6:	e007      	b.n	80081f8 <unlinkjob+0x32>
	for (; *pnext; pnext = &((*pnext)->next)) {
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	607b      	str	r3, [r7, #4]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d1ed      	bne.n	80081d2 <unlinkjob+0xc>
		}
	}
	return 0;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <os_clearCallback>:

// clear scheduled job
void os_clearCallback(osjob_t *job)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
	hal_disableIRQs();
 800820c:	f7fc fbba 	bl	8004984 <hal_disableIRQs>
	unlinkjob(&OS.scheduledjobs, job) || unlinkjob(&OS.runnablejobs, job);
 8008210:	6879      	ldr	r1, [r7, #4]
 8008212:	4809      	ldr	r0, [pc, #36]	@ (8008238 <os_clearCallback+0x34>)
 8008214:	f7ff ffd7 	bl	80081c6 <unlinkjob>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d105      	bne.n	800822a <os_clearCallback+0x26>
 800821e:	6879      	ldr	r1, [r7, #4]
 8008220:	4806      	ldr	r0, [pc, #24]	@ (800823c <os_clearCallback+0x38>)
 8008222:	f7ff ffd0 	bl	80081c6 <unlinkjob>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
	hal_enableIRQs();
 800822a:	f7fc fbbb 	bl	80049a4 <hal_enableIRQs>
}
 800822e:	bf00      	nop
 8008230:	3708      	adds	r7, #8
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	20000554 	.word	0x20000554
 800823c:	20000558 	.word	0x20000558

08008240 <os_setCallback>:

// schedule immediately runnable job
void os_setCallback(osjob_t *job, osjobcb_t cb)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
	osjob_t **pnext;
	hal_disableIRQs();
 800824a:	f7fc fb9b 	bl	8004984 <hal_disableIRQs>
	// remove if job was already queued
	unlinkjob(&OS.runnablejobs, job);
 800824e:	6879      	ldr	r1, [r7, #4]
 8008250:	480d      	ldr	r0, [pc, #52]	@ (8008288 <os_setCallback+0x48>)
 8008252:	f7ff ffb8 	bl	80081c6 <unlinkjob>
	// fill-in job
	job->func = cb;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	683a      	ldr	r2, [r7, #0]
 800825a:	609a      	str	r2, [r3, #8]
	job->next = NULL;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	601a      	str	r2, [r3, #0]
	// add to end of run queue
	for (pnext = &OS.runnablejobs; *pnext; pnext = &((*pnext)->next))
 8008262:	4b09      	ldr	r3, [pc, #36]	@ (8008288 <os_setCallback+0x48>)
 8008264:	60fb      	str	r3, [r7, #12]
 8008266:	e002      	b.n	800826e <os_setCallback+0x2e>
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	60fb      	str	r3, [r7, #12]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1f8      	bne.n	8008268 <os_setCallback+0x28>
		;
	*pnext = job;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	601a      	str	r2, [r3, #0]
	hal_enableIRQs();
 800827c:	f7fc fb92 	bl	80049a4 <hal_enableIRQs>
}
 8008280:	bf00      	nop
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	20000558 	.word	0x20000558

0800828c <os_setTimedCallback>:

// schedule timed job
void os_setTimedCallback(osjob_t *job, ostime_t time, osjobcb_t cb)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b086      	sub	sp, #24
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]
	osjob_t **pnext;
	hal_disableIRQs();
 8008298:	f7fc fb74 	bl	8004984 <hal_disableIRQs>
	// remove if job was already queued
	unlinkjob(&OS.scheduledjobs, job);
 800829c:	68f9      	ldr	r1, [r7, #12]
 800829e:	4815      	ldr	r0, [pc, #84]	@ (80082f4 <os_setTimedCallback+0x68>)
 80082a0:	f7ff ff91 	bl	80081c6 <unlinkjob>
	// fill-in job
	job->deadline = time;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	605a      	str	r2, [r3, #4]
	job->func = cb;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	609a      	str	r2, [r3, #8]
	job->next = NULL;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2200      	movs	r2, #0
 80082b4:	601a      	str	r2, [r3, #0]
	// insert into schedule
	for (pnext = &OS.scheduledjobs; *pnext; pnext = &((*pnext)->next)) {
 80082b6:	4b0f      	ldr	r3, [pc, #60]	@ (80082f4 <os_setTimedCallback+0x68>)
 80082b8:	617b      	str	r3, [r7, #20]
 80082ba:	e00e      	b.n	80082da <os_setTimedCallback+0x4e>
		if ((*pnext)->deadline - time > 0) { // (cmp diff, not abs!)
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	685a      	ldr	r2, [r3, #4]
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	dd04      	ble.n	80082d4 <os_setTimedCallback+0x48>
			// enqueue before next element and stop
			job->next = *pnext;
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	601a      	str	r2, [r3, #0]
			break;
 80082d2:	e006      	b.n	80082e2 <os_setTimedCallback+0x56>
	for (pnext = &OS.scheduledjobs; *pnext; pnext = &((*pnext)->next)) {
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	617b      	str	r3, [r7, #20]
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1ec      	bne.n	80082bc <os_setTimedCallback+0x30>
		}
	}
	*pnext = job;
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	68fa      	ldr	r2, [r7, #12]
 80082e6:	601a      	str	r2, [r3, #0]
	hal_enableIRQs();
 80082e8:	f7fc fb5c 	bl	80049a4 <hal_enableIRQs>
}
 80082ec:	bf00      	nop
 80082ee:	3718      	adds	r7, #24
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	20000554 	.word	0x20000554

080082f8 <os_runloop>:

// execute jobs from timer and from run queue
void os_runloop()
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
	while (1) {
		osjob_t *j = NULL;
 80082fe:	2300      	movs	r3, #0
 8008300:	607b      	str	r3, [r7, #4]
		hal_disableIRQs();
 8008302:	f7fc fb3f 	bl	8004984 <hal_disableIRQs>
		// check for runnable jobs
		if (OS.runnablejobs) {
 8008306:	4b16      	ldr	r3, [pc, #88]	@ (8008360 <os_runloop+0x68>)
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d007      	beq.n	800831e <os_runloop+0x26>
			j = OS.runnablejobs;
 800830e:	4b14      	ldr	r3, [pc, #80]	@ (8008360 <os_runloop+0x68>)
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	607b      	str	r3, [r7, #4]
			OS.runnablejobs = j->next;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a11      	ldr	r2, [pc, #68]	@ (8008360 <os_runloop+0x68>)
 800831a:	6053      	str	r3, [r2, #4]
 800831c:	e016      	b.n	800834c <os_runloop+0x54>
		} else if (OS.scheduledjobs
 800831e:	4b10      	ldr	r3, [pc, #64]	@ (8008360 <os_runloop+0x68>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d010      	beq.n	8008348 <os_runloop+0x50>
				&& hal_checkTimer(OS.scheduledjobs->deadline)) { // check for expired timed jobs
 8008326:	4b0e      	ldr	r3, [pc, #56]	@ (8008360 <os_runloop+0x68>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	4618      	mov	r0, r3
 800832e:	f7fc faeb 	bl	8004908 <hal_checkTimer>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d007      	beq.n	8008348 <os_runloop+0x50>
			j = OS.scheduledjobs;
 8008338:	4b09      	ldr	r3, [pc, #36]	@ (8008360 <os_runloop+0x68>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	607b      	str	r3, [r7, #4]
			OS.scheduledjobs = j->next;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a07      	ldr	r2, [pc, #28]	@ (8008360 <os_runloop+0x68>)
 8008344:	6013      	str	r3, [r2, #0]
 8008346:	e001      	b.n	800834c <os_runloop+0x54>
		} else { // nothing pending
			hal_sleep(); // wake by irq (timer already restarted)
 8008348:	f7fc fb40 	bl	80049cc <hal_sleep>
		}
		hal_enableIRQs();
 800834c:	f7fc fb2a 	bl	80049a4 <hal_enableIRQs>
		if (j) { // run job callback
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d0d3      	beq.n	80082fe <os_runloop+0x6>
			j->func(j);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	4798      	blx	r3
	while (1) {
 800835e:	e7ce      	b.n	80082fe <os_runloop+0x6>
 8008360:	20000554 	.word	0x20000554

08008364 <writeReg>:
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif

static void writeReg(u1_t addr, u1_t data)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	4603      	mov	r3, r0
 800836c:	460a      	mov	r2, r1
 800836e:	71fb      	strb	r3, [r7, #7]
 8008370:	4613      	mov	r3, r2
 8008372:	71bb      	strb	r3, [r7, #6]
	hal_pin_nss(0);
 8008374:	2000      	movs	r0, #0
 8008376:	f7fc f9d3 	bl	8004720 <hal_pin_nss>
	hal_spi(addr | 0x80);
 800837a:	79fb      	ldrb	r3, [r7, #7]
 800837c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008380:	b2db      	uxtb	r3, r3
 8008382:	4618      	mov	r0, r3
 8008384:	f7fc fa2e 	bl	80047e4 <hal_spi>
	hal_spi(data);
 8008388:	79bb      	ldrb	r3, [r7, #6]
 800838a:	4618      	mov	r0, r3
 800838c:	f7fc fa2a 	bl	80047e4 <hal_spi>
	hal_pin_nss(1);
 8008390:	2001      	movs	r0, #1
 8008392:	f7fc f9c5 	bl	8004720 <hal_pin_nss>
}
 8008396:	bf00      	nop
 8008398:	3708      	adds	r7, #8
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <readReg>:

static u1_t readReg(u1_t addr)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b084      	sub	sp, #16
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	4603      	mov	r3, r0
 80083a6:	71fb      	strb	r3, [r7, #7]
	hal_pin_nss(0);
 80083a8:	2000      	movs	r0, #0
 80083aa:	f7fc f9b9 	bl	8004720 <hal_pin_nss>
	hal_spi(addr & 0x7F);
 80083ae:	79fb      	ldrb	r3, [r7, #7]
 80083b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7fc fa14 	bl	80047e4 <hal_spi>
	u1_t val = hal_spi(0x00);
 80083bc:	2000      	movs	r0, #0
 80083be:	f7fc fa11 	bl	80047e4 <hal_spi>
 80083c2:	4603      	mov	r3, r0
 80083c4:	73fb      	strb	r3, [r7, #15]
	hal_pin_nss(1);
 80083c6:	2001      	movs	r0, #1
 80083c8:	f7fc f9aa 	bl	8004720 <hal_pin_nss>
	return val;
 80083cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <writeBuf>:

static void writeBuf(u1_t addr, xref2u1_t buf, u1_t len)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b084      	sub	sp, #16
 80083da:	af00      	add	r7, sp, #0
 80083dc:	4603      	mov	r3, r0
 80083de:	6039      	str	r1, [r7, #0]
 80083e0:	71fb      	strb	r3, [r7, #7]
 80083e2:	4613      	mov	r3, r2
 80083e4:	71bb      	strb	r3, [r7, #6]
	hal_pin_nss(0);
 80083e6:	2000      	movs	r0, #0
 80083e8:	f7fc f99a 	bl	8004720 <hal_pin_nss>
	hal_spi(addr | 0x80);
 80083ec:	79fb      	ldrb	r3, [r7, #7]
 80083ee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	4618      	mov	r0, r3
 80083f6:	f7fc f9f5 	bl	80047e4 <hal_spi>
	for (u1_t i = 0; i < len; i++) {
 80083fa:	2300      	movs	r3, #0
 80083fc:	73fb      	strb	r3, [r7, #15]
 80083fe:	e009      	b.n	8008414 <writeBuf+0x3e>
		hal_spi(buf[i]);
 8008400:	7bfb      	ldrb	r3, [r7, #15]
 8008402:	683a      	ldr	r2, [r7, #0]
 8008404:	4413      	add	r3, r2
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	4618      	mov	r0, r3
 800840a:	f7fc f9eb 	bl	80047e4 <hal_spi>
	for (u1_t i = 0; i < len; i++) {
 800840e:	7bfb      	ldrb	r3, [r7, #15]
 8008410:	3301      	adds	r3, #1
 8008412:	73fb      	strb	r3, [r7, #15]
 8008414:	7bfa      	ldrb	r2, [r7, #15]
 8008416:	79bb      	ldrb	r3, [r7, #6]
 8008418:	429a      	cmp	r2, r3
 800841a:	d3f1      	bcc.n	8008400 <writeBuf+0x2a>
	}
	hal_pin_nss(1);
 800841c:	2001      	movs	r0, #1
 800841e:	f7fc f97f 	bl	8004720 <hal_pin_nss>
}
 8008422:	bf00      	nop
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <readBuf>:

static void readBuf(u1_t addr, xref2u1_t buf, u1_t len)
{
 800842a:	b590      	push	{r4, r7, lr}
 800842c:	b085      	sub	sp, #20
 800842e:	af00      	add	r7, sp, #0
 8008430:	4603      	mov	r3, r0
 8008432:	6039      	str	r1, [r7, #0]
 8008434:	71fb      	strb	r3, [r7, #7]
 8008436:	4613      	mov	r3, r2
 8008438:	71bb      	strb	r3, [r7, #6]
	hal_pin_nss(0);
 800843a:	2000      	movs	r0, #0
 800843c:	f7fc f970 	bl	8004720 <hal_pin_nss>
	hal_spi(addr & 0x7F);
 8008440:	79fb      	ldrb	r3, [r7, #7]
 8008442:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008446:	b2db      	uxtb	r3, r3
 8008448:	4618      	mov	r0, r3
 800844a:	f7fc f9cb 	bl	80047e4 <hal_spi>
	for (u1_t i = 0; i < len; i++) {
 800844e:	2300      	movs	r3, #0
 8008450:	73fb      	strb	r3, [r7, #15]
 8008452:	e00a      	b.n	800846a <readBuf+0x40>
		buf[i] = hal_spi(0x00);
 8008454:	7bfb      	ldrb	r3, [r7, #15]
 8008456:	683a      	ldr	r2, [r7, #0]
 8008458:	18d4      	adds	r4, r2, r3
 800845a:	2000      	movs	r0, #0
 800845c:	f7fc f9c2 	bl	80047e4 <hal_spi>
 8008460:	4603      	mov	r3, r0
 8008462:	7023      	strb	r3, [r4, #0]
	for (u1_t i = 0; i < len; i++) {
 8008464:	7bfb      	ldrb	r3, [r7, #15]
 8008466:	3301      	adds	r3, #1
 8008468:	73fb      	strb	r3, [r7, #15]
 800846a:	7bfa      	ldrb	r2, [r7, #15]
 800846c:	79bb      	ldrb	r3, [r7, #6]
 800846e:	429a      	cmp	r2, r3
 8008470:	d3f0      	bcc.n	8008454 <readBuf+0x2a>
	}
	hal_pin_nss(1);
 8008472:	2001      	movs	r0, #1
 8008474:	f7fc f954 	bl	8004720 <hal_pin_nss>
}
 8008478:	bf00      	nop
 800847a:	3714      	adds	r7, #20
 800847c:	46bd      	mov	sp, r7
 800847e:	bd90      	pop	{r4, r7, pc}

08008480 <opmode>:

static void opmode(u1_t mode)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
 8008486:	4603      	mov	r3, r0
 8008488:	71fb      	strb	r3, [r7, #7]
	writeReg(RegOpMode, (readReg(RegOpMode) & ~OPMODE_MASK) | mode);
 800848a:	2001      	movs	r0, #1
 800848c:	f7ff ff87 	bl	800839e <readReg>
 8008490:	4603      	mov	r3, r0
 8008492:	b25b      	sxtb	r3, r3
 8008494:	f023 0307 	bic.w	r3, r3, #7
 8008498:	b25a      	sxtb	r2, r3
 800849a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800849e:	4313      	orrs	r3, r2
 80084a0:	b25b      	sxtb	r3, r3
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	4619      	mov	r1, r3
 80084a6:	2001      	movs	r0, #1
 80084a8:	f7ff ff5c 	bl	8008364 <writeReg>
}
 80084ac:	bf00      	nop
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <opmodeLora>:

static void opmodeLora()
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
	u1_t u = OPMODE_LORA;
 80084ba:	2380      	movs	r3, #128	@ 0x80
 80084bc:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
	u |= 0x8;   // TBD: sx1276 high freq
 80084be:	79fb      	ldrb	r3, [r7, #7]
 80084c0:	f043 0308 	orr.w	r3, r3, #8
 80084c4:	71fb      	strb	r3, [r7, #7]
#endif
	writeReg(RegOpMode, u);
 80084c6:	79fb      	ldrb	r3, [r7, #7]
 80084c8:	4619      	mov	r1, r3
 80084ca:	2001      	movs	r0, #1
 80084cc:	f7ff ff4a 	bl	8008364 <writeReg>
}
 80084d0:	bf00      	nop
 80084d2:	3708      	adds	r7, #8
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <opmodeFSK>:

static void opmodeFSK()
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
	u1_t u = 0;
 80084de:	2300      	movs	r3, #0
 80084e0:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
	u |= 0x8;   // TBD: sx1276 high freq
 80084e2:	79fb      	ldrb	r3, [r7, #7]
 80084e4:	f043 0308 	orr.w	r3, r3, #8
 80084e8:	71fb      	strb	r3, [r7, #7]
#endif
	writeReg(RegOpMode, u);
 80084ea:	79fb      	ldrb	r3, [r7, #7]
 80084ec:	4619      	mov	r1, r3
 80084ee:	2001      	movs	r0, #1
 80084f0:	f7ff ff38 	bl	8008364 <writeReg>
}
 80084f4:	bf00      	nop
 80084f6:	3708      	adds	r7, #8
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <configLoraModem>:

// configure LoRa modem (cfg1, cfg2)
static void configLoraModem()
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
	sf_t sf = getSf(LMIC.rps);
 8008502:	4b54      	ldr	r3, [pc, #336]	@ (8008654 <configLoraModem+0x158>)
 8008504:	89db      	ldrh	r3, [r3, #14]
 8008506:	4618      	mov	r0, r3
 8008508:	f7fc fb1e 	bl	8004b48 <getSf>
 800850c:	4603      	mov	r3, r0
 800850e:	713b      	strb	r3, [r7, #4]

#ifdef CFG_sx1276_radio
	u1_t mc1 = 0, mc2 = 0, mc3 = 0;
 8008510:	2300      	movs	r3, #0
 8008512:	71fb      	strb	r3, [r7, #7]
 8008514:	2300      	movs	r3, #0
 8008516:	71bb      	strb	r3, [r7, #6]
 8008518:	2300      	movs	r3, #0
 800851a:	717b      	strb	r3, [r7, #5]

	switch (getBw(LMIC.rps)) {
 800851c:	4b4d      	ldr	r3, [pc, #308]	@ (8008654 <configLoraModem+0x158>)
 800851e:	89db      	ldrh	r3, [r3, #14]
 8008520:	4618      	mov	r0, r3
 8008522:	f7fc fb21 	bl	8004b68 <getBw>
 8008526:	4603      	mov	r3, r0
 8008528:	2b02      	cmp	r3, #2
 800852a:	d010      	beq.n	800854e <configLoraModem+0x52>
 800852c:	2b02      	cmp	r3, #2
 800852e:	dc13      	bgt.n	8008558 <configLoraModem+0x5c>
 8008530:	2b00      	cmp	r3, #0
 8008532:	d002      	beq.n	800853a <configLoraModem+0x3e>
 8008534:	2b01      	cmp	r3, #1
 8008536:	d005      	beq.n	8008544 <configLoraModem+0x48>
 8008538:	e00e      	b.n	8008558 <configLoraModem+0x5c>
	case BW125:
		mc1 |= SX1276_MC1_BW_125;
 800853a:	79fb      	ldrb	r3, [r7, #7]
 800853c:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8008540:	71fb      	strb	r3, [r7, #7]
		break;
 8008542:	e00b      	b.n	800855c <configLoraModem+0x60>
	case BW250:
		mc1 |= SX1276_MC1_BW_250;
 8008544:	79fb      	ldrb	r3, [r7, #7]
 8008546:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800854a:	71fb      	strb	r3, [r7, #7]
		break;
 800854c:	e006      	b.n	800855c <configLoraModem+0x60>
	case BW500:
		mc1 |= SX1276_MC1_BW_500;
 800854e:	79fb      	ldrb	r3, [r7, #7]
 8008550:	f063 036f 	orn	r3, r3, #111	@ 0x6f
 8008554:	71fb      	strb	r3, [r7, #7]
		break;
 8008556:	e001      	b.n	800855c <configLoraModem+0x60>
	default:
		ASSERT(0);
 8008558:	f7fc fa56 	bl	8004a08 <hal_failed>
	}
	switch (getCr(LMIC.rps)) {
 800855c:	4b3d      	ldr	r3, [pc, #244]	@ (8008654 <configLoraModem+0x158>)
 800855e:	89db      	ldrh	r3, [r3, #14]
 8008560:	4618      	mov	r0, r3
 8008562:	f7fc fb13 	bl	8004b8c <getCr>
 8008566:	4603      	mov	r3, r0
 8008568:	2b03      	cmp	r3, #3
 800856a:	d81f      	bhi.n	80085ac <configLoraModem+0xb0>
 800856c:	a201      	add	r2, pc, #4	@ (adr r2, 8008574 <configLoraModem+0x78>)
 800856e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008572:	bf00      	nop
 8008574:	08008585 	.word	0x08008585
 8008578:	0800858f 	.word	0x0800858f
 800857c:	08008599 	.word	0x08008599
 8008580:	080085a3 	.word	0x080085a3
	case CR_4_5:
		mc1 |= SX1276_MC1_CR_4_5;
 8008584:	79fb      	ldrb	r3, [r7, #7]
 8008586:	f043 0302 	orr.w	r3, r3, #2
 800858a:	71fb      	strb	r3, [r7, #7]
		break;
 800858c:	e010      	b.n	80085b0 <configLoraModem+0xb4>
	case CR_4_6:
		mc1 |= SX1276_MC1_CR_4_6;
 800858e:	79fb      	ldrb	r3, [r7, #7]
 8008590:	f043 0304 	orr.w	r3, r3, #4
 8008594:	71fb      	strb	r3, [r7, #7]
		break;
 8008596:	e00b      	b.n	80085b0 <configLoraModem+0xb4>
	case CR_4_7:
		mc1 |= SX1276_MC1_CR_4_7;
 8008598:	79fb      	ldrb	r3, [r7, #7]
 800859a:	f043 0306 	orr.w	r3, r3, #6
 800859e:	71fb      	strb	r3, [r7, #7]
		break;
 80085a0:	e006      	b.n	80085b0 <configLoraModem+0xb4>
	case CR_4_8:
		mc1 |= SX1276_MC1_CR_4_8;
 80085a2:	79fb      	ldrb	r3, [r7, #7]
 80085a4:	f043 0308 	orr.w	r3, r3, #8
 80085a8:	71fb      	strb	r3, [r7, #7]
		break;
 80085aa:	e001      	b.n	80085b0 <configLoraModem+0xb4>
	default:
		ASSERT(0);
 80085ac:	f7fc fa2c 	bl	8004a08 <hal_failed>
	}

	if (getIh(LMIC.rps)) {
 80085b0:	4b28      	ldr	r3, [pc, #160]	@ (8008654 <configLoraModem+0x158>)
 80085b2:	89db      	ldrh	r3, [r3, #14]
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7fc fb3b 	bl	8004c30 <getIh>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d00e      	beq.n	80085de <configLoraModem+0xe2>
		mc1 |= SX1276_MC1_IMPLICIT_HEADER_MODE_ON;
 80085c0:	79fb      	ldrb	r3, [r7, #7]
 80085c2:	f043 0301 	orr.w	r3, r3, #1
 80085c6:	71fb      	strb	r3, [r7, #7]
		writeReg(LORARegPayloadLength, getIh(LMIC.rps)); // required length
 80085c8:	4b22      	ldr	r3, [pc, #136]	@ (8008654 <configLoraModem+0x158>)
 80085ca:	89db      	ldrh	r3, [r3, #14]
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7fc fb2f 	bl	8004c30 <getIh>
 80085d2:	4603      	mov	r3, r0
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	4619      	mov	r1, r3
 80085d8:	2022      	movs	r0, #34	@ 0x22
 80085da:	f7ff fec3 	bl	8008364 <writeReg>
	}
	// set ModemConfig1
	writeReg(LORARegModemConfig1, mc1);
 80085de:	79fb      	ldrb	r3, [r7, #7]
 80085e0:	4619      	mov	r1, r3
 80085e2:	201d      	movs	r0, #29
 80085e4:	f7ff febe 	bl	8008364 <writeReg>

	mc2 = (SX1272_MC2_SF7 + ((sf - 1) << 4));
 80085e8:	793b      	ldrb	r3, [r7, #4]
 80085ea:	3b01      	subs	r3, #1
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	011b      	lsls	r3, r3, #4
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	3370      	adds	r3, #112	@ 0x70
 80085f4:	71bb      	strb	r3, [r7, #6]
	if (getNocrc(LMIC.rps) == 0) {
 80085f6:	4b17      	ldr	r3, [pc, #92]	@ (8008654 <configLoraModem+0x158>)
 80085f8:	89db      	ldrh	r3, [r3, #14]
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7fc faf1 	bl	8004be2 <getNocrc>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d103      	bne.n	800860e <configLoraModem+0x112>
		mc2 |= SX1276_MC2_RX_PAYLOAD_CRCON;
 8008606:	79bb      	ldrb	r3, [r7, #6]
 8008608:	f043 0304 	orr.w	r3, r3, #4
 800860c:	71bb      	strb	r3, [r7, #6]
	}
	writeReg(LORARegModemConfig2, mc2);
 800860e:	79bb      	ldrb	r3, [r7, #6]
 8008610:	4619      	mov	r1, r3
 8008612:	201e      	movs	r0, #30
 8008614:	f7ff fea6 	bl	8008364 <writeReg>

	mc3 = SX1276_MC3_AGCAUTO;
 8008618:	2304      	movs	r3, #4
 800861a:	717b      	strb	r3, [r7, #5]
	if ((sf == SF11 || sf == SF12) && getBw(LMIC.rps) == BW125) {
 800861c:	793b      	ldrb	r3, [r7, #4]
 800861e:	2b05      	cmp	r3, #5
 8008620:	d002      	beq.n	8008628 <configLoraModem+0x12c>
 8008622:	793b      	ldrb	r3, [r7, #4]
 8008624:	2b06      	cmp	r3, #6
 8008626:	d10b      	bne.n	8008640 <configLoraModem+0x144>
 8008628:	4b0a      	ldr	r3, [pc, #40]	@ (8008654 <configLoraModem+0x158>)
 800862a:	89db      	ldrh	r3, [r3, #14]
 800862c:	4618      	mov	r0, r3
 800862e:	f7fc fa9b 	bl	8004b68 <getBw>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d103      	bne.n	8008640 <configLoraModem+0x144>
		mc3 |= SX1276_MC3_LOW_DATA_RATE_OPTIMIZE;
 8008638:	797b      	ldrb	r3, [r7, #5]
 800863a:	f043 0308 	orr.w	r3, r3, #8
 800863e:	717b      	strb	r3, [r7, #5]
	}
	writeReg(LORARegModemConfig3, mc3);
 8008640:	797b      	ldrb	r3, [r7, #5]
 8008642:	4619      	mov	r1, r3
 8008644:	2026      	movs	r0, #38	@ 0x26
 8008646:	f7ff fe8d 	bl	8008364 <writeReg>
#endif

#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 800864a:	bf00      	nop
 800864c:	3708      	adds	r7, #8
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	2000033c 	.word	0x2000033c

08008658 <configChannel>:

static void configChannel()
{
 8008658:	b5b0      	push	{r4, r5, r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
	// set frequency: FQ = (FRF * 32 Mhz) / (2 ^ 19)
	u8_t frf = ((u8_t) LMIC.freq << 19) / 32000000;
 800865e:	4c1b      	ldr	r4, [pc, #108]	@ (80086cc <configChannel+0x74>)
 8008660:	68a4      	ldr	r4, [r4, #8]
 8008662:	2500      	movs	r5, #0
 8008664:	4622      	mov	r2, r4
 8008666:	462b      	mov	r3, r5
 8008668:	0b51      	lsrs	r1, r2, #13
 800866a:	04d0      	lsls	r0, r2, #19
 800866c:	4a18      	ldr	r2, [pc, #96]	@ (80086d0 <configChannel+0x78>)
 800866e:	f04f 0300 	mov.w	r3, #0
 8008672:	f7f8 fa6b 	bl	8000b4c <__aeabi_uldivmod>
 8008676:	4602      	mov	r2, r0
 8008678:	460b      	mov	r3, r1
 800867a:	e9c7 2300 	strd	r2, r3, [r7]
	writeReg(RegFrfMsb, (u1_t) (frf >> 16));
 800867e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008682:	f04f 0200 	mov.w	r2, #0
 8008686:	f04f 0300 	mov.w	r3, #0
 800868a:	0c02      	lsrs	r2, r0, #16
 800868c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008690:	0c0b      	lsrs	r3, r1, #16
 8008692:	b2d3      	uxtb	r3, r2
 8008694:	4619      	mov	r1, r3
 8008696:	2006      	movs	r0, #6
 8008698:	f7ff fe64 	bl	8008364 <writeReg>
	writeReg(RegFrfMid, (u1_t) (frf >> 8));
 800869c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80086a0:	f04f 0200 	mov.w	r2, #0
 80086a4:	f04f 0300 	mov.w	r3, #0
 80086a8:	0a02      	lsrs	r2, r0, #8
 80086aa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80086ae:	0a0b      	lsrs	r3, r1, #8
 80086b0:	b2d3      	uxtb	r3, r2
 80086b2:	4619      	mov	r1, r3
 80086b4:	2007      	movs	r0, #7
 80086b6:	f7ff fe55 	bl	8008364 <writeReg>
	writeReg(RegFrfLsb, (u1_t) (frf >> 0));
 80086ba:	783b      	ldrb	r3, [r7, #0]
 80086bc:	4619      	mov	r1, r3
 80086be:	2008      	movs	r0, #8
 80086c0:	f7ff fe50 	bl	8008364 <writeReg>
}
 80086c4:	bf00      	nop
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bdb0      	pop	{r4, r5, r7, pc}
 80086cc:	2000033c 	.word	0x2000033c
 80086d0:	01e84800 	.word	0x01e84800

080086d4 <configPower>:

static void configPower()
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
#ifdef CFG_sx1276_radio
	// no boost used for now
	s1_t pw = (s1_t) LMIC.txpow;
 80086da:	4b15      	ldr	r3, [pc, #84]	@ (8008730 <configPower+0x5c>)
 80086dc:	7c9b      	ldrb	r3, [r3, #18]
 80086de:	71fb      	strb	r3, [r7, #7]
	if (pw >= 17) {
 80086e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086e4:	2b10      	cmp	r3, #16
 80086e6:	dd02      	ble.n	80086ee <configPower+0x1a>
		pw = 15;
 80086e8:	230f      	movs	r3, #15
 80086ea:	71fb      	strb	r3, [r7, #7]
 80086ec:	e005      	b.n	80086fa <configPower+0x26>
	} else if (pw < 2) {
 80086ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	dc01      	bgt.n	80086fa <configPower+0x26>
		pw = 2;
 80086f6:	2302      	movs	r3, #2
 80086f8:	71fb      	strb	r3, [r7, #7]
	}
	// check board type for BOOST pin
	writeReg(RegPaConfig, (u1_t) (0x80 | (pw & 0xf)));
 80086fa:	79fb      	ldrb	r3, [r7, #7]
 80086fc:	f003 030f 	and.w	r3, r3, #15
 8008700:	b25b      	sxtb	r3, r3
 8008702:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008706:	b25b      	sxtb	r3, r3
 8008708:	b2db      	uxtb	r3, r3
 800870a:	4619      	mov	r1, r3
 800870c:	2009      	movs	r0, #9
 800870e:	f7ff fe29 	bl	8008364 <writeReg>
	writeReg(RegPaDac, readReg(RegPaDac) | 0x4);
 8008712:	205a      	movs	r0, #90	@ 0x5a
 8008714:	f7ff fe43 	bl	800839e <readReg>
 8008718:	4603      	mov	r3, r0
 800871a:	f043 0304 	orr.w	r3, r3, #4
 800871e:	b2db      	uxtb	r3, r3
 8008720:	4619      	mov	r1, r3
 8008722:	205a      	movs	r0, #90	@ 0x5a
 8008724:	f7ff fe1e 	bl	8008364 <writeReg>
    }
    writeReg(RegPaConfig, (u1_t)(0x80|(pw-2)));
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 8008728:	bf00      	nop
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}
 8008730:	2000033c 	.word	0x2000033c

08008734 <txfsk>:

static void txfsk()
{
 8008734:	b580      	push	{r7, lr}
 8008736:	af00      	add	r7, sp, #0
	// select FSK modem (from sleep mode)
	writeReg(RegOpMode, 0x10); // FSK, BT=0.5
 8008738:	2110      	movs	r1, #16
 800873a:	2001      	movs	r0, #1
 800873c:	f7ff fe12 	bl	8008364 <writeReg>
	ASSERT(readReg(RegOpMode) == 0x10);
 8008740:	2001      	movs	r0, #1
 8008742:	f7ff fe2c 	bl	800839e <readReg>
 8008746:	4603      	mov	r3, r0
 8008748:	2b10      	cmp	r3, #16
 800874a:	d001      	beq.n	8008750 <txfsk+0x1c>
 800874c:	f7fc f95c 	bl	8004a08 <hal_failed>
	// enter standby mode (required for FIFO loading))
	opmode(OPMODE_STANDBY);
 8008750:	2001      	movs	r0, #1
 8008752:	f7ff fe95 	bl	8008480 <opmode>
	// set bitrate
	writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 8008756:	2102      	movs	r1, #2
 8008758:	2002      	movs	r0, #2
 800875a:	f7ff fe03 	bl	8008364 <writeReg>
	writeReg(FSKRegBitrateLsb, 0x80);
 800875e:	2180      	movs	r1, #128	@ 0x80
 8008760:	2003      	movs	r0, #3
 8008762:	f7ff fdff 	bl	8008364 <writeReg>
	// set frequency deviation
	writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 8008766:	2101      	movs	r1, #1
 8008768:	2004      	movs	r0, #4
 800876a:	f7ff fdfb 	bl	8008364 <writeReg>
	writeReg(FSKRegFdevLsb, 0x99);
 800876e:	2199      	movs	r1, #153	@ 0x99
 8008770:	2005      	movs	r0, #5
 8008772:	f7ff fdf7 	bl	8008364 <writeReg>
	// frame and packet handler settings
	writeReg(FSKRegPreambleMsb, 0x00);
 8008776:	2100      	movs	r1, #0
 8008778:	2025      	movs	r0, #37	@ 0x25
 800877a:	f7ff fdf3 	bl	8008364 <writeReg>
	writeReg(FSKRegPreambleLsb, 0x05);
 800877e:	2105      	movs	r1, #5
 8008780:	2026      	movs	r0, #38	@ 0x26
 8008782:	f7ff fdef 	bl	8008364 <writeReg>
	writeReg(FSKRegSyncConfig, 0x12);
 8008786:	2112      	movs	r1, #18
 8008788:	2027      	movs	r0, #39	@ 0x27
 800878a:	f7ff fdeb 	bl	8008364 <writeReg>
	writeReg(FSKRegPacketConfig1, 0xD0);
 800878e:	21d0      	movs	r1, #208	@ 0xd0
 8008790:	2030      	movs	r0, #48	@ 0x30
 8008792:	f7ff fde7 	bl	8008364 <writeReg>
	writeReg(FSKRegPacketConfig2, 0x40);
 8008796:	2140      	movs	r1, #64	@ 0x40
 8008798:	2031      	movs	r0, #49	@ 0x31
 800879a:	f7ff fde3 	bl	8008364 <writeReg>
	writeReg(FSKRegSyncValue1, 0xC1);
 800879e:	21c1      	movs	r1, #193	@ 0xc1
 80087a0:	2028      	movs	r0, #40	@ 0x28
 80087a2:	f7ff fddf 	bl	8008364 <writeReg>
	writeReg(FSKRegSyncValue2, 0x94);
 80087a6:	2194      	movs	r1, #148	@ 0x94
 80087a8:	2029      	movs	r0, #41	@ 0x29
 80087aa:	f7ff fddb 	bl	8008364 <writeReg>
	writeReg(FSKRegSyncValue3, 0xC1);
 80087ae:	21c1      	movs	r1, #193	@ 0xc1
 80087b0:	202a      	movs	r0, #42	@ 0x2a
 80087b2:	f7ff fdd7 	bl	8008364 <writeReg>
	// configure frequency
	configChannel();
 80087b6:	f7ff ff4f 	bl	8008658 <configChannel>
	// configure output power
	configPower();
 80087ba:	f7ff ff8b 	bl	80086d4 <configPower>

	// set the IRQ mapping DIO0=PacketSent DIO1=NOP DIO2=NOP
	writeReg(RegDioMapping1,
 80087be:	2134      	movs	r1, #52	@ 0x34
 80087c0:	2040      	movs	r0, #64	@ 0x40
 80087c2:	f7ff fdcf 	bl	8008364 <writeReg>
			MAP_DIO0_FSK_READY | MAP_DIO1_FSK_NOP | MAP_DIO2_FSK_TXNOP);

	// initialize the payload size and address pointers    
	writeReg(FSKRegPayloadLength, LMIC.dataLen + 1); // (insert length byte into payload))
 80087c6:	4b10      	ldr	r3, [pc, #64]	@ (8008808 <txfsk+0xd4>)
 80087c8:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80087cc:	3301      	adds	r3, #1
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	4619      	mov	r1, r3
 80087d2:	2032      	movs	r0, #50	@ 0x32
 80087d4:	f7ff fdc6 	bl	8008364 <writeReg>

	// download length byte and buffer to the radio FIFO
	writeReg(RegFifo, LMIC.dataLen);
 80087d8:	4b0b      	ldr	r3, [pc, #44]	@ (8008808 <txfsk+0xd4>)
 80087da:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80087de:	4619      	mov	r1, r3
 80087e0:	2000      	movs	r0, #0
 80087e2:	f7ff fdbf 	bl	8008364 <writeReg>
	writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 80087e6:	4b08      	ldr	r3, [pc, #32]	@ (8008808 <txfsk+0xd4>)
 80087e8:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80087ec:	461a      	mov	r2, r3
 80087ee:	4907      	ldr	r1, [pc, #28]	@ (800880c <txfsk+0xd8>)
 80087f0:	2000      	movs	r0, #0
 80087f2:	f7ff fdf0 	bl	80083d6 <writeBuf>

	// enable antenna switch for TX
	hal_pin_rxtx(1);
 80087f6:	2001      	movs	r0, #1
 80087f8:	f7fb ff87 	bl	800470a <hal_pin_rxtx>

	// now we actually start the transmission
	opmode(OPMODE_TX);
 80087fc:	2003      	movs	r0, #3
 80087fe:	f7ff fe3f 	bl	8008480 <opmode>
}
 8008802:	bf00      	nop
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	2000033c 	.word	0x2000033c
 800880c:	20000484 	.word	0x20000484

08008810 <txlora>:

static void txlora()
{
 8008810:	b580      	push	{r7, lr}
 8008812:	af00      	add	r7, sp, #0
	// select LoRa modem (from sleep mode)
	//writeReg(RegOpMode, OPMODE_LORA);
	opmodeLora();
 8008814:	f7ff fe4e 	bl	80084b4 <opmodeLora>
	ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 8008818:	2001      	movs	r0, #1
 800881a:	f7ff fdc0 	bl	800839e <readReg>
 800881e:	4603      	mov	r3, r0
 8008820:	b25b      	sxtb	r3, r3
 8008822:	2b00      	cmp	r3, #0
 8008824:	db01      	blt.n	800882a <txlora+0x1a>
 8008826:	f7fc f8ef 	bl	8004a08 <hal_failed>

	// enter standby mode (required for FIFO loading))
	opmode(OPMODE_STANDBY);
 800882a:	2001      	movs	r0, #1
 800882c:	f7ff fe28 	bl	8008480 <opmode>
	// configure LoRa modem (cfg1, cfg2)
	configLoraModem();
 8008830:	f7ff fe64 	bl	80084fc <configLoraModem>
	// configure frequency
	configChannel();
 8008834:	f7ff ff10 	bl	8008658 <configChannel>
	// configure output power
	writeReg(RegPaRamp, (readReg(RegPaRamp) & 0xF0) | 0x08); // set PA ramp-up time 50 uSec
 8008838:	200a      	movs	r0, #10
 800883a:	f7ff fdb0 	bl	800839e <readReg>
 800883e:	4603      	mov	r3, r0
 8008840:	b25b      	sxtb	r3, r3
 8008842:	f023 030f 	bic.w	r3, r3, #15
 8008846:	b25b      	sxtb	r3, r3
 8008848:	f043 0308 	orr.w	r3, r3, #8
 800884c:	b25b      	sxtb	r3, r3
 800884e:	b2db      	uxtb	r3, r3
 8008850:	4619      	mov	r1, r3
 8008852:	200a      	movs	r0, #10
 8008854:	f7ff fd86 	bl	8008364 <writeReg>
	configPower();
 8008858:	f7ff ff3c 	bl	80086d4 <configPower>
	// set sync word
	writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 800885c:	2134      	movs	r1, #52	@ 0x34
 800885e:	2039      	movs	r0, #57	@ 0x39
 8008860:	f7ff fd80 	bl	8008364 <writeReg>

	// set the IRQ mapping DIO0=TxDone DIO1=NOP DIO2=NOP
	writeReg(RegDioMapping1,
 8008864:	21f0      	movs	r1, #240	@ 0xf0
 8008866:	2040      	movs	r0, #64	@ 0x40
 8008868:	f7ff fd7c 	bl	8008364 <writeReg>
			MAP_DIO0_LORA_TXDONE | MAP_DIO1_LORA_NOP | MAP_DIO2_LORA_NOP);
	// clear all radio IRQ flags
	writeReg(LORARegIrqFlags, 0xFF);
 800886c:	21ff      	movs	r1, #255	@ 0xff
 800886e:	2012      	movs	r0, #18
 8008870:	f7ff fd78 	bl	8008364 <writeReg>
	// mask all IRQs but TxDone
	writeReg(LORARegIrqFlagsMask, ~IRQ_LORA_TXDONE_MASK);
 8008874:	21f7      	movs	r1, #247	@ 0xf7
 8008876:	2011      	movs	r0, #17
 8008878:	f7ff fd74 	bl	8008364 <writeReg>

	// initialize the payload size and address pointers    
	writeReg(LORARegFifoTxBaseAddr, 0x00);
 800887c:	2100      	movs	r1, #0
 800887e:	200e      	movs	r0, #14
 8008880:	f7ff fd70 	bl	8008364 <writeReg>
	writeReg(LORARegFifoAddrPtr, 0x00);
 8008884:	2100      	movs	r1, #0
 8008886:	200d      	movs	r0, #13
 8008888:	f7ff fd6c 	bl	8008364 <writeReg>
	writeReg(LORARegPayloadLength, LMIC.dataLen);
 800888c:	4b0b      	ldr	r3, [pc, #44]	@ (80088bc <txlora+0xac>)
 800888e:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8008892:	4619      	mov	r1, r3
 8008894:	2022      	movs	r0, #34	@ 0x22
 8008896:	f7ff fd65 	bl	8008364 <writeReg>

	// download buffer to the radio FIFO
	writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 800889a:	4b08      	ldr	r3, [pc, #32]	@ (80088bc <txlora+0xac>)
 800889c:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80088a0:	461a      	mov	r2, r3
 80088a2:	4907      	ldr	r1, [pc, #28]	@ (80088c0 <txlora+0xb0>)
 80088a4:	2000      	movs	r0, #0
 80088a6:	f7ff fd96 	bl	80083d6 <writeBuf>

	// enable antenna switch for TX
	hal_pin_rxtx(1);
 80088aa:	2001      	movs	r0, #1
 80088ac:	f7fb ff2d 	bl	800470a <hal_pin_rxtx>

	// now we actually start the transmission
	opmode(OPMODE_TX);
 80088b0:	2003      	movs	r0, #3
 80088b2:	f7ff fde5 	bl	8008480 <opmode>
}
 80088b6:	bf00      	nop
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	2000033c 	.word	0x2000033c
 80088c0:	20000484 	.word	0x20000484

080088c4 <starttx>:

// start transmitter (buf=LMIC.frame, len=LMIC.dataLen)
static void starttx()
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	af00      	add	r7, sp, #0
	ASSERT((readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP);
 80088c8:	2001      	movs	r0, #1
 80088ca:	f7ff fd68 	bl	800839e <readReg>
 80088ce:	4603      	mov	r3, r0
 80088d0:	f003 0307 	and.w	r3, r3, #7
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d001      	beq.n	80088dc <starttx+0x18>
 80088d8:	f7fc f896 	bl	8004a08 <hal_failed>
	if (getSf(LMIC.rps) == FSK) { // FSK modem
 80088dc:	4b07      	ldr	r3, [pc, #28]	@ (80088fc <starttx+0x38>)
 80088de:	89db      	ldrh	r3, [r3, #14]
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7fc f931 	bl	8004b48 <getSf>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d102      	bne.n	80088f2 <starttx+0x2e>
		txfsk();
 80088ec:	f7ff ff22 	bl	8008734 <txfsk>
	} else { // LoRa modem
		txlora();
	}
	// the radio will go back to STANDBY mode as soon as the TX is finished
	// the corresponding IRQ will inform us about completion.
}
 80088f0:	e001      	b.n	80088f6 <starttx+0x32>
		txlora();
 80088f2:	f7ff ff8d 	bl	8008810 <txlora>
}
 80088f6:	bf00      	nop
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	2000033c 	.word	0x2000033c

08008900 <rxlora>:
		| IRQ_LORA_RXTOUT_MASK, [RXMODE_SCAN] = IRQ_LORA_RXDONE_MASK,
		[RXMODE_RSSI] = 0x00, };

// start LoRa receiver (time=LMIC.rxtime, timeout=LMIC.rxsyms, result=LMIC.frame[LMIC.dataLen])
static void rxlora(u1_t rxmode)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	4603      	mov	r3, r0
 8008908:	71fb      	strb	r3, [r7, #7]
	// select LoRa modem (from sleep mode)
	opmodeLora();
 800890a:	f7ff fdd3 	bl	80084b4 <opmodeLora>
	ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 800890e:	2001      	movs	r0, #1
 8008910:	f7ff fd45 	bl	800839e <readReg>
 8008914:	4603      	mov	r3, r0
 8008916:	b25b      	sxtb	r3, r3
 8008918:	2b00      	cmp	r3, #0
 800891a:	db01      	blt.n	8008920 <rxlora+0x20>
 800891c:	f7fc f874 	bl	8004a08 <hal_failed>
	// enter standby mode (warm up))
	opmode(OPMODE_STANDBY);
 8008920:	2001      	movs	r0, #1
 8008922:	f7ff fdad 	bl	8008480 <opmode>
	// don't use MAC settings at startup
	if (rxmode == RXMODE_RSSI) { // use fixed settings for rssi scan
 8008926:	79fb      	ldrb	r3, [r7, #7]
 8008928:	2b02      	cmp	r3, #2
 800892a:	d108      	bne.n	800893e <rxlora+0x3e>
		writeReg(LORARegModemConfig1, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG1);
 800892c:	210a      	movs	r1, #10
 800892e:	201d      	movs	r0, #29
 8008930:	f7ff fd18 	bl	8008364 <writeReg>
		writeReg(LORARegModemConfig2, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG2);
 8008934:	2170      	movs	r1, #112	@ 0x70
 8008936:	201e      	movs	r0, #30
 8008938:	f7ff fd14 	bl	8008364 <writeReg>
 800893c:	e003      	b.n	8008946 <rxlora+0x46>
	} else { // single or continuous rx mode
		// configure LoRa modem (cfg1, cfg2)
		configLoraModem();
 800893e:	f7ff fddd 	bl	80084fc <configLoraModem>
		// configure frequency
		configChannel();
 8008942:	f7ff fe89 	bl	8008658 <configChannel>
	}
	// set LNA gain
	writeReg(RegLna, LNA_RX_GAIN);
 8008946:	2121      	movs	r1, #33	@ 0x21
 8008948:	200c      	movs	r0, #12
 800894a:	f7ff fd0b 	bl	8008364 <writeReg>
	// set max payload size
	writeReg(LORARegPayloadMaxLength, 64);
 800894e:	2140      	movs	r1, #64	@ 0x40
 8008950:	2023      	movs	r0, #35	@ 0x23
 8008952:	f7ff fd07 	bl	8008364 <writeReg>
	// use inverted I/Q signal (prevent mote-to-mote communication)

	// XXX: use flag to switch on/off inversion
	if (LMIC.noRXIQinversion) {
 8008956:	4b26      	ldr	r3, [pc, #152]	@ (80089f0 <rxlora+0xf0>)
 8008958:	f893 31a8 	ldrb.w	r3, [r3, #424]	@ 0x1a8
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00b      	beq.n	8008978 <rxlora+0x78>
		writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ) & ~(1 << 6));
 8008960:	2033      	movs	r0, #51	@ 0x33
 8008962:	f7ff fd1c 	bl	800839e <readReg>
 8008966:	4603      	mov	r3, r0
 8008968:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800896c:	b2db      	uxtb	r3, r3
 800896e:	4619      	mov	r1, r3
 8008970:	2033      	movs	r0, #51	@ 0x33
 8008972:	f7ff fcf7 	bl	8008364 <writeReg>
 8008976:	e00a      	b.n	800898e <rxlora+0x8e>
	} else {
		writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ) | (1 << 6));
 8008978:	2033      	movs	r0, #51	@ 0x33
 800897a:	f7ff fd10 	bl	800839e <readReg>
 800897e:	4603      	mov	r3, r0
 8008980:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008984:	b2db      	uxtb	r3, r3
 8008986:	4619      	mov	r1, r3
 8008988:	2033      	movs	r0, #51	@ 0x33
 800898a:	f7ff fceb 	bl	8008364 <writeReg>
	}

	// set symbol timeout (for single rx)
	writeReg(LORARegSymbTimeoutLsb, LMIC.rxsyms);
 800898e:	4b18      	ldr	r3, [pc, #96]	@ (80089f0 <rxlora+0xf0>)
 8008990:	7c1b      	ldrb	r3, [r3, #16]
 8008992:	4619      	mov	r1, r3
 8008994:	201f      	movs	r0, #31
 8008996:	f7ff fce5 	bl	8008364 <writeReg>
	// set sync word
	writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 800899a:	2134      	movs	r1, #52	@ 0x34
 800899c:	2039      	movs	r0, #57	@ 0x39
 800899e:	f7ff fce1 	bl	8008364 <writeReg>

	// configure DIO mapping DIO0=RxDone DIO1=RxTout DIO2=NOP
	writeReg(RegDioMapping1,
 80089a2:	21c0      	movs	r1, #192	@ 0xc0
 80089a4:	2040      	movs	r0, #64	@ 0x40
 80089a6:	f7ff fcdd 	bl	8008364 <writeReg>
			MAP_DIO0_LORA_RXDONE | MAP_DIO1_LORA_RXTOUT | MAP_DIO2_LORA_NOP);
	// clear all radio IRQ flags
	writeReg(LORARegIrqFlags, 0xFF);
 80089aa:	21ff      	movs	r1, #255	@ 0xff
 80089ac:	2012      	movs	r0, #18
 80089ae:	f7ff fcd9 	bl	8008364 <writeReg>
	// enable required radio IRQs
	writeReg(LORARegIrqFlagsMask, ~rxlorairqmask[rxmode]);
 80089b2:	79fb      	ldrb	r3, [r7, #7]
 80089b4:	4a0f      	ldr	r2, [pc, #60]	@ (80089f4 <rxlora+0xf4>)
 80089b6:	5cd3      	ldrb	r3, [r2, r3]
 80089b8:	43db      	mvns	r3, r3
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	4619      	mov	r1, r3
 80089be:	2011      	movs	r0, #17
 80089c0:	f7ff fcd0 	bl	8008364 <writeReg>

	// enable antenna switch for RX
	hal_pin_rxtx(0);
 80089c4:	2000      	movs	r0, #0
 80089c6:	f7fb fea0 	bl	800470a <hal_pin_rxtx>

	// now instruct the radio to receive
	if (rxmode == RXMODE_SINGLE) { // single rx
 80089ca:	79fb      	ldrb	r3, [r7, #7]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d108      	bne.n	80089e2 <rxlora+0xe2>
		hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 80089d0:	4b07      	ldr	r3, [pc, #28]	@ (80089f0 <rxlora+0xf0>)
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	4618      	mov	r0, r3
 80089d6:	f7fb ff86 	bl	80048e6 <hal_waitUntil>
		opmode(OPMODE_RX_SINGLE);
 80089da:	2006      	movs	r0, #6
 80089dc:	f7ff fd50 	bl	8008480 <opmode>
	} else { // continous rx (scan or rssi)
		opmode(OPMODE_RX);
	}
}
 80089e0:	e002      	b.n	80089e8 <rxlora+0xe8>
		opmode(OPMODE_RX);
 80089e2:	2005      	movs	r0, #5
 80089e4:	f7ff fd4c 	bl	8008480 <opmode>
}
 80089e8:	bf00      	nop
 80089ea:	3708      	adds	r7, #8
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	2000033c 	.word	0x2000033c
 80089f4:	080113c0 	.word	0x080113c0

080089f8 <rxfsk>:

static void rxfsk(u1_t rxmode)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	4603      	mov	r3, r0
 8008a00:	71fb      	strb	r3, [r7, #7]
	// only single rx (no continuous scanning, no noise sampling)
	ASSERT(rxmode == RXMODE_SINGLE);
 8008a02:	79fb      	ldrb	r3, [r7, #7]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d001      	beq.n	8008a0c <rxfsk+0x14>
 8008a08:	f7fb fffe 	bl	8004a08 <hal_failed>
	// select FSK modem (from sleep mode)
	//writeReg(RegOpMode, 0x00); // (not LoRa)
	opmodeFSK();
 8008a0c:	f7ff fd64 	bl	80084d8 <opmodeFSK>
	ASSERT((readReg(RegOpMode) & OPMODE_LORA) == 0);
 8008a10:	2001      	movs	r0, #1
 8008a12:	f7ff fcc4 	bl	800839e <readReg>
 8008a16:	4603      	mov	r3, r0
 8008a18:	b25b      	sxtb	r3, r3
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	da01      	bge.n	8008a22 <rxfsk+0x2a>
 8008a1e:	f7fb fff3 	bl	8004a08 <hal_failed>
	// enter standby mode (warm up))
	opmode(OPMODE_STANDBY);
 8008a22:	2001      	movs	r0, #1
 8008a24:	f7ff fd2c 	bl	8008480 <opmode>
	// configure frequency
	configChannel();
 8008a28:	f7ff fe16 	bl	8008658 <configChannel>
	// set LNA gain
	//writeReg(RegLna, 0x20|0x03); // max gain, boost enable
	writeReg(RegLna, LNA_RX_GAIN);
 8008a2c:	2121      	movs	r1, #33	@ 0x21
 8008a2e:	200c      	movs	r0, #12
 8008a30:	f7ff fc98 	bl	8008364 <writeReg>
	// configure receiver
	writeReg(FSKRegRxConfig, 0x1E); // AFC auto, AGC, trigger on preamble?!?
 8008a34:	211e      	movs	r1, #30
 8008a36:	200d      	movs	r0, #13
 8008a38:	f7ff fc94 	bl	8008364 <writeReg>
	// set receiver bandwidth
	writeReg(FSKRegRxBw, 0x0B); // 50kHz SSb
 8008a3c:	210b      	movs	r1, #11
 8008a3e:	2012      	movs	r0, #18
 8008a40:	f7ff fc90 	bl	8008364 <writeReg>
	// set AFC bandwidth
	writeReg(FSKRegAfcBw, 0x12); // 83.3kHz SSB
 8008a44:	2112      	movs	r1, #18
 8008a46:	2013      	movs	r0, #19
 8008a48:	f7ff fc8c 	bl	8008364 <writeReg>
	// set preamble detection
	writeReg(FSKRegPreambleDetect, 0xAA); // enable, 2 bytes, 10 chip errors
 8008a4c:	21aa      	movs	r1, #170	@ 0xaa
 8008a4e:	201f      	movs	r0, #31
 8008a50:	f7ff fc88 	bl	8008364 <writeReg>
	// set sync config
	writeReg(FSKRegSyncConfig, 0x12); // no auto restart, preamble 0xAA, enable, fill FIFO, 3 bytes sync
 8008a54:	2112      	movs	r1, #18
 8008a56:	2027      	movs	r0, #39	@ 0x27
 8008a58:	f7ff fc84 	bl	8008364 <writeReg>
	// set packet config
	writeReg(FSKRegPacketConfig1, 0xD8); // var-length, whitening, crc, no auto-clear, no adr filter
 8008a5c:	21d8      	movs	r1, #216	@ 0xd8
 8008a5e:	2030      	movs	r0, #48	@ 0x30
 8008a60:	f7ff fc80 	bl	8008364 <writeReg>
	writeReg(FSKRegPacketConfig2, 0x40); // packet mode
 8008a64:	2140      	movs	r1, #64	@ 0x40
 8008a66:	2031      	movs	r0, #49	@ 0x31
 8008a68:	f7ff fc7c 	bl	8008364 <writeReg>
	// set sync value
	writeReg(FSKRegSyncValue1, 0xC1);
 8008a6c:	21c1      	movs	r1, #193	@ 0xc1
 8008a6e:	2028      	movs	r0, #40	@ 0x28
 8008a70:	f7ff fc78 	bl	8008364 <writeReg>
	writeReg(FSKRegSyncValue2, 0x94);
 8008a74:	2194      	movs	r1, #148	@ 0x94
 8008a76:	2029      	movs	r0, #41	@ 0x29
 8008a78:	f7ff fc74 	bl	8008364 <writeReg>
	writeReg(FSKRegSyncValue3, 0xC1);
 8008a7c:	21c1      	movs	r1, #193	@ 0xc1
 8008a7e:	202a      	movs	r0, #42	@ 0x2a
 8008a80:	f7ff fc70 	bl	8008364 <writeReg>
	// set preamble timeout
	writeReg(FSKRegRxTimeout2, 0xFF);    //(LMIC.rxsyms+1)/2);
 8008a84:	21ff      	movs	r1, #255	@ 0xff
 8008a86:	2021      	movs	r0, #33	@ 0x21
 8008a88:	f7ff fc6c 	bl	8008364 <writeReg>
	// set bitrate
	writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 8008a8c:	2102      	movs	r1, #2
 8008a8e:	2002      	movs	r0, #2
 8008a90:	f7ff fc68 	bl	8008364 <writeReg>
	writeReg(FSKRegBitrateLsb, 0x80);
 8008a94:	2180      	movs	r1, #128	@ 0x80
 8008a96:	2003      	movs	r0, #3
 8008a98:	f7ff fc64 	bl	8008364 <writeReg>
	// set frequency deviation
	writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 8008a9c:	2101      	movs	r1, #1
 8008a9e:	2004      	movs	r0, #4
 8008aa0:	f7ff fc60 	bl	8008364 <writeReg>
	writeReg(FSKRegFdevLsb, 0x99);
 8008aa4:	2199      	movs	r1, #153	@ 0x99
 8008aa6:	2005      	movs	r0, #5
 8008aa8:	f7ff fc5c 	bl	8008364 <writeReg>

	// configure DIO mapping DIO0=PayloadReady DIO1=NOP DIO2=TimeOut
	writeReg(RegDioMapping1,
 8008aac:	2138      	movs	r1, #56	@ 0x38
 8008aae:	2040      	movs	r0, #64	@ 0x40
 8008ab0:	f7ff fc58 	bl	8008364 <writeReg>
			MAP_DIO0_FSK_READY | MAP_DIO1_FSK_NOP | MAP_DIO2_FSK_TIMEOUT);

	// enable antenna switch for RX
	hal_pin_rxtx(0);
 8008ab4:	2000      	movs	r0, #0
 8008ab6:	f7fb fe28 	bl	800470a <hal_pin_rxtx>

	// now instruct the radio to receive
	hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 8008aba:	4b06      	ldr	r3, [pc, #24]	@ (8008ad4 <rxfsk+0xdc>)
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7fb ff11 	bl	80048e6 <hal_waitUntil>
	opmode(OPMODE_RX); // no single rx mode available in FSK
 8008ac4:	2005      	movs	r0, #5
 8008ac6:	f7ff fcdb 	bl	8008480 <opmode>
}
 8008aca:	bf00      	nop
 8008acc:	3708      	adds	r7, #8
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	2000033c 	.word	0x2000033c

08008ad8 <startrx>:

static void startrx(u1_t rxmode)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	4603      	mov	r3, r0
 8008ae0:	71fb      	strb	r3, [r7, #7]
	ASSERT((readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP);
 8008ae2:	2001      	movs	r0, #1
 8008ae4:	f7ff fc5b 	bl	800839e <readReg>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	f003 0307 	and.w	r3, r3, #7
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d001      	beq.n	8008af6 <startrx+0x1e>
 8008af2:	f7fb ff89 	bl	8004a08 <hal_failed>
	if (getSf(LMIC.rps) == FSK) { // FSK modem
 8008af6:	4b0a      	ldr	r3, [pc, #40]	@ (8008b20 <startrx+0x48>)
 8008af8:	89db      	ldrh	r3, [r3, #14]
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7fc f824 	bl	8004b48 <getSf>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d104      	bne.n	8008b10 <startrx+0x38>
		rxfsk(rxmode);
 8008b06:	79fb      	ldrb	r3, [r7, #7]
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f7ff ff75 	bl	80089f8 <rxfsk>
	} else { // LoRa modem
		rxlora(rxmode);
	}
	// the radio will go back to STANDBY mode as soon as the RX is finished
	// or timed out, and the corresponding IRQ will inform us about completion.
}
 8008b0e:	e003      	b.n	8008b18 <startrx+0x40>
		rxlora(rxmode);
 8008b10:	79fb      	ldrb	r3, [r7, #7]
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7ff fef4 	bl	8008900 <rxlora>
}
 8008b18:	bf00      	nop
 8008b1a:	3708      	adds	r7, #8
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	2000033c 	.word	0x2000033c

08008b24 <radio_init>:

// get random seed from wideband noise rssi
void radio_init()
{
 8008b24:	b590      	push	{r4, r7, lr}
 8008b26:	b085      	sub	sp, #20
 8008b28:	af00      	add	r7, sp, #0
	hal_disableIRQs();
 8008b2a:	f7fb ff2b 	bl	8004984 <hal_disableIRQs>

	// manually reset radio
#ifdef CFG_sx1276_radio
	hal_pin_rst(0); // drive RST pin low
 8008b2e:	2000      	movs	r0, #0
 8008b30:	f7fb fe07 	bl	8004742 <hal_pin_rst>
#else
    hal_pin_rst(1); // drive RST pin high
#endif
	hal_waitUntil(os_getTime() + ms2osticks(1)); // wait >100us
 8008b34:	f7ff fb40 	bl	80081b8 <os_getTime>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	3320      	adds	r3, #32
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7fb fed2 	bl	80048e6 <hal_waitUntil>
	hal_pin_rst(2); // configure RST pin floating!
 8008b42:	2002      	movs	r0, #2
 8008b44:	f7fb fdfd 	bl	8004742 <hal_pin_rst>
	hal_waitUntil(os_getTime() + ms2osticks(5)); // wait 5ms
 8008b48:	f7ff fb36 	bl	80081b8 <os_getTime>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	33a0      	adds	r3, #160	@ 0xa0
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7fb fec8 	bl	80048e6 <hal_waitUntil>

	opmode(OPMODE_SLEEP);
 8008b56:	2000      	movs	r0, #0
 8008b58:	f7ff fc92 	bl	8008480 <opmode>

	// some sanity checks, e.g., read version number
	u1_t v = readReg(RegVersion);
 8008b5c:	2042      	movs	r0, #66	@ 0x42
 8008b5e:	f7ff fc1e 	bl	800839e <readReg>
 8008b62:	4603      	mov	r3, r0
 8008b64:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
	ASSERT(v == 0x12);
 8008b66:	79fb      	ldrb	r3, [r7, #7]
 8008b68:	2b12      	cmp	r3, #18
 8008b6a:	d001      	beq.n	8008b70 <radio_init+0x4c>
 8008b6c:	f7fb ff4c 	bl	8004a08 <hal_failed>
    ASSERT(v == 0x22);
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif
	// seed 15-byte randomness via noise rssi
	rxlora(RXMODE_RSSI);
 8008b70:	2002      	movs	r0, #2
 8008b72:	f7ff fec5 	bl	8008900 <rxlora>
	while ((readReg(RegOpMode) & OPMODE_MASK) != OPMODE_RX)
 8008b76:	bf00      	nop
 8008b78:	2001      	movs	r0, #1
 8008b7a:	f7ff fc10 	bl	800839e <readReg>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	f003 0307 	and.w	r3, r3, #7
 8008b84:	2b05      	cmp	r3, #5
 8008b86:	d1f7      	bne.n	8008b78 <radio_init+0x54>
		; // continuous rx
	for (int i = 1; i < 16; i++) {
 8008b88:	2301      	movs	r3, #1
 8008b8a:	60fb      	str	r3, [r7, #12]
 8008b8c:	e02c      	b.n	8008be8 <radio_init+0xc4>
		for (int j = 0; j < 8; j++) {
 8008b8e:	2300      	movs	r3, #0
 8008b90:	60bb      	str	r3, [r7, #8]
 8008b92:	e023      	b.n	8008bdc <radio_init+0xb8>
			u1_t b; // wait for two non-identical subsequent least-significant bits
			while ((b = readReg(LORARegRssiWideband) & 0x01)
 8008b94:	bf00      	nop
 8008b96:	202c      	movs	r0, #44	@ 0x2c
 8008b98:	f7ff fc01 	bl	800839e <readReg>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	f003 0301 	and.w	r3, r3, #1
 8008ba2:	71bb      	strb	r3, [r7, #6]
 8008ba4:	79bc      	ldrb	r4, [r7, #6]
					== (readReg(LORARegRssiWideband) & 0x01))
 8008ba6:	202c      	movs	r0, #44	@ 0x2c
 8008ba8:	f7ff fbf9 	bl	800839e <readReg>
 8008bac:	4603      	mov	r3, r0
 8008bae:	f003 0301 	and.w	r3, r3, #1
 8008bb2:	429c      	cmp	r4, r3
 8008bb4:	d0ef      	beq.n	8008b96 <radio_init+0x72>
				;
			randbuf[i] = (randbuf[i] << 1) | b;
 8008bb6:	4a14      	ldr	r2, [pc, #80]	@ (8008c08 <radio_init+0xe4>)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	4413      	add	r3, r2
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	005b      	lsls	r3, r3, #1
 8008bc0:	b25a      	sxtb	r2, r3
 8008bc2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	b25b      	sxtb	r3, r3
 8008bca:	b2d9      	uxtb	r1, r3
 8008bcc:	4a0e      	ldr	r2, [pc, #56]	@ (8008c08 <radio_init+0xe4>)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	460a      	mov	r2, r1
 8008bd4:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++) {
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	3301      	adds	r3, #1
 8008bda:	60bb      	str	r3, [r7, #8]
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	2b07      	cmp	r3, #7
 8008be0:	ddd8      	ble.n	8008b94 <radio_init+0x70>
	for (int i = 1; i < 16; i++) {
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	3301      	adds	r3, #1
 8008be6:	60fb      	str	r3, [r7, #12]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2b0f      	cmp	r3, #15
 8008bec:	ddcf      	ble.n	8008b8e <radio_init+0x6a>
		}
	}
	randbuf[0] = 16; // set initial index
 8008bee:	4b06      	ldr	r3, [pc, #24]	@ (8008c08 <radio_init+0xe4>)
 8008bf0:	2210      	movs	r2, #16
 8008bf2:	701a      	strb	r2, [r3, #0]
    // Launch Rx chain calibration for HF band 
    writeReg(FSKRegImageCal, (readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_MASK)|RF_IMAGECAL_IMAGECAL_START);
    while((readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_RUNNING) == RF_IMAGECAL_IMAGECAL_RUNNING) { ; }
#endif /* CFG_sx1276mb1_board */

	opmode(OPMODE_SLEEP);
 8008bf4:	2000      	movs	r0, #0
 8008bf6:	f7ff fc43 	bl	8008480 <opmode>

	hal_enableIRQs();
 8008bfa:	f7fb fed3 	bl	80049a4 <hal_enableIRQs>
}
 8008bfe:	bf00      	nop
 8008c00:	3714      	adds	r7, #20
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd90      	pop	{r4, r7, pc}
 8008c06:	bf00      	nop
 8008c08:	2000055c 	.word	0x2000055c

08008c0c <radio_rand1>:

// return next random byte derived from seed buffer
// (buf[0] holds index of next byte to be returned)
u1_t radio_rand1()
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
	u1_t i = randbuf[0];
 8008c12:	4b10      	ldr	r3, [pc, #64]	@ (8008c54 <radio_rand1+0x48>)
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	71fb      	strb	r3, [r7, #7]
	ASSERT(i != 0);
 8008c18:	79fb      	ldrb	r3, [r7, #7]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d101      	bne.n	8008c22 <radio_rand1+0x16>
 8008c1e:	f7fb fef3 	bl	8004a08 <hal_failed>
	if (i == 16) {
 8008c22:	79fb      	ldrb	r3, [r7, #7]
 8008c24:	2b10      	cmp	r3, #16
 8008c26:	d106      	bne.n	8008c36 <radio_rand1+0x2a>
		os_aes(AES_ENC, randbuf, 16); // encrypt seed with any key
 8008c28:	2210      	movs	r2, #16
 8008c2a:	490a      	ldr	r1, [pc, #40]	@ (8008c54 <radio_rand1+0x48>)
 8008c2c:	2000      	movs	r0, #0
 8008c2e:	f7f8 fa53 	bl	80010d8 <os_aes>
		i = 0;
 8008c32:	2300      	movs	r3, #0
 8008c34:	71fb      	strb	r3, [r7, #7]
	}
	u1_t v = randbuf[i++];
 8008c36:	79fb      	ldrb	r3, [r7, #7]
 8008c38:	1c5a      	adds	r2, r3, #1
 8008c3a:	71fa      	strb	r2, [r7, #7]
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	4b05      	ldr	r3, [pc, #20]	@ (8008c54 <radio_rand1+0x48>)
 8008c40:	5c9b      	ldrb	r3, [r3, r2]
 8008c42:	71bb      	strb	r3, [r7, #6]
	randbuf[0] = i;
 8008c44:	4a03      	ldr	r2, [pc, #12]	@ (8008c54 <radio_rand1+0x48>)
 8008c46:	79fb      	ldrb	r3, [r7, #7]
 8008c48:	7013      	strb	r3, [r2, #0]
	return v;
 8008c4a:	79bb      	ldrb	r3, [r7, #6]
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3708      	adds	r7, #8
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	2000055c 	.word	0x2000055c

08008c58 <radio_irq_handler>:
		};

// called by hal ext IRQ handler
// (radio goes to stanby mode after tx/rx operations)
void radio_irq_handler(u1_t dio)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	4603      	mov	r3, r0
 8008c60:	71fb      	strb	r3, [r7, #7]
    u1_t s = readReg(RegOpMode);
    u1_t c = readReg(LORARegModemConfig2);
    opmode(OPMODE_TX);
    return;
#else /* ! CFG_TxContinuousMode */
	ostime_t now = os_getTime();
 8008c62:	f7ff faa9 	bl	80081b8 <os_getTime>
 8008c66:	60f8      	str	r0, [r7, #12]
	if ((readReg(RegOpMode) & OPMODE_LORA) != 0) { // LORA modem
 8008c68:	2001      	movs	r0, #1
 8008c6a:	f7ff fb98 	bl	800839e <readReg>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	b25b      	sxtb	r3, r3
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	da74      	bge.n	8008d60 <radio_irq_handler+0x108>
		u1_t flags = readReg(LORARegIrqFlags);
 8008c76:	2012      	movs	r0, #18
 8008c78:	f7ff fb91 	bl	800839e <readReg>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	727b      	strb	r3, [r7, #9]
		if (flags & IRQ_LORA_TXDONE_MASK) {
 8008c80:	7a7b      	ldrb	r3, [r7, #9]
 8008c82:	f003 0308 	and.w	r3, r3, #8
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d004      	beq.n	8008c94 <radio_irq_handler+0x3c>
			// save exact tx time
			LMIC.txend = now - us2osticks(43); // TXDONE FIXUP
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	3b01      	subs	r3, #1
 8008c8e:	4a59      	ldr	r2, [pc, #356]	@ (8008df4 <radio_irq_handler+0x19c>)
 8008c90:	6013      	str	r3, [r2, #0]
 8008c92:	e05c      	b.n	8008d4e <radio_irq_handler+0xf6>
		} else if (flags & IRQ_LORA_RXDONE_MASK) {
 8008c94:	7a7b      	ldrb	r3, [r7, #9]
 8008c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d04f      	beq.n	8008d3e <radio_irq_handler+0xe6>
			// save exact rx time
			if (getBw(LMIC.rps) == BW125) {
 8008c9e:	4b55      	ldr	r3, [pc, #340]	@ (8008df4 <radio_irq_handler+0x19c>)
 8008ca0:	89db      	ldrh	r3, [r3, #14]
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7fb ff60 	bl	8004b68 <getBw>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d10d      	bne.n	8008cca <radio_irq_handler+0x72>
				now -= LORA_RXDONE_FIXUP[getSf(LMIC.rps)];
 8008cae:	4b51      	ldr	r3, [pc, #324]	@ (8008df4 <radio_irq_handler+0x19c>)
 8008cb0:	89db      	ldrh	r3, [r3, #14]
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7fb ff48 	bl	8004b48 <getSf>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	461a      	mov	r2, r3
 8008cbc:	4b4e      	ldr	r3, [pc, #312]	@ (8008df8 <radio_irq_handler+0x1a0>)
 8008cbe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	1a9b      	subs	r3, r3, r2
 8008cc8:	60fb      	str	r3, [r7, #12]
			}
			LMIC.rxtime = now;
 8008cca:	4a4a      	ldr	r2, [pc, #296]	@ (8008df4 <radio_irq_handler+0x19c>)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6053      	str	r3, [r2, #4]
			// read the PDU and inform the MAC that we received something
			LMIC.dataLen =
					(readReg(LORARegModemConfig1)
 8008cd0:	201d      	movs	r0, #29
 8008cd2:	f7ff fb64 	bl	800839e <readReg>
 8008cd6:	4603      	mov	r3, r0
							& SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
 8008cd8:	f003 0304 	and.w	r3, r3, #4
			LMIC.dataLen =
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d005      	beq.n	8008cec <radio_irq_handler+0x94>
							readReg(LORARegPayloadLength) :
 8008ce0:	2022      	movs	r0, #34	@ 0x22
 8008ce2:	f7ff fb5c 	bl	800839e <readReg>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	461a      	mov	r2, r3
 8008cea:	e004      	b.n	8008cf6 <radio_irq_handler+0x9e>
							readReg(LORARegRxNbBytes);
 8008cec:	2013      	movs	r0, #19
 8008cee:	f7ff fb56 	bl	800839e <readReg>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	461a      	mov	r2, r3
			LMIC.dataLen =
 8008cf6:	4b3f      	ldr	r3, [pc, #252]	@ (8008df4 <radio_irq_handler+0x19c>)
 8008cf8:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
			// set FIFO read address pointer
			writeReg(LORARegFifoAddrPtr, readReg(LORARegFifoRxCurrentAddr));
 8008cfc:	2010      	movs	r0, #16
 8008cfe:	f7ff fb4e 	bl	800839e <readReg>
 8008d02:	4603      	mov	r3, r0
 8008d04:	4619      	mov	r1, r3
 8008d06:	200d      	movs	r0, #13
 8008d08:	f7ff fb2c 	bl	8008364 <writeReg>
			// now read the FIFO
			readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8008d0c:	4b39      	ldr	r3, [pc, #228]	@ (8008df4 <radio_irq_handler+0x19c>)
 8008d0e:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8008d12:	461a      	mov	r2, r3
 8008d14:	4939      	ldr	r1, [pc, #228]	@ (8008dfc <radio_irq_handler+0x1a4>)
 8008d16:	2000      	movs	r0, #0
 8008d18:	f7ff fb87 	bl	800842a <readBuf>
			// read rx quality parameters
			LMIC.snr = readReg(LORARegPktSnrValue); // SNR [dB] * 4
 8008d1c:	2019      	movs	r0, #25
 8008d1e:	f7ff fb3e 	bl	800839e <readReg>
 8008d22:	4603      	mov	r3, r0
 8008d24:	b25a      	sxtb	r2, r3
 8008d26:	4b33      	ldr	r3, [pc, #204]	@ (8008df4 <radio_irq_handler+0x19c>)
 8008d28:	735a      	strb	r2, [r3, #13]
			LMIC.rssi = readReg(LORARegPktRssiValue) - 125 + 64; // RSSI [dBm] (-196...+63)
 8008d2a:	201a      	movs	r0, #26
 8008d2c:	f7ff fb37 	bl	800839e <readReg>
 8008d30:	4603      	mov	r3, r0
 8008d32:	3b3d      	subs	r3, #61	@ 0x3d
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	b25a      	sxtb	r2, r3
 8008d38:	4b2e      	ldr	r3, [pc, #184]	@ (8008df4 <radio_irq_handler+0x19c>)
 8008d3a:	731a      	strb	r2, [r3, #12]
 8008d3c:	e007      	b.n	8008d4e <radio_irq_handler+0xf6>
		} else if (flags & IRQ_LORA_RXTOUT_MASK) {
 8008d3e:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	da03      	bge.n	8008d4e <radio_irq_handler+0xf6>
			// indicate timeout
			LMIC.dataLen = 0;
 8008d46:	4b2b      	ldr	r3, [pc, #172]	@ (8008df4 <radio_irq_handler+0x19c>)
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
		}
		// mask all radio IRQs
		writeReg(LORARegIrqFlagsMask, 0xFF);
 8008d4e:	21ff      	movs	r1, #255	@ 0xff
 8008d50:	2011      	movs	r0, #17
 8008d52:	f7ff fb07 	bl	8008364 <writeReg>
		// clear radio IRQ flags
		writeReg(LORARegIrqFlags, 0xFF);
 8008d56:	21ff      	movs	r1, #255	@ 0xff
 8008d58:	2012      	movs	r0, #18
 8008d5a:	f7ff fb03 	bl	8008364 <writeReg>
 8008d5e:	e03c      	b.n	8008dda <radio_irq_handler+0x182>
	} else { // FSK modem
		u1_t flags1 = readReg(FSKRegIrqFlags1);
 8008d60:	203e      	movs	r0, #62	@ 0x3e
 8008d62:	f7ff fb1c 	bl	800839e <readReg>
 8008d66:	4603      	mov	r3, r0
 8008d68:	72fb      	strb	r3, [r7, #11]
		u1_t flags2 = readReg(FSKRegIrqFlags2);
 8008d6a:	203f      	movs	r0, #63	@ 0x3f
 8008d6c:	f7ff fb17 	bl	800839e <readReg>
 8008d70:	4603      	mov	r3, r0
 8008d72:	72bb      	strb	r3, [r7, #10]
		if (flags2 & IRQ_FSK2_PACKETSENT_MASK) {
 8008d74:	7abb      	ldrb	r3, [r7, #10]
 8008d76:	f003 0308 	and.w	r3, r3, #8
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d003      	beq.n	8008d86 <radio_irq_handler+0x12e>
			// save exact tx time
			LMIC.txend = now;
 8008d7e:	4a1d      	ldr	r2, [pc, #116]	@ (8008df4 <radio_irq_handler+0x19c>)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6013      	str	r3, [r2, #0]
 8008d84:	e029      	b.n	8008dda <radio_irq_handler+0x182>
		} else if (flags2 & IRQ_FSK2_PAYLOADREADY_MASK) {
 8008d86:	7abb      	ldrb	r3, [r7, #10]
 8008d88:	f003 0304 	and.w	r3, r3, #4
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d019      	beq.n	8008dc4 <radio_irq_handler+0x16c>
			// save exact rx time
			LMIC.rxtime = now;
 8008d90:	4a18      	ldr	r2, [pc, #96]	@ (8008df4 <radio_irq_handler+0x19c>)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	6053      	str	r3, [r2, #4]
			// read the PDU and inform the MAC that we received something
			LMIC.dataLen = readReg(FSKRegPayloadLength);
 8008d96:	2032      	movs	r0, #50	@ 0x32
 8008d98:	f7ff fb01 	bl	800839e <readReg>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	461a      	mov	r2, r3
 8008da0:	4b14      	ldr	r3, [pc, #80]	@ (8008df4 <radio_irq_handler+0x19c>)
 8008da2:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
			// now read the FIFO
			readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8008da6:	4b13      	ldr	r3, [pc, #76]	@ (8008df4 <radio_irq_handler+0x19c>)
 8008da8:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8008dac:	461a      	mov	r2, r3
 8008dae:	4913      	ldr	r1, [pc, #76]	@ (8008dfc <radio_irq_handler+0x1a4>)
 8008db0:	2000      	movs	r0, #0
 8008db2:	f7ff fb3a 	bl	800842a <readBuf>
			// read rx quality parameters
			LMIC.snr = 0; // determine snr
 8008db6:	4b0f      	ldr	r3, [pc, #60]	@ (8008df4 <radio_irq_handler+0x19c>)
 8008db8:	2200      	movs	r2, #0
 8008dba:	735a      	strb	r2, [r3, #13]
			LMIC.rssi = 0; // determine rssi
 8008dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8008df4 <radio_irq_handler+0x19c>)
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	731a      	strb	r2, [r3, #12]
 8008dc2:	e00a      	b.n	8008dda <radio_irq_handler+0x182>
		} else if (flags1 & IRQ_FSK1_TIMEOUT_MASK) {
 8008dc4:	7afb      	ldrb	r3, [r7, #11]
 8008dc6:	f003 0304 	and.w	r3, r3, #4
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d004      	beq.n	8008dd8 <radio_irq_handler+0x180>
			// indicate timeout
			LMIC.dataLen = 0;
 8008dce:	4b09      	ldr	r3, [pc, #36]	@ (8008df4 <radio_irq_handler+0x19c>)
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 8008dd6:	e000      	b.n	8008dda <radio_irq_handler+0x182>
		} else {
			while (1)
 8008dd8:	e7fe      	b.n	8008dd8 <radio_irq_handler+0x180>
				;
		}
	}
	// go from stanby to sleep
	opmode(OPMODE_SLEEP);
 8008dda:	2000      	movs	r0, #0
 8008ddc:	f7ff fb50 	bl	8008480 <opmode>
	// run os job (use preset func ptr)
	os_setCallback(&LMIC.osjob, LMIC.osjob.func);
 8008de0:	4b04      	ldr	r3, [pc, #16]	@ (8008df4 <radio_irq_handler+0x19c>)
 8008de2:	69db      	ldr	r3, [r3, #28]
 8008de4:	4619      	mov	r1, r3
 8008de6:	4806      	ldr	r0, [pc, #24]	@ (8008e00 <radio_irq_handler+0x1a8>)
 8008de8:	f7ff fa2a 	bl	8008240 <os_setCallback>
#endif /* ! CFG_TxContinuousMode */
}
 8008dec:	bf00      	nop
 8008dee:	3710      	adds	r7, #16
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	2000033c 	.word	0x2000033c
 8008df8:	080113c4 	.word	0x080113c4
 8008dfc:	20000484 	.word	0x20000484
 8008e00:	20000350 	.word	0x20000350

08008e04 <os_radio>:

void os_radio(u1_t mode)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	71fb      	strb	r3, [r7, #7]
	hal_disableIRQs();
 8008e0e:	f7fb fdb9 	bl	8004984 <hal_disableIRQs>
	switch (mode) {
 8008e12:	79fb      	ldrb	r3, [r7, #7]
 8008e14:	2b03      	cmp	r3, #3
 8008e16:	d81a      	bhi.n	8008e4e <os_radio+0x4a>
 8008e18:	a201      	add	r2, pc, #4	@ (adr r2, 8008e20 <os_radio+0x1c>)
 8008e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1e:	bf00      	nop
 8008e20:	08008e31 	.word	0x08008e31
 8008e24:	08008e39 	.word	0x08008e39
 8008e28:	08008e3f 	.word	0x08008e3f
 8008e2c:	08008e47 	.word	0x08008e47
	case RADIO_RST:
		// put radio to sleep
		opmode(OPMODE_SLEEP);
 8008e30:	2000      	movs	r0, #0
 8008e32:	f7ff fb25 	bl	8008480 <opmode>
		break;
 8008e36:	e00a      	b.n	8008e4e <os_radio+0x4a>

	case RADIO_TX:
		// transmit frame now
		starttx(); // buf=LMIC.frame, len=LMIC.dataLen
 8008e38:	f7ff fd44 	bl	80088c4 <starttx>
		break;
 8008e3c:	e007      	b.n	8008e4e <os_radio+0x4a>

	case RADIO_RX:
		// receive frame now (exactly at rxtime)
		startrx(RXMODE_SINGLE); // buf=LMIC.frame, time=LMIC.rxtime, timeout=LMIC.rxsyms
 8008e3e:	2000      	movs	r0, #0
 8008e40:	f7ff fe4a 	bl	8008ad8 <startrx>
		break;
 8008e44:	e003      	b.n	8008e4e <os_radio+0x4a>

	case RADIO_RXON:
		// start scanning for beacon now
		startrx(RXMODE_SCAN); // buf=LMIC.frame
 8008e46:	2001      	movs	r0, #1
 8008e48:	f7ff fe46 	bl	8008ad8 <startrx>
		break;
 8008e4c:	bf00      	nop
	}
	hal_enableIRQs();
 8008e4e:	f7fb fda9 	bl	80049a4 <hal_enableIRQs>
}
 8008e52:	bf00      	nop
 8008e54:	3708      	adds	r7, #8
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop

08008e5c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8008e60:	4b1b      	ldr	r3, [pc, #108]	@ (8008ed0 <MX_SPI3_Init+0x74>)
 8008e62:	4a1c      	ldr	r2, [pc, #112]	@ (8008ed4 <MX_SPI3_Init+0x78>)
 8008e64:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8008e66:	4b1a      	ldr	r3, [pc, #104]	@ (8008ed0 <MX_SPI3_Init+0x74>)
 8008e68:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8008e6c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8008e6e:	4b18      	ldr	r3, [pc, #96]	@ (8008ed0 <MX_SPI3_Init+0x74>)
 8008e70:	2200      	movs	r2, #0
 8008e72:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8008e74:	4b16      	ldr	r3, [pc, #88]	@ (8008ed0 <MX_SPI3_Init+0x74>)
 8008e76:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8008e7a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008e7c:	4b14      	ldr	r3, [pc, #80]	@ (8008ed0 <MX_SPI3_Init+0x74>)
 8008e7e:	2200      	movs	r2, #0
 8008e80:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008e82:	4b13      	ldr	r3, [pc, #76]	@ (8008ed0 <MX_SPI3_Init+0x74>)
 8008e84:	2200      	movs	r2, #0
 8008e86:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8008e88:	4b11      	ldr	r3, [pc, #68]	@ (8008ed0 <MX_SPI3_Init+0x74>)
 8008e8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008e8e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8008e90:	4b0f      	ldr	r3, [pc, #60]	@ (8008ed0 <MX_SPI3_Init+0x74>)
 8008e92:	2228      	movs	r2, #40	@ 0x28
 8008e94:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008e96:	4b0e      	ldr	r3, [pc, #56]	@ (8008ed0 <MX_SPI3_Init+0x74>)
 8008e98:	2200      	movs	r2, #0
 8008e9a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8008e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8008ed0 <MX_SPI3_Init+0x74>)
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8008ed0 <MX_SPI3_Init+0x74>)
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8008ea8:	4b09      	ldr	r3, [pc, #36]	@ (8008ed0 <MX_SPI3_Init+0x74>)
 8008eaa:	2207      	movs	r2, #7
 8008eac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008eae:	4b08      	ldr	r3, [pc, #32]	@ (8008ed0 <MX_SPI3_Init+0x74>)
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008eb4:	4b06      	ldr	r3, [pc, #24]	@ (8008ed0 <MX_SPI3_Init+0x74>)
 8008eb6:	2208      	movs	r2, #8
 8008eb8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8008eba:	4805      	ldr	r0, [pc, #20]	@ (8008ed0 <MX_SPI3_Init+0x74>)
 8008ebc:	f004 fa32 	bl	800d324 <HAL_SPI_Init>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d001      	beq.n	8008eca <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8008ec6:	f7ff f95f 	bl	8008188 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8008eca:	bf00      	nop
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	2000056c 	.word	0x2000056c
 8008ed4:	40003c00 	.word	0x40003c00

08008ed8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b08a      	sub	sp, #40	@ 0x28
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ee0:	f107 0314 	add.w	r3, r7, #20
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	601a      	str	r2, [r3, #0]
 8008ee8:	605a      	str	r2, [r3, #4]
 8008eea:	609a      	str	r2, [r3, #8]
 8008eec:	60da      	str	r2, [r3, #12]
 8008eee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a17      	ldr	r2, [pc, #92]	@ (8008f54 <HAL_SPI_MspInit+0x7c>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d127      	bne.n	8008f4a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008efa:	4b17      	ldr	r3, [pc, #92]	@ (8008f58 <HAL_SPI_MspInit+0x80>)
 8008efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008efe:	4a16      	ldr	r2, [pc, #88]	@ (8008f58 <HAL_SPI_MspInit+0x80>)
 8008f00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f04:	6593      	str	r3, [r2, #88]	@ 0x58
 8008f06:	4b14      	ldr	r3, [pc, #80]	@ (8008f58 <HAL_SPI_MspInit+0x80>)
 8008f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f0e:	613b      	str	r3, [r7, #16]
 8008f10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008f12:	4b11      	ldr	r3, [pc, #68]	@ (8008f58 <HAL_SPI_MspInit+0x80>)
 8008f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f16:	4a10      	ldr	r2, [pc, #64]	@ (8008f58 <HAL_SPI_MspInit+0x80>)
 8008f18:	f043 0302 	orr.w	r3, r3, #2
 8008f1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8008f58 <HAL_SPI_MspInit+0x80>)
 8008f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f22:	f003 0302 	and.w	r3, r3, #2
 8008f26:	60fb      	str	r3, [r7, #12]
 8008f28:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8008f2a:	2338      	movs	r3, #56	@ 0x38
 8008f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f2e:	2302      	movs	r3, #2
 8008f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f32:	2300      	movs	r3, #0
 8008f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f36:	2303      	movs	r3, #3
 8008f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008f3a:	2306      	movs	r3, #6
 8008f3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008f3e:	f107 0314 	add.w	r3, r7, #20
 8008f42:	4619      	mov	r1, r3
 8008f44:	4805      	ldr	r0, [pc, #20]	@ (8008f5c <HAL_SPI_MspInit+0x84>)
 8008f46:	f001 ffbf 	bl	800aec8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8008f4a:	bf00      	nop
 8008f4c:	3728      	adds	r7, #40	@ 0x28
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	40003c00 	.word	0x40003c00
 8008f58:	40021000 	.word	0x40021000
 8008f5c:	48000400 	.word	0x48000400

08008f60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008f66:	4b0f      	ldr	r3, [pc, #60]	@ (8008fa4 <HAL_MspInit+0x44>)
 8008f68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f6a:	4a0e      	ldr	r2, [pc, #56]	@ (8008fa4 <HAL_MspInit+0x44>)
 8008f6c:	f043 0301 	orr.w	r3, r3, #1
 8008f70:	6613      	str	r3, [r2, #96]	@ 0x60
 8008f72:	4b0c      	ldr	r3, [pc, #48]	@ (8008fa4 <HAL_MspInit+0x44>)
 8008f74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f76:	f003 0301 	and.w	r3, r3, #1
 8008f7a:	607b      	str	r3, [r7, #4]
 8008f7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008f7e:	4b09      	ldr	r3, [pc, #36]	@ (8008fa4 <HAL_MspInit+0x44>)
 8008f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f82:	4a08      	ldr	r2, [pc, #32]	@ (8008fa4 <HAL_MspInit+0x44>)
 8008f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f88:	6593      	str	r3, [r2, #88]	@ 0x58
 8008f8a:	4b06      	ldr	r3, [pc, #24]	@ (8008fa4 <HAL_MspInit+0x44>)
 8008f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f92:	603b      	str	r3, [r7, #0]
 8008f94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008f96:	bf00      	nop
 8008f98:	370c      	adds	r7, #12
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr
 8008fa2:	bf00      	nop
 8008fa4:	40021000 	.word	0x40021000

08008fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8008fac:	bf00      	nop
 8008fae:	e7fd      	b.n	8008fac <NMI_Handler+0x4>

08008fb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008fb4:	bf00      	nop
 8008fb6:	e7fd      	b.n	8008fb4 <HardFault_Handler+0x4>

08008fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008fbc:	bf00      	nop
 8008fbe:	e7fd      	b.n	8008fbc <MemManage_Handler+0x4>

08008fc0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008fc4:	bf00      	nop
 8008fc6:	e7fd      	b.n	8008fc4 <BusFault_Handler+0x4>

08008fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008fcc:	bf00      	nop
 8008fce:	e7fd      	b.n	8008fcc <UsageFault_Handler+0x4>

08008fd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008fd4:	bf00      	nop
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr

08008fde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008fde:	b480      	push	{r7}
 8008fe0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008fe2:	bf00      	nop
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr

08008fec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008fec:	b480      	push	{r7}
 8008fee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008ff0:	bf00      	nop
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr

08008ffa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008ffe:	f000 fabb 	bl	8009578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009002:	bf00      	nop
 8009004:	bd80      	pop	{r7, pc}
	...

08009008 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800900c:	4802      	ldr	r0, [pc, #8]	@ (8009018 <ADC1_IRQHandler+0x10>)
 800900e:	f000 fefa 	bl	8009e06 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8009012:	bf00      	nop
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	200000e0 	.word	0x200000e0

0800901c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8009020:	2040      	movs	r0, #64	@ 0x40
 8009022:	f002 f8d3 	bl	800b1cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIO1_Pin);
 8009026:	2080      	movs	r0, #128	@ 0x80
 8009028:	f002 f8d0 	bl	800b1cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800902c:	bf00      	nop
 800902e:	bd80      	pop	{r7, pc}

08009030 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8009034:	4802      	ldr	r0, [pc, #8]	@ (8009040 <TIM6_DAC_IRQHandler+0x10>)
 8009036:	f004 fe47 	bl	800dcc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800903a:	bf00      	nop
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop
 8009040:	200005d4 	.word	0x200005d4

08009044 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8009048:	4802      	ldr	r0, [pc, #8]	@ (8009054 <TIM7_IRQHandler+0x10>)
 800904a:	f004 fe3d 	bl	800dcc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800904e:	bf00      	nop
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	20000620 	.word	0x20000620

08009058 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009058:	b480      	push	{r7}
 800905a:	af00      	add	r7, sp, #0
	return 1;
 800905c:	2301      	movs	r3, #1
}
 800905e:	4618      	mov	r0, r3
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr

08009068 <_kill>:

int _kill(int pid, int sig)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 8009072:	f005 fe67 	bl	800ed44 <__errno>
 8009076:	4603      	mov	r3, r0
 8009078:	2216      	movs	r2, #22
 800907a:	601a      	str	r2, [r3, #0]
	return -1;
 800907c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8009080:	4618      	mov	r0, r3
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <_exit>:

void _exit(int status)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8009090:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f7ff ffe7 	bl	8009068 <_kill>
	while (1) {
 800909a:	bf00      	nop
 800909c:	e7fd      	b.n	800909a <_exit+0x12>

0800909e <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b086      	sub	sp, #24
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	60f8      	str	r0, [r7, #12]
 80090a6:	60b9      	str	r1, [r7, #8]
 80090a8:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80090aa:	2300      	movs	r3, #0
 80090ac:	617b      	str	r3, [r7, #20]
 80090ae:	e00a      	b.n	80090c6 <_read+0x28>
		*ptr++ = __io_getchar();
 80090b0:	f3af 8000 	nop.w
 80090b4:	4601      	mov	r1, r0
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	1c5a      	adds	r2, r3, #1
 80090ba:	60ba      	str	r2, [r7, #8]
 80090bc:	b2ca      	uxtb	r2, r1
 80090be:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	3301      	adds	r3, #1
 80090c4:	617b      	str	r3, [r7, #20]
 80090c6:	697a      	ldr	r2, [r7, #20]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	429a      	cmp	r2, r3
 80090cc:	dbf0      	blt.n	80090b0 <_read+0x12>
	}

	return len;
 80090ce:	687b      	ldr	r3, [r7, #4]
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3718      	adds	r7, #24
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b086      	sub	sp, #24
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80090e4:	2300      	movs	r3, #0
 80090e6:	617b      	str	r3, [r7, #20]
 80090e8:	e009      	b.n	80090fe <_write+0x26>
		__io_putchar(*ptr++);
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	1c5a      	adds	r2, r3, #1
 80090ee:	60ba      	str	r2, [r7, #8]
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	4618      	mov	r0, r3
 80090f4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	3301      	adds	r3, #1
 80090fc:	617b      	str	r3, [r7, #20]
 80090fe:	697a      	ldr	r2, [r7, #20]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	429a      	cmp	r2, r3
 8009104:	dbf1      	blt.n	80090ea <_write+0x12>
	}
	return len;
 8009106:	687b      	ldr	r3, [r7, #4]
}
 8009108:	4618      	mov	r0, r3
 800910a:	3718      	adds	r7, #24
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <_close>:

int _close(int file)
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8009118:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800911c:	4618      	mov	r0, r3
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <_fstat>:

int _fstat(int file, struct stat *st)
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009138:	605a      	str	r2, [r3, #4]
	return 0;
 800913a:	2300      	movs	r3, #0
}
 800913c:	4618      	mov	r0, r3
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <_isatty>:

int _isatty(int file)
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8009150:	2301      	movs	r3, #1
}
 8009152:	4618      	mov	r0, r3
 8009154:	370c      	adds	r7, #12
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr

0800915e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800915e:	b480      	push	{r7}
 8009160:	b085      	sub	sp, #20
 8009162:	af00      	add	r7, sp, #0
 8009164:	60f8      	str	r0, [r7, #12]
 8009166:	60b9      	str	r1, [r7, #8]
 8009168:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3714      	adds	r7, #20
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b086      	sub	sp, #24
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8009180:	4a14      	ldr	r2, [pc, #80]	@ (80091d4 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8009182:	4b15      	ldr	r3, [pc, #84]	@ (80091d8 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8009184:	1ad3      	subs	r3, r2, r3
 8009186:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 800918c:	4b13      	ldr	r3, [pc, #76]	@ (80091dc <_sbrk+0x64>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d102      	bne.n	800919a <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8009194:	4b11      	ldr	r3, [pc, #68]	@ (80091dc <_sbrk+0x64>)
 8009196:	4a12      	ldr	r2, [pc, #72]	@ (80091e0 <_sbrk+0x68>)
 8009198:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 800919a:	4b10      	ldr	r3, [pc, #64]	@ (80091dc <_sbrk+0x64>)
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4413      	add	r3, r2
 80091a2:	693a      	ldr	r2, [r7, #16]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d207      	bcs.n	80091b8 <_sbrk+0x40>
		errno = ENOMEM;
 80091a8:	f005 fdcc 	bl	800ed44 <__errno>
 80091ac:	4603      	mov	r3, r0
 80091ae:	220c      	movs	r2, #12
 80091b0:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80091b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80091b6:	e009      	b.n	80091cc <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80091b8:	4b08      	ldr	r3, [pc, #32]	@ (80091dc <_sbrk+0x64>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80091be:	4b07      	ldr	r3, [pc, #28]	@ (80091dc <_sbrk+0x64>)
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	4413      	add	r3, r2
 80091c6:	4a05      	ldr	r2, [pc, #20]	@ (80091dc <_sbrk+0x64>)
 80091c8:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80091ca:	68fb      	ldr	r3, [r7, #12]
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3718      	adds	r7, #24
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	2000c000 	.word	0x2000c000
 80091d8:	00000400 	.word	0x00000400
 80091dc:	200005d0 	.word	0x200005d0
 80091e0:	20000848 	.word	0x20000848

080091e4 <SystemInit>:
 * @brief  Setup the microcontroller system.
 * @retval None
 */

void SystemInit(void)
{
 80091e4:	b480      	push	{r7}
 80091e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 80091e8:	4b06      	ldr	r3, [pc, #24]	@ (8009204 <SystemInit+0x20>)
 80091ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091ee:	4a05      	ldr	r2, [pc, #20]	@ (8009204 <SystemInit+0x20>)
 80091f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80091f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80091f8:	bf00      	nop
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr
 8009202:	bf00      	nop
 8009204:	e000ed00 	.word	0xe000ed00

08009208 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800920e:	1d3b      	adds	r3, r7, #4
 8009210:	2200      	movs	r2, #0
 8009212:	601a      	str	r2, [r3, #0]
 8009214:	605a      	str	r2, [r3, #4]
 8009216:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8009218:	4b15      	ldr	r3, [pc, #84]	@ (8009270 <MX_TIM6_Init+0x68>)
 800921a:	4a16      	ldr	r2, [pc, #88]	@ (8009274 <MX_TIM6_Init+0x6c>)
 800921c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1222-1;
 800921e:	4b14      	ldr	r3, [pc, #80]	@ (8009270 <MX_TIM6_Init+0x68>)
 8009220:	f240 42c5 	movw	r2, #1221	@ 0x4c5
 8009224:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009226:	4b12      	ldr	r3, [pc, #72]	@ (8009270 <MX_TIM6_Init+0x68>)
 8009228:	2200      	movs	r2, #0
 800922a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65521-1;
 800922c:	4b10      	ldr	r3, [pc, #64]	@ (8009270 <MX_TIM6_Init+0x68>)
 800922e:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8009232:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009234:	4b0e      	ldr	r3, [pc, #56]	@ (8009270 <MX_TIM6_Init+0x68>)
 8009236:	2200      	movs	r2, #0
 8009238:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800923a:	480d      	ldr	r0, [pc, #52]	@ (8009270 <MX_TIM6_Init+0x68>)
 800923c:	f004 fc98 	bl	800db70 <HAL_TIM_Base_Init>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d001      	beq.n	800924a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8009246:	f7fe ff9f 	bl	8008188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800924a:	2300      	movs	r3, #0
 800924c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800924e:	2300      	movs	r3, #0
 8009250:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8009252:	1d3b      	adds	r3, r7, #4
 8009254:	4619      	mov	r1, r3
 8009256:	4806      	ldr	r0, [pc, #24]	@ (8009270 <MX_TIM6_Init+0x68>)
 8009258:	f004 fed6 	bl	800e008 <HAL_TIMEx_MasterConfigSynchronization>
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d001      	beq.n	8009266 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8009262:	f7fe ff91 	bl	8008188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8009266:	bf00      	nop
 8009268:	3710      	adds	r7, #16
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	200005d4 	.word	0x200005d4
 8009274:	40001000 	.word	0x40001000

08009278 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800927e:	1d3b      	adds	r3, r7, #4
 8009280:	2200      	movs	r2, #0
 8009282:	601a      	str	r2, [r3, #0]
 8009284:	605a      	str	r2, [r3, #4]
 8009286:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8009288:	4b15      	ldr	r3, [pc, #84]	@ (80092e0 <MX_TIM7_Init+0x68>)
 800928a:	4a16      	ldr	r2, [pc, #88]	@ (80092e4 <MX_TIM7_Init+0x6c>)
 800928c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2500-1;
 800928e:	4b14      	ldr	r3, [pc, #80]	@ (80092e0 <MX_TIM7_Init+0x68>)
 8009290:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8009294:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009296:	4b12      	ldr	r3, [pc, #72]	@ (80092e0 <MX_TIM7_Init+0x68>)
 8009298:	2200      	movs	r2, #0
 800929a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800929c:	4b10      	ldr	r3, [pc, #64]	@ (80092e0 <MX_TIM7_Init+0x68>)
 800929e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80092a2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80092a4:	4b0e      	ldr	r3, [pc, #56]	@ (80092e0 <MX_TIM7_Init+0x68>)
 80092a6:	2200      	movs	r2, #0
 80092a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80092aa:	480d      	ldr	r0, [pc, #52]	@ (80092e0 <MX_TIM7_Init+0x68>)
 80092ac:	f004 fc60 	bl	800db70 <HAL_TIM_Base_Init>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d001      	beq.n	80092ba <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80092b6:	f7fe ff67 	bl	8008188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80092ba:	2300      	movs	r3, #0
 80092bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80092be:	2300      	movs	r3, #0
 80092c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80092c2:	1d3b      	adds	r3, r7, #4
 80092c4:	4619      	mov	r1, r3
 80092c6:	4806      	ldr	r0, [pc, #24]	@ (80092e0 <MX_TIM7_Init+0x68>)
 80092c8:	f004 fe9e 	bl	800e008 <HAL_TIMEx_MasterConfigSynchronization>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d001      	beq.n	80092d6 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80092d2:	f7fe ff59 	bl	8008188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80092d6:	bf00      	nop
 80092d8:	3710      	adds	r7, #16
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	20000620 	.word	0x20000620
 80092e4:	40001400 	.word	0x40001400

080092e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a1a      	ldr	r2, [pc, #104]	@ (8009360 <HAL_TIM_Base_MspInit+0x78>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d114      	bne.n	8009324 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80092fa:	4b1a      	ldr	r3, [pc, #104]	@ (8009364 <HAL_TIM_Base_MspInit+0x7c>)
 80092fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092fe:	4a19      	ldr	r2, [pc, #100]	@ (8009364 <HAL_TIM_Base_MspInit+0x7c>)
 8009300:	f043 0310 	orr.w	r3, r3, #16
 8009304:	6593      	str	r3, [r2, #88]	@ 0x58
 8009306:	4b17      	ldr	r3, [pc, #92]	@ (8009364 <HAL_TIM_Base_MspInit+0x7c>)
 8009308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800930a:	f003 0310 	and.w	r3, r3, #16
 800930e:	60fb      	str	r3, [r7, #12]
 8009310:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8009312:	2200      	movs	r2, #0
 8009314:	2100      	movs	r1, #0
 8009316:	2036      	movs	r0, #54	@ 0x36
 8009318:	f001 fd9f 	bl	800ae5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800931c:	2036      	movs	r0, #54	@ 0x36
 800931e:	f001 fdb8 	bl	800ae92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8009322:	e018      	b.n	8009356 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a0f      	ldr	r2, [pc, #60]	@ (8009368 <HAL_TIM_Base_MspInit+0x80>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d113      	bne.n	8009356 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800932e:	4b0d      	ldr	r3, [pc, #52]	@ (8009364 <HAL_TIM_Base_MspInit+0x7c>)
 8009330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009332:	4a0c      	ldr	r2, [pc, #48]	@ (8009364 <HAL_TIM_Base_MspInit+0x7c>)
 8009334:	f043 0320 	orr.w	r3, r3, #32
 8009338:	6593      	str	r3, [r2, #88]	@ 0x58
 800933a:	4b0a      	ldr	r3, [pc, #40]	@ (8009364 <HAL_TIM_Base_MspInit+0x7c>)
 800933c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800933e:	f003 0320 	and.w	r3, r3, #32
 8009342:	60bb      	str	r3, [r7, #8]
 8009344:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8009346:	2200      	movs	r2, #0
 8009348:	2100      	movs	r1, #0
 800934a:	2037      	movs	r0, #55	@ 0x37
 800934c:	f001 fd85 	bl	800ae5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8009350:	2037      	movs	r0, #55	@ 0x37
 8009352:	f001 fd9e 	bl	800ae92 <HAL_NVIC_EnableIRQ>
}
 8009356:	bf00      	nop
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	40001000 	.word	0x40001000
 8009364:	40021000 	.word	0x40021000
 8009368:	40001400 	.word	0x40001400

0800936c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009370:	4b14      	ldr	r3, [pc, #80]	@ (80093c4 <MX_USART2_UART_Init+0x58>)
 8009372:	4a15      	ldr	r2, [pc, #84]	@ (80093c8 <MX_USART2_UART_Init+0x5c>)
 8009374:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8009376:	4b13      	ldr	r3, [pc, #76]	@ (80093c4 <MX_USART2_UART_Init+0x58>)
 8009378:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800937c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800937e:	4b11      	ldr	r3, [pc, #68]	@ (80093c4 <MX_USART2_UART_Init+0x58>)
 8009380:	2200      	movs	r2, #0
 8009382:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009384:	4b0f      	ldr	r3, [pc, #60]	@ (80093c4 <MX_USART2_UART_Init+0x58>)
 8009386:	2200      	movs	r2, #0
 8009388:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800938a:	4b0e      	ldr	r3, [pc, #56]	@ (80093c4 <MX_USART2_UART_Init+0x58>)
 800938c:	2200      	movs	r2, #0
 800938e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009390:	4b0c      	ldr	r3, [pc, #48]	@ (80093c4 <MX_USART2_UART_Init+0x58>)
 8009392:	220c      	movs	r2, #12
 8009394:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009396:	4b0b      	ldr	r3, [pc, #44]	@ (80093c4 <MX_USART2_UART_Init+0x58>)
 8009398:	2200      	movs	r2, #0
 800939a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800939c:	4b09      	ldr	r3, [pc, #36]	@ (80093c4 <MX_USART2_UART_Init+0x58>)
 800939e:	2200      	movs	r2, #0
 80093a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80093a2:	4b08      	ldr	r3, [pc, #32]	@ (80093c4 <MX_USART2_UART_Init+0x58>)
 80093a4:	2200      	movs	r2, #0
 80093a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80093a8:	4b06      	ldr	r3, [pc, #24]	@ (80093c4 <MX_USART2_UART_Init+0x58>)
 80093aa:	2200      	movs	r2, #0
 80093ac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80093ae:	4805      	ldr	r0, [pc, #20]	@ (80093c4 <MX_USART2_UART_Init+0x58>)
 80093b0:	f004 feae 	bl	800e110 <HAL_UART_Init>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d001      	beq.n	80093be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80093ba:	f7fe fee5 	bl	8008188 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80093be:	bf00      	nop
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	2000066c 	.word	0x2000066c
 80093c8:	40004400 	.word	0x40004400

080093cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b09e      	sub	sp, #120	@ 0x78
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80093d8:	2200      	movs	r2, #0
 80093da:	601a      	str	r2, [r3, #0]
 80093dc:	605a      	str	r2, [r3, #4]
 80093de:	609a      	str	r2, [r3, #8]
 80093e0:	60da      	str	r2, [r3, #12]
 80093e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80093e4:	f107 0310 	add.w	r3, r7, #16
 80093e8:	2254      	movs	r2, #84	@ 0x54
 80093ea:	2100      	movs	r1, #0
 80093ec:	4618      	mov	r0, r3
 80093ee:	f005 fca1 	bl	800ed34 <memset>
  if(uartHandle->Instance==USART2)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a1f      	ldr	r2, [pc, #124]	@ (8009474 <HAL_UART_MspInit+0xa8>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d136      	bne.n	800946a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80093fc:	2302      	movs	r3, #2
 80093fe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8009400:	2300      	movs	r3, #0
 8009402:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009404:	f107 0310 	add.w	r3, r7, #16
 8009408:	4618      	mov	r0, r3
 800940a:	f003 fca3 	bl	800cd54 <HAL_RCCEx_PeriphCLKConfig>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d001      	beq.n	8009418 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8009414:	f7fe feb8 	bl	8008188 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8009418:	4b17      	ldr	r3, [pc, #92]	@ (8009478 <HAL_UART_MspInit+0xac>)
 800941a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800941c:	4a16      	ldr	r2, [pc, #88]	@ (8009478 <HAL_UART_MspInit+0xac>)
 800941e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009422:	6593      	str	r3, [r2, #88]	@ 0x58
 8009424:	4b14      	ldr	r3, [pc, #80]	@ (8009478 <HAL_UART_MspInit+0xac>)
 8009426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800942c:	60fb      	str	r3, [r7, #12]
 800942e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009430:	4b11      	ldr	r3, [pc, #68]	@ (8009478 <HAL_UART_MspInit+0xac>)
 8009432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009434:	4a10      	ldr	r2, [pc, #64]	@ (8009478 <HAL_UART_MspInit+0xac>)
 8009436:	f043 0301 	orr.w	r3, r3, #1
 800943a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800943c:	4b0e      	ldr	r3, [pc, #56]	@ (8009478 <HAL_UART_MspInit+0xac>)
 800943e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009440:	f003 0301 	and.w	r3, r3, #1
 8009444:	60bb      	str	r3, [r7, #8]
 8009446:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009448:	230c      	movs	r3, #12
 800944a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800944c:	2302      	movs	r3, #2
 800944e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009450:	2300      	movs	r3, #0
 8009452:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009454:	2303      	movs	r3, #3
 8009456:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009458:	2307      	movs	r3, #7
 800945a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800945c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8009460:	4619      	mov	r1, r3
 8009462:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009466:	f001 fd2f 	bl	800aec8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800946a:	bf00      	nop
 800946c:	3778      	adds	r7, #120	@ 0x78
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	40004400 	.word	0x40004400
 8009478:	40021000 	.word	0x40021000

0800947c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800947c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80094b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8009480:	f7ff feb0 	bl	80091e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009484:	480c      	ldr	r0, [pc, #48]	@ (80094b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8009486:	490d      	ldr	r1, [pc, #52]	@ (80094bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8009488:	4a0d      	ldr	r2, [pc, #52]	@ (80094c0 <LoopForever+0xe>)
  movs r3, #0
 800948a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800948c:	e002      	b.n	8009494 <LoopCopyDataInit>

0800948e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800948e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009492:	3304      	adds	r3, #4

08009494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009498:	d3f9      	bcc.n	800948e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800949a:	4a0a      	ldr	r2, [pc, #40]	@ (80094c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800949c:	4c0a      	ldr	r4, [pc, #40]	@ (80094c8 <LoopForever+0x16>)
  movs r3, #0
 800949e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80094a0:	e001      	b.n	80094a6 <LoopFillZerobss>

080094a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80094a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80094a4:	3204      	adds	r2, #4

080094a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80094a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80094a8:	d3fb      	bcc.n	80094a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80094aa:	f005 fc51 	bl	800ed50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80094ae:	f7fe fd95 	bl	8007fdc <main>

080094b2 <LoopForever>:

LoopForever:
    b LoopForever
 80094b2:	e7fe      	b.n	80094b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80094b4:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80094b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80094bc:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 80094c0:	0801149c 	.word	0x0801149c
  ldr r2, =_sbss
 80094c4:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 80094c8:	20000844 	.word	0x20000844

080094cc <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80094cc:	e7fe      	b.n	80094cc <CAN1_RX0_IRQHandler>

080094ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b082      	sub	sp, #8
 80094d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80094d4:	2300      	movs	r3, #0
 80094d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80094d8:	2003      	movs	r0, #3
 80094da:	f001 fcb3 	bl	800ae44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80094de:	200f      	movs	r0, #15
 80094e0:	f000 f80e 	bl	8009500 <HAL_InitTick>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d002      	beq.n	80094f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	71fb      	strb	r3, [r7, #7]
 80094ee:	e001      	b.n	80094f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80094f0:	f7ff fd36 	bl	8008f60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80094f4:	79fb      	ldrb	r3, [r7, #7]
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3708      	adds	r7, #8
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
	...

08009500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009508:	2300      	movs	r3, #0
 800950a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800950c:	4b17      	ldr	r3, [pc, #92]	@ (800956c <HAL_InitTick+0x6c>)
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d023      	beq.n	800955c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8009514:	4b16      	ldr	r3, [pc, #88]	@ (8009570 <HAL_InitTick+0x70>)
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	4b14      	ldr	r3, [pc, #80]	@ (800956c <HAL_InitTick+0x6c>)
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	4619      	mov	r1, r3
 800951e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009522:	fbb3 f3f1 	udiv	r3, r3, r1
 8009526:	fbb2 f3f3 	udiv	r3, r2, r3
 800952a:	4618      	mov	r0, r3
 800952c:	f001 fcbf 	bl	800aeae <HAL_SYSTICK_Config>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d10f      	bne.n	8009556 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2b0f      	cmp	r3, #15
 800953a:	d809      	bhi.n	8009550 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800953c:	2200      	movs	r2, #0
 800953e:	6879      	ldr	r1, [r7, #4]
 8009540:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009544:	f001 fc89 	bl	800ae5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009548:	4a0a      	ldr	r2, [pc, #40]	@ (8009574 <HAL_InitTick+0x74>)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6013      	str	r3, [r2, #0]
 800954e:	e007      	b.n	8009560 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8009550:	2301      	movs	r3, #1
 8009552:	73fb      	strb	r3, [r7, #15]
 8009554:	e004      	b.n	8009560 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8009556:	2301      	movs	r3, #1
 8009558:	73fb      	strb	r3, [r7, #15]
 800955a:	e001      	b.n	8009560 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8009560:	7bfb      	ldrb	r3, [r7, #15]
}
 8009562:	4618      	mov	r0, r3
 8009564:	3710      	adds	r7, #16
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	20000064 	.word	0x20000064
 8009570:	2000005c 	.word	0x2000005c
 8009574:	20000060 	.word	0x20000060

08009578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009578:	b480      	push	{r7}
 800957a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800957c:	4b06      	ldr	r3, [pc, #24]	@ (8009598 <HAL_IncTick+0x20>)
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	461a      	mov	r2, r3
 8009582:	4b06      	ldr	r3, [pc, #24]	@ (800959c <HAL_IncTick+0x24>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4413      	add	r3, r2
 8009588:	4a04      	ldr	r2, [pc, #16]	@ (800959c <HAL_IncTick+0x24>)
 800958a:	6013      	str	r3, [r2, #0]
}
 800958c:	bf00      	nop
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr
 8009596:	bf00      	nop
 8009598:	20000064 	.word	0x20000064
 800959c:	200006f4 	.word	0x200006f4

080095a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80095a0:	b480      	push	{r7}
 80095a2:	af00      	add	r7, sp, #0
  return uwTick;
 80095a4:	4b03      	ldr	r3, [pc, #12]	@ (80095b4 <HAL_GetTick+0x14>)
 80095a6:	681b      	ldr	r3, [r3, #0]
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	200006f4 	.word	0x200006f4

080095b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80095c0:	f7ff ffee 	bl	80095a0 <HAL_GetTick>
 80095c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095d0:	d005      	beq.n	80095de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80095d2:	4b0a      	ldr	r3, [pc, #40]	@ (80095fc <HAL_Delay+0x44>)
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	461a      	mov	r2, r3
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	4413      	add	r3, r2
 80095dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80095de:	bf00      	nop
 80095e0:	f7ff ffde 	bl	80095a0 <HAL_GetTick>
 80095e4:	4602      	mov	r2, r0
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	1ad3      	subs	r3, r2, r3
 80095ea:	68fa      	ldr	r2, [r7, #12]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d8f7      	bhi.n	80095e0 <HAL_Delay+0x28>
  {
  }
}
 80095f0:	bf00      	nop
 80095f2:	bf00      	nop
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	20000064 	.word	0x20000064

08009600 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8009600:	b480      	push	{r7}
 8009602:	b083      	sub	sp, #12
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	689b      	ldr	r3, [r3, #8]
 800960e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	431a      	orrs	r2, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	609a      	str	r2, [r3, #8]
}
 800961a:	bf00      	nop
 800961c:	370c      	adds	r7, #12
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr

08009626 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8009626:	b480      	push	{r7}
 8009628:	b083      	sub	sp, #12
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
 800962e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	431a      	orrs	r2, r3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	609a      	str	r2, [r3, #8]
}
 8009640:	bf00      	nop
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800965c:	4618      	mov	r0, r3
 800965e:	370c      	adds	r7, #12
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr

08009668 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8009668:	b480      	push	{r7}
 800966a:	b087      	sub	sp, #28
 800966c:	af00      	add	r7, sp, #0
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	607a      	str	r2, [r7, #4]
 8009674:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	3360      	adds	r3, #96	@ 0x60
 800967a:	461a      	mov	r2, r3
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	4413      	add	r3, r2
 8009682:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	681a      	ldr	r2, [r3, #0]
 8009688:	4b08      	ldr	r3, [pc, #32]	@ (80096ac <LL_ADC_SetOffset+0x44>)
 800968a:	4013      	ands	r3, r2
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8009692:	683a      	ldr	r2, [r7, #0]
 8009694:	430a      	orrs	r2, r1
 8009696:	4313      	orrs	r3, r2
 8009698:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80096a0:	bf00      	nop
 80096a2:	371c      	adds	r7, #28
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr
 80096ac:	03fff000 	.word	0x03fff000

080096b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b085      	sub	sp, #20
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	3360      	adds	r3, #96	@ 0x60
 80096be:	461a      	mov	r2, r3
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	4413      	add	r3, r2
 80096c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3714      	adds	r7, #20
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80096dc:	b480      	push	{r7}
 80096de:	b087      	sub	sp, #28
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	60b9      	str	r1, [r7, #8]
 80096e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	3360      	adds	r3, #96	@ 0x60
 80096ec:	461a      	mov	r2, r3
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	4413      	add	r3, r2
 80096f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	431a      	orrs	r2, r3
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8009706:	bf00      	nop
 8009708:	371c      	adds	r7, #28
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr

08009712 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8009712:	b480      	push	{r7}
 8009714:	b083      	sub	sp, #12
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	68db      	ldr	r3, [r3, #12]
 800971e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009722:	2b00      	cmp	r3, #0
 8009724:	d101      	bne.n	800972a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8009726:	2301      	movs	r3, #1
 8009728:	e000      	b.n	800972c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800972a:	2300      	movs	r3, #0
}
 800972c:	4618      	mov	r0, r3
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8009738:	b480      	push	{r7}
 800973a:	b087      	sub	sp, #28
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	3330      	adds	r3, #48	@ 0x30
 8009748:	461a      	mov	r2, r3
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	0a1b      	lsrs	r3, r3, #8
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	f003 030c 	and.w	r3, r3, #12
 8009754:	4413      	add	r3, r2
 8009756:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	f003 031f 	and.w	r3, r3, #31
 8009762:	211f      	movs	r1, #31
 8009764:	fa01 f303 	lsl.w	r3, r1, r3
 8009768:	43db      	mvns	r3, r3
 800976a:	401a      	ands	r2, r3
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	0e9b      	lsrs	r3, r3, #26
 8009770:	f003 011f 	and.w	r1, r3, #31
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	f003 031f 	and.w	r3, r3, #31
 800977a:	fa01 f303 	lsl.w	r3, r1, r3
 800977e:	431a      	orrs	r2, r3
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8009784:	bf00      	nop
 8009786:	371c      	adds	r7, #28
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800979c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d101      	bne.n	80097a8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80097a4:	2301      	movs	r3, #1
 80097a6:	e000      	b.n	80097aa <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	370c      	adds	r7, #12
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr

080097b6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80097b6:	b480      	push	{r7}
 80097b8:	b087      	sub	sp, #28
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	60f8      	str	r0, [r7, #12]
 80097be:	60b9      	str	r1, [r7, #8]
 80097c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	3314      	adds	r3, #20
 80097c6:	461a      	mov	r2, r3
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	0e5b      	lsrs	r3, r3, #25
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	f003 0304 	and.w	r3, r3, #4
 80097d2:	4413      	add	r3, r2
 80097d4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	0d1b      	lsrs	r3, r3, #20
 80097de:	f003 031f 	and.w	r3, r3, #31
 80097e2:	2107      	movs	r1, #7
 80097e4:	fa01 f303 	lsl.w	r3, r1, r3
 80097e8:	43db      	mvns	r3, r3
 80097ea:	401a      	ands	r2, r3
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	0d1b      	lsrs	r3, r3, #20
 80097f0:	f003 031f 	and.w	r3, r3, #31
 80097f4:	6879      	ldr	r1, [r7, #4]
 80097f6:	fa01 f303 	lsl.w	r3, r1, r3
 80097fa:	431a      	orrs	r2, r3
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8009800:	bf00      	nop
 8009802:	371c      	adds	r7, #28
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800980c:	b480      	push	{r7}
 800980e:	b085      	sub	sp, #20
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009824:	43db      	mvns	r3, r3
 8009826:	401a      	ands	r2, r3
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f003 0318 	and.w	r3, r3, #24
 800982e:	4908      	ldr	r1, [pc, #32]	@ (8009850 <LL_ADC_SetChannelSingleDiff+0x44>)
 8009830:	40d9      	lsrs	r1, r3
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	400b      	ands	r3, r1
 8009836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800983a:	431a      	orrs	r2, r3
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8009842:	bf00      	nop
 8009844:	3714      	adds	r7, #20
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr
 800984e:	bf00      	nop
 8009850:	0007ffff 	.word	0x0007ffff

08009854 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	689b      	ldr	r3, [r3, #8]
 8009860:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8009864:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	6093      	str	r3, [r2, #8]
}
 800986c:	bf00      	nop
 800986e:	370c      	adds	r7, #12
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr

08009878 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8009878:	b480      	push	{r7}
 800987a:	b083      	sub	sp, #12
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	689b      	ldr	r3, [r3, #8]
 8009884:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009888:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800988c:	d101      	bne.n	8009892 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800988e:	2301      	movs	r3, #1
 8009890:	e000      	b.n	8009894 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8009892:	2300      	movs	r3, #0
}
 8009894:	4618      	mov	r0, r3
 8009896:	370c      	adds	r7, #12
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr

080098a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b083      	sub	sp, #12
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	689b      	ldr	r3, [r3, #8]
 80098ac:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80098b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80098b4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80098bc:	bf00      	nop
 80098be:	370c      	adds	r7, #12
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr

080098c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b083      	sub	sp, #12
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80098d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098dc:	d101      	bne.n	80098e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80098de:	2301      	movs	r3, #1
 80098e0:	e000      	b.n	80098e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	370c      	adds	r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009900:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009904:	f043 0201 	orr.w	r2, r3, #1
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800990c:	bf00      	nop
 800990e:	370c      	adds	r7, #12
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr

08009918 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8009918:	b480      	push	{r7}
 800991a:	b083      	sub	sp, #12
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009928:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800992c:	f043 0202 	orr.w	r2, r3, #2
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8009934:	bf00      	nop
 8009936:	370c      	adds	r7, #12
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	689b      	ldr	r3, [r3, #8]
 800994c:	f003 0301 	and.w	r3, r3, #1
 8009950:	2b01      	cmp	r3, #1
 8009952:	d101      	bne.n	8009958 <LL_ADC_IsEnabled+0x18>
 8009954:	2301      	movs	r3, #1
 8009956:	e000      	b.n	800995a <LL_ADC_IsEnabled+0x1a>
 8009958:	2300      	movs	r3, #0
}
 800995a:	4618      	mov	r0, r3
 800995c:	370c      	adds	r7, #12
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr

08009966 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8009966:	b480      	push	{r7}
 8009968:	b083      	sub	sp, #12
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	689b      	ldr	r3, [r3, #8]
 8009972:	f003 0302 	and.w	r3, r3, #2
 8009976:	2b02      	cmp	r3, #2
 8009978:	d101      	bne.n	800997e <LL_ADC_IsDisableOngoing+0x18>
 800997a:	2301      	movs	r3, #1
 800997c:	e000      	b.n	8009980 <LL_ADC_IsDisableOngoing+0x1a>
 800997e:	2300      	movs	r3, #0
}
 8009980:	4618      	mov	r0, r3
 8009982:	370c      	adds	r7, #12
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr

0800998c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800999c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80099a0:	f043 0204 	orr.w	r2, r3, #4
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80099a8:	bf00      	nop
 80099aa:	370c      	adds	r7, #12
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	f003 0304 	and.w	r3, r3, #4
 80099c4:	2b04      	cmp	r3, #4
 80099c6:	d101      	bne.n	80099cc <LL_ADC_REG_IsConversionOngoing+0x18>
 80099c8:	2301      	movs	r3, #1
 80099ca:	e000      	b.n	80099ce <LL_ADC_REG_IsConversionOngoing+0x1a>
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	370c      	adds	r7, #12
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr

080099da <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80099da:	b480      	push	{r7}
 80099dc:	b083      	sub	sp, #12
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	689b      	ldr	r3, [r3, #8]
 80099e6:	f003 0308 	and.w	r3, r3, #8
 80099ea:	2b08      	cmp	r3, #8
 80099ec:	d101      	bne.n	80099f2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80099ee:	2301      	movs	r3, #1
 80099f0:	e000      	b.n	80099f4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80099f2:	2300      	movs	r3, #0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	370c      	adds	r7, #12
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b088      	sub	sp, #32
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d101      	bne.n	8009a1a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8009a16:	2301      	movs	r3, #1
 8009a18:	e126      	b.n	8009c68 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	691b      	ldr	r3, [r3, #16]
 8009a1e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d109      	bne.n	8009a3c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f7f7 fa6b 	bl	8000f04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2200      	movs	r2, #0
 8009a32:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4618      	mov	r0, r3
 8009a42:	f7ff ff19 	bl	8009878 <LL_ADC_IsDeepPowerDownEnabled>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d004      	beq.n	8009a56 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4618      	mov	r0, r3
 8009a52:	f7ff feff 	bl	8009854 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7ff ff34 	bl	80098c8 <LL_ADC_IsInternalRegulatorEnabled>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d115      	bne.n	8009a92 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7ff ff18 	bl	80098a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009a70:	4b7f      	ldr	r3, [pc, #508]	@ (8009c70 <HAL_ADC_Init+0x270>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	099b      	lsrs	r3, r3, #6
 8009a76:	4a7f      	ldr	r2, [pc, #508]	@ (8009c74 <HAL_ADC_Init+0x274>)
 8009a78:	fba2 2303 	umull	r2, r3, r2, r3
 8009a7c:	099b      	lsrs	r3, r3, #6
 8009a7e:	3301      	adds	r3, #1
 8009a80:	005b      	lsls	r3, r3, #1
 8009a82:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8009a84:	e002      	b.n	8009a8c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	3b01      	subs	r3, #1
 8009a8a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d1f9      	bne.n	8009a86 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7ff ff16 	bl	80098c8 <LL_ADC_IsInternalRegulatorEnabled>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d10d      	bne.n	8009abe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009aa6:	f043 0210 	orr.w	r2, r3, #16
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ab2:	f043 0201 	orr.w	r2, r3, #1
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7ff ff76 	bl	80099b4 <LL_ADC_REG_IsConversionOngoing>
 8009ac8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ace:	f003 0310 	and.w	r3, r3, #16
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	f040 80bf 	bne.w	8009c56 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	f040 80bb 	bne.w	8009c56 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ae4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8009ae8:	f043 0202 	orr.w	r2, r3, #2
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4618      	mov	r0, r3
 8009af6:	f7ff ff23 	bl	8009940 <LL_ADC_IsEnabled>
 8009afa:	4603      	mov	r3, r0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d10b      	bne.n	8009b18 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009b00:	485d      	ldr	r0, [pc, #372]	@ (8009c78 <HAL_ADC_Init+0x278>)
 8009b02:	f7ff ff1d 	bl	8009940 <LL_ADC_IsEnabled>
 8009b06:	4603      	mov	r3, r0
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d105      	bne.n	8009b18 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	4619      	mov	r1, r3
 8009b12:	485a      	ldr	r0, [pc, #360]	@ (8009c7c <HAL_ADC_Init+0x27c>)
 8009b14:	f7ff fd74 	bl	8009600 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	7e5b      	ldrb	r3, [r3, #25]
 8009b1c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009b22:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8009b28:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8009b2e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009b36:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d106      	bne.n	8009b54 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b4a:	3b01      	subs	r3, #1
 8009b4c:	045b      	lsls	r3, r3, #17
 8009b4e:	69ba      	ldr	r2, [r7, #24]
 8009b50:	4313      	orrs	r3, r2
 8009b52:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d009      	beq.n	8009b70 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b60:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b68:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009b6a:	69ba      	ldr	r2, [r7, #24]
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	68da      	ldr	r2, [r3, #12]
 8009b76:	4b42      	ldr	r3, [pc, #264]	@ (8009c80 <HAL_ADC_Init+0x280>)
 8009b78:	4013      	ands	r3, r2
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	6812      	ldr	r2, [r2, #0]
 8009b7e:	69b9      	ldr	r1, [r7, #24]
 8009b80:	430b      	orrs	r3, r1
 8009b82:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f7ff ff26 	bl	80099da <LL_ADC_INJ_IsConversionOngoing>
 8009b8e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d13d      	bne.n	8009c12 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d13a      	bne.n	8009c12 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8009ba0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009ba8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8009baa:	4313      	orrs	r3, r2
 8009bac:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009bb8:	f023 0302 	bic.w	r3, r3, #2
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	6812      	ldr	r2, [r2, #0]
 8009bc0:	69b9      	ldr	r1, [r7, #24]
 8009bc2:	430b      	orrs	r3, r1
 8009bc4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d118      	bne.n	8009c02 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	691b      	ldr	r3, [r3, #16]
 8009bd6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009bda:	f023 0304 	bic.w	r3, r3, #4
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8009be6:	4311      	orrs	r1, r2
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8009bec:	4311      	orrs	r1, r2
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009bf2:	430a      	orrs	r2, r1
 8009bf4:	431a      	orrs	r2, r3
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f042 0201 	orr.w	r2, r2, #1
 8009bfe:	611a      	str	r2, [r3, #16]
 8009c00:	e007      	b.n	8009c12 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	691a      	ldr	r2, [r3, #16]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f022 0201 	bic.w	r2, r2, #1
 8009c10:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	691b      	ldr	r3, [r3, #16]
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d10c      	bne.n	8009c34 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c20:	f023 010f 	bic.w	r1, r3, #15
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	69db      	ldr	r3, [r3, #28]
 8009c28:	1e5a      	subs	r2, r3, #1
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	430a      	orrs	r2, r1
 8009c30:	631a      	str	r2, [r3, #48]	@ 0x30
 8009c32:	e007      	b.n	8009c44 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f022 020f 	bic.w	r2, r2, #15
 8009c42:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c48:	f023 0303 	bic.w	r3, r3, #3
 8009c4c:	f043 0201 	orr.w	r2, r3, #1
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	655a      	str	r2, [r3, #84]	@ 0x54
 8009c54:	e007      	b.n	8009c66 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c5a:	f043 0210 	orr.w	r2, r3, #16
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8009c62:	2301      	movs	r3, #1
 8009c64:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8009c66:	7ffb      	ldrb	r3, [r7, #31]
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3720      	adds	r7, #32
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}
 8009c70:	2000005c 	.word	0x2000005c
 8009c74:	053e2d63 	.word	0x053e2d63
 8009c78:	50040000 	.word	0x50040000
 8009c7c:	50040300 	.word	0x50040300
 8009c80:	fff0c007 	.word	0xfff0c007

08009c84 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7ff fe8f 	bl	80099b4 <LL_ADC_REG_IsConversionOngoing>
 8009c96:	4603      	mov	r3, r0
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	f040 80a0 	bne.w	8009dde <HAL_ADC_Start_IT+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d101      	bne.n	8009cac <HAL_ADC_Start_IT+0x28>
 8009ca8:	2302      	movs	r3, #2
 8009caa:	e09b      	b.n	8009de4 <HAL_ADC_Start_IT+0x160>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 fe51 	bl	800a95c <ADC_Enable>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8009cbe:	7bfb      	ldrb	r3, [r7, #15]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f040 8087 	bne.w	8009dd4 <HAL_ADC_Start_IT+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cca:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009cce:	f023 0301 	bic.w	r3, r3, #1
 8009cd2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d006      	beq.n	8009cf4 <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cea:	f023 0206 	bic.w	r2, r3, #6
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	659a      	str	r2, [r3, #88]	@ 0x58
 8009cf2:	e002      	b.n	8009cfa <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	221c      	movs	r2, #28
 8009d00:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	685a      	ldr	r2, [r3, #4]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f022 021c 	bic.w	r2, r2, #28
 8009d18:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	695b      	ldr	r3, [r3, #20]
 8009d1e:	2b08      	cmp	r3, #8
 8009d20:	d108      	bne.n	8009d34 <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	685a      	ldr	r2, [r3, #4]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f042 0208 	orr.w	r2, r2, #8
 8009d30:	605a      	str	r2, [r3, #4]
          break;
 8009d32:	e008      	b.n	8009d46 <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	685a      	ldr	r2, [r3, #4]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f042 0204 	orr.w	r2, r2, #4
 8009d42:	605a      	str	r2, [r3, #4]
          break;
 8009d44:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d107      	bne.n	8009d5e <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	685a      	ldr	r2, [r3, #4]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f042 0210 	orr.w	r2, r2, #16
 8009d5c:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	68db      	ldr	r3, [r3, #12]
 8009d64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d02d      	beq.n	8009dc8 <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d70:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8009d74:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	695b      	ldr	r3, [r3, #20]
 8009d80:	2b08      	cmp	r3, #8
 8009d82:	d110      	bne.n	8009da6 <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	685a      	ldr	r2, [r3, #4]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f022 0220 	bic.w	r2, r2, #32
 8009d92:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	685a      	ldr	r2, [r3, #4]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009da2:	605a      	str	r2, [r3, #4]
            break;
 8009da4:	e010      	b.n	8009dc8 <HAL_ADC_Start_IT+0x144>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	685a      	ldr	r2, [r3, #4]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009db4:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	685a      	ldr	r2, [r3, #4]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f042 0220 	orr.w	r2, r2, #32
 8009dc4:	605a      	str	r2, [r3, #4]
            break;
 8009dc6:	bf00      	nop
        }
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f7ff fddd 	bl	800998c <LL_ADC_REG_StartConversion>
 8009dd2:	e006      	b.n	8009de2 <HAL_ADC_Start_IT+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8009ddc:	e001      	b.n	8009de2 <HAL_ADC_Start_IT+0x15e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009dde:	2302      	movs	r3, #2
 8009de0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8009de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	370c      	adds	r7, #12
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr

08009e06 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b088      	sub	sp, #32
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8009e0e:	2300      	movs	r3, #0
 8009e10:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8009e22:	69bb      	ldr	r3, [r7, #24]
 8009e24:	f003 0302 	and.w	r3, r3, #2
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d017      	beq.n	8009e5c <HAL_ADC_IRQHandler+0x56>
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	f003 0302 	and.w	r3, r3, #2
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d012      	beq.n	8009e5c <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e3a:	f003 0310 	and.w	r3, r3, #16
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d105      	bne.n	8009e4e <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e46:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 ff1e 	bl	800ac90 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2202      	movs	r2, #2
 8009e5a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009e5c:	69bb      	ldr	r3, [r7, #24]
 8009e5e:	f003 0304 	and.w	r3, r3, #4
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d004      	beq.n	8009e70 <HAL_ADC_IRQHandler+0x6a>
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	f003 0304 	and.w	r3, r3, #4
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d109      	bne.n	8009e84 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009e70:	69bb      	ldr	r3, [r7, #24]
 8009e72:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d05e      	beq.n	8009f38 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	f003 0308 	and.w	r3, r3, #8
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d059      	beq.n	8009f38 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e88:	f003 0310 	and.w	r3, r3, #16
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d105      	bne.n	8009e9c <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e94:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7ff fc36 	bl	8009712 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d03e      	beq.n	8009f2a <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	68db      	ldr	r3, [r3, #12]
 8009eb2:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d135      	bne.n	8009f2a <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f003 0308 	and.w	r3, r3, #8
 8009ec8:	2b08      	cmp	r3, #8
 8009eca:	d12e      	bne.n	8009f2a <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f7ff fd6f 	bl	80099b4 <LL_ADC_REG_IsConversionOngoing>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d11a      	bne.n	8009f12 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	685a      	ldr	r2, [r3, #4]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f022 020c 	bic.w	r2, r2, #12
 8009eea:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ef0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009efc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d112      	bne.n	8009f2a <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f08:	f043 0201 	orr.w	r2, r3, #1
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	655a      	str	r2, [r3, #84]	@ 0x54
 8009f10:	e00b      	b.n	8009f2a <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f16:	f043 0210 	orr.w	r2, r3, #16
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f22:	f043 0201 	orr.w	r2, r3, #1
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f7fe f908 	bl	8008140 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	220c      	movs	r2, #12
 8009f36:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8009f38:	69bb      	ldr	r3, [r7, #24]
 8009f3a:	f003 0320 	and.w	r3, r3, #32
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d004      	beq.n	8009f4c <HAL_ADC_IRQHandler+0x146>
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	f003 0320 	and.w	r3, r3, #32
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d109      	bne.n	8009f60 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8009f4c:	69bb      	ldr	r3, [r7, #24]
 8009f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d072      	beq.n	800a03c <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d06d      	beq.n	800a03c <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f64:	f003 0310 	and.w	r3, r3, #16
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d105      	bne.n	8009f78 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f70:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f7ff fc07 	bl	8009790 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8009f82:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f7ff fbc2 	bl	8009712 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009f8e:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	68db      	ldr	r3, [r3, #12]
 8009f96:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d047      	beq.n	800a02e <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d007      	beq.n	8009fb8 <HAL_ADC_IRQHandler+0x1b2>
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d03f      	beq.n	800a02e <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d13a      	bne.n	800a02e <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fc2:	2b40      	cmp	r3, #64	@ 0x40
 8009fc4:	d133      	bne.n	800a02e <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d12e      	bne.n	800a02e <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f7ff fd00 	bl	80099da <LL_ADC_INJ_IsConversionOngoing>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d11a      	bne.n	800a016 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	685a      	ldr	r2, [r3, #4]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8009fee:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ff4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a004:	2b00      	cmp	r3, #0
 800a006:	d112      	bne.n	800a02e <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a00c:	f043 0201 	orr.w	r2, r3, #1
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	655a      	str	r2, [r3, #84]	@ 0x54
 800a014:	e00b      	b.n	800a02e <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a01a:	f043 0210 	orr.w	r2, r3, #16
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a026:	f043 0201 	orr.w	r2, r3, #1
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 fe06 	bl	800ac40 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	2260      	movs	r2, #96	@ 0x60
 800a03a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800a03c:	69bb      	ldr	r3, [r7, #24]
 800a03e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a042:	2b00      	cmp	r3, #0
 800a044:	d011      	beq.n	800a06a <HAL_ADC_IRQHandler+0x264>
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d00c      	beq.n	800a06a <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a054:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 f886 	bl	800a16e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	2280      	movs	r2, #128	@ 0x80
 800a068:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a070:	2b00      	cmp	r3, #0
 800a072:	d012      	beq.n	800a09a <HAL_ADC_IRQHandler+0x294>
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d00d      	beq.n	800a09a <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a082:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 fdec 	bl	800ac68 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a098:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800a09a:	69bb      	ldr	r3, [r7, #24]
 800a09c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d012      	beq.n	800a0ca <HAL_ADC_IRQHandler+0x2c4>
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d00d      	beq.n	800a0ca <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0b2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 fdde 	bl	800ac7c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a0c8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800a0ca:	69bb      	ldr	r3, [r7, #24]
 800a0cc:	f003 0310 	and.w	r3, r3, #16
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d02a      	beq.n	800a12a <HAL_ADC_IRQHandler+0x324>
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	f003 0310 	and.w	r3, r3, #16
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d025      	beq.n	800a12a <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d102      	bne.n	800a0ec <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	61fb      	str	r3, [r7, #28]
 800a0ea:	e008      	b.n	800a0fe <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	f003 0301 	and.w	r3, r3, #1
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d001      	beq.n	800a0fe <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 800a0fe:	69fb      	ldr	r3, [r7, #28]
 800a100:	2b01      	cmp	r3, #1
 800a102:	d10e      	bne.n	800a122 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a108:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a114:	f043 0202 	orr.w	r2, r3, #2
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f000 f830 	bl	800a182 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	2210      	movs	r2, #16
 800a128:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800a12a:	69bb      	ldr	r3, [r7, #24]
 800a12c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a130:	2b00      	cmp	r3, #0
 800a132:	d018      	beq.n	800a166 <HAL_ADC_IRQHandler+0x360>
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d013      	beq.n	800a166 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a142:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a14e:	f043 0208 	orr.w	r2, r3, #8
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a15e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 fd77 	bl	800ac54 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800a166:	bf00      	nop
 800a168:	3720      	adds	r7, #32
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}

0800a16e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800a16e:	b480      	push	{r7}
 800a170:	b083      	sub	sp, #12
 800a172:	af00      	add	r7, sp, #0
 800a174:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800a176:	bf00      	nop
 800a178:	370c      	adds	r7, #12
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr

0800a182 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a182:	b480      	push	{r7}
 800a184:	b083      	sub	sp, #12
 800a186:	af00      	add	r7, sp, #0
 800a188:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800a18a:	bf00      	nop
 800a18c:	370c      	adds	r7, #12
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr
	...

0800a198 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b0b6      	sub	sp, #216	@ 0xd8
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	d101      	bne.n	800a1ba <HAL_ADC_ConfigChannel+0x22>
 800a1b6:	2302      	movs	r3, #2
 800a1b8:	e3bb      	b.n	800a932 <HAL_ADC_ConfigChannel+0x79a>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f7ff fbf4 	bl	80099b4 <LL_ADC_REG_IsConversionOngoing>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	f040 83a0 	bne.w	800a914 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	2b05      	cmp	r3, #5
 800a1e2:	d824      	bhi.n	800a22e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	3b02      	subs	r3, #2
 800a1ea:	2b03      	cmp	r3, #3
 800a1ec:	d81b      	bhi.n	800a226 <HAL_ADC_ConfigChannel+0x8e>
 800a1ee:	a201      	add	r2, pc, #4	@ (adr r2, 800a1f4 <HAL_ADC_ConfigChannel+0x5c>)
 800a1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f4:	0800a205 	.word	0x0800a205
 800a1f8:	0800a20d 	.word	0x0800a20d
 800a1fc:	0800a215 	.word	0x0800a215
 800a200:	0800a21d 	.word	0x0800a21d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800a204:	230c      	movs	r3, #12
 800a206:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800a20a:	e010      	b.n	800a22e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800a20c:	2312      	movs	r3, #18
 800a20e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800a212:	e00c      	b.n	800a22e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800a214:	2318      	movs	r3, #24
 800a216:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800a21a:	e008      	b.n	800a22e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800a21c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a220:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800a224:	e003      	b.n	800a22e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800a226:	2306      	movs	r3, #6
 800a228:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800a22c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6818      	ldr	r0, [r3, #0]
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	461a      	mov	r2, r3
 800a238:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800a23c:	f7ff fa7c 	bl	8009738 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4618      	mov	r0, r3
 800a246:	f7ff fbb5 	bl	80099b4 <LL_ADC_REG_IsConversionOngoing>
 800a24a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4618      	mov	r0, r3
 800a254:	f7ff fbc1 	bl	80099da <LL_ADC_INJ_IsConversionOngoing>
 800a258:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a25c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a260:	2b00      	cmp	r3, #0
 800a262:	f040 81a4 	bne.w	800a5ae <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a266:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	f040 819f 	bne.w	800a5ae <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6818      	ldr	r0, [r3, #0]
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	6819      	ldr	r1, [r3, #0]
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	461a      	mov	r2, r3
 800a27e:	f7ff fa9a 	bl	80097b6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	695a      	ldr	r2, [r3, #20]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	68db      	ldr	r3, [r3, #12]
 800a28c:	08db      	lsrs	r3, r3, #3
 800a28e:	f003 0303 	and.w	r3, r3, #3
 800a292:	005b      	lsls	r3, r3, #1
 800a294:	fa02 f303 	lsl.w	r3, r2, r3
 800a298:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	691b      	ldr	r3, [r3, #16]
 800a2a0:	2b04      	cmp	r3, #4
 800a2a2:	d00a      	beq.n	800a2ba <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6818      	ldr	r0, [r3, #0]
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	6919      	ldr	r1, [r3, #16]
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a2b4:	f7ff f9d8 	bl	8009668 <LL_ADC_SetOffset>
 800a2b8:	e179      	b.n	800a5ae <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	2100      	movs	r1, #0
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7ff f9f5 	bl	80096b0 <LL_ADC_GetOffsetChannel>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d10a      	bne.n	800a2e6 <HAL_ADC_ConfigChannel+0x14e>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	2100      	movs	r1, #0
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7ff f9ea 	bl	80096b0 <LL_ADC_GetOffsetChannel>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	0e9b      	lsrs	r3, r3, #26
 800a2e0:	f003 021f 	and.w	r2, r3, #31
 800a2e4:	e01e      	b.n	800a324 <HAL_ADC_ConfigChannel+0x18c>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	2100      	movs	r1, #0
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7ff f9df 	bl	80096b0 <LL_ADC_GetOffsetChannel>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a2f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a2fc:	fa93 f3a3 	rbit	r3, r3
 800a300:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800a304:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a308:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800a30c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a310:	2b00      	cmp	r3, #0
 800a312:	d101      	bne.n	800a318 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800a314:	2320      	movs	r3, #32
 800a316:	e004      	b.n	800a322 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800a318:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a31c:	fab3 f383 	clz	r3, r3
 800a320:	b2db      	uxtb	r3, r3
 800a322:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d105      	bne.n	800a33c <HAL_ADC_ConfigChannel+0x1a4>
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	0e9b      	lsrs	r3, r3, #26
 800a336:	f003 031f 	and.w	r3, r3, #31
 800a33a:	e018      	b.n	800a36e <HAL_ADC_ConfigChannel+0x1d6>
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a344:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a348:	fa93 f3a3 	rbit	r3, r3
 800a34c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800a350:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a354:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800a358:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d101      	bne.n	800a364 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800a360:	2320      	movs	r3, #32
 800a362:	e004      	b.n	800a36e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800a364:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a368:	fab3 f383 	clz	r3, r3
 800a36c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800a36e:	429a      	cmp	r2, r3
 800a370:	d106      	bne.n	800a380 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	2200      	movs	r2, #0
 800a378:	2100      	movs	r1, #0
 800a37a:	4618      	mov	r0, r3
 800a37c:	f7ff f9ae 	bl	80096dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	2101      	movs	r1, #1
 800a386:	4618      	mov	r0, r3
 800a388:	f7ff f992 	bl	80096b0 <LL_ADC_GetOffsetChannel>
 800a38c:	4603      	mov	r3, r0
 800a38e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a392:	2b00      	cmp	r3, #0
 800a394:	d10a      	bne.n	800a3ac <HAL_ADC_ConfigChannel+0x214>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	2101      	movs	r1, #1
 800a39c:	4618      	mov	r0, r3
 800a39e:	f7ff f987 	bl	80096b0 <LL_ADC_GetOffsetChannel>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	0e9b      	lsrs	r3, r3, #26
 800a3a6:	f003 021f 	and.w	r2, r3, #31
 800a3aa:	e01e      	b.n	800a3ea <HAL_ADC_ConfigChannel+0x252>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	2101      	movs	r1, #1
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f7ff f97c 	bl	80096b0 <LL_ADC_GetOffsetChannel>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a3c2:	fa93 f3a3 	rbit	r3, r3
 800a3c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800a3ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a3ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800a3d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d101      	bne.n	800a3de <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800a3da:	2320      	movs	r3, #32
 800a3dc:	e004      	b.n	800a3e8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800a3de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a3e2:	fab3 f383 	clz	r3, r3
 800a3e6:	b2db      	uxtb	r3, r3
 800a3e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d105      	bne.n	800a402 <HAL_ADC_ConfigChannel+0x26a>
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	0e9b      	lsrs	r3, r3, #26
 800a3fc:	f003 031f 	and.w	r3, r3, #31
 800a400:	e018      	b.n	800a434 <HAL_ADC_ConfigChannel+0x29c>
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a40a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a40e:	fa93 f3a3 	rbit	r3, r3
 800a412:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800a416:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a41a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800a41e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a422:	2b00      	cmp	r3, #0
 800a424:	d101      	bne.n	800a42a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800a426:	2320      	movs	r3, #32
 800a428:	e004      	b.n	800a434 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800a42a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a42e:	fab3 f383 	clz	r3, r3
 800a432:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800a434:	429a      	cmp	r2, r3
 800a436:	d106      	bne.n	800a446 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	2200      	movs	r2, #0
 800a43e:	2101      	movs	r1, #1
 800a440:	4618      	mov	r0, r3
 800a442:	f7ff f94b 	bl	80096dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	2102      	movs	r1, #2
 800a44c:	4618      	mov	r0, r3
 800a44e:	f7ff f92f 	bl	80096b0 <LL_ADC_GetOffsetChannel>
 800a452:	4603      	mov	r3, r0
 800a454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d10a      	bne.n	800a472 <HAL_ADC_ConfigChannel+0x2da>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	2102      	movs	r1, #2
 800a462:	4618      	mov	r0, r3
 800a464:	f7ff f924 	bl	80096b0 <LL_ADC_GetOffsetChannel>
 800a468:	4603      	mov	r3, r0
 800a46a:	0e9b      	lsrs	r3, r3, #26
 800a46c:	f003 021f 	and.w	r2, r3, #31
 800a470:	e01e      	b.n	800a4b0 <HAL_ADC_ConfigChannel+0x318>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	2102      	movs	r1, #2
 800a478:	4618      	mov	r0, r3
 800a47a:	f7ff f919 	bl	80096b0 <LL_ADC_GetOffsetChannel>
 800a47e:	4603      	mov	r3, r0
 800a480:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a484:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a488:	fa93 f3a3 	rbit	r3, r3
 800a48c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800a490:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a494:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800a498:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d101      	bne.n	800a4a4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800a4a0:	2320      	movs	r3, #32
 800a4a2:	e004      	b.n	800a4ae <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800a4a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a4a8:	fab3 f383 	clz	r3, r3
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d105      	bne.n	800a4c8 <HAL_ADC_ConfigChannel+0x330>
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	0e9b      	lsrs	r3, r3, #26
 800a4c2:	f003 031f 	and.w	r3, r3, #31
 800a4c6:	e014      	b.n	800a4f2 <HAL_ADC_ConfigChannel+0x35a>
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a4ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a4d0:	fa93 f3a3 	rbit	r3, r3
 800a4d4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800a4d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a4d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800a4dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d101      	bne.n	800a4e8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800a4e4:	2320      	movs	r3, #32
 800a4e6:	e004      	b.n	800a4f2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800a4e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a4ec:	fab3 f383 	clz	r3, r3
 800a4f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d106      	bne.n	800a504 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	2102      	movs	r1, #2
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7ff f8ec 	bl	80096dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	2103      	movs	r1, #3
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7ff f8d0 	bl	80096b0 <LL_ADC_GetOffsetChannel>
 800a510:	4603      	mov	r3, r0
 800a512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a516:	2b00      	cmp	r3, #0
 800a518:	d10a      	bne.n	800a530 <HAL_ADC_ConfigChannel+0x398>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	2103      	movs	r1, #3
 800a520:	4618      	mov	r0, r3
 800a522:	f7ff f8c5 	bl	80096b0 <LL_ADC_GetOffsetChannel>
 800a526:	4603      	mov	r3, r0
 800a528:	0e9b      	lsrs	r3, r3, #26
 800a52a:	f003 021f 	and.w	r2, r3, #31
 800a52e:	e017      	b.n	800a560 <HAL_ADC_ConfigChannel+0x3c8>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	2103      	movs	r1, #3
 800a536:	4618      	mov	r0, r3
 800a538:	f7ff f8ba 	bl	80096b0 <LL_ADC_GetOffsetChannel>
 800a53c:	4603      	mov	r3, r0
 800a53e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a540:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a542:	fa93 f3a3 	rbit	r3, r3
 800a546:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800a548:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a54a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800a54c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d101      	bne.n	800a556 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800a552:	2320      	movs	r3, #32
 800a554:	e003      	b.n	800a55e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800a556:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a558:	fab3 f383 	clz	r3, r3
 800a55c:	b2db      	uxtb	r3, r3
 800a55e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d105      	bne.n	800a578 <HAL_ADC_ConfigChannel+0x3e0>
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	0e9b      	lsrs	r3, r3, #26
 800a572:	f003 031f 	and.w	r3, r3, #31
 800a576:	e011      	b.n	800a59c <HAL_ADC_ConfigChannel+0x404>
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a57e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a580:	fa93 f3a3 	rbit	r3, r3
 800a584:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800a586:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a588:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800a58a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d101      	bne.n	800a594 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800a590:	2320      	movs	r3, #32
 800a592:	e003      	b.n	800a59c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800a594:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a596:	fab3 f383 	clz	r3, r3
 800a59a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d106      	bne.n	800a5ae <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	2103      	movs	r1, #3
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f7ff f897 	bl	80096dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7ff f9c4 	bl	8009940 <LL_ADC_IsEnabled>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	f040 8140 	bne.w	800a840 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6818      	ldr	r0, [r3, #0]
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	6819      	ldr	r1, [r3, #0]
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	68db      	ldr	r3, [r3, #12]
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	f7ff f91d 	bl	800980c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	4a8f      	ldr	r2, [pc, #572]	@ (800a814 <HAL_ADC_ConfigChannel+0x67c>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	f040 8131 	bne.w	800a840 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d10b      	bne.n	800a606 <HAL_ADC_ConfigChannel+0x46e>
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	0e9b      	lsrs	r3, r3, #26
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	f003 031f 	and.w	r3, r3, #31
 800a5fa:	2b09      	cmp	r3, #9
 800a5fc:	bf94      	ite	ls
 800a5fe:	2301      	movls	r3, #1
 800a600:	2300      	movhi	r3, #0
 800a602:	b2db      	uxtb	r3, r3
 800a604:	e019      	b.n	800a63a <HAL_ADC_ConfigChannel+0x4a2>
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a60c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a60e:	fa93 f3a3 	rbit	r3, r3
 800a612:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800a614:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a616:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800a618:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d101      	bne.n	800a622 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800a61e:	2320      	movs	r3, #32
 800a620:	e003      	b.n	800a62a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800a622:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a624:	fab3 f383 	clz	r3, r3
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	3301      	adds	r3, #1
 800a62c:	f003 031f 	and.w	r3, r3, #31
 800a630:	2b09      	cmp	r3, #9
 800a632:	bf94      	ite	ls
 800a634:	2301      	movls	r3, #1
 800a636:	2300      	movhi	r3, #0
 800a638:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d079      	beq.n	800a732 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a646:	2b00      	cmp	r3, #0
 800a648:	d107      	bne.n	800a65a <HAL_ADC_ConfigChannel+0x4c2>
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	0e9b      	lsrs	r3, r3, #26
 800a650:	3301      	adds	r3, #1
 800a652:	069b      	lsls	r3, r3, #26
 800a654:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a658:	e015      	b.n	800a686 <HAL_ADC_ConfigChannel+0x4ee>
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a660:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a662:	fa93 f3a3 	rbit	r3, r3
 800a666:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800a668:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a66a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800a66c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d101      	bne.n	800a676 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800a672:	2320      	movs	r3, #32
 800a674:	e003      	b.n	800a67e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800a676:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a678:	fab3 f383 	clz	r3, r3
 800a67c:	b2db      	uxtb	r3, r3
 800a67e:	3301      	adds	r3, #1
 800a680:	069b      	lsls	r3, r3, #26
 800a682:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d109      	bne.n	800a6a6 <HAL_ADC_ConfigChannel+0x50e>
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	0e9b      	lsrs	r3, r3, #26
 800a698:	3301      	adds	r3, #1
 800a69a:	f003 031f 	and.w	r3, r3, #31
 800a69e:	2101      	movs	r1, #1
 800a6a0:	fa01 f303 	lsl.w	r3, r1, r3
 800a6a4:	e017      	b.n	800a6d6 <HAL_ADC_ConfigChannel+0x53e>
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a6ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6ae:	fa93 f3a3 	rbit	r3, r3
 800a6b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800a6b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6b6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800a6b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d101      	bne.n	800a6c2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800a6be:	2320      	movs	r3, #32
 800a6c0:	e003      	b.n	800a6ca <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800a6c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6c4:	fab3 f383 	clz	r3, r3
 800a6c8:	b2db      	uxtb	r3, r3
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	f003 031f 	and.w	r3, r3, #31
 800a6d0:	2101      	movs	r1, #1
 800a6d2:	fa01 f303 	lsl.w	r3, r1, r3
 800a6d6:	ea42 0103 	orr.w	r1, r2, r3
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d10a      	bne.n	800a6fc <HAL_ADC_ConfigChannel+0x564>
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	0e9b      	lsrs	r3, r3, #26
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	f003 021f 	and.w	r2, r3, #31
 800a6f2:	4613      	mov	r3, r2
 800a6f4:	005b      	lsls	r3, r3, #1
 800a6f6:	4413      	add	r3, r2
 800a6f8:	051b      	lsls	r3, r3, #20
 800a6fa:	e018      	b.n	800a72e <HAL_ADC_ConfigChannel+0x596>
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a704:	fa93 f3a3 	rbit	r3, r3
 800a708:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800a70a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a70c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800a70e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a710:	2b00      	cmp	r3, #0
 800a712:	d101      	bne.n	800a718 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800a714:	2320      	movs	r3, #32
 800a716:	e003      	b.n	800a720 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800a718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a71a:	fab3 f383 	clz	r3, r3
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	3301      	adds	r3, #1
 800a722:	f003 021f 	and.w	r2, r3, #31
 800a726:	4613      	mov	r3, r2
 800a728:	005b      	lsls	r3, r3, #1
 800a72a:	4413      	add	r3, r2
 800a72c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a72e:	430b      	orrs	r3, r1
 800a730:	e081      	b.n	800a836 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d107      	bne.n	800a74e <HAL_ADC_ConfigChannel+0x5b6>
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	0e9b      	lsrs	r3, r3, #26
 800a744:	3301      	adds	r3, #1
 800a746:	069b      	lsls	r3, r3, #26
 800a748:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a74c:	e015      	b.n	800a77a <HAL_ADC_ConfigChannel+0x5e2>
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a756:	fa93 f3a3 	rbit	r3, r3
 800a75a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800a75c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a75e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800a760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a762:	2b00      	cmp	r3, #0
 800a764:	d101      	bne.n	800a76a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800a766:	2320      	movs	r3, #32
 800a768:	e003      	b.n	800a772 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800a76a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a76c:	fab3 f383 	clz	r3, r3
 800a770:	b2db      	uxtb	r3, r3
 800a772:	3301      	adds	r3, #1
 800a774:	069b      	lsls	r3, r3, #26
 800a776:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a782:	2b00      	cmp	r3, #0
 800a784:	d109      	bne.n	800a79a <HAL_ADC_ConfigChannel+0x602>
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	0e9b      	lsrs	r3, r3, #26
 800a78c:	3301      	adds	r3, #1
 800a78e:	f003 031f 	and.w	r3, r3, #31
 800a792:	2101      	movs	r1, #1
 800a794:	fa01 f303 	lsl.w	r3, r1, r3
 800a798:	e017      	b.n	800a7ca <HAL_ADC_ConfigChannel+0x632>
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a7a0:	69fb      	ldr	r3, [r7, #28]
 800a7a2:	fa93 f3a3 	rbit	r3, r3
 800a7a6:	61bb      	str	r3, [r7, #24]
  return result;
 800a7a8:	69bb      	ldr	r3, [r7, #24]
 800a7aa:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800a7ac:	6a3b      	ldr	r3, [r7, #32]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d101      	bne.n	800a7b6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800a7b2:	2320      	movs	r3, #32
 800a7b4:	e003      	b.n	800a7be <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800a7b6:	6a3b      	ldr	r3, [r7, #32]
 800a7b8:	fab3 f383 	clz	r3, r3
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	3301      	adds	r3, #1
 800a7c0:	f003 031f 	and.w	r3, r3, #31
 800a7c4:	2101      	movs	r1, #1
 800a7c6:	fa01 f303 	lsl.w	r3, r1, r3
 800a7ca:	ea42 0103 	orr.w	r1, r2, r3
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d10d      	bne.n	800a7f6 <HAL_ADC_ConfigChannel+0x65e>
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	0e9b      	lsrs	r3, r3, #26
 800a7e0:	3301      	adds	r3, #1
 800a7e2:	f003 021f 	and.w	r2, r3, #31
 800a7e6:	4613      	mov	r3, r2
 800a7e8:	005b      	lsls	r3, r3, #1
 800a7ea:	4413      	add	r3, r2
 800a7ec:	3b1e      	subs	r3, #30
 800a7ee:	051b      	lsls	r3, r3, #20
 800a7f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a7f4:	e01e      	b.n	800a834 <HAL_ADC_ConfigChannel+0x69c>
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	fa93 f3a3 	rbit	r3, r3
 800a802:	60fb      	str	r3, [r7, #12]
  return result;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d104      	bne.n	800a818 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800a80e:	2320      	movs	r3, #32
 800a810:	e006      	b.n	800a820 <HAL_ADC_ConfigChannel+0x688>
 800a812:	bf00      	nop
 800a814:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	fab3 f383 	clz	r3, r3
 800a81e:	b2db      	uxtb	r3, r3
 800a820:	3301      	adds	r3, #1
 800a822:	f003 021f 	and.w	r2, r3, #31
 800a826:	4613      	mov	r3, r2
 800a828:	005b      	lsls	r3, r3, #1
 800a82a:	4413      	add	r3, r2
 800a82c:	3b1e      	subs	r3, #30
 800a82e:	051b      	lsls	r3, r3, #20
 800a830:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a834:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800a836:	683a      	ldr	r2, [r7, #0]
 800a838:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a83a:	4619      	mov	r1, r3
 800a83c:	f7fe ffbb 	bl	80097b6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	4b3d      	ldr	r3, [pc, #244]	@ (800a93c <HAL_ADC_ConfigChannel+0x7a4>)
 800a846:	4013      	ands	r3, r2
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d06c      	beq.n	800a926 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a84c:	483c      	ldr	r0, [pc, #240]	@ (800a940 <HAL_ADC_ConfigChannel+0x7a8>)
 800a84e:	f7fe fefd 	bl	800964c <LL_ADC_GetCommonPathInternalCh>
 800a852:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4a3a      	ldr	r2, [pc, #232]	@ (800a944 <HAL_ADC_ConfigChannel+0x7ac>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d127      	bne.n	800a8b0 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800a860:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a864:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d121      	bne.n	800a8b0 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a35      	ldr	r2, [pc, #212]	@ (800a948 <HAL_ADC_ConfigChannel+0x7b0>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d157      	bne.n	800a926 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a876:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a87a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a87e:	4619      	mov	r1, r3
 800a880:	482f      	ldr	r0, [pc, #188]	@ (800a940 <HAL_ADC_ConfigChannel+0x7a8>)
 800a882:	f7fe fed0 	bl	8009626 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a886:	4b31      	ldr	r3, [pc, #196]	@ (800a94c <HAL_ADC_ConfigChannel+0x7b4>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	099b      	lsrs	r3, r3, #6
 800a88c:	4a30      	ldr	r2, [pc, #192]	@ (800a950 <HAL_ADC_ConfigChannel+0x7b8>)
 800a88e:	fba2 2303 	umull	r2, r3, r2, r3
 800a892:	099b      	lsrs	r3, r3, #6
 800a894:	1c5a      	adds	r2, r3, #1
 800a896:	4613      	mov	r3, r2
 800a898:	005b      	lsls	r3, r3, #1
 800a89a:	4413      	add	r3, r2
 800a89c:	009b      	lsls	r3, r3, #2
 800a89e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800a8a0:	e002      	b.n	800a8a8 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	3b01      	subs	r3, #1
 800a8a6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d1f9      	bne.n	800a8a2 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a8ae:	e03a      	b.n	800a926 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a27      	ldr	r2, [pc, #156]	@ (800a954 <HAL_ADC_ConfigChannel+0x7bc>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d113      	bne.n	800a8e2 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800a8ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a8be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d10d      	bne.n	800a8e2 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a1f      	ldr	r2, [pc, #124]	@ (800a948 <HAL_ADC_ConfigChannel+0x7b0>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d12a      	bne.n	800a926 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a8d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a8d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a8d8:	4619      	mov	r1, r3
 800a8da:	4819      	ldr	r0, [pc, #100]	@ (800a940 <HAL_ADC_ConfigChannel+0x7a8>)
 800a8dc:	f7fe fea3 	bl	8009626 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a8e0:	e021      	b.n	800a926 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a1c      	ldr	r2, [pc, #112]	@ (800a958 <HAL_ADC_ConfigChannel+0x7c0>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d11c      	bne.n	800a926 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800a8ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a8f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d116      	bne.n	800a926 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a12      	ldr	r2, [pc, #72]	@ (800a948 <HAL_ADC_ConfigChannel+0x7b0>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d111      	bne.n	800a926 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a902:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a906:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a90a:	4619      	mov	r1, r3
 800a90c:	480c      	ldr	r0, [pc, #48]	@ (800a940 <HAL_ADC_ConfigChannel+0x7a8>)
 800a90e:	f7fe fe8a 	bl	8009626 <LL_ADC_SetCommonPathInternalCh>
 800a912:	e008      	b.n	800a926 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a918:	f043 0220 	orr.w	r2, r3, #32
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800a920:	2301      	movs	r3, #1
 800a922:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2200      	movs	r2, #0
 800a92a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800a92e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800a932:	4618      	mov	r0, r3
 800a934:	37d8      	adds	r7, #216	@ 0xd8
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}
 800a93a:	bf00      	nop
 800a93c:	80080000 	.word	0x80080000
 800a940:	50040300 	.word	0x50040300
 800a944:	c7520000 	.word	0xc7520000
 800a948:	50040000 	.word	0x50040000
 800a94c:	2000005c 	.word	0x2000005c
 800a950:	053e2d63 	.word	0x053e2d63
 800a954:	cb840000 	.word	0xcb840000
 800a958:	80000001 	.word	0x80000001

0800a95c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b084      	sub	sp, #16
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800a964:	2300      	movs	r3, #0
 800a966:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7fe ffe7 	bl	8009940 <LL_ADC_IsEnabled>
 800a972:	4603      	mov	r3, r0
 800a974:	2b00      	cmp	r3, #0
 800a976:	d169      	bne.n	800aa4c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	689a      	ldr	r2, [r3, #8]
 800a97e:	4b36      	ldr	r3, [pc, #216]	@ (800aa58 <ADC_Enable+0xfc>)
 800a980:	4013      	ands	r3, r2
 800a982:	2b00      	cmp	r3, #0
 800a984:	d00d      	beq.n	800a9a2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a98a:	f043 0210 	orr.w	r2, r3, #16
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a996:	f043 0201 	orr.w	r2, r3, #1
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	e055      	b.n	800aa4e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7fe ffa2 	bl	80098f0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800a9ac:	482b      	ldr	r0, [pc, #172]	@ (800aa5c <ADC_Enable+0x100>)
 800a9ae:	f7fe fe4d 	bl	800964c <LL_ADC_GetCommonPathInternalCh>
 800a9b2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800a9b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d013      	beq.n	800a9e4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a9bc:	4b28      	ldr	r3, [pc, #160]	@ (800aa60 <ADC_Enable+0x104>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	099b      	lsrs	r3, r3, #6
 800a9c2:	4a28      	ldr	r2, [pc, #160]	@ (800aa64 <ADC_Enable+0x108>)
 800a9c4:	fba2 2303 	umull	r2, r3, r2, r3
 800a9c8:	099b      	lsrs	r3, r3, #6
 800a9ca:	1c5a      	adds	r2, r3, #1
 800a9cc:	4613      	mov	r3, r2
 800a9ce:	005b      	lsls	r3, r3, #1
 800a9d0:	4413      	add	r3, r2
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800a9d6:	e002      	b.n	800a9de <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	3b01      	subs	r3, #1
 800a9dc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d1f9      	bne.n	800a9d8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800a9e4:	f7fe fddc 	bl	80095a0 <HAL_GetTick>
 800a9e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a9ea:	e028      	b.n	800aa3e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f7fe ffa5 	bl	8009940 <LL_ADC_IsEnabled>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d104      	bne.n	800aa06 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4618      	mov	r0, r3
 800aa02:	f7fe ff75 	bl	80098f0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800aa06:	f7fe fdcb 	bl	80095a0 <HAL_GetTick>
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	1ad3      	subs	r3, r2, r3
 800aa10:	2b02      	cmp	r3, #2
 800aa12:	d914      	bls.n	800aa3e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f003 0301 	and.w	r3, r3, #1
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	d00d      	beq.n	800aa3e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa26:	f043 0210 	orr.w	r2, r3, #16
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa32:	f043 0201 	orr.w	r2, r3, #1
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	e007      	b.n	800aa4e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f003 0301 	and.w	r3, r3, #1
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d1cf      	bne.n	800a9ec <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3710      	adds	r7, #16
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	bf00      	nop
 800aa58:	8000003f 	.word	0x8000003f
 800aa5c:	50040300 	.word	0x50040300
 800aa60:	2000005c 	.word	0x2000005c
 800aa64:	053e2d63 	.word	0x053e2d63

0800aa68 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4618      	mov	r0, r3
 800aa76:	f7fe ff76 	bl	8009966 <LL_ADC_IsDisableOngoing>
 800aa7a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4618      	mov	r0, r3
 800aa82:	f7fe ff5d 	bl	8009940 <LL_ADC_IsEnabled>
 800aa86:	4603      	mov	r3, r0
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d047      	beq.n	800ab1c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d144      	bne.n	800ab1c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	689b      	ldr	r3, [r3, #8]
 800aa98:	f003 030d 	and.w	r3, r3, #13
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	d10c      	bne.n	800aaba <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f7fe ff37 	bl	8009918 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	2203      	movs	r2, #3
 800aab0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800aab2:	f7fe fd75 	bl	80095a0 <HAL_GetTick>
 800aab6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800aab8:	e029      	b.n	800ab0e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aabe:	f043 0210 	orr.w	r2, r3, #16
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aaca:	f043 0201 	orr.w	r2, r3, #1
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800aad2:	2301      	movs	r3, #1
 800aad4:	e023      	b.n	800ab1e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800aad6:	f7fe fd63 	bl	80095a0 <HAL_GetTick>
 800aada:	4602      	mov	r2, r0
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	1ad3      	subs	r3, r2, r3
 800aae0:	2b02      	cmp	r3, #2
 800aae2:	d914      	bls.n	800ab0e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	689b      	ldr	r3, [r3, #8]
 800aaea:	f003 0301 	and.w	r3, r3, #1
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d00d      	beq.n	800ab0e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aaf6:	f043 0210 	orr.w	r2, r3, #16
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab02:	f043 0201 	orr.w	r2, r3, #1
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	e007      	b.n	800ab1e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	689b      	ldr	r3, [r3, #8]
 800ab14:	f003 0301 	and.w	r3, r3, #1
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d1dc      	bne.n	800aad6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800ab1c:	2300      	movs	r3, #0
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3710      	adds	r7, #16
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}

0800ab26 <LL_ADC_StartCalibration>:
{
 800ab26:	b480      	push	{r7}
 800ab28:	b083      	sub	sp, #12
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
 800ab2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	689b      	ldr	r3, [r3, #8]
 800ab34:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800ab38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800ab3c:	683a      	ldr	r2, [r7, #0]
 800ab3e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800ab42:	4313      	orrs	r3, r2
 800ab44:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	609a      	str	r2, [r3, #8]
}
 800ab4c:	bf00      	nop
 800ab4e:	370c      	adds	r7, #12
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr

0800ab58 <LL_ADC_IsCalibrationOnGoing>:
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b083      	sub	sp, #12
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	689b      	ldr	r3, [r3, #8]
 800ab64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ab68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ab6c:	d101      	bne.n	800ab72 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800ab6e:	2301      	movs	r3, #1
 800ab70:	e000      	b.n	800ab74 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800ab72:	2300      	movs	r3, #0
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	370c      	adds	r7, #12
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr

0800ab80 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d101      	bne.n	800ab9c <HAL_ADCEx_Calibration_Start+0x1c>
 800ab98:	2302      	movs	r3, #2
 800ab9a:	e04d      	b.n	800ac38 <HAL_ADCEx_Calibration_Start+0xb8>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f7ff ff5f 	bl	800aa68 <ADC_Disable>
 800abaa:	4603      	mov	r3, r0
 800abac:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800abae:	7bfb      	ldrb	r3, [r7, #15]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d136      	bne.n	800ac22 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abb8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800abbc:	f023 0302 	bic.w	r3, r3, #2
 800abc0:	f043 0202 	orr.w	r2, r3, #2
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	6839      	ldr	r1, [r7, #0]
 800abce:	4618      	mov	r0, r3
 800abd0:	f7ff ffa9 	bl	800ab26 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800abd4:	e014      	b.n	800ac00 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	3301      	adds	r3, #1
 800abda:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 800abe2:	d30d      	bcc.n	800ac00 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abe8:	f023 0312 	bic.w	r3, r3, #18
 800abec:	f043 0210 	orr.w	r2, r3, #16
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2200      	movs	r2, #0
 800abf8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 800abfc:	2301      	movs	r3, #1
 800abfe:	e01b      	b.n	800ac38 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4618      	mov	r0, r3
 800ac06:	f7ff ffa7 	bl	800ab58 <LL_ADC_IsCalibrationOnGoing>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d1e2      	bne.n	800abd6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac14:	f023 0303 	bic.w	r3, r3, #3
 800ac18:	f043 0201 	orr.w	r2, r3, #1
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	655a      	str	r2, [r3, #84]	@ 0x54
 800ac20:	e005      	b.n	800ac2e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac26:	f043 0210 	orr.w	r2, r3, #16
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2200      	movs	r2, #0
 800ac32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800ac36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3710      	adds	r7, #16
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800ac48:	bf00      	nop
 800ac4a:	370c      	adds	r7, #12
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr

0800ac54 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b083      	sub	sp, #12
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800ac5c:	bf00      	nop
 800ac5e:	370c      	adds	r7, #12
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr

0800ac68 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b083      	sub	sp, #12
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800ac70:	bf00      	nop
 800ac72:	370c      	adds	r7, #12
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr

0800ac7c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b083      	sub	sp, #12
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800ac84:	bf00      	nop
 800ac86:	370c      	adds	r7, #12
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr

0800ac90 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b083      	sub	sp, #12
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800ac98:	bf00      	nop
 800ac9a:	370c      	adds	r7, #12
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr

0800aca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b085      	sub	sp, #20
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f003 0307 	and.w	r3, r3, #7
 800acb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800acb4:	4b0c      	ldr	r3, [pc, #48]	@ (800ace8 <__NVIC_SetPriorityGrouping+0x44>)
 800acb6:	68db      	ldr	r3, [r3, #12]
 800acb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800acba:	68ba      	ldr	r2, [r7, #8]
 800acbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800acc0:	4013      	ands	r3, r2
 800acc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800accc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800acd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800acd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800acd6:	4a04      	ldr	r2, [pc, #16]	@ (800ace8 <__NVIC_SetPriorityGrouping+0x44>)
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	60d3      	str	r3, [r2, #12]
}
 800acdc:	bf00      	nop
 800acde:	3714      	adds	r7, #20
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr
 800ace8:	e000ed00 	.word	0xe000ed00

0800acec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800acec:	b480      	push	{r7}
 800acee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800acf0:	4b04      	ldr	r3, [pc, #16]	@ (800ad04 <__NVIC_GetPriorityGrouping+0x18>)
 800acf2:	68db      	ldr	r3, [r3, #12]
 800acf4:	0a1b      	lsrs	r3, r3, #8
 800acf6:	f003 0307 	and.w	r3, r3, #7
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr
 800ad04:	e000ed00 	.word	0xe000ed00

0800ad08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	4603      	mov	r3, r0
 800ad10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ad12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	db0b      	blt.n	800ad32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ad1a:	79fb      	ldrb	r3, [r7, #7]
 800ad1c:	f003 021f 	and.w	r2, r3, #31
 800ad20:	4907      	ldr	r1, [pc, #28]	@ (800ad40 <__NVIC_EnableIRQ+0x38>)
 800ad22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad26:	095b      	lsrs	r3, r3, #5
 800ad28:	2001      	movs	r0, #1
 800ad2a:	fa00 f202 	lsl.w	r2, r0, r2
 800ad2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800ad32:	bf00      	nop
 800ad34:	370c      	adds	r7, #12
 800ad36:	46bd      	mov	sp, r7
 800ad38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3c:	4770      	bx	lr
 800ad3e:	bf00      	nop
 800ad40:	e000e100 	.word	0xe000e100

0800ad44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b083      	sub	sp, #12
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	6039      	str	r1, [r7, #0]
 800ad4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ad50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	db0a      	blt.n	800ad6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	b2da      	uxtb	r2, r3
 800ad5c:	490c      	ldr	r1, [pc, #48]	@ (800ad90 <__NVIC_SetPriority+0x4c>)
 800ad5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad62:	0112      	lsls	r2, r2, #4
 800ad64:	b2d2      	uxtb	r2, r2
 800ad66:	440b      	add	r3, r1
 800ad68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800ad6c:	e00a      	b.n	800ad84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	b2da      	uxtb	r2, r3
 800ad72:	4908      	ldr	r1, [pc, #32]	@ (800ad94 <__NVIC_SetPriority+0x50>)
 800ad74:	79fb      	ldrb	r3, [r7, #7]
 800ad76:	f003 030f 	and.w	r3, r3, #15
 800ad7a:	3b04      	subs	r3, #4
 800ad7c:	0112      	lsls	r2, r2, #4
 800ad7e:	b2d2      	uxtb	r2, r2
 800ad80:	440b      	add	r3, r1
 800ad82:	761a      	strb	r2, [r3, #24]
}
 800ad84:	bf00      	nop
 800ad86:	370c      	adds	r7, #12
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr
 800ad90:	e000e100 	.word	0xe000e100
 800ad94:	e000ed00 	.word	0xe000ed00

0800ad98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b089      	sub	sp, #36	@ 0x24
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	60f8      	str	r0, [r7, #12]
 800ada0:	60b9      	str	r1, [r7, #8]
 800ada2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f003 0307 	and.w	r3, r3, #7
 800adaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800adac:	69fb      	ldr	r3, [r7, #28]
 800adae:	f1c3 0307 	rsb	r3, r3, #7
 800adb2:	2b04      	cmp	r3, #4
 800adb4:	bf28      	it	cs
 800adb6:	2304      	movcs	r3, #4
 800adb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800adba:	69fb      	ldr	r3, [r7, #28]
 800adbc:	3304      	adds	r3, #4
 800adbe:	2b06      	cmp	r3, #6
 800adc0:	d902      	bls.n	800adc8 <NVIC_EncodePriority+0x30>
 800adc2:	69fb      	ldr	r3, [r7, #28]
 800adc4:	3b03      	subs	r3, #3
 800adc6:	e000      	b.n	800adca <NVIC_EncodePriority+0x32>
 800adc8:	2300      	movs	r3, #0
 800adca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800adcc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800add0:	69bb      	ldr	r3, [r7, #24]
 800add2:	fa02 f303 	lsl.w	r3, r2, r3
 800add6:	43da      	mvns	r2, r3
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	401a      	ands	r2, r3
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ade0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	fa01 f303 	lsl.w	r3, r1, r3
 800adea:	43d9      	mvns	r1, r3
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800adf0:	4313      	orrs	r3, r2
         );
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3724      	adds	r7, #36	@ 0x24
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr
	...

0800ae00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b082      	sub	sp, #8
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	3b01      	subs	r3, #1
 800ae0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ae10:	d301      	bcc.n	800ae16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ae12:	2301      	movs	r3, #1
 800ae14:	e00f      	b.n	800ae36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ae16:	4a0a      	ldr	r2, [pc, #40]	@ (800ae40 <SysTick_Config+0x40>)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	3b01      	subs	r3, #1
 800ae1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ae1e:	210f      	movs	r1, #15
 800ae20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae24:	f7ff ff8e 	bl	800ad44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ae28:	4b05      	ldr	r3, [pc, #20]	@ (800ae40 <SysTick_Config+0x40>)
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ae2e:	4b04      	ldr	r3, [pc, #16]	@ (800ae40 <SysTick_Config+0x40>)
 800ae30:	2207      	movs	r2, #7
 800ae32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ae34:	2300      	movs	r3, #0
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3708      	adds	r7, #8
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	e000e010 	.word	0xe000e010

0800ae44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f7ff ff29 	bl	800aca4 <__NVIC_SetPriorityGrouping>
}
 800ae52:	bf00      	nop
 800ae54:	3708      	adds	r7, #8
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}

0800ae5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ae5a:	b580      	push	{r7, lr}
 800ae5c:	b086      	sub	sp, #24
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	4603      	mov	r3, r0
 800ae62:	60b9      	str	r1, [r7, #8]
 800ae64:	607a      	str	r2, [r7, #4]
 800ae66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800ae6c:	f7ff ff3e 	bl	800acec <__NVIC_GetPriorityGrouping>
 800ae70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	68b9      	ldr	r1, [r7, #8]
 800ae76:	6978      	ldr	r0, [r7, #20]
 800ae78:	f7ff ff8e 	bl	800ad98 <NVIC_EncodePriority>
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae82:	4611      	mov	r1, r2
 800ae84:	4618      	mov	r0, r3
 800ae86:	f7ff ff5d 	bl	800ad44 <__NVIC_SetPriority>
}
 800ae8a:	bf00      	nop
 800ae8c:	3718      	adds	r7, #24
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}

0800ae92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ae92:	b580      	push	{r7, lr}
 800ae94:	b082      	sub	sp, #8
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	4603      	mov	r3, r0
 800ae9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ae9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aea0:	4618      	mov	r0, r3
 800aea2:	f7ff ff31 	bl	800ad08 <__NVIC_EnableIRQ>
}
 800aea6:	bf00      	nop
 800aea8:	3708      	adds	r7, #8
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}

0800aeae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800aeae:	b580      	push	{r7, lr}
 800aeb0:	b082      	sub	sp, #8
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f7ff ffa2 	bl	800ae00 <SysTick_Config>
 800aebc:	4603      	mov	r3, r0
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3708      	adds	r7, #8
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
	...

0800aec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b087      	sub	sp, #28
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800aed2:	2300      	movs	r3, #0
 800aed4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800aed6:	e148      	b.n	800b16a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	681a      	ldr	r2, [r3, #0]
 800aedc:	2101      	movs	r1, #1
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	fa01 f303 	lsl.w	r3, r1, r3
 800aee4:	4013      	ands	r3, r2
 800aee6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	f000 813a 	beq.w	800b164 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	f003 0303 	and.w	r3, r3, #3
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d005      	beq.n	800af08 <HAL_GPIO_Init+0x40>
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	f003 0303 	and.w	r3, r3, #3
 800af04:	2b02      	cmp	r3, #2
 800af06:	d130      	bne.n	800af6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	689b      	ldr	r3, [r3, #8]
 800af0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	005b      	lsls	r3, r3, #1
 800af12:	2203      	movs	r2, #3
 800af14:	fa02 f303 	lsl.w	r3, r2, r3
 800af18:	43db      	mvns	r3, r3
 800af1a:	693a      	ldr	r2, [r7, #16]
 800af1c:	4013      	ands	r3, r2
 800af1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	68da      	ldr	r2, [r3, #12]
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	005b      	lsls	r3, r3, #1
 800af28:	fa02 f303 	lsl.w	r3, r2, r3
 800af2c:	693a      	ldr	r2, [r7, #16]
 800af2e:	4313      	orrs	r3, r2
 800af30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	693a      	ldr	r2, [r7, #16]
 800af36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800af3e:	2201      	movs	r2, #1
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	fa02 f303 	lsl.w	r3, r2, r3
 800af46:	43db      	mvns	r3, r3
 800af48:	693a      	ldr	r2, [r7, #16]
 800af4a:	4013      	ands	r3, r2
 800af4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	091b      	lsrs	r3, r3, #4
 800af54:	f003 0201 	and.w	r2, r3, #1
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	fa02 f303 	lsl.w	r3, r2, r3
 800af5e:	693a      	ldr	r2, [r7, #16]
 800af60:	4313      	orrs	r3, r2
 800af62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	693a      	ldr	r2, [r7, #16]
 800af68:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	f003 0303 	and.w	r3, r3, #3
 800af72:	2b03      	cmp	r3, #3
 800af74:	d017      	beq.n	800afa6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	68db      	ldr	r3, [r3, #12]
 800af7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	005b      	lsls	r3, r3, #1
 800af80:	2203      	movs	r2, #3
 800af82:	fa02 f303 	lsl.w	r3, r2, r3
 800af86:	43db      	mvns	r3, r3
 800af88:	693a      	ldr	r2, [r7, #16]
 800af8a:	4013      	ands	r3, r2
 800af8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	689a      	ldr	r2, [r3, #8]
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	005b      	lsls	r3, r3, #1
 800af96:	fa02 f303 	lsl.w	r3, r2, r3
 800af9a:	693a      	ldr	r2, [r7, #16]
 800af9c:	4313      	orrs	r3, r2
 800af9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	693a      	ldr	r2, [r7, #16]
 800afa4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	685b      	ldr	r3, [r3, #4]
 800afaa:	f003 0303 	and.w	r3, r3, #3
 800afae:	2b02      	cmp	r3, #2
 800afb0:	d123      	bne.n	800affa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	08da      	lsrs	r2, r3, #3
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	3208      	adds	r2, #8
 800afba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	f003 0307 	and.w	r3, r3, #7
 800afc6:	009b      	lsls	r3, r3, #2
 800afc8:	220f      	movs	r2, #15
 800afca:	fa02 f303 	lsl.w	r3, r2, r3
 800afce:	43db      	mvns	r3, r3
 800afd0:	693a      	ldr	r2, [r7, #16]
 800afd2:	4013      	ands	r3, r2
 800afd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	691a      	ldr	r2, [r3, #16]
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	f003 0307 	and.w	r3, r3, #7
 800afe0:	009b      	lsls	r3, r3, #2
 800afe2:	fa02 f303 	lsl.w	r3, r2, r3
 800afe6:	693a      	ldr	r2, [r7, #16]
 800afe8:	4313      	orrs	r3, r2
 800afea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	08da      	lsrs	r2, r3, #3
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	3208      	adds	r2, #8
 800aff4:	6939      	ldr	r1, [r7, #16]
 800aff6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	005b      	lsls	r3, r3, #1
 800b004:	2203      	movs	r2, #3
 800b006:	fa02 f303 	lsl.w	r3, r2, r3
 800b00a:	43db      	mvns	r3, r3
 800b00c:	693a      	ldr	r2, [r7, #16]
 800b00e:	4013      	ands	r3, r2
 800b010:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	f003 0203 	and.w	r2, r3, #3
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	005b      	lsls	r3, r3, #1
 800b01e:	fa02 f303 	lsl.w	r3, r2, r3
 800b022:	693a      	ldr	r2, [r7, #16]
 800b024:	4313      	orrs	r3, r2
 800b026:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	693a      	ldr	r2, [r7, #16]
 800b02c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b036:	2b00      	cmp	r3, #0
 800b038:	f000 8094 	beq.w	800b164 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b03c:	4b52      	ldr	r3, [pc, #328]	@ (800b188 <HAL_GPIO_Init+0x2c0>)
 800b03e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b040:	4a51      	ldr	r2, [pc, #324]	@ (800b188 <HAL_GPIO_Init+0x2c0>)
 800b042:	f043 0301 	orr.w	r3, r3, #1
 800b046:	6613      	str	r3, [r2, #96]	@ 0x60
 800b048:	4b4f      	ldr	r3, [pc, #316]	@ (800b188 <HAL_GPIO_Init+0x2c0>)
 800b04a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b04c:	f003 0301 	and.w	r3, r3, #1
 800b050:	60bb      	str	r3, [r7, #8]
 800b052:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800b054:	4a4d      	ldr	r2, [pc, #308]	@ (800b18c <HAL_GPIO_Init+0x2c4>)
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	089b      	lsrs	r3, r3, #2
 800b05a:	3302      	adds	r3, #2
 800b05c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b060:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	f003 0303 	and.w	r3, r3, #3
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	220f      	movs	r2, #15
 800b06c:	fa02 f303 	lsl.w	r3, r2, r3
 800b070:	43db      	mvns	r3, r3
 800b072:	693a      	ldr	r2, [r7, #16]
 800b074:	4013      	ands	r3, r2
 800b076:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800b07e:	d00d      	beq.n	800b09c <HAL_GPIO_Init+0x1d4>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	4a43      	ldr	r2, [pc, #268]	@ (800b190 <HAL_GPIO_Init+0x2c8>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d007      	beq.n	800b098 <HAL_GPIO_Init+0x1d0>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	4a42      	ldr	r2, [pc, #264]	@ (800b194 <HAL_GPIO_Init+0x2cc>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d101      	bne.n	800b094 <HAL_GPIO_Init+0x1cc>
 800b090:	2302      	movs	r3, #2
 800b092:	e004      	b.n	800b09e <HAL_GPIO_Init+0x1d6>
 800b094:	2307      	movs	r3, #7
 800b096:	e002      	b.n	800b09e <HAL_GPIO_Init+0x1d6>
 800b098:	2301      	movs	r3, #1
 800b09a:	e000      	b.n	800b09e <HAL_GPIO_Init+0x1d6>
 800b09c:	2300      	movs	r3, #0
 800b09e:	697a      	ldr	r2, [r7, #20]
 800b0a0:	f002 0203 	and.w	r2, r2, #3
 800b0a4:	0092      	lsls	r2, r2, #2
 800b0a6:	4093      	lsls	r3, r2
 800b0a8:	693a      	ldr	r2, [r7, #16]
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800b0ae:	4937      	ldr	r1, [pc, #220]	@ (800b18c <HAL_GPIO_Init+0x2c4>)
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	089b      	lsrs	r3, r3, #2
 800b0b4:	3302      	adds	r3, #2
 800b0b6:	693a      	ldr	r2, [r7, #16]
 800b0b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b0bc:	4b36      	ldr	r3, [pc, #216]	@ (800b198 <HAL_GPIO_Init+0x2d0>)
 800b0be:	689b      	ldr	r3, [r3, #8]
 800b0c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	43db      	mvns	r3, r3
 800b0c6:	693a      	ldr	r2, [r7, #16]
 800b0c8:	4013      	ands	r3, r2
 800b0ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d003      	beq.n	800b0e0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800b0d8:	693a      	ldr	r2, [r7, #16]
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800b0e0:	4a2d      	ldr	r2, [pc, #180]	@ (800b198 <HAL_GPIO_Init+0x2d0>)
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800b0e6:	4b2c      	ldr	r3, [pc, #176]	@ (800b198 <HAL_GPIO_Init+0x2d0>)
 800b0e8:	68db      	ldr	r3, [r3, #12]
 800b0ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	43db      	mvns	r3, r3
 800b0f0:	693a      	ldr	r2, [r7, #16]
 800b0f2:	4013      	ands	r3, r2
 800b0f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d003      	beq.n	800b10a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800b102:	693a      	ldr	r2, [r7, #16]
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	4313      	orrs	r3, r2
 800b108:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800b10a:	4a23      	ldr	r2, [pc, #140]	@ (800b198 <HAL_GPIO_Init+0x2d0>)
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800b110:	4b21      	ldr	r3, [pc, #132]	@ (800b198 <HAL_GPIO_Init+0x2d0>)
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	43db      	mvns	r3, r3
 800b11a:	693a      	ldr	r2, [r7, #16]
 800b11c:	4013      	ands	r3, r2
 800b11e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d003      	beq.n	800b134 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800b12c:	693a      	ldr	r2, [r7, #16]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	4313      	orrs	r3, r2
 800b132:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800b134:	4a18      	ldr	r2, [pc, #96]	@ (800b198 <HAL_GPIO_Init+0x2d0>)
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800b13a:	4b17      	ldr	r3, [pc, #92]	@ (800b198 <HAL_GPIO_Init+0x2d0>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	43db      	mvns	r3, r3
 800b144:	693a      	ldr	r2, [r7, #16]
 800b146:	4013      	ands	r3, r2
 800b148:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b152:	2b00      	cmp	r3, #0
 800b154:	d003      	beq.n	800b15e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800b156:	693a      	ldr	r2, [r7, #16]
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	4313      	orrs	r3, r2
 800b15c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800b15e:	4a0e      	ldr	r2, [pc, #56]	@ (800b198 <HAL_GPIO_Init+0x2d0>)
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	3301      	adds	r3, #1
 800b168:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	681a      	ldr	r2, [r3, #0]
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	fa22 f303 	lsr.w	r3, r2, r3
 800b174:	2b00      	cmp	r3, #0
 800b176:	f47f aeaf 	bne.w	800aed8 <HAL_GPIO_Init+0x10>
  }
}
 800b17a:	bf00      	nop
 800b17c:	bf00      	nop
 800b17e:	371c      	adds	r7, #28
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr
 800b188:	40021000 	.word	0x40021000
 800b18c:	40010000 	.word	0x40010000
 800b190:	48000400 	.word	0x48000400
 800b194:	48000800 	.word	0x48000800
 800b198:	40010400 	.word	0x40010400

0800b19c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	460b      	mov	r3, r1
 800b1a6:	807b      	strh	r3, [r7, #2]
 800b1a8:	4613      	mov	r3, r2
 800b1aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b1ac:	787b      	ldrb	r3, [r7, #1]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d003      	beq.n	800b1ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b1b2:	887a      	ldrh	r2, [r7, #2]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b1b8:	e002      	b.n	800b1c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b1ba:	887a      	ldrh	r2, [r7, #2]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800b1c0:	bf00      	nop
 800b1c2:	370c      	adds	r7, #12
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800b1d6:	4b08      	ldr	r3, [pc, #32]	@ (800b1f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b1d8:	695a      	ldr	r2, [r3, #20]
 800b1da:	88fb      	ldrh	r3, [r7, #6]
 800b1dc:	4013      	ands	r3, r2
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d006      	beq.n	800b1f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b1e2:	4a05      	ldr	r2, [pc, #20]	@ (800b1f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b1e4:	88fb      	ldrh	r3, [r7, #6]
 800b1e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b1e8:	88fb      	ldrh	r3, [r7, #6]
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7f9 fade 	bl	80047ac <HAL_GPIO_EXTI_Callback>
  }
}
 800b1f0:	bf00      	nop
 800b1f2:	3708      	adds	r7, #8
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}
 800b1f8:	40010400 	.word	0x40010400

0800b1fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b082      	sub	sp, #8
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d101      	bne.n	800b20e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b20a:	2301      	movs	r3, #1
 800b20c:	e08d      	b.n	800b32a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b214:	b2db      	uxtb	r3, r3
 800b216:	2b00      	cmp	r3, #0
 800b218:	d106      	bne.n	800b228 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2200      	movs	r2, #0
 800b21e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f7f9 fc38 	bl	8004a98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2224      	movs	r2, #36	@ 0x24
 800b22c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	681a      	ldr	r2, [r3, #0]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f022 0201 	bic.w	r2, r2, #1
 800b23e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	685a      	ldr	r2, [r3, #4]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800b24c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	689a      	ldr	r2, [r3, #8]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b25c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	68db      	ldr	r3, [r3, #12]
 800b262:	2b01      	cmp	r3, #1
 800b264:	d107      	bne.n	800b276 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	689a      	ldr	r2, [r3, #8]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b272:	609a      	str	r2, [r3, #8]
 800b274:	e006      	b.n	800b284 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	689a      	ldr	r2, [r3, #8]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800b282:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	68db      	ldr	r3, [r3, #12]
 800b288:	2b02      	cmp	r3, #2
 800b28a:	d108      	bne.n	800b29e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	685a      	ldr	r2, [r3, #4]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b29a:	605a      	str	r2, [r3, #4]
 800b29c:	e007      	b.n	800b2ae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	685a      	ldr	r2, [r3, #4]
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b2ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	687a      	ldr	r2, [r7, #4]
 800b2b6:	6812      	ldr	r2, [r2, #0]
 800b2b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b2bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b2c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	68da      	ldr	r2, [r3, #12]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b2d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	691a      	ldr	r2, [r3, #16]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	695b      	ldr	r3, [r3, #20]
 800b2da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	699b      	ldr	r3, [r3, #24]
 800b2e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	430a      	orrs	r2, r1
 800b2ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	69d9      	ldr	r1, [r3, #28]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6a1a      	ldr	r2, [r3, #32]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	430a      	orrs	r2, r1
 800b2fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	681a      	ldr	r2, [r3, #0]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f042 0201 	orr.w	r2, r2, #1
 800b30a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2220      	movs	r2, #32
 800b316:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2200      	movs	r2, #0
 800b31e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2200      	movs	r2, #0
 800b324:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800b328:	2300      	movs	r3, #0
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3708      	adds	r7, #8
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
	...

0800b334 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b088      	sub	sp, #32
 800b338:	af02      	add	r7, sp, #8
 800b33a:	60f8      	str	r0, [r7, #12]
 800b33c:	4608      	mov	r0, r1
 800b33e:	4611      	mov	r1, r2
 800b340:	461a      	mov	r2, r3
 800b342:	4603      	mov	r3, r0
 800b344:	817b      	strh	r3, [r7, #10]
 800b346:	460b      	mov	r3, r1
 800b348:	813b      	strh	r3, [r7, #8]
 800b34a:	4613      	mov	r3, r2
 800b34c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b354:	b2db      	uxtb	r3, r3
 800b356:	2b20      	cmp	r3, #32
 800b358:	f040 80f9 	bne.w	800b54e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b35c:	6a3b      	ldr	r3, [r7, #32]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d002      	beq.n	800b368 <HAL_I2C_Mem_Write+0x34>
 800b362:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b364:	2b00      	cmp	r3, #0
 800b366:	d105      	bne.n	800b374 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b36e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800b370:	2301      	movs	r3, #1
 800b372:	e0ed      	b.n	800b550 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b37a:	2b01      	cmp	r3, #1
 800b37c:	d101      	bne.n	800b382 <HAL_I2C_Mem_Write+0x4e>
 800b37e:	2302      	movs	r3, #2
 800b380:	e0e6      	b.n	800b550 <HAL_I2C_Mem_Write+0x21c>
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2201      	movs	r2, #1
 800b386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b38a:	f7fe f909 	bl	80095a0 <HAL_GetTick>
 800b38e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	9300      	str	r3, [sp, #0]
 800b394:	2319      	movs	r3, #25
 800b396:	2201      	movs	r2, #1
 800b398:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b39c:	68f8      	ldr	r0, [r7, #12]
 800b39e:	f000 fbaf 	bl	800bb00 <I2C_WaitOnFlagUntilTimeout>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d001      	beq.n	800b3ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	e0d1      	b.n	800b550 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2221      	movs	r2, #33	@ 0x21
 800b3b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2240      	movs	r2, #64	@ 0x40
 800b3b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	6a3a      	ldr	r2, [r7, #32]
 800b3c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b3cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b3d4:	88f8      	ldrh	r0, [r7, #6]
 800b3d6:	893a      	ldrh	r2, [r7, #8]
 800b3d8:	8979      	ldrh	r1, [r7, #10]
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	9301      	str	r3, [sp, #4]
 800b3de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3e0:	9300      	str	r3, [sp, #0]
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	68f8      	ldr	r0, [r7, #12]
 800b3e6:	f000 fabf 	bl	800b968 <I2C_RequestMemoryWrite>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d005      	beq.n	800b3fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	e0a9      	b.n	800b550 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b400:	b29b      	uxth	r3, r3
 800b402:	2bff      	cmp	r3, #255	@ 0xff
 800b404:	d90e      	bls.n	800b424 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	22ff      	movs	r2, #255	@ 0xff
 800b40a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b410:	b2da      	uxtb	r2, r3
 800b412:	8979      	ldrh	r1, [r7, #10]
 800b414:	2300      	movs	r3, #0
 800b416:	9300      	str	r3, [sp, #0]
 800b418:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b41c:	68f8      	ldr	r0, [r7, #12]
 800b41e:	f000 fd33 	bl	800be88 <I2C_TransferConfig>
 800b422:	e00f      	b.n	800b444 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b428:	b29a      	uxth	r2, r3
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b432:	b2da      	uxtb	r2, r3
 800b434:	8979      	ldrh	r1, [r7, #10]
 800b436:	2300      	movs	r3, #0
 800b438:	9300      	str	r3, [sp, #0]
 800b43a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b43e:	68f8      	ldr	r0, [r7, #12]
 800b440:	f000 fd22 	bl	800be88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b444:	697a      	ldr	r2, [r7, #20]
 800b446:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b448:	68f8      	ldr	r0, [r7, #12]
 800b44a:	f000 fbb2 	bl	800bbb2 <I2C_WaitOnTXISFlagUntilTimeout>
 800b44e:	4603      	mov	r3, r0
 800b450:	2b00      	cmp	r3, #0
 800b452:	d001      	beq.n	800b458 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800b454:	2301      	movs	r3, #1
 800b456:	e07b      	b.n	800b550 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b45c:	781a      	ldrb	r2, [r3, #0]
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b468:	1c5a      	adds	r2, r3, #1
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b472:	b29b      	uxth	r3, r3
 800b474:	3b01      	subs	r3, #1
 800b476:	b29a      	uxth	r2, r3
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b480:	3b01      	subs	r3, #1
 800b482:	b29a      	uxth	r2, r3
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b48c:	b29b      	uxth	r3, r3
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d034      	beq.n	800b4fc <HAL_I2C_Mem_Write+0x1c8>
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b496:	2b00      	cmp	r3, #0
 800b498:	d130      	bne.n	800b4fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	9300      	str	r3, [sp, #0]
 800b49e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	2180      	movs	r1, #128	@ 0x80
 800b4a4:	68f8      	ldr	r0, [r7, #12]
 800b4a6:	f000 fb2b 	bl	800bb00 <I2C_WaitOnFlagUntilTimeout>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d001      	beq.n	800b4b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	e04d      	b.n	800b550 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b4b8:	b29b      	uxth	r3, r3
 800b4ba:	2bff      	cmp	r3, #255	@ 0xff
 800b4bc:	d90e      	bls.n	800b4dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	22ff      	movs	r2, #255	@ 0xff
 800b4c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b4c8:	b2da      	uxtb	r2, r3
 800b4ca:	8979      	ldrh	r1, [r7, #10]
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	9300      	str	r3, [sp, #0]
 800b4d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b4d4:	68f8      	ldr	r0, [r7, #12]
 800b4d6:	f000 fcd7 	bl	800be88 <I2C_TransferConfig>
 800b4da:	e00f      	b.n	800b4fc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b4e0:	b29a      	uxth	r2, r3
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b4ea:	b2da      	uxtb	r2, r3
 800b4ec:	8979      	ldrh	r1, [r7, #10]
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	9300      	str	r3, [sp, #0]
 800b4f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b4f6:	68f8      	ldr	r0, [r7, #12]
 800b4f8:	f000 fcc6 	bl	800be88 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b500:	b29b      	uxth	r3, r3
 800b502:	2b00      	cmp	r3, #0
 800b504:	d19e      	bne.n	800b444 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b506:	697a      	ldr	r2, [r7, #20]
 800b508:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b50a:	68f8      	ldr	r0, [r7, #12]
 800b50c:	f000 fb98 	bl	800bc40 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b510:	4603      	mov	r3, r0
 800b512:	2b00      	cmp	r3, #0
 800b514:	d001      	beq.n	800b51a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800b516:	2301      	movs	r3, #1
 800b518:	e01a      	b.n	800b550 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	2220      	movs	r2, #32
 800b520:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	6859      	ldr	r1, [r3, #4]
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	4b0a      	ldr	r3, [pc, #40]	@ (800b558 <HAL_I2C_Mem_Write+0x224>)
 800b52e:	400b      	ands	r3, r1
 800b530:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	2220      	movs	r2, #32
 800b536:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2200      	movs	r2, #0
 800b53e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2200      	movs	r2, #0
 800b546:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b54a:	2300      	movs	r3, #0
 800b54c:	e000      	b.n	800b550 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800b54e:	2302      	movs	r3, #2
  }
}
 800b550:	4618      	mov	r0, r3
 800b552:	3718      	adds	r7, #24
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}
 800b558:	fe00e800 	.word	0xfe00e800

0800b55c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b088      	sub	sp, #32
 800b560:	af02      	add	r7, sp, #8
 800b562:	60f8      	str	r0, [r7, #12]
 800b564:	4608      	mov	r0, r1
 800b566:	4611      	mov	r1, r2
 800b568:	461a      	mov	r2, r3
 800b56a:	4603      	mov	r3, r0
 800b56c:	817b      	strh	r3, [r7, #10]
 800b56e:	460b      	mov	r3, r1
 800b570:	813b      	strh	r3, [r7, #8]
 800b572:	4613      	mov	r3, r2
 800b574:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	2b20      	cmp	r3, #32
 800b580:	f040 80fd 	bne.w	800b77e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800b584:	6a3b      	ldr	r3, [r7, #32]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d002      	beq.n	800b590 <HAL_I2C_Mem_Read+0x34>
 800b58a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d105      	bne.n	800b59c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b596:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800b598:	2301      	movs	r3, #1
 800b59a:	e0f1      	b.n	800b780 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b5a2:	2b01      	cmp	r3, #1
 800b5a4:	d101      	bne.n	800b5aa <HAL_I2C_Mem_Read+0x4e>
 800b5a6:	2302      	movs	r3, #2
 800b5a8:	e0ea      	b.n	800b780 <HAL_I2C_Mem_Read+0x224>
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2201      	movs	r2, #1
 800b5ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b5b2:	f7fd fff5 	bl	80095a0 <HAL_GetTick>
 800b5b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	9300      	str	r3, [sp, #0]
 800b5bc:	2319      	movs	r3, #25
 800b5be:	2201      	movs	r2, #1
 800b5c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b5c4:	68f8      	ldr	r0, [r7, #12]
 800b5c6:	f000 fa9b 	bl	800bb00 <I2C_WaitOnFlagUntilTimeout>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d001      	beq.n	800b5d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	e0d5      	b.n	800b780 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2222      	movs	r2, #34	@ 0x22
 800b5d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	2240      	movs	r2, #64	@ 0x40
 800b5e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	6a3a      	ldr	r2, [r7, #32]
 800b5ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b5f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b5fc:	88f8      	ldrh	r0, [r7, #6]
 800b5fe:	893a      	ldrh	r2, [r7, #8]
 800b600:	8979      	ldrh	r1, [r7, #10]
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	9301      	str	r3, [sp, #4]
 800b606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b608:	9300      	str	r3, [sp, #0]
 800b60a:	4603      	mov	r3, r0
 800b60c:	68f8      	ldr	r0, [r7, #12]
 800b60e:	f000 f9ff 	bl	800ba10 <I2C_RequestMemoryRead>
 800b612:	4603      	mov	r3, r0
 800b614:	2b00      	cmp	r3, #0
 800b616:	d005      	beq.n	800b624 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2200      	movs	r2, #0
 800b61c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800b620:	2301      	movs	r3, #1
 800b622:	e0ad      	b.n	800b780 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b628:	b29b      	uxth	r3, r3
 800b62a:	2bff      	cmp	r3, #255	@ 0xff
 800b62c:	d90e      	bls.n	800b64c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2201      	movs	r2, #1
 800b632:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b638:	b2da      	uxtb	r2, r3
 800b63a:	8979      	ldrh	r1, [r7, #10]
 800b63c:	4b52      	ldr	r3, [pc, #328]	@ (800b788 <HAL_I2C_Mem_Read+0x22c>)
 800b63e:	9300      	str	r3, [sp, #0]
 800b640:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b644:	68f8      	ldr	r0, [r7, #12]
 800b646:	f000 fc1f 	bl	800be88 <I2C_TransferConfig>
 800b64a:	e00f      	b.n	800b66c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b650:	b29a      	uxth	r2, r3
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b65a:	b2da      	uxtb	r2, r3
 800b65c:	8979      	ldrh	r1, [r7, #10]
 800b65e:	4b4a      	ldr	r3, [pc, #296]	@ (800b788 <HAL_I2C_Mem_Read+0x22c>)
 800b660:	9300      	str	r3, [sp, #0]
 800b662:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b666:	68f8      	ldr	r0, [r7, #12]
 800b668:	f000 fc0e 	bl	800be88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	9300      	str	r3, [sp, #0]
 800b670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b672:	2200      	movs	r2, #0
 800b674:	2104      	movs	r1, #4
 800b676:	68f8      	ldr	r0, [r7, #12]
 800b678:	f000 fa42 	bl	800bb00 <I2C_WaitOnFlagUntilTimeout>
 800b67c:	4603      	mov	r3, r0
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d001      	beq.n	800b686 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800b682:	2301      	movs	r3, #1
 800b684:	e07c      	b.n	800b780 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b690:	b2d2      	uxtb	r2, r2
 800b692:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b698:	1c5a      	adds	r2, r3, #1
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b6a2:	3b01      	subs	r3, #1
 800b6a4:	b29a      	uxth	r2, r3
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b6ae:	b29b      	uxth	r3, r3
 800b6b0:	3b01      	subs	r3, #1
 800b6b2:	b29a      	uxth	r2, r3
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d034      	beq.n	800b72c <HAL_I2C_Mem_Read+0x1d0>
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d130      	bne.n	800b72c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	9300      	str	r3, [sp, #0]
 800b6ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	2180      	movs	r1, #128	@ 0x80
 800b6d4:	68f8      	ldr	r0, [r7, #12]
 800b6d6:	f000 fa13 	bl	800bb00 <I2C_WaitOnFlagUntilTimeout>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d001      	beq.n	800b6e4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	e04d      	b.n	800b780 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b6e8:	b29b      	uxth	r3, r3
 800b6ea:	2bff      	cmp	r3, #255	@ 0xff
 800b6ec:	d90e      	bls.n	800b70c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b6f8:	b2da      	uxtb	r2, r3
 800b6fa:	8979      	ldrh	r1, [r7, #10]
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	9300      	str	r3, [sp, #0]
 800b700:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b704:	68f8      	ldr	r0, [r7, #12]
 800b706:	f000 fbbf 	bl	800be88 <I2C_TransferConfig>
 800b70a:	e00f      	b.n	800b72c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b710:	b29a      	uxth	r2, r3
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b71a:	b2da      	uxtb	r2, r3
 800b71c:	8979      	ldrh	r1, [r7, #10]
 800b71e:	2300      	movs	r3, #0
 800b720:	9300      	str	r3, [sp, #0]
 800b722:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b726:	68f8      	ldr	r0, [r7, #12]
 800b728:	f000 fbae 	bl	800be88 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b730:	b29b      	uxth	r3, r3
 800b732:	2b00      	cmp	r3, #0
 800b734:	d19a      	bne.n	800b66c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b736:	697a      	ldr	r2, [r7, #20]
 800b738:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b73a:	68f8      	ldr	r0, [r7, #12]
 800b73c:	f000 fa80 	bl	800bc40 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b740:	4603      	mov	r3, r0
 800b742:	2b00      	cmp	r3, #0
 800b744:	d001      	beq.n	800b74a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800b746:	2301      	movs	r3, #1
 800b748:	e01a      	b.n	800b780 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	2220      	movs	r2, #32
 800b750:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	6859      	ldr	r1, [r3, #4]
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681a      	ldr	r2, [r3, #0]
 800b75c:	4b0b      	ldr	r3, [pc, #44]	@ (800b78c <HAL_I2C_Mem_Read+0x230>)
 800b75e:	400b      	ands	r3, r1
 800b760:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	2220      	movs	r2, #32
 800b766:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	2200      	movs	r2, #0
 800b76e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2200      	movs	r2, #0
 800b776:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b77a:	2300      	movs	r3, #0
 800b77c:	e000      	b.n	800b780 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800b77e:	2302      	movs	r3, #2
  }
}
 800b780:	4618      	mov	r0, r3
 800b782:	3718      	adds	r7, #24
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}
 800b788:	80002400 	.word	0x80002400
 800b78c:	fe00e800 	.word	0xfe00e800

0800b790 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b08a      	sub	sp, #40	@ 0x28
 800b794:	af02      	add	r7, sp, #8
 800b796:	60f8      	str	r0, [r7, #12]
 800b798:	607a      	str	r2, [r7, #4]
 800b79a:	603b      	str	r3, [r7, #0]
 800b79c:	460b      	mov	r3, r1
 800b79e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b7aa:	b2db      	uxtb	r3, r3
 800b7ac:	2b20      	cmp	r3, #32
 800b7ae:	f040 80d6 	bne.w	800b95e <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	699b      	ldr	r3, [r3, #24]
 800b7b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b7bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b7c0:	d101      	bne.n	800b7c6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800b7c2:	2302      	movs	r3, #2
 800b7c4:	e0cc      	b.n	800b960 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	d101      	bne.n	800b7d4 <HAL_I2C_IsDeviceReady+0x44>
 800b7d0:	2302      	movs	r3, #2
 800b7d2:	e0c5      	b.n	800b960 <HAL_I2C_IsDeviceReady+0x1d0>
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	2224      	movs	r2, #36	@ 0x24
 800b7e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	68db      	ldr	r3, [r3, #12]
 800b7ee:	2b01      	cmp	r3, #1
 800b7f0:	d107      	bne.n	800b802 <HAL_I2C_IsDeviceReady+0x72>
 800b7f2:	897b      	ldrh	r3, [r7, #10]
 800b7f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b7f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b7fc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800b800:	e006      	b.n	800b810 <HAL_I2C_IsDeviceReady+0x80>
 800b802:	897b      	ldrh	r3, [r7, #10]
 800b804:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b808:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b80c:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 800b810:	68fa      	ldr	r2, [r7, #12]
 800b812:	6812      	ldr	r2, [r2, #0]
 800b814:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800b816:	f7fd fec3 	bl	80095a0 <HAL_GetTick>
 800b81a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	699b      	ldr	r3, [r3, #24]
 800b822:	f003 0320 	and.w	r3, r3, #32
 800b826:	2b20      	cmp	r3, #32
 800b828:	bf0c      	ite	eq
 800b82a:	2301      	moveq	r3, #1
 800b82c:	2300      	movne	r3, #0
 800b82e:	b2db      	uxtb	r3, r3
 800b830:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	699b      	ldr	r3, [r3, #24]
 800b838:	f003 0310 	and.w	r3, r3, #16
 800b83c:	2b10      	cmp	r3, #16
 800b83e:	bf0c      	ite	eq
 800b840:	2301      	moveq	r3, #1
 800b842:	2300      	movne	r3, #0
 800b844:	b2db      	uxtb	r3, r3
 800b846:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800b848:	e034      	b.n	800b8b4 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b850:	d01a      	beq.n	800b888 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b852:	f7fd fea5 	bl	80095a0 <HAL_GetTick>
 800b856:	4602      	mov	r2, r0
 800b858:	69bb      	ldr	r3, [r7, #24]
 800b85a:	1ad3      	subs	r3, r2, r3
 800b85c:	683a      	ldr	r2, [r7, #0]
 800b85e:	429a      	cmp	r2, r3
 800b860:	d302      	bcc.n	800b868 <HAL_I2C_IsDeviceReady+0xd8>
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d10f      	bne.n	800b888 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2220      	movs	r2, #32
 800b86c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b874:	f043 0220 	orr.w	r2, r3, #32
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	2200      	movs	r2, #0
 800b880:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800b884:	2301      	movs	r3, #1
 800b886:	e06b      	b.n	800b960 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	699b      	ldr	r3, [r3, #24]
 800b88e:	f003 0320 	and.w	r3, r3, #32
 800b892:	2b20      	cmp	r3, #32
 800b894:	bf0c      	ite	eq
 800b896:	2301      	moveq	r3, #1
 800b898:	2300      	movne	r3, #0
 800b89a:	b2db      	uxtb	r3, r3
 800b89c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	699b      	ldr	r3, [r3, #24]
 800b8a4:	f003 0310 	and.w	r3, r3, #16
 800b8a8:	2b10      	cmp	r3, #16
 800b8aa:	bf0c      	ite	eq
 800b8ac:	2301      	moveq	r3, #1
 800b8ae:	2300      	movne	r3, #0
 800b8b0:	b2db      	uxtb	r3, r3
 800b8b2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800b8b4:	7ffb      	ldrb	r3, [r7, #31]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d102      	bne.n	800b8c0 <HAL_I2C_IsDeviceReady+0x130>
 800b8ba:	7fbb      	ldrb	r3, [r7, #30]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d0c4      	beq.n	800b84a <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	699b      	ldr	r3, [r3, #24]
 800b8c6:	f003 0310 	and.w	r3, r3, #16
 800b8ca:	2b10      	cmp	r3, #16
 800b8cc:	d01a      	beq.n	800b904 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800b8ce:	69bb      	ldr	r3, [r7, #24]
 800b8d0:	9300      	str	r3, [sp, #0]
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	2120      	movs	r1, #32
 800b8d8:	68f8      	ldr	r0, [r7, #12]
 800b8da:	f000 f911 	bl	800bb00 <I2C_WaitOnFlagUntilTimeout>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d001      	beq.n	800b8e8 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	e03b      	b.n	800b960 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	2220      	movs	r2, #32
 800b8ee:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	2220      	movs	r2, #32
 800b8f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 800b900:	2300      	movs	r3, #0
 800b902:	e02d      	b.n	800b960 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800b904:	69bb      	ldr	r3, [r7, #24]
 800b906:	9300      	str	r3, [sp, #0]
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	2200      	movs	r2, #0
 800b90c:	2120      	movs	r1, #32
 800b90e:	68f8      	ldr	r0, [r7, #12]
 800b910:	f000 f8f6 	bl	800bb00 <I2C_WaitOnFlagUntilTimeout>
 800b914:	4603      	mov	r3, r0
 800b916:	2b00      	cmp	r3, #0
 800b918:	d001      	beq.n	800b91e <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800b91a:	2301      	movs	r3, #1
 800b91c:	e020      	b.n	800b960 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	2210      	movs	r2, #16
 800b924:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	2220      	movs	r2, #32
 800b92c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	3301      	adds	r3, #1
 800b932:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	687a      	ldr	r2, [r7, #4]
 800b938:	429a      	cmp	r2, r3
 800b93a:	f63f af56 	bhi.w	800b7ea <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2220      	movs	r2, #32
 800b942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b94a:	f043 0220 	orr.w	r2, r3, #32
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2200      	movs	r2, #0
 800b956:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800b95a:	2301      	movs	r3, #1
 800b95c:	e000      	b.n	800b960 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800b95e:	2302      	movs	r3, #2
  }
}
 800b960:	4618      	mov	r0, r3
 800b962:	3720      	adds	r7, #32
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}

0800b968 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b086      	sub	sp, #24
 800b96c:	af02      	add	r7, sp, #8
 800b96e:	60f8      	str	r0, [r7, #12]
 800b970:	4608      	mov	r0, r1
 800b972:	4611      	mov	r1, r2
 800b974:	461a      	mov	r2, r3
 800b976:	4603      	mov	r3, r0
 800b978:	817b      	strh	r3, [r7, #10]
 800b97a:	460b      	mov	r3, r1
 800b97c:	813b      	strh	r3, [r7, #8]
 800b97e:	4613      	mov	r3, r2
 800b980:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b982:	88fb      	ldrh	r3, [r7, #6]
 800b984:	b2da      	uxtb	r2, r3
 800b986:	8979      	ldrh	r1, [r7, #10]
 800b988:	4b20      	ldr	r3, [pc, #128]	@ (800ba0c <I2C_RequestMemoryWrite+0xa4>)
 800b98a:	9300      	str	r3, [sp, #0]
 800b98c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b990:	68f8      	ldr	r0, [r7, #12]
 800b992:	f000 fa79 	bl	800be88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b996:	69fa      	ldr	r2, [r7, #28]
 800b998:	69b9      	ldr	r1, [r7, #24]
 800b99a:	68f8      	ldr	r0, [r7, #12]
 800b99c:	f000 f909 	bl	800bbb2 <I2C_WaitOnTXISFlagUntilTimeout>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d001      	beq.n	800b9aa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	e02c      	b.n	800ba04 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b9aa:	88fb      	ldrh	r3, [r7, #6]
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d105      	bne.n	800b9bc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b9b0:	893b      	ldrh	r3, [r7, #8]
 800b9b2:	b2da      	uxtb	r2, r3
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	629a      	str	r2, [r3, #40]	@ 0x28
 800b9ba:	e015      	b.n	800b9e8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b9bc:	893b      	ldrh	r3, [r7, #8]
 800b9be:	0a1b      	lsrs	r3, r3, #8
 800b9c0:	b29b      	uxth	r3, r3
 800b9c2:	b2da      	uxtb	r2, r3
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b9ca:	69fa      	ldr	r2, [r7, #28]
 800b9cc:	69b9      	ldr	r1, [r7, #24]
 800b9ce:	68f8      	ldr	r0, [r7, #12]
 800b9d0:	f000 f8ef 	bl	800bbb2 <I2C_WaitOnTXISFlagUntilTimeout>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d001      	beq.n	800b9de <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800b9da:	2301      	movs	r3, #1
 800b9dc:	e012      	b.n	800ba04 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b9de:	893b      	ldrh	r3, [r7, #8]
 800b9e0:	b2da      	uxtb	r2, r3
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b9e8:	69fb      	ldr	r3, [r7, #28]
 800b9ea:	9300      	str	r3, [sp, #0]
 800b9ec:	69bb      	ldr	r3, [r7, #24]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	2180      	movs	r1, #128	@ 0x80
 800b9f2:	68f8      	ldr	r0, [r7, #12]
 800b9f4:	f000 f884 	bl	800bb00 <I2C_WaitOnFlagUntilTimeout>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d001      	beq.n	800ba02 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	e000      	b.n	800ba04 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800ba02:	2300      	movs	r3, #0
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3710      	adds	r7, #16
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}
 800ba0c:	80002000 	.word	0x80002000

0800ba10 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b086      	sub	sp, #24
 800ba14:	af02      	add	r7, sp, #8
 800ba16:	60f8      	str	r0, [r7, #12]
 800ba18:	4608      	mov	r0, r1
 800ba1a:	4611      	mov	r1, r2
 800ba1c:	461a      	mov	r2, r3
 800ba1e:	4603      	mov	r3, r0
 800ba20:	817b      	strh	r3, [r7, #10]
 800ba22:	460b      	mov	r3, r1
 800ba24:	813b      	strh	r3, [r7, #8]
 800ba26:	4613      	mov	r3, r2
 800ba28:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ba2a:	88fb      	ldrh	r3, [r7, #6]
 800ba2c:	b2da      	uxtb	r2, r3
 800ba2e:	8979      	ldrh	r1, [r7, #10]
 800ba30:	4b20      	ldr	r3, [pc, #128]	@ (800bab4 <I2C_RequestMemoryRead+0xa4>)
 800ba32:	9300      	str	r3, [sp, #0]
 800ba34:	2300      	movs	r3, #0
 800ba36:	68f8      	ldr	r0, [r7, #12]
 800ba38:	f000 fa26 	bl	800be88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ba3c:	69fa      	ldr	r2, [r7, #28]
 800ba3e:	69b9      	ldr	r1, [r7, #24]
 800ba40:	68f8      	ldr	r0, [r7, #12]
 800ba42:	f000 f8b6 	bl	800bbb2 <I2C_WaitOnTXISFlagUntilTimeout>
 800ba46:	4603      	mov	r3, r0
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d001      	beq.n	800ba50 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	e02c      	b.n	800baaa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ba50:	88fb      	ldrh	r3, [r7, #6]
 800ba52:	2b01      	cmp	r3, #1
 800ba54:	d105      	bne.n	800ba62 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ba56:	893b      	ldrh	r3, [r7, #8]
 800ba58:	b2da      	uxtb	r2, r3
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	629a      	str	r2, [r3, #40]	@ 0x28
 800ba60:	e015      	b.n	800ba8e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ba62:	893b      	ldrh	r3, [r7, #8]
 800ba64:	0a1b      	lsrs	r3, r3, #8
 800ba66:	b29b      	uxth	r3, r3
 800ba68:	b2da      	uxtb	r2, r3
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ba70:	69fa      	ldr	r2, [r7, #28]
 800ba72:	69b9      	ldr	r1, [r7, #24]
 800ba74:	68f8      	ldr	r0, [r7, #12]
 800ba76:	f000 f89c 	bl	800bbb2 <I2C_WaitOnTXISFlagUntilTimeout>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d001      	beq.n	800ba84 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800ba80:	2301      	movs	r3, #1
 800ba82:	e012      	b.n	800baaa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ba84:	893b      	ldrh	r3, [r7, #8]
 800ba86:	b2da      	uxtb	r2, r3
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800ba8e:	69fb      	ldr	r3, [r7, #28]
 800ba90:	9300      	str	r3, [sp, #0]
 800ba92:	69bb      	ldr	r3, [r7, #24]
 800ba94:	2200      	movs	r2, #0
 800ba96:	2140      	movs	r1, #64	@ 0x40
 800ba98:	68f8      	ldr	r0, [r7, #12]
 800ba9a:	f000 f831 	bl	800bb00 <I2C_WaitOnFlagUntilTimeout>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d001      	beq.n	800baa8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800baa4:	2301      	movs	r3, #1
 800baa6:	e000      	b.n	800baaa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800baa8:	2300      	movs	r3, #0
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3710      	adds	r7, #16
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	80002000 	.word	0x80002000

0800bab8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800bab8:	b480      	push	{r7}
 800baba:	b083      	sub	sp, #12
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	699b      	ldr	r3, [r3, #24]
 800bac6:	f003 0302 	and.w	r3, r3, #2
 800baca:	2b02      	cmp	r3, #2
 800bacc:	d103      	bne.n	800bad6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	2200      	movs	r2, #0
 800bad4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	699b      	ldr	r3, [r3, #24]
 800badc:	f003 0301 	and.w	r3, r3, #1
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d007      	beq.n	800baf4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	699a      	ldr	r2, [r3, #24]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f042 0201 	orr.w	r2, r2, #1
 800baf2:	619a      	str	r2, [r3, #24]
  }
}
 800baf4:	bf00      	nop
 800baf6:	370c      	adds	r7, #12
 800baf8:	46bd      	mov	sp, r7
 800bafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafe:	4770      	bx	lr

0800bb00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	60f8      	str	r0, [r7, #12]
 800bb08:	60b9      	str	r1, [r7, #8]
 800bb0a:	603b      	str	r3, [r7, #0]
 800bb0c:	4613      	mov	r3, r2
 800bb0e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bb10:	e03b      	b.n	800bb8a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bb12:	69ba      	ldr	r2, [r7, #24]
 800bb14:	6839      	ldr	r1, [r7, #0]
 800bb16:	68f8      	ldr	r0, [r7, #12]
 800bb18:	f000 f8d6 	bl	800bcc8 <I2C_IsErrorOccurred>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d001      	beq.n	800bb26 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800bb22:	2301      	movs	r3, #1
 800bb24:	e041      	b.n	800bbaa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bb2c:	d02d      	beq.n	800bb8a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb2e:	f7fd fd37 	bl	80095a0 <HAL_GetTick>
 800bb32:	4602      	mov	r2, r0
 800bb34:	69bb      	ldr	r3, [r7, #24]
 800bb36:	1ad3      	subs	r3, r2, r3
 800bb38:	683a      	ldr	r2, [r7, #0]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d302      	bcc.n	800bb44 <I2C_WaitOnFlagUntilTimeout+0x44>
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d122      	bne.n	800bb8a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	699a      	ldr	r2, [r3, #24]
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	4013      	ands	r3, r2
 800bb4e:	68ba      	ldr	r2, [r7, #8]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	bf0c      	ite	eq
 800bb54:	2301      	moveq	r3, #1
 800bb56:	2300      	movne	r3, #0
 800bb58:	b2db      	uxtb	r3, r3
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	79fb      	ldrb	r3, [r7, #7]
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	d113      	bne.n	800bb8a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb66:	f043 0220 	orr.w	r2, r3, #32
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2220      	movs	r2, #32
 800bb72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	2200      	movs	r2, #0
 800bb82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800bb86:	2301      	movs	r3, #1
 800bb88:	e00f      	b.n	800bbaa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	699a      	ldr	r2, [r3, #24]
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	4013      	ands	r3, r2
 800bb94:	68ba      	ldr	r2, [r7, #8]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	bf0c      	ite	eq
 800bb9a:	2301      	moveq	r3, #1
 800bb9c:	2300      	movne	r3, #0
 800bb9e:	b2db      	uxtb	r3, r3
 800bba0:	461a      	mov	r2, r3
 800bba2:	79fb      	ldrb	r3, [r7, #7]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d0b4      	beq.n	800bb12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bba8:	2300      	movs	r3, #0
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3710      	adds	r7, #16
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}

0800bbb2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800bbb2:	b580      	push	{r7, lr}
 800bbb4:	b084      	sub	sp, #16
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	60f8      	str	r0, [r7, #12]
 800bbba:	60b9      	str	r1, [r7, #8]
 800bbbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bbbe:	e033      	b.n	800bc28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	68b9      	ldr	r1, [r7, #8]
 800bbc4:	68f8      	ldr	r0, [r7, #12]
 800bbc6:	f000 f87f 	bl	800bcc8 <I2C_IsErrorOccurred>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d001      	beq.n	800bbd4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	e031      	b.n	800bc38 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bbda:	d025      	beq.n	800bc28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bbdc:	f7fd fce0 	bl	80095a0 <HAL_GetTick>
 800bbe0:	4602      	mov	r2, r0
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	1ad3      	subs	r3, r2, r3
 800bbe6:	68ba      	ldr	r2, [r7, #8]
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d302      	bcc.n	800bbf2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d11a      	bne.n	800bc28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	699b      	ldr	r3, [r3, #24]
 800bbf8:	f003 0302 	and.w	r3, r3, #2
 800bbfc:	2b02      	cmp	r3, #2
 800bbfe:	d013      	beq.n	800bc28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc04:	f043 0220 	orr.w	r2, r3, #32
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2220      	movs	r2, #32
 800bc10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	2200      	movs	r2, #0
 800bc18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800bc24:	2301      	movs	r3, #1
 800bc26:	e007      	b.n	800bc38 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	699b      	ldr	r3, [r3, #24]
 800bc2e:	f003 0302 	and.w	r3, r3, #2
 800bc32:	2b02      	cmp	r3, #2
 800bc34:	d1c4      	bne.n	800bbc0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bc36:	2300      	movs	r3, #0
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3710      	adds	r7, #16
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}

0800bc40 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b084      	sub	sp, #16
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	60f8      	str	r0, [r7, #12]
 800bc48:	60b9      	str	r1, [r7, #8]
 800bc4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bc4c:	e02f      	b.n	800bcae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bc4e:	687a      	ldr	r2, [r7, #4]
 800bc50:	68b9      	ldr	r1, [r7, #8]
 800bc52:	68f8      	ldr	r0, [r7, #12]
 800bc54:	f000 f838 	bl	800bcc8 <I2C_IsErrorOccurred>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d001      	beq.n	800bc62 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bc5e:	2301      	movs	r3, #1
 800bc60:	e02d      	b.n	800bcbe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc62:	f7fd fc9d 	bl	80095a0 <HAL_GetTick>
 800bc66:	4602      	mov	r2, r0
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	1ad3      	subs	r3, r2, r3
 800bc6c:	68ba      	ldr	r2, [r7, #8]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d302      	bcc.n	800bc78 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d11a      	bne.n	800bcae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	699b      	ldr	r3, [r3, #24]
 800bc7e:	f003 0320 	and.w	r3, r3, #32
 800bc82:	2b20      	cmp	r3, #32
 800bc84:	d013      	beq.n	800bcae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc8a:	f043 0220 	orr.w	r2, r3, #32
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	2220      	movs	r2, #32
 800bc96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2200      	movs	r2, #0
 800bca6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800bcaa:	2301      	movs	r3, #1
 800bcac:	e007      	b.n	800bcbe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	699b      	ldr	r3, [r3, #24]
 800bcb4:	f003 0320 	and.w	r3, r3, #32
 800bcb8:	2b20      	cmp	r3, #32
 800bcba:	d1c8      	bne.n	800bc4e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bcbc:	2300      	movs	r3, #0
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3710      	adds	r7, #16
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}
	...

0800bcc8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b08a      	sub	sp, #40	@ 0x28
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	60b9      	str	r1, [r7, #8]
 800bcd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	699b      	ldr	r3, [r3, #24]
 800bce0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800bce2:	2300      	movs	r3, #0
 800bce4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800bcea:	69bb      	ldr	r3, [r7, #24]
 800bcec:	f003 0310 	and.w	r3, r3, #16
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d068      	beq.n	800bdc6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	2210      	movs	r2, #16
 800bcfa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bcfc:	e049      	b.n	800bd92 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bd04:	d045      	beq.n	800bd92 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bd06:	f7fd fc4b 	bl	80095a0 <HAL_GetTick>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	69fb      	ldr	r3, [r7, #28]
 800bd0e:	1ad3      	subs	r3, r2, r3
 800bd10:	68ba      	ldr	r2, [r7, #8]
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d302      	bcc.n	800bd1c <I2C_IsErrorOccurred+0x54>
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d13a      	bne.n	800bd92 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	685b      	ldr	r3, [r3, #4]
 800bd22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bd26:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bd2e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	699b      	ldr	r3, [r3, #24]
 800bd36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bd3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bd3e:	d121      	bne.n	800bd84 <I2C_IsErrorOccurred+0xbc>
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bd46:	d01d      	beq.n	800bd84 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800bd48:	7cfb      	ldrb	r3, [r7, #19]
 800bd4a:	2b20      	cmp	r3, #32
 800bd4c:	d01a      	beq.n	800bd84 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	685a      	ldr	r2, [r3, #4]
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bd5c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800bd5e:	f7fd fc1f 	bl	80095a0 <HAL_GetTick>
 800bd62:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bd64:	e00e      	b.n	800bd84 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800bd66:	f7fd fc1b 	bl	80095a0 <HAL_GetTick>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	69fb      	ldr	r3, [r7, #28]
 800bd6e:	1ad3      	subs	r3, r2, r3
 800bd70:	2b19      	cmp	r3, #25
 800bd72:	d907      	bls.n	800bd84 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800bd74:	6a3b      	ldr	r3, [r7, #32]
 800bd76:	f043 0320 	orr.w	r3, r3, #32
 800bd7a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800bd82:	e006      	b.n	800bd92 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	699b      	ldr	r3, [r3, #24]
 800bd8a:	f003 0320 	and.w	r3, r3, #32
 800bd8e:	2b20      	cmp	r3, #32
 800bd90:	d1e9      	bne.n	800bd66 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	699b      	ldr	r3, [r3, #24]
 800bd98:	f003 0320 	and.w	r3, r3, #32
 800bd9c:	2b20      	cmp	r3, #32
 800bd9e:	d003      	beq.n	800bda8 <I2C_IsErrorOccurred+0xe0>
 800bda0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d0aa      	beq.n	800bcfe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800bda8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d103      	bne.n	800bdb8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	2220      	movs	r2, #32
 800bdb6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800bdb8:	6a3b      	ldr	r3, [r7, #32]
 800bdba:	f043 0304 	orr.w	r3, r3, #4
 800bdbe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	699b      	ldr	r3, [r3, #24]
 800bdcc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800bdce:	69bb      	ldr	r3, [r7, #24]
 800bdd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d00b      	beq.n	800bdf0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800bdd8:	6a3b      	ldr	r3, [r7, #32]
 800bdda:	f043 0301 	orr.w	r3, r3, #1
 800bdde:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bde8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800bdea:	2301      	movs	r3, #1
 800bdec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800bdf0:	69bb      	ldr	r3, [r7, #24]
 800bdf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d00b      	beq.n	800be12 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800bdfa:	6a3b      	ldr	r3, [r7, #32]
 800bdfc:	f043 0308 	orr.w	r3, r3, #8
 800be00:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800be0a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800be0c:	2301      	movs	r3, #1
 800be0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800be12:	69bb      	ldr	r3, [r7, #24]
 800be14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d00b      	beq.n	800be34 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800be1c:	6a3b      	ldr	r3, [r7, #32]
 800be1e:	f043 0302 	orr.w	r3, r3, #2
 800be22:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800be2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800be2e:	2301      	movs	r3, #1
 800be30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800be34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d01c      	beq.n	800be76 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800be3c:	68f8      	ldr	r0, [r7, #12]
 800be3e:	f7ff fe3b 	bl	800bab8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	6859      	ldr	r1, [r3, #4]
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	681a      	ldr	r2, [r3, #0]
 800be4c:	4b0d      	ldr	r3, [pc, #52]	@ (800be84 <I2C_IsErrorOccurred+0x1bc>)
 800be4e:	400b      	ands	r3, r1
 800be50:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800be56:	6a3b      	ldr	r3, [r7, #32]
 800be58:	431a      	orrs	r2, r3
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2220      	movs	r2, #32
 800be62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2200      	movs	r2, #0
 800be6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	2200      	movs	r2, #0
 800be72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800be76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3728      	adds	r7, #40	@ 0x28
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	fe00e800 	.word	0xfe00e800

0800be88 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800be88:	b480      	push	{r7}
 800be8a:	b087      	sub	sp, #28
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	60f8      	str	r0, [r7, #12]
 800be90:	607b      	str	r3, [r7, #4]
 800be92:	460b      	mov	r3, r1
 800be94:	817b      	strh	r3, [r7, #10]
 800be96:	4613      	mov	r3, r2
 800be98:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800be9a:	897b      	ldrh	r3, [r7, #10]
 800be9c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bea0:	7a7b      	ldrb	r3, [r7, #9]
 800bea2:	041b      	lsls	r3, r3, #16
 800bea4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bea8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800beae:	6a3b      	ldr	r3, [r7, #32]
 800beb0:	4313      	orrs	r3, r2
 800beb2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800beb6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	685a      	ldr	r2, [r3, #4]
 800bebe:	6a3b      	ldr	r3, [r7, #32]
 800bec0:	0d5b      	lsrs	r3, r3, #21
 800bec2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800bec6:	4b08      	ldr	r3, [pc, #32]	@ (800bee8 <I2C_TransferConfig+0x60>)
 800bec8:	430b      	orrs	r3, r1
 800beca:	43db      	mvns	r3, r3
 800becc:	ea02 0103 	and.w	r1, r2, r3
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	697a      	ldr	r2, [r7, #20]
 800bed6:	430a      	orrs	r2, r1
 800bed8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800beda:	bf00      	nop
 800bedc:	371c      	adds	r7, #28
 800bede:	46bd      	mov	sp, r7
 800bee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee4:	4770      	bx	lr
 800bee6:	bf00      	nop
 800bee8:	03ff63ff 	.word	0x03ff63ff

0800beec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800beec:	b480      	push	{r7}
 800beee:	b083      	sub	sp, #12
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800befc:	b2db      	uxtb	r3, r3
 800befe:	2b20      	cmp	r3, #32
 800bf00:	d138      	bne.n	800bf74 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	d101      	bne.n	800bf10 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800bf0c:	2302      	movs	r3, #2
 800bf0e:	e032      	b.n	800bf76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2201      	movs	r2, #1
 800bf14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2224      	movs	r2, #36	@ 0x24
 800bf1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	681a      	ldr	r2, [r3, #0]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f022 0201 	bic.w	r2, r2, #1
 800bf2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	681a      	ldr	r2, [r3, #0]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800bf3e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	6819      	ldr	r1, [r3, #0]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	683a      	ldr	r2, [r7, #0]
 800bf4c:	430a      	orrs	r2, r1
 800bf4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	681a      	ldr	r2, [r3, #0]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f042 0201 	orr.w	r2, r2, #1
 800bf5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2220      	movs	r2, #32
 800bf64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800bf70:	2300      	movs	r3, #0
 800bf72:	e000      	b.n	800bf76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bf74:	2302      	movs	r3, #2
  }
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	370c      	adds	r7, #12
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf80:	4770      	bx	lr

0800bf82 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800bf82:	b480      	push	{r7}
 800bf84:	b085      	sub	sp, #20
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
 800bf8a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bf92:	b2db      	uxtb	r3, r3
 800bf94:	2b20      	cmp	r3, #32
 800bf96:	d139      	bne.n	800c00c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bf9e:	2b01      	cmp	r3, #1
 800bfa0:	d101      	bne.n	800bfa6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800bfa2:	2302      	movs	r3, #2
 800bfa4:	e033      	b.n	800c00e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2201      	movs	r2, #1
 800bfaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2224      	movs	r2, #36	@ 0x24
 800bfb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	681a      	ldr	r2, [r3, #0]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f022 0201 	bic.w	r2, r2, #1
 800bfc4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800bfd4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	021b      	lsls	r3, r3, #8
 800bfda:	68fa      	ldr	r2, [r7, #12]
 800bfdc:	4313      	orrs	r3, r2
 800bfde:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	68fa      	ldr	r2, [r7, #12]
 800bfe6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	681a      	ldr	r2, [r3, #0]
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f042 0201 	orr.w	r2, r2, #1
 800bff6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2220      	movs	r2, #32
 800bffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2200      	movs	r2, #0
 800c004:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800c008:	2300      	movs	r3, #0
 800c00a:	e000      	b.n	800c00e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c00c:	2302      	movs	r3, #2
  }
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3714      	adds	r7, #20
 800c012:	46bd      	mov	sp, r7
 800c014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c018:	4770      	bx	lr
	...

0800c01c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800c01c:	b480      	push	{r7}
 800c01e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800c020:	4b04      	ldr	r3, [pc, #16]	@ (800c034 <HAL_PWREx_GetVoltageRange+0x18>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800c028:	4618      	mov	r0, r3
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr
 800c032:	bf00      	nop
 800c034:	40007000 	.word	0x40007000

0800c038 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c038:	b480      	push	{r7}
 800c03a:	b085      	sub	sp, #20
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c046:	d130      	bne.n	800c0aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800c048:	4b23      	ldr	r3, [pc, #140]	@ (800c0d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c050:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c054:	d038      	beq.n	800c0c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c056:	4b20      	ldr	r3, [pc, #128]	@ (800c0d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800c05e:	4a1e      	ldr	r2, [pc, #120]	@ (800c0d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c060:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c064:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c066:	4b1d      	ldr	r3, [pc, #116]	@ (800c0dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	2232      	movs	r2, #50	@ 0x32
 800c06c:	fb02 f303 	mul.w	r3, r2, r3
 800c070:	4a1b      	ldr	r2, [pc, #108]	@ (800c0e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800c072:	fba2 2303 	umull	r2, r3, r2, r3
 800c076:	0c9b      	lsrs	r3, r3, #18
 800c078:	3301      	adds	r3, #1
 800c07a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c07c:	e002      	b.n	800c084 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	3b01      	subs	r3, #1
 800c082:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c084:	4b14      	ldr	r3, [pc, #80]	@ (800c0d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c086:	695b      	ldr	r3, [r3, #20]
 800c088:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c08c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c090:	d102      	bne.n	800c098 <HAL_PWREx_ControlVoltageScaling+0x60>
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d1f2      	bne.n	800c07e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c098:	4b0f      	ldr	r3, [pc, #60]	@ (800c0d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c09a:	695b      	ldr	r3, [r3, #20]
 800c09c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c0a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c0a4:	d110      	bne.n	800c0c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800c0a6:	2303      	movs	r3, #3
 800c0a8:	e00f      	b.n	800c0ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800c0aa:	4b0b      	ldr	r3, [pc, #44]	@ (800c0d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c0b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c0b6:	d007      	beq.n	800c0c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c0b8:	4b07      	ldr	r3, [pc, #28]	@ (800c0d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800c0c0:	4a05      	ldr	r2, [pc, #20]	@ (800c0d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c0c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c0c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800c0c8:	2300      	movs	r3, #0
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3714      	adds	r7, #20
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr
 800c0d6:	bf00      	nop
 800c0d8:	40007000 	.word	0x40007000
 800c0dc:	2000005c 	.word	0x2000005c
 800c0e0:	431bde83 	.word	0x431bde83

0800c0e4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b088      	sub	sp, #32
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d102      	bne.n	800c0f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	f000 bc02 	b.w	800c8fc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c0f8:	4b96      	ldr	r3, [pc, #600]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c0fa:	689b      	ldr	r3, [r3, #8]
 800c0fc:	f003 030c 	and.w	r3, r3, #12
 800c100:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c102:	4b94      	ldr	r3, [pc, #592]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c104:	68db      	ldr	r3, [r3, #12]
 800c106:	f003 0303 	and.w	r3, r3, #3
 800c10a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f003 0310 	and.w	r3, r3, #16
 800c114:	2b00      	cmp	r3, #0
 800c116:	f000 80e4 	beq.w	800c2e2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c11a:	69bb      	ldr	r3, [r7, #24]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d007      	beq.n	800c130 <HAL_RCC_OscConfig+0x4c>
 800c120:	69bb      	ldr	r3, [r7, #24]
 800c122:	2b0c      	cmp	r3, #12
 800c124:	f040 808b 	bne.w	800c23e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	2b01      	cmp	r3, #1
 800c12c:	f040 8087 	bne.w	800c23e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c130:	4b88      	ldr	r3, [pc, #544]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f003 0302 	and.w	r3, r3, #2
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d005      	beq.n	800c148 <HAL_RCC_OscConfig+0x64>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	699b      	ldr	r3, [r3, #24]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d101      	bne.n	800c148 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800c144:	2301      	movs	r3, #1
 800c146:	e3d9      	b.n	800c8fc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6a1a      	ldr	r2, [r3, #32]
 800c14c:	4b81      	ldr	r3, [pc, #516]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f003 0308 	and.w	r3, r3, #8
 800c154:	2b00      	cmp	r3, #0
 800c156:	d004      	beq.n	800c162 <HAL_RCC_OscConfig+0x7e>
 800c158:	4b7e      	ldr	r3, [pc, #504]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c160:	e005      	b.n	800c16e <HAL_RCC_OscConfig+0x8a>
 800c162:	4b7c      	ldr	r3, [pc, #496]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c164:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c168:	091b      	lsrs	r3, r3, #4
 800c16a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c16e:	4293      	cmp	r3, r2
 800c170:	d223      	bcs.n	800c1ba <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6a1b      	ldr	r3, [r3, #32]
 800c176:	4618      	mov	r0, r3
 800c178:	f000 fd8c 	bl	800cc94 <RCC_SetFlashLatencyFromMSIRange>
 800c17c:	4603      	mov	r3, r0
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d001      	beq.n	800c186 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800c182:	2301      	movs	r3, #1
 800c184:	e3ba      	b.n	800c8fc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c186:	4b73      	ldr	r3, [pc, #460]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	4a72      	ldr	r2, [pc, #456]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c18c:	f043 0308 	orr.w	r3, r3, #8
 800c190:	6013      	str	r3, [r2, #0]
 800c192:	4b70      	ldr	r3, [pc, #448]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6a1b      	ldr	r3, [r3, #32]
 800c19e:	496d      	ldr	r1, [pc, #436]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c1a0:	4313      	orrs	r3, r2
 800c1a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c1a4:	4b6b      	ldr	r3, [pc, #428]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c1a6:	685b      	ldr	r3, [r3, #4]
 800c1a8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	69db      	ldr	r3, [r3, #28]
 800c1b0:	021b      	lsls	r3, r3, #8
 800c1b2:	4968      	ldr	r1, [pc, #416]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c1b4:	4313      	orrs	r3, r2
 800c1b6:	604b      	str	r3, [r1, #4]
 800c1b8:	e025      	b.n	800c206 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c1ba:	4b66      	ldr	r3, [pc, #408]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	4a65      	ldr	r2, [pc, #404]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c1c0:	f043 0308 	orr.w	r3, r3, #8
 800c1c4:	6013      	str	r3, [r2, #0]
 800c1c6:	4b63      	ldr	r3, [pc, #396]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6a1b      	ldr	r3, [r3, #32]
 800c1d2:	4960      	ldr	r1, [pc, #384]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c1d4:	4313      	orrs	r3, r2
 800c1d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c1d8:	4b5e      	ldr	r3, [pc, #376]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c1da:	685b      	ldr	r3, [r3, #4]
 800c1dc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	69db      	ldr	r3, [r3, #28]
 800c1e4:	021b      	lsls	r3, r3, #8
 800c1e6:	495b      	ldr	r1, [pc, #364]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c1e8:	4313      	orrs	r3, r2
 800c1ea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c1ec:	69bb      	ldr	r3, [r7, #24]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d109      	bne.n	800c206 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6a1b      	ldr	r3, [r3, #32]
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f000 fd4c 	bl	800cc94 <RCC_SetFlashLatencyFromMSIRange>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d001      	beq.n	800c206 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800c202:	2301      	movs	r3, #1
 800c204:	e37a      	b.n	800c8fc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c206:	f000 fc81 	bl	800cb0c <HAL_RCC_GetSysClockFreq>
 800c20a:	4602      	mov	r2, r0
 800c20c:	4b51      	ldr	r3, [pc, #324]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c20e:	689b      	ldr	r3, [r3, #8]
 800c210:	091b      	lsrs	r3, r3, #4
 800c212:	f003 030f 	and.w	r3, r3, #15
 800c216:	4950      	ldr	r1, [pc, #320]	@ (800c358 <HAL_RCC_OscConfig+0x274>)
 800c218:	5ccb      	ldrb	r3, [r1, r3]
 800c21a:	f003 031f 	and.w	r3, r3, #31
 800c21e:	fa22 f303 	lsr.w	r3, r2, r3
 800c222:	4a4e      	ldr	r2, [pc, #312]	@ (800c35c <HAL_RCC_OscConfig+0x278>)
 800c224:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800c226:	4b4e      	ldr	r3, [pc, #312]	@ (800c360 <HAL_RCC_OscConfig+0x27c>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7fd f968 	bl	8009500 <HAL_InitTick>
 800c230:	4603      	mov	r3, r0
 800c232:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800c234:	7bfb      	ldrb	r3, [r7, #15]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d052      	beq.n	800c2e0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800c23a:	7bfb      	ldrb	r3, [r7, #15]
 800c23c:	e35e      	b.n	800c8fc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	699b      	ldr	r3, [r3, #24]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d032      	beq.n	800c2ac <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c246:	4b43      	ldr	r3, [pc, #268]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	4a42      	ldr	r2, [pc, #264]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c24c:	f043 0301 	orr.w	r3, r3, #1
 800c250:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c252:	f7fd f9a5 	bl	80095a0 <HAL_GetTick>
 800c256:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c258:	e008      	b.n	800c26c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c25a:	f7fd f9a1 	bl	80095a0 <HAL_GetTick>
 800c25e:	4602      	mov	r2, r0
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	1ad3      	subs	r3, r2, r3
 800c264:	2b02      	cmp	r3, #2
 800c266:	d901      	bls.n	800c26c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800c268:	2303      	movs	r3, #3
 800c26a:	e347      	b.n	800c8fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c26c:	4b39      	ldr	r3, [pc, #228]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f003 0302 	and.w	r3, r3, #2
 800c274:	2b00      	cmp	r3, #0
 800c276:	d0f0      	beq.n	800c25a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c278:	4b36      	ldr	r3, [pc, #216]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	4a35      	ldr	r2, [pc, #212]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c27e:	f043 0308 	orr.w	r3, r3, #8
 800c282:	6013      	str	r3, [r2, #0]
 800c284:	4b33      	ldr	r3, [pc, #204]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6a1b      	ldr	r3, [r3, #32]
 800c290:	4930      	ldr	r1, [pc, #192]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c292:	4313      	orrs	r3, r2
 800c294:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c296:	4b2f      	ldr	r3, [pc, #188]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c298:	685b      	ldr	r3, [r3, #4]
 800c29a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	69db      	ldr	r3, [r3, #28]
 800c2a2:	021b      	lsls	r3, r3, #8
 800c2a4:	492b      	ldr	r1, [pc, #172]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	604b      	str	r3, [r1, #4]
 800c2aa:	e01a      	b.n	800c2e2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c2ac:	4b29      	ldr	r3, [pc, #164]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a28      	ldr	r2, [pc, #160]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c2b2:	f023 0301 	bic.w	r3, r3, #1
 800c2b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c2b8:	f7fd f972 	bl	80095a0 <HAL_GetTick>
 800c2bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c2be:	e008      	b.n	800c2d2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c2c0:	f7fd f96e 	bl	80095a0 <HAL_GetTick>
 800c2c4:	4602      	mov	r2, r0
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	1ad3      	subs	r3, r2, r3
 800c2ca:	2b02      	cmp	r3, #2
 800c2cc:	d901      	bls.n	800c2d2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800c2ce:	2303      	movs	r3, #3
 800c2d0:	e314      	b.n	800c8fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c2d2:	4b20      	ldr	r3, [pc, #128]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	f003 0302 	and.w	r3, r3, #2
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d1f0      	bne.n	800c2c0 <HAL_RCC_OscConfig+0x1dc>
 800c2de:	e000      	b.n	800c2e2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c2e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f003 0301 	and.w	r3, r3, #1
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d073      	beq.n	800c3d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800c2ee:	69bb      	ldr	r3, [r7, #24]
 800c2f0:	2b08      	cmp	r3, #8
 800c2f2:	d005      	beq.n	800c300 <HAL_RCC_OscConfig+0x21c>
 800c2f4:	69bb      	ldr	r3, [r7, #24]
 800c2f6:	2b0c      	cmp	r3, #12
 800c2f8:	d10e      	bne.n	800c318 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	2b03      	cmp	r3, #3
 800c2fe:	d10b      	bne.n	800c318 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c300:	4b14      	ldr	r3, [pc, #80]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d063      	beq.n	800c3d4 <HAL_RCC_OscConfig+0x2f0>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	685b      	ldr	r3, [r3, #4]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d15f      	bne.n	800c3d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800c314:	2301      	movs	r3, #1
 800c316:	e2f1      	b.n	800c8fc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	685b      	ldr	r3, [r3, #4]
 800c31c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c320:	d106      	bne.n	800c330 <HAL_RCC_OscConfig+0x24c>
 800c322:	4b0c      	ldr	r3, [pc, #48]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	4a0b      	ldr	r2, [pc, #44]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c32c:	6013      	str	r3, [r2, #0]
 800c32e:	e025      	b.n	800c37c <HAL_RCC_OscConfig+0x298>
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	685b      	ldr	r3, [r3, #4]
 800c334:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c338:	d114      	bne.n	800c364 <HAL_RCC_OscConfig+0x280>
 800c33a:	4b06      	ldr	r3, [pc, #24]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	4a05      	ldr	r2, [pc, #20]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c340:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c344:	6013      	str	r3, [r2, #0]
 800c346:	4b03      	ldr	r3, [pc, #12]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	4a02      	ldr	r2, [pc, #8]	@ (800c354 <HAL_RCC_OscConfig+0x270>)
 800c34c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c350:	6013      	str	r3, [r2, #0]
 800c352:	e013      	b.n	800c37c <HAL_RCC_OscConfig+0x298>
 800c354:	40021000 	.word	0x40021000
 800c358:	080113d4 	.word	0x080113d4
 800c35c:	2000005c 	.word	0x2000005c
 800c360:	20000060 	.word	0x20000060
 800c364:	4ba0      	ldr	r3, [pc, #640]	@ (800c5e8 <HAL_RCC_OscConfig+0x504>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	4a9f      	ldr	r2, [pc, #636]	@ (800c5e8 <HAL_RCC_OscConfig+0x504>)
 800c36a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c36e:	6013      	str	r3, [r2, #0]
 800c370:	4b9d      	ldr	r3, [pc, #628]	@ (800c5e8 <HAL_RCC_OscConfig+0x504>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	4a9c      	ldr	r2, [pc, #624]	@ (800c5e8 <HAL_RCC_OscConfig+0x504>)
 800c376:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c37a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	685b      	ldr	r3, [r3, #4]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d013      	beq.n	800c3ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c384:	f7fd f90c 	bl	80095a0 <HAL_GetTick>
 800c388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c38a:	e008      	b.n	800c39e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c38c:	f7fd f908 	bl	80095a0 <HAL_GetTick>
 800c390:	4602      	mov	r2, r0
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	1ad3      	subs	r3, r2, r3
 800c396:	2b64      	cmp	r3, #100	@ 0x64
 800c398:	d901      	bls.n	800c39e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800c39a:	2303      	movs	r3, #3
 800c39c:	e2ae      	b.n	800c8fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c39e:	4b92      	ldr	r3, [pc, #584]	@ (800c5e8 <HAL_RCC_OscConfig+0x504>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d0f0      	beq.n	800c38c <HAL_RCC_OscConfig+0x2a8>
 800c3aa:	e014      	b.n	800c3d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3ac:	f7fd f8f8 	bl	80095a0 <HAL_GetTick>
 800c3b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c3b2:	e008      	b.n	800c3c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c3b4:	f7fd f8f4 	bl	80095a0 <HAL_GetTick>
 800c3b8:	4602      	mov	r2, r0
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	1ad3      	subs	r3, r2, r3
 800c3be:	2b64      	cmp	r3, #100	@ 0x64
 800c3c0:	d901      	bls.n	800c3c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800c3c2:	2303      	movs	r3, #3
 800c3c4:	e29a      	b.n	800c8fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c3c6:	4b88      	ldr	r3, [pc, #544]	@ (800c5e8 <HAL_RCC_OscConfig+0x504>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d1f0      	bne.n	800c3b4 <HAL_RCC_OscConfig+0x2d0>
 800c3d2:	e000      	b.n	800c3d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c3d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	f003 0302 	and.w	r3, r3, #2
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d060      	beq.n	800c4a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800c3e2:	69bb      	ldr	r3, [r7, #24]
 800c3e4:	2b04      	cmp	r3, #4
 800c3e6:	d005      	beq.n	800c3f4 <HAL_RCC_OscConfig+0x310>
 800c3e8:	69bb      	ldr	r3, [r7, #24]
 800c3ea:	2b0c      	cmp	r3, #12
 800c3ec:	d119      	bne.n	800c422 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	2b02      	cmp	r3, #2
 800c3f2:	d116      	bne.n	800c422 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c3f4:	4b7c      	ldr	r3, [pc, #496]	@ (800c5e8 <HAL_RCC_OscConfig+0x504>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d005      	beq.n	800c40c <HAL_RCC_OscConfig+0x328>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	68db      	ldr	r3, [r3, #12]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d101      	bne.n	800c40c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800c408:	2301      	movs	r3, #1
 800c40a:	e277      	b.n	800c8fc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c40c:	4b76      	ldr	r3, [pc, #472]	@ (800c5e8 <HAL_RCC_OscConfig+0x504>)
 800c40e:	685b      	ldr	r3, [r3, #4]
 800c410:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	691b      	ldr	r3, [r3, #16]
 800c418:	061b      	lsls	r3, r3, #24
 800c41a:	4973      	ldr	r1, [pc, #460]	@ (800c5e8 <HAL_RCC_OscConfig+0x504>)
 800c41c:	4313      	orrs	r3, r2
 800c41e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c420:	e040      	b.n	800c4a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	68db      	ldr	r3, [r3, #12]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d023      	beq.n	800c472 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c42a:	4b6f      	ldr	r3, [pc, #444]	@ (800c5e8 <HAL_RCC_OscConfig+0x504>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	4a6e      	ldr	r2, [pc, #440]	@ (800c5e8 <HAL_RCC_OscConfig+0x504>)
 800c430:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c434:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c436:	f7fd f8b3 	bl	80095a0 <HAL_GetTick>
 800c43a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c43c:	e008      	b.n	800c450 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c43e:	f7fd f8af 	bl	80095a0 <HAL_GetTick>
 800c442:	4602      	mov	r2, r0
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	1ad3      	subs	r3, r2, r3
 800c448:	2b02      	cmp	r3, #2
 800c44a:	d901      	bls.n	800c450 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800c44c:	2303      	movs	r3, #3
 800c44e:	e255      	b.n	800c8fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c450:	4b65      	ldr	r3, [pc, #404]	@ (800c5e8 <HAL_RCC_OscConfig+0x504>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d0f0      	beq.n	800c43e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c45c:	4b62      	ldr	r3, [pc, #392]	@ (800c5e8 <HAL_RCC_OscConfig+0x504>)
 800c45e:	685b      	ldr	r3, [r3, #4]
 800c460:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	691b      	ldr	r3, [r3, #16]
 800c468:	061b      	lsls	r3, r3, #24
 800c46a:	495f      	ldr	r1, [pc, #380]	@ (800c5e8 <HAL_RCC_OscConfig+0x504>)
 800c46c:	4313      	orrs	r3, r2
 800c46e:	604b      	str	r3, [r1, #4]
 800c470:	e018      	b.n	800c4a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c472:	4b5d      	ldr	r3, [pc, #372]	@ (800c5e8 <HAL_RCC_OscConfig+0x504>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	4a5c      	ldr	r2, [pc, #368]	@ (800c5e8 <HAL_RCC_OscConfig+0x504>)
 800c478:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c47c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c47e:	f7fd f88f 	bl	80095a0 <HAL_GetTick>
 800c482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c484:	e008      	b.n	800c498 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c486:	f7fd f88b 	bl	80095a0 <HAL_GetTick>
 800c48a:	4602      	mov	r2, r0
 800c48c:	693b      	ldr	r3, [r7, #16]
 800c48e:	1ad3      	subs	r3, r2, r3
 800c490:	2b02      	cmp	r3, #2
 800c492:	d901      	bls.n	800c498 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800c494:	2303      	movs	r3, #3
 800c496:	e231      	b.n	800c8fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c498:	4b53      	ldr	r3, [pc, #332]	@ (800c5e8 <HAL_RCC_OscConfig+0x504>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d1f0      	bne.n	800c486 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f003 0308 	and.w	r3, r3, #8
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d03c      	beq.n	800c52a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	695b      	ldr	r3, [r3, #20]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d01c      	beq.n	800c4f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c4b8:	4b4b      	ldr	r3, [pc, #300]	@ (800c5e8 <HAL_RCC_OscConfig+0x504>)
 800c4ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c4be:	4a4a      	ldr	r2, [pc, #296]	@ (800c5e8 <HAL_RCC_OscConfig+0x504>)
 800c4c0:	f043 0301 	orr.w	r3, r3, #1
 800c4c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4c8:	f7fd f86a 	bl	80095a0 <HAL_GetTick>
 800c4cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c4ce:	e008      	b.n	800c4e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c4d0:	f7fd f866 	bl	80095a0 <HAL_GetTick>
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	1ad3      	subs	r3, r2, r3
 800c4da:	2b02      	cmp	r3, #2
 800c4dc:	d901      	bls.n	800c4e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800c4de:	2303      	movs	r3, #3
 800c4e0:	e20c      	b.n	800c8fc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c4e2:	4b41      	ldr	r3, [pc, #260]	@ (800c5e8 <HAL_RCC_OscConfig+0x504>)
 800c4e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c4e8:	f003 0302 	and.w	r3, r3, #2
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d0ef      	beq.n	800c4d0 <HAL_RCC_OscConfig+0x3ec>
 800c4f0:	e01b      	b.n	800c52a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c4f2:	4b3d      	ldr	r3, [pc, #244]	@ (800c5e8 <HAL_RCC_OscConfig+0x504>)
 800c4f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c4f8:	4a3b      	ldr	r2, [pc, #236]	@ (800c5e8 <HAL_RCC_OscConfig+0x504>)
 800c4fa:	f023 0301 	bic.w	r3, r3, #1
 800c4fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c502:	f7fd f84d 	bl	80095a0 <HAL_GetTick>
 800c506:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c508:	e008      	b.n	800c51c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c50a:	f7fd f849 	bl	80095a0 <HAL_GetTick>
 800c50e:	4602      	mov	r2, r0
 800c510:	693b      	ldr	r3, [r7, #16]
 800c512:	1ad3      	subs	r3, r2, r3
 800c514:	2b02      	cmp	r3, #2
 800c516:	d901      	bls.n	800c51c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800c518:	2303      	movs	r3, #3
 800c51a:	e1ef      	b.n	800c8fc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c51c:	4b32      	ldr	r3, [pc, #200]	@ (800c5e8 <HAL_RCC_OscConfig+0x504>)
 800c51e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c522:	f003 0302 	and.w	r3, r3, #2
 800c526:	2b00      	cmp	r3, #0
 800c528:	d1ef      	bne.n	800c50a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f003 0304 	and.w	r3, r3, #4
 800c532:	2b00      	cmp	r3, #0
 800c534:	f000 80a6 	beq.w	800c684 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c538:	2300      	movs	r3, #0
 800c53a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800c53c:	4b2a      	ldr	r3, [pc, #168]	@ (800c5e8 <HAL_RCC_OscConfig+0x504>)
 800c53e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c544:	2b00      	cmp	r3, #0
 800c546:	d10d      	bne.n	800c564 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c548:	4b27      	ldr	r3, [pc, #156]	@ (800c5e8 <HAL_RCC_OscConfig+0x504>)
 800c54a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c54c:	4a26      	ldr	r2, [pc, #152]	@ (800c5e8 <HAL_RCC_OscConfig+0x504>)
 800c54e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c552:	6593      	str	r3, [r2, #88]	@ 0x58
 800c554:	4b24      	ldr	r3, [pc, #144]	@ (800c5e8 <HAL_RCC_OscConfig+0x504>)
 800c556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c558:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c55c:	60bb      	str	r3, [r7, #8]
 800c55e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c560:	2301      	movs	r3, #1
 800c562:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c564:	4b21      	ldr	r3, [pc, #132]	@ (800c5ec <HAL_RCC_OscConfig+0x508>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d118      	bne.n	800c5a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c570:	4b1e      	ldr	r3, [pc, #120]	@ (800c5ec <HAL_RCC_OscConfig+0x508>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	4a1d      	ldr	r2, [pc, #116]	@ (800c5ec <HAL_RCC_OscConfig+0x508>)
 800c576:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c57a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c57c:	f7fd f810 	bl	80095a0 <HAL_GetTick>
 800c580:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c582:	e008      	b.n	800c596 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c584:	f7fd f80c 	bl	80095a0 <HAL_GetTick>
 800c588:	4602      	mov	r2, r0
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	1ad3      	subs	r3, r2, r3
 800c58e:	2b02      	cmp	r3, #2
 800c590:	d901      	bls.n	800c596 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800c592:	2303      	movs	r3, #3
 800c594:	e1b2      	b.n	800c8fc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c596:	4b15      	ldr	r3, [pc, #84]	@ (800c5ec <HAL_RCC_OscConfig+0x508>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d0f0      	beq.n	800c584 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	689b      	ldr	r3, [r3, #8]
 800c5a6:	2b01      	cmp	r3, #1
 800c5a8:	d108      	bne.n	800c5bc <HAL_RCC_OscConfig+0x4d8>
 800c5aa:	4b0f      	ldr	r3, [pc, #60]	@ (800c5e8 <HAL_RCC_OscConfig+0x504>)
 800c5ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5b0:	4a0d      	ldr	r2, [pc, #52]	@ (800c5e8 <HAL_RCC_OscConfig+0x504>)
 800c5b2:	f043 0301 	orr.w	r3, r3, #1
 800c5b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c5ba:	e029      	b.n	800c610 <HAL_RCC_OscConfig+0x52c>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	689b      	ldr	r3, [r3, #8]
 800c5c0:	2b05      	cmp	r3, #5
 800c5c2:	d115      	bne.n	800c5f0 <HAL_RCC_OscConfig+0x50c>
 800c5c4:	4b08      	ldr	r3, [pc, #32]	@ (800c5e8 <HAL_RCC_OscConfig+0x504>)
 800c5c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5ca:	4a07      	ldr	r2, [pc, #28]	@ (800c5e8 <HAL_RCC_OscConfig+0x504>)
 800c5cc:	f043 0304 	orr.w	r3, r3, #4
 800c5d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c5d4:	4b04      	ldr	r3, [pc, #16]	@ (800c5e8 <HAL_RCC_OscConfig+0x504>)
 800c5d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5da:	4a03      	ldr	r2, [pc, #12]	@ (800c5e8 <HAL_RCC_OscConfig+0x504>)
 800c5dc:	f043 0301 	orr.w	r3, r3, #1
 800c5e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c5e4:	e014      	b.n	800c610 <HAL_RCC_OscConfig+0x52c>
 800c5e6:	bf00      	nop
 800c5e8:	40021000 	.word	0x40021000
 800c5ec:	40007000 	.word	0x40007000
 800c5f0:	4b9a      	ldr	r3, [pc, #616]	@ (800c85c <HAL_RCC_OscConfig+0x778>)
 800c5f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5f6:	4a99      	ldr	r2, [pc, #612]	@ (800c85c <HAL_RCC_OscConfig+0x778>)
 800c5f8:	f023 0301 	bic.w	r3, r3, #1
 800c5fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c600:	4b96      	ldr	r3, [pc, #600]	@ (800c85c <HAL_RCC_OscConfig+0x778>)
 800c602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c606:	4a95      	ldr	r2, [pc, #596]	@ (800c85c <HAL_RCC_OscConfig+0x778>)
 800c608:	f023 0304 	bic.w	r3, r3, #4
 800c60c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	689b      	ldr	r3, [r3, #8]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d016      	beq.n	800c646 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c618:	f7fc ffc2 	bl	80095a0 <HAL_GetTick>
 800c61c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c61e:	e00a      	b.n	800c636 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c620:	f7fc ffbe 	bl	80095a0 <HAL_GetTick>
 800c624:	4602      	mov	r2, r0
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	1ad3      	subs	r3, r2, r3
 800c62a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c62e:	4293      	cmp	r3, r2
 800c630:	d901      	bls.n	800c636 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800c632:	2303      	movs	r3, #3
 800c634:	e162      	b.n	800c8fc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c636:	4b89      	ldr	r3, [pc, #548]	@ (800c85c <HAL_RCC_OscConfig+0x778>)
 800c638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c63c:	f003 0302 	and.w	r3, r3, #2
 800c640:	2b00      	cmp	r3, #0
 800c642:	d0ed      	beq.n	800c620 <HAL_RCC_OscConfig+0x53c>
 800c644:	e015      	b.n	800c672 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c646:	f7fc ffab 	bl	80095a0 <HAL_GetTick>
 800c64a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c64c:	e00a      	b.n	800c664 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c64e:	f7fc ffa7 	bl	80095a0 <HAL_GetTick>
 800c652:	4602      	mov	r2, r0
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	1ad3      	subs	r3, r2, r3
 800c658:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d901      	bls.n	800c664 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800c660:	2303      	movs	r3, #3
 800c662:	e14b      	b.n	800c8fc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c664:	4b7d      	ldr	r3, [pc, #500]	@ (800c85c <HAL_RCC_OscConfig+0x778>)
 800c666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c66a:	f003 0302 	and.w	r3, r3, #2
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d1ed      	bne.n	800c64e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c672:	7ffb      	ldrb	r3, [r7, #31]
 800c674:	2b01      	cmp	r3, #1
 800c676:	d105      	bne.n	800c684 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c678:	4b78      	ldr	r3, [pc, #480]	@ (800c85c <HAL_RCC_OscConfig+0x778>)
 800c67a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c67c:	4a77      	ldr	r2, [pc, #476]	@ (800c85c <HAL_RCC_OscConfig+0x778>)
 800c67e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c682:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	f003 0320 	and.w	r3, r3, #32
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d03c      	beq.n	800c70a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c694:	2b00      	cmp	r3, #0
 800c696:	d01c      	beq.n	800c6d2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c698:	4b70      	ldr	r3, [pc, #448]	@ (800c85c <HAL_RCC_OscConfig+0x778>)
 800c69a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c69e:	4a6f      	ldr	r2, [pc, #444]	@ (800c85c <HAL_RCC_OscConfig+0x778>)
 800c6a0:	f043 0301 	orr.w	r3, r3, #1
 800c6a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6a8:	f7fc ff7a 	bl	80095a0 <HAL_GetTick>
 800c6ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c6ae:	e008      	b.n	800c6c2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c6b0:	f7fc ff76 	bl	80095a0 <HAL_GetTick>
 800c6b4:	4602      	mov	r2, r0
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	1ad3      	subs	r3, r2, r3
 800c6ba:	2b02      	cmp	r3, #2
 800c6bc:	d901      	bls.n	800c6c2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800c6be:	2303      	movs	r3, #3
 800c6c0:	e11c      	b.n	800c8fc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c6c2:	4b66      	ldr	r3, [pc, #408]	@ (800c85c <HAL_RCC_OscConfig+0x778>)
 800c6c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c6c8:	f003 0302 	and.w	r3, r3, #2
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d0ef      	beq.n	800c6b0 <HAL_RCC_OscConfig+0x5cc>
 800c6d0:	e01b      	b.n	800c70a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c6d2:	4b62      	ldr	r3, [pc, #392]	@ (800c85c <HAL_RCC_OscConfig+0x778>)
 800c6d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c6d8:	4a60      	ldr	r2, [pc, #384]	@ (800c85c <HAL_RCC_OscConfig+0x778>)
 800c6da:	f023 0301 	bic.w	r3, r3, #1
 800c6de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6e2:	f7fc ff5d 	bl	80095a0 <HAL_GetTick>
 800c6e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c6e8:	e008      	b.n	800c6fc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c6ea:	f7fc ff59 	bl	80095a0 <HAL_GetTick>
 800c6ee:	4602      	mov	r2, r0
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	1ad3      	subs	r3, r2, r3
 800c6f4:	2b02      	cmp	r3, #2
 800c6f6:	d901      	bls.n	800c6fc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800c6f8:	2303      	movs	r3, #3
 800c6fa:	e0ff      	b.n	800c8fc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c6fc:	4b57      	ldr	r3, [pc, #348]	@ (800c85c <HAL_RCC_OscConfig+0x778>)
 800c6fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c702:	f003 0302 	and.w	r3, r3, #2
 800c706:	2b00      	cmp	r3, #0
 800c708:	d1ef      	bne.n	800c6ea <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c70e:	2b00      	cmp	r3, #0
 800c710:	f000 80f3 	beq.w	800c8fa <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c718:	2b02      	cmp	r3, #2
 800c71a:	f040 80c9 	bne.w	800c8b0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800c71e:	4b4f      	ldr	r3, [pc, #316]	@ (800c85c <HAL_RCC_OscConfig+0x778>)
 800c720:	68db      	ldr	r3, [r3, #12]
 800c722:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	f003 0203 	and.w	r2, r3, #3
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c72e:	429a      	cmp	r2, r3
 800c730:	d12c      	bne.n	800c78c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c73c:	3b01      	subs	r3, #1
 800c73e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c740:	429a      	cmp	r2, r3
 800c742:	d123      	bne.n	800c78c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c74e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c750:	429a      	cmp	r2, r3
 800c752:	d11b      	bne.n	800c78c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c75e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c760:	429a      	cmp	r2, r3
 800c762:	d113      	bne.n	800c78c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c76e:	085b      	lsrs	r3, r3, #1
 800c770:	3b01      	subs	r3, #1
 800c772:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c774:	429a      	cmp	r2, r3
 800c776:	d109      	bne.n	800c78c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c782:	085b      	lsrs	r3, r3, #1
 800c784:	3b01      	subs	r3, #1
 800c786:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c788:	429a      	cmp	r2, r3
 800c78a:	d06b      	beq.n	800c864 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c78c:	69bb      	ldr	r3, [r7, #24]
 800c78e:	2b0c      	cmp	r3, #12
 800c790:	d062      	beq.n	800c858 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c792:	4b32      	ldr	r3, [pc, #200]	@ (800c85c <HAL_RCC_OscConfig+0x778>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d001      	beq.n	800c7a2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800c79e:	2301      	movs	r3, #1
 800c7a0:	e0ac      	b.n	800c8fc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800c7a2:	4b2e      	ldr	r3, [pc, #184]	@ (800c85c <HAL_RCC_OscConfig+0x778>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	4a2d      	ldr	r2, [pc, #180]	@ (800c85c <HAL_RCC_OscConfig+0x778>)
 800c7a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c7ac:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c7ae:	f7fc fef7 	bl	80095a0 <HAL_GetTick>
 800c7b2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c7b4:	e008      	b.n	800c7c8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c7b6:	f7fc fef3 	bl	80095a0 <HAL_GetTick>
 800c7ba:	4602      	mov	r2, r0
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	1ad3      	subs	r3, r2, r3
 800c7c0:	2b02      	cmp	r3, #2
 800c7c2:	d901      	bls.n	800c7c8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800c7c4:	2303      	movs	r3, #3
 800c7c6:	e099      	b.n	800c8fc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c7c8:	4b24      	ldr	r3, [pc, #144]	@ (800c85c <HAL_RCC_OscConfig+0x778>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d1f0      	bne.n	800c7b6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c7d4:	4b21      	ldr	r3, [pc, #132]	@ (800c85c <HAL_RCC_OscConfig+0x778>)
 800c7d6:	68da      	ldr	r2, [r3, #12]
 800c7d8:	4b21      	ldr	r3, [pc, #132]	@ (800c860 <HAL_RCC_OscConfig+0x77c>)
 800c7da:	4013      	ands	r3, r2
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800c7e0:	687a      	ldr	r2, [r7, #4]
 800c7e2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c7e4:	3a01      	subs	r2, #1
 800c7e6:	0112      	lsls	r2, r2, #4
 800c7e8:	4311      	orrs	r1, r2
 800c7ea:	687a      	ldr	r2, [r7, #4]
 800c7ec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c7ee:	0212      	lsls	r2, r2, #8
 800c7f0:	4311      	orrs	r1, r2
 800c7f2:	687a      	ldr	r2, [r7, #4]
 800c7f4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c7f6:	0852      	lsrs	r2, r2, #1
 800c7f8:	3a01      	subs	r2, #1
 800c7fa:	0552      	lsls	r2, r2, #21
 800c7fc:	4311      	orrs	r1, r2
 800c7fe:	687a      	ldr	r2, [r7, #4]
 800c800:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800c802:	0852      	lsrs	r2, r2, #1
 800c804:	3a01      	subs	r2, #1
 800c806:	0652      	lsls	r2, r2, #25
 800c808:	4311      	orrs	r1, r2
 800c80a:	687a      	ldr	r2, [r7, #4]
 800c80c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c80e:	06d2      	lsls	r2, r2, #27
 800c810:	430a      	orrs	r2, r1
 800c812:	4912      	ldr	r1, [pc, #72]	@ (800c85c <HAL_RCC_OscConfig+0x778>)
 800c814:	4313      	orrs	r3, r2
 800c816:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c818:	4b10      	ldr	r3, [pc, #64]	@ (800c85c <HAL_RCC_OscConfig+0x778>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	4a0f      	ldr	r2, [pc, #60]	@ (800c85c <HAL_RCC_OscConfig+0x778>)
 800c81e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c822:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c824:	4b0d      	ldr	r3, [pc, #52]	@ (800c85c <HAL_RCC_OscConfig+0x778>)
 800c826:	68db      	ldr	r3, [r3, #12]
 800c828:	4a0c      	ldr	r2, [pc, #48]	@ (800c85c <HAL_RCC_OscConfig+0x778>)
 800c82a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c82e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c830:	f7fc feb6 	bl	80095a0 <HAL_GetTick>
 800c834:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c836:	e008      	b.n	800c84a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c838:	f7fc feb2 	bl	80095a0 <HAL_GetTick>
 800c83c:	4602      	mov	r2, r0
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	1ad3      	subs	r3, r2, r3
 800c842:	2b02      	cmp	r3, #2
 800c844:	d901      	bls.n	800c84a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800c846:	2303      	movs	r3, #3
 800c848:	e058      	b.n	800c8fc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c84a:	4b04      	ldr	r3, [pc, #16]	@ (800c85c <HAL_RCC_OscConfig+0x778>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c852:	2b00      	cmp	r3, #0
 800c854:	d0f0      	beq.n	800c838 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c856:	e050      	b.n	800c8fa <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c858:	2301      	movs	r3, #1
 800c85a:	e04f      	b.n	800c8fc <HAL_RCC_OscConfig+0x818>
 800c85c:	40021000 	.word	0x40021000
 800c860:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c864:	4b27      	ldr	r3, [pc, #156]	@ (800c904 <HAL_RCC_OscConfig+0x820>)
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d144      	bne.n	800c8fa <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c870:	4b24      	ldr	r3, [pc, #144]	@ (800c904 <HAL_RCC_OscConfig+0x820>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	4a23      	ldr	r2, [pc, #140]	@ (800c904 <HAL_RCC_OscConfig+0x820>)
 800c876:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c87a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c87c:	4b21      	ldr	r3, [pc, #132]	@ (800c904 <HAL_RCC_OscConfig+0x820>)
 800c87e:	68db      	ldr	r3, [r3, #12]
 800c880:	4a20      	ldr	r2, [pc, #128]	@ (800c904 <HAL_RCC_OscConfig+0x820>)
 800c882:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c886:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c888:	f7fc fe8a 	bl	80095a0 <HAL_GetTick>
 800c88c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c88e:	e008      	b.n	800c8a2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c890:	f7fc fe86 	bl	80095a0 <HAL_GetTick>
 800c894:	4602      	mov	r2, r0
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	1ad3      	subs	r3, r2, r3
 800c89a:	2b02      	cmp	r3, #2
 800c89c:	d901      	bls.n	800c8a2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800c89e:	2303      	movs	r3, #3
 800c8a0:	e02c      	b.n	800c8fc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c8a2:	4b18      	ldr	r3, [pc, #96]	@ (800c904 <HAL_RCC_OscConfig+0x820>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d0f0      	beq.n	800c890 <HAL_RCC_OscConfig+0x7ac>
 800c8ae:	e024      	b.n	800c8fa <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c8b0:	69bb      	ldr	r3, [r7, #24]
 800c8b2:	2b0c      	cmp	r3, #12
 800c8b4:	d01f      	beq.n	800c8f6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c8b6:	4b13      	ldr	r3, [pc, #76]	@ (800c904 <HAL_RCC_OscConfig+0x820>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	4a12      	ldr	r2, [pc, #72]	@ (800c904 <HAL_RCC_OscConfig+0x820>)
 800c8bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c8c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8c2:	f7fc fe6d 	bl	80095a0 <HAL_GetTick>
 800c8c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c8c8:	e008      	b.n	800c8dc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c8ca:	f7fc fe69 	bl	80095a0 <HAL_GetTick>
 800c8ce:	4602      	mov	r2, r0
 800c8d0:	693b      	ldr	r3, [r7, #16]
 800c8d2:	1ad3      	subs	r3, r2, r3
 800c8d4:	2b02      	cmp	r3, #2
 800c8d6:	d901      	bls.n	800c8dc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800c8d8:	2303      	movs	r3, #3
 800c8da:	e00f      	b.n	800c8fc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c8dc:	4b09      	ldr	r3, [pc, #36]	@ (800c904 <HAL_RCC_OscConfig+0x820>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d1f0      	bne.n	800c8ca <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800c8e8:	4b06      	ldr	r3, [pc, #24]	@ (800c904 <HAL_RCC_OscConfig+0x820>)
 800c8ea:	68da      	ldr	r2, [r3, #12]
 800c8ec:	4905      	ldr	r1, [pc, #20]	@ (800c904 <HAL_RCC_OscConfig+0x820>)
 800c8ee:	4b06      	ldr	r3, [pc, #24]	@ (800c908 <HAL_RCC_OscConfig+0x824>)
 800c8f0:	4013      	ands	r3, r2
 800c8f2:	60cb      	str	r3, [r1, #12]
 800c8f4:	e001      	b.n	800c8fa <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	e000      	b.n	800c8fc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800c8fa:	2300      	movs	r3, #0
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3720      	adds	r7, #32
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}
 800c904:	40021000 	.word	0x40021000
 800c908:	feeefffc 	.word	0xfeeefffc

0800c90c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b084      	sub	sp, #16
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d101      	bne.n	800c920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c91c:	2301      	movs	r3, #1
 800c91e:	e0e7      	b.n	800caf0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c920:	4b75      	ldr	r3, [pc, #468]	@ (800caf8 <HAL_RCC_ClockConfig+0x1ec>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	f003 0307 	and.w	r3, r3, #7
 800c928:	683a      	ldr	r2, [r7, #0]
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d910      	bls.n	800c950 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c92e:	4b72      	ldr	r3, [pc, #456]	@ (800caf8 <HAL_RCC_ClockConfig+0x1ec>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f023 0207 	bic.w	r2, r3, #7
 800c936:	4970      	ldr	r1, [pc, #448]	@ (800caf8 <HAL_RCC_ClockConfig+0x1ec>)
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	4313      	orrs	r3, r2
 800c93c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c93e:	4b6e      	ldr	r3, [pc, #440]	@ (800caf8 <HAL_RCC_ClockConfig+0x1ec>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f003 0307 	and.w	r3, r3, #7
 800c946:	683a      	ldr	r2, [r7, #0]
 800c948:	429a      	cmp	r2, r3
 800c94a:	d001      	beq.n	800c950 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c94c:	2301      	movs	r3, #1
 800c94e:	e0cf      	b.n	800caf0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f003 0302 	and.w	r3, r3, #2
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d010      	beq.n	800c97e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	689a      	ldr	r2, [r3, #8]
 800c960:	4b66      	ldr	r3, [pc, #408]	@ (800cafc <HAL_RCC_ClockConfig+0x1f0>)
 800c962:	689b      	ldr	r3, [r3, #8]
 800c964:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c968:	429a      	cmp	r2, r3
 800c96a:	d908      	bls.n	800c97e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c96c:	4b63      	ldr	r3, [pc, #396]	@ (800cafc <HAL_RCC_ClockConfig+0x1f0>)
 800c96e:	689b      	ldr	r3, [r3, #8]
 800c970:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	689b      	ldr	r3, [r3, #8]
 800c978:	4960      	ldr	r1, [pc, #384]	@ (800cafc <HAL_RCC_ClockConfig+0x1f0>)
 800c97a:	4313      	orrs	r3, r2
 800c97c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f003 0301 	and.w	r3, r3, #1
 800c986:	2b00      	cmp	r3, #0
 800c988:	d04c      	beq.n	800ca24 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	685b      	ldr	r3, [r3, #4]
 800c98e:	2b03      	cmp	r3, #3
 800c990:	d107      	bne.n	800c9a2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c992:	4b5a      	ldr	r3, [pc, #360]	@ (800cafc <HAL_RCC_ClockConfig+0x1f0>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d121      	bne.n	800c9e2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800c99e:	2301      	movs	r3, #1
 800c9a0:	e0a6      	b.n	800caf0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	685b      	ldr	r3, [r3, #4]
 800c9a6:	2b02      	cmp	r3, #2
 800c9a8:	d107      	bne.n	800c9ba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c9aa:	4b54      	ldr	r3, [pc, #336]	@ (800cafc <HAL_RCC_ClockConfig+0x1f0>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d115      	bne.n	800c9e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	e09a      	b.n	800caf0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	685b      	ldr	r3, [r3, #4]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d107      	bne.n	800c9d2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c9c2:	4b4e      	ldr	r3, [pc, #312]	@ (800cafc <HAL_RCC_ClockConfig+0x1f0>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f003 0302 	and.w	r3, r3, #2
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d109      	bne.n	800c9e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	e08e      	b.n	800caf0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c9d2:	4b4a      	ldr	r3, [pc, #296]	@ (800cafc <HAL_RCC_ClockConfig+0x1f0>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d101      	bne.n	800c9e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800c9de:	2301      	movs	r3, #1
 800c9e0:	e086      	b.n	800caf0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c9e2:	4b46      	ldr	r3, [pc, #280]	@ (800cafc <HAL_RCC_ClockConfig+0x1f0>)
 800c9e4:	689b      	ldr	r3, [r3, #8]
 800c9e6:	f023 0203 	bic.w	r2, r3, #3
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	685b      	ldr	r3, [r3, #4]
 800c9ee:	4943      	ldr	r1, [pc, #268]	@ (800cafc <HAL_RCC_ClockConfig+0x1f0>)
 800c9f0:	4313      	orrs	r3, r2
 800c9f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c9f4:	f7fc fdd4 	bl	80095a0 <HAL_GetTick>
 800c9f8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c9fa:	e00a      	b.n	800ca12 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c9fc:	f7fc fdd0 	bl	80095a0 <HAL_GetTick>
 800ca00:	4602      	mov	r2, r0
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	1ad3      	subs	r3, r2, r3
 800ca06:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d901      	bls.n	800ca12 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800ca0e:	2303      	movs	r3, #3
 800ca10:	e06e      	b.n	800caf0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ca12:	4b3a      	ldr	r3, [pc, #232]	@ (800cafc <HAL_RCC_ClockConfig+0x1f0>)
 800ca14:	689b      	ldr	r3, [r3, #8]
 800ca16:	f003 020c 	and.w	r2, r3, #12
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	685b      	ldr	r3, [r3, #4]
 800ca1e:	009b      	lsls	r3, r3, #2
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d1eb      	bne.n	800c9fc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	f003 0302 	and.w	r3, r3, #2
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d010      	beq.n	800ca52 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	689a      	ldr	r2, [r3, #8]
 800ca34:	4b31      	ldr	r3, [pc, #196]	@ (800cafc <HAL_RCC_ClockConfig+0x1f0>)
 800ca36:	689b      	ldr	r3, [r3, #8]
 800ca38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	d208      	bcs.n	800ca52 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ca40:	4b2e      	ldr	r3, [pc, #184]	@ (800cafc <HAL_RCC_ClockConfig+0x1f0>)
 800ca42:	689b      	ldr	r3, [r3, #8]
 800ca44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	689b      	ldr	r3, [r3, #8]
 800ca4c:	492b      	ldr	r1, [pc, #172]	@ (800cafc <HAL_RCC_ClockConfig+0x1f0>)
 800ca4e:	4313      	orrs	r3, r2
 800ca50:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ca52:	4b29      	ldr	r3, [pc, #164]	@ (800caf8 <HAL_RCC_ClockConfig+0x1ec>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f003 0307 	and.w	r3, r3, #7
 800ca5a:	683a      	ldr	r2, [r7, #0]
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d210      	bcs.n	800ca82 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ca60:	4b25      	ldr	r3, [pc, #148]	@ (800caf8 <HAL_RCC_ClockConfig+0x1ec>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	f023 0207 	bic.w	r2, r3, #7
 800ca68:	4923      	ldr	r1, [pc, #140]	@ (800caf8 <HAL_RCC_ClockConfig+0x1ec>)
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	4313      	orrs	r3, r2
 800ca6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca70:	4b21      	ldr	r3, [pc, #132]	@ (800caf8 <HAL_RCC_ClockConfig+0x1ec>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	f003 0307 	and.w	r3, r3, #7
 800ca78:	683a      	ldr	r2, [r7, #0]
 800ca7a:	429a      	cmp	r2, r3
 800ca7c:	d001      	beq.n	800ca82 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800ca7e:	2301      	movs	r3, #1
 800ca80:	e036      	b.n	800caf0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f003 0304 	and.w	r3, r3, #4
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d008      	beq.n	800caa0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ca8e:	4b1b      	ldr	r3, [pc, #108]	@ (800cafc <HAL_RCC_ClockConfig+0x1f0>)
 800ca90:	689b      	ldr	r3, [r3, #8]
 800ca92:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	68db      	ldr	r3, [r3, #12]
 800ca9a:	4918      	ldr	r1, [pc, #96]	@ (800cafc <HAL_RCC_ClockConfig+0x1f0>)
 800ca9c:	4313      	orrs	r3, r2
 800ca9e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	f003 0308 	and.w	r3, r3, #8
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d009      	beq.n	800cac0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800caac:	4b13      	ldr	r3, [pc, #76]	@ (800cafc <HAL_RCC_ClockConfig+0x1f0>)
 800caae:	689b      	ldr	r3, [r3, #8]
 800cab0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	691b      	ldr	r3, [r3, #16]
 800cab8:	00db      	lsls	r3, r3, #3
 800caba:	4910      	ldr	r1, [pc, #64]	@ (800cafc <HAL_RCC_ClockConfig+0x1f0>)
 800cabc:	4313      	orrs	r3, r2
 800cabe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800cac0:	f000 f824 	bl	800cb0c <HAL_RCC_GetSysClockFreq>
 800cac4:	4602      	mov	r2, r0
 800cac6:	4b0d      	ldr	r3, [pc, #52]	@ (800cafc <HAL_RCC_ClockConfig+0x1f0>)
 800cac8:	689b      	ldr	r3, [r3, #8]
 800caca:	091b      	lsrs	r3, r3, #4
 800cacc:	f003 030f 	and.w	r3, r3, #15
 800cad0:	490b      	ldr	r1, [pc, #44]	@ (800cb00 <HAL_RCC_ClockConfig+0x1f4>)
 800cad2:	5ccb      	ldrb	r3, [r1, r3]
 800cad4:	f003 031f 	and.w	r3, r3, #31
 800cad8:	fa22 f303 	lsr.w	r3, r2, r3
 800cadc:	4a09      	ldr	r2, [pc, #36]	@ (800cb04 <HAL_RCC_ClockConfig+0x1f8>)
 800cade:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800cae0:	4b09      	ldr	r3, [pc, #36]	@ (800cb08 <HAL_RCC_ClockConfig+0x1fc>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4618      	mov	r0, r3
 800cae6:	f7fc fd0b 	bl	8009500 <HAL_InitTick>
 800caea:	4603      	mov	r3, r0
 800caec:	72fb      	strb	r3, [r7, #11]

  return status;
 800caee:	7afb      	ldrb	r3, [r7, #11]
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	3710      	adds	r7, #16
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}
 800caf8:	40022000 	.word	0x40022000
 800cafc:	40021000 	.word	0x40021000
 800cb00:	080113d4 	.word	0x080113d4
 800cb04:	2000005c 	.word	0x2000005c
 800cb08:	20000060 	.word	0x20000060

0800cb0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b089      	sub	sp, #36	@ 0x24
 800cb10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800cb12:	2300      	movs	r3, #0
 800cb14:	61fb      	str	r3, [r7, #28]
 800cb16:	2300      	movs	r3, #0
 800cb18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cb1a:	4b3e      	ldr	r3, [pc, #248]	@ (800cc14 <HAL_RCC_GetSysClockFreq+0x108>)
 800cb1c:	689b      	ldr	r3, [r3, #8]
 800cb1e:	f003 030c 	and.w	r3, r3, #12
 800cb22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cb24:	4b3b      	ldr	r3, [pc, #236]	@ (800cc14 <HAL_RCC_GetSysClockFreq+0x108>)
 800cb26:	68db      	ldr	r3, [r3, #12]
 800cb28:	f003 0303 	and.w	r3, r3, #3
 800cb2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800cb2e:	693b      	ldr	r3, [r7, #16]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d005      	beq.n	800cb40 <HAL_RCC_GetSysClockFreq+0x34>
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	2b0c      	cmp	r3, #12
 800cb38:	d121      	bne.n	800cb7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	2b01      	cmp	r3, #1
 800cb3e:	d11e      	bne.n	800cb7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800cb40:	4b34      	ldr	r3, [pc, #208]	@ (800cc14 <HAL_RCC_GetSysClockFreq+0x108>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f003 0308 	and.w	r3, r3, #8
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d107      	bne.n	800cb5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800cb4c:	4b31      	ldr	r3, [pc, #196]	@ (800cc14 <HAL_RCC_GetSysClockFreq+0x108>)
 800cb4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cb52:	0a1b      	lsrs	r3, r3, #8
 800cb54:	f003 030f 	and.w	r3, r3, #15
 800cb58:	61fb      	str	r3, [r7, #28]
 800cb5a:	e005      	b.n	800cb68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800cb5c:	4b2d      	ldr	r3, [pc, #180]	@ (800cc14 <HAL_RCC_GetSysClockFreq+0x108>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	091b      	lsrs	r3, r3, #4
 800cb62:	f003 030f 	and.w	r3, r3, #15
 800cb66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800cb68:	4a2b      	ldr	r2, [pc, #172]	@ (800cc18 <HAL_RCC_GetSysClockFreq+0x10c>)
 800cb6a:	69fb      	ldr	r3, [r7, #28]
 800cb6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d10d      	bne.n	800cb94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800cb78:	69fb      	ldr	r3, [r7, #28]
 800cb7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800cb7c:	e00a      	b.n	800cb94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800cb7e:	693b      	ldr	r3, [r7, #16]
 800cb80:	2b04      	cmp	r3, #4
 800cb82:	d102      	bne.n	800cb8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800cb84:	4b25      	ldr	r3, [pc, #148]	@ (800cc1c <HAL_RCC_GetSysClockFreq+0x110>)
 800cb86:	61bb      	str	r3, [r7, #24]
 800cb88:	e004      	b.n	800cb94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	2b08      	cmp	r3, #8
 800cb8e:	d101      	bne.n	800cb94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800cb90:	4b23      	ldr	r3, [pc, #140]	@ (800cc20 <HAL_RCC_GetSysClockFreq+0x114>)
 800cb92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	2b0c      	cmp	r3, #12
 800cb98:	d134      	bne.n	800cc04 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800cb9a:	4b1e      	ldr	r3, [pc, #120]	@ (800cc14 <HAL_RCC_GetSysClockFreq+0x108>)
 800cb9c:	68db      	ldr	r3, [r3, #12]
 800cb9e:	f003 0303 	and.w	r3, r3, #3
 800cba2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	2b02      	cmp	r3, #2
 800cba8:	d003      	beq.n	800cbb2 <HAL_RCC_GetSysClockFreq+0xa6>
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	2b03      	cmp	r3, #3
 800cbae:	d003      	beq.n	800cbb8 <HAL_RCC_GetSysClockFreq+0xac>
 800cbb0:	e005      	b.n	800cbbe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800cbb2:	4b1a      	ldr	r3, [pc, #104]	@ (800cc1c <HAL_RCC_GetSysClockFreq+0x110>)
 800cbb4:	617b      	str	r3, [r7, #20]
      break;
 800cbb6:	e005      	b.n	800cbc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800cbb8:	4b19      	ldr	r3, [pc, #100]	@ (800cc20 <HAL_RCC_GetSysClockFreq+0x114>)
 800cbba:	617b      	str	r3, [r7, #20]
      break;
 800cbbc:	e002      	b.n	800cbc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800cbbe:	69fb      	ldr	r3, [r7, #28]
 800cbc0:	617b      	str	r3, [r7, #20]
      break;
 800cbc2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800cbc4:	4b13      	ldr	r3, [pc, #76]	@ (800cc14 <HAL_RCC_GetSysClockFreq+0x108>)
 800cbc6:	68db      	ldr	r3, [r3, #12]
 800cbc8:	091b      	lsrs	r3, r3, #4
 800cbca:	f003 0307 	and.w	r3, r3, #7
 800cbce:	3301      	adds	r3, #1
 800cbd0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800cbd2:	4b10      	ldr	r3, [pc, #64]	@ (800cc14 <HAL_RCC_GetSysClockFreq+0x108>)
 800cbd4:	68db      	ldr	r3, [r3, #12]
 800cbd6:	0a1b      	lsrs	r3, r3, #8
 800cbd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cbdc:	697a      	ldr	r2, [r7, #20]
 800cbde:	fb03 f202 	mul.w	r2, r3, r2
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbe8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800cbea:	4b0a      	ldr	r3, [pc, #40]	@ (800cc14 <HAL_RCC_GetSysClockFreq+0x108>)
 800cbec:	68db      	ldr	r3, [r3, #12]
 800cbee:	0e5b      	lsrs	r3, r3, #25
 800cbf0:	f003 0303 	and.w	r3, r3, #3
 800cbf4:	3301      	adds	r3, #1
 800cbf6:	005b      	lsls	r3, r3, #1
 800cbf8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800cbfa:	697a      	ldr	r2, [r7, #20]
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc02:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800cc04:	69bb      	ldr	r3, [r7, #24]
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	3724      	adds	r7, #36	@ 0x24
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc10:	4770      	bx	lr
 800cc12:	bf00      	nop
 800cc14:	40021000 	.word	0x40021000
 800cc18:	080113ec 	.word	0x080113ec
 800cc1c:	00f42400 	.word	0x00f42400
 800cc20:	007a1200 	.word	0x007a1200

0800cc24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cc24:	b480      	push	{r7}
 800cc26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cc28:	4b03      	ldr	r3, [pc, #12]	@ (800cc38 <HAL_RCC_GetHCLKFreq+0x14>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc34:	4770      	bx	lr
 800cc36:	bf00      	nop
 800cc38:	2000005c 	.word	0x2000005c

0800cc3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800cc40:	f7ff fff0 	bl	800cc24 <HAL_RCC_GetHCLKFreq>
 800cc44:	4602      	mov	r2, r0
 800cc46:	4b06      	ldr	r3, [pc, #24]	@ (800cc60 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cc48:	689b      	ldr	r3, [r3, #8]
 800cc4a:	0a1b      	lsrs	r3, r3, #8
 800cc4c:	f003 0307 	and.w	r3, r3, #7
 800cc50:	4904      	ldr	r1, [pc, #16]	@ (800cc64 <HAL_RCC_GetPCLK1Freq+0x28>)
 800cc52:	5ccb      	ldrb	r3, [r1, r3]
 800cc54:	f003 031f 	and.w	r3, r3, #31
 800cc58:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	bd80      	pop	{r7, pc}
 800cc60:	40021000 	.word	0x40021000
 800cc64:	080113e4 	.word	0x080113e4

0800cc68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800cc6c:	f7ff ffda 	bl	800cc24 <HAL_RCC_GetHCLKFreq>
 800cc70:	4602      	mov	r2, r0
 800cc72:	4b06      	ldr	r3, [pc, #24]	@ (800cc8c <HAL_RCC_GetPCLK2Freq+0x24>)
 800cc74:	689b      	ldr	r3, [r3, #8]
 800cc76:	0adb      	lsrs	r3, r3, #11
 800cc78:	f003 0307 	and.w	r3, r3, #7
 800cc7c:	4904      	ldr	r1, [pc, #16]	@ (800cc90 <HAL_RCC_GetPCLK2Freq+0x28>)
 800cc7e:	5ccb      	ldrb	r3, [r1, r3]
 800cc80:	f003 031f 	and.w	r3, r3, #31
 800cc84:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	bd80      	pop	{r7, pc}
 800cc8c:	40021000 	.word	0x40021000
 800cc90:	080113e4 	.word	0x080113e4

0800cc94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b086      	sub	sp, #24
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800cca0:	4b2a      	ldr	r3, [pc, #168]	@ (800cd4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cca4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d003      	beq.n	800ccb4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800ccac:	f7ff f9b6 	bl	800c01c <HAL_PWREx_GetVoltageRange>
 800ccb0:	6178      	str	r0, [r7, #20]
 800ccb2:	e014      	b.n	800ccde <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800ccb4:	4b25      	ldr	r3, [pc, #148]	@ (800cd4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ccb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ccb8:	4a24      	ldr	r2, [pc, #144]	@ (800cd4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ccba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ccbe:	6593      	str	r3, [r2, #88]	@ 0x58
 800ccc0:	4b22      	ldr	r3, [pc, #136]	@ (800cd4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ccc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ccc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ccc8:	60fb      	str	r3, [r7, #12]
 800ccca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800cccc:	f7ff f9a6 	bl	800c01c <HAL_PWREx_GetVoltageRange>
 800ccd0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800ccd2:	4b1e      	ldr	r3, [pc, #120]	@ (800cd4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ccd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ccd6:	4a1d      	ldr	r2, [pc, #116]	@ (800cd4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ccd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ccdc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cce4:	d10b      	bne.n	800ccfe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2b80      	cmp	r3, #128	@ 0x80
 800ccea:	d919      	bls.n	800cd20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2ba0      	cmp	r3, #160	@ 0xa0
 800ccf0:	d902      	bls.n	800ccf8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800ccf2:	2302      	movs	r3, #2
 800ccf4:	613b      	str	r3, [r7, #16]
 800ccf6:	e013      	b.n	800cd20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	613b      	str	r3, [r7, #16]
 800ccfc:	e010      	b.n	800cd20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2b80      	cmp	r3, #128	@ 0x80
 800cd02:	d902      	bls.n	800cd0a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800cd04:	2303      	movs	r3, #3
 800cd06:	613b      	str	r3, [r7, #16]
 800cd08:	e00a      	b.n	800cd20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2b80      	cmp	r3, #128	@ 0x80
 800cd0e:	d102      	bne.n	800cd16 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800cd10:	2302      	movs	r3, #2
 800cd12:	613b      	str	r3, [r7, #16]
 800cd14:	e004      	b.n	800cd20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2b70      	cmp	r3, #112	@ 0x70
 800cd1a:	d101      	bne.n	800cd20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800cd20:	4b0b      	ldr	r3, [pc, #44]	@ (800cd50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	f023 0207 	bic.w	r2, r3, #7
 800cd28:	4909      	ldr	r1, [pc, #36]	@ (800cd50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800cd2a:	693b      	ldr	r3, [r7, #16]
 800cd2c:	4313      	orrs	r3, r2
 800cd2e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800cd30:	4b07      	ldr	r3, [pc, #28]	@ (800cd50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f003 0307 	and.w	r3, r3, #7
 800cd38:	693a      	ldr	r2, [r7, #16]
 800cd3a:	429a      	cmp	r2, r3
 800cd3c:	d001      	beq.n	800cd42 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800cd3e:	2301      	movs	r3, #1
 800cd40:	e000      	b.n	800cd44 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800cd42:	2300      	movs	r3, #0
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3718      	adds	r7, #24
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}
 800cd4c:	40021000 	.word	0x40021000
 800cd50:	40022000 	.word	0x40022000

0800cd54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b086      	sub	sp, #24
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800cd60:	2300      	movs	r3, #0
 800cd62:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d031      	beq.n	800cdd4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd74:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800cd78:	d01a      	beq.n	800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800cd7a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800cd7e:	d814      	bhi.n	800cdaa <HAL_RCCEx_PeriphCLKConfig+0x56>
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d009      	beq.n	800cd98 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800cd84:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cd88:	d10f      	bne.n	800cdaa <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800cd8a:	4b5d      	ldr	r3, [pc, #372]	@ (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800cd8c:	68db      	ldr	r3, [r3, #12]
 800cd8e:	4a5c      	ldr	r2, [pc, #368]	@ (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800cd90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cd94:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800cd96:	e00c      	b.n	800cdb2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	3304      	adds	r3, #4
 800cd9c:	2100      	movs	r1, #0
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f000 f9ce 	bl	800d140 <RCCEx_PLLSAI1_Config>
 800cda4:	4603      	mov	r3, r0
 800cda6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800cda8:	e003      	b.n	800cdb2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cdaa:	2301      	movs	r3, #1
 800cdac:	74fb      	strb	r3, [r7, #19]
      break;
 800cdae:	e000      	b.n	800cdb2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800cdb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cdb2:	7cfb      	ldrb	r3, [r7, #19]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d10b      	bne.n	800cdd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cdb8:	4b51      	ldr	r3, [pc, #324]	@ (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800cdba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cdbe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdc6:	494e      	ldr	r1, [pc, #312]	@ (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800cdc8:	4313      	orrs	r3, r2
 800cdca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800cdce:	e001      	b.n	800cdd4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdd0:	7cfb      	ldrb	r3, [r7, #19]
 800cdd2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	f000 809e 	beq.w	800cf1e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cde2:	2300      	movs	r3, #0
 800cde4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800cde6:	4b46      	ldr	r3, [pc, #280]	@ (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800cde8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cdea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d101      	bne.n	800cdf6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	e000      	b.n	800cdf8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d00d      	beq.n	800ce18 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cdfc:	4b40      	ldr	r3, [pc, #256]	@ (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800cdfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce00:	4a3f      	ldr	r2, [pc, #252]	@ (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ce02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ce06:	6593      	str	r3, [r2, #88]	@ 0x58
 800ce08:	4b3d      	ldr	r3, [pc, #244]	@ (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ce0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ce10:	60bb      	str	r3, [r7, #8]
 800ce12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ce14:	2301      	movs	r3, #1
 800ce16:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ce18:	4b3a      	ldr	r3, [pc, #232]	@ (800cf04 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	4a39      	ldr	r2, [pc, #228]	@ (800cf04 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800ce1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ce22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ce24:	f7fc fbbc 	bl	80095a0 <HAL_GetTick>
 800ce28:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800ce2a:	e009      	b.n	800ce40 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ce2c:	f7fc fbb8 	bl	80095a0 <HAL_GetTick>
 800ce30:	4602      	mov	r2, r0
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	1ad3      	subs	r3, r2, r3
 800ce36:	2b02      	cmp	r3, #2
 800ce38:	d902      	bls.n	800ce40 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800ce3a:	2303      	movs	r3, #3
 800ce3c:	74fb      	strb	r3, [r7, #19]
        break;
 800ce3e:	e005      	b.n	800ce4c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800ce40:	4b30      	ldr	r3, [pc, #192]	@ (800cf04 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d0ef      	beq.n	800ce2c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800ce4c:	7cfb      	ldrb	r3, [r7, #19]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d15a      	bne.n	800cf08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ce52:	4b2b      	ldr	r3, [pc, #172]	@ (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ce54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ce5c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d01e      	beq.n	800cea2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce68:	697a      	ldr	r2, [r7, #20]
 800ce6a:	429a      	cmp	r2, r3
 800ce6c:	d019      	beq.n	800cea2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800ce6e:	4b24      	ldr	r3, [pc, #144]	@ (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ce70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ce78:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ce7a:	4b21      	ldr	r3, [pc, #132]	@ (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ce7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce80:	4a1f      	ldr	r2, [pc, #124]	@ (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ce82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ce86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ce8a:	4b1d      	ldr	r3, [pc, #116]	@ (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ce8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce90:	4a1b      	ldr	r2, [pc, #108]	@ (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ce92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ce96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800ce9a:	4a19      	ldr	r2, [pc, #100]	@ (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	f003 0301 	and.w	r3, r3, #1
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d016      	beq.n	800ceda <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ceac:	f7fc fb78 	bl	80095a0 <HAL_GetTick>
 800ceb0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ceb2:	e00b      	b.n	800cecc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ceb4:	f7fc fb74 	bl	80095a0 <HAL_GetTick>
 800ceb8:	4602      	mov	r2, r0
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	1ad3      	subs	r3, r2, r3
 800cebe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cec2:	4293      	cmp	r3, r2
 800cec4:	d902      	bls.n	800cecc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800cec6:	2303      	movs	r3, #3
 800cec8:	74fb      	strb	r3, [r7, #19]
            break;
 800ceca:	e006      	b.n	800ceda <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cecc:	4b0c      	ldr	r3, [pc, #48]	@ (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800cece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ced2:	f003 0302 	and.w	r3, r3, #2
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d0ec      	beq.n	800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800ceda:	7cfb      	ldrb	r3, [r7, #19]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d10b      	bne.n	800cef8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cee0:	4b07      	ldr	r3, [pc, #28]	@ (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800cee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cee6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ceee:	4904      	ldr	r1, [pc, #16]	@ (800cf00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800cef0:	4313      	orrs	r3, r2
 800cef2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800cef6:	e009      	b.n	800cf0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800cef8:	7cfb      	ldrb	r3, [r7, #19]
 800cefa:	74bb      	strb	r3, [r7, #18]
 800cefc:	e006      	b.n	800cf0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800cefe:	bf00      	nop
 800cf00:	40021000 	.word	0x40021000
 800cf04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf08:	7cfb      	ldrb	r3, [r7, #19]
 800cf0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cf0c:	7c7b      	ldrb	r3, [r7, #17]
 800cf0e:	2b01      	cmp	r3, #1
 800cf10:	d105      	bne.n	800cf1e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cf12:	4b8a      	ldr	r3, [pc, #552]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cf14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf16:	4a89      	ldr	r2, [pc, #548]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cf18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cf1c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	f003 0301 	and.w	r3, r3, #1
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d00a      	beq.n	800cf40 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800cf2a:	4b84      	ldr	r3, [pc, #528]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cf2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf30:	f023 0203 	bic.w	r2, r3, #3
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	6a1b      	ldr	r3, [r3, #32]
 800cf38:	4980      	ldr	r1, [pc, #512]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cf3a:	4313      	orrs	r3, r2
 800cf3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	f003 0302 	and.w	r3, r3, #2
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d00a      	beq.n	800cf62 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800cf4c:	4b7b      	ldr	r3, [pc, #492]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cf4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf52:	f023 020c 	bic.w	r2, r3, #12
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf5a:	4978      	ldr	r1, [pc, #480]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cf5c:	4313      	orrs	r3, r2
 800cf5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f003 0320 	and.w	r3, r3, #32
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d00a      	beq.n	800cf84 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cf6e:	4b73      	ldr	r3, [pc, #460]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cf70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf74:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf7c:	496f      	ldr	r1, [pc, #444]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cf7e:	4313      	orrs	r3, r2
 800cf80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d00a      	beq.n	800cfa6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cf90:	4b6a      	ldr	r3, [pc, #424]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cf92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf96:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf9e:	4967      	ldr	r1, [pc, #412]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cfa0:	4313      	orrs	r3, r2
 800cfa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d00a      	beq.n	800cfc8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cfb2:	4b62      	ldr	r3, [pc, #392]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cfb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cfb8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfc0:	495e      	ldr	r1, [pc, #376]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cfc2:	4313      	orrs	r3, r2
 800cfc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d00a      	beq.n	800cfea <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cfd4:	4b59      	ldr	r3, [pc, #356]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cfd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cfda:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfe2:	4956      	ldr	r1, [pc, #344]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cfe4:	4313      	orrs	r3, r2
 800cfe6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d00a      	beq.n	800d00c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cff6:	4b51      	ldr	r3, [pc, #324]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cffc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d004:	494d      	ldr	r1, [pc, #308]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d006:	4313      	orrs	r3, r2
 800d008:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d014:	2b00      	cmp	r3, #0
 800d016:	d028      	beq.n	800d06a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d018:	4b48      	ldr	r3, [pc, #288]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d01a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d01e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d026:	4945      	ldr	r1, [pc, #276]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d028:	4313      	orrs	r3, r2
 800d02a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d032:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d036:	d106      	bne.n	800d046 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d038:	4b40      	ldr	r3, [pc, #256]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d03a:	68db      	ldr	r3, [r3, #12]
 800d03c:	4a3f      	ldr	r2, [pc, #252]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d03e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d042:	60d3      	str	r3, [r2, #12]
 800d044:	e011      	b.n	800d06a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d04a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d04e:	d10c      	bne.n	800d06a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	3304      	adds	r3, #4
 800d054:	2101      	movs	r1, #1
 800d056:	4618      	mov	r0, r3
 800d058:	f000 f872 	bl	800d140 <RCCEx_PLLSAI1_Config>
 800d05c:	4603      	mov	r3, r0
 800d05e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800d060:	7cfb      	ldrb	r3, [r7, #19]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d001      	beq.n	800d06a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800d066:	7cfb      	ldrb	r3, [r7, #19]
 800d068:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d072:	2b00      	cmp	r3, #0
 800d074:	d028      	beq.n	800d0c8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d076:	4b31      	ldr	r3, [pc, #196]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d07c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d084:	492d      	ldr	r1, [pc, #180]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d086:	4313      	orrs	r3, r2
 800d088:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d090:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d094:	d106      	bne.n	800d0a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d096:	4b29      	ldr	r3, [pc, #164]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d098:	68db      	ldr	r3, [r3, #12]
 800d09a:	4a28      	ldr	r2, [pc, #160]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d09c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d0a0:	60d3      	str	r3, [r2, #12]
 800d0a2:	e011      	b.n	800d0c8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d0ac:	d10c      	bne.n	800d0c8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	3304      	adds	r3, #4
 800d0b2:	2101      	movs	r1, #1
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f000 f843 	bl	800d140 <RCCEx_PLLSAI1_Config>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d0be:	7cfb      	ldrb	r3, [r7, #19]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d001      	beq.n	800d0c8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800d0c4:	7cfb      	ldrb	r3, [r7, #19]
 800d0c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d01c      	beq.n	800d10e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d0d4:	4b19      	ldr	r3, [pc, #100]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d0d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d0da:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d0e2:	4916      	ldr	r1, [pc, #88]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d0e4:	4313      	orrs	r3, r2
 800d0e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d0ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d0f2:	d10c      	bne.n	800d10e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	3304      	adds	r3, #4
 800d0f8:	2102      	movs	r1, #2
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f000 f820 	bl	800d140 <RCCEx_PLLSAI1_Config>
 800d100:	4603      	mov	r3, r0
 800d102:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d104:	7cfb      	ldrb	r3, [r7, #19]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d001      	beq.n	800d10e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800d10a:	7cfb      	ldrb	r3, [r7, #19]
 800d10c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d116:	2b00      	cmp	r3, #0
 800d118:	d00a      	beq.n	800d130 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d11a:	4b08      	ldr	r3, [pc, #32]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d11c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d120:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d128:	4904      	ldr	r1, [pc, #16]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d12a:	4313      	orrs	r3, r2
 800d12c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800d130:	7cbb      	ldrb	r3, [r7, #18]
}
 800d132:	4618      	mov	r0, r3
 800d134:	3718      	adds	r7, #24
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}
 800d13a:	bf00      	nop
 800d13c:	40021000 	.word	0x40021000

0800d140 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b084      	sub	sp, #16
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d14a:	2300      	movs	r3, #0
 800d14c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800d14e:	4b74      	ldr	r3, [pc, #464]	@ (800d320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d150:	68db      	ldr	r3, [r3, #12]
 800d152:	f003 0303 	and.w	r3, r3, #3
 800d156:	2b00      	cmp	r3, #0
 800d158:	d018      	beq.n	800d18c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800d15a:	4b71      	ldr	r3, [pc, #452]	@ (800d320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d15c:	68db      	ldr	r3, [r3, #12]
 800d15e:	f003 0203 	and.w	r2, r3, #3
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	429a      	cmp	r2, r3
 800d168:	d10d      	bne.n	800d186 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
       ||
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d009      	beq.n	800d186 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800d172:	4b6b      	ldr	r3, [pc, #428]	@ (800d320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d174:	68db      	ldr	r3, [r3, #12]
 800d176:	091b      	lsrs	r3, r3, #4
 800d178:	f003 0307 	and.w	r3, r3, #7
 800d17c:	1c5a      	adds	r2, r3, #1
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	685b      	ldr	r3, [r3, #4]
       ||
 800d182:	429a      	cmp	r2, r3
 800d184:	d047      	beq.n	800d216 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800d186:	2301      	movs	r3, #1
 800d188:	73fb      	strb	r3, [r7, #15]
 800d18a:	e044      	b.n	800d216 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	2b03      	cmp	r3, #3
 800d192:	d018      	beq.n	800d1c6 <RCCEx_PLLSAI1_Config+0x86>
 800d194:	2b03      	cmp	r3, #3
 800d196:	d825      	bhi.n	800d1e4 <RCCEx_PLLSAI1_Config+0xa4>
 800d198:	2b01      	cmp	r3, #1
 800d19a:	d002      	beq.n	800d1a2 <RCCEx_PLLSAI1_Config+0x62>
 800d19c:	2b02      	cmp	r3, #2
 800d19e:	d009      	beq.n	800d1b4 <RCCEx_PLLSAI1_Config+0x74>
 800d1a0:	e020      	b.n	800d1e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800d1a2:	4b5f      	ldr	r3, [pc, #380]	@ (800d320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f003 0302 	and.w	r3, r3, #2
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d11d      	bne.n	800d1ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d1b2:	e01a      	b.n	800d1ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800d1b4:	4b5a      	ldr	r3, [pc, #360]	@ (800d320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d116      	bne.n	800d1ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d1c4:	e013      	b.n	800d1ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800d1c6:	4b56      	ldr	r3, [pc, #344]	@ (800d320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d10f      	bne.n	800d1f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800d1d2:	4b53      	ldr	r3, [pc, #332]	@ (800d320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d109      	bne.n	800d1f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800d1de:	2301      	movs	r3, #1
 800d1e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d1e2:	e006      	b.n	800d1f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	73fb      	strb	r3, [r7, #15]
      break;
 800d1e8:	e004      	b.n	800d1f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d1ea:	bf00      	nop
 800d1ec:	e002      	b.n	800d1f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d1ee:	bf00      	nop
 800d1f0:	e000      	b.n	800d1f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d1f2:	bf00      	nop
    }

    if(status == HAL_OK)
 800d1f4:	7bfb      	ldrb	r3, [r7, #15]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d10d      	bne.n	800d216 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800d1fa:	4b49      	ldr	r3, [pc, #292]	@ (800d320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d1fc:	68db      	ldr	r3, [r3, #12]
 800d1fe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6819      	ldr	r1, [r3, #0]
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	685b      	ldr	r3, [r3, #4]
 800d20a:	3b01      	subs	r3, #1
 800d20c:	011b      	lsls	r3, r3, #4
 800d20e:	430b      	orrs	r3, r1
 800d210:	4943      	ldr	r1, [pc, #268]	@ (800d320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d212:	4313      	orrs	r3, r2
 800d214:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800d216:	7bfb      	ldrb	r3, [r7, #15]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d17c      	bne.n	800d316 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800d21c:	4b40      	ldr	r3, [pc, #256]	@ (800d320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	4a3f      	ldr	r2, [pc, #252]	@ (800d320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d222:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d226:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d228:	f7fc f9ba 	bl	80095a0 <HAL_GetTick>
 800d22c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800d22e:	e009      	b.n	800d244 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d230:	f7fc f9b6 	bl	80095a0 <HAL_GetTick>
 800d234:	4602      	mov	r2, r0
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	1ad3      	subs	r3, r2, r3
 800d23a:	2b02      	cmp	r3, #2
 800d23c:	d902      	bls.n	800d244 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800d23e:	2303      	movs	r3, #3
 800d240:	73fb      	strb	r3, [r7, #15]
        break;
 800d242:	e005      	b.n	800d250 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800d244:	4b36      	ldr	r3, [pc, #216]	@ (800d320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d1ef      	bne.n	800d230 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800d250:	7bfb      	ldrb	r3, [r7, #15]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d15f      	bne.n	800d316 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d110      	bne.n	800d27e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d25c:	4b30      	ldr	r3, [pc, #192]	@ (800d320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d25e:	691b      	ldr	r3, [r3, #16]
 800d260:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800d264:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800d268:	687a      	ldr	r2, [r7, #4]
 800d26a:	6892      	ldr	r2, [r2, #8]
 800d26c:	0211      	lsls	r1, r2, #8
 800d26e:	687a      	ldr	r2, [r7, #4]
 800d270:	68d2      	ldr	r2, [r2, #12]
 800d272:	06d2      	lsls	r2, r2, #27
 800d274:	430a      	orrs	r2, r1
 800d276:	492a      	ldr	r1, [pc, #168]	@ (800d320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d278:	4313      	orrs	r3, r2
 800d27a:	610b      	str	r3, [r1, #16]
 800d27c:	e027      	b.n	800d2ce <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	2b01      	cmp	r3, #1
 800d282:	d112      	bne.n	800d2aa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d284:	4b26      	ldr	r3, [pc, #152]	@ (800d320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d286:	691b      	ldr	r3, [r3, #16]
 800d288:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800d28c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800d290:	687a      	ldr	r2, [r7, #4]
 800d292:	6892      	ldr	r2, [r2, #8]
 800d294:	0211      	lsls	r1, r2, #8
 800d296:	687a      	ldr	r2, [r7, #4]
 800d298:	6912      	ldr	r2, [r2, #16]
 800d29a:	0852      	lsrs	r2, r2, #1
 800d29c:	3a01      	subs	r2, #1
 800d29e:	0552      	lsls	r2, r2, #21
 800d2a0:	430a      	orrs	r2, r1
 800d2a2:	491f      	ldr	r1, [pc, #124]	@ (800d320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2a4:	4313      	orrs	r3, r2
 800d2a6:	610b      	str	r3, [r1, #16]
 800d2a8:	e011      	b.n	800d2ce <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d2aa:	4b1d      	ldr	r3, [pc, #116]	@ (800d320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2ac:	691b      	ldr	r3, [r3, #16]
 800d2ae:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800d2b2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800d2b6:	687a      	ldr	r2, [r7, #4]
 800d2b8:	6892      	ldr	r2, [r2, #8]
 800d2ba:	0211      	lsls	r1, r2, #8
 800d2bc:	687a      	ldr	r2, [r7, #4]
 800d2be:	6952      	ldr	r2, [r2, #20]
 800d2c0:	0852      	lsrs	r2, r2, #1
 800d2c2:	3a01      	subs	r2, #1
 800d2c4:	0652      	lsls	r2, r2, #25
 800d2c6:	430a      	orrs	r2, r1
 800d2c8:	4915      	ldr	r1, [pc, #84]	@ (800d320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2ca:	4313      	orrs	r3, r2
 800d2cc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800d2ce:	4b14      	ldr	r3, [pc, #80]	@ (800d320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	4a13      	ldr	r2, [pc, #76]	@ (800d320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d2d8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d2da:	f7fc f961 	bl	80095a0 <HAL_GetTick>
 800d2de:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d2e0:	e009      	b.n	800d2f6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d2e2:	f7fc f95d 	bl	80095a0 <HAL_GetTick>
 800d2e6:	4602      	mov	r2, r0
 800d2e8:	68bb      	ldr	r3, [r7, #8]
 800d2ea:	1ad3      	subs	r3, r2, r3
 800d2ec:	2b02      	cmp	r3, #2
 800d2ee:	d902      	bls.n	800d2f6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800d2f0:	2303      	movs	r3, #3
 800d2f2:	73fb      	strb	r3, [r7, #15]
          break;
 800d2f4:	e005      	b.n	800d302 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d2f6:	4b0a      	ldr	r3, [pc, #40]	@ (800d320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d0ef      	beq.n	800d2e2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800d302:	7bfb      	ldrb	r3, [r7, #15]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d106      	bne.n	800d316 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800d308:	4b05      	ldr	r3, [pc, #20]	@ (800d320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d30a:	691a      	ldr	r2, [r3, #16]
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	699b      	ldr	r3, [r3, #24]
 800d310:	4903      	ldr	r1, [pc, #12]	@ (800d320 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d312:	4313      	orrs	r3, r2
 800d314:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800d316:	7bfb      	ldrb	r3, [r7, #15]
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3710      	adds	r7, #16
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}
 800d320:	40021000 	.word	0x40021000

0800d324 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b084      	sub	sp, #16
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d101      	bne.n	800d336 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d332:	2301      	movs	r3, #1
 800d334:	e095      	b.n	800d462 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d108      	bne.n	800d350 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	685b      	ldr	r3, [r3, #4]
 800d342:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d346:	d009      	beq.n	800d35c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2200      	movs	r2, #0
 800d34c:	61da      	str	r2, [r3, #28]
 800d34e:	e005      	b.n	800d35c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2200      	movs	r2, #0
 800d354:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2200      	movs	r2, #0
 800d35a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2200      	movs	r2, #0
 800d360:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d368:	b2db      	uxtb	r3, r3
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d106      	bne.n	800d37c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2200      	movs	r2, #0
 800d372:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f7fb fdae 	bl	8008ed8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2202      	movs	r2, #2
 800d380:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	681a      	ldr	r2, [r3, #0]
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d392:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	68db      	ldr	r3, [r3, #12]
 800d398:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d39c:	d902      	bls.n	800d3a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	60fb      	str	r3, [r7, #12]
 800d3a2:	e002      	b.n	800d3aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d3a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d3a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	68db      	ldr	r3, [r3, #12]
 800d3ae:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800d3b2:	d007      	beq.n	800d3c4 <HAL_SPI_Init+0xa0>
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	68db      	ldr	r3, [r3, #12]
 800d3b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d3bc:	d002      	beq.n	800d3c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	685b      	ldr	r3, [r3, #4]
 800d3c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	689b      	ldr	r3, [r3, #8]
 800d3d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800d3d4:	431a      	orrs	r2, r3
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	691b      	ldr	r3, [r3, #16]
 800d3da:	f003 0302 	and.w	r3, r3, #2
 800d3de:	431a      	orrs	r2, r3
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	695b      	ldr	r3, [r3, #20]
 800d3e4:	f003 0301 	and.w	r3, r3, #1
 800d3e8:	431a      	orrs	r2, r3
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	699b      	ldr	r3, [r3, #24]
 800d3ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d3f2:	431a      	orrs	r2, r3
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	69db      	ldr	r3, [r3, #28]
 800d3f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d3fc:	431a      	orrs	r2, r3
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6a1b      	ldr	r3, [r3, #32]
 800d402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d406:	ea42 0103 	orr.w	r1, r2, r3
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d40e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	430a      	orrs	r2, r1
 800d418:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	699b      	ldr	r3, [r3, #24]
 800d41e:	0c1b      	lsrs	r3, r3, #16
 800d420:	f003 0204 	and.w	r2, r3, #4
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d428:	f003 0310 	and.w	r3, r3, #16
 800d42c:	431a      	orrs	r2, r3
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d432:	f003 0308 	and.w	r3, r3, #8
 800d436:	431a      	orrs	r2, r3
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	68db      	ldr	r3, [r3, #12]
 800d43c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800d440:	ea42 0103 	orr.w	r1, r2, r3
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	430a      	orrs	r2, r1
 800d450:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2200      	movs	r2, #0
 800d456:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2201      	movs	r2, #1
 800d45c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800d460:	2300      	movs	r3, #0
}
 800d462:	4618      	mov	r0, r3
 800d464:	3710      	adds	r7, #16
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}

0800d46a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800d46a:	b580      	push	{r7, lr}
 800d46c:	b08a      	sub	sp, #40	@ 0x28
 800d46e:	af00      	add	r7, sp, #0
 800d470:	60f8      	str	r0, [r7, #12]
 800d472:	60b9      	str	r1, [r7, #8]
 800d474:	607a      	str	r2, [r7, #4]
 800d476:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d478:	2301      	movs	r3, #1
 800d47a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d47c:	f7fc f890 	bl	80095a0 <HAL_GetTick>
 800d480:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d488:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	685b      	ldr	r3, [r3, #4]
 800d48e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800d490:	887b      	ldrh	r3, [r7, #2]
 800d492:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800d494:	887b      	ldrh	r3, [r7, #2]
 800d496:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d498:	7ffb      	ldrb	r3, [r7, #31]
 800d49a:	2b01      	cmp	r3, #1
 800d49c:	d00c      	beq.n	800d4b8 <HAL_SPI_TransmitReceive+0x4e>
 800d49e:	69bb      	ldr	r3, [r7, #24]
 800d4a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d4a4:	d106      	bne.n	800d4b4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	689b      	ldr	r3, [r3, #8]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d102      	bne.n	800d4b4 <HAL_SPI_TransmitReceive+0x4a>
 800d4ae:	7ffb      	ldrb	r3, [r7, #31]
 800d4b0:	2b04      	cmp	r3, #4
 800d4b2:	d001      	beq.n	800d4b8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800d4b4:	2302      	movs	r3, #2
 800d4b6:	e1f3      	b.n	800d8a0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d005      	beq.n	800d4ca <HAL_SPI_TransmitReceive+0x60>
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d002      	beq.n	800d4ca <HAL_SPI_TransmitReceive+0x60>
 800d4c4:	887b      	ldrh	r3, [r7, #2]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d101      	bne.n	800d4ce <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	e1e8      	b.n	800d8a0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800d4d4:	2b01      	cmp	r3, #1
 800d4d6:	d101      	bne.n	800d4dc <HAL_SPI_TransmitReceive+0x72>
 800d4d8:	2302      	movs	r3, #2
 800d4da:	e1e1      	b.n	800d8a0 <HAL_SPI_TransmitReceive+0x436>
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	2201      	movs	r2, #1
 800d4e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d4ea:	b2db      	uxtb	r3, r3
 800d4ec:	2b04      	cmp	r3, #4
 800d4ee:	d003      	beq.n	800d4f8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	2205      	movs	r2, #5
 800d4f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	687a      	ldr	r2, [r7, #4]
 800d502:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	887a      	ldrh	r2, [r7, #2]
 800d508:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	887a      	ldrh	r2, [r7, #2]
 800d510:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	68ba      	ldr	r2, [r7, #8]
 800d518:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	887a      	ldrh	r2, [r7, #2]
 800d51e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	887a      	ldrh	r2, [r7, #2]
 800d524:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	2200      	movs	r2, #0
 800d52a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	2200      	movs	r2, #0
 800d530:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	68db      	ldr	r3, [r3, #12]
 800d536:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d53a:	d802      	bhi.n	800d542 <HAL_SPI_TransmitReceive+0xd8>
 800d53c:	8abb      	ldrh	r3, [r7, #20]
 800d53e:	2b01      	cmp	r3, #1
 800d540:	d908      	bls.n	800d554 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	685a      	ldr	r2, [r3, #4]
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d550:	605a      	str	r2, [r3, #4]
 800d552:	e007      	b.n	800d564 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	685a      	ldr	r2, [r3, #4]
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d562:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d56e:	2b40      	cmp	r3, #64	@ 0x40
 800d570:	d007      	beq.n	800d582 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	681a      	ldr	r2, [r3, #0]
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d580:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	68db      	ldr	r3, [r3, #12]
 800d586:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d58a:	f240 8083 	bls.w	800d694 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	685b      	ldr	r3, [r3, #4]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d002      	beq.n	800d59c <HAL_SPI_TransmitReceive+0x132>
 800d596:	8afb      	ldrh	r3, [r7, #22]
 800d598:	2b01      	cmp	r3, #1
 800d59a:	d16f      	bne.n	800d67c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5a0:	881a      	ldrh	r2, [r3, #0]
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5ac:	1c9a      	adds	r2, r3, #2
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d5b6:	b29b      	uxth	r3, r3
 800d5b8:	3b01      	subs	r3, #1
 800d5ba:	b29a      	uxth	r2, r3
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d5c0:	e05c      	b.n	800d67c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	689b      	ldr	r3, [r3, #8]
 800d5c8:	f003 0302 	and.w	r3, r3, #2
 800d5cc:	2b02      	cmp	r3, #2
 800d5ce:	d11b      	bne.n	800d608 <HAL_SPI_TransmitReceive+0x19e>
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d5d4:	b29b      	uxth	r3, r3
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d016      	beq.n	800d608 <HAL_SPI_TransmitReceive+0x19e>
 800d5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5dc:	2b01      	cmp	r3, #1
 800d5de:	d113      	bne.n	800d608 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5e4:	881a      	ldrh	r2, [r3, #0]
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5f0:	1c9a      	adds	r2, r3, #2
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d5fa:	b29b      	uxth	r3, r3
 800d5fc:	3b01      	subs	r3, #1
 800d5fe:	b29a      	uxth	r2, r3
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d604:	2300      	movs	r3, #0
 800d606:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	689b      	ldr	r3, [r3, #8]
 800d60e:	f003 0301 	and.w	r3, r3, #1
 800d612:	2b01      	cmp	r3, #1
 800d614:	d11c      	bne.n	800d650 <HAL_SPI_TransmitReceive+0x1e6>
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d61c:	b29b      	uxth	r3, r3
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d016      	beq.n	800d650 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	68da      	ldr	r2, [r3, #12]
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d62c:	b292      	uxth	r2, r2
 800d62e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d634:	1c9a      	adds	r2, r3, #2
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d640:	b29b      	uxth	r3, r3
 800d642:	3b01      	subs	r3, #1
 800d644:	b29a      	uxth	r2, r3
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d64c:	2301      	movs	r3, #1
 800d64e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d650:	f7fb ffa6 	bl	80095a0 <HAL_GetTick>
 800d654:	4602      	mov	r2, r0
 800d656:	6a3b      	ldr	r3, [r7, #32]
 800d658:	1ad3      	subs	r3, r2, r3
 800d65a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d65c:	429a      	cmp	r2, r3
 800d65e:	d80d      	bhi.n	800d67c <HAL_SPI_TransmitReceive+0x212>
 800d660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d662:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d666:	d009      	beq.n	800d67c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	2201      	movs	r2, #1
 800d66c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	2200      	movs	r2, #0
 800d674:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800d678:	2303      	movs	r3, #3
 800d67a:	e111      	b.n	800d8a0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d680:	b29b      	uxth	r3, r3
 800d682:	2b00      	cmp	r3, #0
 800d684:	d19d      	bne.n	800d5c2 <HAL_SPI_TransmitReceive+0x158>
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d68c:	b29b      	uxth	r3, r3
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d197      	bne.n	800d5c2 <HAL_SPI_TransmitReceive+0x158>
 800d692:	e0e5      	b.n	800d860 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	685b      	ldr	r3, [r3, #4]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d003      	beq.n	800d6a4 <HAL_SPI_TransmitReceive+0x23a>
 800d69c:	8afb      	ldrh	r3, [r7, #22]
 800d69e:	2b01      	cmp	r3, #1
 800d6a0:	f040 80d1 	bne.w	800d846 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d6a8:	b29b      	uxth	r3, r3
 800d6aa:	2b01      	cmp	r3, #1
 800d6ac:	d912      	bls.n	800d6d4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6b2:	881a      	ldrh	r2, [r3, #0]
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6be:	1c9a      	adds	r2, r3, #2
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d6c8:	b29b      	uxth	r3, r3
 800d6ca:	3b02      	subs	r3, #2
 800d6cc:	b29a      	uxth	r2, r3
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d6d2:	e0b8      	b.n	800d846 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	330c      	adds	r3, #12
 800d6de:	7812      	ldrb	r2, [r2, #0]
 800d6e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6e6:	1c5a      	adds	r2, r3, #1
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d6f0:	b29b      	uxth	r3, r3
 800d6f2:	3b01      	subs	r3, #1
 800d6f4:	b29a      	uxth	r2, r3
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d6fa:	e0a4      	b.n	800d846 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	689b      	ldr	r3, [r3, #8]
 800d702:	f003 0302 	and.w	r3, r3, #2
 800d706:	2b02      	cmp	r3, #2
 800d708:	d134      	bne.n	800d774 <HAL_SPI_TransmitReceive+0x30a>
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d70e:	b29b      	uxth	r3, r3
 800d710:	2b00      	cmp	r3, #0
 800d712:	d02f      	beq.n	800d774 <HAL_SPI_TransmitReceive+0x30a>
 800d714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d716:	2b01      	cmp	r3, #1
 800d718:	d12c      	bne.n	800d774 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d71e:	b29b      	uxth	r3, r3
 800d720:	2b01      	cmp	r3, #1
 800d722:	d912      	bls.n	800d74a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d728:	881a      	ldrh	r2, [r3, #0]
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d734:	1c9a      	adds	r2, r3, #2
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d73e:	b29b      	uxth	r3, r3
 800d740:	3b02      	subs	r3, #2
 800d742:	b29a      	uxth	r2, r3
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d748:	e012      	b.n	800d770 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	330c      	adds	r3, #12
 800d754:	7812      	ldrb	r2, [r2, #0]
 800d756:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d75c:	1c5a      	adds	r2, r3, #1
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d766:	b29b      	uxth	r3, r3
 800d768:	3b01      	subs	r3, #1
 800d76a:	b29a      	uxth	r2, r3
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d770:	2300      	movs	r3, #0
 800d772:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	689b      	ldr	r3, [r3, #8]
 800d77a:	f003 0301 	and.w	r3, r3, #1
 800d77e:	2b01      	cmp	r3, #1
 800d780:	d148      	bne.n	800d814 <HAL_SPI_TransmitReceive+0x3aa>
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d788:	b29b      	uxth	r3, r3
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d042      	beq.n	800d814 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d794:	b29b      	uxth	r3, r3
 800d796:	2b01      	cmp	r3, #1
 800d798:	d923      	bls.n	800d7e2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	68da      	ldr	r2, [r3, #12]
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7a4:	b292      	uxth	r2, r2
 800d7a6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7ac:	1c9a      	adds	r2, r3, #2
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d7b8:	b29b      	uxth	r3, r3
 800d7ba:	3b02      	subs	r3, #2
 800d7bc:	b29a      	uxth	r2, r3
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d7ca:	b29b      	uxth	r3, r3
 800d7cc:	2b01      	cmp	r3, #1
 800d7ce:	d81f      	bhi.n	800d810 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	685a      	ldr	r2, [r3, #4]
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d7de:	605a      	str	r2, [r3, #4]
 800d7e0:	e016      	b.n	800d810 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	f103 020c 	add.w	r2, r3, #12
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7ee:	7812      	ldrb	r2, [r2, #0]
 800d7f0:	b2d2      	uxtb	r2, r2
 800d7f2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7f8:	1c5a      	adds	r2, r3, #1
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d804:	b29b      	uxth	r3, r3
 800d806:	3b01      	subs	r3, #1
 800d808:	b29a      	uxth	r2, r3
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d810:	2301      	movs	r3, #1
 800d812:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d814:	f7fb fec4 	bl	80095a0 <HAL_GetTick>
 800d818:	4602      	mov	r2, r0
 800d81a:	6a3b      	ldr	r3, [r7, #32]
 800d81c:	1ad3      	subs	r3, r2, r3
 800d81e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d820:	429a      	cmp	r2, r3
 800d822:	d803      	bhi.n	800d82c <HAL_SPI_TransmitReceive+0x3c2>
 800d824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d826:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d82a:	d102      	bne.n	800d832 <HAL_SPI_TransmitReceive+0x3c8>
 800d82c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d109      	bne.n	800d846 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	2201      	movs	r2, #1
 800d836:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	2200      	movs	r2, #0
 800d83e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800d842:	2303      	movs	r3, #3
 800d844:	e02c      	b.n	800d8a0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d84a:	b29b      	uxth	r3, r3
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	f47f af55 	bne.w	800d6fc <HAL_SPI_TransmitReceive+0x292>
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d858:	b29b      	uxth	r3, r3
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	f47f af4e 	bne.w	800d6fc <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d860:	6a3a      	ldr	r2, [r7, #32]
 800d862:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d864:	68f8      	ldr	r0, [r7, #12]
 800d866:	f000 f93d 	bl	800dae4 <SPI_EndRxTxTransaction>
 800d86a:	4603      	mov	r3, r0
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d008      	beq.n	800d882 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	2220      	movs	r2, #32
 800d874:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	2200      	movs	r2, #0
 800d87a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800d87e:	2301      	movs	r3, #1
 800d880:	e00e      	b.n	800d8a0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	2201      	movs	r2, #1
 800d886:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	2200      	movs	r2, #0
 800d88e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d896:	2b00      	cmp	r3, #0
 800d898:	d001      	beq.n	800d89e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800d89a:	2301      	movs	r3, #1
 800d89c:	e000      	b.n	800d8a0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800d89e:	2300      	movs	r3, #0
  }
}
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	3728      	adds	r7, #40	@ 0x28
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd80      	pop	{r7, pc}

0800d8a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b088      	sub	sp, #32
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	60f8      	str	r0, [r7, #12]
 800d8b0:	60b9      	str	r1, [r7, #8]
 800d8b2:	603b      	str	r3, [r7, #0]
 800d8b4:	4613      	mov	r3, r2
 800d8b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d8b8:	f7fb fe72 	bl	80095a0 <HAL_GetTick>
 800d8bc:	4602      	mov	r2, r0
 800d8be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8c0:	1a9b      	subs	r3, r3, r2
 800d8c2:	683a      	ldr	r2, [r7, #0]
 800d8c4:	4413      	add	r3, r2
 800d8c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d8c8:	f7fb fe6a 	bl	80095a0 <HAL_GetTick>
 800d8cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d8ce:	4b39      	ldr	r3, [pc, #228]	@ (800d9b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	015b      	lsls	r3, r3, #5
 800d8d4:	0d1b      	lsrs	r3, r3, #20
 800d8d6:	69fa      	ldr	r2, [r7, #28]
 800d8d8:	fb02 f303 	mul.w	r3, r2, r3
 800d8dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d8de:	e054      	b.n	800d98a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d8e6:	d050      	beq.n	800d98a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d8e8:	f7fb fe5a 	bl	80095a0 <HAL_GetTick>
 800d8ec:	4602      	mov	r2, r0
 800d8ee:	69bb      	ldr	r3, [r7, #24]
 800d8f0:	1ad3      	subs	r3, r2, r3
 800d8f2:	69fa      	ldr	r2, [r7, #28]
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	d902      	bls.n	800d8fe <SPI_WaitFlagStateUntilTimeout+0x56>
 800d8f8:	69fb      	ldr	r3, [r7, #28]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d13d      	bne.n	800d97a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	685a      	ldr	r2, [r3, #4]
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d90c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	685b      	ldr	r3, [r3, #4]
 800d912:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d916:	d111      	bne.n	800d93c <SPI_WaitFlagStateUntilTimeout+0x94>
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	689b      	ldr	r3, [r3, #8]
 800d91c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d920:	d004      	beq.n	800d92c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	689b      	ldr	r3, [r3, #8]
 800d926:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d92a:	d107      	bne.n	800d93c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	681a      	ldr	r2, [r3, #0]
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d93a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d940:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d944:	d10f      	bne.n	800d966 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	681a      	ldr	r2, [r3, #0]
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d954:	601a      	str	r2, [r3, #0]
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	681a      	ldr	r2, [r3, #0]
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d964:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	2201      	movs	r2, #1
 800d96a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	2200      	movs	r2, #0
 800d972:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800d976:	2303      	movs	r3, #3
 800d978:	e017      	b.n	800d9aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d101      	bne.n	800d984 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d980:	2300      	movs	r3, #0
 800d982:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d984:	697b      	ldr	r3, [r7, #20]
 800d986:	3b01      	subs	r3, #1
 800d988:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	689a      	ldr	r2, [r3, #8]
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	4013      	ands	r3, r2
 800d994:	68ba      	ldr	r2, [r7, #8]
 800d996:	429a      	cmp	r2, r3
 800d998:	bf0c      	ite	eq
 800d99a:	2301      	moveq	r3, #1
 800d99c:	2300      	movne	r3, #0
 800d99e:	b2db      	uxtb	r3, r3
 800d9a0:	461a      	mov	r2, r3
 800d9a2:	79fb      	ldrb	r3, [r7, #7]
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	d19b      	bne.n	800d8e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d9a8:	2300      	movs	r3, #0
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	3720      	adds	r7, #32
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}
 800d9b2:	bf00      	nop
 800d9b4:	2000005c 	.word	0x2000005c

0800d9b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b08a      	sub	sp, #40	@ 0x28
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	60f8      	str	r0, [r7, #12]
 800d9c0:	60b9      	str	r1, [r7, #8]
 800d9c2:	607a      	str	r2, [r7, #4]
 800d9c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800d9ca:	f7fb fde9 	bl	80095a0 <HAL_GetTick>
 800d9ce:	4602      	mov	r2, r0
 800d9d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9d2:	1a9b      	subs	r3, r3, r2
 800d9d4:	683a      	ldr	r2, [r7, #0]
 800d9d6:	4413      	add	r3, r2
 800d9d8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800d9da:	f7fb fde1 	bl	80095a0 <HAL_GetTick>
 800d9de:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	330c      	adds	r3, #12
 800d9e6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d9e8:	4b3d      	ldr	r3, [pc, #244]	@ (800dae0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800d9ea:	681a      	ldr	r2, [r3, #0]
 800d9ec:	4613      	mov	r3, r2
 800d9ee:	009b      	lsls	r3, r3, #2
 800d9f0:	4413      	add	r3, r2
 800d9f2:	00da      	lsls	r2, r3, #3
 800d9f4:	1ad3      	subs	r3, r2, r3
 800d9f6:	0d1b      	lsrs	r3, r3, #20
 800d9f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d9fa:	fb02 f303 	mul.w	r3, r2, r3
 800d9fe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800da00:	e060      	b.n	800dac4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800da02:	68bb      	ldr	r3, [r7, #8]
 800da04:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800da08:	d107      	bne.n	800da1a <SPI_WaitFifoStateUntilTimeout+0x62>
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d104      	bne.n	800da1a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800da10:	69fb      	ldr	r3, [r7, #28]
 800da12:	781b      	ldrb	r3, [r3, #0]
 800da14:	b2db      	uxtb	r3, r3
 800da16:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800da18:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800da20:	d050      	beq.n	800dac4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800da22:	f7fb fdbd 	bl	80095a0 <HAL_GetTick>
 800da26:	4602      	mov	r2, r0
 800da28:	6a3b      	ldr	r3, [r7, #32]
 800da2a:	1ad3      	subs	r3, r2, r3
 800da2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800da2e:	429a      	cmp	r2, r3
 800da30:	d902      	bls.n	800da38 <SPI_WaitFifoStateUntilTimeout+0x80>
 800da32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da34:	2b00      	cmp	r3, #0
 800da36:	d13d      	bne.n	800dab4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	685a      	ldr	r2, [r3, #4]
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800da46:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	685b      	ldr	r3, [r3, #4]
 800da4c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800da50:	d111      	bne.n	800da76 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	689b      	ldr	r3, [r3, #8]
 800da56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800da5a:	d004      	beq.n	800da66 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	689b      	ldr	r3, [r3, #8]
 800da60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800da64:	d107      	bne.n	800da76 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	681a      	ldr	r2, [r3, #0]
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800da74:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800da7e:	d10f      	bne.n	800daa0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	681a      	ldr	r2, [r3, #0]
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800da8e:	601a      	str	r2, [r3, #0]
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	681a      	ldr	r2, [r3, #0]
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800da9e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	2201      	movs	r2, #1
 800daa4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	2200      	movs	r2, #0
 800daac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800dab0:	2303      	movs	r3, #3
 800dab2:	e010      	b.n	800dad6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800dab4:	69bb      	ldr	r3, [r7, #24]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d101      	bne.n	800dabe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800daba:	2300      	movs	r3, #0
 800dabc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800dabe:	69bb      	ldr	r3, [r7, #24]
 800dac0:	3b01      	subs	r3, #1
 800dac2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	689a      	ldr	r2, [r3, #8]
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	4013      	ands	r3, r2
 800dace:	687a      	ldr	r2, [r7, #4]
 800dad0:	429a      	cmp	r2, r3
 800dad2:	d196      	bne.n	800da02 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800dad4:	2300      	movs	r3, #0
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	3728      	adds	r7, #40	@ 0x28
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}
 800dade:	bf00      	nop
 800dae0:	2000005c 	.word	0x2000005c

0800dae4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b086      	sub	sp, #24
 800dae8:	af02      	add	r7, sp, #8
 800daea:	60f8      	str	r0, [r7, #12]
 800daec:	60b9      	str	r1, [r7, #8]
 800daee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	9300      	str	r3, [sp, #0]
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	2200      	movs	r2, #0
 800daf8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800dafc:	68f8      	ldr	r0, [r7, #12]
 800dafe:	f7ff ff5b 	bl	800d9b8 <SPI_WaitFifoStateUntilTimeout>
 800db02:	4603      	mov	r3, r0
 800db04:	2b00      	cmp	r3, #0
 800db06:	d007      	beq.n	800db18 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800db0c:	f043 0220 	orr.w	r2, r3, #32
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800db14:	2303      	movs	r3, #3
 800db16:	e027      	b.n	800db68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	9300      	str	r3, [sp, #0]
 800db1c:	68bb      	ldr	r3, [r7, #8]
 800db1e:	2200      	movs	r2, #0
 800db20:	2180      	movs	r1, #128	@ 0x80
 800db22:	68f8      	ldr	r0, [r7, #12]
 800db24:	f7ff fec0 	bl	800d8a8 <SPI_WaitFlagStateUntilTimeout>
 800db28:	4603      	mov	r3, r0
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d007      	beq.n	800db3e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800db32:	f043 0220 	orr.w	r2, r3, #32
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800db3a:	2303      	movs	r3, #3
 800db3c:	e014      	b.n	800db68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	9300      	str	r3, [sp, #0]
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	2200      	movs	r2, #0
 800db46:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800db4a:	68f8      	ldr	r0, [r7, #12]
 800db4c:	f7ff ff34 	bl	800d9b8 <SPI_WaitFifoStateUntilTimeout>
 800db50:	4603      	mov	r3, r0
 800db52:	2b00      	cmp	r3, #0
 800db54:	d007      	beq.n	800db66 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800db5a:	f043 0220 	orr.w	r2, r3, #32
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800db62:	2303      	movs	r3, #3
 800db64:	e000      	b.n	800db68 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800db66:	2300      	movs	r3, #0
}
 800db68:	4618      	mov	r0, r3
 800db6a:	3710      	adds	r7, #16
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}

0800db70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b082      	sub	sp, #8
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d101      	bne.n	800db82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800db7e:	2301      	movs	r3, #1
 800db80:	e049      	b.n	800dc16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800db88:	b2db      	uxtb	r3, r3
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d106      	bne.n	800db9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	2200      	movs	r2, #0
 800db92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f7fb fba6 	bl	80092e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2202      	movs	r2, #2
 800dba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681a      	ldr	r2, [r3, #0]
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	3304      	adds	r3, #4
 800dbac:	4619      	mov	r1, r3
 800dbae:	4610      	mov	r0, r2
 800dbb0:	f000 f9ba 	bl	800df28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2201      	movs	r2, #1
 800dbb8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2201      	movs	r2, #1
 800dbc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2201      	movs	r2, #1
 800dbc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2201      	movs	r2, #1
 800dbd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2201      	movs	r2, #1
 800dbd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2201      	movs	r2, #1
 800dbe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2201      	movs	r2, #1
 800dbe8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2201      	movs	r2, #1
 800dbf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2201      	movs	r2, #1
 800dbf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2201      	movs	r2, #1
 800dc00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2201      	movs	r2, #1
 800dc08:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2201      	movs	r2, #1
 800dc10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800dc14:	2300      	movs	r3, #0
}
 800dc16:	4618      	mov	r0, r3
 800dc18:	3708      	adds	r7, #8
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}
	...

0800dc20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dc20:	b480      	push	{r7}
 800dc22:	b085      	sub	sp, #20
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dc2e:	b2db      	uxtb	r3, r3
 800dc30:	2b01      	cmp	r3, #1
 800dc32:	d001      	beq.n	800dc38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800dc34:	2301      	movs	r3, #1
 800dc36:	e03b      	b.n	800dcb0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2202      	movs	r2, #2
 800dc3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	68da      	ldr	r2, [r3, #12]
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	f042 0201 	orr.w	r2, r2, #1
 800dc4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	4a19      	ldr	r2, [pc, #100]	@ (800dcbc <HAL_TIM_Base_Start_IT+0x9c>)
 800dc56:	4293      	cmp	r3, r2
 800dc58:	d009      	beq.n	800dc6e <HAL_TIM_Base_Start_IT+0x4e>
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc62:	d004      	beq.n	800dc6e <HAL_TIM_Base_Start_IT+0x4e>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	4a15      	ldr	r2, [pc, #84]	@ (800dcc0 <HAL_TIM_Base_Start_IT+0xa0>)
 800dc6a:	4293      	cmp	r3, r2
 800dc6c:	d115      	bne.n	800dc9a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	689a      	ldr	r2, [r3, #8]
 800dc74:	4b13      	ldr	r3, [pc, #76]	@ (800dcc4 <HAL_TIM_Base_Start_IT+0xa4>)
 800dc76:	4013      	ands	r3, r2
 800dc78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	2b06      	cmp	r3, #6
 800dc7e:	d015      	beq.n	800dcac <HAL_TIM_Base_Start_IT+0x8c>
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dc86:	d011      	beq.n	800dcac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	681a      	ldr	r2, [r3, #0]
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	f042 0201 	orr.w	r2, r2, #1
 800dc96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc98:	e008      	b.n	800dcac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	681a      	ldr	r2, [r3, #0]
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	f042 0201 	orr.w	r2, r2, #1
 800dca8:	601a      	str	r2, [r3, #0]
 800dcaa:	e000      	b.n	800dcae <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dcac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dcae:	2300      	movs	r3, #0
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	3714      	adds	r7, #20
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcba:	4770      	bx	lr
 800dcbc:	40012c00 	.word	0x40012c00
 800dcc0:	40014000 	.word	0x40014000
 800dcc4:	00010007 	.word	0x00010007

0800dcc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b084      	sub	sp, #16
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	68db      	ldr	r3, [r3, #12]
 800dcd6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	691b      	ldr	r3, [r3, #16]
 800dcde:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	f003 0302 	and.w	r3, r3, #2
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d020      	beq.n	800dd2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	f003 0302 	and.w	r3, r3, #2
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d01b      	beq.n	800dd2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	f06f 0202 	mvn.w	r2, #2
 800dcfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2201      	movs	r2, #1
 800dd02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	699b      	ldr	r3, [r3, #24]
 800dd0a:	f003 0303 	and.w	r3, r3, #3
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d003      	beq.n	800dd1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	f000 f8e9 	bl	800deea <HAL_TIM_IC_CaptureCallback>
 800dd18:	e005      	b.n	800dd26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd1a:	6878      	ldr	r0, [r7, #4]
 800dd1c:	f000 f8db 	bl	800ded6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f000 f8ec 	bl	800defe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2200      	movs	r2, #0
 800dd2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	f003 0304 	and.w	r3, r3, #4
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d020      	beq.n	800dd78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	f003 0304 	and.w	r3, r3, #4
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d01b      	beq.n	800dd78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	f06f 0204 	mvn.w	r2, #4
 800dd48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2202      	movs	r2, #2
 800dd4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	699b      	ldr	r3, [r3, #24]
 800dd56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d003      	beq.n	800dd66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f000 f8c3 	bl	800deea <HAL_TIM_IC_CaptureCallback>
 800dd64:	e005      	b.n	800dd72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f000 f8b5 	bl	800ded6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f000 f8c6 	bl	800defe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2200      	movs	r2, #0
 800dd76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800dd78:	68bb      	ldr	r3, [r7, #8]
 800dd7a:	f003 0308 	and.w	r3, r3, #8
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d020      	beq.n	800ddc4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	f003 0308 	and.w	r3, r3, #8
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d01b      	beq.n	800ddc4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	f06f 0208 	mvn.w	r2, #8
 800dd94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2204      	movs	r2, #4
 800dd9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	69db      	ldr	r3, [r3, #28]
 800dda2:	f003 0303 	and.w	r3, r3, #3
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d003      	beq.n	800ddb2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ddaa:	6878      	ldr	r0, [r7, #4]
 800ddac:	f000 f89d 	bl	800deea <HAL_TIM_IC_CaptureCallback>
 800ddb0:	e005      	b.n	800ddbe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ddb2:	6878      	ldr	r0, [r7, #4]
 800ddb4:	f000 f88f 	bl	800ded6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f000 f8a0 	bl	800defe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	f003 0310 	and.w	r3, r3, #16
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d020      	beq.n	800de10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	f003 0310 	and.w	r3, r3, #16
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d01b      	beq.n	800de10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	f06f 0210 	mvn.w	r2, #16
 800dde0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2208      	movs	r2, #8
 800dde6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	69db      	ldr	r3, [r3, #28]
 800ddee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d003      	beq.n	800ddfe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f000 f877 	bl	800deea <HAL_TIM_IC_CaptureCallback>
 800ddfc:	e005      	b.n	800de0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f000 f869 	bl	800ded6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f000 f87a 	bl	800defe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	2200      	movs	r2, #0
 800de0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	f003 0301 	and.w	r3, r3, #1
 800de16:	2b00      	cmp	r3, #0
 800de18:	d00c      	beq.n	800de34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	f003 0301 	and.w	r3, r3, #1
 800de20:	2b00      	cmp	r3, #0
 800de22:	d007      	beq.n	800de34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	f06f 0201 	mvn.w	r2, #1
 800de2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f7fa f968 	bl	8008104 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d104      	bne.n	800de48 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800de3e:	68bb      	ldr	r3, [r7, #8]
 800de40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800de44:	2b00      	cmp	r3, #0
 800de46:	d00c      	beq.n	800de62 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d007      	beq.n	800de62 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800de5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f000 f943 	bl	800e0e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d00c      	beq.n	800de86 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800de72:	2b00      	cmp	r3, #0
 800de74:	d007      	beq.n	800de86 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800de7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f000 f93b 	bl	800e0fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800de86:	68bb      	ldr	r3, [r7, #8]
 800de88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d00c      	beq.n	800deaa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de96:	2b00      	cmp	r3, #0
 800de98:	d007      	beq.n	800deaa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800dea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f000 f834 	bl	800df12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	f003 0320 	and.w	r3, r3, #32
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d00c      	beq.n	800dece <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	f003 0320 	and.w	r3, r3, #32
 800deba:	2b00      	cmp	r3, #0
 800debc:	d007      	beq.n	800dece <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	f06f 0220 	mvn.w	r2, #32
 800dec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dec8:	6878      	ldr	r0, [r7, #4]
 800deca:	f000 f903 	bl	800e0d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dece:	bf00      	nop
 800ded0:	3710      	adds	r7, #16
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}

0800ded6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ded6:	b480      	push	{r7}
 800ded8:	b083      	sub	sp, #12
 800deda:	af00      	add	r7, sp, #0
 800dedc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dede:	bf00      	nop
 800dee0:	370c      	adds	r7, #12
 800dee2:	46bd      	mov	sp, r7
 800dee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee8:	4770      	bx	lr

0800deea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800deea:	b480      	push	{r7}
 800deec:	b083      	sub	sp, #12
 800deee:	af00      	add	r7, sp, #0
 800def0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800def2:	bf00      	nop
 800def4:	370c      	adds	r7, #12
 800def6:	46bd      	mov	sp, r7
 800def8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defc:	4770      	bx	lr

0800defe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800defe:	b480      	push	{r7}
 800df00:	b083      	sub	sp, #12
 800df02:	af00      	add	r7, sp, #0
 800df04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800df06:	bf00      	nop
 800df08:	370c      	adds	r7, #12
 800df0a:	46bd      	mov	sp, r7
 800df0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df10:	4770      	bx	lr

0800df12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800df12:	b480      	push	{r7}
 800df14:	b083      	sub	sp, #12
 800df16:	af00      	add	r7, sp, #0
 800df18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800df1a:	bf00      	nop
 800df1c:	370c      	adds	r7, #12
 800df1e:	46bd      	mov	sp, r7
 800df20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df24:	4770      	bx	lr
	...

0800df28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800df28:	b480      	push	{r7}
 800df2a:	b085      	sub	sp, #20
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
 800df30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	4a30      	ldr	r2, [pc, #192]	@ (800dffc <TIM_Base_SetConfig+0xd4>)
 800df3c:	4293      	cmp	r3, r2
 800df3e:	d003      	beq.n	800df48 <TIM_Base_SetConfig+0x20>
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df46:	d108      	bne.n	800df5a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800df4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	68fa      	ldr	r2, [r7, #12]
 800df56:	4313      	orrs	r3, r2
 800df58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	4a27      	ldr	r2, [pc, #156]	@ (800dffc <TIM_Base_SetConfig+0xd4>)
 800df5e:	4293      	cmp	r3, r2
 800df60:	d00b      	beq.n	800df7a <TIM_Base_SetConfig+0x52>
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df68:	d007      	beq.n	800df7a <TIM_Base_SetConfig+0x52>
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	4a24      	ldr	r2, [pc, #144]	@ (800e000 <TIM_Base_SetConfig+0xd8>)
 800df6e:	4293      	cmp	r3, r2
 800df70:	d003      	beq.n	800df7a <TIM_Base_SetConfig+0x52>
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	4a23      	ldr	r2, [pc, #140]	@ (800e004 <TIM_Base_SetConfig+0xdc>)
 800df76:	4293      	cmp	r3, r2
 800df78:	d108      	bne.n	800df8c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800df80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	68db      	ldr	r3, [r3, #12]
 800df86:	68fa      	ldr	r2, [r7, #12]
 800df88:	4313      	orrs	r3, r2
 800df8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	695b      	ldr	r3, [r3, #20]
 800df96:	4313      	orrs	r3, r2
 800df98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	68fa      	ldr	r2, [r7, #12]
 800df9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	689a      	ldr	r2, [r3, #8]
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	681a      	ldr	r2, [r3, #0]
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	4a12      	ldr	r2, [pc, #72]	@ (800dffc <TIM_Base_SetConfig+0xd4>)
 800dfb4:	4293      	cmp	r3, r2
 800dfb6:	d007      	beq.n	800dfc8 <TIM_Base_SetConfig+0xa0>
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	4a11      	ldr	r2, [pc, #68]	@ (800e000 <TIM_Base_SetConfig+0xd8>)
 800dfbc:	4293      	cmp	r3, r2
 800dfbe:	d003      	beq.n	800dfc8 <TIM_Base_SetConfig+0xa0>
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	4a10      	ldr	r2, [pc, #64]	@ (800e004 <TIM_Base_SetConfig+0xdc>)
 800dfc4:	4293      	cmp	r3, r2
 800dfc6:	d103      	bne.n	800dfd0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	691a      	ldr	r2, [r3, #16]
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2201      	movs	r2, #1
 800dfd4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	691b      	ldr	r3, [r3, #16]
 800dfda:	f003 0301 	and.w	r3, r3, #1
 800dfde:	2b01      	cmp	r3, #1
 800dfe0:	d105      	bne.n	800dfee <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	691b      	ldr	r3, [r3, #16]
 800dfe6:	f023 0201 	bic.w	r2, r3, #1
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	611a      	str	r2, [r3, #16]
  }
}
 800dfee:	bf00      	nop
 800dff0:	3714      	adds	r7, #20
 800dff2:	46bd      	mov	sp, r7
 800dff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff8:	4770      	bx	lr
 800dffa:	bf00      	nop
 800dffc:	40012c00 	.word	0x40012c00
 800e000:	40014000 	.word	0x40014000
 800e004:	40014400 	.word	0x40014400

0800e008 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e008:	b480      	push	{r7}
 800e00a:	b085      	sub	sp, #20
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
 800e010:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e018:	2b01      	cmp	r3, #1
 800e01a:	d101      	bne.n	800e020 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e01c:	2302      	movs	r3, #2
 800e01e:	e04f      	b.n	800e0c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2201      	movs	r2, #1
 800e024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2202      	movs	r2, #2
 800e02c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	685b      	ldr	r3, [r3, #4]
 800e036:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	689b      	ldr	r3, [r3, #8]
 800e03e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	4a21      	ldr	r2, [pc, #132]	@ (800e0cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800e046:	4293      	cmp	r3, r2
 800e048:	d108      	bne.n	800e05c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e050:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	685b      	ldr	r3, [r3, #4]
 800e056:	68fa      	ldr	r2, [r7, #12]
 800e058:	4313      	orrs	r3, r2
 800e05a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e062:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	68fa      	ldr	r2, [r7, #12]
 800e06a:	4313      	orrs	r3, r2
 800e06c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	68fa      	ldr	r2, [r7, #12]
 800e074:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	4a14      	ldr	r2, [pc, #80]	@ (800e0cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800e07c:	4293      	cmp	r3, r2
 800e07e:	d009      	beq.n	800e094 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e088:	d004      	beq.n	800e094 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	4a10      	ldr	r2, [pc, #64]	@ (800e0d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800e090:	4293      	cmp	r3, r2
 800e092:	d10c      	bne.n	800e0ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e09a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	689b      	ldr	r3, [r3, #8]
 800e0a0:	68ba      	ldr	r2, [r7, #8]
 800e0a2:	4313      	orrs	r3, r2
 800e0a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	68ba      	ldr	r2, [r7, #8]
 800e0ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	2201      	movs	r2, #1
 800e0b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e0be:	2300      	movs	r3, #0
}
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	3714      	adds	r7, #20
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ca:	4770      	bx	lr
 800e0cc:	40012c00 	.word	0x40012c00
 800e0d0:	40014000 	.word	0x40014000

0800e0d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e0d4:	b480      	push	{r7}
 800e0d6:	b083      	sub	sp, #12
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e0dc:	bf00      	nop
 800e0de:	370c      	adds	r7, #12
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e6:	4770      	bx	lr

0800e0e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b083      	sub	sp, #12
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e0f0:	bf00      	nop
 800e0f2:	370c      	adds	r7, #12
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fa:	4770      	bx	lr

0800e0fc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b083      	sub	sp, #12
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e104:	bf00      	nop
 800e106:	370c      	adds	r7, #12
 800e108:	46bd      	mov	sp, r7
 800e10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10e:	4770      	bx	lr

0800e110 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b082      	sub	sp, #8
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d101      	bne.n	800e122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e11e:	2301      	movs	r3, #1
 800e120:	e040      	b.n	800e1a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e126:	2b00      	cmp	r3, #0
 800e128:	d106      	bne.n	800e138 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2200      	movs	r2, #0
 800e12e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f7fb f94a 	bl	80093cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2224      	movs	r2, #36	@ 0x24
 800e13c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	681a      	ldr	r2, [r3, #0]
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	f022 0201 	bic.w	r2, r2, #1
 800e14c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e152:	2b00      	cmp	r3, #0
 800e154:	d002      	beq.n	800e15c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f000 fade 	bl	800e718 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e15c:	6878      	ldr	r0, [r7, #4]
 800e15e:	f000 f8af 	bl	800e2c0 <UART_SetConfig>
 800e162:	4603      	mov	r3, r0
 800e164:	2b01      	cmp	r3, #1
 800e166:	d101      	bne.n	800e16c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800e168:	2301      	movs	r3, #1
 800e16a:	e01b      	b.n	800e1a4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	685a      	ldr	r2, [r3, #4]
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e17a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	689a      	ldr	r2, [r3, #8]
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e18a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	681a      	ldr	r2, [r3, #0]
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	f042 0201 	orr.w	r2, r2, #1
 800e19a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f000 fb5d 	bl	800e85c <UART_CheckIdleState>
 800e1a2:	4603      	mov	r3, r0
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3708      	adds	r7, #8
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}

0800e1ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b08a      	sub	sp, #40	@ 0x28
 800e1b0:	af02      	add	r7, sp, #8
 800e1b2:	60f8      	str	r0, [r7, #12]
 800e1b4:	60b9      	str	r1, [r7, #8]
 800e1b6:	603b      	str	r3, [r7, #0]
 800e1b8:	4613      	mov	r3, r2
 800e1ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e1c0:	2b20      	cmp	r3, #32
 800e1c2:	d177      	bne.n	800e2b4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800e1c4:	68bb      	ldr	r3, [r7, #8]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d002      	beq.n	800e1d0 <HAL_UART_Transmit+0x24>
 800e1ca:	88fb      	ldrh	r3, [r7, #6]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d101      	bne.n	800e1d4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800e1d0:	2301      	movs	r3, #1
 800e1d2:	e070      	b.n	800e2b6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	2221      	movs	r2, #33	@ 0x21
 800e1e0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e1e2:	f7fb f9dd 	bl	80095a0 <HAL_GetTick>
 800e1e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	88fa      	ldrh	r2, [r7, #6]
 800e1ec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	88fa      	ldrh	r2, [r7, #6]
 800e1f4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	689b      	ldr	r3, [r3, #8]
 800e1fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e200:	d108      	bne.n	800e214 <HAL_UART_Transmit+0x68>
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	691b      	ldr	r3, [r3, #16]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d104      	bne.n	800e214 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800e20a:	2300      	movs	r3, #0
 800e20c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e20e:	68bb      	ldr	r3, [r7, #8]
 800e210:	61bb      	str	r3, [r7, #24]
 800e212:	e003      	b.n	800e21c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e218:	2300      	movs	r3, #0
 800e21a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e21c:	e02f      	b.n	800e27e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	9300      	str	r3, [sp, #0]
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	2200      	movs	r2, #0
 800e226:	2180      	movs	r1, #128	@ 0x80
 800e228:	68f8      	ldr	r0, [r7, #12]
 800e22a:	f000 fbbf 	bl	800e9ac <UART_WaitOnFlagUntilTimeout>
 800e22e:	4603      	mov	r3, r0
 800e230:	2b00      	cmp	r3, #0
 800e232:	d004      	beq.n	800e23e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	2220      	movs	r2, #32
 800e238:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800e23a:	2303      	movs	r3, #3
 800e23c:	e03b      	b.n	800e2b6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800e23e:	69fb      	ldr	r3, [r7, #28]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d10b      	bne.n	800e25c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e244:	69bb      	ldr	r3, [r7, #24]
 800e246:	881a      	ldrh	r2, [r3, #0]
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e250:	b292      	uxth	r2, r2
 800e252:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e254:	69bb      	ldr	r3, [r7, #24]
 800e256:	3302      	adds	r3, #2
 800e258:	61bb      	str	r3, [r7, #24]
 800e25a:	e007      	b.n	800e26c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e25c:	69fb      	ldr	r3, [r7, #28]
 800e25e:	781a      	ldrb	r2, [r3, #0]
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e266:	69fb      	ldr	r3, [r7, #28]
 800e268:	3301      	adds	r3, #1
 800e26a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800e272:	b29b      	uxth	r3, r3
 800e274:	3b01      	subs	r3, #1
 800e276:	b29a      	uxth	r2, r3
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800e284:	b29b      	uxth	r3, r3
 800e286:	2b00      	cmp	r3, #0
 800e288:	d1c9      	bne.n	800e21e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	9300      	str	r3, [sp, #0]
 800e28e:	697b      	ldr	r3, [r7, #20]
 800e290:	2200      	movs	r2, #0
 800e292:	2140      	movs	r1, #64	@ 0x40
 800e294:	68f8      	ldr	r0, [r7, #12]
 800e296:	f000 fb89 	bl	800e9ac <UART_WaitOnFlagUntilTimeout>
 800e29a:	4603      	mov	r3, r0
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d004      	beq.n	800e2aa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	2220      	movs	r2, #32
 800e2a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800e2a6:	2303      	movs	r3, #3
 800e2a8:	e005      	b.n	800e2b6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	2220      	movs	r2, #32
 800e2ae:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	e000      	b.n	800e2b6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800e2b4:	2302      	movs	r3, #2
  }
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3720      	adds	r7, #32
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}
	...

0800e2c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e2c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e2c4:	b08a      	sub	sp, #40	@ 0x28
 800e2c6:	af00      	add	r7, sp, #0
 800e2c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	689a      	ldr	r2, [r3, #8]
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	691b      	ldr	r3, [r3, #16]
 800e2d8:	431a      	orrs	r2, r3
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	695b      	ldr	r3, [r3, #20]
 800e2de:	431a      	orrs	r2, r3
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	69db      	ldr	r3, [r3, #28]
 800e2e4:	4313      	orrs	r3, r2
 800e2e6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	681a      	ldr	r2, [r3, #0]
 800e2ee:	4bb4      	ldr	r3, [pc, #720]	@ (800e5c0 <UART_SetConfig+0x300>)
 800e2f0:	4013      	ands	r3, r2
 800e2f2:	68fa      	ldr	r2, [r7, #12]
 800e2f4:	6812      	ldr	r2, [r2, #0]
 800e2f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e2f8:	430b      	orrs	r3, r1
 800e2fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	685b      	ldr	r3, [r3, #4]
 800e302:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	68da      	ldr	r2, [r3, #12]
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	430a      	orrs	r2, r1
 800e310:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	699b      	ldr	r3, [r3, #24]
 800e316:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	4aa9      	ldr	r2, [pc, #676]	@ (800e5c4 <UART_SetConfig+0x304>)
 800e31e:	4293      	cmp	r3, r2
 800e320:	d004      	beq.n	800e32c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	6a1b      	ldr	r3, [r3, #32]
 800e326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e328:	4313      	orrs	r3, r2
 800e32a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	689b      	ldr	r3, [r3, #8]
 800e332:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e33c:	430a      	orrs	r2, r1
 800e33e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	4aa0      	ldr	r2, [pc, #640]	@ (800e5c8 <UART_SetConfig+0x308>)
 800e346:	4293      	cmp	r3, r2
 800e348:	d126      	bne.n	800e398 <UART_SetConfig+0xd8>
 800e34a:	4ba0      	ldr	r3, [pc, #640]	@ (800e5cc <UART_SetConfig+0x30c>)
 800e34c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e350:	f003 0303 	and.w	r3, r3, #3
 800e354:	2b03      	cmp	r3, #3
 800e356:	d81b      	bhi.n	800e390 <UART_SetConfig+0xd0>
 800e358:	a201      	add	r2, pc, #4	@ (adr r2, 800e360 <UART_SetConfig+0xa0>)
 800e35a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e35e:	bf00      	nop
 800e360:	0800e371 	.word	0x0800e371
 800e364:	0800e381 	.word	0x0800e381
 800e368:	0800e379 	.word	0x0800e379
 800e36c:	0800e389 	.word	0x0800e389
 800e370:	2301      	movs	r3, #1
 800e372:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e376:	e080      	b.n	800e47a <UART_SetConfig+0x1ba>
 800e378:	2302      	movs	r3, #2
 800e37a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e37e:	e07c      	b.n	800e47a <UART_SetConfig+0x1ba>
 800e380:	2304      	movs	r3, #4
 800e382:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e386:	e078      	b.n	800e47a <UART_SetConfig+0x1ba>
 800e388:	2308      	movs	r3, #8
 800e38a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e38e:	e074      	b.n	800e47a <UART_SetConfig+0x1ba>
 800e390:	2310      	movs	r3, #16
 800e392:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e396:	e070      	b.n	800e47a <UART_SetConfig+0x1ba>
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	4a8c      	ldr	r2, [pc, #560]	@ (800e5d0 <UART_SetConfig+0x310>)
 800e39e:	4293      	cmp	r3, r2
 800e3a0:	d138      	bne.n	800e414 <UART_SetConfig+0x154>
 800e3a2:	4b8a      	ldr	r3, [pc, #552]	@ (800e5cc <UART_SetConfig+0x30c>)
 800e3a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e3a8:	f003 030c 	and.w	r3, r3, #12
 800e3ac:	2b0c      	cmp	r3, #12
 800e3ae:	d82d      	bhi.n	800e40c <UART_SetConfig+0x14c>
 800e3b0:	a201      	add	r2, pc, #4	@ (adr r2, 800e3b8 <UART_SetConfig+0xf8>)
 800e3b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3b6:	bf00      	nop
 800e3b8:	0800e3ed 	.word	0x0800e3ed
 800e3bc:	0800e40d 	.word	0x0800e40d
 800e3c0:	0800e40d 	.word	0x0800e40d
 800e3c4:	0800e40d 	.word	0x0800e40d
 800e3c8:	0800e3fd 	.word	0x0800e3fd
 800e3cc:	0800e40d 	.word	0x0800e40d
 800e3d0:	0800e40d 	.word	0x0800e40d
 800e3d4:	0800e40d 	.word	0x0800e40d
 800e3d8:	0800e3f5 	.word	0x0800e3f5
 800e3dc:	0800e40d 	.word	0x0800e40d
 800e3e0:	0800e40d 	.word	0x0800e40d
 800e3e4:	0800e40d 	.word	0x0800e40d
 800e3e8:	0800e405 	.word	0x0800e405
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e3f2:	e042      	b.n	800e47a <UART_SetConfig+0x1ba>
 800e3f4:	2302      	movs	r3, #2
 800e3f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e3fa:	e03e      	b.n	800e47a <UART_SetConfig+0x1ba>
 800e3fc:	2304      	movs	r3, #4
 800e3fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e402:	e03a      	b.n	800e47a <UART_SetConfig+0x1ba>
 800e404:	2308      	movs	r3, #8
 800e406:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e40a:	e036      	b.n	800e47a <UART_SetConfig+0x1ba>
 800e40c:	2310      	movs	r3, #16
 800e40e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e412:	e032      	b.n	800e47a <UART_SetConfig+0x1ba>
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	4a6a      	ldr	r2, [pc, #424]	@ (800e5c4 <UART_SetConfig+0x304>)
 800e41a:	4293      	cmp	r3, r2
 800e41c:	d12a      	bne.n	800e474 <UART_SetConfig+0x1b4>
 800e41e:	4b6b      	ldr	r3, [pc, #428]	@ (800e5cc <UART_SetConfig+0x30c>)
 800e420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e424:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800e428:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e42c:	d01a      	beq.n	800e464 <UART_SetConfig+0x1a4>
 800e42e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e432:	d81b      	bhi.n	800e46c <UART_SetConfig+0x1ac>
 800e434:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e438:	d00c      	beq.n	800e454 <UART_SetConfig+0x194>
 800e43a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e43e:	d815      	bhi.n	800e46c <UART_SetConfig+0x1ac>
 800e440:	2b00      	cmp	r3, #0
 800e442:	d003      	beq.n	800e44c <UART_SetConfig+0x18c>
 800e444:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e448:	d008      	beq.n	800e45c <UART_SetConfig+0x19c>
 800e44a:	e00f      	b.n	800e46c <UART_SetConfig+0x1ac>
 800e44c:	2300      	movs	r3, #0
 800e44e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e452:	e012      	b.n	800e47a <UART_SetConfig+0x1ba>
 800e454:	2302      	movs	r3, #2
 800e456:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e45a:	e00e      	b.n	800e47a <UART_SetConfig+0x1ba>
 800e45c:	2304      	movs	r3, #4
 800e45e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e462:	e00a      	b.n	800e47a <UART_SetConfig+0x1ba>
 800e464:	2308      	movs	r3, #8
 800e466:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e46a:	e006      	b.n	800e47a <UART_SetConfig+0x1ba>
 800e46c:	2310      	movs	r3, #16
 800e46e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e472:	e002      	b.n	800e47a <UART_SetConfig+0x1ba>
 800e474:	2310      	movs	r3, #16
 800e476:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	4a51      	ldr	r2, [pc, #324]	@ (800e5c4 <UART_SetConfig+0x304>)
 800e480:	4293      	cmp	r3, r2
 800e482:	d17a      	bne.n	800e57a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e484:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e488:	2b08      	cmp	r3, #8
 800e48a:	d824      	bhi.n	800e4d6 <UART_SetConfig+0x216>
 800e48c:	a201      	add	r2, pc, #4	@ (adr r2, 800e494 <UART_SetConfig+0x1d4>)
 800e48e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e492:	bf00      	nop
 800e494:	0800e4b9 	.word	0x0800e4b9
 800e498:	0800e4d7 	.word	0x0800e4d7
 800e49c:	0800e4c1 	.word	0x0800e4c1
 800e4a0:	0800e4d7 	.word	0x0800e4d7
 800e4a4:	0800e4c7 	.word	0x0800e4c7
 800e4a8:	0800e4d7 	.word	0x0800e4d7
 800e4ac:	0800e4d7 	.word	0x0800e4d7
 800e4b0:	0800e4d7 	.word	0x0800e4d7
 800e4b4:	0800e4cf 	.word	0x0800e4cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e4b8:	f7fe fbc0 	bl	800cc3c <HAL_RCC_GetPCLK1Freq>
 800e4bc:	61f8      	str	r0, [r7, #28]
        break;
 800e4be:	e010      	b.n	800e4e2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e4c0:	4b44      	ldr	r3, [pc, #272]	@ (800e5d4 <UART_SetConfig+0x314>)
 800e4c2:	61fb      	str	r3, [r7, #28]
        break;
 800e4c4:	e00d      	b.n	800e4e2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e4c6:	f7fe fb21 	bl	800cb0c <HAL_RCC_GetSysClockFreq>
 800e4ca:	61f8      	str	r0, [r7, #28]
        break;
 800e4cc:	e009      	b.n	800e4e2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e4ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e4d2:	61fb      	str	r3, [r7, #28]
        break;
 800e4d4:	e005      	b.n	800e4e2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e4da:	2301      	movs	r3, #1
 800e4dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800e4e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e4e2:	69fb      	ldr	r3, [r7, #28]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	f000 8107 	beq.w	800e6f8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	685a      	ldr	r2, [r3, #4]
 800e4ee:	4613      	mov	r3, r2
 800e4f0:	005b      	lsls	r3, r3, #1
 800e4f2:	4413      	add	r3, r2
 800e4f4:	69fa      	ldr	r2, [r7, #28]
 800e4f6:	429a      	cmp	r2, r3
 800e4f8:	d305      	bcc.n	800e506 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	685b      	ldr	r3, [r3, #4]
 800e4fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e500:	69fa      	ldr	r2, [r7, #28]
 800e502:	429a      	cmp	r2, r3
 800e504:	d903      	bls.n	800e50e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800e506:	2301      	movs	r3, #1
 800e508:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800e50c:	e0f4      	b.n	800e6f8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800e50e:	69fb      	ldr	r3, [r7, #28]
 800e510:	2200      	movs	r2, #0
 800e512:	461c      	mov	r4, r3
 800e514:	4615      	mov	r5, r2
 800e516:	f04f 0200 	mov.w	r2, #0
 800e51a:	f04f 0300 	mov.w	r3, #0
 800e51e:	022b      	lsls	r3, r5, #8
 800e520:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800e524:	0222      	lsls	r2, r4, #8
 800e526:	68f9      	ldr	r1, [r7, #12]
 800e528:	6849      	ldr	r1, [r1, #4]
 800e52a:	0849      	lsrs	r1, r1, #1
 800e52c:	2000      	movs	r0, #0
 800e52e:	4688      	mov	r8, r1
 800e530:	4681      	mov	r9, r0
 800e532:	eb12 0a08 	adds.w	sl, r2, r8
 800e536:	eb43 0b09 	adc.w	fp, r3, r9
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	685b      	ldr	r3, [r3, #4]
 800e53e:	2200      	movs	r2, #0
 800e540:	603b      	str	r3, [r7, #0]
 800e542:	607a      	str	r2, [r7, #4]
 800e544:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e548:	4650      	mov	r0, sl
 800e54a:	4659      	mov	r1, fp
 800e54c:	f7f2 fafe 	bl	8000b4c <__aeabi_uldivmod>
 800e550:	4602      	mov	r2, r0
 800e552:	460b      	mov	r3, r1
 800e554:	4613      	mov	r3, r2
 800e556:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e558:	69bb      	ldr	r3, [r7, #24]
 800e55a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e55e:	d308      	bcc.n	800e572 <UART_SetConfig+0x2b2>
 800e560:	69bb      	ldr	r3, [r7, #24]
 800e562:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e566:	d204      	bcs.n	800e572 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	69ba      	ldr	r2, [r7, #24]
 800e56e:	60da      	str	r2, [r3, #12]
 800e570:	e0c2      	b.n	800e6f8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800e572:	2301      	movs	r3, #1
 800e574:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800e578:	e0be      	b.n	800e6f8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	69db      	ldr	r3, [r3, #28]
 800e57e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e582:	d16a      	bne.n	800e65a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800e584:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e588:	2b08      	cmp	r3, #8
 800e58a:	d834      	bhi.n	800e5f6 <UART_SetConfig+0x336>
 800e58c:	a201      	add	r2, pc, #4	@ (adr r2, 800e594 <UART_SetConfig+0x2d4>)
 800e58e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e592:	bf00      	nop
 800e594:	0800e5b9 	.word	0x0800e5b9
 800e598:	0800e5d9 	.word	0x0800e5d9
 800e59c:	0800e5e1 	.word	0x0800e5e1
 800e5a0:	0800e5f7 	.word	0x0800e5f7
 800e5a4:	0800e5e7 	.word	0x0800e5e7
 800e5a8:	0800e5f7 	.word	0x0800e5f7
 800e5ac:	0800e5f7 	.word	0x0800e5f7
 800e5b0:	0800e5f7 	.word	0x0800e5f7
 800e5b4:	0800e5ef 	.word	0x0800e5ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e5b8:	f7fe fb40 	bl	800cc3c <HAL_RCC_GetPCLK1Freq>
 800e5bc:	61f8      	str	r0, [r7, #28]
        break;
 800e5be:	e020      	b.n	800e602 <UART_SetConfig+0x342>
 800e5c0:	efff69f3 	.word	0xefff69f3
 800e5c4:	40008000 	.word	0x40008000
 800e5c8:	40013800 	.word	0x40013800
 800e5cc:	40021000 	.word	0x40021000
 800e5d0:	40004400 	.word	0x40004400
 800e5d4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e5d8:	f7fe fb46 	bl	800cc68 <HAL_RCC_GetPCLK2Freq>
 800e5dc:	61f8      	str	r0, [r7, #28]
        break;
 800e5de:	e010      	b.n	800e602 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e5e0:	4b4c      	ldr	r3, [pc, #304]	@ (800e714 <UART_SetConfig+0x454>)
 800e5e2:	61fb      	str	r3, [r7, #28]
        break;
 800e5e4:	e00d      	b.n	800e602 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e5e6:	f7fe fa91 	bl	800cb0c <HAL_RCC_GetSysClockFreq>
 800e5ea:	61f8      	str	r0, [r7, #28]
        break;
 800e5ec:	e009      	b.n	800e602 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e5ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e5f2:	61fb      	str	r3, [r7, #28]
        break;
 800e5f4:	e005      	b.n	800e602 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800e600:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e602:	69fb      	ldr	r3, [r7, #28]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d077      	beq.n	800e6f8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e608:	69fb      	ldr	r3, [r7, #28]
 800e60a:	005a      	lsls	r2, r3, #1
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	685b      	ldr	r3, [r3, #4]
 800e610:	085b      	lsrs	r3, r3, #1
 800e612:	441a      	add	r2, r3
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	685b      	ldr	r3, [r3, #4]
 800e618:	fbb2 f3f3 	udiv	r3, r2, r3
 800e61c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e61e:	69bb      	ldr	r3, [r7, #24]
 800e620:	2b0f      	cmp	r3, #15
 800e622:	d916      	bls.n	800e652 <UART_SetConfig+0x392>
 800e624:	69bb      	ldr	r3, [r7, #24]
 800e626:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e62a:	d212      	bcs.n	800e652 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e62c:	69bb      	ldr	r3, [r7, #24]
 800e62e:	b29b      	uxth	r3, r3
 800e630:	f023 030f 	bic.w	r3, r3, #15
 800e634:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e636:	69bb      	ldr	r3, [r7, #24]
 800e638:	085b      	lsrs	r3, r3, #1
 800e63a:	b29b      	uxth	r3, r3
 800e63c:	f003 0307 	and.w	r3, r3, #7
 800e640:	b29a      	uxth	r2, r3
 800e642:	8afb      	ldrh	r3, [r7, #22]
 800e644:	4313      	orrs	r3, r2
 800e646:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	8afa      	ldrh	r2, [r7, #22]
 800e64e:	60da      	str	r2, [r3, #12]
 800e650:	e052      	b.n	800e6f8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800e652:	2301      	movs	r3, #1
 800e654:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800e658:	e04e      	b.n	800e6f8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e65a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e65e:	2b08      	cmp	r3, #8
 800e660:	d827      	bhi.n	800e6b2 <UART_SetConfig+0x3f2>
 800e662:	a201      	add	r2, pc, #4	@ (adr r2, 800e668 <UART_SetConfig+0x3a8>)
 800e664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e668:	0800e68d 	.word	0x0800e68d
 800e66c:	0800e695 	.word	0x0800e695
 800e670:	0800e69d 	.word	0x0800e69d
 800e674:	0800e6b3 	.word	0x0800e6b3
 800e678:	0800e6a3 	.word	0x0800e6a3
 800e67c:	0800e6b3 	.word	0x0800e6b3
 800e680:	0800e6b3 	.word	0x0800e6b3
 800e684:	0800e6b3 	.word	0x0800e6b3
 800e688:	0800e6ab 	.word	0x0800e6ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e68c:	f7fe fad6 	bl	800cc3c <HAL_RCC_GetPCLK1Freq>
 800e690:	61f8      	str	r0, [r7, #28]
        break;
 800e692:	e014      	b.n	800e6be <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e694:	f7fe fae8 	bl	800cc68 <HAL_RCC_GetPCLK2Freq>
 800e698:	61f8      	str	r0, [r7, #28]
        break;
 800e69a:	e010      	b.n	800e6be <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e69c:	4b1d      	ldr	r3, [pc, #116]	@ (800e714 <UART_SetConfig+0x454>)
 800e69e:	61fb      	str	r3, [r7, #28]
        break;
 800e6a0:	e00d      	b.n	800e6be <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e6a2:	f7fe fa33 	bl	800cb0c <HAL_RCC_GetSysClockFreq>
 800e6a6:	61f8      	str	r0, [r7, #28]
        break;
 800e6a8:	e009      	b.n	800e6be <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e6aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e6ae:	61fb      	str	r3, [r7, #28]
        break;
 800e6b0:	e005      	b.n	800e6be <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800e6bc:	bf00      	nop
    }

    if (pclk != 0U)
 800e6be:	69fb      	ldr	r3, [r7, #28]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d019      	beq.n	800e6f8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	685b      	ldr	r3, [r3, #4]
 800e6c8:	085a      	lsrs	r2, r3, #1
 800e6ca:	69fb      	ldr	r3, [r7, #28]
 800e6cc:	441a      	add	r2, r3
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	685b      	ldr	r3, [r3, #4]
 800e6d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6d6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e6d8:	69bb      	ldr	r3, [r7, #24]
 800e6da:	2b0f      	cmp	r3, #15
 800e6dc:	d909      	bls.n	800e6f2 <UART_SetConfig+0x432>
 800e6de:	69bb      	ldr	r3, [r7, #24]
 800e6e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e6e4:	d205      	bcs.n	800e6f2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e6e6:	69bb      	ldr	r3, [r7, #24]
 800e6e8:	b29a      	uxth	r2, r3
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	60da      	str	r2, [r3, #12]
 800e6f0:	e002      	b.n	800e6f8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800e6f2:	2301      	movs	r3, #1
 800e6f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	2200      	movs	r2, #0
 800e702:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800e704:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800e708:	4618      	mov	r0, r3
 800e70a:	3728      	adds	r7, #40	@ 0x28
 800e70c:	46bd      	mov	sp, r7
 800e70e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e712:	bf00      	nop
 800e714:	00f42400 	.word	0x00f42400

0800e718 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e718:	b480      	push	{r7}
 800e71a:	b083      	sub	sp, #12
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e724:	f003 0308 	and.w	r3, r3, #8
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d00a      	beq.n	800e742 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	685b      	ldr	r3, [r3, #4]
 800e732:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	430a      	orrs	r2, r1
 800e740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e746:	f003 0301 	and.w	r3, r3, #1
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d00a      	beq.n	800e764 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	685b      	ldr	r3, [r3, #4]
 800e754:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	430a      	orrs	r2, r1
 800e762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e768:	f003 0302 	and.w	r3, r3, #2
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d00a      	beq.n	800e786 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	685b      	ldr	r3, [r3, #4]
 800e776:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	430a      	orrs	r2, r1
 800e784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e78a:	f003 0304 	and.w	r3, r3, #4
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d00a      	beq.n	800e7a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	685b      	ldr	r3, [r3, #4]
 800e798:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	430a      	orrs	r2, r1
 800e7a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7ac:	f003 0310 	and.w	r3, r3, #16
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d00a      	beq.n	800e7ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	689b      	ldr	r3, [r3, #8]
 800e7ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	430a      	orrs	r2, r1
 800e7c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7ce:	f003 0320 	and.w	r3, r3, #32
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d00a      	beq.n	800e7ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	689b      	ldr	r3, [r3, #8]
 800e7dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	430a      	orrs	r2, r1
 800e7ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d01a      	beq.n	800e82e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	685b      	ldr	r3, [r3, #4]
 800e7fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	430a      	orrs	r2, r1
 800e80c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e812:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e816:	d10a      	bne.n	800e82e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	685b      	ldr	r3, [r3, #4]
 800e81e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	430a      	orrs	r2, r1
 800e82c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e836:	2b00      	cmp	r3, #0
 800e838:	d00a      	beq.n	800e850 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	685b      	ldr	r3, [r3, #4]
 800e840:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	430a      	orrs	r2, r1
 800e84e:	605a      	str	r2, [r3, #4]
  }
}
 800e850:	bf00      	nop
 800e852:	370c      	adds	r7, #12
 800e854:	46bd      	mov	sp, r7
 800e856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85a:	4770      	bx	lr

0800e85c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b098      	sub	sp, #96	@ 0x60
 800e860:	af02      	add	r7, sp, #8
 800e862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2200      	movs	r2, #0
 800e868:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e86c:	f7fa fe98 	bl	80095a0 <HAL_GetTick>
 800e870:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	f003 0308 	and.w	r3, r3, #8
 800e87c:	2b08      	cmp	r3, #8
 800e87e:	d12e      	bne.n	800e8de <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e880:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e884:	9300      	str	r3, [sp, #0]
 800e886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e888:	2200      	movs	r2, #0
 800e88a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f000 f88c 	bl	800e9ac <UART_WaitOnFlagUntilTimeout>
 800e894:	4603      	mov	r3, r0
 800e896:	2b00      	cmp	r3, #0
 800e898:	d021      	beq.n	800e8de <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8a2:	e853 3f00 	ldrex	r3, [r3]
 800e8a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e8a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e8ae:	653b      	str	r3, [r7, #80]	@ 0x50
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	461a      	mov	r2, r3
 800e8b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e8b8:	647b      	str	r3, [r7, #68]	@ 0x44
 800e8ba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e8be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e8c0:	e841 2300 	strex	r3, r2, [r1]
 800e8c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e8c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d1e6      	bne.n	800e89a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2220      	movs	r2, #32
 800e8d0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e8da:	2303      	movs	r3, #3
 800e8dc:	e062      	b.n	800e9a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	f003 0304 	and.w	r3, r3, #4
 800e8e8:	2b04      	cmp	r3, #4
 800e8ea:	d149      	bne.n	800e980 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e8ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e8f0:	9300      	str	r3, [sp, #0]
 800e8f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e8fa:	6878      	ldr	r0, [r7, #4]
 800e8fc:	f000 f856 	bl	800e9ac <UART_WaitOnFlagUntilTimeout>
 800e900:	4603      	mov	r3, r0
 800e902:	2b00      	cmp	r3, #0
 800e904:	d03c      	beq.n	800e980 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e90c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e90e:	e853 3f00 	ldrex	r3, [r3]
 800e912:	623b      	str	r3, [r7, #32]
   return(result);
 800e914:	6a3b      	ldr	r3, [r7, #32]
 800e916:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e91a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	461a      	mov	r2, r3
 800e922:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e924:	633b      	str	r3, [r7, #48]	@ 0x30
 800e926:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e928:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e92a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e92c:	e841 2300 	strex	r3, r2, [r1]
 800e930:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e934:	2b00      	cmp	r3, #0
 800e936:	d1e6      	bne.n	800e906 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	3308      	adds	r3, #8
 800e93e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e940:	693b      	ldr	r3, [r7, #16]
 800e942:	e853 3f00 	ldrex	r3, [r3]
 800e946:	60fb      	str	r3, [r7, #12]
   return(result);
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	f023 0301 	bic.w	r3, r3, #1
 800e94e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	3308      	adds	r3, #8
 800e956:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e958:	61fa      	str	r2, [r7, #28]
 800e95a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e95c:	69b9      	ldr	r1, [r7, #24]
 800e95e:	69fa      	ldr	r2, [r7, #28]
 800e960:	e841 2300 	strex	r3, r2, [r1]
 800e964:	617b      	str	r3, [r7, #20]
   return(result);
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d1e5      	bne.n	800e938 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2220      	movs	r2, #32
 800e970:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2200      	movs	r2, #0
 800e978:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e97c:	2303      	movs	r3, #3
 800e97e:	e011      	b.n	800e9a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	2220      	movs	r2, #32
 800e984:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2220      	movs	r2, #32
 800e98a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	2200      	movs	r2, #0
 800e992:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	2200      	movs	r2, #0
 800e998:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	2200      	movs	r2, #0
 800e99e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800e9a2:	2300      	movs	r3, #0
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	3758      	adds	r7, #88	@ 0x58
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}

0800e9ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b084      	sub	sp, #16
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	60f8      	str	r0, [r7, #12]
 800e9b4:	60b9      	str	r1, [r7, #8]
 800e9b6:	603b      	str	r3, [r7, #0]
 800e9b8:	4613      	mov	r3, r2
 800e9ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e9bc:	e04f      	b.n	800ea5e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e9be:	69bb      	ldr	r3, [r7, #24]
 800e9c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e9c4:	d04b      	beq.n	800ea5e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e9c6:	f7fa fdeb 	bl	80095a0 <HAL_GetTick>
 800e9ca:	4602      	mov	r2, r0
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	1ad3      	subs	r3, r2, r3
 800e9d0:	69ba      	ldr	r2, [r7, #24]
 800e9d2:	429a      	cmp	r2, r3
 800e9d4:	d302      	bcc.n	800e9dc <UART_WaitOnFlagUntilTimeout+0x30>
 800e9d6:	69bb      	ldr	r3, [r7, #24]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d101      	bne.n	800e9e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e9dc:	2303      	movs	r3, #3
 800e9de:	e04e      	b.n	800ea7e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	f003 0304 	and.w	r3, r3, #4
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d037      	beq.n	800ea5e <UART_WaitOnFlagUntilTimeout+0xb2>
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	2b80      	cmp	r3, #128	@ 0x80
 800e9f2:	d034      	beq.n	800ea5e <UART_WaitOnFlagUntilTimeout+0xb2>
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	2b40      	cmp	r3, #64	@ 0x40
 800e9f8:	d031      	beq.n	800ea5e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	69db      	ldr	r3, [r3, #28]
 800ea00:	f003 0308 	and.w	r3, r3, #8
 800ea04:	2b08      	cmp	r3, #8
 800ea06:	d110      	bne.n	800ea2a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	2208      	movs	r2, #8
 800ea0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ea10:	68f8      	ldr	r0, [r7, #12]
 800ea12:	f000 f838 	bl	800ea86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	2208      	movs	r2, #8
 800ea1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	2200      	movs	r2, #0
 800ea22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800ea26:	2301      	movs	r3, #1
 800ea28:	e029      	b.n	800ea7e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	69db      	ldr	r3, [r3, #28]
 800ea30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ea34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ea38:	d111      	bne.n	800ea5e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ea42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ea44:	68f8      	ldr	r0, [r7, #12]
 800ea46:	f000 f81e 	bl	800ea86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	2220      	movs	r2, #32
 800ea4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	2200      	movs	r2, #0
 800ea56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800ea5a:	2303      	movs	r3, #3
 800ea5c:	e00f      	b.n	800ea7e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	69da      	ldr	r2, [r3, #28]
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	4013      	ands	r3, r2
 800ea68:	68ba      	ldr	r2, [r7, #8]
 800ea6a:	429a      	cmp	r2, r3
 800ea6c:	bf0c      	ite	eq
 800ea6e:	2301      	moveq	r3, #1
 800ea70:	2300      	movne	r3, #0
 800ea72:	b2db      	uxtb	r3, r3
 800ea74:	461a      	mov	r2, r3
 800ea76:	79fb      	ldrb	r3, [r7, #7]
 800ea78:	429a      	cmp	r2, r3
 800ea7a:	d0a0      	beq.n	800e9be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ea7c:	2300      	movs	r3, #0
}
 800ea7e:	4618      	mov	r0, r3
 800ea80:	3710      	adds	r7, #16
 800ea82:	46bd      	mov	sp, r7
 800ea84:	bd80      	pop	{r7, pc}

0800ea86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ea86:	b480      	push	{r7}
 800ea88:	b095      	sub	sp, #84	@ 0x54
 800ea8a:	af00      	add	r7, sp, #0
 800ea8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea96:	e853 3f00 	ldrex	r3, [r3]
 800ea9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ea9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800eaa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	461a      	mov	r2, r3
 800eaaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eaac:	643b      	str	r3, [r7, #64]	@ 0x40
 800eaae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eab0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800eab2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800eab4:	e841 2300 	strex	r3, r2, [r1]
 800eab8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800eaba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d1e6      	bne.n	800ea8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	3308      	adds	r3, #8
 800eac6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eac8:	6a3b      	ldr	r3, [r7, #32]
 800eaca:	e853 3f00 	ldrex	r3, [r3]
 800eace:	61fb      	str	r3, [r7, #28]
   return(result);
 800ead0:	69fb      	ldr	r3, [r7, #28]
 800ead2:	f023 0301 	bic.w	r3, r3, #1
 800ead6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	3308      	adds	r3, #8
 800eade:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800eae0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800eae2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eae4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eae6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eae8:	e841 2300 	strex	r3, r2, [r1]
 800eaec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800eaee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d1e5      	bne.n	800eac0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eaf8:	2b01      	cmp	r3, #1
 800eafa:	d118      	bne.n	800eb2e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	e853 3f00 	ldrex	r3, [r3]
 800eb08:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb0a:	68bb      	ldr	r3, [r7, #8]
 800eb0c:	f023 0310 	bic.w	r3, r3, #16
 800eb10:	647b      	str	r3, [r7, #68]	@ 0x44
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	461a      	mov	r2, r3
 800eb18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb1a:	61bb      	str	r3, [r7, #24]
 800eb1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb1e:	6979      	ldr	r1, [r7, #20]
 800eb20:	69ba      	ldr	r2, [r7, #24]
 800eb22:	e841 2300 	strex	r3, r2, [r1]
 800eb26:	613b      	str	r3, [r7, #16]
   return(result);
 800eb28:	693b      	ldr	r3, [r7, #16]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d1e6      	bne.n	800eafc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	2220      	movs	r2, #32
 800eb32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2200      	movs	r2, #0
 800eb3a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2200      	movs	r2, #0
 800eb40:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800eb42:	bf00      	nop
 800eb44:	3754      	adds	r7, #84	@ 0x54
 800eb46:	46bd      	mov	sp, r7
 800eb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4c:	4770      	bx	lr
	...

0800eb50 <__assert_func>:
 800eb50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eb52:	4614      	mov	r4, r2
 800eb54:	461a      	mov	r2, r3
 800eb56:	4b09      	ldr	r3, [pc, #36]	@ (800eb7c <__assert_func+0x2c>)
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	4605      	mov	r5, r0
 800eb5c:	68d8      	ldr	r0, [r3, #12]
 800eb5e:	b954      	cbnz	r4, 800eb76 <__assert_func+0x26>
 800eb60:	4b07      	ldr	r3, [pc, #28]	@ (800eb80 <__assert_func+0x30>)
 800eb62:	461c      	mov	r4, r3
 800eb64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eb68:	9100      	str	r1, [sp, #0]
 800eb6a:	462b      	mov	r3, r5
 800eb6c:	4905      	ldr	r1, [pc, #20]	@ (800eb84 <__assert_func+0x34>)
 800eb6e:	f000 f8b1 	bl	800ecd4 <fiprintf>
 800eb72:	f000 f922 	bl	800edba <abort>
 800eb76:	4b04      	ldr	r3, [pc, #16]	@ (800eb88 <__assert_func+0x38>)
 800eb78:	e7f4      	b.n	800eb64 <__assert_func+0x14>
 800eb7a:	bf00      	nop
 800eb7c:	20000074 	.word	0x20000074
 800eb80:	08011457 	.word	0x08011457
 800eb84:	08011429 	.word	0x08011429
 800eb88:	0801141c 	.word	0x0801141c

0800eb8c <std>:
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	b510      	push	{r4, lr}
 800eb90:	4604      	mov	r4, r0
 800eb92:	e9c0 3300 	strd	r3, r3, [r0]
 800eb96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eb9a:	6083      	str	r3, [r0, #8]
 800eb9c:	8181      	strh	r1, [r0, #12]
 800eb9e:	6643      	str	r3, [r0, #100]	@ 0x64
 800eba0:	81c2      	strh	r2, [r0, #14]
 800eba2:	6183      	str	r3, [r0, #24]
 800eba4:	4619      	mov	r1, r3
 800eba6:	2208      	movs	r2, #8
 800eba8:	305c      	adds	r0, #92	@ 0x5c
 800ebaa:	f000 f8c3 	bl	800ed34 <memset>
 800ebae:	4b0d      	ldr	r3, [pc, #52]	@ (800ebe4 <std+0x58>)
 800ebb0:	6263      	str	r3, [r4, #36]	@ 0x24
 800ebb2:	4b0d      	ldr	r3, [pc, #52]	@ (800ebe8 <std+0x5c>)
 800ebb4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ebb6:	4b0d      	ldr	r3, [pc, #52]	@ (800ebec <std+0x60>)
 800ebb8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ebba:	4b0d      	ldr	r3, [pc, #52]	@ (800ebf0 <std+0x64>)
 800ebbc:	6323      	str	r3, [r4, #48]	@ 0x30
 800ebbe:	4b0d      	ldr	r3, [pc, #52]	@ (800ebf4 <std+0x68>)
 800ebc0:	6224      	str	r4, [r4, #32]
 800ebc2:	429c      	cmp	r4, r3
 800ebc4:	d006      	beq.n	800ebd4 <std+0x48>
 800ebc6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ebca:	4294      	cmp	r4, r2
 800ebcc:	d002      	beq.n	800ebd4 <std+0x48>
 800ebce:	33d0      	adds	r3, #208	@ 0xd0
 800ebd0:	429c      	cmp	r4, r3
 800ebd2:	d105      	bne.n	800ebe0 <std+0x54>
 800ebd4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ebd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ebdc:	f000 b8dc 	b.w	800ed98 <__retarget_lock_init_recursive>
 800ebe0:	bd10      	pop	{r4, pc}
 800ebe2:	bf00      	nop
 800ebe4:	0800f61d 	.word	0x0800f61d
 800ebe8:	0800f63f 	.word	0x0800f63f
 800ebec:	0800f677 	.word	0x0800f677
 800ebf0:	0800f69b 	.word	0x0800f69b
 800ebf4:	200006f8 	.word	0x200006f8

0800ebf8 <stdio_exit_handler>:
 800ebf8:	4a02      	ldr	r2, [pc, #8]	@ (800ec04 <stdio_exit_handler+0xc>)
 800ebfa:	4903      	ldr	r1, [pc, #12]	@ (800ec08 <stdio_exit_handler+0x10>)
 800ebfc:	4803      	ldr	r0, [pc, #12]	@ (800ec0c <stdio_exit_handler+0x14>)
 800ebfe:	f000 b87b 	b.w	800ecf8 <_fwalk_sglue>
 800ec02:	bf00      	nop
 800ec04:	20000068 	.word	0x20000068
 800ec08:	0800f5b5 	.word	0x0800f5b5
 800ec0c:	20000078 	.word	0x20000078

0800ec10 <cleanup_stdio>:
 800ec10:	6841      	ldr	r1, [r0, #4]
 800ec12:	4b0c      	ldr	r3, [pc, #48]	@ (800ec44 <cleanup_stdio+0x34>)
 800ec14:	4299      	cmp	r1, r3
 800ec16:	b510      	push	{r4, lr}
 800ec18:	4604      	mov	r4, r0
 800ec1a:	d001      	beq.n	800ec20 <cleanup_stdio+0x10>
 800ec1c:	f000 fcca 	bl	800f5b4 <_fflush_r>
 800ec20:	68a1      	ldr	r1, [r4, #8]
 800ec22:	4b09      	ldr	r3, [pc, #36]	@ (800ec48 <cleanup_stdio+0x38>)
 800ec24:	4299      	cmp	r1, r3
 800ec26:	d002      	beq.n	800ec2e <cleanup_stdio+0x1e>
 800ec28:	4620      	mov	r0, r4
 800ec2a:	f000 fcc3 	bl	800f5b4 <_fflush_r>
 800ec2e:	68e1      	ldr	r1, [r4, #12]
 800ec30:	4b06      	ldr	r3, [pc, #24]	@ (800ec4c <cleanup_stdio+0x3c>)
 800ec32:	4299      	cmp	r1, r3
 800ec34:	d004      	beq.n	800ec40 <cleanup_stdio+0x30>
 800ec36:	4620      	mov	r0, r4
 800ec38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec3c:	f000 bcba 	b.w	800f5b4 <_fflush_r>
 800ec40:	bd10      	pop	{r4, pc}
 800ec42:	bf00      	nop
 800ec44:	200006f8 	.word	0x200006f8
 800ec48:	20000760 	.word	0x20000760
 800ec4c:	200007c8 	.word	0x200007c8

0800ec50 <global_stdio_init.part.0>:
 800ec50:	b510      	push	{r4, lr}
 800ec52:	4b0b      	ldr	r3, [pc, #44]	@ (800ec80 <global_stdio_init.part.0+0x30>)
 800ec54:	4c0b      	ldr	r4, [pc, #44]	@ (800ec84 <global_stdio_init.part.0+0x34>)
 800ec56:	4a0c      	ldr	r2, [pc, #48]	@ (800ec88 <global_stdio_init.part.0+0x38>)
 800ec58:	601a      	str	r2, [r3, #0]
 800ec5a:	4620      	mov	r0, r4
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	2104      	movs	r1, #4
 800ec60:	f7ff ff94 	bl	800eb8c <std>
 800ec64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ec68:	2201      	movs	r2, #1
 800ec6a:	2109      	movs	r1, #9
 800ec6c:	f7ff ff8e 	bl	800eb8c <std>
 800ec70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ec74:	2202      	movs	r2, #2
 800ec76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec7a:	2112      	movs	r1, #18
 800ec7c:	f7ff bf86 	b.w	800eb8c <std>
 800ec80:	20000830 	.word	0x20000830
 800ec84:	200006f8 	.word	0x200006f8
 800ec88:	0800ebf9 	.word	0x0800ebf9

0800ec8c <__sfp_lock_acquire>:
 800ec8c:	4801      	ldr	r0, [pc, #4]	@ (800ec94 <__sfp_lock_acquire+0x8>)
 800ec8e:	f000 b884 	b.w	800ed9a <__retarget_lock_acquire_recursive>
 800ec92:	bf00      	nop
 800ec94:	20000835 	.word	0x20000835

0800ec98 <__sfp_lock_release>:
 800ec98:	4801      	ldr	r0, [pc, #4]	@ (800eca0 <__sfp_lock_release+0x8>)
 800ec9a:	f000 b87f 	b.w	800ed9c <__retarget_lock_release_recursive>
 800ec9e:	bf00      	nop
 800eca0:	20000835 	.word	0x20000835

0800eca4 <__sinit>:
 800eca4:	b510      	push	{r4, lr}
 800eca6:	4604      	mov	r4, r0
 800eca8:	f7ff fff0 	bl	800ec8c <__sfp_lock_acquire>
 800ecac:	6a23      	ldr	r3, [r4, #32]
 800ecae:	b11b      	cbz	r3, 800ecb8 <__sinit+0x14>
 800ecb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecb4:	f7ff bff0 	b.w	800ec98 <__sfp_lock_release>
 800ecb8:	4b04      	ldr	r3, [pc, #16]	@ (800eccc <__sinit+0x28>)
 800ecba:	6223      	str	r3, [r4, #32]
 800ecbc:	4b04      	ldr	r3, [pc, #16]	@ (800ecd0 <__sinit+0x2c>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d1f5      	bne.n	800ecb0 <__sinit+0xc>
 800ecc4:	f7ff ffc4 	bl	800ec50 <global_stdio_init.part.0>
 800ecc8:	e7f2      	b.n	800ecb0 <__sinit+0xc>
 800ecca:	bf00      	nop
 800eccc:	0800ec11 	.word	0x0800ec11
 800ecd0:	20000830 	.word	0x20000830

0800ecd4 <fiprintf>:
 800ecd4:	b40e      	push	{r1, r2, r3}
 800ecd6:	b503      	push	{r0, r1, lr}
 800ecd8:	4601      	mov	r1, r0
 800ecda:	ab03      	add	r3, sp, #12
 800ecdc:	4805      	ldr	r0, [pc, #20]	@ (800ecf4 <fiprintf+0x20>)
 800ecde:	f853 2b04 	ldr.w	r2, [r3], #4
 800ece2:	6800      	ldr	r0, [r0, #0]
 800ece4:	9301      	str	r3, [sp, #4]
 800ece6:	f000 f899 	bl	800ee1c <_vfiprintf_r>
 800ecea:	b002      	add	sp, #8
 800ecec:	f85d eb04 	ldr.w	lr, [sp], #4
 800ecf0:	b003      	add	sp, #12
 800ecf2:	4770      	bx	lr
 800ecf4:	20000074 	.word	0x20000074

0800ecf8 <_fwalk_sglue>:
 800ecf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecfc:	4607      	mov	r7, r0
 800ecfe:	4688      	mov	r8, r1
 800ed00:	4614      	mov	r4, r2
 800ed02:	2600      	movs	r6, #0
 800ed04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ed08:	f1b9 0901 	subs.w	r9, r9, #1
 800ed0c:	d505      	bpl.n	800ed1a <_fwalk_sglue+0x22>
 800ed0e:	6824      	ldr	r4, [r4, #0]
 800ed10:	2c00      	cmp	r4, #0
 800ed12:	d1f7      	bne.n	800ed04 <_fwalk_sglue+0xc>
 800ed14:	4630      	mov	r0, r6
 800ed16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed1a:	89ab      	ldrh	r3, [r5, #12]
 800ed1c:	2b01      	cmp	r3, #1
 800ed1e:	d907      	bls.n	800ed30 <_fwalk_sglue+0x38>
 800ed20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ed24:	3301      	adds	r3, #1
 800ed26:	d003      	beq.n	800ed30 <_fwalk_sglue+0x38>
 800ed28:	4629      	mov	r1, r5
 800ed2a:	4638      	mov	r0, r7
 800ed2c:	47c0      	blx	r8
 800ed2e:	4306      	orrs	r6, r0
 800ed30:	3568      	adds	r5, #104	@ 0x68
 800ed32:	e7e9      	b.n	800ed08 <_fwalk_sglue+0x10>

0800ed34 <memset>:
 800ed34:	4402      	add	r2, r0
 800ed36:	4603      	mov	r3, r0
 800ed38:	4293      	cmp	r3, r2
 800ed3a:	d100      	bne.n	800ed3e <memset+0xa>
 800ed3c:	4770      	bx	lr
 800ed3e:	f803 1b01 	strb.w	r1, [r3], #1
 800ed42:	e7f9      	b.n	800ed38 <memset+0x4>

0800ed44 <__errno>:
 800ed44:	4b01      	ldr	r3, [pc, #4]	@ (800ed4c <__errno+0x8>)
 800ed46:	6818      	ldr	r0, [r3, #0]
 800ed48:	4770      	bx	lr
 800ed4a:	bf00      	nop
 800ed4c:	20000074 	.word	0x20000074

0800ed50 <__libc_init_array>:
 800ed50:	b570      	push	{r4, r5, r6, lr}
 800ed52:	4d0d      	ldr	r5, [pc, #52]	@ (800ed88 <__libc_init_array+0x38>)
 800ed54:	4c0d      	ldr	r4, [pc, #52]	@ (800ed8c <__libc_init_array+0x3c>)
 800ed56:	1b64      	subs	r4, r4, r5
 800ed58:	10a4      	asrs	r4, r4, #2
 800ed5a:	2600      	movs	r6, #0
 800ed5c:	42a6      	cmp	r6, r4
 800ed5e:	d109      	bne.n	800ed74 <__libc_init_array+0x24>
 800ed60:	4d0b      	ldr	r5, [pc, #44]	@ (800ed90 <__libc_init_array+0x40>)
 800ed62:	4c0c      	ldr	r4, [pc, #48]	@ (800ed94 <__libc_init_array+0x44>)
 800ed64:	f000 fe9a 	bl	800fa9c <_init>
 800ed68:	1b64      	subs	r4, r4, r5
 800ed6a:	10a4      	asrs	r4, r4, #2
 800ed6c:	2600      	movs	r6, #0
 800ed6e:	42a6      	cmp	r6, r4
 800ed70:	d105      	bne.n	800ed7e <__libc_init_array+0x2e>
 800ed72:	bd70      	pop	{r4, r5, r6, pc}
 800ed74:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed78:	4798      	blx	r3
 800ed7a:	3601      	adds	r6, #1
 800ed7c:	e7ee      	b.n	800ed5c <__libc_init_array+0xc>
 800ed7e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed82:	4798      	blx	r3
 800ed84:	3601      	adds	r6, #1
 800ed86:	e7f2      	b.n	800ed6e <__libc_init_array+0x1e>
 800ed88:	08011494 	.word	0x08011494
 800ed8c:	08011494 	.word	0x08011494
 800ed90:	08011494 	.word	0x08011494
 800ed94:	08011498 	.word	0x08011498

0800ed98 <__retarget_lock_init_recursive>:
 800ed98:	4770      	bx	lr

0800ed9a <__retarget_lock_acquire_recursive>:
 800ed9a:	4770      	bx	lr

0800ed9c <__retarget_lock_release_recursive>:
 800ed9c:	4770      	bx	lr

0800ed9e <memcpy>:
 800ed9e:	440a      	add	r2, r1
 800eda0:	4291      	cmp	r1, r2
 800eda2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800eda6:	d100      	bne.n	800edaa <memcpy+0xc>
 800eda8:	4770      	bx	lr
 800edaa:	b510      	push	{r4, lr}
 800edac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800edb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800edb4:	4291      	cmp	r1, r2
 800edb6:	d1f9      	bne.n	800edac <memcpy+0xe>
 800edb8:	bd10      	pop	{r4, pc}

0800edba <abort>:
 800edba:	b508      	push	{r3, lr}
 800edbc:	2006      	movs	r0, #6
 800edbe:	f000 fdd3 	bl	800f968 <raise>
 800edc2:	2001      	movs	r0, #1
 800edc4:	f7fa f960 	bl	8009088 <_exit>

0800edc8 <__sfputc_r>:
 800edc8:	6893      	ldr	r3, [r2, #8]
 800edca:	3b01      	subs	r3, #1
 800edcc:	2b00      	cmp	r3, #0
 800edce:	b410      	push	{r4}
 800edd0:	6093      	str	r3, [r2, #8]
 800edd2:	da08      	bge.n	800ede6 <__sfputc_r+0x1e>
 800edd4:	6994      	ldr	r4, [r2, #24]
 800edd6:	42a3      	cmp	r3, r4
 800edd8:	db01      	blt.n	800edde <__sfputc_r+0x16>
 800edda:	290a      	cmp	r1, #10
 800eddc:	d103      	bne.n	800ede6 <__sfputc_r+0x1e>
 800edde:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ede2:	f000 bc5e 	b.w	800f6a2 <__swbuf_r>
 800ede6:	6813      	ldr	r3, [r2, #0]
 800ede8:	1c58      	adds	r0, r3, #1
 800edea:	6010      	str	r0, [r2, #0]
 800edec:	7019      	strb	r1, [r3, #0]
 800edee:	4608      	mov	r0, r1
 800edf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edf4:	4770      	bx	lr

0800edf6 <__sfputs_r>:
 800edf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edf8:	4606      	mov	r6, r0
 800edfa:	460f      	mov	r7, r1
 800edfc:	4614      	mov	r4, r2
 800edfe:	18d5      	adds	r5, r2, r3
 800ee00:	42ac      	cmp	r4, r5
 800ee02:	d101      	bne.n	800ee08 <__sfputs_r+0x12>
 800ee04:	2000      	movs	r0, #0
 800ee06:	e007      	b.n	800ee18 <__sfputs_r+0x22>
 800ee08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee0c:	463a      	mov	r2, r7
 800ee0e:	4630      	mov	r0, r6
 800ee10:	f7ff ffda 	bl	800edc8 <__sfputc_r>
 800ee14:	1c43      	adds	r3, r0, #1
 800ee16:	d1f3      	bne.n	800ee00 <__sfputs_r+0xa>
 800ee18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ee1c <_vfiprintf_r>:
 800ee1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee20:	460d      	mov	r5, r1
 800ee22:	b09d      	sub	sp, #116	@ 0x74
 800ee24:	4614      	mov	r4, r2
 800ee26:	4698      	mov	r8, r3
 800ee28:	4606      	mov	r6, r0
 800ee2a:	b118      	cbz	r0, 800ee34 <_vfiprintf_r+0x18>
 800ee2c:	6a03      	ldr	r3, [r0, #32]
 800ee2e:	b90b      	cbnz	r3, 800ee34 <_vfiprintf_r+0x18>
 800ee30:	f7ff ff38 	bl	800eca4 <__sinit>
 800ee34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee36:	07d9      	lsls	r1, r3, #31
 800ee38:	d405      	bmi.n	800ee46 <_vfiprintf_r+0x2a>
 800ee3a:	89ab      	ldrh	r3, [r5, #12]
 800ee3c:	059a      	lsls	r2, r3, #22
 800ee3e:	d402      	bmi.n	800ee46 <_vfiprintf_r+0x2a>
 800ee40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee42:	f7ff ffaa 	bl	800ed9a <__retarget_lock_acquire_recursive>
 800ee46:	89ab      	ldrh	r3, [r5, #12]
 800ee48:	071b      	lsls	r3, r3, #28
 800ee4a:	d501      	bpl.n	800ee50 <_vfiprintf_r+0x34>
 800ee4c:	692b      	ldr	r3, [r5, #16]
 800ee4e:	b99b      	cbnz	r3, 800ee78 <_vfiprintf_r+0x5c>
 800ee50:	4629      	mov	r1, r5
 800ee52:	4630      	mov	r0, r6
 800ee54:	f000 fc64 	bl	800f720 <__swsetup_r>
 800ee58:	b170      	cbz	r0, 800ee78 <_vfiprintf_r+0x5c>
 800ee5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee5c:	07dc      	lsls	r4, r3, #31
 800ee5e:	d504      	bpl.n	800ee6a <_vfiprintf_r+0x4e>
 800ee60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ee64:	b01d      	add	sp, #116	@ 0x74
 800ee66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee6a:	89ab      	ldrh	r3, [r5, #12]
 800ee6c:	0598      	lsls	r0, r3, #22
 800ee6e:	d4f7      	bmi.n	800ee60 <_vfiprintf_r+0x44>
 800ee70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee72:	f7ff ff93 	bl	800ed9c <__retarget_lock_release_recursive>
 800ee76:	e7f3      	b.n	800ee60 <_vfiprintf_r+0x44>
 800ee78:	2300      	movs	r3, #0
 800ee7a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee7c:	2320      	movs	r3, #32
 800ee7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ee82:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee86:	2330      	movs	r3, #48	@ 0x30
 800ee88:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f038 <_vfiprintf_r+0x21c>
 800ee8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ee90:	f04f 0901 	mov.w	r9, #1
 800ee94:	4623      	mov	r3, r4
 800ee96:	469a      	mov	sl, r3
 800ee98:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee9c:	b10a      	cbz	r2, 800eea2 <_vfiprintf_r+0x86>
 800ee9e:	2a25      	cmp	r2, #37	@ 0x25
 800eea0:	d1f9      	bne.n	800ee96 <_vfiprintf_r+0x7a>
 800eea2:	ebba 0b04 	subs.w	fp, sl, r4
 800eea6:	d00b      	beq.n	800eec0 <_vfiprintf_r+0xa4>
 800eea8:	465b      	mov	r3, fp
 800eeaa:	4622      	mov	r2, r4
 800eeac:	4629      	mov	r1, r5
 800eeae:	4630      	mov	r0, r6
 800eeb0:	f7ff ffa1 	bl	800edf6 <__sfputs_r>
 800eeb4:	3001      	adds	r0, #1
 800eeb6:	f000 80a7 	beq.w	800f008 <_vfiprintf_r+0x1ec>
 800eeba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eebc:	445a      	add	r2, fp
 800eebe:	9209      	str	r2, [sp, #36]	@ 0x24
 800eec0:	f89a 3000 	ldrb.w	r3, [sl]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	f000 809f 	beq.w	800f008 <_vfiprintf_r+0x1ec>
 800eeca:	2300      	movs	r3, #0
 800eecc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800eed0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eed4:	f10a 0a01 	add.w	sl, sl, #1
 800eed8:	9304      	str	r3, [sp, #16]
 800eeda:	9307      	str	r3, [sp, #28]
 800eedc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eee0:	931a      	str	r3, [sp, #104]	@ 0x68
 800eee2:	4654      	mov	r4, sl
 800eee4:	2205      	movs	r2, #5
 800eee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eeea:	4853      	ldr	r0, [pc, #332]	@ (800f038 <_vfiprintf_r+0x21c>)
 800eeec:	f7f1 f970 	bl	80001d0 <memchr>
 800eef0:	9a04      	ldr	r2, [sp, #16]
 800eef2:	b9d8      	cbnz	r0, 800ef2c <_vfiprintf_r+0x110>
 800eef4:	06d1      	lsls	r1, r2, #27
 800eef6:	bf44      	itt	mi
 800eef8:	2320      	movmi	r3, #32
 800eefa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eefe:	0713      	lsls	r3, r2, #28
 800ef00:	bf44      	itt	mi
 800ef02:	232b      	movmi	r3, #43	@ 0x2b
 800ef04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ef08:	f89a 3000 	ldrb.w	r3, [sl]
 800ef0c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef0e:	d015      	beq.n	800ef3c <_vfiprintf_r+0x120>
 800ef10:	9a07      	ldr	r2, [sp, #28]
 800ef12:	4654      	mov	r4, sl
 800ef14:	2000      	movs	r0, #0
 800ef16:	f04f 0c0a 	mov.w	ip, #10
 800ef1a:	4621      	mov	r1, r4
 800ef1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef20:	3b30      	subs	r3, #48	@ 0x30
 800ef22:	2b09      	cmp	r3, #9
 800ef24:	d94b      	bls.n	800efbe <_vfiprintf_r+0x1a2>
 800ef26:	b1b0      	cbz	r0, 800ef56 <_vfiprintf_r+0x13a>
 800ef28:	9207      	str	r2, [sp, #28]
 800ef2a:	e014      	b.n	800ef56 <_vfiprintf_r+0x13a>
 800ef2c:	eba0 0308 	sub.w	r3, r0, r8
 800ef30:	fa09 f303 	lsl.w	r3, r9, r3
 800ef34:	4313      	orrs	r3, r2
 800ef36:	9304      	str	r3, [sp, #16]
 800ef38:	46a2      	mov	sl, r4
 800ef3a:	e7d2      	b.n	800eee2 <_vfiprintf_r+0xc6>
 800ef3c:	9b03      	ldr	r3, [sp, #12]
 800ef3e:	1d19      	adds	r1, r3, #4
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	9103      	str	r1, [sp, #12]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	bfbb      	ittet	lt
 800ef48:	425b      	neglt	r3, r3
 800ef4a:	f042 0202 	orrlt.w	r2, r2, #2
 800ef4e:	9307      	strge	r3, [sp, #28]
 800ef50:	9307      	strlt	r3, [sp, #28]
 800ef52:	bfb8      	it	lt
 800ef54:	9204      	strlt	r2, [sp, #16]
 800ef56:	7823      	ldrb	r3, [r4, #0]
 800ef58:	2b2e      	cmp	r3, #46	@ 0x2e
 800ef5a:	d10a      	bne.n	800ef72 <_vfiprintf_r+0x156>
 800ef5c:	7863      	ldrb	r3, [r4, #1]
 800ef5e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef60:	d132      	bne.n	800efc8 <_vfiprintf_r+0x1ac>
 800ef62:	9b03      	ldr	r3, [sp, #12]
 800ef64:	1d1a      	adds	r2, r3, #4
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	9203      	str	r2, [sp, #12]
 800ef6a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ef6e:	3402      	adds	r4, #2
 800ef70:	9305      	str	r3, [sp, #20]
 800ef72:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f048 <_vfiprintf_r+0x22c>
 800ef76:	7821      	ldrb	r1, [r4, #0]
 800ef78:	2203      	movs	r2, #3
 800ef7a:	4650      	mov	r0, sl
 800ef7c:	f7f1 f928 	bl	80001d0 <memchr>
 800ef80:	b138      	cbz	r0, 800ef92 <_vfiprintf_r+0x176>
 800ef82:	9b04      	ldr	r3, [sp, #16]
 800ef84:	eba0 000a 	sub.w	r0, r0, sl
 800ef88:	2240      	movs	r2, #64	@ 0x40
 800ef8a:	4082      	lsls	r2, r0
 800ef8c:	4313      	orrs	r3, r2
 800ef8e:	3401      	adds	r4, #1
 800ef90:	9304      	str	r3, [sp, #16]
 800ef92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef96:	4829      	ldr	r0, [pc, #164]	@ (800f03c <_vfiprintf_r+0x220>)
 800ef98:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ef9c:	2206      	movs	r2, #6
 800ef9e:	f7f1 f917 	bl	80001d0 <memchr>
 800efa2:	2800      	cmp	r0, #0
 800efa4:	d03f      	beq.n	800f026 <_vfiprintf_r+0x20a>
 800efa6:	4b26      	ldr	r3, [pc, #152]	@ (800f040 <_vfiprintf_r+0x224>)
 800efa8:	bb1b      	cbnz	r3, 800eff2 <_vfiprintf_r+0x1d6>
 800efaa:	9b03      	ldr	r3, [sp, #12]
 800efac:	3307      	adds	r3, #7
 800efae:	f023 0307 	bic.w	r3, r3, #7
 800efb2:	3308      	adds	r3, #8
 800efb4:	9303      	str	r3, [sp, #12]
 800efb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efb8:	443b      	add	r3, r7
 800efba:	9309      	str	r3, [sp, #36]	@ 0x24
 800efbc:	e76a      	b.n	800ee94 <_vfiprintf_r+0x78>
 800efbe:	fb0c 3202 	mla	r2, ip, r2, r3
 800efc2:	460c      	mov	r4, r1
 800efc4:	2001      	movs	r0, #1
 800efc6:	e7a8      	b.n	800ef1a <_vfiprintf_r+0xfe>
 800efc8:	2300      	movs	r3, #0
 800efca:	3401      	adds	r4, #1
 800efcc:	9305      	str	r3, [sp, #20]
 800efce:	4619      	mov	r1, r3
 800efd0:	f04f 0c0a 	mov.w	ip, #10
 800efd4:	4620      	mov	r0, r4
 800efd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efda:	3a30      	subs	r2, #48	@ 0x30
 800efdc:	2a09      	cmp	r2, #9
 800efde:	d903      	bls.n	800efe8 <_vfiprintf_r+0x1cc>
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d0c6      	beq.n	800ef72 <_vfiprintf_r+0x156>
 800efe4:	9105      	str	r1, [sp, #20]
 800efe6:	e7c4      	b.n	800ef72 <_vfiprintf_r+0x156>
 800efe8:	fb0c 2101 	mla	r1, ip, r1, r2
 800efec:	4604      	mov	r4, r0
 800efee:	2301      	movs	r3, #1
 800eff0:	e7f0      	b.n	800efd4 <_vfiprintf_r+0x1b8>
 800eff2:	ab03      	add	r3, sp, #12
 800eff4:	9300      	str	r3, [sp, #0]
 800eff6:	462a      	mov	r2, r5
 800eff8:	4b12      	ldr	r3, [pc, #72]	@ (800f044 <_vfiprintf_r+0x228>)
 800effa:	a904      	add	r1, sp, #16
 800effc:	4630      	mov	r0, r6
 800effe:	f3af 8000 	nop.w
 800f002:	4607      	mov	r7, r0
 800f004:	1c78      	adds	r0, r7, #1
 800f006:	d1d6      	bne.n	800efb6 <_vfiprintf_r+0x19a>
 800f008:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f00a:	07d9      	lsls	r1, r3, #31
 800f00c:	d405      	bmi.n	800f01a <_vfiprintf_r+0x1fe>
 800f00e:	89ab      	ldrh	r3, [r5, #12]
 800f010:	059a      	lsls	r2, r3, #22
 800f012:	d402      	bmi.n	800f01a <_vfiprintf_r+0x1fe>
 800f014:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f016:	f7ff fec1 	bl	800ed9c <__retarget_lock_release_recursive>
 800f01a:	89ab      	ldrh	r3, [r5, #12]
 800f01c:	065b      	lsls	r3, r3, #25
 800f01e:	f53f af1f 	bmi.w	800ee60 <_vfiprintf_r+0x44>
 800f022:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f024:	e71e      	b.n	800ee64 <_vfiprintf_r+0x48>
 800f026:	ab03      	add	r3, sp, #12
 800f028:	9300      	str	r3, [sp, #0]
 800f02a:	462a      	mov	r2, r5
 800f02c:	4b05      	ldr	r3, [pc, #20]	@ (800f044 <_vfiprintf_r+0x228>)
 800f02e:	a904      	add	r1, sp, #16
 800f030:	4630      	mov	r0, r6
 800f032:	f000 f91b 	bl	800f26c <_printf_i>
 800f036:	e7e4      	b.n	800f002 <_vfiprintf_r+0x1e6>
 800f038:	08011458 	.word	0x08011458
 800f03c:	08011462 	.word	0x08011462
 800f040:	00000000 	.word	0x00000000
 800f044:	0800edf7 	.word	0x0800edf7
 800f048:	0801145e 	.word	0x0801145e

0800f04c <sbrk_aligned>:
 800f04c:	b570      	push	{r4, r5, r6, lr}
 800f04e:	4e0f      	ldr	r6, [pc, #60]	@ (800f08c <sbrk_aligned+0x40>)
 800f050:	460c      	mov	r4, r1
 800f052:	6831      	ldr	r1, [r6, #0]
 800f054:	4605      	mov	r5, r0
 800f056:	b911      	cbnz	r1, 800f05e <sbrk_aligned+0x12>
 800f058:	f000 fcb4 	bl	800f9c4 <_sbrk_r>
 800f05c:	6030      	str	r0, [r6, #0]
 800f05e:	4621      	mov	r1, r4
 800f060:	4628      	mov	r0, r5
 800f062:	f000 fcaf 	bl	800f9c4 <_sbrk_r>
 800f066:	1c43      	adds	r3, r0, #1
 800f068:	d103      	bne.n	800f072 <sbrk_aligned+0x26>
 800f06a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800f06e:	4620      	mov	r0, r4
 800f070:	bd70      	pop	{r4, r5, r6, pc}
 800f072:	1cc4      	adds	r4, r0, #3
 800f074:	f024 0403 	bic.w	r4, r4, #3
 800f078:	42a0      	cmp	r0, r4
 800f07a:	d0f8      	beq.n	800f06e <sbrk_aligned+0x22>
 800f07c:	1a21      	subs	r1, r4, r0
 800f07e:	4628      	mov	r0, r5
 800f080:	f000 fca0 	bl	800f9c4 <_sbrk_r>
 800f084:	3001      	adds	r0, #1
 800f086:	d1f2      	bne.n	800f06e <sbrk_aligned+0x22>
 800f088:	e7ef      	b.n	800f06a <sbrk_aligned+0x1e>
 800f08a:	bf00      	nop
 800f08c:	20000838 	.word	0x20000838

0800f090 <_malloc_r>:
 800f090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f094:	1ccd      	adds	r5, r1, #3
 800f096:	f025 0503 	bic.w	r5, r5, #3
 800f09a:	3508      	adds	r5, #8
 800f09c:	2d0c      	cmp	r5, #12
 800f09e:	bf38      	it	cc
 800f0a0:	250c      	movcc	r5, #12
 800f0a2:	2d00      	cmp	r5, #0
 800f0a4:	4606      	mov	r6, r0
 800f0a6:	db01      	blt.n	800f0ac <_malloc_r+0x1c>
 800f0a8:	42a9      	cmp	r1, r5
 800f0aa:	d904      	bls.n	800f0b6 <_malloc_r+0x26>
 800f0ac:	230c      	movs	r3, #12
 800f0ae:	6033      	str	r3, [r6, #0]
 800f0b0:	2000      	movs	r0, #0
 800f0b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f18c <_malloc_r+0xfc>
 800f0ba:	f000 faa3 	bl	800f604 <__malloc_lock>
 800f0be:	f8d8 3000 	ldr.w	r3, [r8]
 800f0c2:	461c      	mov	r4, r3
 800f0c4:	bb44      	cbnz	r4, 800f118 <_malloc_r+0x88>
 800f0c6:	4629      	mov	r1, r5
 800f0c8:	4630      	mov	r0, r6
 800f0ca:	f7ff ffbf 	bl	800f04c <sbrk_aligned>
 800f0ce:	1c43      	adds	r3, r0, #1
 800f0d0:	4604      	mov	r4, r0
 800f0d2:	d158      	bne.n	800f186 <_malloc_r+0xf6>
 800f0d4:	f8d8 4000 	ldr.w	r4, [r8]
 800f0d8:	4627      	mov	r7, r4
 800f0da:	2f00      	cmp	r7, #0
 800f0dc:	d143      	bne.n	800f166 <_malloc_r+0xd6>
 800f0de:	2c00      	cmp	r4, #0
 800f0e0:	d04b      	beq.n	800f17a <_malloc_r+0xea>
 800f0e2:	6823      	ldr	r3, [r4, #0]
 800f0e4:	4639      	mov	r1, r7
 800f0e6:	4630      	mov	r0, r6
 800f0e8:	eb04 0903 	add.w	r9, r4, r3
 800f0ec:	f000 fc6a 	bl	800f9c4 <_sbrk_r>
 800f0f0:	4581      	cmp	r9, r0
 800f0f2:	d142      	bne.n	800f17a <_malloc_r+0xea>
 800f0f4:	6821      	ldr	r1, [r4, #0]
 800f0f6:	1a6d      	subs	r5, r5, r1
 800f0f8:	4629      	mov	r1, r5
 800f0fa:	4630      	mov	r0, r6
 800f0fc:	f7ff ffa6 	bl	800f04c <sbrk_aligned>
 800f100:	3001      	adds	r0, #1
 800f102:	d03a      	beq.n	800f17a <_malloc_r+0xea>
 800f104:	6823      	ldr	r3, [r4, #0]
 800f106:	442b      	add	r3, r5
 800f108:	6023      	str	r3, [r4, #0]
 800f10a:	f8d8 3000 	ldr.w	r3, [r8]
 800f10e:	685a      	ldr	r2, [r3, #4]
 800f110:	bb62      	cbnz	r2, 800f16c <_malloc_r+0xdc>
 800f112:	f8c8 7000 	str.w	r7, [r8]
 800f116:	e00f      	b.n	800f138 <_malloc_r+0xa8>
 800f118:	6822      	ldr	r2, [r4, #0]
 800f11a:	1b52      	subs	r2, r2, r5
 800f11c:	d420      	bmi.n	800f160 <_malloc_r+0xd0>
 800f11e:	2a0b      	cmp	r2, #11
 800f120:	d917      	bls.n	800f152 <_malloc_r+0xc2>
 800f122:	1961      	adds	r1, r4, r5
 800f124:	42a3      	cmp	r3, r4
 800f126:	6025      	str	r5, [r4, #0]
 800f128:	bf18      	it	ne
 800f12a:	6059      	strne	r1, [r3, #4]
 800f12c:	6863      	ldr	r3, [r4, #4]
 800f12e:	bf08      	it	eq
 800f130:	f8c8 1000 	streq.w	r1, [r8]
 800f134:	5162      	str	r2, [r4, r5]
 800f136:	604b      	str	r3, [r1, #4]
 800f138:	4630      	mov	r0, r6
 800f13a:	f000 fa69 	bl	800f610 <__malloc_unlock>
 800f13e:	f104 000b 	add.w	r0, r4, #11
 800f142:	1d23      	adds	r3, r4, #4
 800f144:	f020 0007 	bic.w	r0, r0, #7
 800f148:	1ac2      	subs	r2, r0, r3
 800f14a:	bf1c      	itt	ne
 800f14c:	1a1b      	subne	r3, r3, r0
 800f14e:	50a3      	strne	r3, [r4, r2]
 800f150:	e7af      	b.n	800f0b2 <_malloc_r+0x22>
 800f152:	6862      	ldr	r2, [r4, #4]
 800f154:	42a3      	cmp	r3, r4
 800f156:	bf0c      	ite	eq
 800f158:	f8c8 2000 	streq.w	r2, [r8]
 800f15c:	605a      	strne	r2, [r3, #4]
 800f15e:	e7eb      	b.n	800f138 <_malloc_r+0xa8>
 800f160:	4623      	mov	r3, r4
 800f162:	6864      	ldr	r4, [r4, #4]
 800f164:	e7ae      	b.n	800f0c4 <_malloc_r+0x34>
 800f166:	463c      	mov	r4, r7
 800f168:	687f      	ldr	r7, [r7, #4]
 800f16a:	e7b6      	b.n	800f0da <_malloc_r+0x4a>
 800f16c:	461a      	mov	r2, r3
 800f16e:	685b      	ldr	r3, [r3, #4]
 800f170:	42a3      	cmp	r3, r4
 800f172:	d1fb      	bne.n	800f16c <_malloc_r+0xdc>
 800f174:	2300      	movs	r3, #0
 800f176:	6053      	str	r3, [r2, #4]
 800f178:	e7de      	b.n	800f138 <_malloc_r+0xa8>
 800f17a:	230c      	movs	r3, #12
 800f17c:	6033      	str	r3, [r6, #0]
 800f17e:	4630      	mov	r0, r6
 800f180:	f000 fa46 	bl	800f610 <__malloc_unlock>
 800f184:	e794      	b.n	800f0b0 <_malloc_r+0x20>
 800f186:	6005      	str	r5, [r0, #0]
 800f188:	e7d6      	b.n	800f138 <_malloc_r+0xa8>
 800f18a:	bf00      	nop
 800f18c:	2000083c 	.word	0x2000083c

0800f190 <_printf_common>:
 800f190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f194:	4616      	mov	r6, r2
 800f196:	4698      	mov	r8, r3
 800f198:	688a      	ldr	r2, [r1, #8]
 800f19a:	690b      	ldr	r3, [r1, #16]
 800f19c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f1a0:	4293      	cmp	r3, r2
 800f1a2:	bfb8      	it	lt
 800f1a4:	4613      	movlt	r3, r2
 800f1a6:	6033      	str	r3, [r6, #0]
 800f1a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f1ac:	4607      	mov	r7, r0
 800f1ae:	460c      	mov	r4, r1
 800f1b0:	b10a      	cbz	r2, 800f1b6 <_printf_common+0x26>
 800f1b2:	3301      	adds	r3, #1
 800f1b4:	6033      	str	r3, [r6, #0]
 800f1b6:	6823      	ldr	r3, [r4, #0]
 800f1b8:	0699      	lsls	r1, r3, #26
 800f1ba:	bf42      	ittt	mi
 800f1bc:	6833      	ldrmi	r3, [r6, #0]
 800f1be:	3302      	addmi	r3, #2
 800f1c0:	6033      	strmi	r3, [r6, #0]
 800f1c2:	6825      	ldr	r5, [r4, #0]
 800f1c4:	f015 0506 	ands.w	r5, r5, #6
 800f1c8:	d106      	bne.n	800f1d8 <_printf_common+0x48>
 800f1ca:	f104 0a19 	add.w	sl, r4, #25
 800f1ce:	68e3      	ldr	r3, [r4, #12]
 800f1d0:	6832      	ldr	r2, [r6, #0]
 800f1d2:	1a9b      	subs	r3, r3, r2
 800f1d4:	42ab      	cmp	r3, r5
 800f1d6:	dc26      	bgt.n	800f226 <_printf_common+0x96>
 800f1d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f1dc:	6822      	ldr	r2, [r4, #0]
 800f1de:	3b00      	subs	r3, #0
 800f1e0:	bf18      	it	ne
 800f1e2:	2301      	movne	r3, #1
 800f1e4:	0692      	lsls	r2, r2, #26
 800f1e6:	d42b      	bmi.n	800f240 <_printf_common+0xb0>
 800f1e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f1ec:	4641      	mov	r1, r8
 800f1ee:	4638      	mov	r0, r7
 800f1f0:	47c8      	blx	r9
 800f1f2:	3001      	adds	r0, #1
 800f1f4:	d01e      	beq.n	800f234 <_printf_common+0xa4>
 800f1f6:	6823      	ldr	r3, [r4, #0]
 800f1f8:	6922      	ldr	r2, [r4, #16]
 800f1fa:	f003 0306 	and.w	r3, r3, #6
 800f1fe:	2b04      	cmp	r3, #4
 800f200:	bf02      	ittt	eq
 800f202:	68e5      	ldreq	r5, [r4, #12]
 800f204:	6833      	ldreq	r3, [r6, #0]
 800f206:	1aed      	subeq	r5, r5, r3
 800f208:	68a3      	ldr	r3, [r4, #8]
 800f20a:	bf0c      	ite	eq
 800f20c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f210:	2500      	movne	r5, #0
 800f212:	4293      	cmp	r3, r2
 800f214:	bfc4      	itt	gt
 800f216:	1a9b      	subgt	r3, r3, r2
 800f218:	18ed      	addgt	r5, r5, r3
 800f21a:	2600      	movs	r6, #0
 800f21c:	341a      	adds	r4, #26
 800f21e:	42b5      	cmp	r5, r6
 800f220:	d11a      	bne.n	800f258 <_printf_common+0xc8>
 800f222:	2000      	movs	r0, #0
 800f224:	e008      	b.n	800f238 <_printf_common+0xa8>
 800f226:	2301      	movs	r3, #1
 800f228:	4652      	mov	r2, sl
 800f22a:	4641      	mov	r1, r8
 800f22c:	4638      	mov	r0, r7
 800f22e:	47c8      	blx	r9
 800f230:	3001      	adds	r0, #1
 800f232:	d103      	bne.n	800f23c <_printf_common+0xac>
 800f234:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f23c:	3501      	adds	r5, #1
 800f23e:	e7c6      	b.n	800f1ce <_printf_common+0x3e>
 800f240:	18e1      	adds	r1, r4, r3
 800f242:	1c5a      	adds	r2, r3, #1
 800f244:	2030      	movs	r0, #48	@ 0x30
 800f246:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f24a:	4422      	add	r2, r4
 800f24c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f250:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f254:	3302      	adds	r3, #2
 800f256:	e7c7      	b.n	800f1e8 <_printf_common+0x58>
 800f258:	2301      	movs	r3, #1
 800f25a:	4622      	mov	r2, r4
 800f25c:	4641      	mov	r1, r8
 800f25e:	4638      	mov	r0, r7
 800f260:	47c8      	blx	r9
 800f262:	3001      	adds	r0, #1
 800f264:	d0e6      	beq.n	800f234 <_printf_common+0xa4>
 800f266:	3601      	adds	r6, #1
 800f268:	e7d9      	b.n	800f21e <_printf_common+0x8e>
	...

0800f26c <_printf_i>:
 800f26c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f270:	7e0f      	ldrb	r7, [r1, #24]
 800f272:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f274:	2f78      	cmp	r7, #120	@ 0x78
 800f276:	4691      	mov	r9, r2
 800f278:	4680      	mov	r8, r0
 800f27a:	460c      	mov	r4, r1
 800f27c:	469a      	mov	sl, r3
 800f27e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f282:	d807      	bhi.n	800f294 <_printf_i+0x28>
 800f284:	2f62      	cmp	r7, #98	@ 0x62
 800f286:	d80a      	bhi.n	800f29e <_printf_i+0x32>
 800f288:	2f00      	cmp	r7, #0
 800f28a:	f000 80d2 	beq.w	800f432 <_printf_i+0x1c6>
 800f28e:	2f58      	cmp	r7, #88	@ 0x58
 800f290:	f000 80b9 	beq.w	800f406 <_printf_i+0x19a>
 800f294:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f298:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f29c:	e03a      	b.n	800f314 <_printf_i+0xa8>
 800f29e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f2a2:	2b15      	cmp	r3, #21
 800f2a4:	d8f6      	bhi.n	800f294 <_printf_i+0x28>
 800f2a6:	a101      	add	r1, pc, #4	@ (adr r1, 800f2ac <_printf_i+0x40>)
 800f2a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f2ac:	0800f305 	.word	0x0800f305
 800f2b0:	0800f319 	.word	0x0800f319
 800f2b4:	0800f295 	.word	0x0800f295
 800f2b8:	0800f295 	.word	0x0800f295
 800f2bc:	0800f295 	.word	0x0800f295
 800f2c0:	0800f295 	.word	0x0800f295
 800f2c4:	0800f319 	.word	0x0800f319
 800f2c8:	0800f295 	.word	0x0800f295
 800f2cc:	0800f295 	.word	0x0800f295
 800f2d0:	0800f295 	.word	0x0800f295
 800f2d4:	0800f295 	.word	0x0800f295
 800f2d8:	0800f419 	.word	0x0800f419
 800f2dc:	0800f343 	.word	0x0800f343
 800f2e0:	0800f3d3 	.word	0x0800f3d3
 800f2e4:	0800f295 	.word	0x0800f295
 800f2e8:	0800f295 	.word	0x0800f295
 800f2ec:	0800f43b 	.word	0x0800f43b
 800f2f0:	0800f295 	.word	0x0800f295
 800f2f4:	0800f343 	.word	0x0800f343
 800f2f8:	0800f295 	.word	0x0800f295
 800f2fc:	0800f295 	.word	0x0800f295
 800f300:	0800f3db 	.word	0x0800f3db
 800f304:	6833      	ldr	r3, [r6, #0]
 800f306:	1d1a      	adds	r2, r3, #4
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	6032      	str	r2, [r6, #0]
 800f30c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f310:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f314:	2301      	movs	r3, #1
 800f316:	e09d      	b.n	800f454 <_printf_i+0x1e8>
 800f318:	6833      	ldr	r3, [r6, #0]
 800f31a:	6820      	ldr	r0, [r4, #0]
 800f31c:	1d19      	adds	r1, r3, #4
 800f31e:	6031      	str	r1, [r6, #0]
 800f320:	0606      	lsls	r6, r0, #24
 800f322:	d501      	bpl.n	800f328 <_printf_i+0xbc>
 800f324:	681d      	ldr	r5, [r3, #0]
 800f326:	e003      	b.n	800f330 <_printf_i+0xc4>
 800f328:	0645      	lsls	r5, r0, #25
 800f32a:	d5fb      	bpl.n	800f324 <_printf_i+0xb8>
 800f32c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f330:	2d00      	cmp	r5, #0
 800f332:	da03      	bge.n	800f33c <_printf_i+0xd0>
 800f334:	232d      	movs	r3, #45	@ 0x2d
 800f336:	426d      	negs	r5, r5
 800f338:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f33c:	4859      	ldr	r0, [pc, #356]	@ (800f4a4 <_printf_i+0x238>)
 800f33e:	230a      	movs	r3, #10
 800f340:	e011      	b.n	800f366 <_printf_i+0xfa>
 800f342:	6821      	ldr	r1, [r4, #0]
 800f344:	6833      	ldr	r3, [r6, #0]
 800f346:	0608      	lsls	r0, r1, #24
 800f348:	f853 5b04 	ldr.w	r5, [r3], #4
 800f34c:	d402      	bmi.n	800f354 <_printf_i+0xe8>
 800f34e:	0649      	lsls	r1, r1, #25
 800f350:	bf48      	it	mi
 800f352:	b2ad      	uxthmi	r5, r5
 800f354:	2f6f      	cmp	r7, #111	@ 0x6f
 800f356:	4853      	ldr	r0, [pc, #332]	@ (800f4a4 <_printf_i+0x238>)
 800f358:	6033      	str	r3, [r6, #0]
 800f35a:	bf14      	ite	ne
 800f35c:	230a      	movne	r3, #10
 800f35e:	2308      	moveq	r3, #8
 800f360:	2100      	movs	r1, #0
 800f362:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f366:	6866      	ldr	r6, [r4, #4]
 800f368:	60a6      	str	r6, [r4, #8]
 800f36a:	2e00      	cmp	r6, #0
 800f36c:	bfa2      	ittt	ge
 800f36e:	6821      	ldrge	r1, [r4, #0]
 800f370:	f021 0104 	bicge.w	r1, r1, #4
 800f374:	6021      	strge	r1, [r4, #0]
 800f376:	b90d      	cbnz	r5, 800f37c <_printf_i+0x110>
 800f378:	2e00      	cmp	r6, #0
 800f37a:	d04b      	beq.n	800f414 <_printf_i+0x1a8>
 800f37c:	4616      	mov	r6, r2
 800f37e:	fbb5 f1f3 	udiv	r1, r5, r3
 800f382:	fb03 5711 	mls	r7, r3, r1, r5
 800f386:	5dc7      	ldrb	r7, [r0, r7]
 800f388:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f38c:	462f      	mov	r7, r5
 800f38e:	42bb      	cmp	r3, r7
 800f390:	460d      	mov	r5, r1
 800f392:	d9f4      	bls.n	800f37e <_printf_i+0x112>
 800f394:	2b08      	cmp	r3, #8
 800f396:	d10b      	bne.n	800f3b0 <_printf_i+0x144>
 800f398:	6823      	ldr	r3, [r4, #0]
 800f39a:	07df      	lsls	r7, r3, #31
 800f39c:	d508      	bpl.n	800f3b0 <_printf_i+0x144>
 800f39e:	6923      	ldr	r3, [r4, #16]
 800f3a0:	6861      	ldr	r1, [r4, #4]
 800f3a2:	4299      	cmp	r1, r3
 800f3a4:	bfde      	ittt	le
 800f3a6:	2330      	movle	r3, #48	@ 0x30
 800f3a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f3ac:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800f3b0:	1b92      	subs	r2, r2, r6
 800f3b2:	6122      	str	r2, [r4, #16]
 800f3b4:	f8cd a000 	str.w	sl, [sp]
 800f3b8:	464b      	mov	r3, r9
 800f3ba:	aa03      	add	r2, sp, #12
 800f3bc:	4621      	mov	r1, r4
 800f3be:	4640      	mov	r0, r8
 800f3c0:	f7ff fee6 	bl	800f190 <_printf_common>
 800f3c4:	3001      	adds	r0, #1
 800f3c6:	d14a      	bne.n	800f45e <_printf_i+0x1f2>
 800f3c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f3cc:	b004      	add	sp, #16
 800f3ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3d2:	6823      	ldr	r3, [r4, #0]
 800f3d4:	f043 0320 	orr.w	r3, r3, #32
 800f3d8:	6023      	str	r3, [r4, #0]
 800f3da:	4833      	ldr	r0, [pc, #204]	@ (800f4a8 <_printf_i+0x23c>)
 800f3dc:	2778      	movs	r7, #120	@ 0x78
 800f3de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f3e2:	6823      	ldr	r3, [r4, #0]
 800f3e4:	6831      	ldr	r1, [r6, #0]
 800f3e6:	061f      	lsls	r7, r3, #24
 800f3e8:	f851 5b04 	ldr.w	r5, [r1], #4
 800f3ec:	d402      	bmi.n	800f3f4 <_printf_i+0x188>
 800f3ee:	065f      	lsls	r7, r3, #25
 800f3f0:	bf48      	it	mi
 800f3f2:	b2ad      	uxthmi	r5, r5
 800f3f4:	6031      	str	r1, [r6, #0]
 800f3f6:	07d9      	lsls	r1, r3, #31
 800f3f8:	bf44      	itt	mi
 800f3fa:	f043 0320 	orrmi.w	r3, r3, #32
 800f3fe:	6023      	strmi	r3, [r4, #0]
 800f400:	b11d      	cbz	r5, 800f40a <_printf_i+0x19e>
 800f402:	2310      	movs	r3, #16
 800f404:	e7ac      	b.n	800f360 <_printf_i+0xf4>
 800f406:	4827      	ldr	r0, [pc, #156]	@ (800f4a4 <_printf_i+0x238>)
 800f408:	e7e9      	b.n	800f3de <_printf_i+0x172>
 800f40a:	6823      	ldr	r3, [r4, #0]
 800f40c:	f023 0320 	bic.w	r3, r3, #32
 800f410:	6023      	str	r3, [r4, #0]
 800f412:	e7f6      	b.n	800f402 <_printf_i+0x196>
 800f414:	4616      	mov	r6, r2
 800f416:	e7bd      	b.n	800f394 <_printf_i+0x128>
 800f418:	6833      	ldr	r3, [r6, #0]
 800f41a:	6825      	ldr	r5, [r4, #0]
 800f41c:	6961      	ldr	r1, [r4, #20]
 800f41e:	1d18      	adds	r0, r3, #4
 800f420:	6030      	str	r0, [r6, #0]
 800f422:	062e      	lsls	r6, r5, #24
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	d501      	bpl.n	800f42c <_printf_i+0x1c0>
 800f428:	6019      	str	r1, [r3, #0]
 800f42a:	e002      	b.n	800f432 <_printf_i+0x1c6>
 800f42c:	0668      	lsls	r0, r5, #25
 800f42e:	d5fb      	bpl.n	800f428 <_printf_i+0x1bc>
 800f430:	8019      	strh	r1, [r3, #0]
 800f432:	2300      	movs	r3, #0
 800f434:	6123      	str	r3, [r4, #16]
 800f436:	4616      	mov	r6, r2
 800f438:	e7bc      	b.n	800f3b4 <_printf_i+0x148>
 800f43a:	6833      	ldr	r3, [r6, #0]
 800f43c:	1d1a      	adds	r2, r3, #4
 800f43e:	6032      	str	r2, [r6, #0]
 800f440:	681e      	ldr	r6, [r3, #0]
 800f442:	6862      	ldr	r2, [r4, #4]
 800f444:	2100      	movs	r1, #0
 800f446:	4630      	mov	r0, r6
 800f448:	f7f0 fec2 	bl	80001d0 <memchr>
 800f44c:	b108      	cbz	r0, 800f452 <_printf_i+0x1e6>
 800f44e:	1b80      	subs	r0, r0, r6
 800f450:	6060      	str	r0, [r4, #4]
 800f452:	6863      	ldr	r3, [r4, #4]
 800f454:	6123      	str	r3, [r4, #16]
 800f456:	2300      	movs	r3, #0
 800f458:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f45c:	e7aa      	b.n	800f3b4 <_printf_i+0x148>
 800f45e:	6923      	ldr	r3, [r4, #16]
 800f460:	4632      	mov	r2, r6
 800f462:	4649      	mov	r1, r9
 800f464:	4640      	mov	r0, r8
 800f466:	47d0      	blx	sl
 800f468:	3001      	adds	r0, #1
 800f46a:	d0ad      	beq.n	800f3c8 <_printf_i+0x15c>
 800f46c:	6823      	ldr	r3, [r4, #0]
 800f46e:	079b      	lsls	r3, r3, #30
 800f470:	d413      	bmi.n	800f49a <_printf_i+0x22e>
 800f472:	68e0      	ldr	r0, [r4, #12]
 800f474:	9b03      	ldr	r3, [sp, #12]
 800f476:	4298      	cmp	r0, r3
 800f478:	bfb8      	it	lt
 800f47a:	4618      	movlt	r0, r3
 800f47c:	e7a6      	b.n	800f3cc <_printf_i+0x160>
 800f47e:	2301      	movs	r3, #1
 800f480:	4632      	mov	r2, r6
 800f482:	4649      	mov	r1, r9
 800f484:	4640      	mov	r0, r8
 800f486:	47d0      	blx	sl
 800f488:	3001      	adds	r0, #1
 800f48a:	d09d      	beq.n	800f3c8 <_printf_i+0x15c>
 800f48c:	3501      	adds	r5, #1
 800f48e:	68e3      	ldr	r3, [r4, #12]
 800f490:	9903      	ldr	r1, [sp, #12]
 800f492:	1a5b      	subs	r3, r3, r1
 800f494:	42ab      	cmp	r3, r5
 800f496:	dcf2      	bgt.n	800f47e <_printf_i+0x212>
 800f498:	e7eb      	b.n	800f472 <_printf_i+0x206>
 800f49a:	2500      	movs	r5, #0
 800f49c:	f104 0619 	add.w	r6, r4, #25
 800f4a0:	e7f5      	b.n	800f48e <_printf_i+0x222>
 800f4a2:	bf00      	nop
 800f4a4:	08011469 	.word	0x08011469
 800f4a8:	0801147a 	.word	0x0801147a

0800f4ac <__sflush_r>:
 800f4ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4b4:	0716      	lsls	r6, r2, #28
 800f4b6:	4605      	mov	r5, r0
 800f4b8:	460c      	mov	r4, r1
 800f4ba:	d454      	bmi.n	800f566 <__sflush_r+0xba>
 800f4bc:	684b      	ldr	r3, [r1, #4]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	dc02      	bgt.n	800f4c8 <__sflush_r+0x1c>
 800f4c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	dd48      	ble.n	800f55a <__sflush_r+0xae>
 800f4c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f4ca:	2e00      	cmp	r6, #0
 800f4cc:	d045      	beq.n	800f55a <__sflush_r+0xae>
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f4d4:	682f      	ldr	r7, [r5, #0]
 800f4d6:	6a21      	ldr	r1, [r4, #32]
 800f4d8:	602b      	str	r3, [r5, #0]
 800f4da:	d030      	beq.n	800f53e <__sflush_r+0x92>
 800f4dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f4de:	89a3      	ldrh	r3, [r4, #12]
 800f4e0:	0759      	lsls	r1, r3, #29
 800f4e2:	d505      	bpl.n	800f4f0 <__sflush_r+0x44>
 800f4e4:	6863      	ldr	r3, [r4, #4]
 800f4e6:	1ad2      	subs	r2, r2, r3
 800f4e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f4ea:	b10b      	cbz	r3, 800f4f0 <__sflush_r+0x44>
 800f4ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f4ee:	1ad2      	subs	r2, r2, r3
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f4f4:	6a21      	ldr	r1, [r4, #32]
 800f4f6:	4628      	mov	r0, r5
 800f4f8:	47b0      	blx	r6
 800f4fa:	1c43      	adds	r3, r0, #1
 800f4fc:	89a3      	ldrh	r3, [r4, #12]
 800f4fe:	d106      	bne.n	800f50e <__sflush_r+0x62>
 800f500:	6829      	ldr	r1, [r5, #0]
 800f502:	291d      	cmp	r1, #29
 800f504:	d82b      	bhi.n	800f55e <__sflush_r+0xb2>
 800f506:	4a2a      	ldr	r2, [pc, #168]	@ (800f5b0 <__sflush_r+0x104>)
 800f508:	410a      	asrs	r2, r1
 800f50a:	07d6      	lsls	r6, r2, #31
 800f50c:	d427      	bmi.n	800f55e <__sflush_r+0xb2>
 800f50e:	2200      	movs	r2, #0
 800f510:	6062      	str	r2, [r4, #4]
 800f512:	04d9      	lsls	r1, r3, #19
 800f514:	6922      	ldr	r2, [r4, #16]
 800f516:	6022      	str	r2, [r4, #0]
 800f518:	d504      	bpl.n	800f524 <__sflush_r+0x78>
 800f51a:	1c42      	adds	r2, r0, #1
 800f51c:	d101      	bne.n	800f522 <__sflush_r+0x76>
 800f51e:	682b      	ldr	r3, [r5, #0]
 800f520:	b903      	cbnz	r3, 800f524 <__sflush_r+0x78>
 800f522:	6560      	str	r0, [r4, #84]	@ 0x54
 800f524:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f526:	602f      	str	r7, [r5, #0]
 800f528:	b1b9      	cbz	r1, 800f55a <__sflush_r+0xae>
 800f52a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f52e:	4299      	cmp	r1, r3
 800f530:	d002      	beq.n	800f538 <__sflush_r+0x8c>
 800f532:	4628      	mov	r0, r5
 800f534:	f000 fa68 	bl	800fa08 <_free_r>
 800f538:	2300      	movs	r3, #0
 800f53a:	6363      	str	r3, [r4, #52]	@ 0x34
 800f53c:	e00d      	b.n	800f55a <__sflush_r+0xae>
 800f53e:	2301      	movs	r3, #1
 800f540:	4628      	mov	r0, r5
 800f542:	47b0      	blx	r6
 800f544:	4602      	mov	r2, r0
 800f546:	1c50      	adds	r0, r2, #1
 800f548:	d1c9      	bne.n	800f4de <__sflush_r+0x32>
 800f54a:	682b      	ldr	r3, [r5, #0]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d0c6      	beq.n	800f4de <__sflush_r+0x32>
 800f550:	2b1d      	cmp	r3, #29
 800f552:	d001      	beq.n	800f558 <__sflush_r+0xac>
 800f554:	2b16      	cmp	r3, #22
 800f556:	d11e      	bne.n	800f596 <__sflush_r+0xea>
 800f558:	602f      	str	r7, [r5, #0]
 800f55a:	2000      	movs	r0, #0
 800f55c:	e022      	b.n	800f5a4 <__sflush_r+0xf8>
 800f55e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f562:	b21b      	sxth	r3, r3
 800f564:	e01b      	b.n	800f59e <__sflush_r+0xf2>
 800f566:	690f      	ldr	r7, [r1, #16]
 800f568:	2f00      	cmp	r7, #0
 800f56a:	d0f6      	beq.n	800f55a <__sflush_r+0xae>
 800f56c:	0793      	lsls	r3, r2, #30
 800f56e:	680e      	ldr	r6, [r1, #0]
 800f570:	bf08      	it	eq
 800f572:	694b      	ldreq	r3, [r1, #20]
 800f574:	600f      	str	r7, [r1, #0]
 800f576:	bf18      	it	ne
 800f578:	2300      	movne	r3, #0
 800f57a:	eba6 0807 	sub.w	r8, r6, r7
 800f57e:	608b      	str	r3, [r1, #8]
 800f580:	f1b8 0f00 	cmp.w	r8, #0
 800f584:	dde9      	ble.n	800f55a <__sflush_r+0xae>
 800f586:	6a21      	ldr	r1, [r4, #32]
 800f588:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f58a:	4643      	mov	r3, r8
 800f58c:	463a      	mov	r2, r7
 800f58e:	4628      	mov	r0, r5
 800f590:	47b0      	blx	r6
 800f592:	2800      	cmp	r0, #0
 800f594:	dc08      	bgt.n	800f5a8 <__sflush_r+0xfc>
 800f596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f59a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f59e:	81a3      	strh	r3, [r4, #12]
 800f5a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5a8:	4407      	add	r7, r0
 800f5aa:	eba8 0800 	sub.w	r8, r8, r0
 800f5ae:	e7e7      	b.n	800f580 <__sflush_r+0xd4>
 800f5b0:	dfbffffe 	.word	0xdfbffffe

0800f5b4 <_fflush_r>:
 800f5b4:	b538      	push	{r3, r4, r5, lr}
 800f5b6:	690b      	ldr	r3, [r1, #16]
 800f5b8:	4605      	mov	r5, r0
 800f5ba:	460c      	mov	r4, r1
 800f5bc:	b913      	cbnz	r3, 800f5c4 <_fflush_r+0x10>
 800f5be:	2500      	movs	r5, #0
 800f5c0:	4628      	mov	r0, r5
 800f5c2:	bd38      	pop	{r3, r4, r5, pc}
 800f5c4:	b118      	cbz	r0, 800f5ce <_fflush_r+0x1a>
 800f5c6:	6a03      	ldr	r3, [r0, #32]
 800f5c8:	b90b      	cbnz	r3, 800f5ce <_fflush_r+0x1a>
 800f5ca:	f7ff fb6b 	bl	800eca4 <__sinit>
 800f5ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d0f3      	beq.n	800f5be <_fflush_r+0xa>
 800f5d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f5d8:	07d0      	lsls	r0, r2, #31
 800f5da:	d404      	bmi.n	800f5e6 <_fflush_r+0x32>
 800f5dc:	0599      	lsls	r1, r3, #22
 800f5de:	d402      	bmi.n	800f5e6 <_fflush_r+0x32>
 800f5e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f5e2:	f7ff fbda 	bl	800ed9a <__retarget_lock_acquire_recursive>
 800f5e6:	4628      	mov	r0, r5
 800f5e8:	4621      	mov	r1, r4
 800f5ea:	f7ff ff5f 	bl	800f4ac <__sflush_r>
 800f5ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f5f0:	07da      	lsls	r2, r3, #31
 800f5f2:	4605      	mov	r5, r0
 800f5f4:	d4e4      	bmi.n	800f5c0 <_fflush_r+0xc>
 800f5f6:	89a3      	ldrh	r3, [r4, #12]
 800f5f8:	059b      	lsls	r3, r3, #22
 800f5fa:	d4e1      	bmi.n	800f5c0 <_fflush_r+0xc>
 800f5fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f5fe:	f7ff fbcd 	bl	800ed9c <__retarget_lock_release_recursive>
 800f602:	e7dd      	b.n	800f5c0 <_fflush_r+0xc>

0800f604 <__malloc_lock>:
 800f604:	4801      	ldr	r0, [pc, #4]	@ (800f60c <__malloc_lock+0x8>)
 800f606:	f7ff bbc8 	b.w	800ed9a <__retarget_lock_acquire_recursive>
 800f60a:	bf00      	nop
 800f60c:	20000834 	.word	0x20000834

0800f610 <__malloc_unlock>:
 800f610:	4801      	ldr	r0, [pc, #4]	@ (800f618 <__malloc_unlock+0x8>)
 800f612:	f7ff bbc3 	b.w	800ed9c <__retarget_lock_release_recursive>
 800f616:	bf00      	nop
 800f618:	20000834 	.word	0x20000834

0800f61c <__sread>:
 800f61c:	b510      	push	{r4, lr}
 800f61e:	460c      	mov	r4, r1
 800f620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f624:	f000 f9a8 	bl	800f978 <_read_r>
 800f628:	2800      	cmp	r0, #0
 800f62a:	bfab      	itete	ge
 800f62c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f62e:	89a3      	ldrhlt	r3, [r4, #12]
 800f630:	181b      	addge	r3, r3, r0
 800f632:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f636:	bfac      	ite	ge
 800f638:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f63a:	81a3      	strhlt	r3, [r4, #12]
 800f63c:	bd10      	pop	{r4, pc}

0800f63e <__swrite>:
 800f63e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f642:	461f      	mov	r7, r3
 800f644:	898b      	ldrh	r3, [r1, #12]
 800f646:	05db      	lsls	r3, r3, #23
 800f648:	4605      	mov	r5, r0
 800f64a:	460c      	mov	r4, r1
 800f64c:	4616      	mov	r6, r2
 800f64e:	d505      	bpl.n	800f65c <__swrite+0x1e>
 800f650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f654:	2302      	movs	r3, #2
 800f656:	2200      	movs	r2, #0
 800f658:	f000 f94c 	bl	800f8f4 <_lseek_r>
 800f65c:	89a3      	ldrh	r3, [r4, #12]
 800f65e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f662:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f666:	81a3      	strh	r3, [r4, #12]
 800f668:	4632      	mov	r2, r6
 800f66a:	463b      	mov	r3, r7
 800f66c:	4628      	mov	r0, r5
 800f66e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f672:	f000 b9b7 	b.w	800f9e4 <_write_r>

0800f676 <__sseek>:
 800f676:	b510      	push	{r4, lr}
 800f678:	460c      	mov	r4, r1
 800f67a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f67e:	f000 f939 	bl	800f8f4 <_lseek_r>
 800f682:	1c43      	adds	r3, r0, #1
 800f684:	89a3      	ldrh	r3, [r4, #12]
 800f686:	bf15      	itete	ne
 800f688:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f68a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f68e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f692:	81a3      	strheq	r3, [r4, #12]
 800f694:	bf18      	it	ne
 800f696:	81a3      	strhne	r3, [r4, #12]
 800f698:	bd10      	pop	{r4, pc}

0800f69a <__sclose>:
 800f69a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f69e:	f000 b8f7 	b.w	800f890 <_close_r>

0800f6a2 <__swbuf_r>:
 800f6a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6a4:	460e      	mov	r6, r1
 800f6a6:	4614      	mov	r4, r2
 800f6a8:	4605      	mov	r5, r0
 800f6aa:	b118      	cbz	r0, 800f6b4 <__swbuf_r+0x12>
 800f6ac:	6a03      	ldr	r3, [r0, #32]
 800f6ae:	b90b      	cbnz	r3, 800f6b4 <__swbuf_r+0x12>
 800f6b0:	f7ff faf8 	bl	800eca4 <__sinit>
 800f6b4:	69a3      	ldr	r3, [r4, #24]
 800f6b6:	60a3      	str	r3, [r4, #8]
 800f6b8:	89a3      	ldrh	r3, [r4, #12]
 800f6ba:	071a      	lsls	r2, r3, #28
 800f6bc:	d501      	bpl.n	800f6c2 <__swbuf_r+0x20>
 800f6be:	6923      	ldr	r3, [r4, #16]
 800f6c0:	b943      	cbnz	r3, 800f6d4 <__swbuf_r+0x32>
 800f6c2:	4621      	mov	r1, r4
 800f6c4:	4628      	mov	r0, r5
 800f6c6:	f000 f82b 	bl	800f720 <__swsetup_r>
 800f6ca:	b118      	cbz	r0, 800f6d4 <__swbuf_r+0x32>
 800f6cc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800f6d0:	4638      	mov	r0, r7
 800f6d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6d4:	6823      	ldr	r3, [r4, #0]
 800f6d6:	6922      	ldr	r2, [r4, #16]
 800f6d8:	1a98      	subs	r0, r3, r2
 800f6da:	6963      	ldr	r3, [r4, #20]
 800f6dc:	b2f6      	uxtb	r6, r6
 800f6de:	4283      	cmp	r3, r0
 800f6e0:	4637      	mov	r7, r6
 800f6e2:	dc05      	bgt.n	800f6f0 <__swbuf_r+0x4e>
 800f6e4:	4621      	mov	r1, r4
 800f6e6:	4628      	mov	r0, r5
 800f6e8:	f7ff ff64 	bl	800f5b4 <_fflush_r>
 800f6ec:	2800      	cmp	r0, #0
 800f6ee:	d1ed      	bne.n	800f6cc <__swbuf_r+0x2a>
 800f6f0:	68a3      	ldr	r3, [r4, #8]
 800f6f2:	3b01      	subs	r3, #1
 800f6f4:	60a3      	str	r3, [r4, #8]
 800f6f6:	6823      	ldr	r3, [r4, #0]
 800f6f8:	1c5a      	adds	r2, r3, #1
 800f6fa:	6022      	str	r2, [r4, #0]
 800f6fc:	701e      	strb	r6, [r3, #0]
 800f6fe:	6962      	ldr	r2, [r4, #20]
 800f700:	1c43      	adds	r3, r0, #1
 800f702:	429a      	cmp	r2, r3
 800f704:	d004      	beq.n	800f710 <__swbuf_r+0x6e>
 800f706:	89a3      	ldrh	r3, [r4, #12]
 800f708:	07db      	lsls	r3, r3, #31
 800f70a:	d5e1      	bpl.n	800f6d0 <__swbuf_r+0x2e>
 800f70c:	2e0a      	cmp	r6, #10
 800f70e:	d1df      	bne.n	800f6d0 <__swbuf_r+0x2e>
 800f710:	4621      	mov	r1, r4
 800f712:	4628      	mov	r0, r5
 800f714:	f7ff ff4e 	bl	800f5b4 <_fflush_r>
 800f718:	2800      	cmp	r0, #0
 800f71a:	d0d9      	beq.n	800f6d0 <__swbuf_r+0x2e>
 800f71c:	e7d6      	b.n	800f6cc <__swbuf_r+0x2a>
	...

0800f720 <__swsetup_r>:
 800f720:	b538      	push	{r3, r4, r5, lr}
 800f722:	4b29      	ldr	r3, [pc, #164]	@ (800f7c8 <__swsetup_r+0xa8>)
 800f724:	4605      	mov	r5, r0
 800f726:	6818      	ldr	r0, [r3, #0]
 800f728:	460c      	mov	r4, r1
 800f72a:	b118      	cbz	r0, 800f734 <__swsetup_r+0x14>
 800f72c:	6a03      	ldr	r3, [r0, #32]
 800f72e:	b90b      	cbnz	r3, 800f734 <__swsetup_r+0x14>
 800f730:	f7ff fab8 	bl	800eca4 <__sinit>
 800f734:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f738:	0719      	lsls	r1, r3, #28
 800f73a:	d422      	bmi.n	800f782 <__swsetup_r+0x62>
 800f73c:	06da      	lsls	r2, r3, #27
 800f73e:	d407      	bmi.n	800f750 <__swsetup_r+0x30>
 800f740:	2209      	movs	r2, #9
 800f742:	602a      	str	r2, [r5, #0]
 800f744:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f748:	81a3      	strh	r3, [r4, #12]
 800f74a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f74e:	e033      	b.n	800f7b8 <__swsetup_r+0x98>
 800f750:	0758      	lsls	r0, r3, #29
 800f752:	d512      	bpl.n	800f77a <__swsetup_r+0x5a>
 800f754:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f756:	b141      	cbz	r1, 800f76a <__swsetup_r+0x4a>
 800f758:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f75c:	4299      	cmp	r1, r3
 800f75e:	d002      	beq.n	800f766 <__swsetup_r+0x46>
 800f760:	4628      	mov	r0, r5
 800f762:	f000 f951 	bl	800fa08 <_free_r>
 800f766:	2300      	movs	r3, #0
 800f768:	6363      	str	r3, [r4, #52]	@ 0x34
 800f76a:	89a3      	ldrh	r3, [r4, #12]
 800f76c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f770:	81a3      	strh	r3, [r4, #12]
 800f772:	2300      	movs	r3, #0
 800f774:	6063      	str	r3, [r4, #4]
 800f776:	6923      	ldr	r3, [r4, #16]
 800f778:	6023      	str	r3, [r4, #0]
 800f77a:	89a3      	ldrh	r3, [r4, #12]
 800f77c:	f043 0308 	orr.w	r3, r3, #8
 800f780:	81a3      	strh	r3, [r4, #12]
 800f782:	6923      	ldr	r3, [r4, #16]
 800f784:	b94b      	cbnz	r3, 800f79a <__swsetup_r+0x7a>
 800f786:	89a3      	ldrh	r3, [r4, #12]
 800f788:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f78c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f790:	d003      	beq.n	800f79a <__swsetup_r+0x7a>
 800f792:	4621      	mov	r1, r4
 800f794:	4628      	mov	r0, r5
 800f796:	f000 f83f 	bl	800f818 <__smakebuf_r>
 800f79a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f79e:	f013 0201 	ands.w	r2, r3, #1
 800f7a2:	d00a      	beq.n	800f7ba <__swsetup_r+0x9a>
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	60a2      	str	r2, [r4, #8]
 800f7a8:	6962      	ldr	r2, [r4, #20]
 800f7aa:	4252      	negs	r2, r2
 800f7ac:	61a2      	str	r2, [r4, #24]
 800f7ae:	6922      	ldr	r2, [r4, #16]
 800f7b0:	b942      	cbnz	r2, 800f7c4 <__swsetup_r+0xa4>
 800f7b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f7b6:	d1c5      	bne.n	800f744 <__swsetup_r+0x24>
 800f7b8:	bd38      	pop	{r3, r4, r5, pc}
 800f7ba:	0799      	lsls	r1, r3, #30
 800f7bc:	bf58      	it	pl
 800f7be:	6962      	ldrpl	r2, [r4, #20]
 800f7c0:	60a2      	str	r2, [r4, #8]
 800f7c2:	e7f4      	b.n	800f7ae <__swsetup_r+0x8e>
 800f7c4:	2000      	movs	r0, #0
 800f7c6:	e7f7      	b.n	800f7b8 <__swsetup_r+0x98>
 800f7c8:	20000074 	.word	0x20000074

0800f7cc <__swhatbuf_r>:
 800f7cc:	b570      	push	{r4, r5, r6, lr}
 800f7ce:	460c      	mov	r4, r1
 800f7d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7d4:	2900      	cmp	r1, #0
 800f7d6:	b096      	sub	sp, #88	@ 0x58
 800f7d8:	4615      	mov	r5, r2
 800f7da:	461e      	mov	r6, r3
 800f7dc:	da0d      	bge.n	800f7fa <__swhatbuf_r+0x2e>
 800f7de:	89a3      	ldrh	r3, [r4, #12]
 800f7e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f7e4:	f04f 0100 	mov.w	r1, #0
 800f7e8:	bf14      	ite	ne
 800f7ea:	2340      	movne	r3, #64	@ 0x40
 800f7ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f7f0:	2000      	movs	r0, #0
 800f7f2:	6031      	str	r1, [r6, #0]
 800f7f4:	602b      	str	r3, [r5, #0]
 800f7f6:	b016      	add	sp, #88	@ 0x58
 800f7f8:	bd70      	pop	{r4, r5, r6, pc}
 800f7fa:	466a      	mov	r2, sp
 800f7fc:	f000 f858 	bl	800f8b0 <_fstat_r>
 800f800:	2800      	cmp	r0, #0
 800f802:	dbec      	blt.n	800f7de <__swhatbuf_r+0x12>
 800f804:	9901      	ldr	r1, [sp, #4]
 800f806:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f80a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f80e:	4259      	negs	r1, r3
 800f810:	4159      	adcs	r1, r3
 800f812:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f816:	e7eb      	b.n	800f7f0 <__swhatbuf_r+0x24>

0800f818 <__smakebuf_r>:
 800f818:	898b      	ldrh	r3, [r1, #12]
 800f81a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f81c:	079d      	lsls	r5, r3, #30
 800f81e:	4606      	mov	r6, r0
 800f820:	460c      	mov	r4, r1
 800f822:	d507      	bpl.n	800f834 <__smakebuf_r+0x1c>
 800f824:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f828:	6023      	str	r3, [r4, #0]
 800f82a:	6123      	str	r3, [r4, #16]
 800f82c:	2301      	movs	r3, #1
 800f82e:	6163      	str	r3, [r4, #20]
 800f830:	b003      	add	sp, #12
 800f832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f834:	ab01      	add	r3, sp, #4
 800f836:	466a      	mov	r2, sp
 800f838:	f7ff ffc8 	bl	800f7cc <__swhatbuf_r>
 800f83c:	9f00      	ldr	r7, [sp, #0]
 800f83e:	4605      	mov	r5, r0
 800f840:	4639      	mov	r1, r7
 800f842:	4630      	mov	r0, r6
 800f844:	f7ff fc24 	bl	800f090 <_malloc_r>
 800f848:	b948      	cbnz	r0, 800f85e <__smakebuf_r+0x46>
 800f84a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f84e:	059a      	lsls	r2, r3, #22
 800f850:	d4ee      	bmi.n	800f830 <__smakebuf_r+0x18>
 800f852:	f023 0303 	bic.w	r3, r3, #3
 800f856:	f043 0302 	orr.w	r3, r3, #2
 800f85a:	81a3      	strh	r3, [r4, #12]
 800f85c:	e7e2      	b.n	800f824 <__smakebuf_r+0xc>
 800f85e:	89a3      	ldrh	r3, [r4, #12]
 800f860:	6020      	str	r0, [r4, #0]
 800f862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f866:	81a3      	strh	r3, [r4, #12]
 800f868:	9b01      	ldr	r3, [sp, #4]
 800f86a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f86e:	b15b      	cbz	r3, 800f888 <__smakebuf_r+0x70>
 800f870:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f874:	4630      	mov	r0, r6
 800f876:	f000 f82d 	bl	800f8d4 <_isatty_r>
 800f87a:	b128      	cbz	r0, 800f888 <__smakebuf_r+0x70>
 800f87c:	89a3      	ldrh	r3, [r4, #12]
 800f87e:	f023 0303 	bic.w	r3, r3, #3
 800f882:	f043 0301 	orr.w	r3, r3, #1
 800f886:	81a3      	strh	r3, [r4, #12]
 800f888:	89a3      	ldrh	r3, [r4, #12]
 800f88a:	431d      	orrs	r5, r3
 800f88c:	81a5      	strh	r5, [r4, #12]
 800f88e:	e7cf      	b.n	800f830 <__smakebuf_r+0x18>

0800f890 <_close_r>:
 800f890:	b538      	push	{r3, r4, r5, lr}
 800f892:	4d06      	ldr	r5, [pc, #24]	@ (800f8ac <_close_r+0x1c>)
 800f894:	2300      	movs	r3, #0
 800f896:	4604      	mov	r4, r0
 800f898:	4608      	mov	r0, r1
 800f89a:	602b      	str	r3, [r5, #0]
 800f89c:	f7f9 fc38 	bl	8009110 <_close>
 800f8a0:	1c43      	adds	r3, r0, #1
 800f8a2:	d102      	bne.n	800f8aa <_close_r+0x1a>
 800f8a4:	682b      	ldr	r3, [r5, #0]
 800f8a6:	b103      	cbz	r3, 800f8aa <_close_r+0x1a>
 800f8a8:	6023      	str	r3, [r4, #0]
 800f8aa:	bd38      	pop	{r3, r4, r5, pc}
 800f8ac:	20000840 	.word	0x20000840

0800f8b0 <_fstat_r>:
 800f8b0:	b538      	push	{r3, r4, r5, lr}
 800f8b2:	4d07      	ldr	r5, [pc, #28]	@ (800f8d0 <_fstat_r+0x20>)
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	4604      	mov	r4, r0
 800f8b8:	4608      	mov	r0, r1
 800f8ba:	4611      	mov	r1, r2
 800f8bc:	602b      	str	r3, [r5, #0]
 800f8be:	f7f9 fc33 	bl	8009128 <_fstat>
 800f8c2:	1c43      	adds	r3, r0, #1
 800f8c4:	d102      	bne.n	800f8cc <_fstat_r+0x1c>
 800f8c6:	682b      	ldr	r3, [r5, #0]
 800f8c8:	b103      	cbz	r3, 800f8cc <_fstat_r+0x1c>
 800f8ca:	6023      	str	r3, [r4, #0]
 800f8cc:	bd38      	pop	{r3, r4, r5, pc}
 800f8ce:	bf00      	nop
 800f8d0:	20000840 	.word	0x20000840

0800f8d4 <_isatty_r>:
 800f8d4:	b538      	push	{r3, r4, r5, lr}
 800f8d6:	4d06      	ldr	r5, [pc, #24]	@ (800f8f0 <_isatty_r+0x1c>)
 800f8d8:	2300      	movs	r3, #0
 800f8da:	4604      	mov	r4, r0
 800f8dc:	4608      	mov	r0, r1
 800f8de:	602b      	str	r3, [r5, #0]
 800f8e0:	f7f9 fc32 	bl	8009148 <_isatty>
 800f8e4:	1c43      	adds	r3, r0, #1
 800f8e6:	d102      	bne.n	800f8ee <_isatty_r+0x1a>
 800f8e8:	682b      	ldr	r3, [r5, #0]
 800f8ea:	b103      	cbz	r3, 800f8ee <_isatty_r+0x1a>
 800f8ec:	6023      	str	r3, [r4, #0]
 800f8ee:	bd38      	pop	{r3, r4, r5, pc}
 800f8f0:	20000840 	.word	0x20000840

0800f8f4 <_lseek_r>:
 800f8f4:	b538      	push	{r3, r4, r5, lr}
 800f8f6:	4d07      	ldr	r5, [pc, #28]	@ (800f914 <_lseek_r+0x20>)
 800f8f8:	4604      	mov	r4, r0
 800f8fa:	4608      	mov	r0, r1
 800f8fc:	4611      	mov	r1, r2
 800f8fe:	2200      	movs	r2, #0
 800f900:	602a      	str	r2, [r5, #0]
 800f902:	461a      	mov	r2, r3
 800f904:	f7f9 fc2b 	bl	800915e <_lseek>
 800f908:	1c43      	adds	r3, r0, #1
 800f90a:	d102      	bne.n	800f912 <_lseek_r+0x1e>
 800f90c:	682b      	ldr	r3, [r5, #0]
 800f90e:	b103      	cbz	r3, 800f912 <_lseek_r+0x1e>
 800f910:	6023      	str	r3, [r4, #0]
 800f912:	bd38      	pop	{r3, r4, r5, pc}
 800f914:	20000840 	.word	0x20000840

0800f918 <_raise_r>:
 800f918:	291f      	cmp	r1, #31
 800f91a:	b538      	push	{r3, r4, r5, lr}
 800f91c:	4605      	mov	r5, r0
 800f91e:	460c      	mov	r4, r1
 800f920:	d904      	bls.n	800f92c <_raise_r+0x14>
 800f922:	2316      	movs	r3, #22
 800f924:	6003      	str	r3, [r0, #0]
 800f926:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f92a:	bd38      	pop	{r3, r4, r5, pc}
 800f92c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f92e:	b112      	cbz	r2, 800f936 <_raise_r+0x1e>
 800f930:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f934:	b94b      	cbnz	r3, 800f94a <_raise_r+0x32>
 800f936:	4628      	mov	r0, r5
 800f938:	f000 f842 	bl	800f9c0 <_getpid_r>
 800f93c:	4622      	mov	r2, r4
 800f93e:	4601      	mov	r1, r0
 800f940:	4628      	mov	r0, r5
 800f942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f946:	f000 b829 	b.w	800f99c <_kill_r>
 800f94a:	2b01      	cmp	r3, #1
 800f94c:	d00a      	beq.n	800f964 <_raise_r+0x4c>
 800f94e:	1c59      	adds	r1, r3, #1
 800f950:	d103      	bne.n	800f95a <_raise_r+0x42>
 800f952:	2316      	movs	r3, #22
 800f954:	6003      	str	r3, [r0, #0]
 800f956:	2001      	movs	r0, #1
 800f958:	e7e7      	b.n	800f92a <_raise_r+0x12>
 800f95a:	2100      	movs	r1, #0
 800f95c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f960:	4620      	mov	r0, r4
 800f962:	4798      	blx	r3
 800f964:	2000      	movs	r0, #0
 800f966:	e7e0      	b.n	800f92a <_raise_r+0x12>

0800f968 <raise>:
 800f968:	4b02      	ldr	r3, [pc, #8]	@ (800f974 <raise+0xc>)
 800f96a:	4601      	mov	r1, r0
 800f96c:	6818      	ldr	r0, [r3, #0]
 800f96e:	f7ff bfd3 	b.w	800f918 <_raise_r>
 800f972:	bf00      	nop
 800f974:	20000074 	.word	0x20000074

0800f978 <_read_r>:
 800f978:	b538      	push	{r3, r4, r5, lr}
 800f97a:	4d07      	ldr	r5, [pc, #28]	@ (800f998 <_read_r+0x20>)
 800f97c:	4604      	mov	r4, r0
 800f97e:	4608      	mov	r0, r1
 800f980:	4611      	mov	r1, r2
 800f982:	2200      	movs	r2, #0
 800f984:	602a      	str	r2, [r5, #0]
 800f986:	461a      	mov	r2, r3
 800f988:	f7f9 fb89 	bl	800909e <_read>
 800f98c:	1c43      	adds	r3, r0, #1
 800f98e:	d102      	bne.n	800f996 <_read_r+0x1e>
 800f990:	682b      	ldr	r3, [r5, #0]
 800f992:	b103      	cbz	r3, 800f996 <_read_r+0x1e>
 800f994:	6023      	str	r3, [r4, #0]
 800f996:	bd38      	pop	{r3, r4, r5, pc}
 800f998:	20000840 	.word	0x20000840

0800f99c <_kill_r>:
 800f99c:	b538      	push	{r3, r4, r5, lr}
 800f99e:	4d07      	ldr	r5, [pc, #28]	@ (800f9bc <_kill_r+0x20>)
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	4604      	mov	r4, r0
 800f9a4:	4608      	mov	r0, r1
 800f9a6:	4611      	mov	r1, r2
 800f9a8:	602b      	str	r3, [r5, #0]
 800f9aa:	f7f9 fb5d 	bl	8009068 <_kill>
 800f9ae:	1c43      	adds	r3, r0, #1
 800f9b0:	d102      	bne.n	800f9b8 <_kill_r+0x1c>
 800f9b2:	682b      	ldr	r3, [r5, #0]
 800f9b4:	b103      	cbz	r3, 800f9b8 <_kill_r+0x1c>
 800f9b6:	6023      	str	r3, [r4, #0]
 800f9b8:	bd38      	pop	{r3, r4, r5, pc}
 800f9ba:	bf00      	nop
 800f9bc:	20000840 	.word	0x20000840

0800f9c0 <_getpid_r>:
 800f9c0:	f7f9 bb4a 	b.w	8009058 <_getpid>

0800f9c4 <_sbrk_r>:
 800f9c4:	b538      	push	{r3, r4, r5, lr}
 800f9c6:	4d06      	ldr	r5, [pc, #24]	@ (800f9e0 <_sbrk_r+0x1c>)
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	4604      	mov	r4, r0
 800f9cc:	4608      	mov	r0, r1
 800f9ce:	602b      	str	r3, [r5, #0]
 800f9d0:	f7f9 fbd2 	bl	8009178 <_sbrk>
 800f9d4:	1c43      	adds	r3, r0, #1
 800f9d6:	d102      	bne.n	800f9de <_sbrk_r+0x1a>
 800f9d8:	682b      	ldr	r3, [r5, #0]
 800f9da:	b103      	cbz	r3, 800f9de <_sbrk_r+0x1a>
 800f9dc:	6023      	str	r3, [r4, #0]
 800f9de:	bd38      	pop	{r3, r4, r5, pc}
 800f9e0:	20000840 	.word	0x20000840

0800f9e4 <_write_r>:
 800f9e4:	b538      	push	{r3, r4, r5, lr}
 800f9e6:	4d07      	ldr	r5, [pc, #28]	@ (800fa04 <_write_r+0x20>)
 800f9e8:	4604      	mov	r4, r0
 800f9ea:	4608      	mov	r0, r1
 800f9ec:	4611      	mov	r1, r2
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	602a      	str	r2, [r5, #0]
 800f9f2:	461a      	mov	r2, r3
 800f9f4:	f7f9 fb70 	bl	80090d8 <_write>
 800f9f8:	1c43      	adds	r3, r0, #1
 800f9fa:	d102      	bne.n	800fa02 <_write_r+0x1e>
 800f9fc:	682b      	ldr	r3, [r5, #0]
 800f9fe:	b103      	cbz	r3, 800fa02 <_write_r+0x1e>
 800fa00:	6023      	str	r3, [r4, #0]
 800fa02:	bd38      	pop	{r3, r4, r5, pc}
 800fa04:	20000840 	.word	0x20000840

0800fa08 <_free_r>:
 800fa08:	b538      	push	{r3, r4, r5, lr}
 800fa0a:	4605      	mov	r5, r0
 800fa0c:	2900      	cmp	r1, #0
 800fa0e:	d041      	beq.n	800fa94 <_free_r+0x8c>
 800fa10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa14:	1f0c      	subs	r4, r1, #4
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	bfb8      	it	lt
 800fa1a:	18e4      	addlt	r4, r4, r3
 800fa1c:	f7ff fdf2 	bl	800f604 <__malloc_lock>
 800fa20:	4a1d      	ldr	r2, [pc, #116]	@ (800fa98 <_free_r+0x90>)
 800fa22:	6813      	ldr	r3, [r2, #0]
 800fa24:	b933      	cbnz	r3, 800fa34 <_free_r+0x2c>
 800fa26:	6063      	str	r3, [r4, #4]
 800fa28:	6014      	str	r4, [r2, #0]
 800fa2a:	4628      	mov	r0, r5
 800fa2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa30:	f7ff bdee 	b.w	800f610 <__malloc_unlock>
 800fa34:	42a3      	cmp	r3, r4
 800fa36:	d908      	bls.n	800fa4a <_free_r+0x42>
 800fa38:	6820      	ldr	r0, [r4, #0]
 800fa3a:	1821      	adds	r1, r4, r0
 800fa3c:	428b      	cmp	r3, r1
 800fa3e:	bf01      	itttt	eq
 800fa40:	6819      	ldreq	r1, [r3, #0]
 800fa42:	685b      	ldreq	r3, [r3, #4]
 800fa44:	1809      	addeq	r1, r1, r0
 800fa46:	6021      	streq	r1, [r4, #0]
 800fa48:	e7ed      	b.n	800fa26 <_free_r+0x1e>
 800fa4a:	461a      	mov	r2, r3
 800fa4c:	685b      	ldr	r3, [r3, #4]
 800fa4e:	b10b      	cbz	r3, 800fa54 <_free_r+0x4c>
 800fa50:	42a3      	cmp	r3, r4
 800fa52:	d9fa      	bls.n	800fa4a <_free_r+0x42>
 800fa54:	6811      	ldr	r1, [r2, #0]
 800fa56:	1850      	adds	r0, r2, r1
 800fa58:	42a0      	cmp	r0, r4
 800fa5a:	d10b      	bne.n	800fa74 <_free_r+0x6c>
 800fa5c:	6820      	ldr	r0, [r4, #0]
 800fa5e:	4401      	add	r1, r0
 800fa60:	1850      	adds	r0, r2, r1
 800fa62:	4283      	cmp	r3, r0
 800fa64:	6011      	str	r1, [r2, #0]
 800fa66:	d1e0      	bne.n	800fa2a <_free_r+0x22>
 800fa68:	6818      	ldr	r0, [r3, #0]
 800fa6a:	685b      	ldr	r3, [r3, #4]
 800fa6c:	6053      	str	r3, [r2, #4]
 800fa6e:	4408      	add	r0, r1
 800fa70:	6010      	str	r0, [r2, #0]
 800fa72:	e7da      	b.n	800fa2a <_free_r+0x22>
 800fa74:	d902      	bls.n	800fa7c <_free_r+0x74>
 800fa76:	230c      	movs	r3, #12
 800fa78:	602b      	str	r3, [r5, #0]
 800fa7a:	e7d6      	b.n	800fa2a <_free_r+0x22>
 800fa7c:	6820      	ldr	r0, [r4, #0]
 800fa7e:	1821      	adds	r1, r4, r0
 800fa80:	428b      	cmp	r3, r1
 800fa82:	bf04      	itt	eq
 800fa84:	6819      	ldreq	r1, [r3, #0]
 800fa86:	685b      	ldreq	r3, [r3, #4]
 800fa88:	6063      	str	r3, [r4, #4]
 800fa8a:	bf04      	itt	eq
 800fa8c:	1809      	addeq	r1, r1, r0
 800fa8e:	6021      	streq	r1, [r4, #0]
 800fa90:	6054      	str	r4, [r2, #4]
 800fa92:	e7ca      	b.n	800fa2a <_free_r+0x22>
 800fa94:	bd38      	pop	{r3, r4, r5, pc}
 800fa96:	bf00      	nop
 800fa98:	2000083c 	.word	0x2000083c

0800fa9c <_init>:
 800fa9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa9e:	bf00      	nop
 800faa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800faa2:	bc08      	pop	{r3}
 800faa4:	469e      	mov	lr, r3
 800faa6:	4770      	bx	lr

0800faa8 <_fini>:
 800faa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faaa:	bf00      	nop
 800faac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800faae:	bc08      	pop	{r3}
 800fab0:	469e      	mov	lr, r3
 800fab2:	4770      	bx	lr
