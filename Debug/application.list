
application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aae4  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014d0  0800ac70  0800ac70  0000bc70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c140  0800c140  0000e054  2**0
                  CONTENTS
  4 .ARM          00000008  0800c140  0800c140  0000d140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c148  0800c148  0000e054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c148  0800c148  0000d148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c14c  0800c14c  0000d14c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  0800c150  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  20000054  0800c1a4  0000e054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000560  0800c1a4  0000e560  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e054  2**0
                  CONTENTS, READONLY
 12 .debug_info   000208a6  00000000  00000000  0000e084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000459b  00000000  00000000  0002e92a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d78  00000000  00000000  00032ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001708  00000000  00000000  00034c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025190  00000000  00000000  00036348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021e81  00000000  00000000  0005b4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e21cc  00000000  00000000  0007d359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015f525  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007dd0  00000000  00000000  0015f568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00167338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000054 	.word	0x20000054
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800ac58 	.word	0x0800ac58

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000058 	.word	0x20000058
 80001c8:	0800ac58 	.word	0x0800ac58

080001cc <__aeabi_ldivmod>:
 80001cc:	b97b      	cbnz	r3, 80001ee <__aeabi_ldivmod+0x22>
 80001ce:	b972      	cbnz	r2, 80001ee <__aeabi_ldivmod+0x22>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bfbe      	ittt	lt
 80001d4:	2000      	movlt	r0, #0
 80001d6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80001da:	e006      	blt.n	80001ea <__aeabi_ldivmod+0x1e>
 80001dc:	bf08      	it	eq
 80001de:	2800      	cmpeq	r0, #0
 80001e0:	bf1c      	itt	ne
 80001e2:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80001e6:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ea:	f000 b9b5 	b.w	8000558 <__aeabi_idiv0>
 80001ee:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f6:	2900      	cmp	r1, #0
 80001f8:	db09      	blt.n	800020e <__aeabi_ldivmod+0x42>
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	db1a      	blt.n	8000234 <__aeabi_ldivmod+0x68>
 80001fe:	f000 f84d 	bl	800029c <__udivmoddi4>
 8000202:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000206:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020a:	b004      	add	sp, #16
 800020c:	4770      	bx	lr
 800020e:	4240      	negs	r0, r0
 8000210:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000214:	2b00      	cmp	r3, #0
 8000216:	db1b      	blt.n	8000250 <__aeabi_ldivmod+0x84>
 8000218:	f000 f840 	bl	800029c <__udivmoddi4>
 800021c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000220:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000224:	b004      	add	sp, #16
 8000226:	4240      	negs	r0, r0
 8000228:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800022c:	4252      	negs	r2, r2
 800022e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000232:	4770      	bx	lr
 8000234:	4252      	negs	r2, r2
 8000236:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800023a:	f000 f82f 	bl	800029c <__udivmoddi4>
 800023e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000242:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000246:	b004      	add	sp, #16
 8000248:	4240      	negs	r0, r0
 800024a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024e:	4770      	bx	lr
 8000250:	4252      	negs	r2, r2
 8000252:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000256:	f000 f821 	bl	800029c <__udivmoddi4>
 800025a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000262:	b004      	add	sp, #16
 8000264:	4252      	negs	r2, r2
 8000266:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800026a:	4770      	bx	lr

0800026c <__aeabi_uldivmod>:
 800026c:	b953      	cbnz	r3, 8000284 <__aeabi_uldivmod+0x18>
 800026e:	b94a      	cbnz	r2, 8000284 <__aeabi_uldivmod+0x18>
 8000270:	2900      	cmp	r1, #0
 8000272:	bf08      	it	eq
 8000274:	2800      	cmpeq	r0, #0
 8000276:	bf1c      	itt	ne
 8000278:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800027c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000280:	f000 b96a 	b.w	8000558 <__aeabi_idiv0>
 8000284:	f1ad 0c08 	sub.w	ip, sp, #8
 8000288:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800028c:	f000 f806 	bl	800029c <__udivmoddi4>
 8000290:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000294:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000298:	b004      	add	sp, #16
 800029a:	4770      	bx	lr

0800029c <__udivmoddi4>:
 800029c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a0:	9d08      	ldr	r5, [sp, #32]
 80002a2:	460c      	mov	r4, r1
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d14e      	bne.n	8000346 <__udivmoddi4+0xaa>
 80002a8:	4694      	mov	ip, r2
 80002aa:	458c      	cmp	ip, r1
 80002ac:	4686      	mov	lr, r0
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	d962      	bls.n	800037a <__udivmoddi4+0xde>
 80002b4:	b14a      	cbz	r2, 80002ca <__udivmoddi4+0x2e>
 80002b6:	f1c2 0320 	rsb	r3, r2, #32
 80002ba:	4091      	lsls	r1, r2
 80002bc:	fa20 f303 	lsr.w	r3, r0, r3
 80002c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c4:	4319      	orrs	r1, r3
 80002c6:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ce:	fa1f f68c 	uxth.w	r6, ip
 80002d2:	fbb1 f4f7 	udiv	r4, r1, r7
 80002d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002da:	fb07 1114 	mls	r1, r7, r4, r1
 80002de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e2:	fb04 f106 	mul.w	r1, r4, r6
 80002e6:	4299      	cmp	r1, r3
 80002e8:	d90a      	bls.n	8000300 <__udivmoddi4+0x64>
 80002ea:	eb1c 0303 	adds.w	r3, ip, r3
 80002ee:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f2:	f080 8112 	bcs.w	800051a <__udivmoddi4+0x27e>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 810f 	bls.w	800051a <__udivmoddi4+0x27e>
 80002fc:	3c02      	subs	r4, #2
 80002fe:	4463      	add	r3, ip
 8000300:	1a59      	subs	r1, r3, r1
 8000302:	fa1f f38e 	uxth.w	r3, lr
 8000306:	fbb1 f0f7 	udiv	r0, r1, r7
 800030a:	fb07 1110 	mls	r1, r7, r0, r1
 800030e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000312:	fb00 f606 	mul.w	r6, r0, r6
 8000316:	429e      	cmp	r6, r3
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x94>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000322:	f080 80fc 	bcs.w	800051e <__udivmoddi4+0x282>
 8000326:	429e      	cmp	r6, r3
 8000328:	f240 80f9 	bls.w	800051e <__udivmoddi4+0x282>
 800032c:	4463      	add	r3, ip
 800032e:	3802      	subs	r0, #2
 8000330:	1b9b      	subs	r3, r3, r6
 8000332:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa6>
 800033a:	40d3      	lsrs	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xba>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb4>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa6>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x150>
 800035e:	42a3      	cmp	r3, r4
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xcc>
 8000362:	4290      	cmp	r0, r2
 8000364:	f0c0 80f0 	bcc.w	8000548 <__udivmoddi4+0x2ac>
 8000368:	1a86      	subs	r6, r0, r2
 800036a:	eb64 0303 	sbc.w	r3, r4, r3
 800036e:	2001      	movs	r0, #1
 8000370:	2d00      	cmp	r5, #0
 8000372:	d0e6      	beq.n	8000342 <__udivmoddi4+0xa6>
 8000374:	e9c5 6300 	strd	r6, r3, [r5]
 8000378:	e7e3      	b.n	8000342 <__udivmoddi4+0xa6>
 800037a:	2a00      	cmp	r2, #0
 800037c:	f040 8090 	bne.w	80004a0 <__udivmoddi4+0x204>
 8000380:	eba1 040c 	sub.w	r4, r1, ip
 8000384:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000388:	fa1f f78c 	uxth.w	r7, ip
 800038c:	2101      	movs	r1, #1
 800038e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000392:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000396:	fb08 4416 	mls	r4, r8, r6, r4
 800039a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800039e:	fb07 f006 	mul.w	r0, r7, r6
 80003a2:	4298      	cmp	r0, r3
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x11c>
 80003a6:	eb1c 0303 	adds.w	r3, ip, r3
 80003aa:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x11a>
 80003b0:	4298      	cmp	r0, r3
 80003b2:	f200 80cd 	bhi.w	8000550 <__udivmoddi4+0x2b4>
 80003b6:	4626      	mov	r6, r4
 80003b8:	1a1c      	subs	r4, r3, r0
 80003ba:	fa1f f38e 	uxth.w	r3, lr
 80003be:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c2:	fb08 4410 	mls	r4, r8, r0, r4
 80003c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ca:	fb00 f707 	mul.w	r7, r0, r7
 80003ce:	429f      	cmp	r7, r3
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x148>
 80003d2:	eb1c 0303 	adds.w	r3, ip, r3
 80003d6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x146>
 80003dc:	429f      	cmp	r7, r3
 80003de:	f200 80b0 	bhi.w	8000542 <__udivmoddi4+0x2a6>
 80003e2:	4620      	mov	r0, r4
 80003e4:	1bdb      	subs	r3, r3, r7
 80003e6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x9c>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa20 fc06 	lsr.w	ip, r0, r6
 80003fc:	fa04 f301 	lsl.w	r3, r4, r1
 8000400:	ea43 030c 	orr.w	r3, r3, ip
 8000404:	40f4      	lsrs	r4, r6
 8000406:	fa00 f801 	lsl.w	r8, r0, r1
 800040a:	0c38      	lsrs	r0, r7, #16
 800040c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000410:	fbb4 fef0 	udiv	lr, r4, r0
 8000414:	fa1f fc87 	uxth.w	ip, r7
 8000418:	fb00 441e 	mls	r4, r0, lr, r4
 800041c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000420:	fb0e f90c 	mul.w	r9, lr, ip
 8000424:	45a1      	cmp	r9, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x1a6>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000432:	f080 8084 	bcs.w	800053e <__udivmoddi4+0x2a2>
 8000436:	45a1      	cmp	r9, r4
 8000438:	f240 8081 	bls.w	800053e <__udivmoddi4+0x2a2>
 800043c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000440:	443c      	add	r4, r7
 8000442:	eba4 0409 	sub.w	r4, r4, r9
 8000446:	fa1f f983 	uxth.w	r9, r3
 800044a:	fbb4 f3f0 	udiv	r3, r4, r0
 800044e:	fb00 4413 	mls	r4, r0, r3, r4
 8000452:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000456:	fb03 fc0c 	mul.w	ip, r3, ip
 800045a:	45a4      	cmp	ip, r4
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x1d2>
 800045e:	193c      	adds	r4, r7, r4
 8000460:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000464:	d267      	bcs.n	8000536 <__udivmoddi4+0x29a>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d965      	bls.n	8000536 <__udivmoddi4+0x29a>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000472:	fba0 9302 	umull	r9, r3, r0, r2
 8000476:	eba4 040c 	sub.w	r4, r4, ip
 800047a:	429c      	cmp	r4, r3
 800047c:	46ce      	mov	lr, r9
 800047e:	469c      	mov	ip, r3
 8000480:	d351      	bcc.n	8000526 <__udivmoddi4+0x28a>
 8000482:	d04e      	beq.n	8000522 <__udivmoddi4+0x286>
 8000484:	b155      	cbz	r5, 800049c <__udivmoddi4+0x200>
 8000486:	ebb8 030e 	subs.w	r3, r8, lr
 800048a:	eb64 040c 	sbc.w	r4, r4, ip
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	40cb      	lsrs	r3, r1
 8000494:	431e      	orrs	r6, r3
 8000496:	40cc      	lsrs	r4, r1
 8000498:	e9c5 6400 	strd	r6, r4, [r5]
 800049c:	2100      	movs	r1, #0
 800049e:	e750      	b.n	8000342 <__udivmoddi4+0xa6>
 80004a0:	f1c2 0320 	rsb	r3, r2, #32
 80004a4:	fa20 f103 	lsr.w	r1, r0, r3
 80004a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80004ac:	fa24 f303 	lsr.w	r3, r4, r3
 80004b0:	4094      	lsls	r4, r2
 80004b2:	430c      	orrs	r4, r1
 80004b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b8:	fa00 fe02 	lsl.w	lr, r0, r2
 80004bc:	fa1f f78c 	uxth.w	r7, ip
 80004c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c4:	fb08 3110 	mls	r1, r8, r0, r3
 80004c8:	0c23      	lsrs	r3, r4, #16
 80004ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ce:	fb00 f107 	mul.w	r1, r0, r7
 80004d2:	4299      	cmp	r1, r3
 80004d4:	d908      	bls.n	80004e8 <__udivmoddi4+0x24c>
 80004d6:	eb1c 0303 	adds.w	r3, ip, r3
 80004da:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004de:	d22c      	bcs.n	800053a <__udivmoddi4+0x29e>
 80004e0:	4299      	cmp	r1, r3
 80004e2:	d92a      	bls.n	800053a <__udivmoddi4+0x29e>
 80004e4:	3802      	subs	r0, #2
 80004e6:	4463      	add	r3, ip
 80004e8:	1a5b      	subs	r3, r3, r1
 80004ea:	b2a4      	uxth	r4, r4
 80004ec:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f0:	fb08 3311 	mls	r3, r8, r1, r3
 80004f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f8:	fb01 f307 	mul.w	r3, r1, r7
 80004fc:	42a3      	cmp	r3, r4
 80004fe:	d908      	bls.n	8000512 <__udivmoddi4+0x276>
 8000500:	eb1c 0404 	adds.w	r4, ip, r4
 8000504:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000508:	d213      	bcs.n	8000532 <__udivmoddi4+0x296>
 800050a:	42a3      	cmp	r3, r4
 800050c:	d911      	bls.n	8000532 <__udivmoddi4+0x296>
 800050e:	3902      	subs	r1, #2
 8000510:	4464      	add	r4, ip
 8000512:	1ae4      	subs	r4, r4, r3
 8000514:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000518:	e739      	b.n	800038e <__udivmoddi4+0xf2>
 800051a:	4604      	mov	r4, r0
 800051c:	e6f0      	b.n	8000300 <__udivmoddi4+0x64>
 800051e:	4608      	mov	r0, r1
 8000520:	e706      	b.n	8000330 <__udivmoddi4+0x94>
 8000522:	45c8      	cmp	r8, r9
 8000524:	d2ae      	bcs.n	8000484 <__udivmoddi4+0x1e8>
 8000526:	ebb9 0e02 	subs.w	lr, r9, r2
 800052a:	eb63 0c07 	sbc.w	ip, r3, r7
 800052e:	3801      	subs	r0, #1
 8000530:	e7a8      	b.n	8000484 <__udivmoddi4+0x1e8>
 8000532:	4631      	mov	r1, r6
 8000534:	e7ed      	b.n	8000512 <__udivmoddi4+0x276>
 8000536:	4603      	mov	r3, r0
 8000538:	e799      	b.n	800046e <__udivmoddi4+0x1d2>
 800053a:	4630      	mov	r0, r6
 800053c:	e7d4      	b.n	80004e8 <__udivmoddi4+0x24c>
 800053e:	46d6      	mov	lr, sl
 8000540:	e77f      	b.n	8000442 <__udivmoddi4+0x1a6>
 8000542:	4463      	add	r3, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e74d      	b.n	80003e4 <__udivmoddi4+0x148>
 8000548:	4606      	mov	r6, r0
 800054a:	4623      	mov	r3, r4
 800054c:	4608      	mov	r0, r1
 800054e:	e70f      	b.n	8000370 <__udivmoddi4+0xd4>
 8000550:	3e02      	subs	r6, #2
 8000552:	4463      	add	r3, ip
 8000554:	e730      	b.n	80003b8 <__udivmoddi4+0x11c>
 8000556:	bf00      	nop

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000562:	463b      	mov	r3, r7
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]
 8000570:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000572:	4b29      	ldr	r3, [pc, #164]	@ (8000618 <MX_ADC1_Init+0xbc>)
 8000574:	4a29      	ldr	r2, [pc, #164]	@ (800061c <MX_ADC1_Init+0xc0>)
 8000576:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 8000578:	4b27      	ldr	r3, [pc, #156]	@ (8000618 <MX_ADC1_Init+0xbc>)
 800057a:	f44f 12e0 	mov.w	r2, #1835008	@ 0x1c0000
 800057e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000580:	4b25      	ldr	r3, [pc, #148]	@ (8000618 <MX_ADC1_Init+0xbc>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000586:	4b24      	ldr	r3, [pc, #144]	@ (8000618 <MX_ADC1_Init+0xbc>)
 8000588:	2200      	movs	r2, #0
 800058a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800058c:	4b22      	ldr	r3, [pc, #136]	@ (8000618 <MX_ADC1_Init+0xbc>)
 800058e:	2200      	movs	r2, #0
 8000590:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000592:	4b21      	ldr	r3, [pc, #132]	@ (8000618 <MX_ADC1_Init+0xbc>)
 8000594:	2204      	movs	r2, #4
 8000596:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000598:	4b1f      	ldr	r3, [pc, #124]	@ (8000618 <MX_ADC1_Init+0xbc>)
 800059a:	2200      	movs	r2, #0
 800059c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800059e:	4b1e      	ldr	r3, [pc, #120]	@ (8000618 <MX_ADC1_Init+0xbc>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000618 <MX_ADC1_Init+0xbc>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000618 <MX_ADC1_Init+0xbc>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b2:	4b19      	ldr	r3, [pc, #100]	@ (8000618 <MX_ADC1_Init+0xbc>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005b8:	4b17      	ldr	r3, [pc, #92]	@ (8000618 <MX_ADC1_Init+0xbc>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005be:	4b16      	ldr	r3, [pc, #88]	@ (8000618 <MX_ADC1_Init+0xbc>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005c6:	4b14      	ldr	r3, [pc, #80]	@ (8000618 <MX_ADC1_Init+0xbc>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005cc:	4b12      	ldr	r3, [pc, #72]	@ (8000618 <MX_ADC1_Init+0xbc>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d4:	4810      	ldr	r0, [pc, #64]	@ (8000618 <MX_ADC1_Init+0xbc>)
 80005d6:	f006 f83b 	bl	8006650 <HAL_ADC_Init>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80005e0:	f004 fce4 	bl	8004fac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80005e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000620 <MX_ADC1_Init+0xc4>)
 80005e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005e8:	2306      	movs	r3, #6
 80005ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80005ec:	2307      	movs	r3, #7
 80005ee:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005f0:	237f      	movs	r3, #127	@ 0x7f
 80005f2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005f4:	2304      	movs	r3, #4
 80005f6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005fc:	463b      	mov	r3, r7
 80005fe:	4619      	mov	r1, r3
 8000600:	4805      	ldr	r0, [pc, #20]	@ (8000618 <MX_ADC1_Init+0xbc>)
 8000602:	f006 fbf1 	bl	8006de8 <HAL_ADC_ConfigChannel>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800060c:	f004 fcce 	bl	8004fac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000610:	bf00      	nop
 8000612:	3718      	adds	r7, #24
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000070 	.word	0x20000070
 800061c:	50040000 	.word	0x50040000
 8000620:	3ef08000 	.word	0x3ef08000

08000624 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b09e      	sub	sp, #120	@ 0x78
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800063c:	f107 0310 	add.w	r3, r7, #16
 8000640:	2254      	movs	r2, #84	@ 0x54
 8000642:	2100      	movs	r1, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f00a facc 	bl	800abe2 <memset>
  if(adcHandle->Instance==ADC1)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a29      	ldr	r2, [pc, #164]	@ (80006f4 <HAL_ADC_MspInit+0xd0>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d14a      	bne.n	80006ea <HAL_ADC_MspInit+0xc6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000654:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000658:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800065a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800065e:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000664:	2301      	movs	r3, #1
 8000666:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000668:	2308      	movs	r3, #8
 800066a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800066c:	2307      	movs	r3, #7
 800066e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000674:	2302      	movs	r3, #2
 8000676:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000678:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800067c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800067e:	f107 0310 	add.w	r3, r7, #16
 8000682:	4618      	mov	r0, r3
 8000684:	f008 fbb0 	bl	8008de8 <HAL_RCCEx_PeriphCLKConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800068e:	f004 fc8d 	bl	8004fac <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000692:	4b19      	ldr	r3, [pc, #100]	@ (80006f8 <HAL_ADC_MspInit+0xd4>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000696:	4a18      	ldr	r2, [pc, #96]	@ (80006f8 <HAL_ADC_MspInit+0xd4>)
 8000698:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800069c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800069e:	4b16      	ldr	r3, [pc, #88]	@ (80006f8 <HAL_ADC_MspInit+0xd4>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006aa:	4b13      	ldr	r3, [pc, #76]	@ (80006f8 <HAL_ADC_MspInit+0xd4>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ae:	4a12      	ldr	r2, [pc, #72]	@ (80006f8 <HAL_ADC_MspInit+0xd4>)
 80006b0:	f043 0302 	orr.w	r3, r3, #2
 80006b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006b6:	4b10      	ldr	r3, [pc, #64]	@ (80006f8 <HAL_ADC_MspInit+0xd4>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ba:	f003 0302 	and.w	r3, r3, #2
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006c2:	2301      	movs	r3, #1
 80006c4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006c6:	230b      	movs	r3, #11
 80006c8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ce:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80006d2:	4619      	mov	r1, r3
 80006d4:	4809      	ldr	r0, [pc, #36]	@ (80006fc <HAL_ADC_MspInit+0xd8>)
 80006d6:	f007 fa1f 	bl	8007b18 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2100      	movs	r1, #0
 80006de:	2012      	movs	r0, #18
 80006e0:	f007 f9e3 	bl	8007aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80006e4:	2012      	movs	r0, #18
 80006e6:	f007 f9fc 	bl	8007ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ea:	bf00      	nop
 80006ec:	3778      	adds	r7, #120	@ 0x78
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	50040000 	.word	0x50040000
 80006f8:	40021000 	.word	0x40021000
 80006fc:	48000400 	.word	0x48000400

08000700 <aesroundkeys>:
u4_t AESKEY[11 * 16 / sizeof(u4_t)];

// generate 1+10 roundkeys for encryption with 128-bit key
// read 128-bit key from AESKEY in MSBF, generate roundkey words in place
static void aesroundkeys()
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
	int i;
	u4_t b;

	for (i = 0; i < 4; i++) {
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	e021      	b.n	8000750 <aesroundkeys+0x50>
		AESKEY[i] = swapmsbf(AESKEY[i]);
 800070c:	4a37      	ldr	r2, [pc, #220]	@ (80007ec <aesroundkeys+0xec>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000714:	061a      	lsls	r2, r3, #24
 8000716:	4935      	ldr	r1, [pc, #212]	@ (80007ec <aesroundkeys+0xec>)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800071e:	021b      	lsls	r3, r3, #8
 8000720:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8000724:	431a      	orrs	r2, r3
 8000726:	4931      	ldr	r1, [pc, #196]	@ (80007ec <aesroundkeys+0xec>)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800072e:	0a1b      	lsrs	r3, r3, #8
 8000730:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8000734:	431a      	orrs	r2, r3
 8000736:	492d      	ldr	r1, [pc, #180]	@ (80007ec <aesroundkeys+0xec>)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800073e:	0e1b      	lsrs	r3, r3, #24
 8000740:	431a      	orrs	r2, r3
 8000742:	492a      	ldr	r1, [pc, #168]	@ (80007ec <aesroundkeys+0xec>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i = 0; i < 4; i++) {
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	3301      	adds	r3, #1
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2b03      	cmp	r3, #3
 8000754:	ddda      	ble.n	800070c <aesroundkeys+0xc>
	}

	b = AESKEY[3];
 8000756:	4b25      	ldr	r3, [pc, #148]	@ (80007ec <aesroundkeys+0xec>)
 8000758:	68db      	ldr	r3, [r3, #12]
 800075a:	603b      	str	r3, [r7, #0]
	for (; i < 44; i++) {
 800075c:	e03c      	b.n	80007d8 <aesroundkeys+0xd8>
		if (i % 4 == 0) {
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	f003 0303 	and.w	r3, r3, #3
 8000764:	2b00      	cmp	r3, #0
 8000766:	d127      	bne.n	80007b8 <aesroundkeys+0xb8>
			// b = SubWord(RotWord(b)) xor Rcon[i/4]
			b = (AES_S[u1(b >> 16)] << 24) ^ (AES_S[u1(b >> 8)] << 16)
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	0c1b      	lsrs	r3, r3, #16
 800076c:	b2db      	uxtb	r3, r3
 800076e:	461a      	mov	r2, r3
 8000770:	4b1f      	ldr	r3, [pc, #124]	@ (80007f0 <aesroundkeys+0xf0>)
 8000772:	5c9b      	ldrb	r3, [r3, r2]
 8000774:	061a      	lsls	r2, r3, #24
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	0a1b      	lsrs	r3, r3, #8
 800077a:	b2db      	uxtb	r3, r3
 800077c:	4619      	mov	r1, r3
 800077e:	4b1c      	ldr	r3, [pc, #112]	@ (80007f0 <aesroundkeys+0xf0>)
 8000780:	5c5b      	ldrb	r3, [r3, r1]
 8000782:	041b      	lsls	r3, r3, #16
 8000784:	405a      	eors	r2, r3
					^ (AES_S[u1(b)] << 8) ^ (AES_S[b >> 24])
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	4619      	mov	r1, r3
 800078c:	4b18      	ldr	r3, [pc, #96]	@ (80007f0 <aesroundkeys+0xf0>)
 800078e:	5c5b      	ldrb	r3, [r3, r1]
 8000790:	021b      	lsls	r3, r3, #8
 8000792:	4053      	eors	r3, r2
 8000794:	683a      	ldr	r2, [r7, #0]
 8000796:	0e12      	lsrs	r2, r2, #24
 8000798:	4915      	ldr	r1, [pc, #84]	@ (80007f0 <aesroundkeys+0xf0>)
 800079a:	5c8a      	ldrb	r2, [r1, r2]
 800079c:	4053      	eors	r3, r2
 800079e:	461a      	mov	r2, r3
					^ AES_RCON[(i - 4) / 4];
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3b04      	subs	r3, #4
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	da00      	bge.n	80007aa <aesroundkeys+0xaa>
 80007a8:	3303      	adds	r3, #3
 80007aa:	109b      	asrs	r3, r3, #2
 80007ac:	4619      	mov	r1, r3
 80007ae:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <aesroundkeys+0xf4>)
 80007b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			b = (AES_S[u1(b >> 16)] << 24) ^ (AES_S[u1(b >> 8)] << 16)
 80007b4:	4053      	eors	r3, r2
 80007b6:	603b      	str	r3, [r7, #0]
		}
		AESKEY[i] = b ^= AESKEY[i - 4];
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	3b04      	subs	r3, #4
 80007bc:	4a0b      	ldr	r2, [pc, #44]	@ (80007ec <aesroundkeys+0xec>)
 80007be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007c2:	683a      	ldr	r2, [r7, #0]
 80007c4:	4053      	eors	r3, r2
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	4908      	ldr	r1, [pc, #32]	@ (80007ec <aesroundkeys+0xec>)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	683a      	ldr	r2, [r7, #0]
 80007ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (; i < 44; i++) {
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	3301      	adds	r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2b2b      	cmp	r3, #43	@ 0x2b
 80007dc:	ddbf      	ble.n	800075e <aesroundkeys+0x5e>
	}
}
 80007de:	bf00      	nop
 80007e0:	bf00      	nop
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	200000e4 	.word	0x200000e4
 80007f0:	0800af34 	.word	0x0800af34
 80007f4:	0800af0c 	.word	0x0800af0c

080007f8 <os_aes>:

u4_t os_aes(u1_t mode, xref2u1_t buf, u2_t len)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08c      	sub	sp, #48	@ 0x30
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	6039      	str	r1, [r7, #0]
 8000802:	71fb      	strb	r3, [r7, #7]
 8000804:	4613      	mov	r3, r2
 8000806:	80bb      	strh	r3, [r7, #4]

	aesroundkeys();
 8000808:	f7ff ff7a 	bl	8000700 <aesroundkeys>

	if (mode & AES_MICNOAUX) {
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	2b00      	cmp	r3, #0
 8000814:	d010      	beq.n	8000838 <os_aes+0x40>
		AESAUX[0] = AESAUX[1] = AESAUX[2] = AESAUX[3] = 0;
 8000816:	4b5a      	ldr	r3, [pc, #360]	@ (8000980 <os_aes+0x188>)
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	4b58      	ldr	r3, [pc, #352]	@ (8000980 <os_aes+0x188>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	4a57      	ldr	r2, [pc, #348]	@ (8000980 <os_aes+0x188>)
 8000822:	6093      	str	r3, [r2, #8]
 8000824:	4b56      	ldr	r3, [pc, #344]	@ (8000980 <os_aes+0x188>)
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	4a55      	ldr	r2, [pc, #340]	@ (8000980 <os_aes+0x188>)
 800082a:	6053      	str	r3, [r2, #4]
 800082c:	4b54      	ldr	r3, [pc, #336]	@ (8000980 <os_aes+0x188>)
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	4a53      	ldr	r2, [pc, #332]	@ (8000980 <os_aes+0x188>)
 8000832:	6013      	str	r3, [r2, #0]
 8000834:	f000 bc97 	b.w	8001166 <os_aes+0x96e>
	} else {
		AESAUX[0] = swapmsbf(AESAUX[0]);
 8000838:	4b51      	ldr	r3, [pc, #324]	@ (8000980 <os_aes+0x188>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	061a      	lsls	r2, r3, #24
 800083e:	4b50      	ldr	r3, [pc, #320]	@ (8000980 <os_aes+0x188>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	021b      	lsls	r3, r3, #8
 8000844:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8000848:	431a      	orrs	r2, r3
 800084a:	4b4d      	ldr	r3, [pc, #308]	@ (8000980 <os_aes+0x188>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	0a1b      	lsrs	r3, r3, #8
 8000850:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8000854:	431a      	orrs	r2, r3
 8000856:	4b4a      	ldr	r3, [pc, #296]	@ (8000980 <os_aes+0x188>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	0e1b      	lsrs	r3, r3, #24
 800085c:	4313      	orrs	r3, r2
 800085e:	4a48      	ldr	r2, [pc, #288]	@ (8000980 <os_aes+0x188>)
 8000860:	6013      	str	r3, [r2, #0]
		AESAUX[1] = swapmsbf(AESAUX[1]);
 8000862:	4b47      	ldr	r3, [pc, #284]	@ (8000980 <os_aes+0x188>)
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	061a      	lsls	r2, r3, #24
 8000868:	4b45      	ldr	r3, [pc, #276]	@ (8000980 <os_aes+0x188>)
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8000872:	431a      	orrs	r2, r3
 8000874:	4b42      	ldr	r3, [pc, #264]	@ (8000980 <os_aes+0x188>)
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	0a1b      	lsrs	r3, r3, #8
 800087a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800087e:	431a      	orrs	r2, r3
 8000880:	4b3f      	ldr	r3, [pc, #252]	@ (8000980 <os_aes+0x188>)
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	0e1b      	lsrs	r3, r3, #24
 8000886:	4313      	orrs	r3, r2
 8000888:	4a3d      	ldr	r2, [pc, #244]	@ (8000980 <os_aes+0x188>)
 800088a:	6053      	str	r3, [r2, #4]
		AESAUX[2] = swapmsbf(AESAUX[2]);
 800088c:	4b3c      	ldr	r3, [pc, #240]	@ (8000980 <os_aes+0x188>)
 800088e:	689b      	ldr	r3, [r3, #8]
 8000890:	061a      	lsls	r2, r3, #24
 8000892:	4b3b      	ldr	r3, [pc, #236]	@ (8000980 <os_aes+0x188>)
 8000894:	689b      	ldr	r3, [r3, #8]
 8000896:	021b      	lsls	r3, r3, #8
 8000898:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800089c:	431a      	orrs	r2, r3
 800089e:	4b38      	ldr	r3, [pc, #224]	@ (8000980 <os_aes+0x188>)
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	0a1b      	lsrs	r3, r3, #8
 80008a4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80008a8:	431a      	orrs	r2, r3
 80008aa:	4b35      	ldr	r3, [pc, #212]	@ (8000980 <os_aes+0x188>)
 80008ac:	689b      	ldr	r3, [r3, #8]
 80008ae:	0e1b      	lsrs	r3, r3, #24
 80008b0:	4313      	orrs	r3, r2
 80008b2:	4a33      	ldr	r2, [pc, #204]	@ (8000980 <os_aes+0x188>)
 80008b4:	6093      	str	r3, [r2, #8]
		AESAUX[3] = swapmsbf(AESAUX[3]);
 80008b6:	4b32      	ldr	r3, [pc, #200]	@ (8000980 <os_aes+0x188>)
 80008b8:	68db      	ldr	r3, [r3, #12]
 80008ba:	061a      	lsls	r2, r3, #24
 80008bc:	4b30      	ldr	r3, [pc, #192]	@ (8000980 <os_aes+0x188>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	021b      	lsls	r3, r3, #8
 80008c2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80008c6:	431a      	orrs	r2, r3
 80008c8:	4b2d      	ldr	r3, [pc, #180]	@ (8000980 <os_aes+0x188>)
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	0a1b      	lsrs	r3, r3, #8
 80008ce:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80008d2:	431a      	orrs	r2, r3
 80008d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000980 <os_aes+0x188>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	0e1b      	lsrs	r3, r3, #24
 80008da:	4313      	orrs	r3, r2
 80008dc:	4a28      	ldr	r2, [pc, #160]	@ (8000980 <os_aes+0x188>)
 80008de:	60d3      	str	r3, [r2, #12]
	}

	while ((signed char) len > 0) {
 80008e0:	f000 bc41 	b.w	8001166 <os_aes+0x96e>
		u4_t a0, a1, a2, a3;
		u4_t t0, t1, t2, t3;
		u4_t *ki, *ke;

		// load input block
		if ((mode & AES_CTR)
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d109      	bne.n	8000902 <os_aes+0x10a>
				|| ((mode & AES_MIC) && (mode & AES_MICNOAUX) == 0)) { // load CTR block or first MIC block
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	f003 0302 	and.w	r3, r3, #2
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d011      	beq.n	800091c <os_aes+0x124>
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	f003 0308 	and.w	r3, r3, #8
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d10c      	bne.n	800091c <os_aes+0x124>
			a0 = AESAUX[0];
 8000902:	4b1f      	ldr	r3, [pc, #124]	@ (8000980 <os_aes+0x188>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	62fb      	str	r3, [r7, #44]	@ 0x2c
			a1 = AESAUX[1];
 8000908:	4b1d      	ldr	r3, [pc, #116]	@ (8000980 <os_aes+0x188>)
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	62bb      	str	r3, [r7, #40]	@ 0x28
			a2 = AESAUX[2];
 800090e:	4b1c      	ldr	r3, [pc, #112]	@ (8000980 <os_aes+0x188>)
 8000910:	689b      	ldr	r3, [r3, #8]
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
			a3 = AESAUX[3];
 8000914:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <os_aes+0x188>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	623b      	str	r3, [r7, #32]
 800091a:	e062      	b.n	80009e2 <os_aes+0x1ea>
		} else if ((mode & AES_MIC) && len <= 16) { // last MIC block
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	2b00      	cmp	r3, #0
 8000924:	d016      	beq.n	8000954 <os_aes+0x15c>
 8000926:	88bb      	ldrh	r3, [r7, #4]
 8000928:	2b10      	cmp	r3, #16
 800092a:	d813      	bhi.n	8000954 <os_aes+0x15c>
			a0 = a1 = a2 = a3 = 0; // load null block
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
 8000930:	6a3b      	ldr	r3, [r7, #32]
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
 8000934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000936:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800093a:	62fb      	str	r3, [r7, #44]	@ 0x2c
			mode |= ((len == 16) ? 1 : 2) << 4; // set MICSUB: CMAC subkey K1 or K2
 800093c:	88bb      	ldrh	r3, [r7, #4]
 800093e:	2b10      	cmp	r3, #16
 8000940:	d101      	bne.n	8000946 <os_aes+0x14e>
 8000942:	2210      	movs	r2, #16
 8000944:	e000      	b.n	8000948 <os_aes+0x150>
 8000946:	2220      	movs	r2, #32
 8000948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094c:	4313      	orrs	r3, r2
 800094e:	b25b      	sxtb	r3, r3
 8000950:	71fb      	strb	r3, [r7, #7]
 8000952:	e046      	b.n	80009e2 <os_aes+0x1ea>
		} else
			LOADDATA: { // load data block (partially)
 8000954:	bf00      	nop
				for (t0 = 0; t0 < 16; t0++) {
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
 800095a:	e026      	b.n	80009aa <os_aes+0x1b2>
					t1 =
							(t1 << 8)
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	021a      	lsls	r2, r3, #8
									| ((t0 < len) ? buf[t0] :
 8000960:	88bb      	ldrh	r3, [r7, #4]
 8000962:	69f9      	ldr	r1, [r7, #28]
 8000964:	4299      	cmp	r1, r3
 8000966:	d204      	bcs.n	8000972 <os_aes+0x17a>
 8000968:	6839      	ldr	r1, [r7, #0]
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	440b      	add	r3, r1
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	e009      	b.n	8000986 <os_aes+0x18e>
										(t0 == len) ? 0x80 : 0x00);
 8000972:	88bb      	ldrh	r3, [r7, #4]
									| ((t0 < len) ? buf[t0] :
 8000974:	69f9      	ldr	r1, [r7, #28]
 8000976:	4299      	cmp	r1, r3
 8000978:	d104      	bne.n	8000984 <os_aes+0x18c>
 800097a:	2380      	movs	r3, #128	@ 0x80
 800097c:	e003      	b.n	8000986 <os_aes+0x18e>
 800097e:	bf00      	nop
 8000980:	200000d4 	.word	0x200000d4
 8000984:	2300      	movs	r3, #0
					t1 =
 8000986:	4313      	orrs	r3, r2
 8000988:	61bb      	str	r3, [r7, #24]
					if ((t0 & 3) == 3) {
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	f003 0303 	and.w	r3, r3, #3
 8000990:	2b03      	cmp	r3, #3
 8000992:	d107      	bne.n	80009a4 <os_aes+0x1ac>
						a0 = a1;
 8000994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000996:	62fb      	str	r3, [r7, #44]	@ 0x2c
						a1 = a2;
 8000998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800099a:	62bb      	str	r3, [r7, #40]	@ 0x28
						a2 = a3;
 800099c:	6a3b      	ldr	r3, [r7, #32]
 800099e:	627b      	str	r3, [r7, #36]	@ 0x24
						a3 = t1;
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	623b      	str	r3, [r7, #32]
				for (t0 = 0; t0 < 16; t0++) {
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	3301      	adds	r3, #1
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	2b0f      	cmp	r3, #15
 80009ae:	d9d5      	bls.n	800095c <os_aes+0x164>
					}
				}
				if (mode & AES_MIC) {
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d013      	beq.n	80009e2 <os_aes+0x1ea>
					a0 ^= AESAUX[0];
 80009ba:	4ba0      	ldr	r3, [pc, #640]	@ (8000c3c <os_aes+0x444>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80009c0:	4053      	eors	r3, r2
 80009c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
					a1 ^= AESAUX[1];
 80009c4:	4b9d      	ldr	r3, [pc, #628]	@ (8000c3c <os_aes+0x444>)
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80009ca:	4053      	eors	r3, r2
 80009cc:	62bb      	str	r3, [r7, #40]	@ 0x28
					a2 ^= AESAUX[2];
 80009ce:	4b9b      	ldr	r3, [pc, #620]	@ (8000c3c <os_aes+0x444>)
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009d4:	4053      	eors	r3, r2
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
					a3 ^= AESAUX[3];
 80009d8:	4b98      	ldr	r3, [pc, #608]	@ (8000c3c <os_aes+0x444>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	6a3a      	ldr	r2, [r7, #32]
 80009de:	4053      	eors	r3, r2
 80009e0:	623b      	str	r3, [r7, #32]
				}
			}

		// perform AES encryption on block in a0-a3
		ki = AESKEY;
 80009e2:	4b97      	ldr	r3, [pc, #604]	@ (8000c40 <os_aes+0x448>)
 80009e4:	617b      	str	r3, [r7, #20]
		ke = ki + 8 * 4;
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	3380      	adds	r3, #128	@ 0x80
 80009ea:	613b      	str	r3, [r7, #16]
		a0 ^= ki[0];
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80009f2:	4053      	eors	r3, r2
 80009f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		a1 ^= ki[1];
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	3304      	adds	r3, #4
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80009fe:	4053      	eors	r3, r2
 8000a00:	62bb      	str	r3, [r7, #40]	@ 0x28
		a2 ^= ki[2];
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	3308      	adds	r3, #8
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a0a:	4053      	eors	r3, r2
 8000a0c:	627b      	str	r3, [r7, #36]	@ 0x24
		a3 ^= ki[3];
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	330c      	adds	r3, #12
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	6a3a      	ldr	r2, [r7, #32]
 8000a16:	4053      	eors	r3, r2
 8000a18:	623b      	str	r3, [r7, #32]
		do {
			AES_key4(t1, t2, t3, t0, 4);
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	61bb      	str	r3, [r7, #24]
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	69db      	ldr	r3, [r3, #28]
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	691b      	ldr	r3, [r3, #16]
 8000a30:	61fb      	str	r3, [r7, #28]
			AES_expr4(t1, t2, t3, t0, a0);
 8000a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	461a      	mov	r2, r3
 8000a38:	4b82      	ldr	r3, [pc, #520]	@ (8000c44 <os_aes+0x44c>)
 8000a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a3e:	69ba      	ldr	r2, [r7, #24]
 8000a40:	4053      	eors	r3, r2
 8000a42:	61bb      	str	r3, [r7, #24]
 8000a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a46:	0a1b      	lsrs	r3, r3, #8
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	4b7e      	ldr	r3, [pc, #504]	@ (8000c48 <os_aes+0x450>)
 8000a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	4053      	eors	r3, r2
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a5a:	0c1b      	lsrs	r3, r3, #16
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4b7a      	ldr	r3, [pc, #488]	@ (8000c4c <os_aes+0x454>)
 8000a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	4053      	eors	r3, r2
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a6e:	0e1b      	lsrs	r3, r3, #24
 8000a70:	4a77      	ldr	r2, [pc, #476]	@ (8000c50 <os_aes+0x458>)
 8000a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a76:	69fa      	ldr	r2, [r7, #28]
 8000a78:	4053      	eors	r3, r2
 8000a7a:	61fb      	str	r3, [r7, #28]
			AES_expr4(t2, t3, t0, t1, a1);
 8000a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b70      	ldr	r3, [pc, #448]	@ (8000c44 <os_aes+0x44c>)
 8000a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a88:	68fa      	ldr	r2, [r7, #12]
 8000a8a:	4053      	eors	r3, r2
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a90:	0a1b      	lsrs	r3, r3, #8
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b6c      	ldr	r3, [pc, #432]	@ (8000c48 <os_aes+0x450>)
 8000a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a9c:	68ba      	ldr	r2, [r7, #8]
 8000a9e:	4053      	eors	r3, r2
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aa4:	0c1b      	lsrs	r3, r3, #16
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4b68      	ldr	r3, [pc, #416]	@ (8000c4c <os_aes+0x454>)
 8000aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ab0:	69fa      	ldr	r2, [r7, #28]
 8000ab2:	4053      	eors	r3, r2
 8000ab4:	61fb      	str	r3, [r7, #28]
 8000ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ab8:	0e1b      	lsrs	r3, r3, #24
 8000aba:	4a65      	ldr	r2, [pc, #404]	@ (8000c50 <os_aes+0x458>)
 8000abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac0:	69ba      	ldr	r2, [r7, #24]
 8000ac2:	4053      	eors	r3, r2
 8000ac4:	61bb      	str	r3, [r7, #24]
			AES_expr4(t3, t0, t1, t2, a2);
 8000ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	461a      	mov	r2, r3
 8000acc:	4b5d      	ldr	r3, [pc, #372]	@ (8000c44 <os_aes+0x44c>)
 8000ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ad2:	68ba      	ldr	r2, [r7, #8]
 8000ad4:	4053      	eors	r3, r2
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ada:	0a1b      	lsrs	r3, r3, #8
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	461a      	mov	r2, r3
 8000ae0:	4b59      	ldr	r3, [pc, #356]	@ (8000c48 <os_aes+0x450>)
 8000ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ae6:	69fa      	ldr	r2, [r7, #28]
 8000ae8:	4053      	eors	r3, r2
 8000aea:	61fb      	str	r3, [r7, #28]
 8000aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aee:	0c1b      	lsrs	r3, r3, #16
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	461a      	mov	r2, r3
 8000af4:	4b55      	ldr	r3, [pc, #340]	@ (8000c4c <os_aes+0x454>)
 8000af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000afa:	69ba      	ldr	r2, [r7, #24]
 8000afc:	4053      	eors	r3, r2
 8000afe:	61bb      	str	r3, [r7, #24]
 8000b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b02:	0e1b      	lsrs	r3, r3, #24
 8000b04:	4a52      	ldr	r2, [pc, #328]	@ (8000c50 <os_aes+0x458>)
 8000b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	4053      	eors	r3, r2
 8000b0e:	60fb      	str	r3, [r7, #12]
			AES_expr4(t0, t1, t2, t3, a3);
 8000b10:	6a3b      	ldr	r3, [r7, #32]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b4b      	ldr	r3, [pc, #300]	@ (8000c44 <os_aes+0x44c>)
 8000b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b1c:	69fa      	ldr	r2, [r7, #28]
 8000b1e:	4053      	eors	r3, r2
 8000b20:	61fb      	str	r3, [r7, #28]
 8000b22:	6a3b      	ldr	r3, [r7, #32]
 8000b24:	0a1b      	lsrs	r3, r3, #8
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b47      	ldr	r3, [pc, #284]	@ (8000c48 <os_aes+0x450>)
 8000b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b30:	69ba      	ldr	r2, [r7, #24]
 8000b32:	4053      	eors	r3, r2
 8000b34:	61bb      	str	r3, [r7, #24]
 8000b36:	6a3b      	ldr	r3, [r7, #32]
 8000b38:	0c1b      	lsrs	r3, r3, #16
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b43      	ldr	r3, [pc, #268]	@ (8000c4c <os_aes+0x454>)
 8000b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b44:	68fa      	ldr	r2, [r7, #12]
 8000b46:	4053      	eors	r3, r2
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	6a3b      	ldr	r3, [r7, #32]
 8000b4c:	0e1b      	lsrs	r3, r3, #24
 8000b4e:	4a40      	ldr	r2, [pc, #256]	@ (8000c50 <os_aes+0x458>)
 8000b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b54:	68ba      	ldr	r2, [r7, #8]
 8000b56:	4053      	eors	r3, r2
 8000b58:	60bb      	str	r3, [r7, #8]

			AES_key4(a1, a2, a3, a0, 8);
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b64:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b6a:	623b      	str	r3, [r7, #32]
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	6a1b      	ldr	r3, [r3, #32]
 8000b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
			AES_expr4(a1, a2, a3, a0, t0);
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	461a      	mov	r2, r3
 8000b78:	4b32      	ldr	r3, [pc, #200]	@ (8000c44 <os_aes+0x44c>)
 8000b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000b80:	4053      	eors	r3, r2
 8000b82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	0a1b      	lsrs	r3, r3, #8
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	4b2e      	ldr	r3, [pc, #184]	@ (8000c48 <os_aes+0x450>)
 8000b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b94:	4053      	eors	r3, r2
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	0c1b      	lsrs	r3, r3, #16
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	4b2a      	ldr	r3, [pc, #168]	@ (8000c4c <os_aes+0x454>)
 8000ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ba6:	6a3a      	ldr	r2, [r7, #32]
 8000ba8:	4053      	eors	r3, r2
 8000baa:	623b      	str	r3, [r7, #32]
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	0e1b      	lsrs	r3, r3, #24
 8000bb0:	4a27      	ldr	r2, [pc, #156]	@ (8000c50 <os_aes+0x458>)
 8000bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000bb8:	4053      	eors	r3, r2
 8000bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
			AES_expr4(a2, a3, a0, a1, t1);
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b20      	ldr	r3, [pc, #128]	@ (8000c44 <os_aes+0x44c>)
 8000bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bca:	4053      	eors	r3, r2
 8000bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c48 <os_aes+0x450>)
 8000bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bdc:	6a3a      	ldr	r2, [r7, #32]
 8000bde:	4053      	eors	r3, r2
 8000be0:	623b      	str	r3, [r7, #32]
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	0c1b      	lsrs	r3, r3, #16
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b18      	ldr	r3, [pc, #96]	@ (8000c4c <os_aes+0x454>)
 8000bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000bf2:	4053      	eors	r3, r2
 8000bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	0e1b      	lsrs	r3, r3, #24
 8000bfa:	4a15      	ldr	r2, [pc, #84]	@ (8000c50 <os_aes+0x458>)
 8000bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c02:	4053      	eors	r3, r2
 8000c04:	62bb      	str	r3, [r7, #40]	@ 0x28
			AES_expr4(a3, a0, a1, a2, t2);
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c44 <os_aes+0x44c>)
 8000c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c12:	6a3a      	ldr	r2, [r7, #32]
 8000c14:	4053      	eors	r3, r2
 8000c16:	623b      	str	r3, [r7, #32]
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	0a1b      	lsrs	r3, r3, #8
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	461a      	mov	r2, r3
 8000c20:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <os_aes+0x450>)
 8000c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c28:	4053      	eors	r3, r2
 8000c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	0c1b      	lsrs	r3, r3, #16
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	461a      	mov	r2, r3
 8000c34:	4b05      	ldr	r3, [pc, #20]	@ (8000c4c <os_aes+0x454>)
 8000c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c3a:	e00b      	b.n	8000c54 <os_aes+0x45c>
 8000c3c:	200000d4 	.word	0x200000d4
 8000c40:	200000e4 	.word	0x200000e4
 8000c44:	0800bc34 	.word	0x0800bc34
 8000c48:	0800b834 	.word	0x0800b834
 8000c4c:	0800b434 	.word	0x0800b434
 8000c50:	0800b034 	.word	0x0800b034
 8000c54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c56:	4053      	eors	r3, r2
 8000c58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	0e1b      	lsrs	r3, r3, #24
 8000c5e:	4aa1      	ldr	r2, [pc, #644]	@ (8000ee4 <os_aes+0x6ec>)
 8000c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c66:	4053      	eors	r3, r2
 8000c68:	627b      	str	r3, [r7, #36]	@ 0x24
			AES_expr4(a0, a1, a2, a3, t3);
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	461a      	mov	r2, r3
 8000c70:	4b9d      	ldr	r3, [pc, #628]	@ (8000ee8 <os_aes+0x6f0>)
 8000c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c78:	4053      	eors	r3, r2
 8000c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	0a1b      	lsrs	r3, r3, #8
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	461a      	mov	r2, r3
 8000c84:	4b99      	ldr	r3, [pc, #612]	@ (8000eec <os_aes+0x6f4>)
 8000c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c8c:	4053      	eors	r3, r2
 8000c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	0c1b      	lsrs	r3, r3, #16
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	461a      	mov	r2, r3
 8000c98:	4b95      	ldr	r3, [pc, #596]	@ (8000ef0 <os_aes+0x6f8>)
 8000c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ca0:	4053      	eors	r3, r2
 8000ca2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	0e1b      	lsrs	r3, r3, #24
 8000ca8:	4a8e      	ldr	r2, [pc, #568]	@ (8000ee4 <os_aes+0x6ec>)
 8000caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cae:	6a3a      	ldr	r2, [r7, #32]
 8000cb0:	4053      	eors	r3, r2
 8000cb2:	623b      	str	r3, [r7, #32]
		} while ((ki += 8) < ke);
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	3320      	adds	r3, #32
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	697a      	ldr	r2, [r7, #20]
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	f4ff aeab 	bcc.w	8000a1a <os_aes+0x222>

		AES_key4(t1, t2, t3, t0, 4);
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	695b      	ldr	r3, [r3, #20]
 8000cc8:	61bb      	str	r3, [r7, #24]
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	69db      	ldr	r3, [r3, #28]
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	691b      	ldr	r3, [r3, #16]
 8000cda:	61fb      	str	r3, [r7, #28]
		AES_expr4(t1, t2, t3, t0, a0);
 8000cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b81      	ldr	r3, [pc, #516]	@ (8000ee8 <os_aes+0x6f0>)
 8000ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	4053      	eors	r3, r2
 8000cec:	61bb      	str	r3, [r7, #24]
 8000cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cf0:	0a1b      	lsrs	r3, r3, #8
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b7d      	ldr	r3, [pc, #500]	@ (8000eec <os_aes+0x6f4>)
 8000cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cfc:	68fa      	ldr	r2, [r7, #12]
 8000cfe:	4053      	eors	r3, r2
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d04:	0c1b      	lsrs	r3, r3, #16
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b79      	ldr	r3, [pc, #484]	@ (8000ef0 <os_aes+0x6f8>)
 8000d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d10:	68ba      	ldr	r2, [r7, #8]
 8000d12:	4053      	eors	r3, r2
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d18:	0e1b      	lsrs	r3, r3, #24
 8000d1a:	4a72      	ldr	r2, [pc, #456]	@ (8000ee4 <os_aes+0x6ec>)
 8000d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d20:	69fa      	ldr	r2, [r7, #28]
 8000d22:	4053      	eors	r3, r2
 8000d24:	61fb      	str	r3, [r7, #28]
		AES_expr4(t2, t3, t0, t1, a1);
 8000d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b6e      	ldr	r3, [pc, #440]	@ (8000ee8 <os_aes+0x6f0>)
 8000d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	4053      	eors	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d3a:	0a1b      	lsrs	r3, r3, #8
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	461a      	mov	r2, r3
 8000d40:	4b6a      	ldr	r3, [pc, #424]	@ (8000eec <os_aes+0x6f4>)
 8000d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	4053      	eors	r3, r2
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d4e:	0c1b      	lsrs	r3, r3, #16
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	461a      	mov	r2, r3
 8000d54:	4b66      	ldr	r3, [pc, #408]	@ (8000ef0 <os_aes+0x6f8>)
 8000d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d5a:	69fa      	ldr	r2, [r7, #28]
 8000d5c:	4053      	eors	r3, r2
 8000d5e:	61fb      	str	r3, [r7, #28]
 8000d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d62:	0e1b      	lsrs	r3, r3, #24
 8000d64:	4a5f      	ldr	r2, [pc, #380]	@ (8000ee4 <os_aes+0x6ec>)
 8000d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4053      	eors	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
		AES_expr4(t3, t0, t1, t2, a2);
 8000d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b5c      	ldr	r3, [pc, #368]	@ (8000ee8 <os_aes+0x6f0>)
 8000d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d7c:	68ba      	ldr	r2, [r7, #8]
 8000d7e:	4053      	eors	r3, r2
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d84:	0a1b      	lsrs	r3, r3, #8
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b58      	ldr	r3, [pc, #352]	@ (8000eec <os_aes+0x6f4>)
 8000d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d90:	69fa      	ldr	r2, [r7, #28]
 8000d92:	4053      	eors	r3, r2
 8000d94:	61fb      	str	r3, [r7, #28]
 8000d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d98:	0c1b      	lsrs	r3, r3, #16
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b54      	ldr	r3, [pc, #336]	@ (8000ef0 <os_aes+0x6f8>)
 8000da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4053      	eors	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
 8000daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dac:	0e1b      	lsrs	r3, r3, #24
 8000dae:	4a4d      	ldr	r2, [pc, #308]	@ (8000ee4 <os_aes+0x6ec>)
 8000db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	4053      	eors	r3, r2
 8000db8:	60fb      	str	r3, [r7, #12]
		AES_expr4(t0, t1, t2, t3, a3);
 8000dba:	6a3b      	ldr	r3, [r7, #32]
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	4b49      	ldr	r3, [pc, #292]	@ (8000ee8 <os_aes+0x6f0>)
 8000dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc6:	69fa      	ldr	r2, [r7, #28]
 8000dc8:	4053      	eors	r3, r2
 8000dca:	61fb      	str	r3, [r7, #28]
 8000dcc:	6a3b      	ldr	r3, [r7, #32]
 8000dce:	0a1b      	lsrs	r3, r3, #8
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	4b45      	ldr	r3, [pc, #276]	@ (8000eec <os_aes+0x6f4>)
 8000dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4053      	eors	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
 8000de0:	6a3b      	ldr	r3, [r7, #32]
 8000de2:	0c1b      	lsrs	r3, r3, #16
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	461a      	mov	r2, r3
 8000de8:	4b41      	ldr	r3, [pc, #260]	@ (8000ef0 <os_aes+0x6f8>)
 8000dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	4053      	eors	r3, r2
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	6a3b      	ldr	r3, [r7, #32]
 8000df6:	0e1b      	lsrs	r3, r3, #24
 8000df8:	4a3a      	ldr	r2, [pc, #232]	@ (8000ee4 <os_aes+0x6ec>)
 8000dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	4053      	eors	r3, r2
 8000e02:	60bb      	str	r3, [r7, #8]

		AES_expr(a0, t0, t1, t2, t3, 8);
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	6a1b      	ldr	r3, [r3, #32]
 8000e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	0e1b      	lsrs	r3, r3, #24
 8000e0e:	4a39      	ldr	r2, [pc, #228]	@ (8000ef4 <os_aes+0x6fc>)
 8000e10:	5cd3      	ldrb	r3, [r2, r3]
 8000e12:	061b      	lsls	r3, r3, #24
 8000e14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e16:	4053      	eors	r3, r2
 8000e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	0c1b      	lsrs	r3, r3, #16
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b34      	ldr	r3, [pc, #208]	@ (8000ef4 <os_aes+0x6fc>)
 8000e24:	5c9b      	ldrb	r3, [r3, r2]
 8000e26:	041b      	lsls	r3, r3, #16
 8000e28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e2a:	4053      	eors	r3, r2
 8000e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b2f      	ldr	r3, [pc, #188]	@ (8000ef4 <os_aes+0x6fc>)
 8000e38:	5c9b      	ldrb	r3, [r3, r2]
 8000e3a:	021b      	lsls	r3, r3, #8
 8000e3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e3e:	4053      	eors	r3, r2
 8000e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	461a      	mov	r2, r3
 8000e48:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef4 <os_aes+0x6fc>)
 8000e4a:	5c9b      	ldrb	r3, [r3, r2]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e50:	4053      	eors	r3, r2
 8000e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
		AES_expr(a1, t1, t2, t3, t0, 9);
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	0e1b      	lsrs	r3, r3, #24
 8000e5e:	4a25      	ldr	r2, [pc, #148]	@ (8000ef4 <os_aes+0x6fc>)
 8000e60:	5cd3      	ldrb	r3, [r2, r3]
 8000e62:	061b      	lsls	r3, r3, #24
 8000e64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e66:	4053      	eors	r3, r2
 8000e68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	0c1b      	lsrs	r3, r3, #16
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b20      	ldr	r3, [pc, #128]	@ (8000ef4 <os_aes+0x6fc>)
 8000e74:	5c9b      	ldrb	r3, [r3, r2]
 8000e76:	041b      	lsls	r3, r3, #16
 8000e78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e7a:	4053      	eors	r3, r2
 8000e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef4 <os_aes+0x6fc>)
 8000e88:	5c9b      	ldrb	r3, [r3, r2]
 8000e8a:	021b      	lsls	r3, r3, #8
 8000e8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e8e:	4053      	eors	r3, r2
 8000e90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	461a      	mov	r2, r3
 8000e98:	4b16      	ldr	r3, [pc, #88]	@ (8000ef4 <os_aes+0x6fc>)
 8000e9a:	5c9b      	ldrb	r3, [r3, r2]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ea0:	4053      	eors	r3, r2
 8000ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
		AES_expr(a2, t2, t3, t0, t1, 10);
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ea8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	0e1b      	lsrs	r3, r3, #24
 8000eae:	4a11      	ldr	r2, [pc, #68]	@ (8000ef4 <os_aes+0x6fc>)
 8000eb0:	5cd3      	ldrb	r3, [r2, r3]
 8000eb2:	061b      	lsls	r3, r3, #24
 8000eb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000eb6:	4053      	eors	r3, r2
 8000eb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	0c1b      	lsrs	r3, r3, #16
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef4 <os_aes+0x6fc>)
 8000ec4:	5c9b      	ldrb	r3, [r3, r2]
 8000ec6:	041b      	lsls	r3, r3, #16
 8000ec8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000eca:	4053      	eors	r3, r2
 8000ecc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b07      	ldr	r3, [pc, #28]	@ (8000ef4 <os_aes+0x6fc>)
 8000ed8:	5c9b      	ldrb	r3, [r3, r2]
 8000eda:	021b      	lsls	r3, r3, #8
 8000edc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ede:	4053      	eors	r3, r2
 8000ee0:	e00a      	b.n	8000ef8 <os_aes+0x700>
 8000ee2:	bf00      	nop
 8000ee4:	0800b034 	.word	0x0800b034
 8000ee8:	0800bc34 	.word	0x0800bc34
 8000eec:	0800b834 	.word	0x0800b834
 8000ef0:	0800b434 	.word	0x0800b434
 8000ef4:	0800af34 	.word	0x0800af34
 8000ef8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	461a      	mov	r2, r3
 8000f00:	4b5f      	ldr	r3, [pc, #380]	@ (8001080 <os_aes+0x888>)
 8000f02:	5c9b      	ldrb	r3, [r3, r2]
 8000f04:	461a      	mov	r2, r3
 8000f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f08:	4053      	eors	r3, r2
 8000f0a:	627b      	str	r3, [r7, #36]	@ 0x24
		AES_expr(a3, t3, t0, t1, t2, 11);
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f10:	623b      	str	r3, [r7, #32]
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	0e1b      	lsrs	r3, r3, #24
 8000f16:	4a5a      	ldr	r2, [pc, #360]	@ (8001080 <os_aes+0x888>)
 8000f18:	5cd3      	ldrb	r3, [r2, r3]
 8000f1a:	061b      	lsls	r3, r3, #24
 8000f1c:	6a3a      	ldr	r2, [r7, #32]
 8000f1e:	4053      	eors	r3, r2
 8000f20:	623b      	str	r3, [r7, #32]
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	0c1b      	lsrs	r3, r3, #16
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b55      	ldr	r3, [pc, #340]	@ (8001080 <os_aes+0x888>)
 8000f2c:	5c9b      	ldrb	r3, [r3, r2]
 8000f2e:	041b      	lsls	r3, r3, #16
 8000f30:	6a3a      	ldr	r2, [r7, #32]
 8000f32:	4053      	eors	r3, r2
 8000f34:	623b      	str	r3, [r7, #32]
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	0a1b      	lsrs	r3, r3, #8
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b50      	ldr	r3, [pc, #320]	@ (8001080 <os_aes+0x888>)
 8000f40:	5c9b      	ldrb	r3, [r3, r2]
 8000f42:	021b      	lsls	r3, r3, #8
 8000f44:	6a3a      	ldr	r2, [r7, #32]
 8000f46:	4053      	eors	r3, r2
 8000f48:	623b      	str	r3, [r7, #32]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4b4b      	ldr	r3, [pc, #300]	@ (8001080 <os_aes+0x888>)
 8000f52:	5c9b      	ldrb	r3, [r3, r2]
 8000f54:	461a      	mov	r2, r3
 8000f56:	6a3b      	ldr	r3, [r7, #32]
 8000f58:	4053      	eors	r3, r2
 8000f5a:	623b      	str	r3, [r7, #32]
		// result of AES encryption in a0-a3

		if (mode & AES_MIC) {
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d056      	beq.n	8001014 <os_aes+0x81c>
			if ((t1 = (mode & AES_MICSUB) >> 4) != 0) { // last block
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	111b      	asrs	r3, r3, #4
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	61bb      	str	r3, [r7, #24]
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d041      	beq.n	8000ffa <os_aes+0x802>
				do {
					// compute CMAC subkey K1 and K2
					t0 = a0 >> 31; // save MSB
 8000f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f78:	0fdb      	lsrs	r3, r3, #31
 8000f7a:	61fb      	str	r3, [r7, #28]
					a0 = (a0 << 1) | (a1 >> 31);
 8000f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f7e:	005a      	lsls	r2, r3, #1
 8000f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f82:	0fdb      	lsrs	r3, r3, #31
 8000f84:	4313      	orrs	r3, r2
 8000f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
					a1 = (a1 << 1) | (a2 >> 31);
 8000f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f8a:	005a      	lsls	r2, r3, #1
 8000f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f8e:	0fdb      	lsrs	r3, r3, #31
 8000f90:	4313      	orrs	r3, r2
 8000f92:	62bb      	str	r3, [r7, #40]	@ 0x28
					a2 = (a2 << 1) | (a3 >> 31);
 8000f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f96:	005a      	lsls	r2, r3, #1
 8000f98:	6a3b      	ldr	r3, [r7, #32]
 8000f9a:	0fdb      	lsrs	r3, r3, #31
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	627b      	str	r3, [r7, #36]	@ 0x24
					a3 = (a3 << 1);
 8000fa0:	6a3b      	ldr	r3, [r7, #32]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	623b      	str	r3, [r7, #32]
					if (t0)
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <os_aes+0x7bc>
						a3 ^= 0x87;
 8000fac:	6a3b      	ldr	r3, [r7, #32]
 8000fae:	f083 0387 	eor.w	r3, r3, #135	@ 0x87
 8000fb2:	623b      	str	r3, [r7, #32]
				} while (--t1);
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	61bb      	str	r3, [r7, #24]
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1da      	bne.n	8000f76 <os_aes+0x77e>

				AESAUX[0] ^= a0;
 8000fc0:	4b30      	ldr	r3, [pc, #192]	@ (8001084 <os_aes+0x88c>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fc6:	4053      	eors	r3, r2
 8000fc8:	4a2e      	ldr	r2, [pc, #184]	@ (8001084 <os_aes+0x88c>)
 8000fca:	6013      	str	r3, [r2, #0]
				AESAUX[1] ^= a1;
 8000fcc:	4b2d      	ldr	r3, [pc, #180]	@ (8001084 <os_aes+0x88c>)
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fd2:	4053      	eors	r3, r2
 8000fd4:	4a2b      	ldr	r2, [pc, #172]	@ (8001084 <os_aes+0x88c>)
 8000fd6:	6053      	str	r3, [r2, #4]
				AESAUX[2] ^= a2;
 8000fd8:	4b2a      	ldr	r3, [pc, #168]	@ (8001084 <os_aes+0x88c>)
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fde:	4053      	eors	r3, r2
 8000fe0:	4a28      	ldr	r2, [pc, #160]	@ (8001084 <os_aes+0x88c>)
 8000fe2:	6093      	str	r3, [r2, #8]
				AESAUX[3] ^= a3;
 8000fe4:	4b27      	ldr	r3, [pc, #156]	@ (8001084 <os_aes+0x88c>)
 8000fe6:	68da      	ldr	r2, [r3, #12]
 8000fe8:	6a3b      	ldr	r3, [r7, #32]
 8000fea:	4053      	eors	r3, r2
 8000fec:	4a25      	ldr	r2, [pc, #148]	@ (8001084 <os_aes+0x88c>)
 8000fee:	60d3      	str	r3, [r2, #12]
				mode &= ~AES_MICSUB;
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000ff6:	71fb      	strb	r3, [r7, #7]
				goto LOADDATA;
 8000ff8:	e4ad      	b.n	8000956 <os_aes+0x15e>
			} else {
				// save cipher block as new iv
				AESAUX[0] = a0;
 8000ffa:	4a22      	ldr	r2, [pc, #136]	@ (8001084 <os_aes+0x88c>)
 8000ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ffe:	6013      	str	r3, [r2, #0]
				AESAUX[1] = a1;
 8001000:	4a20      	ldr	r2, [pc, #128]	@ (8001084 <os_aes+0x88c>)
 8001002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001004:	6053      	str	r3, [r2, #4]
				AESAUX[2] = a2;
 8001006:	4a1f      	ldr	r2, [pc, #124]	@ (8001084 <os_aes+0x88c>)
 8001008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100a:	6093      	str	r3, [r2, #8]
				AESAUX[3] = a3;
 800100c:	4a1d      	ldr	r2, [pc, #116]	@ (8001084 <os_aes+0x88c>)
 800100e:	6a3b      	ldr	r3, [r7, #32]
 8001010:	60d3      	str	r3, [r2, #12]
 8001012:	e094      	b.n	800113e <os_aes+0x946>
			}
		} else { // CIPHER
			if (mode & AES_CTR) { // xor block (partially)
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	2b00      	cmp	r3, #0
 800101c:	d034      	beq.n	8001088 <os_aes+0x890>
				t0 = (len > 16) ? 16 : len;
 800101e:	88bb      	ldrh	r3, [r7, #4]
 8001020:	2b10      	cmp	r3, #16
 8001022:	bf28      	it	cs
 8001024:	2310      	movcs	r3, #16
 8001026:	b29b      	uxth	r3, r3
 8001028:	61fb      	str	r3, [r7, #28]
				for (t1 = 0; t1 < t0; t1++) {
 800102a:	2300      	movs	r3, #0
 800102c:	61bb      	str	r3, [r7, #24]
 800102e:	e01d      	b.n	800106c <os_aes+0x874>
					buf[t1] ^= (a0 >> 24);
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	4413      	add	r3, r2
 8001036:	7819      	ldrb	r1, [r3, #0]
 8001038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800103a:	0e1b      	lsrs	r3, r3, #24
 800103c:	b2da      	uxtb	r2, r3
 800103e:	6838      	ldr	r0, [r7, #0]
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	4403      	add	r3, r0
 8001044:	404a      	eors	r2, r1
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	701a      	strb	r2, [r3, #0]
					a0 <<= 8;
 800104a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	62fb      	str	r3, [r7, #44]	@ 0x2c
					if ((t1 & 3) == 3) {
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	2b03      	cmp	r3, #3
 8001058:	d105      	bne.n	8001066 <os_aes+0x86e>
						a0 = a1;
 800105a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800105c:	62fb      	str	r3, [r7, #44]	@ 0x2c
						a1 = a2;
 800105e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001060:	62bb      	str	r3, [r7, #40]	@ 0x28
						a2 = a3;
 8001062:	6a3b      	ldr	r3, [r7, #32]
 8001064:	627b      	str	r3, [r7, #36]	@ 0x24
				for (t1 = 0; t1 < t0; t1++) {
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	3301      	adds	r3, #1
 800106a:	61bb      	str	r3, [r7, #24]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	429a      	cmp	r2, r3
 8001072:	d3dd      	bcc.n	8001030 <os_aes+0x838>
					}
				}
				// update counter
				AESAUX[3]++;
 8001074:	4b03      	ldr	r3, [pc, #12]	@ (8001084 <os_aes+0x88c>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	3301      	adds	r3, #1
 800107a:	4a02      	ldr	r2, [pc, #8]	@ (8001084 <os_aes+0x88c>)
 800107c:	60d3      	str	r3, [r2, #12]
 800107e:	e05e      	b.n	800113e <os_aes+0x946>
 8001080:	0800af34 	.word	0x0800af34
 8001084:	200000d4 	.word	0x200000d4
			} else { // ECB
				// store block
				msbf4_write(buf + 0, a0);
 8001088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800108a:	0e1b      	lsrs	r3, r3, #24
 800108c:	b2da      	uxtb	r2, r3
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	701a      	strb	r2, [r3, #0]
 8001092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001094:	0c1a      	lsrs	r2, r3, #16
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	3301      	adds	r3, #1
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	701a      	strb	r2, [r3, #0]
 800109e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010a0:	0a1a      	lsrs	r2, r3, #8
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	3302      	adds	r3, #2
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	701a      	strb	r2, [r3, #0]
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	3303      	adds	r3, #3
 80010ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	701a      	strb	r2, [r3, #0]
				msbf4_write(buf + 4, a1);
 80010b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010b6:	0e1a      	lsrs	r2, r3, #24
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	3304      	adds	r3, #4
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	701a      	strb	r2, [r3, #0]
 80010c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010c2:	0c1a      	lsrs	r2, r3, #16
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	3305      	adds	r3, #5
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	701a      	strb	r2, [r3, #0]
 80010cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010ce:	0a1a      	lsrs	r2, r3, #8
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	3306      	adds	r3, #6
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	701a      	strb	r2, [r3, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	3307      	adds	r3, #7
 80010dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	701a      	strb	r2, [r3, #0]
				msbf4_write(buf + 8, a2);
 80010e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e4:	0e1a      	lsrs	r2, r3, #24
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	3308      	adds	r3, #8
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	701a      	strb	r2, [r3, #0]
 80010ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f0:	0c1a      	lsrs	r2, r3, #16
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	3309      	adds	r3, #9
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	701a      	strb	r2, [r3, #0]
 80010fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fc:	0a1a      	lsrs	r2, r3, #8
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	330a      	adds	r3, #10
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	701a      	strb	r2, [r3, #0]
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	330b      	adds	r3, #11
 800110a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	701a      	strb	r2, [r3, #0]
				msbf4_write(buf + 12, a3);
 8001110:	6a3b      	ldr	r3, [r7, #32]
 8001112:	0e1a      	lsrs	r2, r3, #24
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	330c      	adds	r3, #12
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	701a      	strb	r2, [r3, #0]
 800111c:	6a3b      	ldr	r3, [r7, #32]
 800111e:	0c1a      	lsrs	r2, r3, #16
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	330d      	adds	r3, #13
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	701a      	strb	r2, [r3, #0]
 8001128:	6a3b      	ldr	r3, [r7, #32]
 800112a:	0a1a      	lsrs	r2, r3, #8
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	330e      	adds	r3, #14
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	701a      	strb	r2, [r3, #0]
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	330f      	adds	r3, #15
 8001138:	6a3a      	ldr	r2, [r7, #32]
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	701a      	strb	r2, [r3, #0]
			}
		}

		// update block state
		if ((mode & AES_MIC) == 0 || (mode & AES_MICNOAUX)) {
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d004      	beq.n	8001152 <os_aes+0x95a>
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	f003 0308 	and.w	r3, r3, #8
 800114e:	2b00      	cmp	r3, #0
 8001150:	d005      	beq.n	800115e <os_aes+0x966>
			buf += 16;
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	3310      	adds	r3, #16
 8001156:	603b      	str	r3, [r7, #0]
			len -= 16;
 8001158:	88bb      	ldrh	r3, [r7, #4]
 800115a:	3b10      	subs	r3, #16
 800115c:	80bb      	strh	r3, [r7, #4]
		}
		mode |= AES_MICNOAUX;
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	f043 0308 	orr.w	r3, r3, #8
 8001164:	71fb      	strb	r3, [r7, #7]
	while ((signed char) len > 0) {
 8001166:	88bb      	ldrh	r3, [r7, #4]
 8001168:	b25b      	sxtb	r3, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	f73f abba 	bgt.w	80008e4 <os_aes+0xec>
	}
	return AESAUX[0];
 8001170:	4b02      	ldr	r3, [pc, #8]	@ (800117c <os_aes+0x984>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3730      	adds	r7, #48	@ 0x30
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	200000d4 	.word	0x200000d4

08001180 <debug_init>:
/*  ************************************** */
/*    DO NOT CHANGE BELOW THIS LINE        */
/*  ************************************** */

void debug_init()
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
//    debug_led(0);

// configure USART1 (115200/8N1, tx-only)

// print banner
	debug_str("\r\n============== DEBUG STARTED ==============\r\n");
 8001184:	4802      	ldr	r0, [pc, #8]	@ (8001190 <debug_init+0x10>)
 8001186:	f000 f88d 	bl	80012a4 <debug_str>
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	0800ac70 	.word	0x0800ac70

08001194 <debug_led>:

void debug_led(int val)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, val);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	461a      	mov	r2, r3
 80011a2:	2102      	movs	r1, #2
 80011a4:	4803      	ldr	r0, [pc, #12]	@ (80011b4 <debug_led+0x20>)
 80011a6:	f006 fe21 	bl	8007dec <HAL_GPIO_WritePin>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	48000400 	.word	0x48000400

080011b8 <debug_char>:

void debug_char(char c)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
	char buffer[] = "";
 80011c2:	2300      	movs	r3, #0
 80011c4:	733b      	strb	r3, [r7, #12]
	buffer[0] = c;
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&myUART, buffer, sizeof(buffer), HAL_MAX_DELAY);
 80011ca:	f107 010c 	add.w	r1, r7, #12
 80011ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011d2:	2201      	movs	r2, #1
 80011d4:	4803      	ldr	r0, [pc, #12]	@ (80011e4 <debug_char+0x2c>)
 80011d6:	f009 f833 	bl	800a240 <HAL_UART_Transmit>
}
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200004d4 	.word	0x200004d4

080011e8 <debug_hex>:

void debug_hex(u1_t b)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
	debug_char("0123456789ABCDEF"[b >> 4]);
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	091b      	lsrs	r3, r3, #4
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b08      	ldr	r3, [pc, #32]	@ (800121c <debug_hex+0x34>)
 80011fc:	5c9b      	ldrb	r3, [r3, r2]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ffda 	bl	80011b8 <debug_char>
	debug_char("0123456789ABCDEF"[b & 0xF]);
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	f003 030f 	and.w	r3, r3, #15
 800120a:	4a04      	ldr	r2, [pc, #16]	@ (800121c <debug_hex+0x34>)
 800120c:	5cd3      	ldrb	r3, [r2, r3]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ffd2 	bl	80011b8 <debug_char>
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	0800aca0 	.word	0x0800aca0

08001220 <debug_uint>:
	debug_char('\r');
	debug_char('\n');
}

void debug_uint(u4_t v)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	for (s1_t n = 24; n >= 0; n -= 8) {
 8001228:	2318      	movs	r3, #24
 800122a:	73fb      	strb	r3, [r7, #15]
 800122c:	e00c      	b.n	8001248 <debug_uint+0x28>
		debug_hex(v >> n);
 800122e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	fa22 f303 	lsr.w	r3, r2, r3
 8001238:	b2db      	uxtb	r3, r3
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ffd4 	bl	80011e8 <debug_hex>
	for (s1_t n = 24; n >= 0; n -= 8) {
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	3b08      	subs	r3, #8
 8001244:	b2db      	uxtb	r3, r3
 8001246:	73fb      	strb	r3, [r7, #15]
 8001248:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124c:	2b00      	cmp	r3, #0
 800124e:	daee      	bge.n	800122e <debug_uint+0xe>
	}
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <debug_int>:

void debug_int(s4_t v)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b08a      	sub	sp, #40	@ 0x28
 800125e:	af02      	add	r7, sp, #8
 8001260:	6078      	str	r0, [r7, #4]
	char buf[10], *p = buf;
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	61fb      	str	r3, [r7, #28]
	int n = debug_fmt(buf, sizeof(buf), v, 10, 0, 0);
 8001268:	f107 000c 	add.w	r0, r7, #12
 800126c:	2300      	movs	r3, #0
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	2300      	movs	r3, #0
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	230a      	movs	r3, #10
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	210a      	movs	r1, #10
 800127a:	f000 f852 	bl	8001322 <debug_fmt>
 800127e:	61b8      	str	r0, [r7, #24]
	while (n--)
 8001280:	e006      	b.n	8001290 <debug_int+0x36>
		debug_char(*p++);
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	1c5a      	adds	r2, r3, #1
 8001286:	61fa      	str	r2, [r7, #28]
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ff94 	bl	80011b8 <debug_char>
	while (n--)
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	1e5a      	subs	r2, r3, #1
 8001294:	61ba      	str	r2, [r7, #24]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f3      	bne.n	8001282 <debug_int+0x28>
}
 800129a:	bf00      	nop
 800129c:	bf00      	nop
 800129e:	3720      	adds	r7, #32
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <debug_str>:

void debug_str(const char *str)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	while (*str) {
 80012ac:	e006      	b.n	80012bc <debug_str+0x18>
		debug_char(*str++);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	1c5a      	adds	r2, r3, #1
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ff7e 	bl	80011b8 <debug_char>
	while (*str) {
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1f4      	bne.n	80012ae <debug_str+0xa>
	}
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <debug_val>:
	debug_char('\r');
	debug_char('\n');
}

void debug_val(const char *label, u4_t val)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	6039      	str	r1, [r7, #0]
	debug_str(label);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff ffe3 	bl	80012a4 <debug_str>
	debug_uint(val);
 80012de:	6838      	ldr	r0, [r7, #0]
 80012e0:	f7ff ff9e 	bl	8001220 <debug_uint>
	debug_char('\r');
 80012e4:	200d      	movs	r0, #13
 80012e6:	f7ff ff67 	bl	80011b8 <debug_char>
	debug_char('\n');
 80012ea:	200a      	movs	r0, #10
 80012ec:	f7ff ff64 	bl	80011b8 <debug_char>
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <debug_valdec>:

void debug_valdec(const char *label, s4_t val)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
	debug_str(label);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ffce 	bl	80012a4 <debug_str>
	debug_int(val);
 8001308:	6838      	ldr	r0, [r7, #0]
 800130a:	f7ff ffa6 	bl	800125a <debug_int>
	debug_char('\r');
 800130e:	200d      	movs	r0, #13
 8001310:	f7ff ff52 	bl	80011b8 <debug_char>
	debug_char('\n');
 8001314:	200a      	movs	r0, #10
 8001316:	f7ff ff4f 	bl	80011b8 <debug_char>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <debug_fmt>:

int debug_fmt(char *buf, int max, s4_t val, int base, int width, char pad)
{
 8001322:	b480      	push	{r7}
 8001324:	b093      	sub	sp, #76	@ 0x4c
 8001326:	af00      	add	r7, sp, #0
 8001328:	60f8      	str	r0, [r7, #12]
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	603b      	str	r3, [r7, #0]
	char num[33], *p = num, *b = buf;
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	647b      	str	r3, [r7, #68]	@ 0x44
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	643b      	str	r3, [r7, #64]	@ 0x40
	u4_t m, v;
	// special handling of negative decimals
	v = (base == 10 && val < 0) ? -val : val;
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	2b0a      	cmp	r3, #10
 800133e:	d105      	bne.n	800134c <debug_fmt+0x2a>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	da02      	bge.n	800134c <debug_fmt+0x2a>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	425b      	negs	r3, r3
 800134a:	e000      	b.n	800134e <debug_fmt+0x2c>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	// generate digits backwards
	do {
		*p++ = ((m = v % base) <= 9) ? m + '0' : m + 'A' - 10;
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001354:	fbb3 f1f2 	udiv	r1, r3, r2
 8001358:	fb01 f202 	mul.w	r2, r1, r2
 800135c:	1a9b      	subs	r3, r3, r2
 800135e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001362:	2b09      	cmp	r3, #9
 8001364:	d804      	bhi.n	8001370 <debug_fmt+0x4e>
 8001366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001368:	b2db      	uxtb	r3, r3
 800136a:	3330      	adds	r3, #48	@ 0x30
 800136c:	b2da      	uxtb	r2, r3
 800136e:	e003      	b.n	8001378 <debug_fmt+0x56>
 8001370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001372:	b2db      	uxtb	r3, r3
 8001374:	3337      	adds	r3, #55	@ 0x37
 8001376:	b2da      	uxtb	r2, r3
 8001378:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800137a:	1c59      	adds	r1, r3, #1
 800137c:	6479      	str	r1, [r7, #68]	@ 0x44
 800137e:	701a      	strb	r2, [r3, #0]
	} while (v /= base);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001384:	fbb2 f3f3 	udiv	r3, r2, r3
 8001388:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800138a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1df      	bne.n	8001350 <debug_fmt+0x2e>
	// prefix negative decimals with '-'
	if (base == 10 && val < 0) {
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	2b0a      	cmp	r3, #10
 8001394:	d10e      	bne.n	80013b4 <debug_fmt+0x92>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	da0b      	bge.n	80013b4 <debug_fmt+0x92>
		*p++ = '-';
 800139c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800139e:	1c5a      	adds	r2, r3, #1
 80013a0:	647a      	str	r2, [r7, #68]	@ 0x44
 80013a2:	222d      	movs	r2, #45	@ 0x2d
 80013a4:	701a      	strb	r2, [r3, #0]
	}
	// add leading zeroes or spaces
	while (b - buf < max - 1 && b - buf < width - (p - num)) {
 80013a6:	e005      	b.n	80013b4 <debug_fmt+0x92>
		*b++ = pad;
 80013a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	643a      	str	r2, [r7, #64]	@ 0x40
 80013ae:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 80013b2:	701a      	strb	r2, [r3, #0]
	while (b - buf < max - 1 && b - buf < width - (p - num)) {
 80013b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	1ad2      	subs	r2, r2, r3
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	3b01      	subs	r3, #1
 80013be:	429a      	cmp	r2, r3
 80013c0:	da0a      	bge.n	80013d8 <debug_fmt+0xb6>
 80013c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	1ad2      	subs	r2, r2, r3
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80013ce:	1acb      	subs	r3, r1, r3
 80013d0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80013d2:	1acb      	subs	r3, r1, r3
 80013d4:	429a      	cmp	r2, r3
 80013d6:	dbe7      	blt.n	80013a8 <debug_fmt+0x86>
	}
	// copy digits and sign forwards
	do
		*b++ = *--p;
 80013d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013da:	3b01      	subs	r3, #1
 80013dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80013de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013e0:	1c5a      	adds	r2, r3, #1
 80013e2:	643a      	str	r2, [r7, #64]	@ 0x40
 80013e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80013e6:	7812      	ldrb	r2, [r2, #0]
 80013e8:	701a      	strb	r2, [r3, #0]
	while (b - buf < max && p > num);
 80013ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	68ba      	ldr	r2, [r7, #8]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	dd04      	ble.n	8001400 <debug_fmt+0xde>
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d8eb      	bhi.n	80013d8 <debug_fmt+0xb6>
	// return number of characters written
	return b - buf;
 8001400:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	1ad3      	subs	r3, r2, r3
}
 8001406:	4618      	mov	r0, r3
 8001408:	374c      	adds	r7, #76	@ 0x4c
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <debug_event>:

void debug_event(int ev)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
			[EV_TXCOMPLETE] = "TXCOMPLETE", [EV_LOST_TSYNC] = "LOST_TSYNC",
			[EV_RESET] = "RESET", [EV_RXCOMPLETE] = "RXCOMPLETE", [EV_LINK_DEAD
					] = "LINK_DEAD", [EV_LINK_ALIVE] = "LINK_ALIVE",
			[EV_SCAN_FOUND] = "SCAN_FOUND", [EV_TXSTART] = "EV_TXSTART", };
	debug_str(
			(ev < sizeof(evnames) / sizeof(evnames[0])) ?
 800141c:	687b      	ldr	r3, [r7, #4]
	debug_str(
 800141e:	2b11      	cmp	r3, #17
 8001420:	d804      	bhi.n	800142c <debug_event+0x18>
 8001422:	4a09      	ldr	r2, [pc, #36]	@ (8001448 <debug_event+0x34>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142a:	e000      	b.n	800142e <debug_event+0x1a>
 800142c:	4b07      	ldr	r3, [pc, #28]	@ (800144c <debug_event+0x38>)
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff ff38 	bl	80012a4 <debug_str>
					evnames[ev] : "EV_UNKNOWN");
	debug_char('\r');
 8001434:	200d      	movs	r0, #13
 8001436:	f7ff febf 	bl	80011b8 <debug_char>
	debug_char('\n');
 800143a:	200a      	movs	r0, #10
 800143c:	f7ff febc 	bl	80011b8 <debug_char>
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000000 	.word	0x20000000
 800144c:	0800acb4 	.word	0x0800acb4

08001450 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001456:	f107 030c 	add.w	r3, r7, #12
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001466:	4b33      	ldr	r3, [pc, #204]	@ (8001534 <MX_GPIO_Init+0xe4>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146a:	4a32      	ldr	r2, [pc, #200]	@ (8001534 <MX_GPIO_Init+0xe4>)
 800146c:	f043 0304 	orr.w	r3, r3, #4
 8001470:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001472:	4b30      	ldr	r3, [pc, #192]	@ (8001534 <MX_GPIO_Init+0xe4>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	4b2d      	ldr	r3, [pc, #180]	@ (8001534 <MX_GPIO_Init+0xe4>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001482:	4a2c      	ldr	r2, [pc, #176]	@ (8001534 <MX_GPIO_Init+0xe4>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800148a:	4b2a      	ldr	r3, [pc, #168]	@ (8001534 <MX_GPIO_Init+0xe4>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001496:	4b27      	ldr	r3, [pc, #156]	@ (8001534 <MX_GPIO_Init+0xe4>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149a:	4a26      	ldr	r2, [pc, #152]	@ (8001534 <MX_GPIO_Init+0xe4>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014a2:	4b24      	ldr	r3, [pc, #144]	@ (8001534 <MX_GPIO_Init+0xe4>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Alim_temp_Pin|RST_Pin|NSS_Pin, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	f648 0180 	movw	r1, #34944	@ 0x8880
 80014b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014b8:	f006 fc98 	bl	8007dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80014bc:	2200      	movs	r2, #0
 80014be:	2102      	movs	r1, #2
 80014c0:	481d      	ldr	r0, [pc, #116]	@ (8001538 <MX_GPIO_Init+0xe8>)
 80014c2:	f006 fc93 	bl	8007dec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Alim_temp_Pin RST_Pin NSS_Pin */
  GPIO_InitStruct.Pin = Alim_temp_Pin|RST_Pin|NSS_Pin;
 80014c6:	f648 0380 	movw	r3, #34944	@ 0x8880
 80014ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	4619      	mov	r1, r3
 80014de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014e2:	f006 fb19 	bl	8007b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80014e6:	2302      	movs	r3, #2
 80014e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ea:	2301      	movs	r3, #1
 80014ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80014f6:	f107 030c 	add.w	r3, r7, #12
 80014fa:	4619      	mov	r1, r3
 80014fc:	480e      	ldr	r0, [pc, #56]	@ (8001538 <MX_GPIO_Init+0xe8>)
 80014fe:	f006 fb0b 	bl	8007b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO0_Pin DIO1_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin|DIO1_Pin;
 8001502:	23c0      	movs	r3, #192	@ 0xc0
 8001504:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001506:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800150a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	4619      	mov	r1, r3
 8001516:	4808      	ldr	r0, [pc, #32]	@ (8001538 <MX_GPIO_Init+0xe8>)
 8001518:	f006 fafe 	bl	8007b18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800151c:	2200      	movs	r2, #0
 800151e:	2100      	movs	r1, #0
 8001520:	2017      	movs	r0, #23
 8001522:	f006 fac2 	bl	8007aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001526:	2017      	movs	r0, #23
 8001528:	f006 fadb 	bl	8007ae2 <HAL_NVIC_EnableIRQ>

}
 800152c:	bf00      	nop
 800152e:	3720      	adds	r7, #32
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40021000 	.word	0x40021000
 8001538:	48000400 	.word	0x48000400

0800153c <hal_io_init>:

// -----------------------------------------------------------------------------
// I/O

static void hal_io_init()
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
	//already done by cubemx
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <hal_pin_rxtx>:

// val ==1  => tx 1, rx 0 ; val == 0 => tx 0, rx 1
void hal_pin_rxtx(u1_t val)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	4603      	mov	r3, r0
 8001552:	71fb      	strb	r3, [r7, #7]
  #ifdef TX_GPIO_Port
    HAL_GPIO_WritePin(RX_GPIO_Port,RX_Pin,~val);
    HAL_GPIO_WritePin(TX_GPIO_Port,TX_Pin,val);
  #endif
#endif
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <hal_pin_nss>:

// set radio NSS pin to given value
void hal_pin_nss(u1_t val)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, val);
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	461a      	mov	r2, r3
 800156e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001572:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001576:	f006 fc39 	bl	8007dec <HAL_GPIO_WritePin>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <hal_pin_rst>:

// set radio RST pin to given value (or keep floating!)
void hal_pin_rst(u1_t val)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b08c      	sub	sp, #48	@ 0x30
 8001586:	af00      	add	r7, sp, #0
 8001588:	4603      	mov	r3, r0
 800158a:	71fb      	strb	r3, [r7, #7]
	if (val == 0 || val == 1) { // drive pin
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d002      	beq.n	8001598 <hal_pin_rst+0x16>
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d116      	bne.n	80015c6 <hal_pin_rst+0x44>
		GPIO_InitTypeDef GPIO_InitStruct;
		GPIO_InitStruct.Pin = RST_Pin;
 8001598:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800159c:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159e:	2301      	movs	r3, #1
 80015a0:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62bb      	str	r3, [r7, #40]	@ 0x28
		HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80015a6:	f107 031c 	add.w	r3, r7, #28
 80015aa:	4619      	mov	r1, r3
 80015ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b0:	f006 fab2 	bl	8007b18 <HAL_GPIO_Init>

		HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, val);
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	461a      	mov	r2, r3
 80015b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015c0:	f006 fc14 	bl	8007dec <HAL_GPIO_WritePin>
	if (val == 0 || val == 1) { // drive pin
 80015c4:	e00e      	b.n	80015e4 <hal_pin_rst+0x62>

	} else { // keep pin floating
		GPIO_InitTypeDef GPIO_InitStruct;
		GPIO_InitStruct.Pin = RST_Pin;
 80015c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80015ca:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	613b      	str	r3, [r7, #16]
		HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80015d4:	f107 0308 	add.w	r3, r7, #8
 80015d8:	4619      	mov	r1, r3
 80015da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015de:	f006 fa9b 	bl	8007b18 <HAL_GPIO_Init>
	}
}
 80015e2:	bf00      	nop
 80015e4:	bf00      	nop
 80015e6:	3730      	adds	r7, #48	@ 0x30
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <HAL_GPIO_EXTI_Callback>:

extern void radio_irq_handler(u1_t dio);

// generic EXTI IRQ handler for all channels
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin_int)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	80fb      	strh	r3, [r7, #6]
	// DIO 0
	if (GPIO_Pin_int == DIO0_Pin) {
 80015f6:	88fb      	ldrh	r3, [r7, #6]
 80015f8:	2b40      	cmp	r3, #64	@ 0x40
 80015fa:	d102      	bne.n	8001602 <HAL_GPIO_EXTI_Callback+0x16>
		// invoke radio handler (on IRQ!)
		radio_irq_handler(0);
 80015fc:	2000      	movs	r0, #0
 80015fe:	f004 fa3d 	bl	8005a7c <radio_irq_handler>
	}
	// DIO 1
	if (GPIO_Pin_int == DIO1_Pin) {
 8001602:	88fb      	ldrh	r3, [r7, #6]
 8001604:	2b80      	cmp	r3, #128	@ 0x80
 8001606:	d102      	bne.n	800160e <HAL_GPIO_EXTI_Callback+0x22>
		// invoke radio handler (on IRQ!)
		radio_irq_handler(1);
 8001608:	2001      	movs	r0, #1
 800160a:	f004 fa37 	bl	8005a7c <radio_irq_handler>
	// DIO 2
//	if(GPIO_Pin_int == DIO2_Pin) {
	//    // invoke radio handler (on IRQ!)
//	    radio_irq_handler(2);
//	}
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <hal_spi_init>:

// -----------------------------------------------------------------------------
// SPI
void hal_spi_init()
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
	// already done by cube mx
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <hal_spi>:

// perform SPI transaction with radio
u1_t hal_spi(u1_t out)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af02      	add	r7, sp, #8
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
	char outbuffer[] = "";
 800162e:	2300      	movs	r3, #0
 8001630:	733b      	strb	r3, [r7, #12]
	char inbuffer[] = "";
 8001632:	2300      	movs	r3, #0
 8001634:	723b      	strb	r3, [r7, #8]
	outbuffer[0] = out;
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&mySPI, outbuffer, inbuffer, sizeof(outbuffer),
 800163a:	f107 0208 	add.w	r2, r7, #8
 800163e:	f107 010c 	add.w	r1, r7, #12
 8001642:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	2301      	movs	r3, #1
 800164a:	4804      	ldr	r0, [pc, #16]	@ (800165c <hal_spi+0x38>)
 800164c:	f007 ff57 	bl	80094fe <HAL_SPI_TransmitReceive>
	HAL_MAX_DELAY);
	return inbuffer[0];
 8001650:	7a3b      	ldrb	r3, [r7, #8]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200003d8 	.word	0x200003d8

08001660 <hal_time_init>:

// -----------------------------------------------------------------------------
// TIME
static void hal_time_init()
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
	// already done by cubemx
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
	...

08001670 <hal_ticks>:

u4_t hal_ticks()
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
	hal_disableIRQs();
 8001676:	f000 f8a5 	bl	80017c4 <hal_disableIRQs>
	u4_t t = HAL.ticks;
 800167a:	4b13      	ldr	r3, [pc, #76]	@ (80016c8 <hal_ticks+0x58>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	607b      	str	r3, [r7, #4]
	u2_t cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 8001680:	4b12      	ldr	r3, [pc, #72]	@ (80016cc <hal_ticks+0x5c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001686:	807b      	strh	r3, [r7, #2]
	if (__HAL_TIM_GET_FLAG(&myTIMER, TIM_FLAG_CC1) != RESET) {
 8001688:	4b10      	ldr	r3, [pc, #64]	@ (80016cc <hal_ticks+0x5c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b02      	cmp	r3, #2
 8001694:	d10d      	bne.n	80016b2 <hal_ticks+0x42>
		if (__HAL_TIM_GET_IT_SOURCE(&myTIMER, TIM_IT_CC1) != RESET) {
 8001696:	4b0d      	ldr	r3, [pc, #52]	@ (80016cc <hal_ticks+0x5c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d106      	bne.n	80016b2 <hal_ticks+0x42>
			cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 80016a4:	4b09      	ldr	r3, [pc, #36]	@ (80016cc <hal_ticks+0x5c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016aa:	807b      	strh	r3, [r7, #2]
			t++;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3301      	adds	r3, #1
 80016b0:	607b      	str	r3, [r7, #4]
		}
	}
	hal_enableIRQs();
 80016b2:	f000 f897 	bl	80017e4 <hal_enableIRQs>
	return (t << 16) | cnt;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	041a      	lsls	r2, r3, #16
 80016ba:	887b      	ldrh	r3, [r7, #2]
 80016bc:	4313      	orrs	r3, r2
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000194 	.word	0x20000194
 80016cc:	20000488 	.word	0x20000488

080016d0 <hal_ticksplusplus>:

void hal_ticksplusplus(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
	HAL.ticks++;
 80016d4:	4b04      	ldr	r3, [pc, #16]	@ (80016e8 <hal_ticksplusplus+0x18>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	3301      	adds	r3, #1
 80016da:	4a03      	ldr	r2, [pc, #12]	@ (80016e8 <hal_ticksplusplus+0x18>)
 80016dc:	6053      	str	r3, [r2, #4]
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	20000194 	.word	0x20000194

080016ec <deltaticks>:

// return modified delta ticks from now to specified ticktime (0 for past, FFFF for far future)
static u2_t deltaticks(u4_t time)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	u4_t t = hal_ticks();
 80016f4:	f7ff ffbc 	bl	8001670 <hal_ticks>
 80016f8:	60f8      	str	r0, [r7, #12]
	s4_t d = time - t;
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	60bb      	str	r3, [r7, #8]
	if (d <= 0)
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	2b00      	cmp	r3, #0
 8001706:	dc01      	bgt.n	800170c <deltaticks+0x20>
		return 0;    // in the past
 8001708:	2300      	movs	r3, #0
 800170a:	e008      	b.n	800171e <deltaticks+0x32>
	if ((d >> 16) != 0)
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	141b      	asrs	r3, r3, #16
 8001710:	2b00      	cmp	r3, #0
 8001712:	d002      	beq.n	800171a <deltaticks+0x2e>
		return 0xFFFF; // far ahead
 8001714:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001718:	e001      	b.n	800171e <deltaticks+0x32>
	return (u2_t) d;
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	b29b      	uxth	r3, r3
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <hal_waitUntil>:

void hal_waitUntil(u4_t time)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
	while (deltaticks(time) != 0)
 800172e:	bf00      	nop
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff ffdb 	bl	80016ec <deltaticks>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1f9      	bne.n	8001730 <hal_waitUntil+0xa>
		; // busy wait until timestamp is reached
}
 800173c:	bf00      	nop
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <hal_checkTimer>:

// check and rewind for target time
u1_t hal_checkTimer(u4_t time)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	u2_t dt;
	myTIMER.Instance->SR &= ~TIM_SR_CC1IF; // clear any pending interrupts
 8001750:	4b1b      	ldr	r3, [pc, #108]	@ (80017c0 <hal_checkTimer+0x78>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	691a      	ldr	r2, [r3, #16]
 8001756:	4b1a      	ldr	r3, [pc, #104]	@ (80017c0 <hal_checkTimer+0x78>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f022 0202 	bic.w	r2, r2, #2
 800175e:	611a      	str	r2, [r3, #16]
	if ((dt = deltaticks(time)) < 5) { // event is now (a few ticks ahead)
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff ffc3 	bl	80016ec <deltaticks>
 8001766:	4603      	mov	r3, r0
 8001768:	81fb      	strh	r3, [r7, #14]
 800176a:	89fb      	ldrh	r3, [r7, #14]
 800176c:	2b04      	cmp	r3, #4
 800176e:	d809      	bhi.n	8001784 <hal_checkTimer+0x3c>
		myTIMER.Instance->DIER &= ~TIM_DIER_CC1IE; // disable IE
 8001770:	4b13      	ldr	r3, [pc, #76]	@ (80017c0 <hal_checkTimer+0x78>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	68da      	ldr	r2, [r3, #12]
 8001776:	4b12      	ldr	r3, [pc, #72]	@ (80017c0 <hal_checkTimer+0x78>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0202 	bic.w	r2, r2, #2
 800177e:	60da      	str	r2, [r3, #12]
		return 1;
 8001780:	2301      	movs	r3, #1
 8001782:	e018      	b.n	80017b6 <hal_checkTimer+0x6e>
	} else { // rewind timer (fully or to exact time))
		myTIMER.Instance->CCR1 = myTIMER.Instance->CNT + dt;   // set comparator
 8001784:	4b0e      	ldr	r3, [pc, #56]	@ (80017c0 <hal_checkTimer+0x78>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800178a:	89fa      	ldrh	r2, [r7, #14]
 800178c:	4b0c      	ldr	r3, [pc, #48]	@ (80017c0 <hal_checkTimer+0x78>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	440a      	add	r2, r1
 8001792:	635a      	str	r2, [r3, #52]	@ 0x34
		myTIMER.Instance->DIER |= TIM_DIER_CC1IE;  // enable IE
 8001794:	4b0a      	ldr	r3, [pc, #40]	@ (80017c0 <hal_checkTimer+0x78>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	68da      	ldr	r2, [r3, #12]
 800179a:	4b09      	ldr	r3, [pc, #36]	@ (80017c0 <hal_checkTimer+0x78>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f042 0202 	orr.w	r2, r2, #2
 80017a2:	60da      	str	r2, [r3, #12]
		myTIMER.Instance->CCER |= TIM_CCER_CC1E; // enable capture/compare uint 2
 80017a4:	4b06      	ldr	r3, [pc, #24]	@ (80017c0 <hal_checkTimer+0x78>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6a1a      	ldr	r2, [r3, #32]
 80017aa:	4b05      	ldr	r3, [pc, #20]	@ (80017c0 <hal_checkTimer+0x78>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f042 0201 	orr.w	r2, r2, #1
 80017b2:	621a      	str	r2, [r3, #32]
		return 0;
 80017b4:	2300      	movs	r3, #0
	}
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000488 	.word	0x20000488

080017c4 <hal_disableIRQs>:

// -----------------------------------------------------------------------------
// IRQ
void hal_disableIRQs()
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c8:	b672      	cpsid	i
}
 80017ca:	bf00      	nop
	__disable_irq();
	//__set_BASEPRI(1 << 4);
	HAL.irqlevel++;
 80017cc:	4b04      	ldr	r3, [pc, #16]	@ (80017e0 <hal_disableIRQs+0x1c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	3301      	adds	r3, #1
 80017d2:	4a03      	ldr	r2, [pc, #12]	@ (80017e0 <hal_disableIRQs+0x1c>)
 80017d4:	6013      	str	r3, [r2, #0]
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	20000194 	.word	0x20000194

080017e4 <hal_enableIRQs>:

void hal_enableIRQs()
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
	if (--HAL.irqlevel == 0) {
 80017e8:	4b07      	ldr	r3, [pc, #28]	@ (8001808 <hal_enableIRQs+0x24>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	3b01      	subs	r3, #1
 80017ee:	4a06      	ldr	r2, [pc, #24]	@ (8001808 <hal_enableIRQs+0x24>)
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	4b05      	ldr	r3, [pc, #20]	@ (8001808 <hal_enableIRQs+0x24>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <hal_enableIRQs+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 80017fa:	b662      	cpsie	i
}
 80017fc:	bf00      	nop
		__enable_irq();
		//__set_BASEPRI(0);
	}
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	20000194 	.word	0x20000194

0800180c <hal_sleep>:

void hal_sleep()
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
	// low power sleep mode
#ifndef CFG_no_low_power_sleep_mode
	// PWR->CR |= PWR_CR_LPSDSR;
#endif
	// suspend execution until IRQ, regardless of the CPSR I-bit
	__WFI();
 8001810:	bf30      	wfi
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <hal_init>:

// -----------------------------------------------------------------------------

void hal_init()
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
	memset(&HAL, 0x00, sizeof(HAL));
 8001820:	2208      	movs	r2, #8
 8001822:	2100      	movs	r1, #0
 8001824:	4807      	ldr	r0, [pc, #28]	@ (8001844 <hal_init+0x28>)
 8001826:	f009 f9dc 	bl	800abe2 <memset>
	hal_disableIRQs();
 800182a:	f7ff ffcb 	bl	80017c4 <hal_disableIRQs>
	// configure radio I/O and interrupt handler
	hal_io_init();
 800182e:	f7ff fe85 	bl	800153c <hal_io_init>
	// configure radio SPI
	hal_spi_init();
 8001832:	f7ff fef0 	bl	8001616 <hal_spi_init>
	// configure timer and interrupt handler
	hal_time_init();
 8001836:	f7ff ff13 	bl	8001660 <hal_time_init>
	hal_enableIRQs();
 800183a:	f7ff ffd3 	bl	80017e4 <hal_enableIRQs>
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000194 	.word	0x20000194

08001848 <hal_failed>:

void hal_failed()
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
	// HALT...
	hal_disableIRQs();
 800184c:	f7ff ffba 	bl	80017c4 <hal_disableIRQs>
	hal_sleep();
 8001850:	f7ff ffdc 	bl	800180c <hal_sleep>
	while (1)
 8001854:	bf00      	nop
 8001856:	e7fd      	b.n	8001854 <hal_failed+0xc>

08001858 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800185c:	4b1b      	ldr	r3, [pc, #108]	@ (80018cc <MX_I2C1_Init+0x74>)
 800185e:	4a1c      	ldr	r2, [pc, #112]	@ (80018d0 <MX_I2C1_Init+0x78>)
 8001860:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8001862:	4b1a      	ldr	r3, [pc, #104]	@ (80018cc <MX_I2C1_Init+0x74>)
 8001864:	4a1b      	ldr	r2, [pc, #108]	@ (80018d4 <MX_I2C1_Init+0x7c>)
 8001866:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001868:	4b18      	ldr	r3, [pc, #96]	@ (80018cc <MX_I2C1_Init+0x74>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800186e:	4b17      	ldr	r3, [pc, #92]	@ (80018cc <MX_I2C1_Init+0x74>)
 8001870:	2201      	movs	r2, #1
 8001872:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001874:	4b15      	ldr	r3, [pc, #84]	@ (80018cc <MX_I2C1_Init+0x74>)
 8001876:	2200      	movs	r2, #0
 8001878:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800187a:	4b14      	ldr	r3, [pc, #80]	@ (80018cc <MX_I2C1_Init+0x74>)
 800187c:	2200      	movs	r2, #0
 800187e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001880:	4b12      	ldr	r3, [pc, #72]	@ (80018cc <MX_I2C1_Init+0x74>)
 8001882:	2200      	movs	r2, #0
 8001884:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001886:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <MX_I2C1_Init+0x74>)
 8001888:	2200      	movs	r2, #0
 800188a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800188c:	4b0f      	ldr	r3, [pc, #60]	@ (80018cc <MX_I2C1_Init+0x74>)
 800188e:	2200      	movs	r2, #0
 8001890:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001892:	480e      	ldr	r0, [pc, #56]	@ (80018cc <MX_I2C1_Init+0x74>)
 8001894:	f006 fada 	bl	8007e4c <HAL_I2C_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800189e:	f003 fb85 	bl	8004fac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018a2:	2100      	movs	r1, #0
 80018a4:	4809      	ldr	r0, [pc, #36]	@ (80018cc <MX_I2C1_Init+0x74>)
 80018a6:	f006 fb6c 	bl	8007f82 <HAL_I2CEx_ConfigAnalogFilter>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80018b0:	f003 fb7c 	bl	8004fac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80018b4:	2100      	movs	r1, #0
 80018b6:	4805      	ldr	r0, [pc, #20]	@ (80018cc <MX_I2C1_Init+0x74>)
 80018b8:	f006 fbae 	bl	8008018 <HAL_I2CEx_ConfigDigitalFilter>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80018c2:	f003 fb73 	bl	8004fac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	2000019c 	.word	0x2000019c
 80018d0:	40005400 	.word	0x40005400
 80018d4:	10d19ce4 	.word	0x10d19ce4

080018d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b09e      	sub	sp, #120	@ 0x78
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018f0:	f107 0310 	add.w	r3, r7, #16
 80018f4:	2254      	movs	r2, #84	@ 0x54
 80018f6:	2100      	movs	r1, #0
 80018f8:	4618      	mov	r0, r3
 80018fa:	f009 f972 	bl	800abe2 <memset>
  if(i2cHandle->Instance==I2C1)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a1f      	ldr	r2, [pc, #124]	@ (8001980 <HAL_I2C_MspInit+0xa8>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d137      	bne.n	8001978 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001908:	2340      	movs	r3, #64	@ 0x40
 800190a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800190c:	2300      	movs	r3, #0
 800190e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001910:	f107 0310 	add.w	r3, r7, #16
 8001914:	4618      	mov	r0, r3
 8001916:	f007 fa67 	bl	8008de8 <HAL_RCCEx_PeriphCLKConfig>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001920:	f003 fb44 	bl	8004fac <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001924:	4b17      	ldr	r3, [pc, #92]	@ (8001984 <HAL_I2C_MspInit+0xac>)
 8001926:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001928:	4a16      	ldr	r2, [pc, #88]	@ (8001984 <HAL_I2C_MspInit+0xac>)
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001930:	4b14      	ldr	r3, [pc, #80]	@ (8001984 <HAL_I2C_MspInit+0xac>)
 8001932:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800193c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001940:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001942:	2312      	movs	r3, #18
 8001944:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194a:	2303      	movs	r3, #3
 800194c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800194e:	2304      	movs	r3, #4
 8001950:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001952:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001956:	4619      	mov	r1, r3
 8001958:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800195c:	f006 f8dc 	bl	8007b18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001960:	4b08      	ldr	r3, [pc, #32]	@ (8001984 <HAL_I2C_MspInit+0xac>)
 8001962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001964:	4a07      	ldr	r2, [pc, #28]	@ (8001984 <HAL_I2C_MspInit+0xac>)
 8001966:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800196a:	6593      	str	r3, [r2, #88]	@ 0x58
 800196c:	4b05      	ldr	r3, [pc, #20]	@ (8001984 <HAL_I2C_MspInit+0xac>)
 800196e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001970:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001978:	bf00      	nop
 800197a:	3778      	adds	r7, #120	@ 0x78
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40005400 	.word	0x40005400
 8001984:	40021000 	.word	0x40021000

08001988 <getSf>:
enum {
	RSSI_OFF = 64, SNR_SCALEUP = 4
};

inline sf_t getSf(rps_t params)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	80fb      	strh	r3, [r7, #6]
	return (sf_t) (params & 0x7);
 8001992:	88fb      	ldrh	r3, [r7, #6]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	b2db      	uxtb	r3, r3
}
 800199c:	4618      	mov	r0, r3
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <getBw>:
inline rps_t setSf(rps_t params, sf_t sf)
{
	return (rps_t) ((params & ~0x7) | sf);
}
inline bw_t getBw(rps_t params)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	80fb      	strh	r3, [r7, #6]
	return (bw_t) ((params >> 3) & 0x3);
 80019b2:	88fb      	ldrh	r3, [r7, #6]
 80019b4:	08db      	lsrs	r3, r3, #3
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	b2db      	uxtb	r3, r3
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <getCr>:
inline rps_t setBw(rps_t params, bw_t cr)
{
	return (rps_t) ((params & ~0x18) | (cr << 3));
}
inline cr_t getCr(rps_t params)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	80fb      	strh	r3, [r7, #6]
	return (cr_t) ((params >> 5) & 0x3);
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	095b      	lsrs	r3, r3, #5
 80019da:	b29b      	uxth	r3, r3
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	f003 0303 	and.w	r3, r3, #3
 80019e2:	b2db      	uxtb	r3, r3
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <setCr>:
inline rps_t setCr(rps_t params, cr_t cr)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	460a      	mov	r2, r1
 80019fa:	80fb      	strh	r3, [r7, #6]
 80019fc:	4613      	mov	r3, r2
 80019fe:	717b      	strb	r3, [r7, #5]
	return (rps_t) ((params & ~0x60) | (cr << 5));
 8001a00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a04:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8001a08:	b21a      	sxth	r2, r3
 8001a0a:	797b      	ldrb	r3, [r7, #5]
 8001a0c:	015b      	lsls	r3, r3, #5
 8001a0e:	b21b      	sxth	r3, r3
 8001a10:	4313      	orrs	r3, r2
 8001a12:	b21b      	sxth	r3, r3
 8001a14:	b29b      	uxth	r3, r3
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <getNocrc>:
inline int getNocrc(rps_t params)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	4603      	mov	r3, r0
 8001a2a:	80fb      	strh	r3, [r7, #6]
	return ((params >> 7) & 0x1);
 8001a2c:	88fb      	ldrh	r3, [r7, #6]
 8001a2e:	09db      	lsrs	r3, r3, #7
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	f003 0301 	and.w	r3, r3, #1
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <setNocrc>:
inline rps_t setNocrc(rps_t params, int nocrc)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	4603      	mov	r3, r0
 8001a4a:	6039      	str	r1, [r7, #0]
 8001a4c:	80fb      	strh	r3, [r7, #6]
	return (rps_t) ((params & ~0x80) | (nocrc << 7));
 8001a4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a56:	b21a      	sxth	r2, r3
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	01db      	lsls	r3, r3, #7
 8001a5c:	b21b      	sxth	r3, r3
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	b21b      	sxth	r3, r3
 8001a62:	b29b      	uxth	r3, r3
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <getIh>:
inline int getIh(rps_t params)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	80fb      	strh	r3, [r7, #6]
	return ((params >> 8) & 0xFF);
 8001a7a:	88fb      	ldrh	r3, [r7, #6]
 8001a7c:	0a1b      	lsrs	r3, r3, #8
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	b2db      	uxtb	r3, r3
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <setIh>:
inline rps_t setIh(rps_t params, int ih)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	4603      	mov	r3, r0
 8001a96:	6039      	str	r1, [r7, #0]
 8001a98:	80fb      	strh	r3, [r7, #6]
	return (rps_t) ((params & ~0xFF00) | (ih << 8));
 8001a9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	b21a      	sxth	r2, r3
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	021b      	lsls	r3, r3, #8
 8001aa6:	b21b      	sxth	r3, r3
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	b21b      	sxth	r3, r3
 8001aac:	b29b      	uxth	r3, r3
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <updr2rps>:
	return ((r1 ^ r2) & 0x1F) == 0;
}

extern const u1_t _DR2RPS_CRC[];
inline rps_t updr2rps(dr_t dr)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
	return (rps_t) _DR2RPS_CRC[dr + 1];
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	4a04      	ldr	r2, [pc, #16]	@ (8001adc <updr2rps+0x20>)
 8001acc:	5cd3      	ldrb	r3, [r2, r3]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	0800c034 	.word	0x0800c034

08001ae0 <dndr2rps>:
inline rps_t dndr2rps(dr_t dr)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	71fb      	strb	r3, [r7, #7]
	return setNocrc(updr2rps(dr), 1);
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ffe5 	bl	8001abc <updr2rps>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2101      	movs	r1, #1
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff ffa3 	bl	8001a42 <setNocrc>
 8001afc:	4603      	mov	r3, r0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <decDR>:
inline dr_t incDR(dr_t dr)
{
	return _DR2RPS_CRC[dr + 2] == ILLEGAL_RPS ? dr : (dr_t) (dr + 1);
} // increase data rate
inline dr_t decDR(dr_t dr)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
	return _DR2RPS_CRC[dr] == ILLEGAL_RPS ? dr : (dr_t) (dr - 1);
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	4a07      	ldr	r2, [pc, #28]	@ (8001b34 <decDR+0x2c>)
 8001b16:	5cd3      	ldrb	r3, [r2, r3]
 8001b18:	2bff      	cmp	r3, #255	@ 0xff
 8001b1a:	d003      	beq.n	8001b24 <decDR+0x1c>
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	e000      	b.n	8001b26 <decDR+0x1e>
 8001b24:	79fb      	ldrb	r3, [r7, #7]
} // decrease data rate
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	0800c034 	.word	0x0800c034

08001b38 <validDR>:
inline dr_t assertDR(dr_t dr)
{
	return _DR2RPS_CRC[dr + 1] == ILLEGAL_RPS ? DR_DFLTMIN : dr;
}   // force into a valid DR
inline bit_t validDR(dr_t dr)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
	return _DR2RPS_CRC[dr + 1] != ILLEGAL_RPS;
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	3301      	adds	r3, #1
 8001b46:	4a06      	ldr	r2, [pc, #24]	@ (8001b60 <validDR+0x28>)
 8001b48:	5cd3      	ldrb	r3, [r2, r3]
 8001b4a:	2bff      	cmp	r3, #255	@ 0xff
 8001b4c:	bf14      	ite	ne
 8001b4e:	2301      	movne	r3, #1
 8001b50:	2300      	moveq	r3, #0
 8001b52:	b2db      	uxtb	r3, r3
} // in range
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	0800c034 	.word	0x0800c034

08001b64 <lowerDR>:
inline dr_t lowerDR(dr_t dr, u1_t n)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	460a      	mov	r2, r1
 8001b6e:	71fb      	strb	r3, [r7, #7]
 8001b70:	4613      	mov	r3, r2
 8001b72:	71bb      	strb	r3, [r7, #6]
	while (n--) {
 8001b74:	e005      	b.n	8001b82 <lowerDR+0x1e>
		dr = decDR(dr);
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ffc5 	bl	8001b08 <decDR>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
	while (n--) {
 8001b82:	79bb      	ldrb	r3, [r7, #6]
 8001b84:	1e5a      	subs	r2, r3, #1
 8001b86:	71ba      	strb	r2, [r7, #6]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1f4      	bne.n	8001b76 <lowerDR+0x12>
	}
	return dr;
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
} // decrease data rate by n steps
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <os_rlsbf2>:

#if !defined(HAS_os_calls)

#if !defined(os_rlsbf2)
u2_t os_rlsbf2(xref2cu1_t buf)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
	return (u2_t) (buf[0] | (buf[1] << 8));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	b21a      	sxth	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	021b      	lsls	r3, r3, #8
 8001bac:	b21b      	sxth	r3, r3
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	b21b      	sxth	r3, r3
 8001bb2:	b29b      	uxth	r3, r3
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <os_rlsbf4>:
#endif

#if !defined(os_rlsbf4)
u4_t os_rlsbf4(xref2cu1_t buf)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	return (u4_t) (buf[0] | (buf[1] << 8) | ((u4_t) buf[2] << 16)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	021b      	lsls	r3, r3, #8
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	461a      	mov	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3302      	adds	r3, #2
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	041b      	lsls	r3, r3, #16
 8001be2:	431a      	orrs	r2, r3
			| ((u4_t) buf[3] << 24));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3303      	adds	r3, #3
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	061b      	lsls	r3, r3, #24
	return (u4_t) (buf[0] | (buf[1] << 8) | ((u4_t) buf[2] << 16)
 8001bec:	4313      	orrs	r3, r2
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <os_rmsbf4>:
#endif

#if !defined(os_rmsbf4)
u4_t os_rmsbf4(xref2cu1_t buf)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
	return (u4_t) (buf[3] | (buf[2] << 8) | ((u4_t) buf[1] << 16)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	3303      	adds	r3, #3
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	3302      	adds	r3, #2
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	021b      	lsls	r3, r3, #8
 8001c12:	4313      	orrs	r3, r2
 8001c14:	461a      	mov	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	041b      	lsls	r3, r3, #16
 8001c1e:	431a      	orrs	r2, r3
			| ((u4_t) buf[0] << 24));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	061b      	lsls	r3, r3, #24
	return (u4_t) (buf[3] | (buf[2] << 8) | ((u4_t) buf[1] << 16)
 8001c26:	4313      	orrs	r3, r2
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <os_wlsbf2>:
#endif

#if !defined(os_wlsbf2)
void os_wlsbf2(xref2u1_t buf, u2_t v)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	807b      	strh	r3, [r7, #2]
	buf[0] = v;
 8001c40:	887b      	ldrh	r3, [r7, #2]
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	701a      	strb	r2, [r3, #0]
	buf[1] = v >> 8;
 8001c48:	887b      	ldrh	r3, [r7, #2]
 8001c4a:	0a1b      	lsrs	r3, r3, #8
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3301      	adds	r3, #1
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	701a      	strb	r2, [r3, #0]
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <os_wlsbf4>:
#endif

#if !defined(os_wlsbf4)
void os_wlsbf4(xref2u1_t buf, u4_t v)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
 8001c6a:	6039      	str	r1, [r7, #0]
	buf[0] = v;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	701a      	strb	r2, [r3, #0]
	buf[1] = v >> 8;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	0a1a      	lsrs	r2, r3, #8
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	701a      	strb	r2, [r3, #0]
	buf[2] = v >> 16;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	0c1a      	lsrs	r2, r3, #16
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3302      	adds	r3, #2
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	701a      	strb	r2, [r3, #0]
	buf[3] = v >> 24;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	0e1a      	lsrs	r2, r3, #24
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3303      	adds	r3, #3
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	701a      	strb	r2, [r3, #0]
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <os_wmsbf4>:
#endif

#if !defined(os_wmsbf4)
void os_wmsbf4(xref2u1_t buf, u4_t v)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
	buf[3] = v;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3303      	adds	r3, #3
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	701a      	strb	r2, [r3, #0]
	buf[2] = v >> 8;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	0a1a      	lsrs	r2, r3, #8
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3302      	adds	r3, #2
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	701a      	strb	r2, [r3, #0]
	buf[1] = v >> 16;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	0c1a      	lsrs	r2, r3, #16
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	701a      	strb	r2, [r3, #0]
	buf[0] = v >> 24;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	0e1b      	lsrs	r3, r3, #24
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	701a      	strb	r2, [r3, #0]
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <os_getBattLevel>:
#endif

#if !defined(os_getBattLevel)
u1_t os_getBattLevel(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0
	return MCMD_DEVS_BATT_NOINFO;
 8001cea:	23ff      	movs	r3, #255	@ 0xff
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <os_crc16>:
#endif

#if !defined(os_crc16)
// New CRC-16 CCITT(XMODEM) checksum for beacons:
u2_t os_crc16(xref2u1_t data, uint len)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b087      	sub	sp, #28
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	6039      	str	r1, [r7, #0]
	u2_t remainder = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	82fb      	strh	r3, [r7, #22]
	u2_t polynomial = 0x1021;
 8001d04:	f241 0321 	movw	r3, #4129	@ 0x1021
 8001d08:	81bb      	strh	r3, [r7, #12]
	for (uint i = 0; i < len; i++) {
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	e026      	b.n	8001d5e <os_crc16+0x68>
		remainder ^= data[i] << 8;
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4413      	add	r3, r2
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	021b      	lsls	r3, r3, #8
 8001d1a:	b21a      	sxth	r2, r3
 8001d1c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d20:	4053      	eors	r3, r2
 8001d22:	b21b      	sxth	r3, r3
 8001d24:	82fb      	strh	r3, [r7, #22]
		for (u1_t bit = 8; bit > 0; bit--) {
 8001d26:	2308      	movs	r3, #8
 8001d28:	73fb      	strb	r3, [r7, #15]
 8001d2a:	e012      	b.n	8001d52 <os_crc16+0x5c>
			if ((remainder & 0x8000))
 8001d2c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	da08      	bge.n	8001d46 <os_crc16+0x50>
				remainder = (remainder << 1) ^ polynomial;
 8001d34:	8afb      	ldrh	r3, [r7, #22]
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	b21a      	sxth	r2, r3
 8001d3a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d3e:	4053      	eors	r3, r2
 8001d40:	b21b      	sxth	r3, r3
 8001d42:	82fb      	strh	r3, [r7, #22]
 8001d44:	e002      	b.n	8001d4c <os_crc16+0x56>
			else
				remainder <<= 1;
 8001d46:	8afb      	ldrh	r3, [r7, #22]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	82fb      	strh	r3, [r7, #22]
		for (u1_t bit = 8; bit > 0; bit--) {
 8001d4c:	7bfb      	ldrb	r3, [r7, #15]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	73fb      	strb	r3, [r7, #15]
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1e9      	bne.n	8001d2c <os_crc16+0x36>
	for (uint i = 0; i < len; i++) {
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	613b      	str	r3, [r7, #16]
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d3d4      	bcc.n	8001d10 <os_crc16+0x1a>
		}
	}
	return remainder;
 8001d66:	8afb      	ldrh	r3, [r7, #22]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	371c      	adds	r7, #28
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <micB0>:

// ================================================================================
// BEG AES

static void micB0(u4_t devaddr, u4_t seqno, int dndir, int len)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
 8001d80:	603b      	str	r3, [r7, #0]
	os_clearMem(AESaux, 16);
 8001d82:	2210      	movs	r2, #16
 8001d84:	2100      	movs	r1, #0
 8001d86:	4810      	ldr	r0, [pc, #64]	@ (8001dc8 <micB0+0x54>)
 8001d88:	f008 ff2b 	bl	800abe2 <memset>
	AESaux[0] = 0x49;
 8001d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc8 <micB0+0x54>)
 8001d8e:	2249      	movs	r2, #73	@ 0x49
 8001d90:	701a      	strb	r2, [r3, #0]
	AESaux[5] = dndir ? 1 : 0;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	bf14      	ite	ne
 8001d98:	2301      	movne	r3, #1
 8001d9a:	2300      	moveq	r3, #0
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001dcc <micB0+0x58>)
 8001da0:	701a      	strb	r2, [r3, #0]
	AESaux[15] = len;
 8001da2:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd0 <micB0+0x5c>)
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	701a      	strb	r2, [r3, #0]
	os_wlsbf4(AESaux + 6, devaddr);
 8001daa:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd4 <micB0+0x60>)
 8001dac:	68f9      	ldr	r1, [r7, #12]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff ff57 	bl	8001c62 <os_wlsbf4>
	os_wlsbf4(AESaux + 10, seqno);
 8001db4:	4b08      	ldr	r3, [pc, #32]	@ (8001dd8 <micB0+0x64>)
 8001db6:	68b9      	ldr	r1, [r7, #8]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff52 	bl	8001c62 <os_wlsbf4>
}
 8001dbe:	bf00      	nop
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200000d4 	.word	0x200000d4
 8001dcc:	200000d9 	.word	0x200000d9
 8001dd0:	200000e3 	.word	0x200000e3
 8001dd4:	200000da 	.word	0x200000da
 8001dd8:	200000de 	.word	0x200000de

08001ddc <aes_verifyMic>:

static int aes_verifyMic(xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir,
		xref2u1_t pdu, int len)
{
 8001ddc:	b590      	push	{r4, r7, lr}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
 8001de8:	603b      	str	r3, [r7, #0]
	micB0(devaddr, seqno, dndir, len);
 8001dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	68b8      	ldr	r0, [r7, #8]
 8001df2:	f7ff ffbf 	bl	8001d74 <micB0>
	os_copyMem(AESkey, key, 16);
 8001df6:	2210      	movs	r2, #16
 8001df8:	68f9      	ldr	r1, [r7, #12]
 8001dfa:	480d      	ldr	r0, [pc, #52]	@ (8001e30 <aes_verifyMic+0x54>)
 8001dfc:	f008 ff1e 	bl	800ac3c <memcpy>
	return os_aes(AES_MIC, pdu, len) == os_rmsbf4(pdu + len);
 8001e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	461a      	mov	r2, r3
 8001e06:	6a39      	ldr	r1, [r7, #32]
 8001e08:	2002      	movs	r0, #2
 8001e0a:	f7fe fcf5 	bl	80007f8 <os_aes>
 8001e0e:	4604      	mov	r4, r0
 8001e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e12:	6a3a      	ldr	r2, [r7, #32]
 8001e14:	4413      	add	r3, r2
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff feef 	bl	8001bfa <os_rmsbf4>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	429c      	cmp	r4, r3
 8001e20:	bf0c      	ite	eq
 8001e22:	2301      	moveq	r3, #1
 8001e24:	2300      	movne	r3, #0
 8001e26:	b2db      	uxtb	r3, r3
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd90      	pop	{r4, r7, pc}
 8001e30:	200000e4 	.word	0x200000e4

08001e34 <aes_appendMic>:

static void aes_appendMic(xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir,
		xref2u1_t pdu, int len)
{
 8001e34:	b590      	push	{r4, r7, lr}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	603b      	str	r3, [r7, #0]
	micB0(devaddr, seqno, dndir, len);
 8001e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	68b8      	ldr	r0, [r7, #8]
 8001e4a:	f7ff ff93 	bl	8001d74 <micB0>
	os_copyMem(AESkey, key, 16);
 8001e4e:	2210      	movs	r2, #16
 8001e50:	68f9      	ldr	r1, [r7, #12]
 8001e52:	480b      	ldr	r0, [pc, #44]	@ (8001e80 <aes_appendMic+0x4c>)
 8001e54:	f008 fef2 	bl	800ac3c <memcpy>
	// MSB because of internal structure of AES
	os_wmsbf4(pdu + len, os_aes(AES_MIC, pdu, len));
 8001e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5a:	6a3a      	ldr	r2, [r7, #32]
 8001e5c:	18d4      	adds	r4, r2, r3
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	461a      	mov	r2, r3
 8001e64:	6a39      	ldr	r1, [r7, #32]
 8001e66:	2002      	movs	r0, #2
 8001e68:	f7fe fcc6 	bl	80007f8 <os_aes>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4620      	mov	r0, r4
 8001e72:	f7ff ff17 	bl	8001ca4 <os_wmsbf4>
}
 8001e76:	bf00      	nop
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd90      	pop	{r4, r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	200000e4 	.word	0x200000e4

08001e84 <aes_appendMic0>:

static void aes_appendMic0(xref2u1_t pdu, int len)
{
 8001e84:	b590      	push	{r4, r7, lr}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
	os_getDevKey(AESkey);
 8001e8e:	480b      	ldr	r0, [pc, #44]	@ (8001ebc <aes_appendMic0+0x38>)
 8001e90:	f002 fe38 	bl	8004b04 <os_getDevKey>
	os_wmsbf4(pdu + len, os_aes(AES_MIC | AES_MICNOAUX, pdu, len)); // MSB because of internal structure of AES
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	18d4      	adds	r4, r2, r3
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	200a      	movs	r0, #10
 8001ea4:	f7fe fca8 	bl	80007f8 <os_aes>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4620      	mov	r0, r4
 8001eae:	f7ff fef9 	bl	8001ca4 <os_wmsbf4>
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd90      	pop	{r4, r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	200000e4 	.word	0x200000e4

08001ec0 <aes_verifyMic0>:

static int aes_verifyMic0(xref2u1_t pdu, int len)
{
 8001ec0:	b590      	push	{r4, r7, lr}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
	os_getDevKey(AESkey);
 8001eca:	480d      	ldr	r0, [pc, #52]	@ (8001f00 <aes_verifyMic0+0x40>)
 8001ecc:	f002 fe1a 	bl	8004b04 <os_getDevKey>
	return os_aes(AES_MIC | AES_MICNOAUX, pdu, len) == os_rmsbf4(pdu + len);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	200a      	movs	r0, #10
 8001eda:	f7fe fc8d 	bl	80007f8 <os_aes>
 8001ede:	4604      	mov	r4, r0
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fe87 	bl	8001bfa <os_rmsbf4>
 8001eec:	4603      	mov	r3, r0
 8001eee:	429c      	cmp	r4, r3
 8001ef0:	bf0c      	ite	eq
 8001ef2:	2301      	moveq	r3, #1
 8001ef4:	2300      	movne	r3, #0
 8001ef6:	b2db      	uxtb	r3, r3
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd90      	pop	{r4, r7, pc}
 8001f00:	200000e4 	.word	0x200000e4

08001f04 <aes_encrypt>:

static void aes_encrypt(xref2u1_t pdu, int len)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
	os_getDevKey(AESkey);
 8001f0e:	4807      	ldr	r0, [pc, #28]	@ (8001f2c <aes_encrypt+0x28>)
 8001f10:	f002 fdf8 	bl	8004b04 <os_getDevKey>
	os_aes(AES_ENC, pdu, len);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	461a      	mov	r2, r3
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	f7fe fc6b 	bl	80007f8 <os_aes>
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	200000e4 	.word	0x200000e4

08001f30 <aes_cipher>:

static void aes_cipher(xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir,
		xref2u1_t payload, int len)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	603b      	str	r3, [r7, #0]
	if (len <= 0)
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	dd29      	ble.n	8001f98 <aes_cipher+0x68>
		return;
	os_clearMem(AESaux, 16);
 8001f44:	2210      	movs	r2, #16
 8001f46:	2100      	movs	r1, #0
 8001f48:	4815      	ldr	r0, [pc, #84]	@ (8001fa0 <aes_cipher+0x70>)
 8001f4a:	f008 fe4a 	bl	800abe2 <memset>
	AESaux[0] = AESaux[15] = 1; // mode=cipher / dir=down / block counter=1
 8001f4e:	4b15      	ldr	r3, [pc, #84]	@ (8001fa4 <aes_cipher+0x74>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	701a      	strb	r2, [r3, #0]
 8001f54:	4a12      	ldr	r2, [pc, #72]	@ (8001fa0 <aes_cipher+0x70>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	7013      	strb	r3, [r2, #0]
	AESaux[5] = dndir ? 1 : 0;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	bf14      	ite	ne
 8001f60:	2301      	movne	r3, #1
 8001f62:	2300      	moveq	r3, #0
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	4b10      	ldr	r3, [pc, #64]	@ (8001fa8 <aes_cipher+0x78>)
 8001f68:	701a      	strb	r2, [r3, #0]
	os_wlsbf4(AESaux + 6, devaddr);
 8001f6a:	4b10      	ldr	r3, [pc, #64]	@ (8001fac <aes_cipher+0x7c>)
 8001f6c:	68b9      	ldr	r1, [r7, #8]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff fe77 	bl	8001c62 <os_wlsbf4>
	os_wlsbf4(AESaux + 10, seqno);
 8001f74:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb0 <aes_cipher+0x80>)
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fe72 	bl	8001c62 <os_wlsbf4>
	os_copyMem(AESkey, key, 16);
 8001f7e:	2210      	movs	r2, #16
 8001f80:	68f9      	ldr	r1, [r7, #12]
 8001f82:	480c      	ldr	r0, [pc, #48]	@ (8001fb4 <aes_cipher+0x84>)
 8001f84:	f008 fe5a 	bl	800ac3c <memcpy>
	os_aes(AES_CTR, payload, len);
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	69b9      	ldr	r1, [r7, #24]
 8001f90:	2004      	movs	r0, #4
 8001f92:	f7fe fc31 	bl	80007f8 <os_aes>
 8001f96:	e000      	b.n	8001f9a <aes_cipher+0x6a>
		return;
 8001f98:	bf00      	nop
}
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	200000d4 	.word	0x200000d4
 8001fa4:	200000e3 	.word	0x200000e3
 8001fa8:	200000d9 	.word	0x200000d9
 8001fac:	200000da 	.word	0x200000da
 8001fb0:	200000de 	.word	0x200000de
 8001fb4:	200000e4 	.word	0x200000e4

08001fb8 <aes_sessKeys>:

static void aes_sessKeys(u2_t devnonce, xref2cu1_t artnonce, xref2u1_t nwkkey,
		xref2u1_t artkey)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	81fb      	strh	r3, [r7, #14]
	os_clearMem(nwkkey, 16);
 8001fc8:	2210      	movs	r2, #16
 8001fca:	2100      	movs	r1, #0
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f008 fe08 	bl	800abe2 <memset>
	nwkkey[0] = 0x01;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	701a      	strb	r2, [r3, #0]
	os_copyMem(nwkkey + 1, artnonce, LEN_ARTNONCE + LEN_NETID);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	2206      	movs	r2, #6
 8001fde:	68b9      	ldr	r1, [r7, #8]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f008 fe2b 	bl	800ac3c <memcpy>
	os_wlsbf2(nwkkey + 1 + LEN_ARTNONCE + LEN_NETID, devnonce);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3307      	adds	r3, #7
 8001fea:	89fa      	ldrh	r2, [r7, #14]
 8001fec:	4611      	mov	r1, r2
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fe20 	bl	8001c34 <os_wlsbf2>
	os_copyMem(artkey, nwkkey, 16);
 8001ff4:	2210      	movs	r2, #16
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	6838      	ldr	r0, [r7, #0]
 8001ffa:	f008 fe1f 	bl	800ac3c <memcpy>
	artkey[0] = 0x02;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	2202      	movs	r2, #2
 8002002:	701a      	strb	r2, [r3, #0]

	os_getDevKey(AESkey);
 8002004:	4809      	ldr	r0, [pc, #36]	@ (800202c <aes_sessKeys+0x74>)
 8002006:	f002 fd7d 	bl	8004b04 <os_getDevKey>
	os_aes(AES_ENC, nwkkey, 16);
 800200a:	2210      	movs	r2, #16
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	2000      	movs	r0, #0
 8002010:	f7fe fbf2 	bl	80007f8 <os_aes>
	os_getDevKey(AESkey);
 8002014:	4805      	ldr	r0, [pc, #20]	@ (800202c <aes_sessKeys+0x74>)
 8002016:	f002 fd75 	bl	8004b04 <os_getDevKey>
	os_aes(AES_ENC, artkey, 16);
 800201a:	2210      	movs	r2, #16
 800201c:	6839      	ldr	r1, [r7, #0]
 800201e:	2000      	movs	r0, #0
 8002020:	f7fe fbea 	bl	80007f8 <os_aes>
}
 8002024:	bf00      	nop
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	200000e4 	.word	0x200000e4

08002030 <getSensitivity>:
		{ 141 - 138, 141 - 135, 141 - 132 },  // SF11
		{ 141 - 141, 141 - 138, 141 - 135 }   // SF12
};

int getSensitivity(rps_t rps)
{
 8002030:	b590      	push	{r4, r7, lr}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	80fb      	strh	r3, [r7, #6]
	return -141 + SENSITIVITY[getSf(rps)][getBw(rps)];
 800203a:	88fb      	ldrh	r3, [r7, #6]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff fca3 	bl	8001988 <getSf>
 8002042:	4603      	mov	r3, r0
 8002044:	461c      	mov	r4, r3
 8002046:	88fb      	ldrh	r3, [r7, #6]
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff fcad 	bl	80019a8 <getBw>
 800204e:	4603      	mov	r3, r0
 8002050:	4619      	mov	r1, r3
 8002052:	4a06      	ldr	r2, [pc, #24]	@ (800206c <getSensitivity+0x3c>)
 8002054:	4623      	mov	r3, r4
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	4423      	add	r3, r4
 800205a:	4413      	add	r3, r2
 800205c:	440b      	add	r3, r1
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	3b8d      	subs	r3, #141	@ 0x8d
}
 8002062:	4618      	mov	r0, r3
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	bd90      	pop	{r4, r7, pc}
 800206a:	bf00      	nop
 800206c:	0800c050 	.word	0x0800c050

08002070 <calcAirTime>:

ostime_t calcAirTime(rps_t rps, u1_t plen)
{
 8002070:	b590      	push	{r4, r7, lr}
 8002072:	b087      	sub	sp, #28
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	460a      	mov	r2, r1
 800207a:	80fb      	strh	r3, [r7, #6]
 800207c:	4613      	mov	r3, r2
 800207e:	717b      	strb	r3, [r7, #5]
	u1_t bw = getBw(rps);  // 0,1,2 = 125,250,500kHz
 8002080:	88fb      	ldrh	r3, [r7, #6]
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff fc90 	bl	80019a8 <getBw>
 8002088:	4603      	mov	r3, r0
 800208a:	72fb      	strb	r3, [r7, #11]
	u1_t sf = getSf(rps);  // 0=FSK, 1..6 = SF7..12
 800208c:	88fb      	ldrh	r3, [r7, #6]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff fc7a 	bl	8001988 <getSf>
 8002094:	4603      	mov	r3, r0
 8002096:	72bb      	strb	r3, [r7, #10]
	if (sf == FSK) {
 8002098:	7abb      	ldrb	r3, [r7, #10]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10c      	bne.n	80020b8 <calcAirTime+0x48>
		return (plen + /*preamble*/5 + /*syncword*/3 + /*len*/1 + /*crc*/2)
 800209e:	797b      	ldrb	r3, [r7, #5]
 80020a0:	330b      	adds	r3, #11
				* /*bits/byte*/8 * (s4_t) OSTICKS_PER_SEC / /*kbit/s*/50000;
 80020a2:	f44f 327a 	mov.w	r2, #256000	@ 0x3e800
 80020a6:	fb02 f303 	mul.w	r3, r2, r3
 80020aa:	4a3c      	ldr	r2, [pc, #240]	@ (800219c <calcAirTime+0x12c>)
 80020ac:	fb82 1203 	smull	r1, r2, r2, r3
 80020b0:	1312      	asrs	r2, r2, #12
 80020b2:	17db      	asrs	r3, r3, #31
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	e06d      	b.n	8002194 <calcAirTime+0x124>
	}
	u1_t sfx = 4 * (sf + (7 - SF7));
 80020b8:	7abb      	ldrb	r3, [r7, #10]
 80020ba:	3306      	adds	r3, #6
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	75fb      	strb	r3, [r7, #23]
	u1_t q = sfx - (sf >= SF11 ? 8 : 0);
 80020c2:	7abb      	ldrb	r3, [r7, #10]
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d901      	bls.n	80020cc <calcAirTime+0x5c>
 80020c8:	2308      	movs	r3, #8
 80020ca:	e000      	b.n	80020ce <calcAirTime+0x5e>
 80020cc:	2300      	movs	r3, #0
 80020ce:	7dfa      	ldrb	r2, [r7, #23]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	727b      	strb	r3, [r7, #9]
	int tmp = 8 * plen - sfx + 28 + (getNocrc(rps) ? 0 : 16)
 80020d4:	797b      	ldrb	r3, [r7, #5]
 80020d6:	00da      	lsls	r2, r3, #3
 80020d8:	7dfb      	ldrb	r3, [r7, #23]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	f103 041c 	add.w	r4, r3, #28
 80020e0:	88fb      	ldrh	r3, [r7, #6]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fc9d 	bl	8001a22 <getNocrc>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <calcAirTime+0x82>
 80020ee:	2300      	movs	r3, #0
 80020f0:	e000      	b.n	80020f4 <calcAirTime+0x84>
 80020f2:	2310      	movs	r3, #16
 80020f4:	441c      	add	r4, r3
			- (getIh(rps) ? 20 : 0);
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff fcb9 	bl	8001a70 <getIh>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <calcAirTime+0x98>
 8002104:	2314      	movs	r3, #20
 8002106:	e000      	b.n	800210a <calcAirTime+0x9a>
 8002108:	2300      	movs	r3, #0
	int tmp = 8 * plen - sfx + 28 + (getNocrc(rps) ? 0 : 16)
 800210a:	1ae3      	subs	r3, r4, r3
 800210c:	613b      	str	r3, [r7, #16]
	if (tmp > 0) {
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	2b00      	cmp	r3, #0
 8002112:	dd15      	ble.n	8002140 <calcAirTime+0xd0>
		tmp = (tmp + q - 1) / q;
 8002114:	7a7a      	ldrb	r2, [r7, #9]
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4413      	add	r3, r2
 800211a:	1e5a      	subs	r2, r3, #1
 800211c:	7a7b      	ldrb	r3, [r7, #9]
 800211e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002122:	613b      	str	r3, [r7, #16]
		tmp *= getCr(rps) + 5;
 8002124:	88fb      	ldrh	r3, [r7, #6]
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff fc50 	bl	80019cc <getCr>
 800212c:	4603      	mov	r3, r0
 800212e:	1d5a      	adds	r2, r3, #5
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	fb02 f303 	mul.w	r3, r2, r3
 8002136:	613b      	str	r3, [r7, #16]
		tmp += 8;
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	3308      	adds	r3, #8
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	e001      	b.n	8002144 <calcAirTime+0xd4>
	} else {
		tmp = 8;
 8002140:	2308      	movs	r3, #8
 8002142:	613b      	str	r3, [r7, #16]
	}
	tmp = (tmp << 2) + /*preamble*/49 /* 4 * (8 + 4.25) */;
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	3331      	adds	r3, #49	@ 0x31
 800214a:	613b      	str	r3, [r7, #16]
	//
	// osticks =  tmp * OSTICKS_PER_SEC * 1<<sf / bw
	//
	// 3 => counter reduced divisor 125000/8 => 15625
	// 2 => counter 2 shift on tmp
	sfx = sf + (7 - SF7) - (3 + 2) - bw;
 800214c:	7aba      	ldrb	r2, [r7, #10]
 800214e:	7afb      	ldrb	r3, [r7, #11]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	b2db      	uxtb	r3, r3
 8002154:	3301      	adds	r3, #1
 8002156:	75fb      	strb	r3, [r7, #23]
	int div = 15625;
 8002158:	f643 5309 	movw	r3, #15625	@ 0x3d09
 800215c:	60fb      	str	r3, [r7, #12]
	if (sfx > 4) {
 800215e:	7dfb      	ldrb	r3, [r7, #23]
 8002160:	2b04      	cmp	r3, #4
 8002162:	d907      	bls.n	8002174 <calcAirTime+0x104>
		// prevent 32bit signed int overflow in last step
		div >>= sfx - 4;
 8002164:	7dfb      	ldrb	r3, [r7, #23]
 8002166:	3b04      	subs	r3, #4
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	fa42 f303 	asr.w	r3, r2, r3
 800216e:	60fb      	str	r3, [r7, #12]
		sfx = 4;
 8002170:	2304      	movs	r3, #4
 8002172:	75fb      	strb	r3, [r7, #23]
	}
	// Need 32bit arithmetic for this last step
	return (((ostime_t) tmp << sfx) * OSTICKS_PER_SEC + div / 2) / div;
 8002174:	7dfb      	ldrb	r3, [r7, #23]
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002180:	fb03 f202 	mul.w	r2, r3, r2
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	0fd9      	lsrs	r1, r3, #31
 8002188:	440b      	add	r3, r1
 800218a:	105b      	asrs	r3, r3, #1
 800218c:	441a      	add	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8002194:	4618      	mov	r0, r3
 8002196:	371c      	adds	r7, #28
 8002198:	46bd      	mov	sp, r7
 800219a:	bd90      	pop	{r4, r7, pc}
 800219c:	14f8b589 	.word	0x14f8b589

080021a0 <calcRxWindow>:
    us2osticksRound(128<<0)   // ------    DR_SF7CR
#endif
		};

static ostime_t calcRxWindow(u1_t secs, dr_t dr)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b087      	sub	sp, #28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	460a      	mov	r2, r1
 80021aa:	71fb      	strb	r3, [r7, #7]
 80021ac:	4613      	mov	r3, r2
 80021ae:	71bb      	strb	r3, [r7, #6]
	ostime_t rxoff, err;
	if (secs == 0) {
 80021b0:	79fb      	ldrb	r3, [r7, #7]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d108      	bne.n	80021c8 <calcRxWindow+0x28>
		// aka 128 secs (next becaon)
		rxoff = LMIC.drift;
 80021b6:	4b22      	ldr	r3, [pc, #136]	@ (8002240 <calcRxWindow+0xa0>)
 80021b8:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 80021bc:	617b      	str	r3, [r7, #20]
		err = LMIC.lastDriftDiff;
 80021be:	4b20      	ldr	r3, [pc, #128]	@ (8002240 <calcRxWindow+0xa0>)
 80021c0:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 80021c4:	613b      	str	r3, [r7, #16]
 80021c6:	e011      	b.n	80021ec <calcRxWindow+0x4c>
	} else {
		// scheduled RX window within secs into current beacon period
		rxoff = (LMIC.drift * (ostime_t) secs) >> BCN_INTV_exp;
 80021c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002240 <calcRxWindow+0xa0>)
 80021ca:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 80021ce:	461a      	mov	r2, r3
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	fb02 f303 	mul.w	r3, r2, r3
 80021d6:	11db      	asrs	r3, r3, #7
 80021d8:	617b      	str	r3, [r7, #20]
		err = (LMIC.lastDriftDiff * (ostime_t) secs) >> BCN_INTV_exp;
 80021da:	4b19      	ldr	r3, [pc, #100]	@ (8002240 <calcRxWindow+0xa0>)
 80021dc:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 80021e0:	461a      	mov	r2, r3
 80021e2:	79fb      	ldrb	r3, [r7, #7]
 80021e4:	fb02 f303 	mul.w	r3, r2, r3
 80021e8:	11db      	asrs	r3, r3, #7
 80021ea:	613b      	str	r3, [r7, #16]
	}
	u1_t rxsyms = MINRX_SYMS;
 80021ec:	2305      	movs	r3, #5
 80021ee:	73fb      	strb	r3, [r7, #15]
	err += (ostime_t) LMIC.maxDriftDiff * LMIC.missedBcns;
 80021f0:	4b13      	ldr	r3, [pc, #76]	@ (8002240 <calcRxWindow+0xa0>)
 80021f2:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 80021f6:	461a      	mov	r2, r3
 80021f8:	4b11      	ldr	r3, [pc, #68]	@ (8002240 <calcRxWindow+0xa0>)
 80021fa:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 80021fe:	fb02 f303 	mul.w	r3, r2, r3
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4413      	add	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
	LMIC.rxsyms = MINRX_SYMS + (err / dr2hsym(dr));
 8002208:	79bb      	ldrb	r3, [r7, #6]
 800220a:	4a0e      	ldr	r2, [pc, #56]	@ (8002244 <calcRxWindow+0xa4>)
 800220c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	fb92 f3f3 	sdiv	r3, r2, r3
 8002216:	b2db      	uxtb	r3, r3
 8002218:	3305      	adds	r3, #5
 800221a:	b2da      	uxtb	r2, r3
 800221c:	4b08      	ldr	r3, [pc, #32]	@ (8002240 <calcRxWindow+0xa0>)
 800221e:	741a      	strb	r2, [r3, #16]

	return (rxsyms - PAMBL_SYMS) * dr2hsym(dr) + rxoff;
 8002220:	7bfb      	ldrb	r3, [r7, #15]
 8002222:	3b08      	subs	r3, #8
 8002224:	79ba      	ldrb	r2, [r7, #6]
 8002226:	4907      	ldr	r1, [pc, #28]	@ (8002244 <calcRxWindow+0xa4>)
 8002228:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800222c:	fb03 f202 	mul.w	r2, r3, r2
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	4413      	add	r3, r2
}
 8002234:	4618      	mov	r0, r3
 8002236:	371c      	adds	r7, #28
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	200001f0 	.word	0x200001f0
 8002244:	0800c074 	.word	0x0800c074

08002248 <calcBcnRxWindowFromMillis>:

// Setup beacon RX parameters assuming we have an error of ms (aka +/-(ms/2))
static void calcBcnRxWindowFromMillis(u1_t ms, bit_t ini)
{
 8002248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800224c:	b087      	sub	sp, #28
 800224e:	af00      	add	r7, sp, #0
 8002250:	4606      	mov	r6, r0
 8002252:	4608      	mov	r0, r1
 8002254:	4631      	mov	r1, r6
 8002256:	73f9      	strb	r1, [r7, #15]
 8002258:	4601      	mov	r1, r0
 800225a:	73b9      	strb	r1, [r7, #14]
	if (ini) {
 800225c:	7bb9      	ldrb	r1, [r7, #14]
 800225e:	2900      	cmp	r1, #0
 8002260:	d014      	beq.n	800228c <calcBcnRxWindowFromMillis+0x44>
		LMIC.drift = 0;
 8002262:	493b      	ldr	r1, [pc, #236]	@ (8002350 <calcBcnRxWindowFromMillis+0x108>)
 8002264:	2000      	movs	r0, #0
 8002266:	f8a1 00b4 	strh.w	r0, [r1, #180]	@ 0xb4
		LMIC.maxDriftDiff = 0;
 800226a:	4939      	ldr	r1, [pc, #228]	@ (8002350 <calcBcnRxWindowFromMillis+0x108>)
 800226c:	2000      	movs	r0, #0
 800226e:	f8a1 00b8 	strh.w	r0, [r1, #184]	@ 0xb8
		LMIC.missedBcns = 0;
 8002272:	4937      	ldr	r1, [pc, #220]	@ (8002350 <calcBcnRxWindowFromMillis+0x108>)
 8002274:	2000      	movs	r0, #0
 8002276:	f881 0131 	strb.w	r0, [r1, #305]	@ 0x131
		LMIC.bcninfo.flags |= BCN_NODRIFT | BCN_NODDIFF;
 800227a:	4935      	ldr	r1, [pc, #212]	@ (8002350 <calcBcnRxWindowFromMillis+0x108>)
 800227c:	f891 1196 	ldrb.w	r1, [r1, #406]	@ 0x196
 8002280:	f041 010c 	orr.w	r1, r1, #12
 8002284:	b2c8      	uxtb	r0, r1
 8002286:	4932      	ldr	r1, [pc, #200]	@ (8002350 <calcBcnRxWindowFromMillis+0x108>)
 8002288:	f881 0196 	strb.w	r0, [r1, #406]	@ 0x196
	}
	ostime_t hsym = dr2hsym(DR_BCN);
 800228c:	2142      	movs	r1, #66	@ 0x42
 800228e:	6179      	str	r1, [r7, #20]
	LMIC.bcnRxsyms = MINRX_SYMS + ms2osticksCeil(ms) / hsym;
 8002290:	7bf9      	ldrb	r1, [r7, #15]
 8002292:	2000      	movs	r0, #0
 8002294:	460c      	mov	r4, r1
 8002296:	4605      	mov	r5, r0
 8002298:	4620      	mov	r0, r4
 800229a:	4629      	mov	r1, r5
 800229c:	f04f 0a00 	mov.w	sl, #0
 80022a0:	f04f 0b00 	mov.w	fp, #0
 80022a4:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 80022a8:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 80022ac:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 80022b0:	4650      	mov	r0, sl
 80022b2:	4659      	mov	r1, fp
 80022b4:	1b02      	subs	r2, r0, r4
 80022b6:	eb61 0305 	sbc.w	r3, r1, r5
 80022ba:	f04f 0000 	mov.w	r0, #0
 80022be:	f04f 0100 	mov.w	r1, #0
 80022c2:	0099      	lsls	r1, r3, #2
 80022c4:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80022c8:	0090      	lsls	r0, r2, #2
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	eb12 0804 	adds.w	r8, r2, r4
 80022d2:	eb43 0905 	adc.w	r9, r3, r5
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	f04f 0300 	mov.w	r3, #0
 80022de:	ea4f 2309 	mov.w	r3, r9, lsl #8
 80022e2:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 80022e6:	ea4f 2208 	mov.w	r2, r8, lsl #8
 80022ea:	4690      	mov	r8, r2
 80022ec:	4699      	mov	r9, r3
 80022ee:	4642      	mov	r2, r8
 80022f0:	464b      	mov	r3, r9
 80022f2:	f240 31e7 	movw	r1, #999	@ 0x3e7
 80022f6:	1851      	adds	r1, r2, r1
 80022f8:	6039      	str	r1, [r7, #0]
 80022fa:	f143 0300 	adc.w	r3, r3, #0
 80022fe:	607b      	str	r3, [r7, #4]
 8002300:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002304:	f04f 0300 	mov.w	r3, #0
 8002308:	e9d7 0100 	ldrd	r0, r1, [r7]
 800230c:	f7fd ff5e 	bl	80001cc <__aeabi_ldivmod>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	fb92 f3f3 	sdiv	r3, r2, r3
 800231a:	b2db      	uxtb	r3, r3
 800231c:	3305      	adds	r3, #5
 800231e:	b2da      	uxtb	r2, r3
 8002320:	4b0b      	ldr	r3, [pc, #44]	@ (8002350 <calcBcnRxWindowFromMillis+0x108>)
 8002322:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
	LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks
 8002326:	4b0a      	ldr	r3, [pc, #40]	@ (8002350 <calcBcnRxWindowFromMillis+0x108>)
 8002328:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 800232c:	f503 127a 	add.w	r2, r3, #4096000	@ 0x3e8000
			- (LMIC.bcnRxsyms - PAMBL_SYMS) * hsym;
 8002330:	4b07      	ldr	r3, [pc, #28]	@ (8002350 <calcBcnRxWindowFromMillis+0x108>)
 8002332:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 8002336:	3b08      	subs	r3, #8
 8002338:	6979      	ldr	r1, [r7, #20]
 800233a:	fb01 f303 	mul.w	r3, r1, r3
 800233e:	1ad3      	subs	r3, r2, r3
	LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks
 8002340:	4a03      	ldr	r2, [pc, #12]	@ (8002350 <calcBcnRxWindowFromMillis+0x108>)
 8002342:	f8c2 318c 	str.w	r3, [r2, #396]	@ 0x18c
}
 8002346:	bf00      	nop
 8002348:	371c      	adds	r7, #28
 800234a:	46bd      	mov	sp, r7
 800234c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002350:	200001f0 	.word	0x200001f0

08002354 <rxschedInit>:

// Setup scheduled RX window (ping/multicast slot)
static void rxschedInit(xref2rxsched_t rxsched)
{
 8002354:	b590      	push	{r4, r7, lr}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
	os_clearMem(AESkey, 16);
 800235c:	2210      	movs	r2, #16
 800235e:	2100      	movs	r1, #0
 8002360:	482e      	ldr	r0, [pc, #184]	@ (800241c <rxschedInit+0xc8>)
 8002362:	f008 fc3e 	bl	800abe2 <memset>
	os_clearMem(LMIC.frame + 8, 8);
 8002366:	4b2e      	ldr	r3, [pc, #184]	@ (8002420 <rxschedInit+0xcc>)
 8002368:	2208      	movs	r2, #8
 800236a:	2100      	movs	r1, #0
 800236c:	4618      	mov	r0, r3
 800236e:	f008 fc38 	bl	800abe2 <memset>
	os_wlsbf4(LMIC.frame, LMIC.bcninfo.time);
 8002372:	4b2c      	ldr	r3, [pc, #176]	@ (8002424 <rxschedInit+0xd0>)
 8002374:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002378:	4619      	mov	r1, r3
 800237a:	482b      	ldr	r0, [pc, #172]	@ (8002428 <rxschedInit+0xd4>)
 800237c:	f7ff fc71 	bl	8001c62 <os_wlsbf4>
	os_wlsbf4(LMIC.frame + 4, LMIC.devaddr);
 8002380:	4a2a      	ldr	r2, [pc, #168]	@ (800242c <rxschedInit+0xd8>)
 8002382:	4b28      	ldr	r3, [pc, #160]	@ (8002424 <rxschedInit+0xd0>)
 8002384:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002388:	4619      	mov	r1, r3
 800238a:	4610      	mov	r0, r2
 800238c:	f7ff fc69 	bl	8001c62 <os_wlsbf4>
	os_aes(AES_ENC, LMIC.frame, 16);
 8002390:	2210      	movs	r2, #16
 8002392:	4925      	ldr	r1, [pc, #148]	@ (8002428 <rxschedInit+0xd4>)
 8002394:	2000      	movs	r0, #0
 8002396:	f7fe fa2f 	bl	80007f8 <os_aes>
	u1_t intvExp = rxsched->intvExp;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	785b      	ldrb	r3, [r3, #1]
 800239e:	73fb      	strb	r3, [r7, #15]
	ostime_t off = os_rlsbf2(LMIC.frame) & (0x0FFF >> (7 - intvExp)); // random offset (slot units)
 80023a0:	4821      	ldr	r0, [pc, #132]	@ (8002428 <rxschedInit+0xd4>)
 80023a2:	f7ff fbf8 	bl	8001b96 <os_rlsbf2>
 80023a6:	4603      	mov	r3, r0
 80023a8:	4619      	mov	r1, r3
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	f1c3 0307 	rsb	r3, r3, #7
 80023b0:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80023b4:	fa42 f303 	asr.w	r3, r2, r3
 80023b8:	400b      	ands	r3, r1
 80023ba:	60bb      	str	r3, [r7, #8]
	rxsched->rxbase = (LMIC.bcninfo.txtime +
 80023bc:	4b19      	ldr	r3, [pc, #100]	@ (8002424 <rxschedInit+0xd0>)
 80023be:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
	BCN_RESERVE_osticks + ms2osticks(BCN_SLOT_SPAN_ms * off)); // random offset osticks
 80023c2:	4619      	mov	r1, r3
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	4613      	mov	r3, r2
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	1a9b      	subs	r3, r3, r2
 80023cc:	019b      	lsls	r3, r3, #6
 80023ce:	440b      	add	r3, r1
 80023d0:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 80023d4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80023d8:	461a      	mov	r2, r3
	rxsched->rxbase = (LMIC.bcninfo.txtime +
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	605a      	str	r2, [r3, #4]
	rxsched->slot = 0;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	709a      	strb	r2, [r3, #2]
	rxsched->rxtime = rxsched->rxbase
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685c      	ldr	r4, [r3, #4]
			- calcRxWindow(/*secs BCN_RESERVE*/2 + (1 << intvExp), rxsched->dr);
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
 80023ea:	2201      	movs	r2, #1
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	3302      	adds	r3, #2
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	4619      	mov	r1, r3
 80023fc:	4610      	mov	r0, r2
 80023fe:	f7ff fecf 	bl	80021a0 <calcRxWindow>
 8002402:	4603      	mov	r3, r0
 8002404:	1ae2      	subs	r2, r4, r3
	rxsched->rxtime = rxsched->rxbase
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	609a      	str	r2, [r3, #8]
	rxsched->rxsyms = LMIC.rxsyms;
 800240a:	4b06      	ldr	r3, [pc, #24]	@ (8002424 <rxschedInit+0xd0>)
 800240c:	7c1a      	ldrb	r2, [r3, #16]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	70da      	strb	r2, [r3, #3]
}
 8002412:	bf00      	nop
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	bd90      	pop	{r4, r7, pc}
 800241a:	bf00      	nop
 800241c:	200000e4 	.word	0x200000e4
 8002420:	20000340 	.word	0x20000340
 8002424:	200001f0 	.word	0x200001f0
 8002428:	20000338 	.word	0x20000338
 800242c:	2000033c 	.word	0x2000033c

08002430 <rxschedNext>:

static bit_t rxschedNext(xref2rxsched_t rxsched, ostime_t cando)
{
 8002430:	b590      	push	{r4, r7, lr}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
	again: if (rxsched->rxtime - cando >= 0)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	db01      	blt.n	800244a <rxschedNext+0x1a>
		return 1;
 8002446:	2301      	movs	r3, #1
 8002448:	e03a      	b.n	80024c0 <rxschedNext+0x90>
	u1_t slot;
	if ((slot = rxsched->slot) >= 128)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	789b      	ldrb	r3, [r3, #2]
 800244e:	73fb      	strb	r3, [r7, #15]
 8002450:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002454:	2b00      	cmp	r3, #0
 8002456:	da01      	bge.n	800245c <rxschedNext+0x2c>
		return 0;
 8002458:	2300      	movs	r3, #0
 800245a:	e031      	b.n	80024c0 <rxschedNext+0x90>
	u1_t intv = 1 << rxsched->intvExp;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	785b      	ldrb	r3, [r3, #1]
 8002460:	461a      	mov	r2, r3
 8002462:	2301      	movs	r3, #1
 8002464:	4093      	lsls	r3, r2
 8002466:	73bb      	strb	r3, [r7, #14]
	if ((rxsched->slot = (slot += (intv))) >= 128)
 8002468:	7bfa      	ldrb	r2, [r7, #15]
 800246a:	7bbb      	ldrb	r3, [r7, #14]
 800246c:	4413      	add	r3, r2
 800246e:	73fb      	strb	r3, [r7, #15]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	7bfa      	ldrb	r2, [r7, #15]
 8002474:	709a      	strb	r2, [r3, #2]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	789b      	ldrb	r3, [r3, #2]
 800247a:	b25b      	sxtb	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	da01      	bge.n	8002484 <rxschedNext+0x54>
		return 0;
 8002480:	2300      	movs	r3, #0
 8002482:	e01d      	b.n	80024c0 <rxschedNext+0x90>
	rxsched->rxtime = rxsched->rxbase
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6859      	ldr	r1, [r3, #4]
			+ ((BCN_WINDOW_osticks * (ostime_t) slot) >> BCN_INTV_exp)
 8002488:	7bfa      	ldrb	r2, [r7, #15]
 800248a:	4613      	mov	r3, r2
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	1a9b      	subs	r3, r3, r2
 8002490:	049b      	lsls	r3, r3, #18
 8002492:	11db      	asrs	r3, r3, #7
 8002494:	18cc      	adds	r4, r1, r3
			- calcRxWindow(/*secs BCN_RESERVE*/2 + slot + intv, rxsched->dr);
 8002496:	7bfa      	ldrb	r2, [r7, #15]
 8002498:	7bbb      	ldrb	r3, [r7, #14]
 800249a:	4413      	add	r3, r2
 800249c:	b2db      	uxtb	r3, r3
 800249e:	3302      	adds	r3, #2
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	4619      	mov	r1, r3
 80024a8:	4610      	mov	r0, r2
 80024aa:	f7ff fe79 	bl	80021a0 <calcRxWindow>
 80024ae:	4603      	mov	r3, r0
 80024b0:	1ae2      	subs	r2, r4, r3
	rxsched->rxtime = rxsched->rxbase
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	609a      	str	r2, [r3, #8]
	rxsched->rxsyms = LMIC.rxsyms;
 80024b6:	4b04      	ldr	r3, [pc, #16]	@ (80024c8 <rxschedNext+0x98>)
 80024b8:	7c1a      	ldrb	r2, [r3, #16]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	70da      	strb	r2, [r3, #3]
	goto again;
 80024be:	e7bc      	b.n	800243a <rxschedNext+0xa>
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd90      	pop	{r4, r7, pc}
 80024c8:	200001f0 	.word	0x200001f0

080024cc <rndDelay>:

static ostime_t rndDelay(u1_t secSpan)
{
 80024cc:	b590      	push	{r4, r7, lr}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	71fb      	strb	r3, [r7, #7]
	u2_t r = os_getRndU2();
 80024d6:	f003 faab 	bl	8005a30 <radio_rand1>
 80024da:	4603      	mov	r3, r0
 80024dc:	021b      	lsls	r3, r3, #8
 80024de:	b21c      	sxth	r4, r3
 80024e0:	f003 faa6 	bl	8005a30 <radio_rand1>
 80024e4:	4603      	mov	r3, r0
 80024e6:	b21b      	sxth	r3, r3
 80024e8:	4323      	orrs	r3, r4
 80024ea:	b21b      	sxth	r3, r3
 80024ec:	817b      	strh	r3, [r7, #10]
	ostime_t delay = r;
 80024ee:	897b      	ldrh	r3, [r7, #10]
 80024f0:	60fb      	str	r3, [r7, #12]
	if (delay > OSTICKS_PER_SEC)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80024f8:	dd0b      	ble.n	8002512 <rndDelay+0x46>
		delay = r % (u2_t) OSTICKS_PER_SEC;
 80024fa:	897b      	ldrh	r3, [r7, #10]
 80024fc:	4a11      	ldr	r2, [pc, #68]	@ (8002544 <rndDelay+0x78>)
 80024fe:	fba2 1203 	umull	r1, r2, r2, r3
 8002502:	0ad2      	lsrs	r2, r2, #11
 8002504:	f44f 41fa 	mov.w	r1, #32000	@ 0x7d00
 8002508:	fb01 f202 	mul.w	r2, r1, r2
 800250c:	1a9b      	subs	r3, r3, r2
 800250e:	b29b      	uxth	r3, r3
 8002510:	60fb      	str	r3, [r7, #12]
	if (secSpan > 0)
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d010      	beq.n	800253a <rndDelay+0x6e>
		delay += ((u1_t) r % secSpan) * OSTICKS_PER_SEC;
 8002518:	897b      	ldrh	r3, [r7, #10]
 800251a:	b2db      	uxtb	r3, r3
 800251c:	79fa      	ldrb	r2, [r7, #7]
 800251e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002522:	fb01 f202 	mul.w	r2, r1, r2
 8002526:	1a9b      	subs	r3, r3, r2
 8002528:	b2db      	uxtb	r3, r3
 800252a:	461a      	mov	r2, r3
 800252c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8002530:	fb02 f303 	mul.w	r3, r2, r3
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	4413      	add	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
	return delay;
 800253a:	68fb      	ldr	r3, [r7, #12]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	bd90      	pop	{r4, r7, pc}
 8002544:	10624dd3 	.word	0x10624dd3

08002548 <txDelay>:

static void txDelay(ostime_t reftime, u1_t secSpan)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	70fb      	strb	r3, [r7, #3]
	reftime += rndDelay(secSpan);
 8002554:	78fb      	ldrb	r3, [r7, #3]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff ffb8 	bl	80024cc <rndDelay>
 800255c:	4602      	mov	r2, r0
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4413      	add	r3, r2
 8002562:	607b      	str	r3, [r7, #4]
	if (LMIC.globalDutyRate == 0 || (reftime - LMIC.globalDutyAvail) > 0) {
 8002564:	4b0e      	ldr	r3, [pc, #56]	@ (80025a0 <txDelay+0x58>)
 8002566:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d006      	beq.n	800257c <txDelay+0x34>
 800256e:	4b0c      	ldr	r3, [pc, #48]	@ (80025a0 <txDelay+0x58>)
 8002570:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	dd0c      	ble.n	8002596 <txDelay+0x4e>
		LMIC.globalDutyAvail = reftime;
 800257c:	4a08      	ldr	r2, [pc, #32]	@ (80025a0 <txDelay+0x58>)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
		LMIC.opmode |= OP_RNDTX;
 8002584:	4b06      	ldr	r3, [pc, #24]	@ (80025a0 <txDelay+0x58>)
 8002586:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800258a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800258e:	b29a      	uxth	r2, r3
 8002590:	4b03      	ldr	r3, [pc, #12]	@ (80025a0 <txDelay+0x58>)
 8002592:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	}
}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	200001f0 	.word	0x200001f0

080025a4 <setDrJoin>:

static void setDrJoin(u1_t reason, u1_t dr)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	460a      	mov	r2, r1
 80025ae:	71fb      	strb	r3, [r7, #7]
 80025b0:	4613      	mov	r3, r2
 80025b2:	71bb      	strb	r3, [r7, #6]
					e_.deveui = MAIN::CDEV->getEui(),
					e_.dr = dr|DR_PAGE,
					e_.txpow = LMIC.adrTxPow,
					e_.prevdr = LMIC.datarate|DR_PAGE,
					e_.prevtxpow = LMIC.adrTxPow));
	LMIC.datarate = dr;
 80025b4:	4a04      	ldr	r2, [pc, #16]	@ (80025c8 <setDrJoin+0x24>)
 80025b6:	79bb      	ldrb	r3, [r7, #6]
 80025b8:	f882 30b0 	strb.w	r3, [r2, #176]	@ 0xb0
	DO_DEVDB(LMIC.datarate,datarate);
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	200001f0 	.word	0x200001f0

080025cc <setDrTxpow>:

static void setDrTxpow(u1_t reason, u1_t dr, s1_t pow)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	71fb      	strb	r3, [r7, #7]
 80025d6:	460b      	mov	r3, r1
 80025d8:	71bb      	strb	r3, [r7, #6]
 80025da:	4613      	mov	r3, r2
 80025dc:	717b      	strb	r3, [r7, #5]
					e_.dr = dr|DR_PAGE,
					e_.txpow = pow,
					e_.prevdr = LMIC.datarate|DR_PAGE,
					e_.prevtxpow = LMIC.adrTxPow));

	if (pow != KEEP_TXPOW)
 80025de:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80025e2:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 80025e6:	d003      	beq.n	80025f0 <setDrTxpow+0x24>
		LMIC.adrTxPow = pow;
 80025e8:	4a0e      	ldr	r2, [pc, #56]	@ (8002624 <setDrTxpow+0x58>)
 80025ea:	797b      	ldrb	r3, [r7, #5]
 80025ec:	f882 30af 	strb.w	r3, [r2, #175]	@ 0xaf
	if (LMIC.datarate != dr) {
 80025f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002624 <setDrTxpow+0x58>)
 80025f2:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80025f6:	79ba      	ldrb	r2, [r7, #6]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d00c      	beq.n	8002616 <setDrTxpow+0x4a>
		LMIC.datarate = dr;
 80025fc:	4a09      	ldr	r2, [pc, #36]	@ (8002624 <setDrTxpow+0x58>)
 80025fe:	79bb      	ldrb	r3, [r7, #6]
 8002600:	f882 30b0 	strb.w	r3, [r2, #176]	@ 0xb0
		DO_DEVDB(LMIC.datarate,datarate);
		LMIC.opmode |= OP_NEXTCHNL;
 8002604:	4b07      	ldr	r3, [pc, #28]	@ (8002624 <setDrTxpow+0x58>)
 8002606:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800260a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800260e:	b29a      	uxth	r2, r3
 8002610:	4b04      	ldr	r3, [pc, #16]	@ (8002624 <setDrTxpow+0x58>)
 8002612:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	}
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	200001f0 	.word	0x200001f0

08002628 <initDefaultChannels>:
		// Default operational frequencies
		EU868_F1 | BAND_CENTI, EU868_F2 | BAND_CENTI, EU868_F3 | BAND_CENTI,
		EU868_F4 | BAND_MILLI, EU868_F5 | BAND_MILLI, EU868_F6 | BAND_DECI };

static void initDefaultChannels(bit_t join)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	71fb      	strb	r3, [r7, #7]
	os_clearMem(&LMIC.channelFreq, sizeof(LMIC.channelFreq));
 8002632:	2240      	movs	r2, #64	@ 0x40
 8002634:	2100      	movs	r1, #0
 8002636:	483a      	ldr	r0, [pc, #232]	@ (8002720 <initDefaultChannels+0xf8>)
 8002638:	f008 fad3 	bl	800abe2 <memset>
	os_clearMem(&LMIC.channelDrMap, sizeof(LMIC.channelDrMap));
 800263c:	2220      	movs	r2, #32
 800263e:	2100      	movs	r1, #0
 8002640:	4838      	ldr	r0, [pc, #224]	@ (8002724 <initDefaultChannels+0xfc>)
 8002642:	f008 face 	bl	800abe2 <memset>
	os_clearMem(&LMIC.bands, sizeof(LMIC.bands));
 8002646:	2220      	movs	r2, #32
 8002648:	2100      	movs	r1, #0
 800264a:	4837      	ldr	r0, [pc, #220]	@ (8002728 <initDefaultChannels+0x100>)
 800264c:	f008 fac9 	bl	800abe2 <memset>

	LMIC.channelMap = (1 << NUM_DEFAULT_CHANNELS) - 1;
 8002650:	4b36      	ldr	r3, [pc, #216]	@ (800272c <initDefaultChannels+0x104>)
 8002652:	223f      	movs	r2, #63	@ 0x3f
 8002654:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	u1_t su = join ? 0 : NUM_DEFAULT_CHANNELS;
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <initDefaultChannels+0x3a>
 800265e:	2300      	movs	r3, #0
 8002660:	e000      	b.n	8002664 <initDefaultChannels+0x3c>
 8002662:	2306      	movs	r3, #6
 8002664:	73fb      	strb	r3, [r7, #15]
	for (u1_t fu = 0; fu < NUM_DEFAULT_CHANNELS; fu++, su++) {
 8002666:	2300      	movs	r3, #0
 8002668:	73bb      	strb	r3, [r7, #14]
 800266a:	e014      	b.n	8002696 <initDefaultChannels+0x6e>
		LMIC.channelFreq[fu] = iniChannelFreq[su];
 800266c:	7bfa      	ldrb	r2, [r7, #15]
 800266e:	7bbb      	ldrb	r3, [r7, #14]
 8002670:	492f      	ldr	r1, [pc, #188]	@ (8002730 <initDefaultChannels+0x108>)
 8002672:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002676:	492d      	ldr	r1, [pc, #180]	@ (800272c <initDefaultChannels+0x104>)
 8002678:	3310      	adds	r3, #16
 800267a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		LMIC.channelDrMap[fu] = DR_RANGE_MAP(DR_SF12, DR_SF7);
 800267e:	7bbb      	ldrb	r3, [r7, #14]
 8002680:	4a2a      	ldr	r2, [pc, #168]	@ (800272c <initDefaultChannels+0x104>)
 8002682:	3340      	adds	r3, #64	@ 0x40
 8002684:	213f      	movs	r1, #63	@ 0x3f
 8002686:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (u1_t fu = 0; fu < NUM_DEFAULT_CHANNELS; fu++, su++) {
 800268a:	7bbb      	ldrb	r3, [r7, #14]
 800268c:	3301      	adds	r3, #1
 800268e:	73bb      	strb	r3, [r7, #14]
 8002690:	7bfb      	ldrb	r3, [r7, #15]
 8002692:	3301      	adds	r3, #1
 8002694:	73fb      	strb	r3, [r7, #15]
 8002696:	7bbb      	ldrb	r3, [r7, #14]
 8002698:	2b05      	cmp	r3, #5
 800269a:	d9e7      	bls.n	800266c <initDefaultChannels+0x44>
//    if( !join ) {
//        LMIC.channelDrMap[5] = DR_RANGE_MAP(DR_SF12,DR_SF7);
//        LMIC.channelDrMap[1] = DR_RANGE_MAP(DR_SF12,DR_FSK);
//    }

	LMIC.bands[BAND_MILLI].txcap = 1000;  // 0.1%
 800269c:	4b23      	ldr	r3, [pc, #140]	@ (800272c <initDefaultChannels+0x104>)
 800269e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80026a2:	841a      	strh	r2, [r3, #32]
	LMIC.bands[BAND_MILLI].txpow = 14;
 80026a4:	4b21      	ldr	r3, [pc, #132]	@ (800272c <initDefaultChannels+0x104>)
 80026a6:	220e      	movs	r2, #14
 80026a8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	LMIC.bands[BAND_MILLI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 80026ac:	f003 f9c0 	bl	8005a30 <radio_rand1>
 80026b0:	4603      	mov	r3, r0
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	4b1c      	ldr	r3, [pc, #112]	@ (800272c <initDefaultChannels+0x104>)
 80026ba:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	LMIC.bands[BAND_CENTI].txcap = 100;   // 1%
 80026be:	4b1b      	ldr	r3, [pc, #108]	@ (800272c <initDefaultChannels+0x104>)
 80026c0:	2264      	movs	r2, #100	@ 0x64
 80026c2:	851a      	strh	r2, [r3, #40]	@ 0x28
	LMIC.bands[BAND_CENTI].txpow = 14;
 80026c4:	4b19      	ldr	r3, [pc, #100]	@ (800272c <initDefaultChannels+0x104>)
 80026c6:	220e      	movs	r2, #14
 80026c8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	LMIC.bands[BAND_CENTI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 80026cc:	f003 f9b0 	bl	8005a30 <radio_rand1>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	4b14      	ldr	r3, [pc, #80]	@ (800272c <initDefaultChannels+0x104>)
 80026da:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	LMIC.bands[BAND_DECI].txcap = 10;    // 10%
 80026de:	4b13      	ldr	r3, [pc, #76]	@ (800272c <initDefaultChannels+0x104>)
 80026e0:	220a      	movs	r2, #10
 80026e2:	861a      	strh	r2, [r3, #48]	@ 0x30
	LMIC.bands[BAND_DECI].txpow = 27;
 80026e4:	4b11      	ldr	r3, [pc, #68]	@ (800272c <initDefaultChannels+0x104>)
 80026e6:	221b      	movs	r2, #27
 80026e8:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
	LMIC.bands[BAND_DECI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 80026ec:	f003 f9a0 	bl	8005a30 <radio_rand1>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	4b0c      	ldr	r3, [pc, #48]	@ (800272c <initDefaultChannels+0x104>)
 80026fa:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
	LMIC.bands[BAND_MILLI].avail = LMIC.bands[BAND_CENTI].avail =
			LMIC.bands[BAND_DECI].avail = os_getTime();
 80026fe:	f002 fc6d 	bl	8004fdc <os_getTime>
 8002702:	4603      	mov	r3, r0
 8002704:	4a09      	ldr	r2, [pc, #36]	@ (800272c <initDefaultChannels+0x104>)
 8002706:	6353      	str	r3, [r2, #52]	@ 0x34
 8002708:	4b08      	ldr	r3, [pc, #32]	@ (800272c <initDefaultChannels+0x104>)
 800270a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
	LMIC.bands[BAND_MILLI].avail = LMIC.bands[BAND_CENTI].avail =
 800270c:	4a07      	ldr	r2, [pc, #28]	@ (800272c <initDefaultChannels+0x104>)
 800270e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002710:	4b06      	ldr	r3, [pc, #24]	@ (800272c <initDefaultChannels+0x104>)
 8002712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002714:	4a05      	ldr	r2, [pc, #20]	@ (800272c <initDefaultChannels+0x104>)
 8002716:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8002718:	bf00      	nop
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	20000230 	.word	0x20000230
 8002724:	20000270 	.word	0x20000270
 8002728:	20000210 	.word	0x20000210
 800272c:	200001f0 	.word	0x200001f0
 8002730:	0800c094 	.word	0x0800c094

08002734 <LMIC_setupChannel>:
	b->lastchnl = os_getRndU1() % MAX_CHANNELS;
	return 1;
}

bit_t LMIC_setupChannel(u1_t chidx, u4_t freq, u2_t drmap, s1_t band)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6039      	str	r1, [r7, #0]
 800273c:	4611      	mov	r1, r2
 800273e:	461a      	mov	r2, r3
 8002740:	4603      	mov	r3, r0
 8002742:	71fb      	strb	r3, [r7, #7]
 8002744:	460b      	mov	r3, r1
 8002746:	80bb      	strh	r3, [r7, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	71bb      	strb	r3, [r7, #6]
	if (chidx >= MAX_CHANNELS)
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	2b0f      	cmp	r3, #15
 8002750:	d901      	bls.n	8002756 <LMIC_setupChannel+0x22>
		return 0;
 8002752:	2300      	movs	r3, #0
 8002754:	e054      	b.n	8002800 <LMIC_setupChannel+0xcc>
	if (band == -1) {
 8002756:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800275a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800275e:	d121      	bne.n	80027a4 <LMIC_setupChannel+0x70>
		if (freq >= 869400000 && freq <= 869650000)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	4a2a      	ldr	r2, [pc, #168]	@ (800280c <LMIC_setupChannel+0xd8>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d908      	bls.n	800277a <LMIC_setupChannel+0x46>
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	4a29      	ldr	r2, [pc, #164]	@ (8002810 <LMIC_setupChannel+0xdc>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d804      	bhi.n	800277a <LMIC_setupChannel+0x46>
			freq |= BAND_DECI;   // 10% 27dBm
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	f043 0302 	orr.w	r3, r3, #2
 8002776:	603b      	str	r3, [r7, #0]
 8002778:	e021      	b.n	80027be <LMIC_setupChannel+0x8a>
		else if ((freq >= 868000000 && freq <= 868600000)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	4a25      	ldr	r2, [pc, #148]	@ (8002814 <LMIC_setupChannel+0xe0>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d903      	bls.n	800278a <LMIC_setupChannel+0x56>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	4a24      	ldr	r2, [pc, #144]	@ (8002818 <LMIC_setupChannel+0xe4>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d907      	bls.n	800279a <LMIC_setupChannel+0x66>
				|| (freq >= 869700000 && freq <= 870000000))
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	4a23      	ldr	r2, [pc, #140]	@ (800281c <LMIC_setupChannel+0xe8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d315      	bcc.n	80027be <LMIC_setupChannel+0x8a>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	4a22      	ldr	r2, [pc, #136]	@ (8002820 <LMIC_setupChannel+0xec>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d811      	bhi.n	80027be <LMIC_setupChannel+0x8a>
			freq |= BAND_CENTI;  // 1% 14dBm 
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	603b      	str	r3, [r7, #0]
 80027a2:	e00c      	b.n	80027be <LMIC_setupChannel+0x8a>
		else
			freq |= BAND_MILLI;  // 0.1% 14dBm
	} else {
		if (band > BAND_AUX)
 80027a4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80027a8:	2b03      	cmp	r3, #3
 80027aa:	dd01      	ble.n	80027b0 <LMIC_setupChannel+0x7c>
			return 0;
 80027ac:	2300      	movs	r3, #0
 80027ae:	e027      	b.n	8002800 <LMIC_setupChannel+0xcc>
		freq = (freq & ~3) | band;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	f023 0203 	bic.w	r2, r3, #3
 80027b6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	603b      	str	r3, [r7, #0]
	}
	LMIC.channelFreq[chidx] = freq;
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	4918      	ldr	r1, [pc, #96]	@ (8002824 <LMIC_setupChannel+0xf0>)
 80027c2:	3310      	adds	r3, #16
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	LMIC.channelDrMap[chidx] =
 80027ca:	88bb      	ldrh	r3, [r7, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <LMIC_setupChannel+0xa0>
 80027d0:	88ba      	ldrh	r2, [r7, #4]
 80027d2:	e000      	b.n	80027d6 <LMIC_setupChannel+0xa2>
 80027d4:	223f      	movs	r2, #63	@ 0x3f
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	4912      	ldr	r1, [pc, #72]	@ (8002824 <LMIC_setupChannel+0xf0>)
 80027da:	3340      	adds	r3, #64	@ 0x40
 80027dc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			drmap == 0 ? DR_RANGE_MAP(DR_SF12, DR_SF7) : drmap;
	LMIC.channelMap |= 1 << chidx;  // enabled right away
 80027e0:	4b10      	ldr	r3, [pc, #64]	@ (8002824 <LMIC_setupChannel+0xf0>)
 80027e2:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80027e6:	b21a      	sxth	r2, r3
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	2101      	movs	r1, #1
 80027ec:	fa01 f303 	lsl.w	r3, r1, r3
 80027f0:	b21b      	sxth	r3, r3
 80027f2:	4313      	orrs	r3, r2
 80027f4:	b21b      	sxth	r3, r3
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002824 <LMIC_setupChannel+0xf0>)
 80027fa:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	return 1;
 80027fe:	2301      	movs	r3, #1
}
 8002800:	4618      	mov	r0, r3
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	33d1fdbf 	.word	0x33d1fdbf
 8002810:	33d5ce50 	.word	0x33d5ce50
 8002814:	33bca0ff 	.word	0x33bca0ff
 8002818:	33c5c8c0 	.word	0x33c5c8c0
 800281c:	33d691a0 	.word	0x33d691a0
 8002820:	33db2580 	.word	0x33db2580
 8002824:	200001f0 	.word	0x200001f0

08002828 <convFreq>:
	LMIC.channelDrMap[channel] = 0;
	LMIC.channelMap &= ~(1 << channel);
}

static u4_t convFreq(xref2u1_t ptr)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
	u4_t freq = (os_rlsbf4(ptr - 1) >> 8) * 100;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3b01      	subs	r3, #1
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff f9c3 	bl	8001bc0 <os_rlsbf4>
 800283a:	4603      	mov	r3, r0
 800283c:	0a1b      	lsrs	r3, r3, #8
 800283e:	2264      	movs	r2, #100	@ 0x64
 8002840:	fb02 f303 	mul.w	r3, r2, r3
 8002844:	60fb      	str	r3, [r7, #12]
	if (freq < EU868_FREQ_MIN || freq > EU868_FREQ_MAX)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	4a06      	ldr	r2, [pc, #24]	@ (8002864 <convFreq+0x3c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d303      	bcc.n	8002856 <convFreq+0x2e>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4a05      	ldr	r2, [pc, #20]	@ (8002868 <convFreq+0x40>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d901      	bls.n	800285a <convFreq+0x32>
		freq = 0;
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
	return freq;
 800285a:	68fb      	ldr	r3, [r7, #12]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	337055c0 	.word	0x337055c0
 8002868:	33db2580 	.word	0x33db2580

0800286c <mapChannels>:

static u1_t mapChannels(u1_t chpage, u2_t chmap)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	460a      	mov	r2, r1
 8002876:	71fb      	strb	r3, [r7, #7]
 8002878:	4613      	mov	r3, r2
 800287a:	80bb      	strh	r3, [r7, #4]
	// Bad page, disable all channel, enable non-existent
	if (chpage != 0 || chmap == 0 || (chmap & ~LMIC.channelMap) != 0)
 800287c:	79fb      	ldrb	r3, [r7, #7]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10a      	bne.n	8002898 <mapChannels+0x2c>
 8002882:	88bb      	ldrh	r3, [r7, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d007      	beq.n	8002898 <mapChannels+0x2c>
 8002888:	88ba      	ldrh	r2, [r7, #4]
 800288a:	4b1c      	ldr	r3, [pc, #112]	@ (80028fc <mapChannels+0x90>)
 800288c:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8002890:	43db      	mvns	r3, r3
 8002892:	4013      	ands	r3, r2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <mapChannels+0x30>
		return 0;  // illegal input
 8002898:	2300      	movs	r3, #0
 800289a:	e028      	b.n	80028ee <mapChannels+0x82>
	for (u1_t chnl = 0; chnl < MAX_CHANNELS; chnl++) {
 800289c:	2300      	movs	r3, #0
 800289e:	73fb      	strb	r3, [r7, #15]
 80028a0:	e01d      	b.n	80028de <mapChannels+0x72>
		if ((chmap & (1 << chnl)) != 0 && LMIC.channelFreq[chnl] == 0)
 80028a2:	88ba      	ldrh	r2, [r7, #4]
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
 80028a6:	fa42 f303 	asr.w	r3, r2, r3
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d012      	beq.n	80028d8 <mapChannels+0x6c>
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
 80028b4:	4a11      	ldr	r2, [pc, #68]	@ (80028fc <mapChannels+0x90>)
 80028b6:	3310      	adds	r3, #16
 80028b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10b      	bne.n	80028d8 <mapChannels+0x6c>
			chmap &= ~(1 << chnl); // ignore - channel is not defined
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	2201      	movs	r2, #1
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	b21b      	sxth	r3, r3
 80028ca:	43db      	mvns	r3, r3
 80028cc:	b21a      	sxth	r2, r3
 80028ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80028d2:	4013      	ands	r3, r2
 80028d4:	b21b      	sxth	r3, r3
 80028d6:	80bb      	strh	r3, [r7, #4]
	for (u1_t chnl = 0; chnl < MAX_CHANNELS; chnl++) {
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
 80028da:	3301      	adds	r3, #1
 80028dc:	73fb      	strb	r3, [r7, #15]
 80028de:	7bfb      	ldrb	r3, [r7, #15]
 80028e0:	2b0f      	cmp	r3, #15
 80028e2:	d9de      	bls.n	80028a2 <mapChannels+0x36>
	}
	LMIC.channelMap = chmap;
 80028e4:	4a05      	ldr	r2, [pc, #20]	@ (80028fc <mapChannels+0x90>)
 80028e6:	88bb      	ldrh	r3, [r7, #4]
 80028e8:	f8a2 30a0 	strh.w	r3, [r2, #160]	@ 0xa0
	return 1;
 80028ec:	2301      	movs	r3, #1
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	200001f0 	.word	0x200001f0

08002900 <updateTx>:

static void updateTx(ostime_t txbeg)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
	u4_t freq = LMIC.channelFreq[LMIC.txChnl];
 8002908:	4b21      	ldr	r3, [pc, #132]	@ (8002990 <updateTx+0x90>)
 800290a:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 800290e:	4a20      	ldr	r2, [pc, #128]	@ (8002990 <updateTx+0x90>)
 8002910:	3310      	adds	r3, #16
 8002912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002916:	617b      	str	r3, [r7, #20]
	// Update global/band specific duty cycle stats
	ostime_t airtime = calcAirTime(LMIC.rps, LMIC.dataLen);
 8002918:	4b1d      	ldr	r3, [pc, #116]	@ (8002990 <updateTx+0x90>)
 800291a:	89db      	ldrh	r3, [r3, #14]
 800291c:	4a1c      	ldr	r2, [pc, #112]	@ (8002990 <updateTx+0x90>)
 800291e:	f892 2147 	ldrb.w	r2, [r2, #327]	@ 0x147
 8002922:	4611      	mov	r1, r2
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff fba3 	bl	8002070 <calcAirTime>
 800292a:	6138      	str	r0, [r7, #16]
	// Update channel/global duty cycle stats
	xref2band_t band = &LMIC.bands[freq & 0x3];
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	3304      	adds	r3, #4
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	4a16      	ldr	r2, [pc, #88]	@ (8002990 <updateTx+0x90>)
 8002938:	4413      	add	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]
	LMIC.freq = freq & ~(u4_t) 3;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	f023 0303 	bic.w	r3, r3, #3
 8002942:	4a13      	ldr	r2, [pc, #76]	@ (8002990 <updateTx+0x90>)
 8002944:	6093      	str	r3, [r2, #8]
	LMIC.txpow = band->txpow;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800294c:	4b10      	ldr	r3, [pc, #64]	@ (8002990 <updateTx+0x90>)
 800294e:	749a      	strb	r2, [r3, #18]
	band->avail = txbeg + airtime * band->txcap;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	881b      	ldrh	r3, [r3, #0]
 8002954:	461a      	mov	r2, r3
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	fb03 f202 	mul.w	r2, r3, r2
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	441a      	add	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	605a      	str	r2, [r3, #4]
	if (LMIC.globalDutyRate != 0)
 8002964:	4b0a      	ldr	r3, [pc, #40]	@ (8002990 <updateTx+0x90>)
 8002966:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00b      	beq.n	8002986 <updateTx+0x86>
		LMIC.globalDutyAvail = txbeg + (airtime << LMIC.globalDutyRate);
 800296e:	4b08      	ldr	r3, [pc, #32]	@ (8002990 <updateTx+0x90>)
 8002970:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 8002974:	461a      	mov	r2, r3
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	fa03 f202 	lsl.w	r2, r3, r2
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4413      	add	r3, r2
 8002980:	4a03      	ldr	r2, [pc, #12]	@ (8002990 <updateTx+0x90>)
 8002982:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
}
 8002986:	bf00      	nop
 8002988:	3718      	adds	r7, #24
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	200001f0 	.word	0x200001f0

08002994 <nextTx>:

static ostime_t nextTx(ostime_t now)
{
 8002994:	b480      	push	{r7}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
	u1_t bmap = 0xF;
 800299c:	230f      	movs	r3, #15
 800299e:	75fb      	strb	r3, [r7, #23]
	do {
		ostime_t mintime = now + /*10h*/36000 * OSTICKS_PER_SEC;
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	4b48      	ldr	r3, [pc, #288]	@ (8002ac4 <nextTx+0x130>)
 80029a4:	4413      	add	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
		u1_t band = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	73fb      	strb	r3, [r7, #15]
		for (u1_t bi = 0; bi < 4; bi++) {
 80029ac:	2300      	movs	r3, #0
 80029ae:	73bb      	strb	r3, [r7, #14]
 80029b0:	e01d      	b.n	80029ee <nextTx+0x5a>
			if ((bmap & (1 << bi)) && mintime - LMIC.bands[bi].avail > 0)
 80029b2:	7dfa      	ldrb	r2, [r7, #23]
 80029b4:	7bbb      	ldrb	r3, [r7, #14]
 80029b6:	fa42 f303 	asr.w	r3, r2, r3
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d012      	beq.n	80029e8 <nextTx+0x54>
 80029c2:	7bbb      	ldrb	r3, [r7, #14]
 80029c4:	4a40      	ldr	r2, [pc, #256]	@ (8002ac8 <nextTx+0x134>)
 80029c6:	3304      	adds	r3, #4
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	4413      	add	r3, r2
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	dd08      	ble.n	80029e8 <nextTx+0x54>
				mintime = LMIC.bands[band = bi].avail;
 80029d6:	7bbb      	ldrb	r3, [r7, #14]
 80029d8:	73fb      	strb	r3, [r7, #15]
 80029da:	7bfb      	ldrb	r3, [r7, #15]
 80029dc:	4a3a      	ldr	r2, [pc, #232]	@ (8002ac8 <nextTx+0x134>)
 80029de:	3304      	adds	r3, #4
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	4413      	add	r3, r2
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	613b      	str	r3, [r7, #16]
		for (u1_t bi = 0; bi < 4; bi++) {
 80029e8:	7bbb      	ldrb	r3, [r7, #14]
 80029ea:	3301      	adds	r3, #1
 80029ec:	73bb      	strb	r3, [r7, #14]
 80029ee:	7bbb      	ldrb	r3, [r7, #14]
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d9de      	bls.n	80029b2 <nextTx+0x1e>
		}
		// Find next channel in given band
		u1_t chnl = LMIC.bands[band].lastchnl;
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
 80029f6:	4a34      	ldr	r2, [pc, #208]	@ (8002ac8 <nextTx+0x134>)
 80029f8:	3304      	adds	r3, #4
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	4413      	add	r3, r2
 80029fe:	78db      	ldrb	r3, [r3, #3]
 8002a00:	737b      	strb	r3, [r7, #13]
		for (u1_t ci = 0; ci < MAX_CHANNELS; ci++) {
 8002a02:	2300      	movs	r3, #0
 8002a04:	733b      	strb	r3, [r7, #12]
 8002a06:	e042      	b.n	8002a8e <nextTx+0xfa>
			if ((chnl = (chnl + 1)) >= MAX_CHANNELS)
 8002a08:	7b7b      	ldrb	r3, [r7, #13]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	737b      	strb	r3, [r7, #13]
 8002a0e:	7b7b      	ldrb	r3, [r7, #13]
 8002a10:	2b0f      	cmp	r3, #15
 8002a12:	d902      	bls.n	8002a1a <nextTx+0x86>
				chnl -= MAX_CHANNELS;
 8002a14:	7b7b      	ldrb	r3, [r7, #13]
 8002a16:	3b10      	subs	r3, #16
 8002a18:	737b      	strb	r3, [r7, #13]
			if ((LMIC.channelMap & (1 << chnl)) != 0 &&  // channel enabled
 8002a1a:	4b2b      	ldr	r3, [pc, #172]	@ (8002ac8 <nextTx+0x134>)
 8002a1c:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8002a20:	461a      	mov	r2, r3
 8002a22:	7b7b      	ldrb	r3, [r7, #13]
 8002a24:	fa42 f303 	asr.w	r3, r2, r3
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d02b      	beq.n	8002a88 <nextTx+0xf4>
					(LMIC.channelDrMap[chnl] & (1 << (LMIC.datarate & 0xF)))
 8002a30:	7b7b      	ldrb	r3, [r7, #13]
 8002a32:	4a25      	ldr	r2, [pc, #148]	@ (8002ac8 <nextTx+0x134>)
 8002a34:	3340      	adds	r3, #64	@ 0x40
 8002a36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	4b22      	ldr	r3, [pc, #136]	@ (8002ac8 <nextTx+0x134>)
 8002a3e:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8002a42:	f003 030f 	and.w	r3, r3, #15
							!= 0 && band == (LMIC.channelFreq[chnl] & 0x3)) { // in selected band
 8002a46:	fa42 f303 	asr.w	r3, r2, r3
 8002a4a:	f003 0301 	and.w	r3, r3, #1
			if ((LMIC.channelMap & (1 << chnl)) != 0 &&  // channel enabled
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d01a      	beq.n	8002a88 <nextTx+0xf4>
							!= 0 && band == (LMIC.channelFreq[chnl] & 0x3)) { // in selected band
 8002a52:	7bfa      	ldrb	r2, [r7, #15]
 8002a54:	7b7b      	ldrb	r3, [r7, #13]
 8002a56:	491c      	ldr	r1, [pc, #112]	@ (8002ac8 <nextTx+0x134>)
 8002a58:	3310      	adds	r3, #16
 8002a5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d110      	bne.n	8002a88 <nextTx+0xf4>
				LMIC.txChnl = LMIC.bands[band].lastchnl = chnl;
 8002a66:	7bfa      	ldrb	r2, [r7, #15]
 8002a68:	4917      	ldr	r1, [pc, #92]	@ (8002ac8 <nextTx+0x134>)
 8002a6a:	1d13      	adds	r3, r2, #4
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	440b      	add	r3, r1
 8002a70:	7b79      	ldrb	r1, [r7, #13]
 8002a72:	70d9      	strb	r1, [r3, #3]
 8002a74:	4914      	ldr	r1, [pc, #80]	@ (8002ac8 <nextTx+0x134>)
 8002a76:	1d13      	adds	r3, r2, #4
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	440b      	add	r3, r1
 8002a7c:	78da      	ldrb	r2, [r3, #3]
 8002a7e:	4b12      	ldr	r3, [pc, #72]	@ (8002ac8 <nextTx+0x134>)
 8002a80:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
				return mintime;
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	e016      	b.n	8002ab6 <nextTx+0x122>
		for (u1_t ci = 0; ci < MAX_CHANNELS; ci++) {
 8002a88:	7b3b      	ldrb	r3, [r7, #12]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	733b      	strb	r3, [r7, #12]
 8002a8e:	7b3b      	ldrb	r3, [r7, #12]
 8002a90:	2b0f      	cmp	r3, #15
 8002a92:	d9b9      	bls.n	8002a08 <nextTx+0x74>
			}
		}
		if ((bmap &= ~(1 << band)) == 0) {
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	2201      	movs	r2, #1
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	b25b      	sxtb	r3, r3
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	b25a      	sxtb	r2, r3
 8002aa2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	b25b      	sxtb	r3, r3
 8002aaa:	75fb      	strb	r3, [r7, #23]
 8002aac:	7dfb      	ldrb	r3, [r7, #23]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f47f af76 	bne.w	80029a0 <nextTx+0xc>
			// No feasible channel  found!
			return mintime;
 8002ab4:	693b      	ldr	r3, [r7, #16]
		}
	} while (1);
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	371c      	adds	r7, #28
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	44aa2000 	.word	0x44aa2000
 8002ac8:	200001f0 	.word	0x200001f0

08002acc <setBcnRxParams>:

static void setBcnRxParams(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
	LMIC.dataLen = 0;
 8002ad0:	4b10      	ldr	r3, [pc, #64]	@ (8002b14 <setBcnRxParams+0x48>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
	LMIC.freq = LMIC.channelFreq[LMIC.bcnChnl] & ~(u4_t) 3;
 8002ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8002b14 <setBcnRxParams+0x48>)
 8002ada:	f893 3188 	ldrb.w	r3, [r3, #392]	@ 0x188
 8002ade:	4a0d      	ldr	r2, [pc, #52]	@ (8002b14 <setBcnRxParams+0x48>)
 8002ae0:	3310      	adds	r3, #16
 8002ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae6:	f023 0303 	bic.w	r3, r3, #3
 8002aea:	4a0a      	ldr	r2, [pc, #40]	@ (8002b14 <setBcnRxParams+0x48>)
 8002aec:	6093      	str	r3, [r2, #8]
	LMIC.rps = setIh(setNocrc(dndr2rps((dr_t) DR_BCN), 1), LEN_BCN);
 8002aee:	2003      	movs	r0, #3
 8002af0:	f7fe fff6 	bl	8001ae0 <dndr2rps>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2101      	movs	r1, #1
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fe ffa2 	bl	8001a42 <setNocrc>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2111      	movs	r1, #17
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fe ffc3 	bl	8001a8e <setIh>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	4b01      	ldr	r3, [pc, #4]	@ (8002b14 <setBcnRxParams+0x48>)
 8002b0e:	81da      	strh	r2, [r3, #14]
}
 8002b10:	bf00      	nop
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	200001f0 	.word	0x200001f0

08002b18 <initJoinLoop>:

#define setRx1Params() /*LMIC.freq/rps remain unchanged*/

static void initJoinLoop(void)
{
 8002b18:	b598      	push	{r3, r4, r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
#if CFG_TxContinuousMode
  LMIC.txChnl = 0;
#else
	LMIC.txChnl = os_getRndU1() % NUM_DEFAULT_CHANNELS;
 8002b1c:	f002 ff88 	bl	8005a30 <radio_rand1>
 8002b20:	4603      	mov	r3, r0
 8002b22:	461a      	mov	r2, r3
 8002b24:	4b15      	ldr	r3, [pc, #84]	@ (8002b7c <initJoinLoop+0x64>)
 8002b26:	fba3 1302 	umull	r1, r3, r3, r2
 8002b2a:	0899      	lsrs	r1, r3, #2
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	440b      	add	r3, r1
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	4b11      	ldr	r3, [pc, #68]	@ (8002b80 <initJoinLoop+0x68>)
 8002b3a:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
#endif
	LMIC.adrTxPow = 14;
 8002b3e:	4b10      	ldr	r3, [pc, #64]	@ (8002b80 <initJoinLoop+0x68>)
 8002b40:	220e      	movs	r2, #14
 8002b42:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf
	setDrJoin(DRCHG_SET, DR_SF7);
 8002b46:	2105      	movs	r1, #5
 8002b48:	2000      	movs	r0, #0
 8002b4a:	f7ff fd2b 	bl	80025a4 <setDrJoin>
	initDefaultChannels(1);
 8002b4e:	2001      	movs	r0, #1
 8002b50:	f7ff fd6a 	bl	8002628 <initDefaultChannels>
	ASSERT((LMIC.opmode & OP_NEXTCHNL) == 0);
 8002b54:	4b0a      	ldr	r3, [pc, #40]	@ (8002b80 <initJoinLoop+0x68>)
 8002b56:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8002b5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <initJoinLoop+0x4e>
 8002b62:	f7fe fe71 	bl	8001848 <hal_failed>
	LMIC.txend = LMIC.bands[BAND_MILLI].avail + rndDelay(8);
 8002b66:	4b06      	ldr	r3, [pc, #24]	@ (8002b80 <initJoinLoop+0x68>)
 8002b68:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8002b6a:	2008      	movs	r0, #8
 8002b6c:	f7ff fcae 	bl	80024cc <rndDelay>
 8002b70:	4603      	mov	r3, r0
 8002b72:	4423      	add	r3, r4
 8002b74:	4a02      	ldr	r2, [pc, #8]	@ (8002b80 <initJoinLoop+0x68>)
 8002b76:	6013      	str	r3, [r2, #0]
}
 8002b78:	bf00      	nop
 8002b7a:	bd98      	pop	{r3, r4, r7, pc}
 8002b7c:	aaaaaaab 	.word	0xaaaaaaab
 8002b80:	200001f0 	.word	0x200001f0

08002b84 <nextJoinState>:

static ostime_t nextJoinState(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
	u1_t failed = 0;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	71fb      	strb	r3, [r7, #7]

	// Try 869.x and then 864.x with same DR
	// If both fail try next lower datarate
	if (++LMIC.txChnl == NUM_DEFAULT_CHANNELS)
 8002b8e:	4b30      	ldr	r3, [pc, #192]	@ (8002c50 <nextJoinState+0xcc>)
 8002b90:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8002b94:	3301      	adds	r3, #1
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	4b2d      	ldr	r3, [pc, #180]	@ (8002c50 <nextJoinState+0xcc>)
 8002b9a:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
 8002b9e:	4b2c      	ldr	r3, [pc, #176]	@ (8002c50 <nextJoinState+0xcc>)
 8002ba0:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8002ba4:	2b06      	cmp	r3, #6
 8002ba6:	d103      	bne.n	8002bb0 <nextJoinState+0x2c>
		LMIC.txChnl = 0;
 8002ba8:	4b29      	ldr	r3, [pc, #164]	@ (8002c50 <nextJoinState+0xcc>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
	if ((++LMIC.txCnt & 1) == 0) {
 8002bb0:	4b27      	ldr	r3, [pc, #156]	@ (8002c50 <nextJoinState+0xcc>)
 8002bb2:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	4b25      	ldr	r3, [pc, #148]	@ (8002c50 <nextJoinState+0xcc>)
 8002bbc:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
 8002bc0:	4b23      	ldr	r3, [pc, #140]	@ (8002c50 <nextJoinState+0xcc>)
 8002bc2:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d112      	bne.n	8002bf4 <nextJoinState+0x70>
		// Lower DR every 2nd try (having tried 868.x and 864.x with the same DR)
		if (LMIC.datarate == DR_SF12)
 8002bce:	4b20      	ldr	r3, [pc, #128]	@ (8002c50 <nextJoinState+0xcc>)
 8002bd0:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d102      	bne.n	8002bde <nextJoinState+0x5a>
			failed = 1; // we have tried all DR - signal EV_JOIN_FAILED
 8002bd8:	2301      	movs	r3, #1
 8002bda:	71fb      	strb	r3, [r7, #7]
 8002bdc:	e00a      	b.n	8002bf4 <nextJoinState+0x70>
		else
			setDrJoin(DRCHG_NOJACC, decDR((dr_t) LMIC.datarate));
 8002bde:	4b1c      	ldr	r3, [pc, #112]	@ (8002c50 <nextJoinState+0xcc>)
 8002be0:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fe ff8f 	bl	8001b08 <decDR>
 8002bea:	4603      	mov	r3, r0
 8002bec:	4619      	mov	r1, r3
 8002bee:	2001      	movs	r0, #1
 8002bf0:	f7ff fcd8 	bl	80025a4 <setDrJoin>
	}
	// Clear NEXTCHNL because join state engine controls channel hopping
	LMIC.opmode &= ~OP_NEXTCHNL;
 8002bf4:	4b16      	ldr	r3, [pc, #88]	@ (8002c50 <nextJoinState+0xcc>)
 8002bf6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8002bfa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	4b13      	ldr	r3, [pc, #76]	@ (8002c50 <nextJoinState+0xcc>)
 8002c02:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	// Move txend to randomize synchronized concurrent joins.
	// Duty cycle is based on txend.
	ostime_t time = os_getTime();
 8002c06:	f002 f9e9 	bl	8004fdc <os_getTime>
 8002c0a:	6038      	str	r0, [r7, #0]
	if (time - LMIC.bands[BAND_MILLI].avail < 0)
 8002c0c:	4b10      	ldr	r3, [pc, #64]	@ (8002c50 <nextJoinState+0xcc>)
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	da02      	bge.n	8002c1e <nextJoinState+0x9a>
		time = LMIC.bands[BAND_MILLI].avail;
 8002c18:	4b0d      	ldr	r3, [pc, #52]	@ (8002c50 <nextJoinState+0xcc>)
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1c:	603b      	str	r3, [r7, #0]
	// Avoid collision with JOIN ACCEPT @ SF12 being sent by GW (but we missed it)
			? DNW2_SAFETY_ZONE
			// Otherwise: randomize join (street lamp case):
			// SF12:255, SF11:127, .., SF7:8secs
			:
				DNW2_SAFETY_ZONE + rndDelay(255 >> LMIC.datarate));
 8002c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c50 <nextJoinState+0xcc>)
 8002c20:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8002c24:	461a      	mov	r2, r3
 8002c26:	23ff      	movs	r3, #255	@ 0xff
 8002c28:	4113      	asrs	r3, r2
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff fc4d 	bl	80024cc <rndDelay>
 8002c32:	4603      	mov	r3, r0
 8002c34:	f503 33bb 	add.w	r3, r3, #95744	@ 0x17600
 8002c38:	f503 7380 	add.w	r3, r3, #256	@ 0x100
	LMIC.txend = time + (isTESTMODE()
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	4413      	add	r3, r2
 8002c40:	4a03      	ldr	r2, [pc, #12]	@ (8002c50 <nextJoinState+0xcc>)
 8002c42:	6013      	str	r3, [r2, #0]
	// 1 - triggers EV_JOIN_FAILED event
	return failed;
 8002c44:	79fb      	ldrb	r3, [r7, #7]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	200001f0 	.word	0x200001f0

08002c54 <runEngineUpdate>:
#else
#error Unsupported frequency band!
#endif

static void runEngineUpdate(xref2osjob_t osjob)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
	engineUpdate();
 8002c5c:	f001 fcb6 	bl	80045cc <engineUpdate>
}
 8002c60:	bf00      	nop
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <reportEvent>:

static void reportEvent(ev_t ev)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	71fb      	strb	r3, [r7, #7]
	EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
					e_.eui = MAIN::CDEV->getEui(),
					e_.info = ev));
	ON_LMIC_EVENT(ev);
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f001 ffef 	bl	8004c58 <onEvent>
	engineUpdate();
 8002c7a:	f001 fca7 	bl	80045cc <engineUpdate>
}
 8002c7e:	bf00      	nop
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <runReset>:

static void runReset(xref2osjob_t osjob)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
	// Disable session
	LMIC_reset();
 8002c8e:	f001 fe67 	bl	8004960 <LMIC_reset>
	LMIC_startJoining();
 8002c92:	f001 fa0f 	bl	80040b4 <LMIC_startJoining>
	reportEvent(EV_RESET);
 8002c96:	200c      	movs	r0, #12
 8002c98:	f7ff ffe6 	bl	8002c68 <reportEvent>
}
 8002c9c:	bf00      	nop
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <stateJustJoined>:

static void stateJustJoined(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
	LMIC.seqnoDn = LMIC.seqnoUp = 0;
 8002ca8:	4b2f      	ldr	r3, [pc, #188]	@ (8002d68 <stateJustJoined+0xc4>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
 8002cb0:	4b2d      	ldr	r3, [pc, #180]	@ (8002d68 <stateJustJoined+0xc4>)
 8002cb2:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8002cb6:	4a2c      	ldr	r2, [pc, #176]	@ (8002d68 <stateJustJoined+0xc4>)
 8002cb8:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
	LMIC.rejoinCnt = 0;
 8002cbc:	4b2a      	ldr	r3, [pc, #168]	@ (8002d68 <stateJustJoined+0xc4>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
	LMIC.dnConf = LMIC.adrChanged = LMIC.ladrAns = LMIC.devsAns = 0;
 8002cc4:	4b28      	ldr	r3, [pc, #160]	@ (8002d68 <stateJustJoined+0xc4>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
 8002ccc:	4b26      	ldr	r3, [pc, #152]	@ (8002d68 <stateJustJoined+0xc4>)
 8002cce:	f893 2126 	ldrb.w	r2, [r3, #294]	@ 0x126
 8002cd2:	4b25      	ldr	r3, [pc, #148]	@ (8002d68 <stateJustJoined+0xc4>)
 8002cd4:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
 8002cd8:	4b23      	ldr	r3, [pc, #140]	@ (8002d68 <stateJustJoined+0xc4>)
 8002cda:	f893 2125 	ldrb.w	r2, [r3, #293]	@ 0x125
 8002cde:	4b22      	ldr	r3, [pc, #136]	@ (8002d68 <stateJustJoined+0xc4>)
 8002ce0:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
 8002ce4:	4b20      	ldr	r3, [pc, #128]	@ (8002d68 <stateJustJoined+0xc4>)
 8002ce6:	f893 2122 	ldrb.w	r2, [r3, #290]	@ 0x122
 8002cea:	4b1f      	ldr	r3, [pc, #124]	@ (8002d68 <stateJustJoined+0xc4>)
 8002cec:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
	LMIC.moreData = LMIC.dn2Ans = LMIC.snchAns = LMIC.dutyCapAns = 0;
 8002cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d68 <stateJustJoined+0xc4>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
 8002cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8002d68 <stateJustJoined+0xc4>)
 8002cfa:	f893 2129 	ldrb.w	r2, [r3, #297]	@ 0x129
 8002cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8002d68 <stateJustJoined+0xc4>)
 8002d00:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
 8002d04:	4b18      	ldr	r3, [pc, #96]	@ (8002d68 <stateJustJoined+0xc4>)
 8002d06:	f893 212a 	ldrb.w	r2, [r3, #298]	@ 0x12a
 8002d0a:	4b17      	ldr	r3, [pc, #92]	@ (8002d68 <stateJustJoined+0xc4>)
 8002d0c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
 8002d10:	4b15      	ldr	r3, [pc, #84]	@ (8002d68 <stateJustJoined+0xc4>)
 8002d12:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8002d16:	4b14      	ldr	r3, [pc, #80]	@ (8002d68 <stateJustJoined+0xc4>)
 8002d18:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
	LMIC.pingSetAns = 0;
 8002d1c:	4b12      	ldr	r3, [pc, #72]	@ (8002d68 <stateJustJoined+0xc4>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
	LMIC.upRepeat = 0;
 8002d24:	4b10      	ldr	r3, [pc, #64]	@ (8002d68 <stateJustJoined+0xc4>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
	LMIC.adrAckReq = LINK_CHECK_INIT;
 8002d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8002d68 <stateJustJoined+0xc4>)
 8002d2e:	22f4      	movs	r2, #244	@ 0xf4
 8002d30:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
	LMIC.dn2Dr = DR_DNW2;
 8002d34:	4b0c      	ldr	r3, [pc, #48]	@ (8002d68 <stateJustJoined+0xc4>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
	LMIC.dn2Freq = FREQ_DNW2;
 8002d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d68 <stateJustJoined+0xc4>)
 8002d3e:	4a0b      	ldr	r2, [pc, #44]	@ (8002d6c <stateJustJoined+0xc8>)
 8002d40:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
	LMIC.bcnChnl = CHNL_BCN;
 8002d44:	4b08      	ldr	r3, [pc, #32]	@ (8002d68 <stateJustJoined+0xc4>)
 8002d46:	2205      	movs	r2, #5
 8002d48:	f883 2188 	strb.w	r2, [r3, #392]	@ 0x188
	LMIC.ping.freq = FREQ_PING;
 8002d4c:	4b06      	ldr	r3, [pc, #24]	@ (8002d68 <stateJustJoined+0xc4>)
 8002d4e:	4a07      	ldr	r2, [pc, #28]	@ (8002d6c <stateJustJoined+0xc8>)
 8002d50:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
	LMIC.ping.dr = DR_PING;
 8002d54:	4b04      	ldr	r3, [pc, #16]	@ (8002d68 <stateJustJoined+0xc4>)
 8002d56:	2203      	movs	r2, #3
 8002d58:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
}
 8002d5c:	bf00      	nop
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	200001f0 	.word	0x200001f0
 8002d6c:	33d3e608 	.word	0x33d3e608

08002d70 <decodeBeacon>:
// ================================================================================
// Decoding frames

// Decode beacon  - do not overwrite bcninfo unless we have a match!
static int decodeBeacon(void)
{
 8002d70:	b590      	push	{r4, r7, lr}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
	ASSERT(LMIC.dataLen == LEN_BCN); // implicit header RX guarantees this
 8002d76:	4b46      	ldr	r3, [pc, #280]	@ (8002e90 <decodeBeacon+0x120>)
 8002d78:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8002d7c:	2b11      	cmp	r3, #17
 8002d7e:	d001      	beq.n	8002d84 <decodeBeacon+0x14>
 8002d80:	f7fe fd62 	bl	8001848 <hal_failed>
	xref2u1_t d = LMIC.frame;
 8002d84:	4b43      	ldr	r3, [pc, #268]	@ (8002e94 <decodeBeacon+0x124>)
 8002d86:	607b      	str	r3, [r7, #4]
	if (
#if defined CFG_eu868
	d[OFF_BCN_CRC1] != (u1_t) os_crc16(d, OFF_BCN_CRC1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3307      	adds	r3, #7
 8002d8c:	781c      	ldrb	r4, [r3, #0]
 8002d8e:	2107      	movs	r1, #7
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7fe ffb0 	bl	8001cf6 <os_crc16>
 8002d96:	4603      	mov	r3, r0
 8002d98:	b2db      	uxtb	r3, r3
	if (
 8002d9a:	429c      	cmp	r4, r3
 8002d9c:	d001      	beq.n	8002da2 <decodeBeacon+0x32>
#elif CFG_us915
        os_rlsbf2(&d[OFF_BCN_CRC1]) != os_crc16(d,OFF_BCN_CRC1)
#endif
			)
		return 0;   // first (common) part fails CRC check
 8002d9e:	2300      	movs	r3, #0
 8002da0:	e071      	b.n	8002e86 <decodeBeacon+0x116>
	// First set of fields is ok
	u4_t bcnnetid = os_rlsbf4(&d[OFF_BCN_NETID]) & 0xFFFFFF;
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7fe ff0c 	bl	8001bc0 <os_rlsbf4>
 8002da8:	4603      	mov	r3, r0
 8002daa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002dae:	603b      	str	r3, [r7, #0]
	if (bcnnetid != LMIC.netid)
 8002db0:	4b37      	ldr	r3, [pc, #220]	@ (8002e90 <decodeBeacon+0x120>)
 8002db2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d002      	beq.n	8002dc2 <decodeBeacon+0x52>
		return -1;  // not the beacon we're looking for
 8002dbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002dc0:	e061      	b.n	8002e86 <decodeBeacon+0x116>

	LMIC.bcninfo.flags &= ~(BCN_PARTIAL | BCN_FULL);
 8002dc2:	4b33      	ldr	r3, [pc, #204]	@ (8002e90 <decodeBeacon+0x120>)
 8002dc4:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8002dc8:	f023 0303 	bic.w	r3, r3, #3
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	4b30      	ldr	r3, [pc, #192]	@ (8002e90 <decodeBeacon+0x120>)
 8002dd0:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
	// Match - update bcninfo structure
	LMIC.bcninfo.snr = LMIC.snr;
 8002dd4:	4b2e      	ldr	r3, [pc, #184]	@ (8002e90 <decodeBeacon+0x120>)
 8002dd6:	f993 200d 	ldrsb.w	r2, [r3, #13]
 8002dda:	4b2d      	ldr	r3, [pc, #180]	@ (8002e90 <decodeBeacon+0x120>)
 8002ddc:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
	LMIC.bcninfo.rssi = LMIC.rssi;
 8002de0:	4b2b      	ldr	r3, [pc, #172]	@ (8002e90 <decodeBeacon+0x120>)
 8002de2:	f993 200c 	ldrsb.w	r2, [r3, #12]
 8002de6:	4b2a      	ldr	r3, [pc, #168]	@ (8002e90 <decodeBeacon+0x120>)
 8002de8:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
	LMIC.bcninfo.txtime = LMIC.rxtime - AIRTIME_BCN_osticks;
 8002dec:	4b28      	ldr	r3, [pc, #160]	@ (8002e90 <decodeBeacon+0x120>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f5a3 5390 	sub.w	r3, r3, #4608	@ 0x1200
 8002df4:	3b0c      	subs	r3, #12
 8002df6:	4a26      	ldr	r2, [pc, #152]	@ (8002e90 <decodeBeacon+0x120>)
 8002df8:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
	LMIC.bcninfo.time = os_rlsbf4(&d[OFF_BCN_TIME]);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3303      	adds	r3, #3
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7fe fedd 	bl	8001bc0 <os_rlsbf4>
 8002e06:	4603      	mov	r3, r0
 8002e08:	4a21      	ldr	r2, [pc, #132]	@ (8002e90 <decodeBeacon+0x120>)
 8002e0a:	f8c2 3198 	str.w	r3, [r2, #408]	@ 0x198
	LMIC.bcninfo.flags |= BCN_PARTIAL;
 8002e0e:	4b20      	ldr	r3, [pc, #128]	@ (8002e90 <decodeBeacon+0x120>)
 8002e10:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8002e14:	f043 0301 	orr.w	r3, r3, #1
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	4b1d      	ldr	r3, [pc, #116]	@ (8002e90 <decodeBeacon+0x120>)
 8002e1c:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196

	// Check 2nd set
	if (os_rlsbf2(&d[OFF_BCN_CRC2]) != os_crc16(d, OFF_BCN_CRC2))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	330f      	adds	r3, #15
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fe feb6 	bl	8001b96 <os_rlsbf2>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	461c      	mov	r4, r3
 8002e2e:	210f      	movs	r1, #15
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7fe ff60 	bl	8001cf6 <os_crc16>
 8002e36:	4603      	mov	r3, r0
 8002e38:	429c      	cmp	r4, r3
 8002e3a:	d001      	beq.n	8002e40 <decodeBeacon+0xd0>
		return 1;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e022      	b.n	8002e86 <decodeBeacon+0x116>
	// Second set of fields is ok
	LMIC.bcninfo.lat = (s4_t) os_rlsbf4(&d[OFF_BCN_LAT - 1]) >> 8; // read as signed 24-bit
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3308      	adds	r3, #8
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fe febb 	bl	8001bc0 <os_rlsbf4>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	121b      	asrs	r3, r3, #8
 8002e4e:	4a10      	ldr	r2, [pc, #64]	@ (8002e90 <decodeBeacon+0x120>)
 8002e50:	f8c2 31a0 	str.w	r3, [r2, #416]	@ 0x1a0
	LMIC.bcninfo.lon = (s4_t) os_rlsbf4(&d[OFF_BCN_LON - 1]) >> 8; // ditto
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	330b      	adds	r3, #11
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fe feb1 	bl	8001bc0 <os_rlsbf4>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	121b      	asrs	r3, r3, #8
 8002e62:	4a0b      	ldr	r2, [pc, #44]	@ (8002e90 <decodeBeacon+0x120>)
 8002e64:	f8c2 31a4 	str.w	r3, [r2, #420]	@ 0x1a4
	LMIC.bcninfo.info = d[OFF_BCN_INFO];
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	7a1a      	ldrb	r2, [r3, #8]
 8002e6c:	4b08      	ldr	r3, [pc, #32]	@ (8002e90 <decodeBeacon+0x120>)
 8002e6e:	f883 219c 	strb.w	r2, [r3, #412]	@ 0x19c
	LMIC.bcninfo.flags |= BCN_FULL;
 8002e72:	4b07      	ldr	r3, [pc, #28]	@ (8002e90 <decodeBeacon+0x120>)
 8002e74:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8002e78:	f043 0302 	orr.w	r3, r3, #2
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	4b04      	ldr	r3, [pc, #16]	@ (8002e90 <decodeBeacon+0x120>)
 8002e80:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
	return 2;
 8002e84:	2302      	movs	r3, #2
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd90      	pop	{r4, r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	200001f0 	.word	0x200001f0
 8002e94:	20000338 	.word	0x20000338

08002e98 <decodeFrame>:

static bit_t decodeFrame(void)
{
 8002e98:	b590      	push	{r4, r7, lr}
 8002e9a:	b09b      	sub	sp, #108	@ 0x6c
 8002e9c:	af02      	add	r7, sp, #8
	xref2u1_t d = LMIC.frame;
 8002e9e:	4b98      	ldr	r3, [pc, #608]	@ (8003100 <decodeFrame+0x268>)
 8002ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
	u1_t hdr = d[0];
 8002ea2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	u1_t ftype = hdr & HDR_FTYPE;
 8002eaa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002eae:	f023 031f 	bic.w	r3, r3, #31
 8002eb2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	int dlen = LMIC.dataLen;
 8002eb6:	4b93      	ldr	r3, [pc, #588]	@ (8003104 <decodeFrame+0x26c>)
 8002eb8:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8002ebc:	643b      	str	r3, [r7, #64]	@ 0x40
	if (dlen < OFF_DAT_OPTS + 4 || (hdr & HDR_MAJOR) != HDR_MAJOR_V1
 8002ebe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ec0:	2b0b      	cmp	r3, #11
 8002ec2:	dd0d      	ble.n	8002ee0 <decodeFrame+0x48>
 8002ec4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002ec8:	f003 0303 	and.w	r3, r3, #3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d107      	bne.n	8002ee0 <decodeFrame+0x48>
			|| (ftype != HDR_FTYPE_DADN && ftype != HDR_FTYPE_DCDN)) {
 8002ed0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002ed4:	2b60      	cmp	r3, #96	@ 0x60
 8002ed6:	d014      	beq.n	8002f02 <decodeFrame+0x6a>
 8002ed8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002edc:	2ba0      	cmp	r3, #160	@ 0xa0
 8002ede:	d010      	beq.n	8002f02 <decodeFrame+0x6a>
		// Basic sanity checks failed
		EV(specCond, WARN, (e_.reason = EV::specCond_t::UNEXPECTED_FRAME,
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = dlen < 4 ? 0 : os_rlsbf4(&d[dlen-4]),
						e_.info2 = hdr + (dlen<<8)));
		norx: LMIC.dataLen = 0;
 8002ee0:	bf00      	nop
 8002ee2:	e008      	b.n	8002ef6 <decodeFrame+0x5e>
	if (addr != LMIC.devaddr) {
		EV(specCond, WARN, (e_.reason = EV::specCond_t::ALIEN_ADDRESS,
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = addr,
						e_.info2 = LMIC.devaddr));
		goto norx;
 8002ee4:	bf00      	nop
 8002ee6:	e006      	b.n	8002ef6 <decodeFrame+0x5e>
	}
	if (poff > pend) {
		EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = 0x1000000 + (poff-pend) + (fct<<8) + (dlen<<16)));
		goto norx;
 8002ee8:	bf00      	nop
 8002eea:	e004      	b.n	8002ef6 <decodeFrame+0x5e>
		EV(spe3Cond, ERR, (e_.reason = EV::spe3Cond_t::CORRUPTED_MIC,
						e_.eui1 = MAIN::CDEV->getEui(),
						e_.info1 = Base::lsbf4(&d[pend]),
						e_.info2 = seqno,
						e_.info3 = LMIC.devaddr));
		goto norx;
 8002eec:	bf00      	nop
 8002eee:	e002      	b.n	8002ef6 <decodeFrame+0x5e>
		if ((s4_t) seqno > (s4_t) LMIC.seqnoDn) {
			EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_ROLL_OVER,
							e_.eui = MAIN::CDEV->getEui(),
							e_.info = LMIC.seqnoDn,
							e_.info2 = seqno));
			goto norx;
 8002ef0:	bf00      	nop
 8002ef2:	e000      	b.n	8002ef6 <decodeFrame+0x5e>
				|| ftype != HDR_FTYPE_DCDN) {
			EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_OBSOLETE,
							e_.eui = MAIN::CDEV->getEui(),
							e_.info = LMIC.seqnoDn,
							e_.info2 = seqno));
			goto norx;
 8002ef4:	bf00      	nop
		norx: LMIC.dataLen = 0;
 8002ef6:	4b83      	ldr	r3, [pc, #524]	@ (8003104 <decodeFrame+0x26c>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
		return 0;
 8002efe:	2300      	movs	r3, #0
 8002f00:	e2f6      	b.n	80034f0 <decodeFrame+0x658>
	int fct = d[OFF_DAT_FCT];
 8002f02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f04:	3305      	adds	r3, #5
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
	u4_t addr = os_rlsbf4(&d[OFF_DAT_ADDR]);
 8002f0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fe fe56 	bl	8001bc0 <os_rlsbf4>
 8002f14:	63b8      	str	r0, [r7, #56]	@ 0x38
	u4_t seqno = os_rlsbf2(&d[OFF_DAT_SEQNO]);
 8002f16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f18:	3306      	adds	r3, #6
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fe fe3b 	bl	8001b96 <os_rlsbf2>
 8002f20:	4603      	mov	r3, r0
 8002f22:	637b      	str	r3, [r7, #52]	@ 0x34
	int olen = fct & FCT_OPTLEN;
 8002f24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f26:	f003 030f 	and.w	r3, r3, #15
 8002f2a:	633b      	str	r3, [r7, #48]	@ 0x30
	int ackup = (fct & FCT_ACK) != 0 ? 1 : 0;   // ACK last up frame
 8002f2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f2e:	115b      	asrs	r3, r3, #5
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int poff = OFF_DAT_OPTS + olen;
 8002f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f38:	3308      	adds	r3, #8
 8002f3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
	int pend = dlen - 4;  // MIC
 8002f3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f3e:	3b04      	subs	r3, #4
 8002f40:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (addr != LMIC.devaddr) {
 8002f42:	4b70      	ldr	r3, [pc, #448]	@ (8003104 <decodeFrame+0x26c>)
 8002f44:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002f48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d1ca      	bne.n	8002ee4 <decodeFrame+0x4c>
	if (poff > pend) {
 8002f4e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f52:	429a      	cmp	r2, r3
 8002f54:	dcc8      	bgt.n	8002ee8 <decodeFrame+0x50>
	int port = -1;
 8002f56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f5a:	65bb      	str	r3, [r7, #88]	@ 0x58
	int replayConf = 0;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	657b      	str	r3, [r7, #84]	@ 0x54
	if (pend > poff)
 8002f60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f64:	429a      	cmp	r2, r3
 8002f66:	dd07      	ble.n	8002f78 <decodeFrame+0xe0>
		port = d[poff++];
 8002f68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002f6e:	461a      	mov	r2, r3
 8002f70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f72:	4413      	add	r3, r2
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	65bb      	str	r3, [r7, #88]	@ 0x58
	seqno = LMIC.seqnoDn + (u2_t) (seqno - LMIC.seqnoDn);
 8002f78:	4b62      	ldr	r3, [pc, #392]	@ (8003104 <decodeFrame+0x26c>)
 8002f7a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8002f7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f80:	b291      	uxth	r1, r2
 8002f82:	4a60      	ldr	r2, [pc, #384]	@ (8003104 <decodeFrame+0x26c>)
 8002f84:	f8d2 2118 	ldr.w	r2, [r2, #280]	@ 0x118
 8002f88:	b292      	uxth	r2, r2
 8002f8a:	1a8a      	subs	r2, r1, r2
 8002f8c:	b292      	uxth	r2, r2
 8002f8e:	4413      	add	r3, r2
 8002f90:	637b      	str	r3, [r7, #52]	@ 0x34
	if (!aes_verifyMic(LMIC.nwkKey, LMIC.devaddr, seqno, /*dn*/1, d, pend)) {
 8002f92:	4b5c      	ldr	r3, [pc, #368]	@ (8003104 <decodeFrame+0x26c>)
 8002f94:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 8002f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f9a:	9301      	str	r3, [sp, #4]
 8002f9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fa4:	4858      	ldr	r0, [pc, #352]	@ (8003108 <decodeFrame+0x270>)
 8002fa6:	f7fe ff19 	bl	8001ddc <aes_verifyMic>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d09d      	beq.n	8002eec <decodeFrame+0x54>
	if (seqno < LMIC.seqnoDn) {
 8002fb0:	4b54      	ldr	r3, [pc, #336]	@ (8003104 <decodeFrame+0x26c>)
 8002fb2:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8002fb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d219      	bcs.n	8002ff0 <decodeFrame+0x158>
		if ((s4_t) seqno > (s4_t) LMIC.seqnoDn) {
 8002fbc:	4b51      	ldr	r3, [pc, #324]	@ (8003104 <decodeFrame+0x26c>)
 8002fbe:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	db92      	blt.n	8002ef0 <decodeFrame+0x58>
		if (seqno != LMIC.seqnoDn - 1 || !LMIC.dnConf
 8002fca:	4b4e      	ldr	r3, [pc, #312]	@ (8003104 <decodeFrame+0x26c>)
 8002fcc:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d18d      	bne.n	8002ef4 <decodeFrame+0x5c>
 8002fd8:	4b4a      	ldr	r3, [pc, #296]	@ (8003104 <decodeFrame+0x26c>)
 8002fda:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d088      	beq.n	8002ef4 <decodeFrame+0x5c>
				|| ftype != HDR_FTYPE_DCDN) {
 8002fe2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002fe6:	2ba0      	cmp	r3, #160	@ 0xa0
 8002fe8:	d184      	bne.n	8002ef4 <decodeFrame+0x5c>
		}
		// Replay of previous sequence number allowed only if
		// previous frame and repeated both requested confirmation
		replayConf = 1;
 8002fea:	2301      	movs	r3, #1
 8002fec:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fee:	e00e      	b.n	800300e <decodeFrame+0x176>
			EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_SKIP,
							e_.eui = MAIN::CDEV->getEui(),
							e_.info = LMIC.seqnoDn,
							e_.info2 = seqno));
		}
		LMIC.seqnoDn = seqno + 1;  // next number to be expected
 8002ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	4a43      	ldr	r2, [pc, #268]	@ (8003104 <decodeFrame+0x26c>)
 8002ff6:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
		DO_DEVDB(LMIC.seqnoDn,seqnoDn);
		// DN frame requested confirmation - provide ACK once with next UP frame
		LMIC.dnConf = (ftype == HDR_FTYPE_DCDN ? FCT_ACK : 0);
 8002ffa:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002ffe:	2ba0      	cmp	r3, #160	@ 0xa0
 8003000:	d101      	bne.n	8003006 <decodeFrame+0x16e>
 8003002:	2220      	movs	r2, #32
 8003004:	e000      	b.n	8003008 <decodeFrame+0x170>
 8003006:	2200      	movs	r2, #0
 8003008:	4b3e      	ldr	r3, [pc, #248]	@ (8003104 <decodeFrame+0x26c>)
 800300a:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
	}

	if (LMIC.dnConf || (fct & FCT_MORE))
 800300e:	4b3d      	ldr	r3, [pc, #244]	@ (8003104 <decodeFrame+0x26c>)
 8003010:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 8003014:	2b00      	cmp	r3, #0
 8003016:	d104      	bne.n	8003022 <decodeFrame+0x18a>
 8003018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800301a:	f003 0310 	and.w	r3, r3, #16
 800301e:	2b00      	cmp	r3, #0
 8003020:	d008      	beq.n	8003034 <decodeFrame+0x19c>
		LMIC.opmode |= OP_POLL;
 8003022:	4b38      	ldr	r3, [pc, #224]	@ (8003104 <decodeFrame+0x26c>)
 8003024:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003028:	f043 0310 	orr.w	r3, r3, #16
 800302c:	b29a      	uxth	r2, r3
 800302e:	4b35      	ldr	r3, [pc, #212]	@ (8003104 <decodeFrame+0x26c>)
 8003030:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac

	// We heard from network
	LMIC.adrChanged = LMIC.rejoinCnt = 0;
 8003034:	4b33      	ldr	r3, [pc, #204]	@ (8003104 <decodeFrame+0x26c>)
 8003036:	2200      	movs	r2, #0
 8003038:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
 800303c:	4b31      	ldr	r3, [pc, #196]	@ (8003104 <decodeFrame+0x26c>)
 800303e:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 8003042:	4b30      	ldr	r3, [pc, #192]	@ (8003104 <decodeFrame+0x26c>)
 8003044:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
	if (LMIC.adrAckReq != LINK_CHECK_OFF)
 8003048:	4b2e      	ldr	r3, [pc, #184]	@ (8003104 <decodeFrame+0x26c>)
 800304a:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 800304e:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 8003052:	d003      	beq.n	800305c <decodeFrame+0x1c4>
		LMIC.adrAckReq = LINK_CHECK_INIT;
 8003054:	4b2b      	ldr	r3, [pc, #172]	@ (8003104 <decodeFrame+0x26c>)
 8003056:	22f4      	movs	r2, #244	@ 0xf4
 8003058:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121

	// Process OPTS
	int m = LMIC.rssi - RSSI_OFF - getSensitivity(LMIC.rps);
 800305c:	4b29      	ldr	r3, [pc, #164]	@ (8003104 <decodeFrame+0x26c>)
 800305e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003062:	f1a3 0440 	sub.w	r4, r3, #64	@ 0x40
 8003066:	4b27      	ldr	r3, [pc, #156]	@ (8003104 <decodeFrame+0x26c>)
 8003068:	89db      	ldrh	r3, [r3, #14]
 800306a:	4618      	mov	r0, r3
 800306c:	f7fe ffe0 	bl	8002030 <getSensitivity>
 8003070:	4603      	mov	r3, r0
 8003072:	1ae3      	subs	r3, r4, r3
 8003074:	627b      	str	r3, [r7, #36]	@ 0x24
	LMIC.margin = m < 0 ? 0 : m > 254 ? 254 : m;
 8003076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003078:	2b00      	cmp	r3, #0
 800307a:	db05      	blt.n	8003088 <decodeFrame+0x1f0>
 800307c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307e:	2bfe      	cmp	r3, #254	@ 0xfe
 8003080:	bfa8      	it	ge
 8003082:	23fe      	movge	r3, #254	@ 0xfe
 8003084:	b2db      	uxtb	r3, r3
 8003086:	e000      	b.n	800308a <decodeFrame+0x1f2>
 8003088:	2300      	movs	r3, #0
 800308a:	4a1e      	ldr	r2, [pc, #120]	@ (8003104 <decodeFrame+0x26c>)
 800308c:	f882 3124 	strb.w	r3, [r2, #292]	@ 0x124

	xref2u1_t opts = &d[OFF_DAT_OPTS];
 8003090:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003092:	3308      	adds	r3, #8
 8003094:	623b      	str	r3, [r7, #32]
	int oidx = 0;
 8003096:	2300      	movs	r3, #0
 8003098:	653b      	str	r3, [r7, #80]	@ 0x50
	while (oidx < olen) {
 800309a:	e1b5      	b.n	8003408 <decodeFrame+0x570>
		switch (opts[oidx]) {
 800309c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800309e:	6a3a      	ldr	r2, [r7, #32]
 80030a0:	4413      	add	r3, r2
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	3b02      	subs	r3, #2
 80030a6:	2b10      	cmp	r3, #16
 80030a8:	f200 81ba 	bhi.w	8003420 <decodeFrame+0x588>
 80030ac:	a201      	add	r2, pc, #4	@ (adr r2, 80030b4 <decodeFrame+0x21c>)
 80030ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b2:	bf00      	nop
 80030b4:	080030f9 	.word	0x080030f9
 80030b8:	0800310d 	.word	0x0800310d
 80030bc:	0800326b 	.word	0x0800326b
 80030c0:	080031e7 	.word	0x080031e7
 80030c4:	080031d7 	.word	0x080031d7
 80030c8:	080032b9 	.word	0x080032b9
 80030cc:	08003421 	.word	0x08003421
 80030d0:	08003421 	.word	0x08003421
 80030d4:	08003421 	.word	0x08003421
 80030d8:	08003421 	.word	0x08003421
 80030dc:	08003421 	.word	0x08003421
 80030e0:	08003421 	.word	0x08003421
 80030e4:	08003421 	.word	0x08003421
 80030e8:	08003421 	.word	0x08003421
 80030ec:	08003421 	.word	0x08003421
 80030f0:	08003345 	.word	0x08003345
 80030f4:	08003387 	.word	0x08003387
		case MCMD_LCHK_ANS: {
			//int gwmargin = opts[oidx+1];
			//int ngws = opts[oidx+2];
			oidx += 3;
 80030f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030fa:	3303      	adds	r3, #3
 80030fc:	653b      	str	r3, [r7, #80]	@ 0x50
			continue;
 80030fe:	e183      	b.n	8003408 <decodeFrame+0x570>
 8003100:	20000338 	.word	0x20000338
 8003104:	200001f0 	.word	0x200001f0
 8003108:	200002e4 	.word	0x200002e4
		}
		case MCMD_LADR_REQ: {
			u1_t p1 = opts[oidx + 1];            // txpow + DR
 800310c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800310e:	3301      	adds	r3, #1
 8003110:	6a3a      	ldr	r2, [r7, #32]
 8003112:	4413      	add	r3, r2
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	72bb      	strb	r3, [r7, #10]
			u2_t chmap = os_rlsbf2(&opts[oidx + 2]); // list of enabled channels
 8003118:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800311a:	3302      	adds	r3, #2
 800311c:	6a3a      	ldr	r2, [r7, #32]
 800311e:	4413      	add	r3, r2
 8003120:	4618      	mov	r0, r3
 8003122:	f7fe fd38 	bl	8001b96 <os_rlsbf2>
 8003126:	4603      	mov	r3, r0
 8003128:	813b      	strh	r3, [r7, #8]
			u1_t chpage = opts[oidx + 4] & MCMD_LADR_CHPAGE_MASK; // channel page
 800312a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800312c:	3304      	adds	r3, #4
 800312e:	6a3a      	ldr	r2, [r7, #32]
 8003130:	4413      	add	r3, r2
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	f023 030f 	bic.w	r3, r3, #15
 8003138:	71fb      	strb	r3, [r7, #7]
			u1_t uprpt = opts[oidx + 4] & MCMD_LADR_REPEAT_MASK; // up repeat count
 800313a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800313c:	3304      	adds	r3, #4
 800313e:	6a3a      	ldr	r2, [r7, #32]
 8003140:	4413      	add	r3, r2
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	71bb      	strb	r3, [r7, #6]
			oidx += 5;
 800314a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800314c:	3305      	adds	r3, #5
 800314e:	653b      	str	r3, [r7, #80]	@ 0x50

			LMIC.ladrAns = 0x80
 8003150:	4bb0      	ldr	r3, [pc, #704]	@ (8003414 <decodeFrame+0x57c>)
 8003152:	2287      	movs	r2, #135	@ 0x87
 8003154:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
					|     // Include an answer into next frame up
					MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK
					| MCMD_LADR_ANS_DRACK;
			if (!mapChannels(chpage, chmap))
 8003158:	893a      	ldrh	r2, [r7, #8]
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	4611      	mov	r1, r2
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff fb84 	bl	800286c <mapChannels>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d108      	bne.n	800317c <decodeFrame+0x2e4>
				LMIC.ladrAns &= ~MCMD_LADR_ANS_CHACK;
 800316a:	4baa      	ldr	r3, [pc, #680]	@ (8003414 <decodeFrame+0x57c>)
 800316c:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8003170:	f023 0301 	bic.w	r3, r3, #1
 8003174:	b2da      	uxtb	r2, r3
 8003176:	4ba7      	ldr	r3, [pc, #668]	@ (8003414 <decodeFrame+0x57c>)
 8003178:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
			dr_t dr = (dr_t) (p1 >> MCMD_LADR_DR_SHIFT);
 800317c:	7abb      	ldrb	r3, [r7, #10]
 800317e:	091b      	lsrs	r3, r3, #4
 8003180:	717b      	strb	r3, [r7, #5]
			if (!validDR(dr)) {
 8003182:	797b      	ldrb	r3, [r7, #5]
 8003184:	4618      	mov	r0, r3
 8003186:	f7fe fcd7 	bl	8001b38 <validDR>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d108      	bne.n	80031a2 <decodeFrame+0x30a>
				LMIC.ladrAns &= ~MCMD_LADR_ANS_DRACK;
 8003190:	4ba0      	ldr	r3, [pc, #640]	@ (8003414 <decodeFrame+0x57c>)
 8003192:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8003196:	f023 0302 	bic.w	r3, r3, #2
 800319a:	b2da      	uxtb	r2, r3
 800319c:	4b9d      	ldr	r3, [pc, #628]	@ (8003414 <decodeFrame+0x57c>)
 800319e:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
				EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
								e_.eui = MAIN::CDEV->getEui(),
								e_.info = Base::lsbf4(&d[pend]),
								e_.info2 = Base::msbf4(&opts[oidx-4])));
			}
			if ((LMIC.ladrAns & 0x7F)
 80031a2:	4b9c      	ldr	r3, [pc, #624]	@ (8003414 <decodeFrame+0x57c>)
 80031a4:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 80031a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031ac:	2b07      	cmp	r3, #7
 80031ae:	d10d      	bne.n	80031cc <decodeFrame+0x334>
					== (MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK
							| MCMD_LADR_ANS_DRACK)) {
				// Nothing went wrong - use settings
				LMIC.upRepeat = uprpt;
 80031b0:	4a98      	ldr	r2, [pc, #608]	@ (8003414 <decodeFrame+0x57c>)
 80031b2:	79bb      	ldrb	r3, [r7, #6]
 80031b4:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
				setDrTxpow(DRCHG_NWKCMD, dr, pow2dBm(p1));
 80031b8:	7abb      	ldrb	r3, [r7, #10]
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	4a96      	ldr	r2, [pc, #600]	@ (8003418 <decodeFrame+0x580>)
 80031c0:	56d2      	ldrsb	r2, [r2, r3]
 80031c2:	797b      	ldrb	r3, [r7, #5]
 80031c4:	4619      	mov	r1, r3
 80031c6:	2004      	movs	r0, #4
 80031c8:	f7ff fa00 	bl	80025cc <setDrTxpow>
			}
			LMIC.adrChanged = 1;  // Trigger an ACK to NWK
 80031cc:	4b91      	ldr	r3, [pc, #580]	@ (8003414 <decodeFrame+0x57c>)
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
			continue;
 80031d4:	e118      	b.n	8003408 <decodeFrame+0x570>
		}
		case MCMD_DEVS_REQ: {
			LMIC.devsAns = 1;
 80031d6:	4b8f      	ldr	r3, [pc, #572]	@ (8003414 <decodeFrame+0x57c>)
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
			oidx += 1;
 80031de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031e0:	3301      	adds	r3, #1
 80031e2:	653b      	str	r3, [r7, #80]	@ 0x50
			continue;
 80031e4:	e110      	b.n	8003408 <decodeFrame+0x570>
		}
		case MCMD_DN2P_SET: {
			dr_t dr = (dr_t) (opts[oidx + 1] & 0x0F);
 80031e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031e8:	3301      	adds	r3, #1
 80031ea:	6a3a      	ldr	r2, [r7, #32]
 80031ec:	4413      	add	r3, r2
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	f003 030f 	and.w	r3, r3, #15
 80031f4:	74bb      	strb	r3, [r7, #18]
			u4_t freq = convFreq(&opts[oidx + 2]);
 80031f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031f8:	3302      	adds	r3, #2
 80031fa:	6a3a      	ldr	r2, [r7, #32]
 80031fc:	4413      	add	r3, r2
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff fb12 	bl	8002828 <convFreq>
 8003204:	60f8      	str	r0, [r7, #12]
			oidx += 5;
 8003206:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003208:	3305      	adds	r3, #5
 800320a:	653b      	str	r3, [r7, #80]	@ 0x50
			LMIC.dn2Ans = 0x80;   // answer pending
 800320c:	4b81      	ldr	r3, [pc, #516]	@ (8003414 <decodeFrame+0x57c>)
 800320e:	2280      	movs	r2, #128	@ 0x80
 8003210:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
			if (validDR(dr))
 8003214:	7cbb      	ldrb	r3, [r7, #18]
 8003216:	4618      	mov	r0, r3
 8003218:	f7fe fc8e 	bl	8001b38 <validDR>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d008      	beq.n	8003234 <decodeFrame+0x39c>
				LMIC.dn2Ans |= MCMD_DN2P_ANS_DRACK;
 8003222:	4b7c      	ldr	r3, [pc, #496]	@ (8003414 <decodeFrame+0x57c>)
 8003224:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8003228:	f043 0302 	orr.w	r3, r3, #2
 800322c:	b2da      	uxtb	r2, r3
 800322e:	4b79      	ldr	r3, [pc, #484]	@ (8003414 <decodeFrame+0x57c>)
 8003230:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
			if (freq != 0)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d008      	beq.n	800324c <decodeFrame+0x3b4>
				LMIC.dn2Ans |= MCMD_DN2P_ANS_CHACK;
 800323a:	4b76      	ldr	r3, [pc, #472]	@ (8003414 <decodeFrame+0x57c>)
 800323c:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8003240:	f043 0301 	orr.w	r3, r3, #1
 8003244:	b2da      	uxtb	r2, r3
 8003246:	4b73      	ldr	r3, [pc, #460]	@ (8003414 <decodeFrame+0x57c>)
 8003248:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
			if (LMIC.dn2Ans
 800324c:	4b71      	ldr	r3, [pc, #452]	@ (8003414 <decodeFrame+0x57c>)
 800324e:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8003252:	2b83      	cmp	r3, #131	@ 0x83
 8003254:	f040 80d7 	bne.w	8003406 <decodeFrame+0x56e>
					== (0x80 | MCMD_DN2P_ANS_DRACK | MCMD_DN2P_ANS_CHACK)) {
				LMIC.dn2Dr = dr;
 8003258:	4a6e      	ldr	r2, [pc, #440]	@ (8003414 <decodeFrame+0x57c>)
 800325a:	7cbb      	ldrb	r3, [r7, #18]
 800325c:	f882 312b 	strb.w	r3, [r2, #299]	@ 0x12b
				LMIC.dn2Freq = freq;
 8003260:	4a6c      	ldr	r2, [pc, #432]	@ (8003414 <decodeFrame+0x57c>)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
				DO_DEVDB(LMIC.dn2Dr,dn2Dr);DO_DEVDB(LMIC.dn2Freq,dn2Freq);
			}
			continue;
 8003268:	e0cd      	b.n	8003406 <decodeFrame+0x56e>
		}
		case MCMD_DCAP_REQ: {
			u1_t cap = opts[oidx + 1];
 800326a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800326c:	3301      	adds	r3, #1
 800326e:	6a3a      	ldr	r2, [r7, #32]
 8003270:	4413      	add	r3, r2
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	72fb      	strb	r3, [r7, #11]
			oidx += 2;
 8003276:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003278:	3302      	adds	r3, #2
 800327a:	653b      	str	r3, [r7, #80]	@ 0x50
			// A value cap=0xFF means device is OFF unless enabled again manually.
			if (cap == 0xFF)
 800327c:	7afb      	ldrb	r3, [r7, #11]
 800327e:	2bff      	cmp	r3, #255	@ 0xff
 8003280:	d108      	bne.n	8003294 <decodeFrame+0x3fc>
				LMIC.opmode |= OP_SHUTDOWN;  // stop any sending
 8003282:	4b64      	ldr	r3, [pc, #400]	@ (8003414 <decodeFrame+0x57c>)
 8003284:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003288:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800328c:	b29a      	uxth	r2, r3
 800328e:	4b61      	ldr	r3, [pc, #388]	@ (8003414 <decodeFrame+0x57c>)
 8003290:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			LMIC.globalDutyRate = cap & 0xF;
 8003294:	7afb      	ldrb	r3, [r7, #11]
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	b2da      	uxtb	r2, r3
 800329c:	4b5d      	ldr	r3, [pc, #372]	@ (8003414 <decodeFrame+0x57c>)
 800329e:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
			LMIC.globalDutyAvail = os_getTime();
 80032a2:	f001 fe9b 	bl	8004fdc <os_getTime>
 80032a6:	4603      	mov	r3, r0
 80032a8:	4a5a      	ldr	r2, [pc, #360]	@ (8003414 <decodeFrame+0x57c>)
 80032aa:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
			DO_DEVDB(cap,dutyCap);
			LMIC.dutyCapAns = 1;
 80032ae:	4b59      	ldr	r3, [pc, #356]	@ (8003414 <decodeFrame+0x57c>)
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
			continue;
 80032b6:	e0a7      	b.n	8003408 <decodeFrame+0x570>
		}
		case MCMD_SNCH_REQ: {
			u1_t chidx = opts[oidx + 1];  // channel
 80032b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032ba:	3301      	adds	r3, #1
 80032bc:	6a3a      	ldr	r2, [r7, #32]
 80032be:	4413      	add	r3, r2
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	76fb      	strb	r3, [r7, #27]
			u4_t freq = convFreq(&opts[oidx + 2]); // freq
 80032c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032c6:	3302      	adds	r3, #2
 80032c8:	6a3a      	ldr	r2, [r7, #32]
 80032ca:	4413      	add	r3, r2
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff faab 	bl	8002828 <convFreq>
 80032d2:	6178      	str	r0, [r7, #20]
			u1_t drs = opts[oidx + 5];  // datarate span
 80032d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032d6:	3305      	adds	r3, #5
 80032d8:	6a3a      	ldr	r2, [r7, #32]
 80032da:	4413      	add	r3, r2
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	74fb      	strb	r3, [r7, #19]
			LMIC.snchAns = 0x80;
 80032e0:	4b4c      	ldr	r3, [pc, #304]	@ (8003414 <decodeFrame+0x57c>)
 80032e2:	2280      	movs	r2, #128	@ 0x80
 80032e4:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
			if (freq != 0
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d026      	beq.n	800333c <decodeFrame+0x4a4>
					&& LMIC_setupChannel(chidx, freq,
							DR_RANGE_MAP(drs & 0xF, drs >> 4), -1))
 80032ee:	7cfb      	ldrb	r3, [r7, #19]
 80032f0:	f003 030f 	and.w	r3, r3, #15
 80032f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	b21a      	sxth	r2, r3
 80032fe:	7cfb      	ldrb	r3, [r7, #19]
 8003300:	091b      	lsrs	r3, r3, #4
 8003302:	b2db      	uxtb	r3, r3
 8003304:	f1c3 030f 	rsb	r3, r3, #15
 8003308:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800330c:	fa41 f303 	asr.w	r3, r1, r3
 8003310:	b21b      	sxth	r3, r3
 8003312:	4013      	ands	r3, r2
 8003314:	b21b      	sxth	r3, r3
					&& LMIC_setupChannel(chidx, freq,
 8003316:	b29a      	uxth	r2, r3
 8003318:	7ef8      	ldrb	r0, [r7, #27]
 800331a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800331e:	6979      	ldr	r1, [r7, #20]
 8003320:	f7ff fa08 	bl	8002734 <LMIC_setupChannel>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d008      	beq.n	800333c <decodeFrame+0x4a4>
				LMIC.snchAns |= MCMD_SNCH_ANS_DRACK | MCMD_SNCH_ANS_FQACK;
 800332a:	4b3a      	ldr	r3, [pc, #232]	@ (8003414 <decodeFrame+0x57c>)
 800332c:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8003330:	f043 0303 	orr.w	r3, r3, #3
 8003334:	b2da      	uxtb	r2, r3
 8003336:	4b37      	ldr	r3, [pc, #220]	@ (8003414 <decodeFrame+0x57c>)
 8003338:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
			oidx += 6;
 800333c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800333e:	3306      	adds	r3, #6
 8003340:	653b      	str	r3, [r7, #80]	@ 0x50
			continue;
 8003342:	e061      	b.n	8003408 <decodeFrame+0x570>
		}
		case MCMD_PING_SET: {
			u4_t freq = convFreq(&opts[oidx + 1]);
 8003344:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003346:	3301      	adds	r3, #1
 8003348:	6a3a      	ldr	r2, [r7, #32]
 800334a:	4413      	add	r3, r2
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff fa6b 	bl	8002828 <convFreq>
 8003352:	61f8      	str	r0, [r7, #28]
			oidx += 4;
 8003354:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003356:	3304      	adds	r3, #4
 8003358:	653b      	str	r3, [r7, #80]	@ 0x50
			u1_t flags = 0x80;
 800335a:	2380      	movs	r3, #128	@ 0x80
 800335c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			if (freq != 0) {
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d009      	beq.n	800337a <decodeFrame+0x4e2>
				flags |= MCMD_PING_ANS_FQACK;
 8003366:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
				LMIC.ping.freq = freq;
 8003372:	4a28      	ldr	r2, [pc, #160]	@ (8003414 <decodeFrame+0x57c>)
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
				DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);DO_DEVDB(LMIC.ping.freq, pingFreq);DO_DEVDB(LMIC.ping.dr, pingDr);
			}
			LMIC.pingSetAns = flags;
 800337a:	4a26      	ldr	r2, [pc, #152]	@ (8003414 <decodeFrame+0x57c>)
 800337c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003380:	f882 3133 	strb.w	r3, [r2, #307]	@ 0x133
			continue;
 8003384:	e040      	b.n	8003408 <decodeFrame+0x570>
		}
		case MCMD_BCNI_ANS: {
			// Ignore if tracking already enabled
			if ((LMIC.opmode & OP_TRACK) == 0) {
 8003386:	4b23      	ldr	r3, [pc, #140]	@ (8003414 <decodeFrame+0x57c>)
 8003388:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d134      	bne.n	80033fe <decodeFrame+0x566>
				LMIC.bcnChnl = opts[oidx + 3];
 8003394:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003396:	3303      	adds	r3, #3
 8003398:	6a3a      	ldr	r2, [r7, #32]
 800339a:	4413      	add	r3, r2
 800339c:	781a      	ldrb	r2, [r3, #0]
 800339e:	4b1d      	ldr	r3, [pc, #116]	@ (8003414 <decodeFrame+0x57c>)
 80033a0:	f883 2188 	strb.w	r2, [r3, #392]	@ 0x188
				// Enable tracking - bcninfoTries
				LMIC.opmode |= OP_TRACK;
 80033a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003414 <decodeFrame+0x57c>)
 80033a6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80033aa:	f043 0302 	orr.w	r3, r3, #2
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	4b18      	ldr	r3, [pc, #96]	@ (8003414 <decodeFrame+0x57c>)
 80033b2:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
				// Cleared later in txComplete handling - triggers EV_BEACON_FOUND
				ASSERT(LMIC.bcninfoTries != 0);
 80033b6:	4b17      	ldr	r3, [pc, #92]	@ (8003414 <decodeFrame+0x57c>)
 80033b8:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <decodeFrame+0x52c>
 80033c0:	f7fe fa42 	bl	8001848 <hal_failed>
				// Setup RX parameters
				LMIC.bcninfo.txtime =
						(LMIC.rxtime
 80033c4:	4b13      	ldr	r3, [pc, #76]	@ (8003414 <decodeFrame+0x57c>)
 80033c6:	685c      	ldr	r4, [r3, #4]
								+ ms2osticks(
 80033c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033ca:	3301      	adds	r3, #1
 80033cc:	6a3a      	ldr	r2, [r7, #32]
 80033ce:	4413      	add	r3, r2
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fe fbe0 	bl	8001b96 <os_rlsbf2>
 80033d6:	4603      	mov	r3, r0
 80033d8:	461a      	mov	r2, r3
 80033da:	4613      	mov	r3, r2
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	1a9b      	subs	r3, r3, r2
 80033e0:	019b      	lsls	r3, r3, #6
 80033e2:	18e2      	adds	r2, r4, r3
										os_rlsbf2(&opts[oidx + 1])
												* MCMD_BCNI_TUNIT)
								+ ms2osticksCeil(MCMD_BCNI_TUNIT / 2)
								- BCN_INTV_osticks);
 80033e4:	4b0d      	ldr	r3, [pc, #52]	@ (800341c <decodeFrame+0x584>)
 80033e6:	4413      	add	r3, r2
				LMIC.bcninfo.txtime =
 80033e8:	4a0a      	ldr	r2, [pc, #40]	@ (8003414 <decodeFrame+0x57c>)
 80033ea:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
				LMIC.bcninfo.flags = 0; // txtime above cannot be used as reference (BCN_PARTIAL|BCN_FULL cleared)
 80033ee:	4b09      	ldr	r3, [pc, #36]	@ (8003414 <decodeFrame+0x57c>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
				calcBcnRxWindowFromMillis(MCMD_BCNI_TUNIT, 1); // error of +/-N ms 
 80033f6:	2101      	movs	r1, #1
 80033f8:	201e      	movs	r0, #30
 80033fa:	f7fe ff25 	bl	8002248 <calcBcnRxWindowFromMillis>
								e_.info = (LMIC.missedBcns |
										(osticks2us(LMIC.bcninfo.txtime + BCN_INTV_osticks
														- LMIC.bcnRxtime) << 8)),
								e_.time = MAIN::CDEV->ostime2ustime(LMIC.bcninfo.txtime + BCN_INTV_osticks)));
			}
			oidx += 4;
 80033fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003400:	3304      	adds	r3, #4
 8003402:	653b      	str	r3, [r7, #80]	@ 0x50
			continue;
 8003404:	e000      	b.n	8003408 <decodeFrame+0x570>
			continue;
 8003406:	bf00      	nop
	while (oidx < olen) {
 8003408:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800340a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800340c:	429a      	cmp	r2, r3
 800340e:	f6ff ae45 	blt.w	800309c <decodeFrame+0x204>
 8003412:	e006      	b.n	8003422 <decodeFrame+0x58a>
 8003414:	200001f0 	.word	0x200001f0
 8003418:	0800c040 	.word	0x0800c040
 800341c:	ffc181e0 	.word	0xffc181e0
		}
		}EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = Base::lsbf4(&d[pend]),
						e_.info2 = Base::msbf4(&opts[oidx])));
		break;
 8003420:	bf00      	nop
		EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = 0x1000000 + (oidx) + (olen<<8)));
	}

	if (!replayConf) {
 8003422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003424:	2b00      	cmp	r3, #0
 8003426:	d11d      	bne.n	8003464 <decodeFrame+0x5cc>
		// Handle payload only if not a replay
		// Decrypt payload - if any
		if (port >= 0 && pend - poff > 0)
 8003428:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800342a:	2b00      	cmp	r3, #0
 800342c:	db1a      	blt.n	8003464 <decodeFrame+0x5cc>
 800342e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003430:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	dd15      	ble.n	8003464 <decodeFrame+0x5cc>
			aes_cipher(port <= 0 ? LMIC.nwkKey : LMIC.artKey, LMIC.devaddr,
 8003438:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800343a:	2b00      	cmp	r3, #0
 800343c:	dc01      	bgt.n	8003442 <decodeFrame+0x5aa>
 800343e:	482e      	ldr	r0, [pc, #184]	@ (80034f8 <decodeFrame+0x660>)
 8003440:	e000      	b.n	8003444 <decodeFrame+0x5ac>
 8003442:	482e      	ldr	r0, [pc, #184]	@ (80034fc <decodeFrame+0x664>)
 8003444:	4b2e      	ldr	r3, [pc, #184]	@ (8003500 <decodeFrame+0x668>)
 8003446:	f8d3 4114 	ldr.w	r4, [r3, #276]	@ 0x114
 800344a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800344c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800344e:	4413      	add	r3, r2
 8003450:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003452:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003454:	1a8a      	subs	r2, r1, r2
 8003456:	9201      	str	r2, [sp, #4]
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	2301      	movs	r3, #1
 800345c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800345e:	4621      	mov	r1, r4
 8003460:	f7fe fd66 	bl	8001f30 <aes_cipher>
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = Base::lsbf4(&d[pend]),
						e_.info2 = seqno));
	}

	if ( // NWK acks but we don't have a frame pending
 8003464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003466:	2b00      	cmp	r3, #0
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = seqno,
						e_.info2 = ackup));
	}

	if (LMIC.txCnt != 0) // we requested an ACK
 8003468:	4b25      	ldr	r3, [pc, #148]	@ (8003500 <decodeFrame+0x668>)
 800346a:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 800346e:	2b00      	cmp	r3, #0
 8003470:	d010      	beq.n	8003494 <decodeFrame+0x5fc>
		LMIC.txrxFlags |= ackup ? TXRX_ACK : TXRX_NACK;
 8003472:	4b23      	ldr	r3, [pc, #140]	@ (8003500 <decodeFrame+0x668>)
 8003474:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8003478:	b25b      	sxtb	r3, r3
 800347a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800347c:	2a00      	cmp	r2, #0
 800347e:	d002      	beq.n	8003486 <decodeFrame+0x5ee>
 8003480:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 8003484:	e000      	b.n	8003488 <decodeFrame+0x5f0>
 8003486:	2240      	movs	r2, #64	@ 0x40
 8003488:	4313      	orrs	r3, r2
 800348a:	b25b      	sxtb	r3, r3
 800348c:	b2da      	uxtb	r2, r3
 800348e:	4b1c      	ldr	r3, [pc, #112]	@ (8003500 <decodeFrame+0x668>)
 8003490:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145

	if (port < 0) {
 8003494:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003496:	2b00      	cmp	r3, #0
 8003498:	da12      	bge.n	80034c0 <decodeFrame+0x628>
		LMIC.txrxFlags |= TXRX_NOPORT;
 800349a:	4b19      	ldr	r3, [pc, #100]	@ (8003500 <decodeFrame+0x668>)
 800349c:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 80034a0:	f043 0320 	orr.w	r3, r3, #32
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	4b16      	ldr	r3, [pc, #88]	@ (8003500 <decodeFrame+0x668>)
 80034a8:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		LMIC.dataBeg = poff;
 80034ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	4b13      	ldr	r3, [pc, #76]	@ (8003500 <decodeFrame+0x668>)
 80034b2:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
		LMIC.dataLen = 0;
 80034b6:	4b12      	ldr	r3, [pc, #72]	@ (8003500 <decodeFrame+0x668>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 80034be:	e016      	b.n	80034ee <decodeFrame+0x656>
	} else {
		LMIC.txrxFlags |= TXRX_PORT;
 80034c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003500 <decodeFrame+0x668>)
 80034c2:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 80034c6:	f043 0310 	orr.w	r3, r3, #16
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003500 <decodeFrame+0x668>)
 80034ce:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		LMIC.dataBeg = poff;
 80034d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003500 <decodeFrame+0x668>)
 80034d8:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
		LMIC.dataLen = pend - poff;
 80034dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	4b05      	ldr	r3, [pc, #20]	@ (8003500 <decodeFrame+0x668>)
 80034ea:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
	}
	return 1;
 80034ee:	2301      	movs	r3, #1
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3764      	adds	r7, #100	@ 0x64
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd90      	pop	{r4, r7, pc}
 80034f8:	200002e4 	.word	0x200002e4
 80034fc:	200002f4 	.word	0x200002f4
 8003500:	200001f0 	.word	0x200001f0

08003504 <setupRx2>:

// ================================================================================
// TX/RX transaction support

static void setupRx2(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
	LMIC.txrxFlags = TXRX_DNW2;
 8003508:	4b0d      	ldr	r3, [pc, #52]	@ (8003540 <setupRx2+0x3c>)
 800350a:	2202      	movs	r2, #2
 800350c:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	LMIC.rps = dndr2rps(LMIC.dn2Dr);
 8003510:	4b0b      	ldr	r3, [pc, #44]	@ (8003540 <setupRx2+0x3c>)
 8003512:	f893 312b 	ldrb.w	r3, [r3, #299]	@ 0x12b
 8003516:	4618      	mov	r0, r3
 8003518:	f7fe fae2 	bl	8001ae0 <dndr2rps>
 800351c:	4603      	mov	r3, r0
 800351e:	461a      	mov	r2, r3
 8003520:	4b07      	ldr	r3, [pc, #28]	@ (8003540 <setupRx2+0x3c>)
 8003522:	81da      	strh	r2, [r3, #14]
	LMIC.freq = LMIC.dn2Freq;
 8003524:	4b06      	ldr	r3, [pc, #24]	@ (8003540 <setupRx2+0x3c>)
 8003526:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800352a:	4a05      	ldr	r2, [pc, #20]	@ (8003540 <setupRx2+0x3c>)
 800352c:	6093      	str	r3, [r2, #8]
	LMIC.dataLen = 0;
 800352e:	4b04      	ldr	r3, [pc, #16]	@ (8003540 <setupRx2+0x3c>)
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
	os_radio(RADIO_RX);
 8003536:	2002      	movs	r0, #2
 8003538:	f002 fb76 	bl	8005c28 <os_radio>
}
 800353c:	bf00      	nop
 800353e:	bd80      	pop	{r7, pc}
 8003540:	200001f0 	.word	0x200001f0

08003544 <schedRx2>:

static void schedRx2(ostime_t delay, osjobcb_t func)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
	// Add 1.5 symbols we need 5 out of 8. Try to sync 1.5 symbols into the preamble.
	LMIC.rxtime = LMIC.txend + delay
 800354e:	4b0e      	ldr	r3, [pc, #56]	@ (8003588 <schedRx2+0x44>)
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	18d1      	adds	r1, r2, r3
			+ (PAMBL_SYMS - MINRX_SYMS) * dr2hsym(LMIC.dn2Dr);
 8003556:	4b0c      	ldr	r3, [pc, #48]	@ (8003588 <schedRx2+0x44>)
 8003558:	f893 312b 	ldrb.w	r3, [r3, #299]	@ 0x12b
 800355c:	461a      	mov	r2, r3
 800355e:	4b0b      	ldr	r3, [pc, #44]	@ (800358c <schedRx2+0x48>)
 8003560:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003564:	4613      	mov	r3, r2
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	4413      	add	r3, r2
 800356a:	440b      	add	r3, r1
	LMIC.rxtime = LMIC.txend + delay
 800356c:	4a06      	ldr	r2, [pc, #24]	@ (8003588 <schedRx2+0x44>)
 800356e:	6053      	str	r3, [r2, #4]
	os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 8003570:	4b05      	ldr	r3, [pc, #20]	@ (8003588 <schedRx2+0x44>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	3b40      	subs	r3, #64	@ 0x40
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	4619      	mov	r1, r3
 800357a:	4805      	ldr	r0, [pc, #20]	@ (8003590 <schedRx2+0x4c>)
 800357c:	f001 fd98 	bl	80050b0 <os_setTimedCallback>
}
 8003580:	bf00      	nop
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	200001f0 	.word	0x200001f0
 800358c:	0800c074 	.word	0x0800c074
 8003590:	20000204 	.word	0x20000204

08003594 <setupRx1>:

static void setupRx1(osjobcb_t func)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
	LMIC.txrxFlags = TXRX_DNW1;
 800359c:	4b0d      	ldr	r3, [pc, #52]	@ (80035d4 <setupRx1+0x40>)
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	// Turn LMIC.rps from TX over to RX
	LMIC.rps = setNocrc(LMIC.rps, 1);
 80035a4:	4b0b      	ldr	r3, [pc, #44]	@ (80035d4 <setupRx1+0x40>)
 80035a6:	89db      	ldrh	r3, [r3, #14]
 80035a8:	2101      	movs	r1, #1
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7fe fa49 	bl	8001a42 <setNocrc>
 80035b0:	4603      	mov	r3, r0
 80035b2:	461a      	mov	r2, r3
 80035b4:	4b07      	ldr	r3, [pc, #28]	@ (80035d4 <setupRx1+0x40>)
 80035b6:	81da      	strh	r2, [r3, #14]
	LMIC.dataLen = 0;
 80035b8:	4b06      	ldr	r3, [pc, #24]	@ (80035d4 <setupRx1+0x40>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
	LMIC.osjob.func = func;
 80035c0:	4a04      	ldr	r2, [pc, #16]	@ (80035d4 <setupRx1+0x40>)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	61d3      	str	r3, [r2, #28]
	os_radio(RADIO_RX);
 80035c6:	2002      	movs	r0, #2
 80035c8:	f002 fb2e 	bl	8005c28 <os_radio>
}
 80035cc:	bf00      	nop
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	200001f0 	.word	0x200001f0

080035d8 <txDone>:

// Called by HAL once TX complete and delivers exact end of TX time stamp in LMIC.rxtime
static void txDone(ostime_t delay, osjobcb_t func)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
	if ((LMIC.opmode & (OP_TRACK | OP_PINGABLE | OP_PINGINI))
 80035e2:	4b22      	ldr	r3, [pc, #136]	@ (800366c <txDone+0x94>)
 80035e4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80035e8:	461a      	mov	r2, r3
 80035ea:	f240 6302 	movw	r3, #1538	@ 0x602
 80035ee:	4013      	ands	r3, r2
 80035f0:	f240 4202 	movw	r2, #1026	@ 0x402
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d10b      	bne.n	8003610 <txDone+0x38>
			== (OP_TRACK | OP_PINGABLE)) {
		rxschedInit(&LMIC.ping);    // note: reuses LMIC.frame buffer!
 80035f8:	481d      	ldr	r0, [pc, #116]	@ (8003670 <txDone+0x98>)
 80035fa:	f7fe feab 	bl	8002354 <rxschedInit>
		LMIC.opmode |= OP_PINGINI;
 80035fe:	4b1b      	ldr	r3, [pc, #108]	@ (800366c <txDone+0x94>)
 8003600:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003604:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003608:	b29a      	uxth	r2, r3
 800360a:	4b18      	ldr	r3, [pc, #96]	@ (800366c <txDone+0x94>)
 800360c:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	setRx1Params();
	// LMIC.rxsyms carries the TX datarate (can be != LMIC.datarate [confirm retries etc.])
	// Setup receive - LMIC.rxtime is preloaded with 1.5 symbols offset to tune
	// into the middle of the 8 symbols preamble.
#if defined(CFG_eu868)
	if ( /* TX datarate */LMIC.rxsyms == DR_FSK) {
 8003610:	4b16      	ldr	r3, [pc, #88]	@ (800366c <txDone+0x94>)
 8003612:	7c1b      	ldrb	r3, [r3, #16]
 8003614:	2b07      	cmp	r3, #7
 8003616:	d10a      	bne.n	800362e <txDone+0x56>
		LMIC.rxtime = LMIC.txend + delay - PRERX_FSK * us2osticksRound(160);
 8003618:	4b14      	ldr	r3, [pc, #80]	@ (800366c <txDone+0x94>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4413      	add	r3, r2
 8003620:	3b05      	subs	r3, #5
 8003622:	4a12      	ldr	r2, [pc, #72]	@ (800366c <txDone+0x94>)
 8003624:	6053      	str	r3, [r2, #4]
		LMIC.rxsyms = RXLEN_FSK;
 8003626:	4b11      	ldr	r3, [pc, #68]	@ (800366c <txDone+0x94>)
 8003628:	2208      	movs	r2, #8
 800362a:	741a      	strb	r2, [r3, #16]
 800362c:	e012      	b.n	8003654 <txDone+0x7c>
	} else
#endif
	{
		LMIC.rxtime = LMIC.txend + delay
 800362e:	4b0f      	ldr	r3, [pc, #60]	@ (800366c <txDone+0x94>)
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	18d1      	adds	r1, r2, r3
				+ (PAMBL_SYMS - MINRX_SYMS) * dr2hsym(LMIC.dndr);
 8003636:	4b0d      	ldr	r3, [pc, #52]	@ (800366c <txDone+0x94>)
 8003638:	7c5b      	ldrb	r3, [r3, #17]
 800363a:	461a      	mov	r2, r3
 800363c:	4b0d      	ldr	r3, [pc, #52]	@ (8003674 <txDone+0x9c>)
 800363e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003642:	4613      	mov	r3, r2
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	4413      	add	r3, r2
 8003648:	440b      	add	r3, r1
		LMIC.rxtime = LMIC.txend + delay
 800364a:	4a08      	ldr	r2, [pc, #32]	@ (800366c <txDone+0x94>)
 800364c:	6053      	str	r3, [r2, #4]
		LMIC.rxsyms = MINRX_SYMS;
 800364e:	4b07      	ldr	r3, [pc, #28]	@ (800366c <txDone+0x94>)
 8003650:	2205      	movs	r2, #5
 8003652:	741a      	strb	r2, [r3, #16]
	}
	os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 8003654:	4b05      	ldr	r3, [pc, #20]	@ (800366c <txDone+0x94>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	3b40      	subs	r3, #64	@ 0x40
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	4619      	mov	r1, r3
 800365e:	4806      	ldr	r0, [pc, #24]	@ (8003678 <txDone+0xa0>)
 8003660:	f001 fd26 	bl	80050b0 <os_setTimedCallback>
}
 8003664:	bf00      	nop
 8003666:	3708      	adds	r7, #8
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	200001f0 	.word	0x200001f0
 8003670:	20000324 	.word	0x20000324
 8003674:	0800c074 	.word	0x0800c074
 8003678:	20000204 	.word	0x20000204

0800367c <onJoinFailed>:

// ======================================== Join frames

static void onJoinFailed(xref2osjob_t osjob)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
	// Notify app - must call LMIC_reset() to stop joining
	// otherwise join procedure continues.
	reportEvent(EV_JOIN_FAILED);
 8003684:	2008      	movs	r0, #8
 8003686:	f7ff faef 	bl	8002c68 <reportEvent>
}
 800368a:	bf00      	nop
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
	...

08003694 <processJoinAccept>:

static bit_t processJoinAccept(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
	ASSERT(LMIC.txrxFlags != TXRX_DNW1 || LMIC.dataLen != 0);
 800369a:	4b99      	ldr	r3, [pc, #612]	@ (8003900 <processJoinAccept+0x26c>)
 800369c:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d106      	bne.n	80036b2 <processJoinAccept+0x1e>
 80036a4:	4b96      	ldr	r3, [pc, #600]	@ (8003900 <processJoinAccept+0x26c>)
 80036a6:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <processJoinAccept+0x1e>
 80036ae:	f7fe f8cb 	bl	8001848 <hal_failed>
	ASSERT((LMIC.opmode & OP_TXRXPEND) != 0);
 80036b2:	4b93      	ldr	r3, [pc, #588]	@ (8003900 <processJoinAccept+0x26c>)
 80036b4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80036b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <processJoinAccept+0x30>
 80036c0:	f7fe f8c2 	bl	8001848 <hal_failed>

	if (LMIC.dataLen == 0) {
 80036c4:	4b8e      	ldr	r3, [pc, #568]	@ (8003900 <processJoinAccept+0x26c>)
 80036c6:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d14c      	bne.n	8003768 <processJoinAccept+0xd4>
		nojoinframe: if ((LMIC.opmode & OP_JOINING) == 0) {
 80036ce:	bf00      	nop
 80036d0:	e000      	b.n	80036d4 <processJoinAccept+0x40>
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = dlen < 4 ? 0 : mic,
						e_.info2 = hdr + (dlen<<8)));
		badframe: if ((LMIC.txrxFlags & TXRX_DNW1) != 0)
			return 0;
		goto nojoinframe;
 80036d2:	bf00      	nop
		nojoinframe: if ((LMIC.opmode & OP_JOINING) == 0) {
 80036d4:	4b8a      	ldr	r3, [pc, #552]	@ (8003900 <processJoinAccept+0x26c>)
 80036d6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80036da:	f003 0304 	and.w	r3, r3, #4
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d123      	bne.n	800372a <processJoinAccept+0x96>
			ASSERT((LMIC.opmode & OP_REJOIN) != 0);
 80036e2:	4b87      	ldr	r3, [pc, #540]	@ (8003900 <processJoinAccept+0x26c>)
 80036e4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80036e8:	f003 0320 	and.w	r3, r3, #32
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <processJoinAccept+0x60>
 80036f0:	f7fe f8aa 	bl	8001848 <hal_failed>
			LMIC.opmode &= ~(OP_REJOIN | OP_TXRXPEND);
 80036f4:	4b82      	ldr	r3, [pc, #520]	@ (8003900 <processJoinAccept+0x26c>)
 80036f6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80036fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80036fe:	b29a      	uxth	r2, r3
 8003700:	4b7f      	ldr	r3, [pc, #508]	@ (8003900 <processJoinAccept+0x26c>)
 8003702:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			if (LMIC.rejoinCnt < 10)
 8003706:	4b7e      	ldr	r3, [pc, #504]	@ (8003900 <processJoinAccept+0x26c>)
 8003708:	f893 30b2 	ldrb.w	r3, [r3, #178]	@ 0xb2
 800370c:	2b09      	cmp	r3, #9
 800370e:	d807      	bhi.n	8003720 <processJoinAccept+0x8c>
				LMIC.rejoinCnt++;
 8003710:	4b7b      	ldr	r3, [pc, #492]	@ (8003900 <processJoinAccept+0x26c>)
 8003712:	f893 30b2 	ldrb.w	r3, [r3, #178]	@ 0xb2
 8003716:	3301      	adds	r3, #1
 8003718:	b2da      	uxtb	r2, r3
 800371a:	4b79      	ldr	r3, [pc, #484]	@ (8003900 <processJoinAccept+0x26c>)
 800371c:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
			reportEvent(EV_REJOIN_FAILED);
 8003720:	2009      	movs	r0, #9
 8003722:	f7ff faa1 	bl	8002c68 <reportEvent>
			return 1;
 8003726:	2301      	movs	r3, #1
 8003728:	e0e6      	b.n	80038f8 <processJoinAccept+0x264>
		LMIC.opmode &= ~OP_TXRXPEND;
 800372a:	4b75      	ldr	r3, [pc, #468]	@ (8003900 <processJoinAccept+0x26c>)
 800372c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003730:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003734:	b29a      	uxth	r2, r3
 8003736:	4b72      	ldr	r3, [pc, #456]	@ (8003900 <processJoinAccept+0x26c>)
 8003738:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		ostime_t delay = nextJoinState();
 800373c:	f7ff fa22 	bl	8002b84 <nextJoinState>
 8003740:	6078      	str	r0, [r7, #4]
		os_setTimedCallback(&LMIC.osjob, os_getTime() + delay,
 8003742:	f001 fc4b 	bl	8004fdc <os_getTime>
 8003746:	4602      	mov	r2, r0
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	18d1      	adds	r1, r2, r3
				(delay & 1) != 0 ? FUNC_ADDR(onJoinFailed) // one JOIN iteration done and failed
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f003 0301 	and.w	r3, r3, #1
		os_setTimedCallback(&LMIC.osjob, os_getTime() + delay,
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <processJoinAccept+0xc6>
 8003756:	4b6b      	ldr	r3, [pc, #428]	@ (8003904 <processJoinAccept+0x270>)
 8003758:	e000      	b.n	800375c <processJoinAccept+0xc8>
 800375a:	4b6b      	ldr	r3, [pc, #428]	@ (8003908 <processJoinAccept+0x274>)
 800375c:	461a      	mov	r2, r3
 800375e:	486b      	ldr	r0, [pc, #428]	@ (800390c <processJoinAccept+0x278>)
 8003760:	f001 fca6 	bl	80050b0 <os_setTimedCallback>
		return 1;
 8003764:	2301      	movs	r3, #1
 8003766:	e0c7      	b.n	80038f8 <processJoinAccept+0x264>
	u1_t hdr = LMIC.frame[0];
 8003768:	4b65      	ldr	r3, [pc, #404]	@ (8003900 <processJoinAccept+0x26c>)
 800376a:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 800376e:	757b      	strb	r3, [r7, #21]
	u1_t dlen = LMIC.dataLen;
 8003770:	4b63      	ldr	r3, [pc, #396]	@ (8003900 <processJoinAccept+0x26c>)
 8003772:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003776:	75fb      	strb	r3, [r7, #23]
	u4_t mic = os_rlsbf4(&LMIC.frame[dlen - 4]); // safe before modified by encrypt!
 8003778:	7dfb      	ldrb	r3, [r7, #23]
 800377a:	3b04      	subs	r3, #4
 800377c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003780:	4a5f      	ldr	r2, [pc, #380]	@ (8003900 <processJoinAccept+0x26c>)
 8003782:	4413      	add	r3, r2
 8003784:	4618      	mov	r0, r3
 8003786:	f7fe fa1b 	bl	8001bc0 <os_rlsbf4>
 800378a:	6138      	str	r0, [r7, #16]
	if ((dlen != LEN_JA && dlen != LEN_JAEXT)
 800378c:	7dfb      	ldrb	r3, [r7, #23]
 800378e:	2b11      	cmp	r3, #17
 8003790:	d002      	beq.n	8003798 <processJoinAccept+0x104>
 8003792:	7dfb      	ldrb	r3, [r7, #23]
 8003794:	2b21      	cmp	r3, #33	@ 0x21
 8003796:	d104      	bne.n	80037a2 <processJoinAccept+0x10e>
			|| (hdr & (HDR_FTYPE | HDR_MAJOR))
 8003798:	7d7b      	ldrb	r3, [r7, #21]
 800379a:	f003 03e3 	and.w	r3, r3, #227	@ 0xe3
 800379e:	2b20      	cmp	r3, #32
 80037a0:	d00b      	beq.n	80037ba <processJoinAccept+0x126>
		badframe: if ((LMIC.txrxFlags & TXRX_DNW1) != 0)
 80037a2:	bf00      	nop
 80037a4:	e000      	b.n	80037a8 <processJoinAccept+0x114>
	}
	aes_encrypt(LMIC.frame + 1, dlen - 1);
	if (!aes_verifyMic0(LMIC.frame, dlen - 4)) {
		EV(specCond, ERR, (e_.reason = EV::specCond_t::JOIN_BAD_MIC,
						e_.info = mic));
		goto badframe;
 80037a6:	bf00      	nop
		badframe: if ((LMIC.txrxFlags & TXRX_DNW1) != 0)
 80037a8:	4b55      	ldr	r3, [pc, #340]	@ (8003900 <processJoinAccept+0x26c>)
 80037aa:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d08d      	beq.n	80036d2 <processJoinAccept+0x3e>
			return 0;
 80037b6:	2300      	movs	r3, #0
 80037b8:	e09e      	b.n	80038f8 <processJoinAccept+0x264>
	aes_encrypt(LMIC.frame + 1, dlen - 1);
 80037ba:	4a55      	ldr	r2, [pc, #340]	@ (8003910 <processJoinAccept+0x27c>)
 80037bc:	7dfb      	ldrb	r3, [r7, #23]
 80037be:	3b01      	subs	r3, #1
 80037c0:	4619      	mov	r1, r3
 80037c2:	4610      	mov	r0, r2
 80037c4:	f7fe fb9e 	bl	8001f04 <aes_encrypt>
	if (!aes_verifyMic0(LMIC.frame, dlen - 4)) {
 80037c8:	7dfb      	ldrb	r3, [r7, #23]
 80037ca:	3b04      	subs	r3, #4
 80037cc:	4619      	mov	r1, r3
 80037ce:	4851      	ldr	r0, [pc, #324]	@ (8003914 <processJoinAccept+0x280>)
 80037d0:	f7fe fb76 	bl	8001ec0 <aes_verifyMic0>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0e5      	beq.n	80037a6 <processJoinAccept+0x112>
	}

	u4_t addr = os_rlsbf4(LMIC.frame + OFF_JA_DEVADDR);
 80037da:	4b4f      	ldr	r3, [pc, #316]	@ (8003918 <processJoinAccept+0x284>)
 80037dc:	4618      	mov	r0, r3
 80037de:	f7fe f9ef 	bl	8001bc0 <os_rlsbf4>
 80037e2:	60f8      	str	r0, [r7, #12]
	LMIC.devaddr = addr;
 80037e4:	4a46      	ldr	r2, [pc, #280]	@ (8003900 <processJoinAccept+0x26c>)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
	LMIC.netid = os_rlsbf4(&LMIC.frame[OFF_JA_NETID]) & 0xFFFFFF;
 80037ec:	484b      	ldr	r0, [pc, #300]	@ (800391c <processJoinAccept+0x288>)
 80037ee:	f7fe f9e7 	bl	8001bc0 <os_rlsbf4>
 80037f2:	4603      	mov	r3, r0
 80037f4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80037f8:	4a41      	ldr	r2, [pc, #260]	@ (8003900 <processJoinAccept+0x26c>)
 80037fa:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

#if defined(CFG_eu868)
	initDefaultChannels(0);
 80037fe:	2000      	movs	r0, #0
 8003800:	f7fe ff12 	bl	8002628 <initDefaultChannels>
#endif
	if (dlen > LEN_JA) {
 8003804:	7dfb      	ldrb	r3, [r7, #23]
 8003806:	2b11      	cmp	r3, #17
 8003808:	d920      	bls.n	800384c <processJoinAccept+0x1b8>
#if defined(CFG_us915)
        goto badframe;
#endif
		dlen = OFF_CFLIST;
 800380a:	230d      	movs	r3, #13
 800380c:	75fb      	strb	r3, [r7, #23]
		for (u1_t chidx = 3; chidx < 8; chidx++, dlen += 3) {
 800380e:	2303      	movs	r3, #3
 8003810:	75bb      	strb	r3, [r7, #22]
 8003812:	e018      	b.n	8003846 <processJoinAccept+0x1b2>
			u4_t freq = convFreq(&LMIC.frame[dlen]);
 8003814:	7dfb      	ldrb	r3, [r7, #23]
 8003816:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800381a:	4a39      	ldr	r2, [pc, #228]	@ (8003900 <processJoinAccept+0x26c>)
 800381c:	4413      	add	r3, r2
 800381e:	4618      	mov	r0, r3
 8003820:	f7ff f802 	bl	8002828 <convFreq>
 8003824:	60b8      	str	r0, [r7, #8]
			if (freq)
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d006      	beq.n	800383a <processJoinAccept+0x1a6>
				LMIC_setupChannel(chidx, freq, 0, -1);
 800382c:	7db8      	ldrb	r0, [r7, #22]
 800382e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003832:	2200      	movs	r2, #0
 8003834:	68b9      	ldr	r1, [r7, #8]
 8003836:	f7fe ff7d 	bl	8002734 <LMIC_setupChannel>
		for (u1_t chidx = 3; chidx < 8; chidx++, dlen += 3) {
 800383a:	7dbb      	ldrb	r3, [r7, #22]
 800383c:	3301      	adds	r3, #1
 800383e:	75bb      	strb	r3, [r7, #22]
 8003840:	7dfb      	ldrb	r3, [r7, #23]
 8003842:	3303      	adds	r3, #3
 8003844:	75fb      	strb	r3, [r7, #23]
 8003846:	7dbb      	ldrb	r3, [r7, #22]
 8003848:	2b07      	cmp	r3, #7
 800384a:	d9e3      	bls.n	8003814 <processJoinAccept+0x180>
		}
	}

	// already incremented when JOIN REQ got sent off
	aes_sessKeys(LMIC.devNonce - 1, &LMIC.frame[OFF_JA_ARTNONCE], LMIC.nwkKey,
 800384c:	4b2c      	ldr	r3, [pc, #176]	@ (8003900 <processJoinAccept+0x26c>)
 800384e:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 8003852:	3b01      	subs	r3, #1
 8003854:	b298      	uxth	r0, r3
 8003856:	4b32      	ldr	r3, [pc, #200]	@ (8003920 <processJoinAccept+0x28c>)
 8003858:	4a32      	ldr	r2, [pc, #200]	@ (8003924 <processJoinAccept+0x290>)
 800385a:	492d      	ldr	r1, [pc, #180]	@ (8003910 <processJoinAccept+0x27c>)
 800385c:	f7fe fbac 	bl	8001fb8 <aes_sessKeys>
					e_.mic = mic,
					e_.reason = ((LMIC.opmode & OP_REJOIN) != 0
							? EV::joininfo_t::REJOIN_ACCEPT
							: EV::joininfo_t::ACCEPT)));

	ASSERT((LMIC.opmode & (OP_JOINING | OP_REJOIN)) != 0);
 8003860:	4b27      	ldr	r3, [pc, #156]	@ (8003900 <processJoinAccept+0x26c>)
 8003862:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003866:	f003 0324 	and.w	r3, r3, #36	@ 0x24
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <processJoinAccept+0x1de>
 800386e:	f7fd ffeb 	bl	8001848 <hal_failed>
	if ((LMIC.opmode & OP_REJOIN) != 0) {
 8003872:	4b23      	ldr	r3, [pc, #140]	@ (8003900 <processJoinAccept+0x26c>)
 8003874:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003878:	f003 0320 	and.w	r3, r3, #32
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00e      	beq.n	800389e <processJoinAccept+0x20a>
		// Lower DR every try below current UP DR
		LMIC.datarate = lowerDR(LMIC.datarate, LMIC.rejoinCnt);
 8003880:	4b1f      	ldr	r3, [pc, #124]	@ (8003900 <processJoinAccept+0x26c>)
 8003882:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8003886:	4a1e      	ldr	r2, [pc, #120]	@ (8003900 <processJoinAccept+0x26c>)
 8003888:	f892 20b2 	ldrb.w	r2, [r2, #178]	@ 0xb2
 800388c:	4611      	mov	r1, r2
 800388e:	4618      	mov	r0, r3
 8003890:	f7fe f968 	bl	8001b64 <lowerDR>
 8003894:	4603      	mov	r3, r0
 8003896:	461a      	mov	r2, r3
 8003898:	4b19      	ldr	r3, [pc, #100]	@ (8003900 <processJoinAccept+0x26c>)
 800389a:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
	}
	LMIC.opmode &= ~(OP_JOINING | OP_TRACK | OP_REJOIN | OP_TXRXPEND
 800389e:	4b18      	ldr	r3, [pc, #96]	@ (8003900 <processJoinAccept+0x26c>)
 80038a0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80038a4:	f423 7329 	bic.w	r3, r3, #676	@ 0x2a4
 80038a8:	f023 0302 	bic.w	r3, r3, #2
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	4b14      	ldr	r3, [pc, #80]	@ (8003900 <processJoinAccept+0x26c>)
 80038b0:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			| OP_PINGINI) | OP_NEXTCHNL;
	LMIC.txCnt = 0;
 80038b4:	4b12      	ldr	r3, [pc, #72]	@ (8003900 <processJoinAccept+0x26c>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	stateJustJoined();
 80038bc:	f7ff f9f2 	bl	8002ca4 <stateJustJoined>
	LMIC.dn2Dr = LMIC.frame[OFF_JA_DLSET] & 0x0F;
 80038c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003900 <processJoinAccept+0x26c>)
 80038c2:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003900 <processJoinAccept+0x26c>)
 80038ce:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
	LMIC.rxDelay = LMIC.frame[OFF_JA_RXDLY];
 80038d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003900 <processJoinAccept+0x26c>)
 80038d4:	f893 2154 	ldrb.w	r2, [r3, #340]	@ 0x154
 80038d8:	4b09      	ldr	r3, [pc, #36]	@ (8003900 <processJoinAccept+0x26c>)
 80038da:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
	if (LMIC.rxDelay == 0)
 80038de:	4b08      	ldr	r3, [pc, #32]	@ (8003900 <processJoinAccept+0x26c>)
 80038e0:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d103      	bne.n	80038f0 <processJoinAccept+0x25c>
		LMIC.rxDelay = 1;
 80038e8:	4b05      	ldr	r3, [pc, #20]	@ (8003900 <processJoinAccept+0x26c>)
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
	reportEvent(EV_JOINED);
 80038f0:	2006      	movs	r0, #6
 80038f2:	f7ff f9b9 	bl	8002c68 <reportEvent>
	return 1;
 80038f6:	2301      	movs	r3, #1
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3718      	adds	r7, #24
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	200001f0 	.word	0x200001f0
 8003904:	0800367d 	.word	0x0800367d
 8003908:	08002c55 	.word	0x08002c55
 800390c:	20000204 	.word	0x20000204
 8003910:	20000339 	.word	0x20000339
 8003914:	20000338 	.word	0x20000338
 8003918:	2000033f 	.word	0x2000033f
 800391c:	2000033c 	.word	0x2000033c
 8003920:	200002f4 	.word	0x200002f4
 8003924:	200002e4 	.word	0x200002e4

08003928 <processRx2Jacc>:

static void processRx2Jacc(xref2osjob_t osjob)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
	if (LMIC.dataLen == 0)
 8003930:	4b07      	ldr	r3, [pc, #28]	@ (8003950 <processRx2Jacc+0x28>)
 8003932:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003936:	2b00      	cmp	r3, #0
 8003938:	d103      	bne.n	8003942 <processRx2Jacc+0x1a>
		LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 800393a:	4b05      	ldr	r3, [pc, #20]	@ (8003950 <processRx2Jacc+0x28>)
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	processJoinAccept();
 8003942:	f7ff fea7 	bl	8003694 <processJoinAccept>
}
 8003946:	bf00      	nop
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	200001f0 	.word	0x200001f0

08003954 <setupRx2Jacc>:

static void setupRx2Jacc(xref2osjob_t osjob)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
	LMIC.osjob.func = FUNC_ADDR(processRx2Jacc);
 800395c:	4b04      	ldr	r3, [pc, #16]	@ (8003970 <setupRx2Jacc+0x1c>)
 800395e:	4a05      	ldr	r2, [pc, #20]	@ (8003974 <setupRx2Jacc+0x20>)
 8003960:	61da      	str	r2, [r3, #28]
	setupRx2();
 8003962:	f7ff fdcf 	bl	8003504 <setupRx2>
}
 8003966:	bf00      	nop
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	200001f0 	.word	0x200001f0
 8003974:	08003929 	.word	0x08003929

08003978 <processRx1Jacc>:

static void processRx1Jacc(xref2osjob_t osjob)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
	if (LMIC.dataLen == 0 || !processJoinAccept())
 8003980:	4b08      	ldr	r3, [pc, #32]	@ (80039a4 <processRx1Jacc+0x2c>)
 8003982:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003986:	2b00      	cmp	r3, #0
 8003988:	d004      	beq.n	8003994 <processRx1Jacc+0x1c>
 800398a:	f7ff fe83 	bl	8003694 <processJoinAccept>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d103      	bne.n	800399c <processRx1Jacc+0x24>
		schedRx2(DELAY_JACC2_osticks, FUNC_ADDR(setupRx2Jacc));
 8003994:	4904      	ldr	r1, [pc, #16]	@ (80039a8 <processRx1Jacc+0x30>)
 8003996:	4805      	ldr	r0, [pc, #20]	@ (80039ac <processRx1Jacc+0x34>)
 8003998:	f7ff fdd4 	bl	8003544 <schedRx2>
}
 800399c:	bf00      	nop
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	200001f0 	.word	0x200001f0
 80039a8:	08003955 	.word	0x08003955
 80039ac:	0002ee00 	.word	0x0002ee00

080039b0 <setupRx1Jacc>:

static void setupRx1Jacc(xref2osjob_t osjob)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
	setupRx1(FUNC_ADDR(processRx1Jacc));
 80039b8:	4803      	ldr	r0, [pc, #12]	@ (80039c8 <setupRx1Jacc+0x18>)
 80039ba:	f7ff fdeb 	bl	8003594 <setupRx1>
}
 80039be:	bf00      	nop
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	08003979 	.word	0x08003979

080039cc <jreqDone>:

static void jreqDone(xref2osjob_t osjob)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
	txDone(DELAY_JACC1_osticks, FUNC_ADDR(setupRx1Jacc));
 80039d4:	4903      	ldr	r1, [pc, #12]	@ (80039e4 <jreqDone+0x18>)
 80039d6:	4804      	ldr	r0, [pc, #16]	@ (80039e8 <jreqDone+0x1c>)
 80039d8:	f7ff fdfe 	bl	80035d8 <txDone>
}
 80039dc:	bf00      	nop
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	080039b1 	.word	0x080039b1
 80039e8:	00027100 	.word	0x00027100

080039ec <processRx2DnDataDelay>:

// Fwd decl.
static bit_t processDnData(void);

static void processRx2DnDataDelay(xref2osjob_t osjob)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
	processDnData();
 80039f4:	f000 fbc6 	bl	8004184 <processDnData>
}
 80039f8:	bf00      	nop
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <processRx2DnData>:

static void processRx2DnData(xref2osjob_t osjob)
{
 8003a00:	b590      	push	{r4, r7, lr}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
	if (LMIC.dataLen == 0) {
 8003a08:	4b0f      	ldr	r3, [pc, #60]	@ (8003a48 <processRx2DnData+0x48>)
 8003a0a:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d115      	bne.n	8003a3e <processRx2DnData+0x3e>
		LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 8003a12:	4b0d      	ldr	r3, [pc, #52]	@ (8003a48 <processRx2DnData+0x48>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		// Delay callback processing to avoid up TX while gateway is txing our missed frame! 
		// Since DNW2 uses SF12 by default we wait 3 secs.
		os_setTimedCallback(&LMIC.osjob,
				(os_getTime() + DNW2_SAFETY_ZONE + rndDelay(2)),
 8003a1a:	f001 fadf 	bl	8004fdc <os_getTime>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	f503 34bb 	add.w	r4, r3, #95744	@ 0x17600
 8003a24:	f504 7480 	add.w	r4, r4, #256	@ 0x100
 8003a28:	2002      	movs	r0, #2
 8003a2a:	f7fe fd4f 	bl	80024cc <rndDelay>
 8003a2e:	4603      	mov	r3, r0
		os_setTimedCallback(&LMIC.osjob,
 8003a30:	4423      	add	r3, r4
 8003a32:	4a06      	ldr	r2, [pc, #24]	@ (8003a4c <processRx2DnData+0x4c>)
 8003a34:	4619      	mov	r1, r3
 8003a36:	4806      	ldr	r0, [pc, #24]	@ (8003a50 <processRx2DnData+0x50>)
 8003a38:	f001 fb3a 	bl	80050b0 <os_setTimedCallback>
				FUNC_ADDR(processRx2DnDataDelay));
		return;
 8003a3c:	e001      	b.n	8003a42 <processRx2DnData+0x42>
	}
	processDnData();
 8003a3e:	f000 fba1 	bl	8004184 <processDnData>
}
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd90      	pop	{r4, r7, pc}
 8003a48:	200001f0 	.word	0x200001f0
 8003a4c:	080039ed 	.word	0x080039ed
 8003a50:	20000204 	.word	0x20000204

08003a54 <setupRx2DnData>:

static void setupRx2DnData(xref2osjob_t osjob)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
	LMIC.osjob.func = FUNC_ADDR(processRx2DnData);
 8003a5c:	4b04      	ldr	r3, [pc, #16]	@ (8003a70 <setupRx2DnData+0x1c>)
 8003a5e:	4a05      	ldr	r2, [pc, #20]	@ (8003a74 <setupRx2DnData+0x20>)
 8003a60:	61da      	str	r2, [r3, #28]
	setupRx2();
 8003a62:	f7ff fd4f 	bl	8003504 <setupRx2>
}
 8003a66:	bf00      	nop
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	200001f0 	.word	0x200001f0
 8003a74:	08003a01 	.word	0x08003a01

08003a78 <processRx1DnData>:

static void processRx1DnData(xref2osjob_t osjob)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
	if (LMIC.dataLen == 0 || !processDnData())
 8003a80:	4b0d      	ldr	r3, [pc, #52]	@ (8003ab8 <processRx1DnData+0x40>)
 8003a82:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d004      	beq.n	8003a94 <processRx1DnData+0x1c>
 8003a8a:	f000 fb7b 	bl	8004184 <processDnData>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10c      	bne.n	8003aae <processRx1DnData+0x36>
		schedRx2(sec2osticks(LMIC.rxDelay + (int )DELAY_EXTDNW2),
 8003a94:	4b08      	ldr	r3, [pc, #32]	@ (8003ab8 <processRx1DnData+0x40>)
 8003a96:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003aa2:	fb02 f303 	mul.w	r3, r2, r3
 8003aa6:	4905      	ldr	r1, [pc, #20]	@ (8003abc <processRx1DnData+0x44>)
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff fd4b 	bl	8003544 <schedRx2>
				FUNC_ADDR(setupRx2DnData));
}
 8003aae:	bf00      	nop
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	200001f0 	.word	0x200001f0
 8003abc:	08003a55 	.word	0x08003a55

08003ac0 <setupRx1DnData>:

static void setupRx1DnData(xref2osjob_t osjob)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
	setupRx1(FUNC_ADDR(processRx1DnData));
 8003ac8:	4803      	ldr	r0, [pc, #12]	@ (8003ad8 <setupRx1DnData+0x18>)
 8003aca:	f7ff fd63 	bl	8003594 <setupRx1>
}
 8003ace:	bf00      	nop
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	08003a79 	.word	0x08003a79

08003adc <updataDone>:

static void updataDone(xref2osjob_t osjob)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
	txDone(sec2osticks(LMIC.rxDelay), FUNC_ADDR(setupRx1DnData));
 8003ae4:	4b07      	ldr	r3, [pc, #28]	@ (8003b04 <updataDone+0x28>)
 8003ae6:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 8003aea:	461a      	mov	r2, r3
 8003aec:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003af0:	fb02 f303 	mul.w	r3, r2, r3
 8003af4:	4904      	ldr	r1, [pc, #16]	@ (8003b08 <updataDone+0x2c>)
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7ff fd6e 	bl	80035d8 <txDone>
}
 8003afc:	bf00      	nop
 8003afe:	3708      	adds	r7, #8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	200001f0 	.word	0x200001f0
 8003b08:	08003ac1 	.word	0x08003ac1

08003b0c <buildDataFrame>:

// ======================================== 

static void buildDataFrame(void)
{
 8003b0c:	b590      	push	{r4, r7, lr}
 8003b0e:	b087      	sub	sp, #28
 8003b10:	af02      	add	r7, sp, #8
	bit_t txdata = ((LMIC.opmode & (OP_TXDATA | OP_POLL)) != OP_POLL);
 8003b12:	4ba3      	ldr	r3, [pc, #652]	@ (8003da0 <buildDataFrame+0x294>)
 8003b14:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003b18:	f003 0318 	and.w	r3, r3, #24
 8003b1c:	2b10      	cmp	r3, #16
 8003b1e:	bf14      	ite	ne
 8003b20:	2301      	movne	r3, #1
 8003b22:	2300      	moveq	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	73fb      	strb	r3, [r7, #15]
	u1_t dlen = txdata ? LMIC.pendTxLen : 0;
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <buildDataFrame+0x2a>
 8003b2e:	4b9c      	ldr	r3, [pc, #624]	@ (8003da0 <buildDataFrame+0x294>)
 8003b30:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 8003b34:	e000      	b.n	8003b38 <buildDataFrame+0x2c>
 8003b36:	2300      	movs	r3, #0
 8003b38:	71bb      	strb	r3, [r7, #6]

	// Piggyback MAC options
	// Prioritize by importance
	int end = OFF_DAT_OPTS;
 8003b3a:	2308      	movs	r3, #8
 8003b3c:	60bb      	str	r3, [r7, #8]
	if ((LMIC.opmode & (OP_TRACK | OP_PINGABLE)) == (OP_TRACK | OP_PINGABLE)) {
 8003b3e:	4b98      	ldr	r3, [pc, #608]	@ (8003da0 <buildDataFrame+0x294>)
 8003b40:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003b44:	461a      	mov	r2, r3
 8003b46:	f240 4302 	movw	r3, #1026	@ 0x402
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	f240 4202 	movw	r2, #1026	@ 0x402
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d11c      	bne.n	8003b8e <buildDataFrame+0x82>
		// Indicate pingability in every UP frame
		LMIC.frame[end] = MCMD_PING_IND;
 8003b54:	4a92      	ldr	r2, [pc, #584]	@ (8003da0 <buildDataFrame+0x294>)
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	4413      	add	r3, r2
 8003b5a:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003b5e:	2210      	movs	r2, #16
 8003b60:	701a      	strb	r2, [r3, #0]
		LMIC.frame[end + 1] = LMIC.ping.dr | (LMIC.ping.intvExp << 4);
 8003b62:	4b8f      	ldr	r3, [pc, #572]	@ (8003da0 <buildDataFrame+0x294>)
 8003b64:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8003b68:	b25a      	sxtb	r2, r3
 8003b6a:	4b8d      	ldr	r3, [pc, #564]	@ (8003da0 <buildDataFrame+0x294>)
 8003b6c:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	b25b      	sxtb	r3, r3
 8003b74:	4313      	orrs	r3, r2
 8003b76:	b25a      	sxtb	r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	b2d1      	uxtb	r1, r2
 8003b7e:	4a88      	ldr	r2, [pc, #544]	@ (8003da0 <buildDataFrame+0x294>)
 8003b80:	4413      	add	r3, r2
 8003b82:	460a      	mov	r2, r1
 8003b84:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		end += 2;
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	3302      	adds	r3, #2
 8003b8c:	60bb      	str	r3, [r7, #8]
	}
	if (LMIC.dutyCapAns) {
 8003b8e:	4b84      	ldr	r3, [pc, #528]	@ (8003da0 <buildDataFrame+0x294>)
 8003b90:	f893 3129 	ldrb.w	r3, [r3, #297]	@ 0x129
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00d      	beq.n	8003bb4 <buildDataFrame+0xa8>
		LMIC.frame[end] = MCMD_DCAP_ANS;
 8003b98:	4a81      	ldr	r2, [pc, #516]	@ (8003da0 <buildDataFrame+0x294>)
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003ba2:	2204      	movs	r2, #4
 8003ba4:	701a      	strb	r2, [r3, #0]
		end += 1;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	60bb      	str	r3, [r7, #8]
		LMIC.dutyCapAns = 0;
 8003bac:	4b7c      	ldr	r3, [pc, #496]	@ (8003da0 <buildDataFrame+0x294>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
	}
	if (LMIC.dn2Ans) {
 8003bb4:	4b7a      	ldr	r3, [pc, #488]	@ (8003da0 <buildDataFrame+0x294>)
 8003bb6:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d01a      	beq.n	8003bf4 <buildDataFrame+0xe8>
		LMIC.frame[end + 0] = MCMD_DN2P_ANS;
 8003bbe:	4a78      	ldr	r2, [pc, #480]	@ (8003da0 <buildDataFrame+0x294>)
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003bc8:	2205      	movs	r2, #5
 8003bca:	701a      	strb	r2, [r3, #0]
		LMIC.frame[end + 1] = LMIC.dn2Ans & ~MCMD_DN2P_ANS_RFU;
 8003bcc:	4b74      	ldr	r3, [pc, #464]	@ (8003da0 <buildDataFrame+0x294>)
 8003bce:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	f002 0203 	and.w	r2, r2, #3
 8003bda:	b2d1      	uxtb	r1, r2
 8003bdc:	4a70      	ldr	r2, [pc, #448]	@ (8003da0 <buildDataFrame+0x294>)
 8003bde:	4413      	add	r3, r2
 8003be0:	460a      	mov	r2, r1
 8003be2:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		end += 2;
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	3302      	adds	r3, #2
 8003bea:	60bb      	str	r3, [r7, #8]
		LMIC.dn2Ans = 0;
 8003bec:	4b6c      	ldr	r3, [pc, #432]	@ (8003da0 <buildDataFrame+0x294>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
	}
	if (LMIC.devsAns) {  // answer to device status
 8003bf4:	4b6a      	ldr	r3, [pc, #424]	@ (8003da0 <buildDataFrame+0x294>)
 8003bf6:	f893 3126 	ldrb.w	r3, [r3, #294]	@ 0x126
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d021      	beq.n	8003c42 <buildDataFrame+0x136>
		LMIC.frame[end + 0] = MCMD_DEVS_ANS;
 8003bfe:	4a68      	ldr	r2, [pc, #416]	@ (8003da0 <buildDataFrame+0x294>)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003c08:	2206      	movs	r2, #6
 8003c0a:	701a      	strb	r2, [r3, #0]
		LMIC.frame[end + 1] = os_getBattLevel();
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	1c5c      	adds	r4, r3, #1
 8003c10:	f7fe f869 	bl	8001ce6 <os_getBattLevel>
 8003c14:	4603      	mov	r3, r0
 8003c16:	461a      	mov	r2, r3
 8003c18:	4b61      	ldr	r3, [pc, #388]	@ (8003da0 <buildDataFrame+0x294>)
 8003c1a:	4423      	add	r3, r4
 8003c1c:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		LMIC.frame[end + 2] = LMIC.margin;
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	3302      	adds	r3, #2
 8003c24:	4a5e      	ldr	r2, [pc, #376]	@ (8003da0 <buildDataFrame+0x294>)
 8003c26:	f892 1124 	ldrb.w	r1, [r2, #292]	@ 0x124
 8003c2a:	4a5d      	ldr	r2, [pc, #372]	@ (8003da0 <buildDataFrame+0x294>)
 8003c2c:	4413      	add	r3, r2
 8003c2e:	460a      	mov	r2, r1
 8003c30:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		end += 3;
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	3303      	adds	r3, #3
 8003c38:	60bb      	str	r3, [r7, #8]
		LMIC.devsAns = 0;
 8003c3a:	4b59      	ldr	r3, [pc, #356]	@ (8003da0 <buildDataFrame+0x294>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
	}
	if (LMIC.ladrAns) {  // answer to ADR change
 8003c42:	4b57      	ldr	r3, [pc, #348]	@ (8003da0 <buildDataFrame+0x294>)
 8003c44:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d01a      	beq.n	8003c82 <buildDataFrame+0x176>
		LMIC.frame[end + 0] = MCMD_LADR_ANS;
 8003c4c:	4a54      	ldr	r2, [pc, #336]	@ (8003da0 <buildDataFrame+0x294>)
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	4413      	add	r3, r2
 8003c52:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003c56:	2203      	movs	r2, #3
 8003c58:	701a      	strb	r2, [r3, #0]
		LMIC.frame[end + 1] = LMIC.ladrAns & ~MCMD_LADR_ANS_RFU;
 8003c5a:	4b51      	ldr	r3, [pc, #324]	@ (8003da0 <buildDataFrame+0x294>)
 8003c5c:	f893 2125 	ldrb.w	r2, [r3, #293]	@ 0x125
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	3301      	adds	r3, #1
 8003c64:	f002 0207 	and.w	r2, r2, #7
 8003c68:	b2d1      	uxtb	r1, r2
 8003c6a:	4a4d      	ldr	r2, [pc, #308]	@ (8003da0 <buildDataFrame+0x294>)
 8003c6c:	4413      	add	r3, r2
 8003c6e:	460a      	mov	r2, r1
 8003c70:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		end += 2;
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	3302      	adds	r3, #2
 8003c78:	60bb      	str	r3, [r7, #8]
		LMIC.ladrAns = 0;
 8003c7a:	4b49      	ldr	r3, [pc, #292]	@ (8003da0 <buildDataFrame+0x294>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
	}
	if (LMIC.bcninfoTries > 0) {
 8003c82:	4b47      	ldr	r3, [pc, #284]	@ (8003da0 <buildDataFrame+0x294>)
 8003c84:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d009      	beq.n	8003ca0 <buildDataFrame+0x194>
		LMIC.frame[end] = MCMD_BCNI_REQ;
 8003c8c:	4a44      	ldr	r2, [pc, #272]	@ (8003da0 <buildDataFrame+0x294>)
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003c96:	2212      	movs	r2, #18
 8003c98:	701a      	strb	r2, [r3, #0]
		end += 1;
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	60bb      	str	r3, [r7, #8]
	}
	if (LMIC.adrChanged) {
 8003ca0:	4b3f      	ldr	r3, [pc, #252]	@ (8003da0 <buildDataFrame+0x294>)
 8003ca2:	f893 3122 	ldrb.w	r3, [r3, #290]	@ 0x122
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00c      	beq.n	8003cc4 <buildDataFrame+0x1b8>
		if (LMIC.adrAckReq < 0)
 8003caa:	4b3d      	ldr	r3, [pc, #244]	@ (8003da0 <buildDataFrame+0x294>)
 8003cac:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	da03      	bge.n	8003cbc <buildDataFrame+0x1b0>
			LMIC.adrAckReq = 0;
 8003cb4:	4b3a      	ldr	r3, [pc, #232]	@ (8003da0 <buildDataFrame+0x294>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
		LMIC.adrChanged = 0;
 8003cbc:	4b38      	ldr	r3, [pc, #224]	@ (8003da0 <buildDataFrame+0x294>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
	}
	if (LMIC.pingSetAns != 0) {
 8003cc4:	4b36      	ldr	r3, [pc, #216]	@ (8003da0 <buildDataFrame+0x294>)
 8003cc6:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d01a      	beq.n	8003d04 <buildDataFrame+0x1f8>
		LMIC.frame[end + 0] = MCMD_PING_ANS;
 8003cce:	4a34      	ldr	r2, [pc, #208]	@ (8003da0 <buildDataFrame+0x294>)
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003cd8:	2211      	movs	r2, #17
 8003cda:	701a      	strb	r2, [r3, #0]
		LMIC.frame[end + 1] = LMIC.pingSetAns & ~MCMD_PING_ANS_RFU;
 8003cdc:	4b30      	ldr	r3, [pc, #192]	@ (8003da0 <buildDataFrame+0x294>)
 8003cde:	f893 2133 	ldrb.w	r2, [r3, #307]	@ 0x133
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	f002 0201 	and.w	r2, r2, #1
 8003cea:	b2d1      	uxtb	r1, r2
 8003cec:	4a2c      	ldr	r2, [pc, #176]	@ (8003da0 <buildDataFrame+0x294>)
 8003cee:	4413      	add	r3, r2
 8003cf0:	460a      	mov	r2, r1
 8003cf2:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		end += 2;
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	3302      	adds	r3, #2
 8003cfa:	60bb      	str	r3, [r7, #8]
		LMIC.pingSetAns = 0;
 8003cfc:	4b28      	ldr	r3, [pc, #160]	@ (8003da0 <buildDataFrame+0x294>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
	}
	if (LMIC.snchAns) {
 8003d04:	4b26      	ldr	r3, [pc, #152]	@ (8003da0 <buildDataFrame+0x294>)
 8003d06:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d01a      	beq.n	8003d44 <buildDataFrame+0x238>
		LMIC.frame[end + 0] = MCMD_SNCH_ANS;
 8003d0e:	4a24      	ldr	r2, [pc, #144]	@ (8003da0 <buildDataFrame+0x294>)
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	4413      	add	r3, r2
 8003d14:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003d18:	2207      	movs	r2, #7
 8003d1a:	701a      	strb	r2, [r3, #0]
		LMIC.frame[end + 1] = LMIC.snchAns & ~MCMD_SNCH_ANS_RFU;
 8003d1c:	4b20      	ldr	r3, [pc, #128]	@ (8003da0 <buildDataFrame+0x294>)
 8003d1e:	f893 212a 	ldrb.w	r2, [r3, #298]	@ 0x12a
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	3301      	adds	r3, #1
 8003d26:	f002 0203 	and.w	r2, r2, #3
 8003d2a:	b2d1      	uxtb	r1, r2
 8003d2c:	4a1c      	ldr	r2, [pc, #112]	@ (8003da0 <buildDataFrame+0x294>)
 8003d2e:	4413      	add	r3, r2
 8003d30:	460a      	mov	r2, r1
 8003d32:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		end += 2;
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	3302      	adds	r3, #2
 8003d3a:	60bb      	str	r3, [r7, #8]
		LMIC.snchAns = 0;
 8003d3c:	4b18      	ldr	r3, [pc, #96]	@ (8003da0 <buildDataFrame+0x294>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
	}
	ASSERT(end <= OFF_DAT_OPTS + 16);
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2b18      	cmp	r3, #24
 8003d48:	dd01      	ble.n	8003d4e <buildDataFrame+0x242>
 8003d4a:	f7fd fd7d 	bl	8001848 <hal_failed>

	u1_t flen = end + (txdata ? 5 + dlen : 4);
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <buildDataFrame+0x250>
 8003d54:	79bb      	ldrb	r3, [r7, #6]
 8003d56:	3305      	adds	r3, #5
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	e000      	b.n	8003d5e <buildDataFrame+0x252>
 8003d5c:	2304      	movs	r3, #4
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	b2d2      	uxtb	r2, r2
 8003d62:	4413      	add	r3, r2
 8003d64:	71fb      	strb	r3, [r7, #7]
	if (flen > MAX_LEN_FRAME) {
 8003d66:	79fb      	ldrb	r3, [r7, #7]
 8003d68:	2b40      	cmp	r3, #64	@ 0x40
 8003d6a:	d905      	bls.n	8003d78 <buildDataFrame+0x26c>
		// Options and payload too big - delay payload
		txdata = 0;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	73fb      	strb	r3, [r7, #15]
		flen = end + 4;
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	3304      	adds	r3, #4
 8003d76:	71fb      	strb	r3, [r7, #7]
	}
	LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DAUP | HDR_MAJOR_V1;
 8003d78:	4b09      	ldr	r3, [pc, #36]	@ (8003da0 <buildDataFrame+0x294>)
 8003d7a:	2240      	movs	r2, #64	@ 0x40
 8003d7c:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
	LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 8003d80:	4b07      	ldr	r3, [pc, #28]	@ (8003da0 <buildDataFrame+0x294>)
 8003d82:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 8003d86:	4b06      	ldr	r3, [pc, #24]	@ (8003da0 <buildDataFrame+0x294>)
 8003d88:	f893 3127 	ldrb.w	r3, [r3, #295]	@ 0x127
			| (LMIC.adrAckReq >= 0 ? FCT_ADRARQ : 0) | (end - OFF_DAT_OPTS));
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	b25b      	sxtb	r3, r3
 8003d92:	4a03      	ldr	r2, [pc, #12]	@ (8003da0 <buildDataFrame+0x294>)
 8003d94:	f992 2121 	ldrsb.w	r2, [r2, #289]	@ 0x121
 8003d98:	2a00      	cmp	r2, #0
 8003d9a:	db03      	blt.n	8003da4 <buildDataFrame+0x298>
 8003d9c:	2240      	movs	r2, #64	@ 0x40
 8003d9e:	e002      	b.n	8003da6 <buildDataFrame+0x29a>
 8003da0:	200001f0 	.word	0x200001f0
 8003da4:	2200      	movs	r2, #0
 8003da6:	4313      	orrs	r3, r2
 8003da8:	b25a      	sxtb	r2, r3
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	3b08      	subs	r3, #8
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	b25b      	sxtb	r3, r3
 8003db4:	4313      	orrs	r3, r2
 8003db6:	b25b      	sxtb	r3, r3
 8003db8:	b2da      	uxtb	r2, r3
	LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 8003dba:	4b40      	ldr	r3, [pc, #256]	@ (8003ebc <buildDataFrame+0x3b0>)
 8003dbc:	f883 214d 	strb.w	r2, [r3, #333]	@ 0x14d
	os_wlsbf4(LMIC.frame + OFF_DAT_ADDR, LMIC.devaddr);
 8003dc0:	4a3f      	ldr	r2, [pc, #252]	@ (8003ec0 <buildDataFrame+0x3b4>)
 8003dc2:	4b3e      	ldr	r3, [pc, #248]	@ (8003ebc <buildDataFrame+0x3b0>)
 8003dc4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4610      	mov	r0, r2
 8003dcc:	f7fd ff49 	bl	8001c62 <os_wlsbf4>

	if (LMIC.txCnt == 0) {
 8003dd0:	4b3a      	ldr	r3, [pc, #232]	@ (8003ebc <buildDataFrame+0x3b0>)
 8003dd2:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d106      	bne.n	8003de8 <buildDataFrame+0x2dc>
		LMIC.seqnoUp += 1;
 8003dda:	4b38      	ldr	r3, [pc, #224]	@ (8003ebc <buildDataFrame+0x3b0>)
 8003ddc:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8003de0:	3301      	adds	r3, #1
 8003de2:	4a36      	ldr	r2, [pc, #216]	@ (8003ebc <buildDataFrame+0x3b0>)
 8003de4:	f8c2 311c 	str.w	r3, [r2, #284]	@ 0x11c
						e_.info = LMIC.seqnoUp-1,
						e_.info2 = ((LMIC.txCnt+1) |
								(DRADJUST[LMIC.txCnt+1] << 8) |
								((LMIC.datarate|DR_PAGE)<<16))));
	}
	os_wlsbf2(LMIC.frame + OFF_DAT_SEQNO, LMIC.seqnoUp - 1);
 8003de8:	4a36      	ldr	r2, [pc, #216]	@ (8003ec4 <buildDataFrame+0x3b8>)
 8003dea:	4b34      	ldr	r3, [pc, #208]	@ (8003ebc <buildDataFrame+0x3b0>)
 8003dec:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	3b01      	subs	r3, #1
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	4619      	mov	r1, r3
 8003df8:	4610      	mov	r0, r2
 8003dfa:	f7fd ff1b 	bl	8001c34 <os_wlsbf2>

	// Clear pending DN confirmation
	LMIC.dnConf = 0;
 8003dfe:	4b2f      	ldr	r3, [pc, #188]	@ (8003ebc <buildDataFrame+0x3b0>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120

	if (txdata) {
 8003e06:	7bfb      	ldrb	r3, [r7, #15]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d03e      	beq.n	8003e8a <buildDataFrame+0x37e>
		if (LMIC.pendTxConf) {
 8003e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8003ebc <buildDataFrame+0x3b0>)
 8003e0e:	f893 30bb 	ldrb.w	r3, [r3, #187]	@ 0xbb
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00c      	beq.n	8003e30 <buildDataFrame+0x324>
			// Confirmed only makes sense if we have a payload (or at least a port)
			LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DCUP | HDR_MAJOR_V1;
 8003e16:	4b29      	ldr	r3, [pc, #164]	@ (8003ebc <buildDataFrame+0x3b0>)
 8003e18:	2280      	movs	r2, #128	@ 0x80
 8003e1a:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
			if (LMIC.txCnt == 0)
 8003e1e:	4b27      	ldr	r3, [pc, #156]	@ (8003ebc <buildDataFrame+0x3b0>)
 8003e20:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d103      	bne.n	8003e30 <buildDataFrame+0x324>
				LMIC.txCnt = 1;
 8003e28:	4b24      	ldr	r3, [pc, #144]	@ (8003ebc <buildDataFrame+0x3b0>)
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		}
		LMIC.frame[end] = LMIC.pendTxPort;
 8003e30:	4b22      	ldr	r3, [pc, #136]	@ (8003ebc <buildDataFrame+0x3b0>)
 8003e32:	f893 10ba 	ldrb.w	r1, [r3, #186]	@ 0xba
 8003e36:	4a21      	ldr	r2, [pc, #132]	@ (8003ebc <buildDataFrame+0x3b0>)
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003e40:	460a      	mov	r2, r1
 8003e42:	701a      	strb	r2, [r3, #0]
		os_copyMem(LMIC.frame + end + 1, LMIC.pendTxData, dlen);
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	3301      	adds	r3, #1
 8003e48:	4a1f      	ldr	r2, [pc, #124]	@ (8003ec8 <buildDataFrame+0x3bc>)
 8003e4a:	4413      	add	r3, r2
 8003e4c:	79ba      	ldrb	r2, [r7, #6]
 8003e4e:	491f      	ldr	r1, [pc, #124]	@ (8003ecc <buildDataFrame+0x3c0>)
 8003e50:	4618      	mov	r0, r3
 8003e52:	f006 fef3 	bl	800ac3c <memcpy>
		aes_cipher(LMIC.pendTxPort == 0 ? LMIC.nwkKey : LMIC.artKey,
 8003e56:	4b19      	ldr	r3, [pc, #100]	@ (8003ebc <buildDataFrame+0x3b0>)
 8003e58:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <buildDataFrame+0x358>
 8003e60:	481b      	ldr	r0, [pc, #108]	@ (8003ed0 <buildDataFrame+0x3c4>)
 8003e62:	e000      	b.n	8003e66 <buildDataFrame+0x35a>
 8003e64:	481b      	ldr	r0, [pc, #108]	@ (8003ed4 <buildDataFrame+0x3c8>)
 8003e66:	4b15      	ldr	r3, [pc, #84]	@ (8003ebc <buildDataFrame+0x3b0>)
 8003e68:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
				LMIC.devaddr, LMIC.seqnoUp - 1,
 8003e6c:	4b13      	ldr	r3, [pc, #76]	@ (8003ebc <buildDataFrame+0x3b0>)
 8003e6e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
		aes_cipher(LMIC.pendTxPort == 0 ? LMIC.nwkKey : LMIC.artKey,
 8003e72:	1e5c      	subs	r4, r3, #1
				/*up*/0, LMIC.frame + end + 1, dlen);
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	3301      	adds	r3, #1
		aes_cipher(LMIC.pendTxPort == 0 ? LMIC.nwkKey : LMIC.artKey,
 8003e78:	4a13      	ldr	r2, [pc, #76]	@ (8003ec8 <buildDataFrame+0x3bc>)
 8003e7a:	4413      	add	r3, r2
 8003e7c:	79ba      	ldrb	r2, [r7, #6]
 8003e7e:	9201      	str	r2, [sp, #4]
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	2300      	movs	r3, #0
 8003e84:	4622      	mov	r2, r4
 8003e86:	f7fe f853 	bl	8001f30 <aes_cipher>
	}
	aes_appendMic(LMIC.nwkKey, LMIC.devaddr, LMIC.seqnoUp - 1, /*up*/0,
 8003e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8003ebc <buildDataFrame+0x3b0>)
 8003e8c:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 8003e90:	4b0a      	ldr	r3, [pc, #40]	@ (8003ebc <buildDataFrame+0x3b0>)
 8003e92:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8003e96:	1e5a      	subs	r2, r3, #1
 8003e98:	79fb      	ldrb	r3, [r7, #7]
 8003e9a:	3b04      	subs	r3, #4
 8003e9c:	9301      	str	r3, [sp, #4]
 8003e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8003ec8 <buildDataFrame+0x3bc>)
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	480a      	ldr	r0, [pc, #40]	@ (8003ed0 <buildDataFrame+0x3c4>)
 8003ea6:	f7fd ffc5 	bl	8001e34 <aes_appendMic>
					e_.fct = LMIC.frame[LORA::OFF_DAT_FCT],
					e_.port = LMIC.pendTxPort,
					e_.plen = txdata ? dlen : 0,
					e_.opts.length = end-LORA::OFF_DAT_OPTS,
					memcpy(&e_.opts[0], LMIC.frame+LORA::OFF_DAT_OPTS, end-LORA::OFF_DAT_OPTS)));
	LMIC.dataLen = flen;
 8003eaa:	4a04      	ldr	r2, [pc, #16]	@ (8003ebc <buildDataFrame+0x3b0>)
 8003eac:	79fb      	ldrb	r3, [r7, #7]
 8003eae:	f882 3147 	strb.w	r3, [r2, #327]	@ 0x147
}
 8003eb2:	bf00      	nop
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd90      	pop	{r4, r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	200001f0 	.word	0x200001f0
 8003ec0:	20000339 	.word	0x20000339
 8003ec4:	2000033e 	.word	0x2000033e
 8003ec8:	20000338 	.word	0x20000338
 8003ecc:	200002ad 	.word	0x200002ad
 8003ed0:	200002e4 	.word	0x200002e4
 8003ed4:	200002f4 	.word	0x200002f4

08003ed8 <onBcnRx>:

// Callback from HAL during scan mode or when job timer expires.
static void onBcnRx(xref2osjob_t job)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
	// If we arrive via job timer make sure to put radio to rest.
	os_radio(RADIO_RST);
 8003ee0:	2000      	movs	r0, #0
 8003ee2:	f001 fea1 	bl	8005c28 <os_radio>
	os_clearCallback(&LMIC.osjob);
 8003ee6:	4823      	ldr	r0, [pc, #140]	@ (8003f74 <onBcnRx+0x9c>)
 8003ee8:	f001 f89e 	bl	8005028 <os_clearCallback>
	if (LMIC.dataLen == 0) {
 8003eec:	4b22      	ldr	r3, [pc, #136]	@ (8003f78 <onBcnRx+0xa0>)
 8003eee:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10c      	bne.n	8003f10 <onBcnRx+0x38>
		// Nothing received - timeout
		LMIC.opmode &= ~(OP_SCAN | OP_TRACK);
 8003ef6:	4b20      	ldr	r3, [pc, #128]	@ (8003f78 <onBcnRx+0xa0>)
 8003ef8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003efc:	f023 0303 	bic.w	r3, r3, #3
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	4b1d      	ldr	r3, [pc, #116]	@ (8003f78 <onBcnRx+0xa0>)
 8003f04:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		reportEvent(EV_SCAN_TIMEOUT);
 8003f08:	2001      	movs	r0, #1
 8003f0a:	f7fe fead 	bl	8002c68 <reportEvent>
		return;
 8003f0e:	e02d      	b.n	8003f6c <onBcnRx+0x94>
	}
	if (decodeBeacon() <= 0) {
 8003f10:	f7fe ff2e 	bl	8002d70 <decodeBeacon>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	dc0f      	bgt.n	8003f3a <onBcnRx+0x62>
		// Something is wrong with the beacon - continue scan
		LMIC.dataLen = 0;
 8003f1a:	4b17      	ldr	r3, [pc, #92]	@ (8003f78 <onBcnRx+0xa0>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
		os_radio(RADIO_RXON);
 8003f22:	2003      	movs	r0, #3
 8003f24:	f001 fe80 	bl	8005c28 <os_radio>
		os_setTimedCallback(&LMIC.osjob, LMIC.bcninfo.txtime,
 8003f28:	4b13      	ldr	r3, [pc, #76]	@ (8003f78 <onBcnRx+0xa0>)
 8003f2a:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8003f2e:	4a13      	ldr	r2, [pc, #76]	@ (8003f7c <onBcnRx+0xa4>)
 8003f30:	4619      	mov	r1, r3
 8003f32:	4810      	ldr	r0, [pc, #64]	@ (8003f74 <onBcnRx+0x9c>)
 8003f34:	f001 f8bc 	bl	80050b0 <os_setTimedCallback>
				FUNC_ADDR(onBcnRx));
		return;
 8003f38:	e018      	b.n	8003f6c <onBcnRx+0x94>
	}
	// Found our 1st beacon
	// We don't have a previous beacon to calc some drift - assume
	// an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
	calcBcnRxWindowFromMillis(13, 1);
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	200d      	movs	r0, #13
 8003f3e:	f7fe f983 	bl	8002248 <calcBcnRxWindowFromMillis>
	LMIC.opmode &= ~OP_SCAN;          // turn SCAN off
 8003f42:	4b0d      	ldr	r3, [pc, #52]	@ (8003f78 <onBcnRx+0xa0>)
 8003f44:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003f48:	f023 0301 	bic.w	r3, r3, #1
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8003f78 <onBcnRx+0xa0>)
 8003f50:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	LMIC.opmode |= OP_TRACK;         // auto enable tracking
 8003f54:	4b08      	ldr	r3, [pc, #32]	@ (8003f78 <onBcnRx+0xa0>)
 8003f56:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003f5a:	f043 0302 	orr.w	r3, r3, #2
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	4b05      	ldr	r3, [pc, #20]	@ (8003f78 <onBcnRx+0xa0>)
 8003f62:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	reportEvent(EV_BEACON_FOUND);    // can be disabled in callback
 8003f66:	2002      	movs	r0, #2
 8003f68:	f7fe fe7e 	bl	8002c68 <reportEvent>
}
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20000204 	.word	0x20000204
 8003f78:	200001f0 	.word	0x200001f0
 8003f7c:	08003ed9 	.word	0x08003ed9

08003f80 <startScan>:
// netid defines when scan stops (any or specific beacon)
// This mode ends with events: EV_SCAN_TIMEOUT/EV_SCAN_BEACON
// Implicitely cancels any pending TX/RX transaction.
// Also cancels an onpoing joining procedure.
static void startScan(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
	ASSERT(LMIC.devaddr != 0 && (LMIC.opmode & OP_JOINING) == 0);
 8003f84:	4b27      	ldr	r3, [pc, #156]	@ (8004024 <startScan+0xa4>)
 8003f86:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d006      	beq.n	8003f9c <startScan+0x1c>
 8003f8e:	4b25      	ldr	r3, [pc, #148]	@ (8004024 <startScan+0xa4>)
 8003f90:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <startScan+0x20>
 8003f9c:	f7fd fc54 	bl	8001848 <hal_failed>
	if ((LMIC.opmode & OP_SHUTDOWN) != 0)
 8003fa0:	4b20      	ldr	r3, [pc, #128]	@ (8004024 <startScan+0xa4>)
 8003fa2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d137      	bne.n	800401e <startScan+0x9e>
		return;
	// Cancel onging TX/RX transaction
	LMIC.txCnt = LMIC.dnConf = LMIC.bcninfo.flags = 0;
 8003fae:	4b1d      	ldr	r3, [pc, #116]	@ (8004024 <startScan+0xa4>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
 8003fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8004024 <startScan+0xa4>)
 8003fb8:	f893 2196 	ldrb.w	r2, [r3, #406]	@ 0x196
 8003fbc:	4b19      	ldr	r3, [pc, #100]	@ (8004024 <startScan+0xa4>)
 8003fbe:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
 8003fc2:	4b18      	ldr	r3, [pc, #96]	@ (8004024 <startScan+0xa4>)
 8003fc4:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 8003fc8:	4b16      	ldr	r3, [pc, #88]	@ (8004024 <startScan+0xa4>)
 8003fca:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	LMIC.opmode = (LMIC.opmode | OP_SCAN) & ~(OP_TXRXPEND);
 8003fce:	4b15      	ldr	r3, [pc, #84]	@ (8004024 <startScan+0xa4>)
 8003fd0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003fd4:	f043 0301 	orr.w	r3, r3, #1
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	4b10      	ldr	r3, [pc, #64]	@ (8004024 <startScan+0xa4>)
 8003fe2:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	setBcnRxParams();
 8003fe6:	f7fe fd71 	bl	8002acc <setBcnRxParams>
	LMIC.rxtime = LMIC.bcninfo.txtime =
			os_getTime() + sec2osticks(BCN_INTV_sec + 1);
 8003fea:	f000 fff7 	bl	8004fdc <os_getTime>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	f503 137b 	add.w	r3, r3, #4112384	@ 0x3ec000
 8003ff4:	f503 5374 	add.w	r3, r3, #15616	@ 0x3d00
	LMIC.rxtime = LMIC.bcninfo.txtime =
 8003ff8:	4a0a      	ldr	r2, [pc, #40]	@ (8004024 <startScan+0xa4>)
 8003ffa:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
 8003ffe:	4b09      	ldr	r3, [pc, #36]	@ (8004024 <startScan+0xa4>)
 8004000:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8004004:	4a07      	ldr	r2, [pc, #28]	@ (8004024 <startScan+0xa4>)
 8004006:	6053      	str	r3, [r2, #4]
	os_setTimedCallback(&LMIC.osjob, LMIC.rxtime, FUNC_ADDR(onBcnRx));
 8004008:	4b06      	ldr	r3, [pc, #24]	@ (8004024 <startScan+0xa4>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	4a06      	ldr	r2, [pc, #24]	@ (8004028 <startScan+0xa8>)
 800400e:	4619      	mov	r1, r3
 8004010:	4806      	ldr	r0, [pc, #24]	@ (800402c <startScan+0xac>)
 8004012:	f001 f84d 	bl	80050b0 <os_setTimedCallback>
	os_radio(RADIO_RXON);
 8004016:	2003      	movs	r0, #3
 8004018:	f001 fe06 	bl	8005c28 <os_radio>
 800401c:	e000      	b.n	8004020 <startScan+0xa0>
		return;
 800401e:	bf00      	nop
}
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	200001f0 	.word	0x200001f0
 8004028:	08003ed9 	.word	0x08003ed9
 800402c:	20000204 	.word	0x20000204

08004030 <buildJoinRequest>:
// Join stuff
//
// ================================================================================

static void buildJoinRequest(u1_t ftype)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	4603      	mov	r3, r0
 8004038:	71fb      	strb	r3, [r7, #7]
	// Do not use pendTxData since we might have a pending
	// user level frame in there. Use RX holding area instead.
	xref2u1_t d = LMIC.frame;
 800403a:	4b16      	ldr	r3, [pc, #88]	@ (8004094 <buildJoinRequest+0x64>)
 800403c:	60fb      	str	r3, [r7, #12]
	d[OFF_JR_HDR] = ftype;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	79fa      	ldrb	r2, [r7, #7]
 8004042:	701a      	strb	r2, [r3, #0]
	os_getArtEui(d + OFF_JR_ARTEUI);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	3301      	adds	r3, #1
 8004048:	4618      	mov	r0, r3
 800404a:	f000 fd33 	bl	8004ab4 <os_getArtEui>
	os_getDevEui(d + OFF_JR_DEVEUI);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	3309      	adds	r3, #9
 8004052:	4618      	mov	r0, r3
 8004054:	f000 fd42 	bl	8004adc <os_getDevEui>
	os_wlsbf2(d + OFF_JR_DEVNONCE, LMIC.devNonce);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	3311      	adds	r3, #17
 800405c:	4a0e      	ldr	r2, [pc, #56]	@ (8004098 <buildJoinRequest+0x68>)
 800405e:	f8b2 20f2 	ldrh.w	r2, [r2, #242]	@ 0xf2
 8004062:	4611      	mov	r1, r2
 8004064:	4618      	mov	r0, r3
 8004066:	f7fd fde5 	bl	8001c34 <os_wlsbf2>
	aes_appendMic0(d, OFF_JR_MIC);
 800406a:	2113      	movs	r1, #19
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f7fd ff09 	bl	8001e84 <aes_appendMic0>
					e_.oldaddr = LMIC.devaddr,
					e_.mic = Base::lsbf4(&d[LORA::OFF_JR_MIC]),
					e_.reason = ((LMIC.opmode & OP_REJOIN) != 0
							? EV::joininfo_t::REJOIN_REQUEST
							: EV::joininfo_t::REQUEST)));
	LMIC.dataLen = LEN_JR;
 8004072:	4b09      	ldr	r3, [pc, #36]	@ (8004098 <buildJoinRequest+0x68>)
 8004074:	2217      	movs	r2, #23
 8004076:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
	LMIC.devNonce++;
 800407a:	4b07      	ldr	r3, [pc, #28]	@ (8004098 <buildJoinRequest+0x68>)
 800407c:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 8004080:	3301      	adds	r3, #1
 8004082:	b29a      	uxth	r2, r3
 8004084:	4b04      	ldr	r3, [pc, #16]	@ (8004098 <buildJoinRequest+0x68>)
 8004086:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
	DO_DEVDB(LMIC.devNonce,devNonce);
}
 800408a:	bf00      	nop
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	20000338 	.word	0x20000338
 8004098:	200001f0 	.word	0x200001f0

0800409c <startJoining>:

static void startJoining(xref2osjob_t osjob)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
	reportEvent(EV_JOINING);
 80040a4:	2005      	movs	r0, #5
 80040a6:	f7fe fddf 	bl	8002c68 <reportEvent>
}
 80040aa:	bf00      	nop
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
	...

080040b4 <LMIC_startJoining>:

// Start join procedure if not already joined.
bit_t LMIC_startJoining(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
	if (LMIC.devaddr == 0) {
 80040b8:	4b20      	ldr	r3, [pc, #128]	@ (800413c <LMIC_startJoining+0x88>)
 80040ba:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d138      	bne.n	8004134 <LMIC_startJoining+0x80>
		// There should be no TX/RX going on
		ASSERT((LMIC.opmode & (OP_POLL | OP_TXRXPEND)) == 0);
 80040c2:	4b1e      	ldr	r3, [pc, #120]	@ (800413c <LMIC_startJoining+0x88>)
 80040c4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80040c8:	f003 0390 	and.w	r3, r3, #144	@ 0x90
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <LMIC_startJoining+0x20>
 80040d0:	f7fd fbba 	bl	8001848 <hal_failed>
		// Lift any previous duty limitation
		LMIC.globalDutyRate = 0;
 80040d4:	4b19      	ldr	r3, [pc, #100]	@ (800413c <LMIC_startJoining+0x88>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
		// Cancel scanning
		LMIC.opmode &= ~(OP_SCAN | OP_REJOIN | OP_LINKDEAD | OP_NEXTCHNL);
 80040dc:	4b17      	ldr	r3, [pc, #92]	@ (800413c <LMIC_startJoining+0x88>)
 80040de:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80040e2:	f423 53c1 	bic.w	r3, r3, #6176	@ 0x1820
 80040e6:	f023 0301 	bic.w	r3, r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	4b13      	ldr	r3, [pc, #76]	@ (800413c <LMIC_startJoining+0x88>)
 80040ee:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		// Setup state
		LMIC.rejoinCnt = LMIC.txCnt = LMIC.pendTxConf = 0;
 80040f2:	4b12      	ldr	r3, [pc, #72]	@ (800413c <LMIC_startJoining+0x88>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 20bb 	strb.w	r2, [r3, #187]	@ 0xbb
 80040fa:	4b10      	ldr	r3, [pc, #64]	@ (800413c <LMIC_startJoining+0x88>)
 80040fc:	f893 20bb 	ldrb.w	r2, [r3, #187]	@ 0xbb
 8004100:	4b0e      	ldr	r3, [pc, #56]	@ (800413c <LMIC_startJoining+0x88>)
 8004102:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
 8004106:	4b0d      	ldr	r3, [pc, #52]	@ (800413c <LMIC_startJoining+0x88>)
 8004108:	f893 2144 	ldrb.w	r2, [r3, #324]	@ 0x144
 800410c:	4b0b      	ldr	r3, [pc, #44]	@ (800413c <LMIC_startJoining+0x88>)
 800410e:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
		initJoinLoop();
 8004112:	f7fe fd01 	bl	8002b18 <initJoinLoop>
		LMIC.opmode |= OP_JOINING;
 8004116:	4b09      	ldr	r3, [pc, #36]	@ (800413c <LMIC_startJoining+0x88>)
 8004118:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800411c:	f043 0304 	orr.w	r3, r3, #4
 8004120:	b29a      	uxth	r2, r3
 8004122:	4b06      	ldr	r3, [pc, #24]	@ (800413c <LMIC_startJoining+0x88>)
 8004124:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		// reportEvent will call engineUpdate which then starts sending JOIN REQUESTS
		os_setCallback(&LMIC.osjob, FUNC_ADDR(startJoining));
 8004128:	4905      	ldr	r1, [pc, #20]	@ (8004140 <LMIC_startJoining+0x8c>)
 800412a:	4806      	ldr	r0, [pc, #24]	@ (8004144 <LMIC_startJoining+0x90>)
 800412c:	f000 ff9a 	bl	8005064 <os_setCallback>
		return 1;
 8004130:	2301      	movs	r3, #1
 8004132:	e000      	b.n	8004136 <LMIC_startJoining+0x82>
	}
	return 0; // already joined
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	200001f0 	.word	0x200001f0
 8004140:	0800409d 	.word	0x0800409d
 8004144:	20000204 	.word	0x20000204

08004148 <processPingRx>:
//
//
// ================================================================================

static void processPingRx(xref2osjob_t osjob)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
	if (LMIC.dataLen != 0) {
 8004150:	4b0b      	ldr	r3, [pc, #44]	@ (8004180 <processPingRx+0x38>)
 8004152:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00c      	beq.n	8004174 <processPingRx+0x2c>
		LMIC.txrxFlags = TXRX_PING;
 800415a:	4b09      	ldr	r3, [pc, #36]	@ (8004180 <processPingRx+0x38>)
 800415c:	2204      	movs	r2, #4
 800415e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		if (decodeFrame()) {
 8004162:	f7fe fe99 	bl	8002e98 <decodeFrame>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <processPingRx+0x2c>
			reportEvent(EV_RXCOMPLETE);
 800416c:	200d      	movs	r0, #13
 800416e:	f7fe fd7b 	bl	8002c68 <reportEvent>
			return;
 8004172:	e001      	b.n	8004178 <processPingRx+0x30>
		}
	}
	// Pick next ping slot
	engineUpdate();
 8004174:	f000 fa2a 	bl	80045cc <engineUpdate>
}
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	200001f0 	.word	0x200001f0

08004184 <processDnData>:

static bit_t processDnData(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
	ASSERT((LMIC.opmode & OP_TXRXPEND) != 0);
 8004188:	4b76      	ldr	r3, [pc, #472]	@ (8004364 <processDnData+0x1e0>)
 800418a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800418e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <processDnData+0x16>
 8004196:	f7fd fb57 	bl	8001848 <hal_failed>

	if (LMIC.dataLen == 0) {
 800419a:	4b72      	ldr	r3, [pc, #456]	@ (8004364 <processDnData+0x1e0>)
 800419c:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f040 80ce 	bne.w	8004342 <processDnData+0x1be>
		norx: if (LMIC.txCnt != 0) {
 80041a6:	bf00      	nop
 80041a8:	e000      	b.n	80041ac <processDnData+0x28>
		return 1;
	}
	if (!decodeFrame()) {
		if ((LMIC.txrxFlags & TXRX_DNW1) != 0)
			return 0;
		goto norx;
 80041aa:	bf00      	nop
		norx: if (LMIC.txCnt != 0) {
 80041ac:	4b6d      	ldr	r3, [pc, #436]	@ (8004364 <processDnData+0x1e0>)
 80041ae:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d038      	beq.n	8004228 <processDnData+0xa4>
			if (LMIC.txCnt < TXCONF_ATTEMPTS) {
 80041b6:	4b6b      	ldr	r3, [pc, #428]	@ (8004364 <processDnData+0x1e0>)
 80041b8:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80041bc:	2b07      	cmp	r3, #7
 80041be:	d82e      	bhi.n	800421e <processDnData+0x9a>
				LMIC.txCnt += 1;
 80041c0:	4b68      	ldr	r3, [pc, #416]	@ (8004364 <processDnData+0x1e0>)
 80041c2:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80041c6:	3301      	adds	r3, #1
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	4b66      	ldr	r3, [pc, #408]	@ (8004364 <processDnData+0x1e0>)
 80041cc:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
				setDrTxpow(DRCHG_NOACK,
 80041d0:	4b64      	ldr	r3, [pc, #400]	@ (8004364 <processDnData+0x1e0>)
 80041d2:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
						lowerDR(LMIC.datarate, DRADJUST[LMIC.txCnt]),
 80041d6:	4a63      	ldr	r2, [pc, #396]	@ (8004364 <processDnData+0x1e0>)
 80041d8:	f892 2144 	ldrb.w	r2, [r2, #324]	@ 0x144
 80041dc:	4611      	mov	r1, r2
 80041de:	4a62      	ldr	r2, [pc, #392]	@ (8004368 <processDnData+0x1e4>)
 80041e0:	5c52      	ldrb	r2, [r2, r1]
				setDrTxpow(DRCHG_NOACK,
 80041e2:	4611      	mov	r1, r2
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7fd fcbd 	bl	8001b64 <lowerDR>
 80041ea:	4603      	mov	r3, r0
 80041ec:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 80041f0:	4619      	mov	r1, r3
 80041f2:	2002      	movs	r0, #2
 80041f4:	f7fe f9ea 	bl	80025cc <setDrTxpow>
				txDelay(LMIC.rxtime, RETRY_PERIOD_secs);
 80041f8:	4b5a      	ldr	r3, [pc, #360]	@ (8004364 <processDnData+0x1e0>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2103      	movs	r1, #3
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fe f9a2 	bl	8002548 <txDelay>
				LMIC.opmode &= ~OP_TXRXPEND;
 8004204:	4b57      	ldr	r3, [pc, #348]	@ (8004364 <processDnData+0x1e0>)
 8004206:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800420a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800420e:	b29a      	uxth	r2, r3
 8004210:	4b54      	ldr	r3, [pc, #336]	@ (8004364 <processDnData+0x1e0>)
 8004212:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
				engineUpdate();
 8004216:	f000 f9d9 	bl	80045cc <engineUpdate>
				return 1;
 800421a:	2301      	movs	r3, #1
 800421c:	e09f      	b.n	800435e <processDnData+0x1da>
			LMIC.txrxFlags = TXRX_NACK | TXRX_NOPORT;
 800421e:	4b51      	ldr	r3, [pc, #324]	@ (8004364 <processDnData+0x1e0>)
 8004220:	2260      	movs	r2, #96	@ 0x60
 8004222:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
 8004226:	e003      	b.n	8004230 <processDnData+0xac>
			LMIC.txrxFlags = TXRX_NOPORT;
 8004228:	4b4e      	ldr	r3, [pc, #312]	@ (8004364 <processDnData+0x1e0>)
 800422a:	2220      	movs	r2, #32
 800422c:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		if (LMIC.adrAckReq != LINK_CHECK_OFF)
 8004230:	4b4c      	ldr	r3, [pc, #304]	@ (8004364 <processDnData+0x1e0>)
 8004232:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 8004236:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 800423a:	d009      	beq.n	8004250 <processDnData+0xcc>
			LMIC.adrAckReq += 1;
 800423c:	4b49      	ldr	r3, [pc, #292]	@ (8004364 <processDnData+0x1e0>)
 800423e:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 8004242:	b2db      	uxtb	r3, r3
 8004244:	3301      	adds	r3, #1
 8004246:	b2db      	uxtb	r3, r3
 8004248:	b25a      	sxtb	r2, r3
 800424a:	4b46      	ldr	r3, [pc, #280]	@ (8004364 <processDnData+0x1e0>)
 800424c:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
		LMIC.dataBeg = LMIC.dataLen = 0;
 8004250:	4b44      	ldr	r3, [pc, #272]	@ (8004364 <processDnData+0x1e0>)
 8004252:	2200      	movs	r2, #0
 8004254:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 8004258:	4b42      	ldr	r3, [pc, #264]	@ (8004364 <processDnData+0x1e0>)
 800425a:	f893 2147 	ldrb.w	r2, [r3, #327]	@ 0x147
 800425e:	4b41      	ldr	r3, [pc, #260]	@ (8004364 <processDnData+0x1e0>)
 8004260:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
 8004264:	e000      	b.n	8004268 <processDnData+0xe4>
	}
	goto txcomplete;
 8004266:	bf00      	nop
		txcomplete: LMIC.opmode &= ~(OP_TXDATA | OP_TXRXPEND);
 8004268:	4b3e      	ldr	r3, [pc, #248]	@ (8004364 <processDnData+0x1e0>)
 800426a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800426e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004272:	b29a      	uxth	r2, r3
 8004274:	4b3b      	ldr	r3, [pc, #236]	@ (8004364 <processDnData+0x1e0>)
 8004276:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		if ((LMIC.txrxFlags & (TXRX_DNW1 | TXRX_DNW2 | TXRX_PING)) != 0
 800427a:	4b3a      	ldr	r3, [pc, #232]	@ (8004364 <processDnData+0x1e0>)
 800427c:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8004280:	f003 0307 	and.w	r3, r3, #7
 8004284:	2b00      	cmp	r3, #0
 8004286:	d012      	beq.n	80042ae <processDnData+0x12a>
				&& (LMIC.opmode & OP_LINKDEAD) != 0) {
 8004288:	4b36      	ldr	r3, [pc, #216]	@ (8004364 <processDnData+0x1e0>)
 800428a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800428e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00b      	beq.n	80042ae <processDnData+0x12a>
			LMIC.opmode &= ~OP_LINKDEAD;
 8004296:	4b33      	ldr	r3, [pc, #204]	@ (8004364 <processDnData+0x1e0>)
 8004298:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800429c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	4b30      	ldr	r3, [pc, #192]	@ (8004364 <processDnData+0x1e0>)
 80042a4:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			reportEvent(EV_LINK_ALIVE);
 80042a8:	200f      	movs	r0, #15
 80042aa:	f7fe fcdd 	bl	8002c68 <reportEvent>
		reportEvent(EV_TXCOMPLETE);
 80042ae:	200a      	movs	r0, #10
 80042b0:	f7fe fcda 	bl	8002c68 <reportEvent>
		if (LMIC.adrAckReq > LINK_CHECK_DEAD) {
 80042b4:	4b2b      	ldr	r3, [pc, #172]	@ (8004364 <processDnData+0x1e0>)
 80042b6:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 80042ba:	2b18      	cmp	r3, #24
 80042bc:	dd1c      	ble.n	80042f8 <processDnData+0x174>
			setDrTxpow(DRCHG_NOADRACK, decDR((dr_t) LMIC.datarate), KEEP_TXPOW);
 80042be:	4b29      	ldr	r3, [pc, #164]	@ (8004364 <processDnData+0x1e0>)
 80042c0:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7fd fc1f 	bl	8001b08 <decDR>
 80042ca:	4603      	mov	r3, r0
 80042cc:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 80042d0:	4619      	mov	r1, r3
 80042d2:	2003      	movs	r0, #3
 80042d4:	f7fe f97a 	bl	80025cc <setDrTxpow>
			LMIC.adrAckReq = LINK_CHECK_CONT;
 80042d8:	4b22      	ldr	r3, [pc, #136]	@ (8004364 <processDnData+0x1e0>)
 80042da:	220c      	movs	r2, #12
 80042dc:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
			LMIC.opmode |= OP_REJOIN | OP_LINKDEAD;
 80042e0:	4b20      	ldr	r3, [pc, #128]	@ (8004364 <processDnData+0x1e0>)
 80042e2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80042e6:	f443 5381 	orr.w	r3, r3, #4128	@ 0x1020
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004364 <processDnData+0x1e0>)
 80042ee:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			reportEvent(EV_LINK_DEAD);
 80042f2:	200e      	movs	r0, #14
 80042f4:	f7fe fcb8 	bl	8002c68 <reportEvent>
		if (LMIC.bcninfoTries > 0) {
 80042f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004364 <processDnData+0x1e0>)
 80042fa:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d01d      	beq.n	800433e <processDnData+0x1ba>
			if ((LMIC.opmode & OP_TRACK) != 0) {
 8004302:	4b18      	ldr	r3, [pc, #96]	@ (8004364 <processDnData+0x1e0>)
 8004304:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d007      	beq.n	8004320 <processDnData+0x19c>
				reportEvent(EV_BEACON_FOUND);
 8004310:	2002      	movs	r0, #2
 8004312:	f7fe fca9 	bl	8002c68 <reportEvent>
				LMIC.bcninfoTries = 0;
 8004316:	4b13      	ldr	r3, [pc, #76]	@ (8004364 <processDnData+0x1e0>)
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
 800431e:	e00e      	b.n	800433e <processDnData+0x1ba>
			} else if (--LMIC.bcninfoTries == 0) {
 8004320:	4b10      	ldr	r3, [pc, #64]	@ (8004364 <processDnData+0x1e0>)
 8004322:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8004326:	3b01      	subs	r3, #1
 8004328:	b2da      	uxtb	r2, r3
 800432a:	4b0e      	ldr	r3, [pc, #56]	@ (8004364 <processDnData+0x1e0>)
 800432c:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
 8004330:	4b0c      	ldr	r3, [pc, #48]	@ (8004364 <processDnData+0x1e0>)
 8004332:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <processDnData+0x1ba>
				startScan();   // NWK did not answer - try scan
 800433a:	f7ff fe21 	bl	8003f80 <startScan>
		return 1;
 800433e:	2301      	movs	r3, #1
 8004340:	e00d      	b.n	800435e <processDnData+0x1da>
	if (!decodeFrame()) {
 8004342:	f7fe fda9 	bl	8002e98 <decodeFrame>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d18c      	bne.n	8004266 <processDnData+0xe2>
		if ((LMIC.txrxFlags & TXRX_DNW1) != 0)
 800434c:	4b05      	ldr	r3, [pc, #20]	@ (8004364 <processDnData+0x1e0>)
 800434e:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	f43f af27 	beq.w	80041aa <processDnData+0x26>
			return 0;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	200001f0 	.word	0x200001f0
 8004368:	0800c068 	.word	0x0800c068

0800436c <processBeacon>:

static void processBeacon(xref2osjob_t osjob)
{
 800436c:	b590      	push	{r4, r7, lr}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
	ostime_t lasttx = LMIC.bcninfo.txtime; // save here - decodeBeacon might overwrite
 8004374:	4b81      	ldr	r3, [pc, #516]	@ (800457c <processBeacon+0x210>)
 8004376:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 800437a:	60fb      	str	r3, [r7, #12]
	u1_t flags = LMIC.bcninfo.flags;
 800437c:	4b7f      	ldr	r3, [pc, #508]	@ (800457c <processBeacon+0x210>)
 800437e:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8004382:	72fb      	strb	r3, [r7, #11]
	ev_t ev;

	if (LMIC.dataLen != 0 && decodeBeacon() >= 1) {
 8004384:	4b7d      	ldr	r3, [pc, #500]	@ (800457c <processBeacon+0x210>)
 8004386:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 800438a:	2b00      	cmp	r3, #0
 800438c:	f000 8087 	beq.w	800449e <processBeacon+0x132>
 8004390:	f7fe fcee 	bl	8002d70 <decodeBeacon>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	f340 8081 	ble.w	800449e <processBeacon+0x132>
		ev = EV_BEACON_TRACKED;
 800439c:	2304      	movs	r3, #4
 800439e:	75fb      	strb	r3, [r7, #23]
		if ((flags & (BCN_PARTIAL | BCN_FULL)) == 0) {
 80043a0:	7afb      	ldrb	r3, [r7, #11]
 80043a2:	f003 0303 	and.w	r3, r3, #3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d104      	bne.n	80043b4 <processBeacon+0x48>
			// We don't have a previous beacon to calc some drift - assume
			// an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
			calcBcnRxWindowFromMillis(13, 0);
 80043aa:	2100      	movs	r1, #0
 80043ac:	200d      	movs	r0, #13
 80043ae:	f7fd ff4b 	bl	8002248 <calcBcnRxWindowFromMillis>
			goto rev;
 80043b2:	e0d2      	b.n	800455a <processBeacon+0x1ee>
		}
		// We have a previous BEACON to calculate some drift
		s2_t drift = BCN_INTV_osticks - (LMIC.bcninfo.txtime - lasttx);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	4b70      	ldr	r3, [pc, #448]	@ (800457c <processBeacon+0x210>)
 80043ba:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80043be:	b29b      	uxth	r3, r3
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	82bb      	strh	r3, [r7, #20]
		if (LMIC.missedBcns > 0) {
 80043cc:	4b6b      	ldr	r3, [pc, #428]	@ (800457c <processBeacon+0x210>)
 80043ce:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d013      	beq.n	80043fe <processBeacon+0x92>
			drift = LMIC.drift + (drift - LMIC.drift) / (LMIC.missedBcns + 1);
 80043d6:	4b69      	ldr	r3, [pc, #420]	@ (800457c <processBeacon+0x210>)
 80043d8:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 80043dc:	b29a      	uxth	r2, r3
 80043de:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80043e2:	4966      	ldr	r1, [pc, #408]	@ (800457c <processBeacon+0x210>)
 80043e4:	f9b1 10b4 	ldrsh.w	r1, [r1, #180]	@ 0xb4
 80043e8:	1a59      	subs	r1, r3, r1
 80043ea:	4b64      	ldr	r3, [pc, #400]	@ (800457c <processBeacon+0x210>)
 80043ec:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 80043f0:	3301      	adds	r3, #1
 80043f2:	fb91 f3f3 	sdiv	r3, r1, r3
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	4413      	add	r3, r2
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	82bb      	strh	r3, [r7, #20]
		}
		if ((LMIC.bcninfo.flags & BCN_NODRIFT) == 0) {
 80043fe:	4b5f      	ldr	r3, [pc, #380]	@ (800457c <processBeacon+0x210>)
 8004400:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b00      	cmp	r3, #0
 800440a:	d127      	bne.n	800445c <processBeacon+0xf0>
			s2_t diff = LMIC.drift - drift;
 800440c:	4b5b      	ldr	r3, [pc, #364]	@ (800457c <processBeacon+0x210>)
 800440e:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 8004412:	b29a      	uxth	r2, r3
 8004414:	8abb      	ldrh	r3, [r7, #20]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	b29b      	uxth	r3, r3
 800441a:	827b      	strh	r3, [r7, #18]
			if (diff < 0)
 800441c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004420:	2b00      	cmp	r3, #0
 8004422:	da03      	bge.n	800442c <processBeacon+0xc0>
				diff = -diff;
 8004424:	8a7b      	ldrh	r3, [r7, #18]
 8004426:	425b      	negs	r3, r3
 8004428:	b29b      	uxth	r3, r3
 800442a:	827b      	strh	r3, [r7, #18]
			LMIC.lastDriftDiff = diff;
 800442c:	4a53      	ldr	r2, [pc, #332]	@ (800457c <processBeacon+0x210>)
 800442e:	8a7b      	ldrh	r3, [r7, #18]
 8004430:	f8a2 30b6 	strh.w	r3, [r2, #182]	@ 0xb6
			if (LMIC.maxDriftDiff < diff)
 8004434:	4b51      	ldr	r3, [pc, #324]	@ (800457c <processBeacon+0x210>)
 8004436:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 800443a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800443e:	429a      	cmp	r2, r3
 8004440:	dd03      	ble.n	800444a <processBeacon+0xde>
				LMIC.maxDriftDiff = diff;
 8004442:	4a4e      	ldr	r2, [pc, #312]	@ (800457c <processBeacon+0x210>)
 8004444:	8a7b      	ldrh	r3, [r7, #18]
 8004446:	f8a2 30b8 	strh.w	r3, [r2, #184]	@ 0xb8
			LMIC.bcninfo.flags &= ~BCN_NODDIFF;
 800444a:	4b4c      	ldr	r3, [pc, #304]	@ (800457c <processBeacon+0x210>)
 800444c:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8004450:	f023 0308 	bic.w	r3, r3, #8
 8004454:	b2da      	uxtb	r2, r3
 8004456:	4b49      	ldr	r3, [pc, #292]	@ (800457c <processBeacon+0x210>)
 8004458:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
		}
		LMIC.drift = drift;
 800445c:	4a47      	ldr	r2, [pc, #284]	@ (800457c <processBeacon+0x210>)
 800445e:	8abb      	ldrh	r3, [r7, #20]
 8004460:	f8a2 30b4 	strh.w	r3, [r2, #180]	@ 0xb4
		LMIC.missedBcns = LMIC.rejoinCnt = 0;
 8004464:	4b45      	ldr	r3, [pc, #276]	@ (800457c <processBeacon+0x210>)
 8004466:	2200      	movs	r2, #0
 8004468:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
 800446c:	4b43      	ldr	r3, [pc, #268]	@ (800457c <processBeacon+0x210>)
 800446e:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 8004472:	4b42      	ldr	r3, [pc, #264]	@ (800457c <processBeacon+0x210>)
 8004474:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
		LMIC.bcninfo.flags &= ~BCN_NODRIFT;
 8004478:	4b40      	ldr	r3, [pc, #256]	@ (800457c <processBeacon+0x210>)
 800447a:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 800447e:	f023 0304 	bic.w	r3, r3, #4
 8004482:	b2da      	uxtb	r2, r3
 8004484:	4b3d      	ldr	r3, [pc, #244]	@ (800457c <processBeacon+0x210>)
 8004486:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
		EV(devCond,INFO,(e_.reason = EV::devCond_t::CLOCK_DRIFT,
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = drift,
						e_.info2 = /*occasion BEACON*/0));
		ASSERT((LMIC.bcninfo.flags & (BCN_PARTIAL | BCN_FULL)) != 0);
 800448a:	4b3c      	ldr	r3, [pc, #240]	@ (800457c <processBeacon+0x210>)
 800448c:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8004490:	f003 0303 	and.w	r3, r3, #3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d14c      	bne.n	8004532 <processBeacon+0x1c6>
 8004498:	f7fd f9d6 	bl	8001848 <hal_failed>
	if (LMIC.dataLen != 0 && decodeBeacon() >= 1) {
 800449c:	e049      	b.n	8004532 <processBeacon+0x1c6>
	} else {
		ev = EV_BEACON_MISSED;
 800449e:	2303      	movs	r3, #3
 80044a0:	75fb      	strb	r3, [r7, #23]
		LMIC.bcninfo.txtime += BCN_INTV_osticks - LMIC.drift;
 80044a2:	4b36      	ldr	r3, [pc, #216]	@ (800457c <processBeacon+0x210>)
 80044a4:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 80044a8:	4b34      	ldr	r3, [pc, #208]	@ (800457c <processBeacon+0x210>)
 80044aa:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 80044ae:	f5c3 137a 	rsb	r3, r3, #4096000	@ 0x3e8000
 80044b2:	4413      	add	r3, r2
 80044b4:	4a31      	ldr	r2, [pc, #196]	@ (800457c <processBeacon+0x210>)
 80044b6:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
		LMIC.bcninfo.time += BCN_INTV_sec;
 80044ba:	4b30      	ldr	r3, [pc, #192]	@ (800457c <processBeacon+0x210>)
 80044bc:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 80044c0:	3380      	adds	r3, #128	@ 0x80
 80044c2:	4a2e      	ldr	r2, [pc, #184]	@ (800457c <processBeacon+0x210>)
 80044c4:	f8c2 3198 	str.w	r3, [r2, #408]	@ 0x198
		LMIC.missedBcns++;
 80044c8:	4b2c      	ldr	r3, [pc, #176]	@ (800457c <processBeacon+0x210>)
 80044ca:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 80044ce:	3301      	adds	r3, #1
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	4b2a      	ldr	r3, [pc, #168]	@ (800457c <processBeacon+0x210>)
 80044d4:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
		// Delay any possible TX after surmised beacon - it's there although we missed it
		txDelay(LMIC.bcninfo.txtime + BCN_RESERVE_osticks, 4);
 80044d8:	4b28      	ldr	r3, [pc, #160]	@ (800457c <processBeacon+0x210>)
 80044da:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80044de:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 80044e2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80044e6:	2104      	movs	r1, #4
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fe f82d 	bl	8002548 <txDelay>
		if (LMIC.missedBcns > MAX_MISSED_BCNS)
 80044ee:	4b23      	ldr	r3, [pc, #140]	@ (800457c <processBeacon+0x210>)
 80044f0:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 80044f4:	2b14      	cmp	r3, #20
 80044f6:	d908      	bls.n	800450a <processBeacon+0x19e>
			LMIC.opmode |= OP_REJOIN;  // try if we can roam to another network
 80044f8:	4b20      	ldr	r3, [pc, #128]	@ (800457c <processBeacon+0x210>)
 80044fa:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80044fe:	f043 0320 	orr.w	r3, r3, #32
 8004502:	b29a      	uxth	r2, r3
 8004504:	4b1d      	ldr	r3, [pc, #116]	@ (800457c <processBeacon+0x210>)
 8004506:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		if (LMIC.bcnRxsyms > MAX_RXSYMS) {
 800450a:	4b1c      	ldr	r3, [pc, #112]	@ (800457c <processBeacon+0x210>)
 800450c:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 8004510:	2b64      	cmp	r3, #100	@ 0x64
 8004512:	d90f      	bls.n	8004534 <processBeacon+0x1c8>
			LMIC.opmode &= ~(OP_TRACK | OP_PINGABLE | OP_PINGINI | OP_REJOIN);
 8004514:	4b19      	ldr	r3, [pc, #100]	@ (800457c <processBeacon+0x210>)
 8004516:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800451a:	f423 63c4 	bic.w	r3, r3, #1568	@ 0x620
 800451e:	f023 0302 	bic.w	r3, r3, #2
 8004522:	b29a      	uxth	r2, r3
 8004524:	4b15      	ldr	r3, [pc, #84]	@ (800457c <processBeacon+0x210>)
 8004526:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			reportEvent(EV_LOST_TSYNC);
 800452a:	200b      	movs	r0, #11
 800452c:	f7fe fb9c 	bl	8002c68 <reportEvent>
			return;
 8004530:	e021      	b.n	8004576 <processBeacon+0x20a>
	if (LMIC.dataLen != 0 && decodeBeacon() >= 1) {
 8004532:	bf00      	nop
		}
	}
	LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks
 8004534:	4b11      	ldr	r3, [pc, #68]	@ (800457c <processBeacon+0x210>)
 8004536:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 800453a:	f503 147a 	add.w	r4, r3, #4096000	@ 0x3e8000
			- calcRxWindow(0, DR_BCN);
 800453e:	2103      	movs	r1, #3
 8004540:	2000      	movs	r0, #0
 8004542:	f7fd fe2d 	bl	80021a0 <calcRxWindow>
 8004546:	4603      	mov	r3, r0
 8004548:	1ae3      	subs	r3, r4, r3
	LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks
 800454a:	4a0c      	ldr	r2, [pc, #48]	@ (800457c <processBeacon+0x210>)
 800454c:	f8c2 318c 	str.w	r3, [r2, #396]	@ 0x18c
	LMIC.bcnRxsyms = LMIC.rxsyms;
 8004550:	4b0a      	ldr	r3, [pc, #40]	@ (800457c <processBeacon+0x210>)
 8004552:	7c1a      	ldrb	r2, [r3, #16]
 8004554:	4b09      	ldr	r3, [pc, #36]	@ (800457c <processBeacon+0x210>)
 8004556:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
	rev:
#if CFG_us915
    LMIC.bcnChnl = (LMIC.bcnChnl+1) & 7;
#endif
	if ((LMIC.opmode & OP_PINGINI) != 0)
 800455a:	4b08      	ldr	r3, [pc, #32]	@ (800457c <processBeacon+0x210>)
 800455c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004560:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004564:	2b00      	cmp	r3, #0
 8004566:	d002      	beq.n	800456e <processBeacon+0x202>
		rxschedInit(&LMIC.ping);  // note: reuses LMIC.frame buffer!
 8004568:	4805      	ldr	r0, [pc, #20]	@ (8004580 <processBeacon+0x214>)
 800456a:	f7fd fef3 	bl	8002354 <rxschedInit>
	reportEvent(ev);
 800456e:	7dfb      	ldrb	r3, [r7, #23]
 8004570:	4618      	mov	r0, r3
 8004572:	f7fe fb79 	bl	8002c68 <reportEvent>
}
 8004576:	371c      	adds	r7, #28
 8004578:	46bd      	mov	sp, r7
 800457a:	bd90      	pop	{r4, r7, pc}
 800457c:	200001f0 	.word	0x200001f0
 8004580:	20000324 	.word	0x20000324

08004584 <startRxBcn>:

static void startRxBcn(xref2osjob_t osjob)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
	LMIC.osjob.func = FUNC_ADDR(processBeacon);
 800458c:	4b04      	ldr	r3, [pc, #16]	@ (80045a0 <startRxBcn+0x1c>)
 800458e:	4a05      	ldr	r2, [pc, #20]	@ (80045a4 <startRxBcn+0x20>)
 8004590:	61da      	str	r2, [r3, #28]
	os_radio(RADIO_RX);
 8004592:	2002      	movs	r0, #2
 8004594:	f001 fb48 	bl	8005c28 <os_radio>
}
 8004598:	bf00      	nop
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	200001f0 	.word	0x200001f0
 80045a4:	0800436d 	.word	0x0800436d

080045a8 <startRxPing>:

static void startRxPing(xref2osjob_t osjob)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
	LMIC.osjob.func = FUNC_ADDR(processPingRx);
 80045b0:	4b04      	ldr	r3, [pc, #16]	@ (80045c4 <startRxPing+0x1c>)
 80045b2:	4a05      	ldr	r2, [pc, #20]	@ (80045c8 <startRxPing+0x20>)
 80045b4:	61da      	str	r2, [r3, #28]
	os_radio(RADIO_RX);
 80045b6:	2002      	movs	r0, #2
 80045b8:	f001 fb36 	bl	8005c28 <os_radio>
}
 80045bc:	bf00      	nop
 80045be:	3708      	adds	r7, #8
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	200001f0 	.word	0x200001f0
 80045c8:	08004149 	.word	0x08004149

080045cc <engineUpdate>:

// Decide what to do next for the MAC layer of a device
static void engineUpdate(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
	// Check for ongoing state: scan or TX/RX transaction
	if ((LMIC.opmode & (OP_SCAN | OP_TXRXPEND | OP_SHUTDOWN)) != 0)
 80045d2:	4b90      	ldr	r3, [pc, #576]	@ (8004814 <engineUpdate+0x248>)
 80045d4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80045d8:	f003 03c1 	and.w	r3, r3, #193	@ 0xc1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f040 81ab 	bne.w	8004938 <engineUpdate+0x36c>
		return;

	if (LMIC.devaddr == 0 && (LMIC.opmode & OP_JOINING) == 0) {
 80045e2:	4b8c      	ldr	r3, [pc, #560]	@ (8004814 <engineUpdate+0x248>)
 80045e4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d109      	bne.n	8004600 <engineUpdate+0x34>
 80045ec:	4b89      	ldr	r3, [pc, #548]	@ (8004814 <engineUpdate+0x248>)
 80045ee:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80045f2:	f003 0304 	and.w	r3, r3, #4
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d102      	bne.n	8004600 <engineUpdate+0x34>
		LMIC_startJoining();
 80045fa:	f7ff fd5b 	bl	80040b4 <LMIC_startJoining>
		return;
 80045fe:	e19e      	b.n	800493e <engineUpdate+0x372>
	}

	ostime_t now = os_getTime();
 8004600:	f000 fcec 	bl	8004fdc <os_getTime>
 8004604:	60b8      	str	r0, [r7, #8]
	ostime_t rxtime = 0;
 8004606:	2300      	movs	r3, #0
 8004608:	617b      	str	r3, [r7, #20]
	ostime_t txbeg = 0;
 800460a:	2300      	movs	r3, #0
 800460c:	613b      	str	r3, [r7, #16]

	if ((LMIC.opmode & OP_TRACK) != 0) {
 800460e:	4b81      	ldr	r3, [pc, #516]	@ (8004814 <engineUpdate+0x248>)
 8004610:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00f      	beq.n	800463c <engineUpdate+0x70>
		// We are tracking a beacon
		ASSERT(now + RX_RAMPUP - LMIC.bcnRxtime <= 0);
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8004622:	4b7c      	ldr	r3, [pc, #496]	@ (8004814 <engineUpdate+0x248>)
 8004624:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	dd01      	ble.n	8004632 <engineUpdate+0x66>
 800462e:	f7fd f90b 	bl	8001848 <hal_failed>
		rxtime = LMIC.bcnRxtime - RX_RAMPUP;
 8004632:	4b78      	ldr	r3, [pc, #480]	@ (8004814 <engineUpdate+0x248>)
 8004634:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8004638:	3b40      	subs	r3, #64	@ 0x40
 800463a:	617b      	str	r3, [r7, #20]
	}

	if ((LMIC.opmode & (OP_JOINING | OP_REJOIN | OP_TXDATA | OP_POLL)) != 0) {
 800463c:	4b75      	ldr	r3, [pc, #468]	@ (8004814 <engineUpdate+0x248>)
 800463e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004642:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 80f2 	beq.w	8004830 <engineUpdate+0x264>
		// Need to TX some data...
		// Assuming txChnl points to channel which first becomes available again.
		bit_t jacc = ((LMIC.opmode & (OP_JOINING | OP_REJOIN)) != 0 ? 1 : 0);
 800464c:	4b71      	ldr	r3, [pc, #452]	@ (8004814 <engineUpdate+0x248>)
 800464e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004652:	f003 0324 	and.w	r3, r3, #36	@ 0x24
 8004656:	2b00      	cmp	r3, #0
 8004658:	bf14      	ite	ne
 800465a:	2301      	movne	r3, #1
 800465c:	2300      	moveq	r3, #0
 800465e:	b2db      	uxtb	r3, r3
 8004660:	71fb      	strb	r3, [r7, #7]
		// Find next suitable channel and return availability time
		if ((LMIC.opmode & OP_NEXTCHNL) != 0) {
 8004662:	4b6c      	ldr	r3, [pc, #432]	@ (8004814 <engineUpdate+0x248>)
 8004664:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004668:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800466c:	2b00      	cmp	r3, #0
 800466e:	d012      	beq.n	8004696 <engineUpdate+0xca>
			txbeg = LMIC.txend = nextTx(now);
 8004670:	68b8      	ldr	r0, [r7, #8]
 8004672:	f7fe f98f 	bl	8002994 <nextTx>
 8004676:	4603      	mov	r3, r0
 8004678:	4a66      	ldr	r2, [pc, #408]	@ (8004814 <engineUpdate+0x248>)
 800467a:	6013      	str	r3, [r2, #0]
 800467c:	4b65      	ldr	r3, [pc, #404]	@ (8004814 <engineUpdate+0x248>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	613b      	str	r3, [r7, #16]
			LMIC.opmode &= ~OP_NEXTCHNL;
 8004682:	4b64      	ldr	r3, [pc, #400]	@ (8004814 <engineUpdate+0x248>)
 8004684:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004688:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800468c:	b29a      	uxth	r2, r3
 800468e:	4b61      	ldr	r3, [pc, #388]	@ (8004814 <engineUpdate+0x248>)
 8004690:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8004694:	e002      	b.n	800469c <engineUpdate+0xd0>
		} else {
			txbeg = LMIC.txend;
 8004696:	4b5f      	ldr	r3, [pc, #380]	@ (8004814 <engineUpdate+0x248>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	613b      	str	r3, [r7, #16]
		}
		// Delayed TX or waiting for duty cycle?
		if ((LMIC.globalDutyRate != 0 || (LMIC.opmode & OP_RNDTX) != 0)
 800469c:	4b5d      	ldr	r3, [pc, #372]	@ (8004814 <engineUpdate+0x248>)
 800469e:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d106      	bne.n	80046b4 <engineUpdate+0xe8>
 80046a6:	4b5b      	ldr	r3, [pc, #364]	@ (8004814 <engineUpdate+0x248>)
 80046a8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80046ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00a      	beq.n	80046ca <engineUpdate+0xfe>
				&& (txbeg - LMIC.globalDutyAvail) < 0)
 80046b4:	4b57      	ldr	r3, [pc, #348]	@ (8004814 <engineUpdate+0x248>)
 80046b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	da03      	bge.n	80046ca <engineUpdate+0xfe>
			txbeg = LMIC.globalDutyAvail;
 80046c2:	4b54      	ldr	r3, [pc, #336]	@ (8004814 <engineUpdate+0x248>)
 80046c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80046c8:	613b      	str	r3, [r7, #16]
		// If we're tracking a beacon...
		// then make sure TX-RX transaction is complete before beacon
		if ((LMIC.opmode & OP_TRACK) != 0
 80046ca:	4b52      	ldr	r3, [pc, #328]	@ (8004814 <engineUpdate+0x248>)
 80046cc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d017      	beq.n	8004708 <engineUpdate+0x13c>
				&& txbeg + (jacc ? JOIN_GUARD_osticks : TXRX_GUARD_osticks)
 80046d8:	79fb      	ldrb	r3, [r7, #7]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <engineUpdate+0x116>
 80046de:	4a4e      	ldr	r2, [pc, #312]	@ (8004818 <engineUpdate+0x24c>)
 80046e0:	e000      	b.n	80046e4 <engineUpdate+0x118>
 80046e2:	4a4e      	ldr	r2, [pc, #312]	@ (800481c <engineUpdate+0x250>)
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	441a      	add	r2, r3
						- rxtime > 0) {
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	1ad3      	subs	r3, r2, r3
				&& txbeg + (jacc ? JOIN_GUARD_osticks : TXRX_GUARD_osticks)
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	dd0b      	ble.n	8004708 <engineUpdate+0x13c>
			// Not enough time to complete TX-RX before beacon - postpone after beacon.
			// In order to avoid clustering of postponed TX right after beacon randomize start!
			txDelay(rxtime + BCN_RESERVE_osticks, 16);
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 80046f6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80046fa:	2110      	movs	r1, #16
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7fd ff23 	bl	8002548 <txDelay>
			txbeg = 0;
 8004702:	2300      	movs	r3, #0
 8004704:	613b      	str	r3, [r7, #16]
			goto checkrx;
 8004706:	e09b      	b.n	8004840 <engineUpdate+0x274>
		}
		// Earliest possible time vs overhead to setup radio
		if (txbeg - (now + TX_RAMPUP) < 0) {
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	3340      	adds	r3, #64	@ 0x40
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	da70      	bge.n	80047f6 <engineUpdate+0x22a>
			// We could send right now!
			txbeg = now;
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	613b      	str	r3, [r7, #16]
			dr_t txdr = (dr_t) LMIC.datarate;
 8004718:	4b3e      	ldr	r3, [pc, #248]	@ (8004814 <engineUpdate+0x248>)
 800471a:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800471e:	73fb      	strb	r3, [r7, #15]
			if (jacc) {
 8004720:	79fb      	ldrb	r3, [r7, #7]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d01d      	beq.n	8004762 <engineUpdate+0x196>
				u1_t ftype;
				if ((LMIC.opmode & OP_REJOIN) != 0) {
 8004726:	4b3b      	ldr	r3, [pc, #236]	@ (8004814 <engineUpdate+0x248>)
 8004728:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800472c:	f003 0320 	and.w	r3, r3, #32
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00c      	beq.n	800474e <engineUpdate+0x182>
					txdr = lowerDR(txdr, LMIC.rejoinCnt);
 8004734:	4b37      	ldr	r3, [pc, #220]	@ (8004814 <engineUpdate+0x248>)
 8004736:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 800473a:	7bfb      	ldrb	r3, [r7, #15]
 800473c:	4611      	mov	r1, r2
 800473e:	4618      	mov	r0, r3
 8004740:	f7fd fa10 	bl	8001b64 <lowerDR>
 8004744:	4603      	mov	r3, r0
 8004746:	73fb      	strb	r3, [r7, #15]
					ftype = HDR_FTYPE_REJOIN;
 8004748:	23c0      	movs	r3, #192	@ 0xc0
 800474a:	73bb      	strb	r3, [r7, #14]
 800474c:	e001      	b.n	8004752 <engineUpdate+0x186>
				} else {
					ftype = HDR_FTYPE_JREQ;
 800474e:	2300      	movs	r3, #0
 8004750:	73bb      	strb	r3, [r7, #14]
				}
				buildJoinRequest(ftype);
 8004752:	7bbb      	ldrb	r3, [r7, #14]
 8004754:	4618      	mov	r0, r3
 8004756:	f7ff fc6b 	bl	8004030 <buildJoinRequest>
				LMIC.osjob.func = FUNC_ADDR(jreqDone);
 800475a:	4b2e      	ldr	r3, [pc, #184]	@ (8004814 <engineUpdate+0x248>)
 800475c:	4a30      	ldr	r2, [pc, #192]	@ (8004820 <engineUpdate+0x254>)
 800475e:	61da      	str	r2, [r3, #28]
 8004760:	e01d      	b.n	800479e <engineUpdate+0x1d2>
			} else {
				if (LMIC.seqnoDn >= 0xFFFFFF80) {
 8004762:	4b2c      	ldr	r3, [pc, #176]	@ (8004814 <engineUpdate+0x248>)
 8004764:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8004768:	f113 0f81 	cmn.w	r3, #129	@ 0x81
 800476c:	d907      	bls.n	800477e <engineUpdate+0x1b2>
									e_.eui = MAIN::CDEV->getEui(),
									e_.info = LMIC.seqnoDn,
									e_.info2 = 0));
					// Device has to react! NWK will not roll over and just stop sending.
					// Thus, we have N frames to detect a possible lock up.
					reset: os_setCallback(&LMIC.osjob, FUNC_ADDR(runReset));
 800476e:	bf00      	nop
 8004770:	e000      	b.n	8004774 <engineUpdate+0x1a8>
					EV(specCond, ERR, (e_.reason = EV::specCond_t::UPSEQNO_ROLL_OVER,
									e_.eui = MAIN::CDEV->getEui(),
									e_.info2 = LMIC.seqnoUp));
					// Do not run RESET event callback from here!
					// App code might do some stuff after send unaware of RESET.
					goto reset;
 8004772:	bf00      	nop
					reset: os_setCallback(&LMIC.osjob, FUNC_ADDR(runReset));
 8004774:	492b      	ldr	r1, [pc, #172]	@ (8004824 <engineUpdate+0x258>)
 8004776:	482c      	ldr	r0, [pc, #176]	@ (8004828 <engineUpdate+0x25c>)
 8004778:	f000 fc74 	bl	8005064 <os_setCallback>
					return;
 800477c:	e0df      	b.n	800493e <engineUpdate+0x372>
				if ((LMIC.txCnt == 0 && LMIC.seqnoUp == 0xFFFFFFFF)) {
 800477e:	4b25      	ldr	r3, [pc, #148]	@ (8004814 <engineUpdate+0x248>)
 8004780:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8004784:	2b00      	cmp	r3, #0
 8004786:	d105      	bne.n	8004794 <engineUpdate+0x1c8>
 8004788:	4b22      	ldr	r3, [pc, #136]	@ (8004814 <engineUpdate+0x248>)
 800478a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800478e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004792:	d0ee      	beq.n	8004772 <engineUpdate+0x1a6>
				}
				buildDataFrame();
 8004794:	f7ff f9ba 	bl	8003b0c <buildDataFrame>
				LMIC.osjob.func = FUNC_ADDR(updataDone);
 8004798:	4b1e      	ldr	r3, [pc, #120]	@ (8004814 <engineUpdate+0x248>)
 800479a:	4a24      	ldr	r2, [pc, #144]	@ (800482c <engineUpdate+0x260>)
 800479c:	61da      	str	r2, [r3, #28]
			}
			LMIC.rps = setCr(updr2rps(txdr), (cr_t) LMIC.errcr);
 800479e:	7bfb      	ldrb	r3, [r7, #15]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7fd f98b 	bl	8001abc <updr2rps>
 80047a6:	4603      	mov	r3, r0
 80047a8:	461a      	mov	r2, r3
 80047aa:	4b1a      	ldr	r3, [pc, #104]	@ (8004814 <engineUpdate+0x248>)
 80047ac:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 80047b0:	4619      	mov	r1, r3
 80047b2:	4610      	mov	r0, r2
 80047b4:	f7fd f91c 	bl	80019f0 <setCr>
 80047b8:	4603      	mov	r3, r0
 80047ba:	461a      	mov	r2, r3
 80047bc:	4b15      	ldr	r3, [pc, #84]	@ (8004814 <engineUpdate+0x248>)
 80047be:	81da      	strh	r2, [r3, #14]
			LMIC.dndr = txdr; // carry TX datarate (can be != LMIC.datarate) over to txDone/setupRx1
 80047c0:	4a14      	ldr	r2, [pc, #80]	@ (8004814 <engineUpdate+0x248>)
 80047c2:	7bfb      	ldrb	r3, [r7, #15]
 80047c4:	7453      	strb	r3, [r2, #17]
			LMIC.opmode = (LMIC.opmode & ~(OP_POLL | OP_RNDTX)) | OP_TXRXPEND
 80047c6:	4b13      	ldr	r3, [pc, #76]	@ (8004814 <engineUpdate+0x248>)
 80047c8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80047cc:	b21b      	sxth	r3, r3
					| OP_NEXTCHNL;
 80047ce:	f423 6319 	bic.w	r3, r3, #2448	@ 0x990
 80047d2:	b21b      	sxth	r3, r3
 80047d4:	f443 6308 	orr.w	r3, r3, #2176	@ 0x880
 80047d8:	b21b      	sxth	r3, r3
 80047da:	b29a      	uxth	r2, r3
			LMIC.opmode = (LMIC.opmode & ~(OP_POLL | OP_RNDTX)) | OP_TXRXPEND
 80047dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004814 <engineUpdate+0x248>)
 80047de:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			updateTx(txbeg);
 80047e2:	6938      	ldr	r0, [r7, #16]
 80047e4:	f7fe f88c 	bl	8002900 <updateTx>
			reportEvent(EV_TXSTART);
 80047e8:	2011      	movs	r0, #17
 80047ea:	f7fe fa3d 	bl	8002c68 <reportEvent>
			os_radio(RADIO_TX);
 80047ee:	2001      	movs	r0, #1
 80047f0:	f001 fa1a 	bl	8005c28 <os_radio>
			return;
 80047f4:	e0a3      	b.n	800493e <engineUpdate+0x372>
		}
		// Cannot yet TX
		if ((LMIC.opmode & OP_TRACK) == 0)
 80047f6:	4b07      	ldr	r3, [pc, #28]	@ (8004814 <engineUpdate+0x248>)
 80047f8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 808c 	beq.w	800491e <engineUpdate+0x352>
			goto txdelay;
		// We don't track the beacon - nothing else to do - so wait for the time to TX
		// Consider RX tasks
		if (txbeg == 0) // zero indicates no TX pending
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d119      	bne.n	8004840 <engineUpdate+0x274>
			txbeg += 1; // TX delayed by one tick (insignificant amount of time)
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	3301      	adds	r3, #1
 8004810:	613b      	str	r3, [r7, #16]
 8004812:	e015      	b.n	8004840 <engineUpdate+0x274>
 8004814:	200001f0 	.word	0x200001f0
 8004818:	00046500 	.word	0x00046500
 800481c:	0002ee00 	.word	0x0002ee00
 8004820:	080039cd 	.word	0x080039cd
 8004824:	08002c87 	.word	0x08002c87
 8004828:	20000204 	.word	0x20000204
 800482c:	08003add 	.word	0x08003add
	} else {
		// No TX pending - no scheduled RX
		if ((LMIC.opmode & OP_TRACK) == 0)
 8004830:	4b44      	ldr	r3, [pc, #272]	@ (8004944 <engineUpdate+0x378>)
 8004832:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d07e      	beq.n	800493c <engineUpdate+0x370>
			return;
	}

	// Are we pingable?
	checkrx: if ((LMIC.opmode & OP_PINGINI) != 0) {
 800483e:	bf00      	nop
 8004840:	4b40      	ldr	r3, [pc, #256]	@ (8004944 <engineUpdate+0x378>)
 8004842:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004846:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800484a:	2b00      	cmp	r3, #0
 800484c:	d041      	beq.n	80048d2 <engineUpdate+0x306>
		// One more RX slot in this beacon period?
		if (rxschedNext(&LMIC.ping, now + RX_RAMPUP)) {
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	3340      	adds	r3, #64	@ 0x40
 8004852:	4619      	mov	r1, r3
 8004854:	483c      	ldr	r0, [pc, #240]	@ (8004948 <engineUpdate+0x37c>)
 8004856:	f7fd fdeb 	bl	8002430 <rxschedNext>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d038      	beq.n	80048d2 <engineUpdate+0x306>
			if (txbeg != 0 && (txbeg - LMIC.ping.rxtime) < 0)
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d006      	beq.n	8004874 <engineUpdate+0x2a8>
 8004866:	4b37      	ldr	r3, [pc, #220]	@ (8004944 <engineUpdate+0x378>)
 8004868:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	db56      	blt.n	8004922 <engineUpdate+0x356>
				goto txdelay;
			LMIC.rxsyms = LMIC.ping.rxsyms;
 8004874:	4b33      	ldr	r3, [pc, #204]	@ (8004944 <engineUpdate+0x378>)
 8004876:	f893 2137 	ldrb.w	r2, [r3, #311]	@ 0x137
 800487a:	4b32      	ldr	r3, [pc, #200]	@ (8004944 <engineUpdate+0x378>)
 800487c:	741a      	strb	r2, [r3, #16]
			LMIC.rxtime = LMIC.ping.rxtime;
 800487e:	4b31      	ldr	r3, [pc, #196]	@ (8004944 <engineUpdate+0x378>)
 8004880:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8004884:	4a2f      	ldr	r2, [pc, #188]	@ (8004944 <engineUpdate+0x378>)
 8004886:	6053      	str	r3, [r2, #4]
			LMIC.freq = LMIC.ping.freq;
 8004888:	4b2e      	ldr	r3, [pc, #184]	@ (8004944 <engineUpdate+0x378>)
 800488a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800488e:	4a2d      	ldr	r2, [pc, #180]	@ (8004944 <engineUpdate+0x378>)
 8004890:	6093      	str	r3, [r2, #8]
			LMIC.rps = dndr2rps(LMIC.ping.dr);
 8004892:	4b2c      	ldr	r3, [pc, #176]	@ (8004944 <engineUpdate+0x378>)
 8004894:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8004898:	4618      	mov	r0, r3
 800489a:	f7fd f921 	bl	8001ae0 <dndr2rps>
 800489e:	4603      	mov	r3, r0
 80048a0:	461a      	mov	r2, r3
 80048a2:	4b28      	ldr	r3, [pc, #160]	@ (8004944 <engineUpdate+0x378>)
 80048a4:	81da      	strh	r2, [r3, #14]
			LMIC.dataLen = 0;
 80048a6:	4b27      	ldr	r3, [pc, #156]	@ (8004944 <engineUpdate+0x378>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
			ASSERT(LMIC.rxtime - now+RX_RAMPUP >= 0);
 80048ae:	4b25      	ldr	r3, [pc, #148]	@ (8004944 <engineUpdate+0x378>)
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	f113 0f40 	cmn.w	r3, #64	@ 0x40
 80048ba:	da01      	bge.n	80048c0 <engineUpdate+0x2f4>
 80048bc:	f7fc ffc4 	bl	8001848 <hal_failed>
			os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP,
 80048c0:	4b20      	ldr	r3, [pc, #128]	@ (8004944 <engineUpdate+0x378>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	3b40      	subs	r3, #64	@ 0x40
 80048c6:	4a21      	ldr	r2, [pc, #132]	@ (800494c <engineUpdate+0x380>)
 80048c8:	4619      	mov	r1, r3
 80048ca:	4821      	ldr	r0, [pc, #132]	@ (8004950 <engineUpdate+0x384>)
 80048cc:	f000 fbf0 	bl	80050b0 <os_setTimedCallback>
					FUNC_ADDR(startRxPing));
			return;
 80048d0:	e035      	b.n	800493e <engineUpdate+0x372>
		}
		// no - just wait for the beacon
	}

	if (txbeg != 0 && (txbeg - rxtime) < 0)
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d004      	beq.n	80048e2 <engineUpdate+0x316>
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	db21      	blt.n	8004926 <engineUpdate+0x35a>
		goto txdelay;

	setBcnRxParams();
 80048e2:	f7fe f8f3 	bl	8002acc <setBcnRxParams>
	LMIC.rxsyms = LMIC.bcnRxsyms;
 80048e6:	4b17      	ldr	r3, [pc, #92]	@ (8004944 <engineUpdate+0x378>)
 80048e8:	f893 2189 	ldrb.w	r2, [r3, #393]	@ 0x189
 80048ec:	4b15      	ldr	r3, [pc, #84]	@ (8004944 <engineUpdate+0x378>)
 80048ee:	741a      	strb	r2, [r3, #16]
	LMIC.rxtime = LMIC.bcnRxtime;
 80048f0:	4b14      	ldr	r3, [pc, #80]	@ (8004944 <engineUpdate+0x378>)
 80048f2:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 80048f6:	4a13      	ldr	r2, [pc, #76]	@ (8004944 <engineUpdate+0x378>)
 80048f8:	6053      	str	r3, [r2, #4]
	if (now - rxtime >= 0) {
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	db06      	blt.n	8004912 <engineUpdate+0x346>
		LMIC.osjob.func = FUNC_ADDR(processBeacon);
 8004904:	4b0f      	ldr	r3, [pc, #60]	@ (8004944 <engineUpdate+0x378>)
 8004906:	4a13      	ldr	r2, [pc, #76]	@ (8004954 <engineUpdate+0x388>)
 8004908:	61da      	str	r2, [r3, #28]
		os_radio(RADIO_RX);
 800490a:	2002      	movs	r0, #2
 800490c:	f001 f98c 	bl	8005c28 <os_radio>
		return;
 8004910:	e015      	b.n	800493e <engineUpdate+0x372>
	}
	os_setTimedCallback(&LMIC.osjob, rxtime, FUNC_ADDR(startRxBcn));
 8004912:	4a11      	ldr	r2, [pc, #68]	@ (8004958 <engineUpdate+0x38c>)
 8004914:	6979      	ldr	r1, [r7, #20]
 8004916:	480e      	ldr	r0, [pc, #56]	@ (8004950 <engineUpdate+0x384>)
 8004918:	f000 fbca 	bl	80050b0 <os_setTimedCallback>
	return;
 800491c:	e00f      	b.n	800493e <engineUpdate+0x372>
			goto txdelay;
 800491e:	bf00      	nop
 8004920:	e002      	b.n	8004928 <engineUpdate+0x35c>
				goto txdelay;
 8004922:	bf00      	nop
 8004924:	e000      	b.n	8004928 <engineUpdate+0x35c>
		goto txdelay;
 8004926:	bf00      	nop

	txdelay: EV(devCond, INFO, (e_.reason = EV::devCond_t::TX_DELAY,
					e_.eui = MAIN::CDEV->getEui(),
					e_.info = osticks2ms(txbeg-now),
					e_.info2 = LMIC.seqnoUp-1));
	os_setTimedCallback(&LMIC.osjob, txbeg - TX_RAMPUP,
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	3b40      	subs	r3, #64	@ 0x40
 800492c:	4a0b      	ldr	r2, [pc, #44]	@ (800495c <engineUpdate+0x390>)
 800492e:	4619      	mov	r1, r3
 8004930:	4807      	ldr	r0, [pc, #28]	@ (8004950 <engineUpdate+0x384>)
 8004932:	f000 fbbd 	bl	80050b0 <os_setTimedCallback>
 8004936:	e002      	b.n	800493e <engineUpdate+0x372>
		return;
 8004938:	bf00      	nop
 800493a:	e000      	b.n	800493e <engineUpdate+0x372>
			return;
 800493c:	bf00      	nop
			FUNC_ADDR(runEngineUpdate));
}
 800493e:	3718      	adds	r7, #24
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	200001f0 	.word	0x200001f0
 8004948:	20000324 	.word	0x20000324
 800494c:	080045a9 	.word	0x080045a9
 8004950:	20000204 	.word	0x20000204
 8004954:	0800436d 	.word	0x0800436d
 8004958:	08004585 	.word	0x08004585
 800495c:	08002c55 	.word	0x08002c55

08004960 <LMIC_reset>:
	os_radio(RADIO_RST);
	LMIC.opmode |= OP_SHUTDOWN;
}

void LMIC_reset(void)
{
 8004960:	b598      	push	{r3, r4, r7, lr}
 8004962:	af00      	add	r7, sp, #0
	EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
					e_.eui = MAIN::CDEV->getEui(),
					e_.info = EV_RESET));
	os_radio(RADIO_RST);
 8004964:	2000      	movs	r0, #0
 8004966:	f001 f95f 	bl	8005c28 <os_radio>
	os_clearCallback(&LMIC.osjob);
 800496a:	4821      	ldr	r0, [pc, #132]	@ (80049f0 <LMIC_reset+0x90>)
 800496c:	f000 fb5c 	bl	8005028 <os_clearCallback>

	os_clearMem((xref2u1_t )&LMIC, SIZEOFEXPR(LMIC));
 8004970:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 8004974:	2100      	movs	r1, #0
 8004976:	481f      	ldr	r0, [pc, #124]	@ (80049f4 <LMIC_reset+0x94>)
 8004978:	f006 f933 	bl	800abe2 <memset>
	LMIC.devaddr = 0;
 800497c:	4b1d      	ldr	r3, [pc, #116]	@ (80049f4 <LMIC_reset+0x94>)
 800497e:	2200      	movs	r2, #0
 8004980:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
	LMIC.devNonce = os_getRndU2();
 8004984:	f001 f854 	bl	8005a30 <radio_rand1>
 8004988:	4603      	mov	r3, r0
 800498a:	021b      	lsls	r3, r3, #8
 800498c:	b21c      	sxth	r4, r3
 800498e:	f001 f84f 	bl	8005a30 <radio_rand1>
 8004992:	4603      	mov	r3, r0
 8004994:	b21b      	sxth	r3, r3
 8004996:	4323      	orrs	r3, r4
 8004998:	b21b      	sxth	r3, r3
 800499a:	b29a      	uxth	r2, r3
 800499c:	4b15      	ldr	r3, [pc, #84]	@ (80049f4 <LMIC_reset+0x94>)
 800499e:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
	LMIC.opmode = OP_NONE;
 80049a2:	4b14      	ldr	r3, [pc, #80]	@ (80049f4 <LMIC_reset+0x94>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	LMIC.errcr = CR_4_5;
 80049aa:	4b12      	ldr	r3, [pc, #72]	@ (80049f4 <LMIC_reset+0x94>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
	LMIC.adrEnabled = FCT_ADREN;
 80049b2:	4b10      	ldr	r3, [pc, #64]	@ (80049f4 <LMIC_reset+0x94>)
 80049b4:	2280      	movs	r2, #128	@ 0x80
 80049b6:	f883 2127 	strb.w	r2, [r3, #295]	@ 0x127
	LMIC.dn2Dr = DR_DNW2;   // we need this for 2nd DN window of join accept
 80049ba:	4b0e      	ldr	r3, [pc, #56]	@ (80049f4 <LMIC_reset+0x94>)
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
	LMIC.dn2Freq = FREQ_DNW2; // ditto
 80049c2:	4b0c      	ldr	r3, [pc, #48]	@ (80049f4 <LMIC_reset+0x94>)
 80049c4:	4a0c      	ldr	r2, [pc, #48]	@ (80049f8 <LMIC_reset+0x98>)
 80049c6:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
	LMIC.rxDelay = DELAY_DNW1;
 80049ca:	4b0a      	ldr	r3, [pc, #40]	@ (80049f4 <LMIC_reset+0x94>)
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
	LMIC.ping.freq = FREQ_PING; // defaults for ping
 80049d2:	4b08      	ldr	r3, [pc, #32]	@ (80049f4 <LMIC_reset+0x94>)
 80049d4:	4a08      	ldr	r2, [pc, #32]	@ (80049f8 <LMIC_reset+0x98>)
 80049d6:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
	LMIC.ping.dr = DR_PING;   // ditto
 80049da:	4b06      	ldr	r3, [pc, #24]	@ (80049f4 <LMIC_reset+0x94>)
 80049dc:	2203      	movs	r2, #3
 80049de:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
	LMIC.ping.intvExp = 0xFF;
 80049e2:	4b04      	ldr	r3, [pc, #16]	@ (80049f4 <LMIC_reset+0x94>)
 80049e4:	22ff      	movs	r2, #255	@ 0xff
 80049e6:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
#if defined(CFG_us915)
    initDefaultChannels();
#endif
	DO_DEVDB(LMIC.devaddr, devaddr);DO_DEVDB(LMIC.devNonce, devNonce);DO_DEVDB(LMIC.dn2Dr, dn2Dr);DO_DEVDB(LMIC.dn2Freq, dn2Freq);DO_DEVDB(LMIC.ping.freq, pingFreq);DO_DEVDB(LMIC.ping.dr, pingDr);DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
}
 80049ea:	bf00      	nop
 80049ec:	bd98      	pop	{r3, r4, r7, pc}
 80049ee:	bf00      	nop
 80049f0:	20000204 	.word	0x20000204
 80049f4:	200001f0 	.word	0x200001f0
 80049f8:	33d3e608 	.word	0x33d3e608

080049fc <LMIC_init>:

void LMIC_init(void)
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
	LMIC.opmode = OP_SHUTDOWN;
 8004a00:	4b04      	ldr	r3, [pc, #16]	@ (8004a14 <LMIC_init+0x18>)
 8004a02:	2240      	movs	r2, #64	@ 0x40
 8004a04:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
}
 8004a08:	bf00      	nop
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	200001f0 	.word	0x200001f0

08004a18 <LMIC_setTxData>:
	os_radio(RADIO_RST);
	engineUpdate();
}

void LMIC_setTxData(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
	LMIC.opmode |= OP_TXDATA;
 8004a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a4c <LMIC_setTxData+0x34>)
 8004a1e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004a22:	f043 0308 	orr.w	r3, r3, #8
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	4b08      	ldr	r3, [pc, #32]	@ (8004a4c <LMIC_setTxData+0x34>)
 8004a2a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	if ((LMIC.opmode & OP_JOINING) == 0)
 8004a2e:	4b07      	ldr	r3, [pc, #28]	@ (8004a4c <LMIC_setTxData+0x34>)
 8004a30:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004a34:	f003 0304 	and.w	r3, r3, #4
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d103      	bne.n	8004a44 <LMIC_setTxData+0x2c>
		LMIC.txCnt = 0;             // cancel any ongoing TX/RX retries
 8004a3c:	4b03      	ldr	r3, [pc, #12]	@ (8004a4c <LMIC_setTxData+0x34>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	engineUpdate();
 8004a44:	f7ff fdc2 	bl	80045cc <engineUpdate>
}
 8004a48:	bf00      	nop
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	200001f0 	.word	0x200001f0

08004a50 <LMIC_setTxData2>:

//
int LMIC_setTxData2(u1_t port, xref2u1_t data, u1_t dlen, u1_t confirmed)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6039      	str	r1, [r7, #0]
 8004a58:	4611      	mov	r1, r2
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	71fb      	strb	r3, [r7, #7]
 8004a60:	460b      	mov	r3, r1
 8004a62:	71bb      	strb	r3, [r7, #6]
 8004a64:	4613      	mov	r3, r2
 8004a66:	717b      	strb	r3, [r7, #5]
	if (dlen > SIZEOFEXPR(LMIC.pendTxData))
 8004a68:	79bb      	ldrb	r3, [r7, #6]
 8004a6a:	2b34      	cmp	r3, #52	@ 0x34
 8004a6c:	d902      	bls.n	8004a74 <LMIC_setTxData2+0x24>
		return -2;
 8004a6e:	f06f 0301 	mvn.w	r3, #1
 8004a72:	e017      	b.n	8004aa4 <LMIC_setTxData2+0x54>
	if (data != (xref2u1_t) 0)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d005      	beq.n	8004a86 <LMIC_setTxData2+0x36>
		os_copyMem(LMIC.pendTxData, data, dlen);
 8004a7a:	79bb      	ldrb	r3, [r7, #6]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	6839      	ldr	r1, [r7, #0]
 8004a80:	480a      	ldr	r0, [pc, #40]	@ (8004aac <LMIC_setTxData2+0x5c>)
 8004a82:	f006 f8db 	bl	800ac3c <memcpy>
	LMIC.pendTxConf = confirmed;
 8004a86:	4a0a      	ldr	r2, [pc, #40]	@ (8004ab0 <LMIC_setTxData2+0x60>)
 8004a88:	797b      	ldrb	r3, [r7, #5]
 8004a8a:	f882 30bb 	strb.w	r3, [r2, #187]	@ 0xbb
	LMIC.pendTxPort = port;
 8004a8e:	4a08      	ldr	r2, [pc, #32]	@ (8004ab0 <LMIC_setTxData2+0x60>)
 8004a90:	79fb      	ldrb	r3, [r7, #7]
 8004a92:	f882 30ba 	strb.w	r3, [r2, #186]	@ 0xba
	LMIC.pendTxLen = dlen;
 8004a96:	4a06      	ldr	r2, [pc, #24]	@ (8004ab0 <LMIC_setTxData2+0x60>)
 8004a98:	79bb      	ldrb	r3, [r7, #6]
 8004a9a:	f882 30bc 	strb.w	r3, [r2, #188]	@ 0xbc
	LMIC_setTxData();
 8004a9e:	f7ff ffbb 	bl	8004a18 <LMIC_setTxData>
	return 0;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3708      	adds	r7, #8
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	200002ad 	.word	0x200002ad
 8004ab0:	200001f0 	.word	0x200001f0

08004ab4 <os_getArtEui>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// provide application router ID (8 bytes, LSBF)
void os_getArtEui(u1_t *buf)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
	memcpy(buf, APPEUI, 8);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4906      	ldr	r1, [pc, #24]	@ (8004ad8 <os_getArtEui+0x24>)
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	cb03      	ldmia	r3!, {r0, r1}
 8004ac6:	6010      	str	r0, [r2, #0]
 8004ac8:	6051      	str	r1, [r2, #4]
}
 8004aca:	bf00      	nop
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	0800c0c4 	.word	0x0800c0c4

08004adc <os_getDevEui>:

// provide device ID (8 bytes, LSBF)
void os_getDevEui(u1_t *buf)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
	memcpy(buf, DEVEUI, 8);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4906      	ldr	r1, [pc, #24]	@ (8004b00 <os_getDevEui+0x24>)
 8004ae8:	461a      	mov	r2, r3
 8004aea:	460b      	mov	r3, r1
 8004aec:	cb03      	ldmia	r3!, {r0, r1}
 8004aee:	6010      	str	r0, [r2, #0]
 8004af0:	6051      	str	r1, [r2, #4]
}
 8004af2:	bf00      	nop
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	0800c0cc 	.word	0x0800c0cc

08004b04 <os_getDevKey>:

// provide device key (16 bytes)
void os_getDevKey(u1_t *buf)
{
 8004b04:	b4b0      	push	{r4, r5, r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
	memcpy(buf, DEVKEY, 16);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a06      	ldr	r2, [pc, #24]	@ (8004b28 <os_getDevKey+0x24>)
 8004b10:	461c      	mov	r4, r3
 8004b12:	4615      	mov	r5, r2
 8004b14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b16:	6020      	str	r0, [r4, #0]
 8004b18:	6061      	str	r1, [r4, #4]
 8004b1a:	60a2      	str	r2, [r4, #8]
 8004b1c:	60e3      	str	r3, [r4, #12]
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bcb0      	pop	{r4, r5, r7}
 8004b26:	4770      	bx	lr
 8004b28:	0800c0d4 	.word	0x0800c0d4

08004b2c <initsensor>:

void initsensor()
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
	// Here you init your sensors
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8004b30:	217f      	movs	r1, #127	@ 0x7f
 8004b32:	4802      	ldr	r0, [pc, #8]	@ (8004b3c <initsensor+0x10>)
 8004b34:	f002 fe4c 	bl	80077d0 <HAL_ADCEx_Calibration_Start>
}
 8004b38:	bf00      	nop
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	20000070 	.word	0x20000070

08004b40 <initfunc>:

void initfunc(osjob_t *j)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
	// initialize sensor hardware
	initsensor();
 8004b48:	f7ff fff0 	bl	8004b2c <initsensor>
	// reset MAC state
	LMIC_reset();
 8004b4c:	f7ff ff08 	bl	8004960 <LMIC_reset>
	// start joining
	LMIC_startJoining();
 8004b50:	f7ff fab0 	bl	80040b4 <LMIC_startJoining>
	// init done - onEvent() callback will be invoked...
}
 8004b54:	bf00      	nop
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <readsensor>:

u2_t readsensor()
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
	u2_t value = temp; /// read from everything ...make your own sensor
 8004b62:	4b05      	ldr	r3, [pc, #20]	@ (8004b78 <readsensor+0x1c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	80fb      	strh	r3, [r7, #6]
	return value;
 8004b68:	88fb      	ldrh	r3, [r7, #6]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	200003a0 	.word	0x200003a0

08004b7c <reportfunc>:

static osjob_t reportjob;
// report sensor value every minute
static void reportfunc(osjob_t *j)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
	// read sensor
	u2_t val = readsensor();
 8004b84:	f7ff ffea 	bl	8004b5c <readsensor>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	81fb      	strh	r3, [r7, #14]
	debug_valdec("val = ", val);
 8004b8c:	89fb      	ldrh	r3, [r7, #14]
 8004b8e:	4619      	mov	r1, r3
 8004b90:	4819      	ldr	r0, [pc, #100]	@ (8004bf8 <reportfunc+0x7c>)
 8004b92:	f7fc fbb1 	bl	80012f8 <debug_valdec>
	// prepare and schedule data for transmission
	LMIC.frame[0] = 0;
 8004b96:	4b19      	ldr	r3, [pc, #100]	@ (8004bfc <reportfunc+0x80>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
	LMIC.frame[1] = 0x67;
 8004b9e:	4b17      	ldr	r3, [pc, #92]	@ (8004bfc <reportfunc+0x80>)
 8004ba0:	2267      	movs	r2, #103	@ 0x67
 8004ba2:	f883 2149 	strb.w	r2, [r3, #329]	@ 0x149
	val /= 100;
 8004ba6:	89fb      	ldrh	r3, [r7, #14]
 8004ba8:	4a15      	ldr	r2, [pc, #84]	@ (8004c00 <reportfunc+0x84>)
 8004baa:	fba2 2303 	umull	r2, r3, r2, r3
 8004bae:	095b      	lsrs	r3, r3, #5
 8004bb0:	81fb      	strh	r3, [r7, #14]
	LMIC.frame[2] = val >> 8;
 8004bb2:	89fb      	ldrh	r3, [r7, #14]
 8004bb4:	0a1b      	lsrs	r3, r3, #8
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	4b10      	ldr	r3, [pc, #64]	@ (8004bfc <reportfunc+0x80>)
 8004bbc:	f883 214a 	strb.w	r2, [r3, #330]	@ 0x14a
	LMIC.frame[3] = val;
 8004bc0:	89fb      	ldrh	r3, [r7, #14]
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8004bfc <reportfunc+0x80>)
 8004bc6:	f883 214b 	strb.w	r2, [r3, #331]	@ 0x14b
	// La fonction LMIC_setTxData2 envoie
	LMIC_setTxData2(1, LMIC.frame, 4, 0);
 8004bca:	2300      	movs	r3, #0
 8004bcc:	2204      	movs	r2, #4
 8004bce:	490d      	ldr	r1, [pc, #52]	@ (8004c04 <reportfunc+0x88>)
 8004bd0:	2001      	movs	r0, #1
 8004bd2:	f7ff ff3d 	bl	8004a50 <LMIC_setTxData2>
	// la trame Lora : LMIC.frame
	// (port 1, 2 bytes, unconfirmed)
	// reschedule job in 15 seconds
	os_setTimedCallback(j, os_getTime() + sec2osticks(15), reportfunc);
 8004bd6:	f000 fa01 	bl	8004fdc <os_getTime>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	f503 23ea 	add.w	r3, r3, #479232	@ 0x75000
 8004be0:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004be4:	4a08      	ldr	r2, [pc, #32]	@ (8004c08 <reportfunc+0x8c>)
 8004be6:	4619      	mov	r1, r3
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 fa61 	bl	80050b0 <os_setTimedCallback>
}
 8004bee:	bf00      	nop
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	0800ad90 	.word	0x0800ad90
 8004bfc:	200001f0 	.word	0x200001f0
 8004c00:	51eb851f 	.word	0x51eb851f
 8004c04:	20000338 	.word	0x20000338
 8004c08:	08004b7d 	.word	0x08004b7d

08004c0c <blinkfunc>:
}

static osjob_t blinkjob;
static u1_t ledstate = 0;
static void blinkfunc(osjob_t *j)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
	// toggle LED
	ledstate = !ledstate;
 8004c14:	4b0e      	ldr	r3, [pc, #56]	@ (8004c50 <blinkfunc+0x44>)
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	bf0c      	ite	eq
 8004c1c:	2301      	moveq	r3, #1
 8004c1e:	2300      	movne	r3, #0
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	461a      	mov	r2, r3
 8004c24:	4b0a      	ldr	r3, [pc, #40]	@ (8004c50 <blinkfunc+0x44>)
 8004c26:	701a      	strb	r2, [r3, #0]
	debug_led(ledstate);
 8004c28:	4b09      	ldr	r3, [pc, #36]	@ (8004c50 <blinkfunc+0x44>)
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7fc fab1 	bl	8001194 <debug_led>
	// reschedule blink job
	os_setTimedCallback(j, os_getTime() + ms2osticks(100), blinkfunc);
 8004c32:	f000 f9d3 	bl	8004fdc <os_getTime>
 8004c36:	4603      	mov	r3, r0
 8004c38:	f503 6348 	add.w	r3, r3, #3200	@ 0xc80
 8004c3c:	4a05      	ldr	r2, [pc, #20]	@ (8004c54 <blinkfunc+0x48>)
 8004c3e:	4619      	mov	r1, r3
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 fa35 	bl	80050b0 <os_setTimedCallback>
}
 8004c46:	bf00      	nop
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	200003bc 	.word	0x200003bc
 8004c54:	08004c0d 	.word	0x08004c0d

08004c58 <onEvent>:

//////////////////////////////////////////////////
// LMIC EVENT CALLBACK
//////////////////////////////////////////////////
void onEvent(ev_t ev)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	4603      	mov	r3, r0
 8004c60:	71fb      	strb	r3, [r7, #7]
	debug_event(ev);
 8004c62:	79fb      	ldrb	r3, [r7, #7]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7fc fbd5 	bl	8001414 <debug_event>
	switch (ev) {
 8004c6a:	79fb      	ldrb	r3, [r7, #7]
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	2b0e      	cmp	r3, #14
 8004c70:	f200 8093 	bhi.w	8004d9a <onEvent+0x142>
 8004c74:	a201      	add	r2, pc, #4	@ (adr r2, 8004c7c <onEvent+0x24>)
 8004c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7a:	bf00      	nop
 8004c7c:	08004ce3 	.word	0x08004ce3
 8004c80:	08004ceb 	.word	0x08004ceb
 8004c84:	08004cf3 	.word	0x08004cf3
 8004c88:	08004cfb 	.word	0x08004cfb
 8004c8c:	08004cb9 	.word	0x08004cb9
 8004c90:	08004cc7 	.word	0x08004cc7
 8004c94:	08004d03 	.word	0x08004d03
 8004c98:	08004cdb 	.word	0x08004cdb
 8004c9c:	08004d0b 	.word	0x08004d0b
 8004ca0:	08004d13 	.word	0x08004d13
 8004ca4:	08004d73 	.word	0x08004d73
 8004ca8:	08004d7b 	.word	0x08004d7b
 8004cac:	08004d83 	.word	0x08004d83
 8004cb0:	08004d8b 	.word	0x08004d8b
 8004cb4:	08004d93 	.word	0x08004d93
	// network joined, session established
	case EV_JOINING:
		debug_str("try joining\r\n");
 8004cb8:	483c      	ldr	r0, [pc, #240]	@ (8004dac <onEvent+0x154>)
 8004cba:	f7fc faf3 	bl	80012a4 <debug_str>
		blinkfunc(&blinkjob);
 8004cbe:	483c      	ldr	r0, [pc, #240]	@ (8004db0 <onEvent+0x158>)
 8004cc0:	f7ff ffa4 	bl	8004c0c <blinkfunc>
		break;
 8004cc4:	e06e      	b.n	8004da4 <onEvent+0x14c>
	case EV_JOINED:
		// kick-off periodic sensor job
		os_clearCallback(&blinkjob);
 8004cc6:	483a      	ldr	r0, [pc, #232]	@ (8004db0 <onEvent+0x158>)
 8004cc8:	f000 f9ae 	bl	8005028 <os_clearCallback>
		debug_led(1);
 8004ccc:	2001      	movs	r0, #1
 8004cce:	f7fc fa61 	bl	8001194 <debug_led>
		reportfunc(&reportjob);
 8004cd2:	4838      	ldr	r0, [pc, #224]	@ (8004db4 <onEvent+0x15c>)
 8004cd4:	f7ff ff52 	bl	8004b7c <reportfunc>
		break;
 8004cd8:	e064      	b.n	8004da4 <onEvent+0x14c>
	case EV_JOIN_FAILED:
		debug_str("join failed\r\n");
 8004cda:	4837      	ldr	r0, [pc, #220]	@ (8004db8 <onEvent+0x160>)
 8004cdc:	f7fc fae2 	bl	80012a4 <debug_str>
		break;
 8004ce0:	e060      	b.n	8004da4 <onEvent+0x14c>
	case EV_SCAN_TIMEOUT:
		debug_str("EV_SCAN_TIMEOUT\r\n");
 8004ce2:	4836      	ldr	r0, [pc, #216]	@ (8004dbc <onEvent+0x164>)
 8004ce4:	f7fc fade 	bl	80012a4 <debug_str>
		break;
 8004ce8:	e05c      	b.n	8004da4 <onEvent+0x14c>
	case EV_BEACON_FOUND:
		debug_str("EV_BEACON_FOUND\r\n");
 8004cea:	4835      	ldr	r0, [pc, #212]	@ (8004dc0 <onEvent+0x168>)
 8004cec:	f7fc fada 	bl	80012a4 <debug_str>
		break;
 8004cf0:	e058      	b.n	8004da4 <onEvent+0x14c>
	case EV_BEACON_MISSED:
		debug_str("EV_BEACON_MISSED\r\n");
 8004cf2:	4834      	ldr	r0, [pc, #208]	@ (8004dc4 <onEvent+0x16c>)
 8004cf4:	f7fc fad6 	bl	80012a4 <debug_str>
		break;
 8004cf8:	e054      	b.n	8004da4 <onEvent+0x14c>
	case EV_BEACON_TRACKED:
		debug_str("EV_BEACON_TRACKED\r\n");
 8004cfa:	4833      	ldr	r0, [pc, #204]	@ (8004dc8 <onEvent+0x170>)
 8004cfc:	f7fc fad2 	bl	80012a4 <debug_str>
		break;
 8004d00:	e050      	b.n	8004da4 <onEvent+0x14c>
	case EV_RFU1:
		debug_str("EV_RFU1\r\n");
 8004d02:	4832      	ldr	r0, [pc, #200]	@ (8004dcc <onEvent+0x174>)
 8004d04:	f7fc face 	bl	80012a4 <debug_str>
		break;
 8004d08:	e04c      	b.n	8004da4 <onEvent+0x14c>
	case EV_REJOIN_FAILED:
		debug_str("EV_REJOIN_FAILED\r\n");
 8004d0a:	4831      	ldr	r0, [pc, #196]	@ (8004dd0 <onEvent+0x178>)
 8004d0c:	f7fc faca 	bl	80012a4 <debug_str>
		break;
 8004d10:	e048      	b.n	8004da4 <onEvent+0x14c>
	case EV_TXCOMPLETE:
		debug_str("EV_TXCOMPLETE (includes waiting for RX windows)\r\n");
 8004d12:	4830      	ldr	r0, [pc, #192]	@ (8004dd4 <onEvent+0x17c>)
 8004d14:	f7fc fac6 	bl	80012a4 <debug_str>
		if (LMIC.txrxFlags & TXRX_ACK)
 8004d18:	4b2f      	ldr	r3, [pc, #188]	@ (8004dd8 <onEvent+0x180>)
 8004d1a:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8004d1e:	b25b      	sxtb	r3, r3
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	da02      	bge.n	8004d2a <onEvent+0xd2>
			debug_str("Received ack\r\n");
 8004d24:	482d      	ldr	r0, [pc, #180]	@ (8004ddc <onEvent+0x184>)
 8004d26:	f7fc fabd 	bl	80012a4 <debug_str>
		if (LMIC.dataLen) {
 8004d2a:	4b2b      	ldr	r3, [pc, #172]	@ (8004dd8 <onEvent+0x180>)
 8004d2c:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d036      	beq.n	8004da2 <onEvent+0x14a>
			debug_valdec("Received bytes of payload\r\n:", LMIC.dataLen);
 8004d34:	4b28      	ldr	r3, [pc, #160]	@ (8004dd8 <onEvent+0x180>)
 8004d36:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	4828      	ldr	r0, [pc, #160]	@ (8004de0 <onEvent+0x188>)
 8004d3e:	f7fc fadb 	bl	80012f8 <debug_valdec>
			debug_val("Data = :", LMIC.frame[LMIC.dataBeg]);
 8004d42:	4b25      	ldr	r3, [pc, #148]	@ (8004dd8 <onEvent+0x180>)
 8004d44:	f893 3146 	ldrb.w	r3, [r3, #326]	@ 0x146
 8004d48:	461a      	mov	r2, r3
 8004d4a:	4b23      	ldr	r3, [pc, #140]	@ (8004dd8 <onEvent+0x180>)
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8004d52:	4619      	mov	r1, r3
 8004d54:	4823      	ldr	r0, [pc, #140]	@ (8004de4 <onEvent+0x18c>)
 8004d56:	f7fc faba 	bl	80012ce <debug_val>
			debug_led(LMIC.frame[LMIC.dataBeg]);
 8004d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8004dd8 <onEvent+0x180>)
 8004d5c:	f893 3146 	ldrb.w	r3, [r3, #326]	@ 0x146
 8004d60:	461a      	mov	r2, r3
 8004d62:	4b1d      	ldr	r3, [pc, #116]	@ (8004dd8 <onEvent+0x180>)
 8004d64:	4413      	add	r3, r2
 8004d66:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fc fa12 	bl	8001194 <debug_led>
		}
		break;
 8004d70:	e017      	b.n	8004da2 <onEvent+0x14a>
	case EV_LOST_TSYNC:
		debug_str("EV_LOST_TSYNC\r\n");
 8004d72:	481d      	ldr	r0, [pc, #116]	@ (8004de8 <onEvent+0x190>)
 8004d74:	f7fc fa96 	bl	80012a4 <debug_str>
		break;
 8004d78:	e014      	b.n	8004da4 <onEvent+0x14c>
	case EV_RESET:
		debug_str("EV_RESET\r\n");
 8004d7a:	481c      	ldr	r0, [pc, #112]	@ (8004dec <onEvent+0x194>)
 8004d7c:	f7fc fa92 	bl	80012a4 <debug_str>
		break;
 8004d80:	e010      	b.n	8004da4 <onEvent+0x14c>
	case EV_RXCOMPLETE:
		// data received in ping slot
		debug_str("EV_RXCOMPLETE\r\n");
 8004d82:	481b      	ldr	r0, [pc, #108]	@ (8004df0 <onEvent+0x198>)
 8004d84:	f7fc fa8e 	bl	80012a4 <debug_str>
		break;
 8004d88:	e00c      	b.n	8004da4 <onEvent+0x14c>
	case EV_LINK_DEAD:
		debug_str("EV_LINK_DEAD\r\n");
 8004d8a:	481a      	ldr	r0, [pc, #104]	@ (8004df4 <onEvent+0x19c>)
 8004d8c:	f7fc fa8a 	bl	80012a4 <debug_str>
		break;
 8004d90:	e008      	b.n	8004da4 <onEvent+0x14c>
	case EV_LINK_ALIVE:
		debug_str("EV_LINK_ALIVE\r\n");
 8004d92:	4819      	ldr	r0, [pc, #100]	@ (8004df8 <onEvent+0x1a0>)
 8004d94:	f7fc fa86 	bl	80012a4 <debug_str>
		break;
 8004d98:	e004      	b.n	8004da4 <onEvent+0x14c>
	default:
		debug_str("Unknown event\r\n");
 8004d9a:	4818      	ldr	r0, [pc, #96]	@ (8004dfc <onEvent+0x1a4>)
 8004d9c:	f7fc fa82 	bl	80012a4 <debug_str>
		break;
 8004da0:	e000      	b.n	8004da4 <onEvent+0x14c>
		break;
 8004da2:	bf00      	nop
	}
}
 8004da4:	bf00      	nop
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	0800adb0 	.word	0x0800adb0
 8004db0:	200003b0 	.word	0x200003b0
 8004db4:	200003a4 	.word	0x200003a4
 8004db8:	0800adc0 	.word	0x0800adc0
 8004dbc:	0800add0 	.word	0x0800add0
 8004dc0:	0800ade4 	.word	0x0800ade4
 8004dc4:	0800adf8 	.word	0x0800adf8
 8004dc8:	0800ae0c 	.word	0x0800ae0c
 8004dcc:	0800ae20 	.word	0x0800ae20
 8004dd0:	0800ae2c 	.word	0x0800ae2c
 8004dd4:	0800ae40 	.word	0x0800ae40
 8004dd8:	200001f0 	.word	0x200001f0
 8004ddc:	0800ae74 	.word	0x0800ae74
 8004de0:	0800ae84 	.word	0x0800ae84
 8004de4:	0800aea4 	.word	0x0800aea4
 8004de8:	0800aeb0 	.word	0x0800aeb0
 8004dec:	0800aec0 	.word	0x0800aec0
 8004df0:	0800aecc 	.word	0x0800aecc
 8004df4:	0800aedc 	.word	0x0800aedc
 8004df8:	0800aeec 	.word	0x0800aeec
 8004dfc:	0800aefc 	.word	0x0800aefc

08004e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004e06:	f001 f9ae 	bl	8006166 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004e0a:	f000 f83b 	bl	8004e84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004e0e:	f7fc fb1f 	bl	8001450 <MX_GPIO_Init>
  MX_SPI3_Init();
 8004e12:	f000 ff35 	bl	8005c80 <MX_SPI3_Init>
  MX_TIM7_Init();
 8004e16:	f001 f87b 	bl	8005f10 <MX_TIM7_Init>
  MX_ADC1_Init();
 8004e1a:	f7fb fb9f 	bl	800055c <MX_ADC1_Init>
  MX_TIM6_Init();
 8004e1e:	f001 f83f 	bl	8005ea0 <MX_TIM6_Init>
  MX_I2C1_Init();
 8004e22:	f7fc fd19 	bl	8001858 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8004e26:	f001 f8ed 	bl	8006004 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim6);
 8004e2a:	4812      	ldr	r0, [pc, #72]	@ (8004e74 <main+0x74>)
 8004e2c:	f004 ff42 	bl	8009cb4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);   // <----------- change to your setup
 8004e30:	4811      	ldr	r0, [pc, #68]	@ (8004e78 <main+0x78>)
 8004e32:	f004 ff3f 	bl	8009cb4 <HAL_TIM_Base_Start_IT>
	__HAL_SPI_ENABLE(&hspi3);        // <----------- change to your setup
 8004e36:	4b11      	ldr	r3, [pc, #68]	@ (8004e7c <main+0x7c>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	4b0f      	ldr	r3, [pc, #60]	@ (8004e7c <main+0x7c>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e44:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(Alim_temp_GPIO_Port, Alim_temp_Pin, GPIO_PIN_SET);
 8004e46:	2201      	movs	r2, #1
 8004e48:	2180      	movs	r1, #128	@ 0x80
 8004e4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004e4e:	f002 ffcd 	bl	8007dec <HAL_GPIO_WritePin>
	osjob_t initjob;
	// initialize runtime env
	os_init();
 8004e52:	f000 f8b1 	bl	8004fb8 <os_init>
	// initialize debug library
	debug_init();
 8004e56:	f7fc f993 	bl	8001180 <debug_init>
	// setup initial job
	os_setCallback(&initjob, initfunc);
 8004e5a:	1d3b      	adds	r3, r7, #4
 8004e5c:	4908      	ldr	r1, [pc, #32]	@ (8004e80 <main+0x80>)
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 f900 	bl	8005064 <os_setCallback>
	// execute scheduled jobs and events
	os_runloop();
 8004e64:	f000 f95a 	bl	800511c <os_runloop>
	// (not reached)
	return 0;
 8004e68:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	2000043c 	.word	0x2000043c
 8004e78:	20000488 	.word	0x20000488
 8004e7c:	200003d8 	.word	0x200003d8
 8004e80:	08004b41 	.word	0x08004b41

08004e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b096      	sub	sp, #88	@ 0x58
 8004e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004e8a:	f107 0314 	add.w	r3, r7, #20
 8004e8e:	2244      	movs	r2, #68	@ 0x44
 8004e90:	2100      	movs	r1, #0
 8004e92:	4618      	mov	r0, r3
 8004e94:	f005 fea5 	bl	800abe2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004e98:	463b      	mov	r3, r7
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	605a      	str	r2, [r3, #4]
 8004ea0:	609a      	str	r2, [r3, #8]
 8004ea2:	60da      	str	r2, [r3, #12]
 8004ea4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004ea6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8004eaa:	f003 f90f 	bl	80080cc <HAL_PWREx_ControlVoltageScaling>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8004eb4:	f000 f87a 	bl	8004fac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004eb8:	2302      	movs	r3, #2
 8004eba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004ebc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ec0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004ec2:	2310      	movs	r3, #16
 8004ec4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004eca:	2302      	movs	r3, #2
 8004ecc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8004ed2:	230a      	movs	r3, #10
 8004ed4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004ed6:	2307      	movs	r3, #7
 8004ed8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004eda:	2302      	movs	r3, #2
 8004edc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004ede:	2302      	movs	r3, #2
 8004ee0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ee2:	f107 0314 	add.w	r3, r7, #20
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f003 f946 	bl	8008178 <HAL_RCC_OscConfig>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8004ef2:	f000 f85b 	bl	8004fac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ef6:	230f      	movs	r3, #15
 8004ef8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004efa:	2303      	movs	r3, #3
 8004efc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004efe:	2300      	movs	r3, #0
 8004f00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004f02:	2300      	movs	r3, #0
 8004f04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004f06:	2300      	movs	r3, #0
 8004f08:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004f0a:	463b      	mov	r3, r7
 8004f0c:	2104      	movs	r1, #4
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f003 fd46 	bl	80089a0 <HAL_RCC_ClockConfig>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004f1a:	f000 f847 	bl	8004fac <Error_Handler>
  }
}
 8004f1e:	bf00      	nop
 8004f20:	3758      	adds	r7, #88	@ 0x58
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
	...

08004f28 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
	if (htim == &htim6) {
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a09      	ldr	r2, [pc, #36]	@ (8004f58 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d102      	bne.n	8004f3e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_ADC_Start_IT(&hadc1);
 8004f38:	4808      	ldr	r0, [pc, #32]	@ (8004f5c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8004f3a:	f001 fccb 	bl	80068d4 <HAL_ADC_Start_IT>
	}
	if (htim->Instance == htim7.Instance) {
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	4b07      	ldr	r3, [pc, #28]	@ (8004f60 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d101      	bne.n	8004f4e <HAL_TIM_PeriodElapsedCallback+0x26>
		hal_ticksplusplus();
 8004f4a:	f7fc fbc1 	bl	80016d0 <hal_ticksplusplus>
	}
}
 8004f4e:	bf00      	nop
 8004f50:	3708      	adds	r7, #8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	2000043c 	.word	0x2000043c
 8004f5c:	20000070 	.word	0x20000070
 8004f60:	20000488 	.word	0x20000488

08004f64 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a0c      	ldr	r2, [pc, #48]	@ (8004fa0 <HAL_ADC_ConvCpltCallback+0x3c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d110      	bne.n	8004f96 <HAL_ADC_ConvCpltCallback+0x32>
		n_temp = HAL_ADC_GetValue(&hadc1);
 8004f74:	480a      	ldr	r0, [pc, #40]	@ (8004fa0 <HAL_ADC_ConvCpltCallback+0x3c>)
 8004f76:	f001 fd61 	bl	8006a3c <HAL_ADC_GetValue>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	4a09      	ldr	r2, [pc, #36]	@ (8004fa4 <HAL_ADC_ConvCpltCallback+0x40>)
 8004f7e:	6013      	str	r3, [r2, #0]
		temp = 188686 - 147 * n_temp;
 8004f80:	4b08      	ldr	r3, [pc, #32]	@ (8004fa4 <HAL_ADC_ConvCpltCallback+0x40>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2293      	movs	r2, #147	@ 0x93
 8004f86:	fb02 f303 	mul.w	r3, r2, r3
 8004f8a:	f5c3 3338 	rsb	r3, r3, #188416	@ 0x2e000
 8004f8e:	f503 7387 	add.w	r3, r3, #270	@ 0x10e
 8004f92:	4a05      	ldr	r2, [pc, #20]	@ (8004fa8 <HAL_ADC_ConvCpltCallback+0x44>)
 8004f94:	6013      	str	r3, [r2, #0]
	}
}
 8004f96:	bf00      	nop
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	20000070 	.word	0x20000070
 8004fa4:	2000039c 	.word	0x2000039c
 8004fa8:	200003a0 	.word	0x200003a0

08004fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004fac:	b480      	push	{r7}
 8004fae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004fb0:	b672      	cpsid	i
}
 8004fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004fb4:	bf00      	nop
 8004fb6:	e7fd      	b.n	8004fb4 <Error_Handler+0x8>

08004fb8 <os_init>:
	osjob_t *scheduledjobs;
	osjob_t *runnablejobs;
} OS;

void os_init()
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0
	memset(&OS, 0x00, sizeof(OS));
 8004fbc:	2208      	movs	r2, #8
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	4805      	ldr	r0, [pc, #20]	@ (8004fd8 <os_init+0x20>)
 8004fc2:	f005 fe0e 	bl	800abe2 <memset>
	hal_init();
 8004fc6:	f7fc fc29 	bl	800181c <hal_init>
	radio_init();
 8004fca:	f000 fcbd 	bl	8005948 <radio_init>
	LMIC_init();
 8004fce:	f7ff fd15 	bl	80049fc <LMIC_init>
}
 8004fd2:	bf00      	nop
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	200003c0 	.word	0x200003c0

08004fdc <os_getTime>:

ostime_t os_getTime()
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	af00      	add	r7, sp, #0
	return hal_ticks();
 8004fe0:	f7fc fb46 	bl	8001670 <hal_ticks>
 8004fe4:	4603      	mov	r3, r0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <unlinkjob>:

// unlink job from queue, return if removed
static int unlinkjob(osjob_t **pnext, osjob_t *job)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b083      	sub	sp, #12
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	6039      	str	r1, [r7, #0]
	for (; *pnext; pnext = &((*pnext)->next)) {
 8004ff4:	e00d      	b.n	8005012 <unlinkjob+0x28>
		if (*pnext == job) { // unlink
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d105      	bne.n	800500c <unlinkjob+0x22>
			*pnext = job->next;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	601a      	str	r2, [r3, #0]
			return 1;
 8005008:	2301      	movs	r3, #1
 800500a:	e007      	b.n	800501c <unlinkjob+0x32>
	for (; *pnext; pnext = &((*pnext)->next)) {
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	607b      	str	r3, [r7, #4]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1ed      	bne.n	8004ff6 <unlinkjob+0xc>
		}
	}
	return 0;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <os_clearCallback>:

// clear scheduled job
void os_clearCallback(osjob_t *job)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
	hal_disableIRQs();
 8005030:	f7fc fbc8 	bl	80017c4 <hal_disableIRQs>
	unlinkjob(&OS.scheduledjobs, job) || unlinkjob(&OS.runnablejobs, job);
 8005034:	6879      	ldr	r1, [r7, #4]
 8005036:	4809      	ldr	r0, [pc, #36]	@ (800505c <os_clearCallback+0x34>)
 8005038:	f7ff ffd7 	bl	8004fea <unlinkjob>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d105      	bne.n	800504e <os_clearCallback+0x26>
 8005042:	6879      	ldr	r1, [r7, #4]
 8005044:	4806      	ldr	r0, [pc, #24]	@ (8005060 <os_clearCallback+0x38>)
 8005046:	f7ff ffd0 	bl	8004fea <unlinkjob>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
	hal_enableIRQs();
 800504e:	f7fc fbc9 	bl	80017e4 <hal_enableIRQs>
}
 8005052:	bf00      	nop
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	200003c0 	.word	0x200003c0
 8005060:	200003c4 	.word	0x200003c4

08005064 <os_setCallback>:

// schedule immediately runnable job
void os_setCallback(osjob_t *job, osjobcb_t cb)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
	osjob_t **pnext;
	hal_disableIRQs();
 800506e:	f7fc fba9 	bl	80017c4 <hal_disableIRQs>
	// remove if job was already queued
	unlinkjob(&OS.runnablejobs, job);
 8005072:	6879      	ldr	r1, [r7, #4]
 8005074:	480d      	ldr	r0, [pc, #52]	@ (80050ac <os_setCallback+0x48>)
 8005076:	f7ff ffb8 	bl	8004fea <unlinkjob>
	// fill-in job
	job->func = cb;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	609a      	str	r2, [r3, #8]
	job->next = NULL;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	601a      	str	r2, [r3, #0]
	// add to end of run queue
	for (pnext = &OS.runnablejobs; *pnext; pnext = &((*pnext)->next))
 8005086:	4b09      	ldr	r3, [pc, #36]	@ (80050ac <os_setCallback+0x48>)
 8005088:	60fb      	str	r3, [r7, #12]
 800508a:	e002      	b.n	8005092 <os_setCallback+0x2e>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1f8      	bne.n	800508c <os_setCallback+0x28>
		;
	*pnext = job;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	601a      	str	r2, [r3, #0]
	hal_enableIRQs();
 80050a0:	f7fc fba0 	bl	80017e4 <hal_enableIRQs>
}
 80050a4:	bf00      	nop
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	200003c4 	.word	0x200003c4

080050b0 <os_setTimedCallback>:

// schedule timed job
void os_setTimedCallback(osjob_t *job, ostime_t time, osjobcb_t cb)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
	osjob_t **pnext;
	hal_disableIRQs();
 80050bc:	f7fc fb82 	bl	80017c4 <hal_disableIRQs>
	// remove if job was already queued
	unlinkjob(&OS.scheduledjobs, job);
 80050c0:	68f9      	ldr	r1, [r7, #12]
 80050c2:	4815      	ldr	r0, [pc, #84]	@ (8005118 <os_setTimedCallback+0x68>)
 80050c4:	f7ff ff91 	bl	8004fea <unlinkjob>
	// fill-in job
	job->deadline = time;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	605a      	str	r2, [r3, #4]
	job->func = cb;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	609a      	str	r2, [r3, #8]
	job->next = NULL;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	601a      	str	r2, [r3, #0]
	// insert into schedule
	for (pnext = &OS.scheduledjobs; *pnext; pnext = &((*pnext)->next)) {
 80050da:	4b0f      	ldr	r3, [pc, #60]	@ (8005118 <os_setTimedCallback+0x68>)
 80050dc:	617b      	str	r3, [r7, #20]
 80050de:	e00e      	b.n	80050fe <os_setTimedCallback+0x4e>
		if ((*pnext)->deadline - time > 0) { // (cmp diff, not abs!)
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	dd04      	ble.n	80050f8 <os_setTimedCallback+0x48>
			// enqueue before next element and stop
			job->next = *pnext;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	601a      	str	r2, [r3, #0]
			break;
 80050f6:	e006      	b.n	8005106 <os_setTimedCallback+0x56>
	for (pnext = &OS.scheduledjobs; *pnext; pnext = &((*pnext)->next)) {
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	617b      	str	r3, [r7, #20]
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1ec      	bne.n	80050e0 <os_setTimedCallback+0x30>
		}
	}
	*pnext = job;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	601a      	str	r2, [r3, #0]
	hal_enableIRQs();
 800510c:	f7fc fb6a 	bl	80017e4 <hal_enableIRQs>
}
 8005110:	bf00      	nop
 8005112:	3718      	adds	r7, #24
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	200003c0 	.word	0x200003c0

0800511c <os_runloop>:

// execute jobs from timer and from run queue
void os_runloop()
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
	while (1) {
		osjob_t *j = NULL;
 8005122:	2300      	movs	r3, #0
 8005124:	607b      	str	r3, [r7, #4]
		hal_disableIRQs();
 8005126:	f7fc fb4d 	bl	80017c4 <hal_disableIRQs>
		// check for runnable jobs
		if (OS.runnablejobs) {
 800512a:	4b16      	ldr	r3, [pc, #88]	@ (8005184 <os_runloop+0x68>)
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d007      	beq.n	8005142 <os_runloop+0x26>
			j = OS.runnablejobs;
 8005132:	4b14      	ldr	r3, [pc, #80]	@ (8005184 <os_runloop+0x68>)
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	607b      	str	r3, [r7, #4]
			OS.runnablejobs = j->next;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a11      	ldr	r2, [pc, #68]	@ (8005184 <os_runloop+0x68>)
 800513e:	6053      	str	r3, [r2, #4]
 8005140:	e016      	b.n	8005170 <os_runloop+0x54>
		} else if (OS.scheduledjobs
 8005142:	4b10      	ldr	r3, [pc, #64]	@ (8005184 <os_runloop+0x68>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d010      	beq.n	800516c <os_runloop+0x50>
				&& hal_checkTimer(OS.scheduledjobs->deadline)) { // check for expired timed jobs
 800514a:	4b0e      	ldr	r3, [pc, #56]	@ (8005184 <os_runloop+0x68>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	4618      	mov	r0, r3
 8005152:	f7fc faf9 	bl	8001748 <hal_checkTimer>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d007      	beq.n	800516c <os_runloop+0x50>
			j = OS.scheduledjobs;
 800515c:	4b09      	ldr	r3, [pc, #36]	@ (8005184 <os_runloop+0x68>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	607b      	str	r3, [r7, #4]
			OS.scheduledjobs = j->next;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a07      	ldr	r2, [pc, #28]	@ (8005184 <os_runloop+0x68>)
 8005168:	6013      	str	r3, [r2, #0]
 800516a:	e001      	b.n	8005170 <os_runloop+0x54>
		} else { // nothing pending
			hal_sleep(); // wake by irq (timer already restarted)
 800516c:	f7fc fb4e 	bl	800180c <hal_sleep>
		}
		hal_enableIRQs();
 8005170:	f7fc fb38 	bl	80017e4 <hal_enableIRQs>
		if (j) { // run job callback
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d0d3      	beq.n	8005122 <os_runloop+0x6>
			j->func(j);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	4798      	blx	r3
	while (1) {
 8005182:	e7ce      	b.n	8005122 <os_runloop+0x6>
 8005184:	200003c0 	.word	0x200003c0

08005188 <writeReg>:
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif

static void writeReg(u1_t addr, u1_t data)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	4603      	mov	r3, r0
 8005190:	460a      	mov	r2, r1
 8005192:	71fb      	strb	r3, [r7, #7]
 8005194:	4613      	mov	r3, r2
 8005196:	71bb      	strb	r3, [r7, #6]
	hal_pin_nss(0);
 8005198:	2000      	movs	r0, #0
 800519a:	f7fc f9e1 	bl	8001560 <hal_pin_nss>
	hal_spi(addr | 0x80);
 800519e:	79fb      	ldrb	r3, [r7, #7]
 80051a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fc fa3c 	bl	8001624 <hal_spi>
	hal_spi(data);
 80051ac:	79bb      	ldrb	r3, [r7, #6]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fc fa38 	bl	8001624 <hal_spi>
	hal_pin_nss(1);
 80051b4:	2001      	movs	r0, #1
 80051b6:	f7fc f9d3 	bl	8001560 <hal_pin_nss>
}
 80051ba:	bf00      	nop
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <readReg>:

static u1_t readReg(u1_t addr)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b084      	sub	sp, #16
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	4603      	mov	r3, r0
 80051ca:	71fb      	strb	r3, [r7, #7]
	hal_pin_nss(0);
 80051cc:	2000      	movs	r0, #0
 80051ce:	f7fc f9c7 	bl	8001560 <hal_pin_nss>
	hal_spi(addr & 0x7F);
 80051d2:	79fb      	ldrb	r3, [r7, #7]
 80051d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fc fa22 	bl	8001624 <hal_spi>
	u1_t val = hal_spi(0x00);
 80051e0:	2000      	movs	r0, #0
 80051e2:	f7fc fa1f 	bl	8001624 <hal_spi>
 80051e6:	4603      	mov	r3, r0
 80051e8:	73fb      	strb	r3, [r7, #15]
	hal_pin_nss(1);
 80051ea:	2001      	movs	r0, #1
 80051ec:	f7fc f9b8 	bl	8001560 <hal_pin_nss>
	return val;
 80051f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <writeBuf>:

static void writeBuf(u1_t addr, xref2u1_t buf, u1_t len)
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b084      	sub	sp, #16
 80051fe:	af00      	add	r7, sp, #0
 8005200:	4603      	mov	r3, r0
 8005202:	6039      	str	r1, [r7, #0]
 8005204:	71fb      	strb	r3, [r7, #7]
 8005206:	4613      	mov	r3, r2
 8005208:	71bb      	strb	r3, [r7, #6]
	hal_pin_nss(0);
 800520a:	2000      	movs	r0, #0
 800520c:	f7fc f9a8 	bl	8001560 <hal_pin_nss>
	hal_spi(addr | 0x80);
 8005210:	79fb      	ldrb	r3, [r7, #7]
 8005212:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005216:	b2db      	uxtb	r3, r3
 8005218:	4618      	mov	r0, r3
 800521a:	f7fc fa03 	bl	8001624 <hal_spi>
	for (u1_t i = 0; i < len; i++) {
 800521e:	2300      	movs	r3, #0
 8005220:	73fb      	strb	r3, [r7, #15]
 8005222:	e009      	b.n	8005238 <writeBuf+0x3e>
		hal_spi(buf[i]);
 8005224:	7bfb      	ldrb	r3, [r7, #15]
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	4413      	add	r3, r2
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	4618      	mov	r0, r3
 800522e:	f7fc f9f9 	bl	8001624 <hal_spi>
	for (u1_t i = 0; i < len; i++) {
 8005232:	7bfb      	ldrb	r3, [r7, #15]
 8005234:	3301      	adds	r3, #1
 8005236:	73fb      	strb	r3, [r7, #15]
 8005238:	7bfa      	ldrb	r2, [r7, #15]
 800523a:	79bb      	ldrb	r3, [r7, #6]
 800523c:	429a      	cmp	r2, r3
 800523e:	d3f1      	bcc.n	8005224 <writeBuf+0x2a>
	}
	hal_pin_nss(1);
 8005240:	2001      	movs	r0, #1
 8005242:	f7fc f98d 	bl	8001560 <hal_pin_nss>
}
 8005246:	bf00      	nop
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <readBuf>:

static void readBuf(u1_t addr, xref2u1_t buf, u1_t len)
{
 800524e:	b590      	push	{r4, r7, lr}
 8005250:	b085      	sub	sp, #20
 8005252:	af00      	add	r7, sp, #0
 8005254:	4603      	mov	r3, r0
 8005256:	6039      	str	r1, [r7, #0]
 8005258:	71fb      	strb	r3, [r7, #7]
 800525a:	4613      	mov	r3, r2
 800525c:	71bb      	strb	r3, [r7, #6]
	hal_pin_nss(0);
 800525e:	2000      	movs	r0, #0
 8005260:	f7fc f97e 	bl	8001560 <hal_pin_nss>
	hal_spi(addr & 0x7F);
 8005264:	79fb      	ldrb	r3, [r7, #7]
 8005266:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800526a:	b2db      	uxtb	r3, r3
 800526c:	4618      	mov	r0, r3
 800526e:	f7fc f9d9 	bl	8001624 <hal_spi>
	for (u1_t i = 0; i < len; i++) {
 8005272:	2300      	movs	r3, #0
 8005274:	73fb      	strb	r3, [r7, #15]
 8005276:	e00a      	b.n	800528e <readBuf+0x40>
		buf[i] = hal_spi(0x00);
 8005278:	7bfb      	ldrb	r3, [r7, #15]
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	18d4      	adds	r4, r2, r3
 800527e:	2000      	movs	r0, #0
 8005280:	f7fc f9d0 	bl	8001624 <hal_spi>
 8005284:	4603      	mov	r3, r0
 8005286:	7023      	strb	r3, [r4, #0]
	for (u1_t i = 0; i < len; i++) {
 8005288:	7bfb      	ldrb	r3, [r7, #15]
 800528a:	3301      	adds	r3, #1
 800528c:	73fb      	strb	r3, [r7, #15]
 800528e:	7bfa      	ldrb	r2, [r7, #15]
 8005290:	79bb      	ldrb	r3, [r7, #6]
 8005292:	429a      	cmp	r2, r3
 8005294:	d3f0      	bcc.n	8005278 <readBuf+0x2a>
	}
	hal_pin_nss(1);
 8005296:	2001      	movs	r0, #1
 8005298:	f7fc f962 	bl	8001560 <hal_pin_nss>
}
 800529c:	bf00      	nop
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd90      	pop	{r4, r7, pc}

080052a4 <opmode>:

static void opmode(u1_t mode)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	4603      	mov	r3, r0
 80052ac:	71fb      	strb	r3, [r7, #7]
	writeReg(RegOpMode, (readReg(RegOpMode) & ~OPMODE_MASK) | mode);
 80052ae:	2001      	movs	r0, #1
 80052b0:	f7ff ff87 	bl	80051c2 <readReg>
 80052b4:	4603      	mov	r3, r0
 80052b6:	b25b      	sxtb	r3, r3
 80052b8:	f023 0307 	bic.w	r3, r3, #7
 80052bc:	b25a      	sxtb	r2, r3
 80052be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	b25b      	sxtb	r3, r3
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	4619      	mov	r1, r3
 80052ca:	2001      	movs	r0, #1
 80052cc:	f7ff ff5c 	bl	8005188 <writeReg>
}
 80052d0:	bf00      	nop
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <opmodeLora>:

static void opmodeLora()
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
	u1_t u = OPMODE_LORA;
 80052de:	2380      	movs	r3, #128	@ 0x80
 80052e0:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
	u |= 0x8;   // TBD: sx1276 high freq
 80052e2:	79fb      	ldrb	r3, [r7, #7]
 80052e4:	f043 0308 	orr.w	r3, r3, #8
 80052e8:	71fb      	strb	r3, [r7, #7]
#endif
	writeReg(RegOpMode, u);
 80052ea:	79fb      	ldrb	r3, [r7, #7]
 80052ec:	4619      	mov	r1, r3
 80052ee:	2001      	movs	r0, #1
 80052f0:	f7ff ff4a 	bl	8005188 <writeReg>
}
 80052f4:	bf00      	nop
 80052f6:	3708      	adds	r7, #8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <opmodeFSK>:

static void opmodeFSK()
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
	u1_t u = 0;
 8005302:	2300      	movs	r3, #0
 8005304:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
	u |= 0x8;   // TBD: sx1276 high freq
 8005306:	79fb      	ldrb	r3, [r7, #7]
 8005308:	f043 0308 	orr.w	r3, r3, #8
 800530c:	71fb      	strb	r3, [r7, #7]
#endif
	writeReg(RegOpMode, u);
 800530e:	79fb      	ldrb	r3, [r7, #7]
 8005310:	4619      	mov	r1, r3
 8005312:	2001      	movs	r0, #1
 8005314:	f7ff ff38 	bl	8005188 <writeReg>
}
 8005318:	bf00      	nop
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <configLoraModem>:

// configure LoRa modem (cfg1, cfg2)
static void configLoraModem()
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
	sf_t sf = getSf(LMIC.rps);
 8005326:	4b54      	ldr	r3, [pc, #336]	@ (8005478 <configLoraModem+0x158>)
 8005328:	89db      	ldrh	r3, [r3, #14]
 800532a:	4618      	mov	r0, r3
 800532c:	f7fc fb2c 	bl	8001988 <getSf>
 8005330:	4603      	mov	r3, r0
 8005332:	713b      	strb	r3, [r7, #4]

#ifdef CFG_sx1276_radio
	u1_t mc1 = 0, mc2 = 0, mc3 = 0;
 8005334:	2300      	movs	r3, #0
 8005336:	71fb      	strb	r3, [r7, #7]
 8005338:	2300      	movs	r3, #0
 800533a:	71bb      	strb	r3, [r7, #6]
 800533c:	2300      	movs	r3, #0
 800533e:	717b      	strb	r3, [r7, #5]

	switch (getBw(LMIC.rps)) {
 8005340:	4b4d      	ldr	r3, [pc, #308]	@ (8005478 <configLoraModem+0x158>)
 8005342:	89db      	ldrh	r3, [r3, #14]
 8005344:	4618      	mov	r0, r3
 8005346:	f7fc fb2f 	bl	80019a8 <getBw>
 800534a:	4603      	mov	r3, r0
 800534c:	2b02      	cmp	r3, #2
 800534e:	d010      	beq.n	8005372 <configLoraModem+0x52>
 8005350:	2b02      	cmp	r3, #2
 8005352:	dc13      	bgt.n	800537c <configLoraModem+0x5c>
 8005354:	2b00      	cmp	r3, #0
 8005356:	d002      	beq.n	800535e <configLoraModem+0x3e>
 8005358:	2b01      	cmp	r3, #1
 800535a:	d005      	beq.n	8005368 <configLoraModem+0x48>
 800535c:	e00e      	b.n	800537c <configLoraModem+0x5c>
	case BW125:
		mc1 |= SX1276_MC1_BW_125;
 800535e:	79fb      	ldrb	r3, [r7, #7]
 8005360:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8005364:	71fb      	strb	r3, [r7, #7]
		break;
 8005366:	e00b      	b.n	8005380 <configLoraModem+0x60>
	case BW250:
		mc1 |= SX1276_MC1_BW_250;
 8005368:	79fb      	ldrb	r3, [r7, #7]
 800536a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800536e:	71fb      	strb	r3, [r7, #7]
		break;
 8005370:	e006      	b.n	8005380 <configLoraModem+0x60>
	case BW500:
		mc1 |= SX1276_MC1_BW_500;
 8005372:	79fb      	ldrb	r3, [r7, #7]
 8005374:	f063 036f 	orn	r3, r3, #111	@ 0x6f
 8005378:	71fb      	strb	r3, [r7, #7]
		break;
 800537a:	e001      	b.n	8005380 <configLoraModem+0x60>
	default:
		ASSERT(0);
 800537c:	f7fc fa64 	bl	8001848 <hal_failed>
	}
	switch (getCr(LMIC.rps)) {
 8005380:	4b3d      	ldr	r3, [pc, #244]	@ (8005478 <configLoraModem+0x158>)
 8005382:	89db      	ldrh	r3, [r3, #14]
 8005384:	4618      	mov	r0, r3
 8005386:	f7fc fb21 	bl	80019cc <getCr>
 800538a:	4603      	mov	r3, r0
 800538c:	2b03      	cmp	r3, #3
 800538e:	d81f      	bhi.n	80053d0 <configLoraModem+0xb0>
 8005390:	a201      	add	r2, pc, #4	@ (adr r2, 8005398 <configLoraModem+0x78>)
 8005392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005396:	bf00      	nop
 8005398:	080053a9 	.word	0x080053a9
 800539c:	080053b3 	.word	0x080053b3
 80053a0:	080053bd 	.word	0x080053bd
 80053a4:	080053c7 	.word	0x080053c7
	case CR_4_5:
		mc1 |= SX1276_MC1_CR_4_5;
 80053a8:	79fb      	ldrb	r3, [r7, #7]
 80053aa:	f043 0302 	orr.w	r3, r3, #2
 80053ae:	71fb      	strb	r3, [r7, #7]
		break;
 80053b0:	e010      	b.n	80053d4 <configLoraModem+0xb4>
	case CR_4_6:
		mc1 |= SX1276_MC1_CR_4_6;
 80053b2:	79fb      	ldrb	r3, [r7, #7]
 80053b4:	f043 0304 	orr.w	r3, r3, #4
 80053b8:	71fb      	strb	r3, [r7, #7]
		break;
 80053ba:	e00b      	b.n	80053d4 <configLoraModem+0xb4>
	case CR_4_7:
		mc1 |= SX1276_MC1_CR_4_7;
 80053bc:	79fb      	ldrb	r3, [r7, #7]
 80053be:	f043 0306 	orr.w	r3, r3, #6
 80053c2:	71fb      	strb	r3, [r7, #7]
		break;
 80053c4:	e006      	b.n	80053d4 <configLoraModem+0xb4>
	case CR_4_8:
		mc1 |= SX1276_MC1_CR_4_8;
 80053c6:	79fb      	ldrb	r3, [r7, #7]
 80053c8:	f043 0308 	orr.w	r3, r3, #8
 80053cc:	71fb      	strb	r3, [r7, #7]
		break;
 80053ce:	e001      	b.n	80053d4 <configLoraModem+0xb4>
	default:
		ASSERT(0);
 80053d0:	f7fc fa3a 	bl	8001848 <hal_failed>
	}

	if (getIh(LMIC.rps)) {
 80053d4:	4b28      	ldr	r3, [pc, #160]	@ (8005478 <configLoraModem+0x158>)
 80053d6:	89db      	ldrh	r3, [r3, #14]
 80053d8:	4618      	mov	r0, r3
 80053da:	f7fc fb49 	bl	8001a70 <getIh>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00e      	beq.n	8005402 <configLoraModem+0xe2>
		mc1 |= SX1276_MC1_IMPLICIT_HEADER_MODE_ON;
 80053e4:	79fb      	ldrb	r3, [r7, #7]
 80053e6:	f043 0301 	orr.w	r3, r3, #1
 80053ea:	71fb      	strb	r3, [r7, #7]
		writeReg(LORARegPayloadLength, getIh(LMIC.rps)); // required length
 80053ec:	4b22      	ldr	r3, [pc, #136]	@ (8005478 <configLoraModem+0x158>)
 80053ee:	89db      	ldrh	r3, [r3, #14]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7fc fb3d 	bl	8001a70 <getIh>
 80053f6:	4603      	mov	r3, r0
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	4619      	mov	r1, r3
 80053fc:	2022      	movs	r0, #34	@ 0x22
 80053fe:	f7ff fec3 	bl	8005188 <writeReg>
	}
	// set ModemConfig1
	writeReg(LORARegModemConfig1, mc1);
 8005402:	79fb      	ldrb	r3, [r7, #7]
 8005404:	4619      	mov	r1, r3
 8005406:	201d      	movs	r0, #29
 8005408:	f7ff febe 	bl	8005188 <writeReg>

	mc2 = (SX1272_MC2_SF7 + ((sf - 1) << 4));
 800540c:	793b      	ldrb	r3, [r7, #4]
 800540e:	3b01      	subs	r3, #1
 8005410:	b2db      	uxtb	r3, r3
 8005412:	011b      	lsls	r3, r3, #4
 8005414:	b2db      	uxtb	r3, r3
 8005416:	3370      	adds	r3, #112	@ 0x70
 8005418:	71bb      	strb	r3, [r7, #6]
	if (getNocrc(LMIC.rps) == 0) {
 800541a:	4b17      	ldr	r3, [pc, #92]	@ (8005478 <configLoraModem+0x158>)
 800541c:	89db      	ldrh	r3, [r3, #14]
 800541e:	4618      	mov	r0, r3
 8005420:	f7fc faff 	bl	8001a22 <getNocrc>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d103      	bne.n	8005432 <configLoraModem+0x112>
		mc2 |= SX1276_MC2_RX_PAYLOAD_CRCON;
 800542a:	79bb      	ldrb	r3, [r7, #6]
 800542c:	f043 0304 	orr.w	r3, r3, #4
 8005430:	71bb      	strb	r3, [r7, #6]
	}
	writeReg(LORARegModemConfig2, mc2);
 8005432:	79bb      	ldrb	r3, [r7, #6]
 8005434:	4619      	mov	r1, r3
 8005436:	201e      	movs	r0, #30
 8005438:	f7ff fea6 	bl	8005188 <writeReg>

	mc3 = SX1276_MC3_AGCAUTO;
 800543c:	2304      	movs	r3, #4
 800543e:	717b      	strb	r3, [r7, #5]
	if ((sf == SF11 || sf == SF12) && getBw(LMIC.rps) == BW125) {
 8005440:	793b      	ldrb	r3, [r7, #4]
 8005442:	2b05      	cmp	r3, #5
 8005444:	d002      	beq.n	800544c <configLoraModem+0x12c>
 8005446:	793b      	ldrb	r3, [r7, #4]
 8005448:	2b06      	cmp	r3, #6
 800544a:	d10b      	bne.n	8005464 <configLoraModem+0x144>
 800544c:	4b0a      	ldr	r3, [pc, #40]	@ (8005478 <configLoraModem+0x158>)
 800544e:	89db      	ldrh	r3, [r3, #14]
 8005450:	4618      	mov	r0, r3
 8005452:	f7fc faa9 	bl	80019a8 <getBw>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d103      	bne.n	8005464 <configLoraModem+0x144>
		mc3 |= SX1276_MC3_LOW_DATA_RATE_OPTIMIZE;
 800545c:	797b      	ldrb	r3, [r7, #5]
 800545e:	f043 0308 	orr.w	r3, r3, #8
 8005462:	717b      	strb	r3, [r7, #5]
	}
	writeReg(LORARegModemConfig3, mc3);
 8005464:	797b      	ldrb	r3, [r7, #5]
 8005466:	4619      	mov	r1, r3
 8005468:	2026      	movs	r0, #38	@ 0x26
 800546a:	f7ff fe8d 	bl	8005188 <writeReg>
#endif

#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 800546e:	bf00      	nop
 8005470:	3708      	adds	r7, #8
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	200001f0 	.word	0x200001f0

0800547c <configChannel>:

static void configChannel()
{
 800547c:	b5b0      	push	{r4, r5, r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
	// set frequency: FQ = (FRF * 32 Mhz) / (2 ^ 19)
	u8_t frf = ((u8_t) LMIC.freq << 19) / 32000000;
 8005482:	4c1b      	ldr	r4, [pc, #108]	@ (80054f0 <configChannel+0x74>)
 8005484:	68a4      	ldr	r4, [r4, #8]
 8005486:	2500      	movs	r5, #0
 8005488:	4622      	mov	r2, r4
 800548a:	462b      	mov	r3, r5
 800548c:	0b51      	lsrs	r1, r2, #13
 800548e:	04d0      	lsls	r0, r2, #19
 8005490:	4a18      	ldr	r2, [pc, #96]	@ (80054f4 <configChannel+0x78>)
 8005492:	f04f 0300 	mov.w	r3, #0
 8005496:	f7fa fee9 	bl	800026c <__aeabi_uldivmod>
 800549a:	4602      	mov	r2, r0
 800549c:	460b      	mov	r3, r1
 800549e:	e9c7 2300 	strd	r2, r3, [r7]
	writeReg(RegFrfMsb, (u1_t) (frf >> 16));
 80054a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054a6:	f04f 0200 	mov.w	r2, #0
 80054aa:	f04f 0300 	mov.w	r3, #0
 80054ae:	0c02      	lsrs	r2, r0, #16
 80054b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80054b4:	0c0b      	lsrs	r3, r1, #16
 80054b6:	b2d3      	uxtb	r3, r2
 80054b8:	4619      	mov	r1, r3
 80054ba:	2006      	movs	r0, #6
 80054bc:	f7ff fe64 	bl	8005188 <writeReg>
	writeReg(RegFrfMid, (u1_t) (frf >> 8));
 80054c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054c4:	f04f 0200 	mov.w	r2, #0
 80054c8:	f04f 0300 	mov.w	r3, #0
 80054cc:	0a02      	lsrs	r2, r0, #8
 80054ce:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80054d2:	0a0b      	lsrs	r3, r1, #8
 80054d4:	b2d3      	uxtb	r3, r2
 80054d6:	4619      	mov	r1, r3
 80054d8:	2007      	movs	r0, #7
 80054da:	f7ff fe55 	bl	8005188 <writeReg>
	writeReg(RegFrfLsb, (u1_t) (frf >> 0));
 80054de:	783b      	ldrb	r3, [r7, #0]
 80054e0:	4619      	mov	r1, r3
 80054e2:	2008      	movs	r0, #8
 80054e4:	f7ff fe50 	bl	8005188 <writeReg>
}
 80054e8:	bf00      	nop
 80054ea:	3708      	adds	r7, #8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bdb0      	pop	{r4, r5, r7, pc}
 80054f0:	200001f0 	.word	0x200001f0
 80054f4:	01e84800 	.word	0x01e84800

080054f8 <configPower>:

static void configPower()
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
#ifdef CFG_sx1276_radio
	// no boost used for now
	s1_t pw = (s1_t) LMIC.txpow;
 80054fe:	4b15      	ldr	r3, [pc, #84]	@ (8005554 <configPower+0x5c>)
 8005500:	7c9b      	ldrb	r3, [r3, #18]
 8005502:	71fb      	strb	r3, [r7, #7]
	if (pw >= 17) {
 8005504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005508:	2b10      	cmp	r3, #16
 800550a:	dd02      	ble.n	8005512 <configPower+0x1a>
		pw = 15;
 800550c:	230f      	movs	r3, #15
 800550e:	71fb      	strb	r3, [r7, #7]
 8005510:	e005      	b.n	800551e <configPower+0x26>
	} else if (pw < 2) {
 8005512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005516:	2b01      	cmp	r3, #1
 8005518:	dc01      	bgt.n	800551e <configPower+0x26>
		pw = 2;
 800551a:	2302      	movs	r3, #2
 800551c:	71fb      	strb	r3, [r7, #7]
	}
	// check board type for BOOST pin
	writeReg(RegPaConfig, (u1_t) (0x80 | (pw & 0xf)));
 800551e:	79fb      	ldrb	r3, [r7, #7]
 8005520:	f003 030f 	and.w	r3, r3, #15
 8005524:	b25b      	sxtb	r3, r3
 8005526:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800552a:	b25b      	sxtb	r3, r3
 800552c:	b2db      	uxtb	r3, r3
 800552e:	4619      	mov	r1, r3
 8005530:	2009      	movs	r0, #9
 8005532:	f7ff fe29 	bl	8005188 <writeReg>
	writeReg(RegPaDac, readReg(RegPaDac) | 0x4);
 8005536:	205a      	movs	r0, #90	@ 0x5a
 8005538:	f7ff fe43 	bl	80051c2 <readReg>
 800553c:	4603      	mov	r3, r0
 800553e:	f043 0304 	orr.w	r3, r3, #4
 8005542:	b2db      	uxtb	r3, r3
 8005544:	4619      	mov	r1, r3
 8005546:	205a      	movs	r0, #90	@ 0x5a
 8005548:	f7ff fe1e 	bl	8005188 <writeReg>
    }
    writeReg(RegPaConfig, (u1_t)(0x80|(pw-2)));
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 800554c:	bf00      	nop
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	200001f0 	.word	0x200001f0

08005558 <txfsk>:

static void txfsk()
{
 8005558:	b580      	push	{r7, lr}
 800555a:	af00      	add	r7, sp, #0
	// select FSK modem (from sleep mode)
	writeReg(RegOpMode, 0x10); // FSK, BT=0.5
 800555c:	2110      	movs	r1, #16
 800555e:	2001      	movs	r0, #1
 8005560:	f7ff fe12 	bl	8005188 <writeReg>
	ASSERT(readReg(RegOpMode) == 0x10);
 8005564:	2001      	movs	r0, #1
 8005566:	f7ff fe2c 	bl	80051c2 <readReg>
 800556a:	4603      	mov	r3, r0
 800556c:	2b10      	cmp	r3, #16
 800556e:	d001      	beq.n	8005574 <txfsk+0x1c>
 8005570:	f7fc f96a 	bl	8001848 <hal_failed>
	// enter standby mode (required for FIFO loading))
	opmode(OPMODE_STANDBY);
 8005574:	2001      	movs	r0, #1
 8005576:	f7ff fe95 	bl	80052a4 <opmode>
	// set bitrate
	writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 800557a:	2102      	movs	r1, #2
 800557c:	2002      	movs	r0, #2
 800557e:	f7ff fe03 	bl	8005188 <writeReg>
	writeReg(FSKRegBitrateLsb, 0x80);
 8005582:	2180      	movs	r1, #128	@ 0x80
 8005584:	2003      	movs	r0, #3
 8005586:	f7ff fdff 	bl	8005188 <writeReg>
	// set frequency deviation
	writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 800558a:	2101      	movs	r1, #1
 800558c:	2004      	movs	r0, #4
 800558e:	f7ff fdfb 	bl	8005188 <writeReg>
	writeReg(FSKRegFdevLsb, 0x99);
 8005592:	2199      	movs	r1, #153	@ 0x99
 8005594:	2005      	movs	r0, #5
 8005596:	f7ff fdf7 	bl	8005188 <writeReg>
	// frame and packet handler settings
	writeReg(FSKRegPreambleMsb, 0x00);
 800559a:	2100      	movs	r1, #0
 800559c:	2025      	movs	r0, #37	@ 0x25
 800559e:	f7ff fdf3 	bl	8005188 <writeReg>
	writeReg(FSKRegPreambleLsb, 0x05);
 80055a2:	2105      	movs	r1, #5
 80055a4:	2026      	movs	r0, #38	@ 0x26
 80055a6:	f7ff fdef 	bl	8005188 <writeReg>
	writeReg(FSKRegSyncConfig, 0x12);
 80055aa:	2112      	movs	r1, #18
 80055ac:	2027      	movs	r0, #39	@ 0x27
 80055ae:	f7ff fdeb 	bl	8005188 <writeReg>
	writeReg(FSKRegPacketConfig1, 0xD0);
 80055b2:	21d0      	movs	r1, #208	@ 0xd0
 80055b4:	2030      	movs	r0, #48	@ 0x30
 80055b6:	f7ff fde7 	bl	8005188 <writeReg>
	writeReg(FSKRegPacketConfig2, 0x40);
 80055ba:	2140      	movs	r1, #64	@ 0x40
 80055bc:	2031      	movs	r0, #49	@ 0x31
 80055be:	f7ff fde3 	bl	8005188 <writeReg>
	writeReg(FSKRegSyncValue1, 0xC1);
 80055c2:	21c1      	movs	r1, #193	@ 0xc1
 80055c4:	2028      	movs	r0, #40	@ 0x28
 80055c6:	f7ff fddf 	bl	8005188 <writeReg>
	writeReg(FSKRegSyncValue2, 0x94);
 80055ca:	2194      	movs	r1, #148	@ 0x94
 80055cc:	2029      	movs	r0, #41	@ 0x29
 80055ce:	f7ff fddb 	bl	8005188 <writeReg>
	writeReg(FSKRegSyncValue3, 0xC1);
 80055d2:	21c1      	movs	r1, #193	@ 0xc1
 80055d4:	202a      	movs	r0, #42	@ 0x2a
 80055d6:	f7ff fdd7 	bl	8005188 <writeReg>
	// configure frequency
	configChannel();
 80055da:	f7ff ff4f 	bl	800547c <configChannel>
	// configure output power
	configPower();
 80055de:	f7ff ff8b 	bl	80054f8 <configPower>

	// set the IRQ mapping DIO0=PacketSent DIO1=NOP DIO2=NOP
	writeReg(RegDioMapping1,
 80055e2:	2134      	movs	r1, #52	@ 0x34
 80055e4:	2040      	movs	r0, #64	@ 0x40
 80055e6:	f7ff fdcf 	bl	8005188 <writeReg>
			MAP_DIO0_FSK_READY | MAP_DIO1_FSK_NOP | MAP_DIO2_FSK_TXNOP);

	// initialize the payload size and address pointers    
	writeReg(FSKRegPayloadLength, LMIC.dataLen + 1); // (insert length byte into payload))
 80055ea:	4b10      	ldr	r3, [pc, #64]	@ (800562c <txfsk+0xd4>)
 80055ec:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80055f0:	3301      	adds	r3, #1
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	4619      	mov	r1, r3
 80055f6:	2032      	movs	r0, #50	@ 0x32
 80055f8:	f7ff fdc6 	bl	8005188 <writeReg>

	// download length byte and buffer to the radio FIFO
	writeReg(RegFifo, LMIC.dataLen);
 80055fc:	4b0b      	ldr	r3, [pc, #44]	@ (800562c <txfsk+0xd4>)
 80055fe:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8005602:	4619      	mov	r1, r3
 8005604:	2000      	movs	r0, #0
 8005606:	f7ff fdbf 	bl	8005188 <writeReg>
	writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 800560a:	4b08      	ldr	r3, [pc, #32]	@ (800562c <txfsk+0xd4>)
 800560c:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8005610:	461a      	mov	r2, r3
 8005612:	4907      	ldr	r1, [pc, #28]	@ (8005630 <txfsk+0xd8>)
 8005614:	2000      	movs	r0, #0
 8005616:	f7ff fdf0 	bl	80051fa <writeBuf>

	// enable antenna switch for TX
	hal_pin_rxtx(1);
 800561a:	2001      	movs	r0, #1
 800561c:	f7fb ff95 	bl	800154a <hal_pin_rxtx>

	// now we actually start the transmission
	opmode(OPMODE_TX);
 8005620:	2003      	movs	r0, #3
 8005622:	f7ff fe3f 	bl	80052a4 <opmode>
}
 8005626:	bf00      	nop
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	200001f0 	.word	0x200001f0
 8005630:	20000338 	.word	0x20000338

08005634 <txlora>:

static void txlora()
{
 8005634:	b580      	push	{r7, lr}
 8005636:	af00      	add	r7, sp, #0
	// select LoRa modem (from sleep mode)
	//writeReg(RegOpMode, OPMODE_LORA);
	opmodeLora();
 8005638:	f7ff fe4e 	bl	80052d8 <opmodeLora>
	ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 800563c:	2001      	movs	r0, #1
 800563e:	f7ff fdc0 	bl	80051c2 <readReg>
 8005642:	4603      	mov	r3, r0
 8005644:	b25b      	sxtb	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	db01      	blt.n	800564e <txlora+0x1a>
 800564a:	f7fc f8fd 	bl	8001848 <hal_failed>

	// enter standby mode (required for FIFO loading))
	opmode(OPMODE_STANDBY);
 800564e:	2001      	movs	r0, #1
 8005650:	f7ff fe28 	bl	80052a4 <opmode>
	// configure LoRa modem (cfg1, cfg2)
	configLoraModem();
 8005654:	f7ff fe64 	bl	8005320 <configLoraModem>
	// configure frequency
	configChannel();
 8005658:	f7ff ff10 	bl	800547c <configChannel>
	// configure output power
	writeReg(RegPaRamp, (readReg(RegPaRamp) & 0xF0) | 0x08); // set PA ramp-up time 50 uSec
 800565c:	200a      	movs	r0, #10
 800565e:	f7ff fdb0 	bl	80051c2 <readReg>
 8005662:	4603      	mov	r3, r0
 8005664:	b25b      	sxtb	r3, r3
 8005666:	f023 030f 	bic.w	r3, r3, #15
 800566a:	b25b      	sxtb	r3, r3
 800566c:	f043 0308 	orr.w	r3, r3, #8
 8005670:	b25b      	sxtb	r3, r3
 8005672:	b2db      	uxtb	r3, r3
 8005674:	4619      	mov	r1, r3
 8005676:	200a      	movs	r0, #10
 8005678:	f7ff fd86 	bl	8005188 <writeReg>
	configPower();
 800567c:	f7ff ff3c 	bl	80054f8 <configPower>
	// set sync word
	writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 8005680:	2134      	movs	r1, #52	@ 0x34
 8005682:	2039      	movs	r0, #57	@ 0x39
 8005684:	f7ff fd80 	bl	8005188 <writeReg>

	// set the IRQ mapping DIO0=TxDone DIO1=NOP DIO2=NOP
	writeReg(RegDioMapping1,
 8005688:	21f0      	movs	r1, #240	@ 0xf0
 800568a:	2040      	movs	r0, #64	@ 0x40
 800568c:	f7ff fd7c 	bl	8005188 <writeReg>
			MAP_DIO0_LORA_TXDONE | MAP_DIO1_LORA_NOP | MAP_DIO2_LORA_NOP);
	// clear all radio IRQ flags
	writeReg(LORARegIrqFlags, 0xFF);
 8005690:	21ff      	movs	r1, #255	@ 0xff
 8005692:	2012      	movs	r0, #18
 8005694:	f7ff fd78 	bl	8005188 <writeReg>
	// mask all IRQs but TxDone
	writeReg(LORARegIrqFlagsMask, ~IRQ_LORA_TXDONE_MASK);
 8005698:	21f7      	movs	r1, #247	@ 0xf7
 800569a:	2011      	movs	r0, #17
 800569c:	f7ff fd74 	bl	8005188 <writeReg>

	// initialize the payload size and address pointers    
	writeReg(LORARegFifoTxBaseAddr, 0x00);
 80056a0:	2100      	movs	r1, #0
 80056a2:	200e      	movs	r0, #14
 80056a4:	f7ff fd70 	bl	8005188 <writeReg>
	writeReg(LORARegFifoAddrPtr, 0x00);
 80056a8:	2100      	movs	r1, #0
 80056aa:	200d      	movs	r0, #13
 80056ac:	f7ff fd6c 	bl	8005188 <writeReg>
	writeReg(LORARegPayloadLength, LMIC.dataLen);
 80056b0:	4b0b      	ldr	r3, [pc, #44]	@ (80056e0 <txlora+0xac>)
 80056b2:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80056b6:	4619      	mov	r1, r3
 80056b8:	2022      	movs	r0, #34	@ 0x22
 80056ba:	f7ff fd65 	bl	8005188 <writeReg>

	// download buffer to the radio FIFO
	writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 80056be:	4b08      	ldr	r3, [pc, #32]	@ (80056e0 <txlora+0xac>)
 80056c0:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80056c4:	461a      	mov	r2, r3
 80056c6:	4907      	ldr	r1, [pc, #28]	@ (80056e4 <txlora+0xb0>)
 80056c8:	2000      	movs	r0, #0
 80056ca:	f7ff fd96 	bl	80051fa <writeBuf>

	// enable antenna switch for TX
	hal_pin_rxtx(1);
 80056ce:	2001      	movs	r0, #1
 80056d0:	f7fb ff3b 	bl	800154a <hal_pin_rxtx>

	// now we actually start the transmission
	opmode(OPMODE_TX);
 80056d4:	2003      	movs	r0, #3
 80056d6:	f7ff fde5 	bl	80052a4 <opmode>
}
 80056da:	bf00      	nop
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	200001f0 	.word	0x200001f0
 80056e4:	20000338 	.word	0x20000338

080056e8 <starttx>:

// start transmitter (buf=LMIC.frame, len=LMIC.dataLen)
static void starttx()
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
	ASSERT((readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP);
 80056ec:	2001      	movs	r0, #1
 80056ee:	f7ff fd68 	bl	80051c2 <readReg>
 80056f2:	4603      	mov	r3, r0
 80056f4:	f003 0307 	and.w	r3, r3, #7
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d001      	beq.n	8005700 <starttx+0x18>
 80056fc:	f7fc f8a4 	bl	8001848 <hal_failed>
	if (getSf(LMIC.rps) == FSK) { // FSK modem
 8005700:	4b07      	ldr	r3, [pc, #28]	@ (8005720 <starttx+0x38>)
 8005702:	89db      	ldrh	r3, [r3, #14]
 8005704:	4618      	mov	r0, r3
 8005706:	f7fc f93f 	bl	8001988 <getSf>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d102      	bne.n	8005716 <starttx+0x2e>
		txfsk();
 8005710:	f7ff ff22 	bl	8005558 <txfsk>
	} else { // LoRa modem
		txlora();
	}
	// the radio will go back to STANDBY mode as soon as the TX is finished
	// the corresponding IRQ will inform us about completion.
}
 8005714:	e001      	b.n	800571a <starttx+0x32>
		txlora();
 8005716:	f7ff ff8d 	bl	8005634 <txlora>
}
 800571a:	bf00      	nop
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	200001f0 	.word	0x200001f0

08005724 <rxlora>:
		| IRQ_LORA_RXTOUT_MASK, [RXMODE_SCAN] = IRQ_LORA_RXDONE_MASK,
		[RXMODE_RSSI] = 0x00, };

// start LoRa receiver (time=LMIC.rxtime, timeout=LMIC.rxsyms, result=LMIC.frame[LMIC.dataLen])
static void rxlora(u1_t rxmode)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	4603      	mov	r3, r0
 800572c:	71fb      	strb	r3, [r7, #7]
	// select LoRa modem (from sleep mode)
	opmodeLora();
 800572e:	f7ff fdd3 	bl	80052d8 <opmodeLora>
	ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 8005732:	2001      	movs	r0, #1
 8005734:	f7ff fd45 	bl	80051c2 <readReg>
 8005738:	4603      	mov	r3, r0
 800573a:	b25b      	sxtb	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	db01      	blt.n	8005744 <rxlora+0x20>
 8005740:	f7fc f882 	bl	8001848 <hal_failed>
	// enter standby mode (warm up))
	opmode(OPMODE_STANDBY);
 8005744:	2001      	movs	r0, #1
 8005746:	f7ff fdad 	bl	80052a4 <opmode>
	// don't use MAC settings at startup
	if (rxmode == RXMODE_RSSI) { // use fixed settings for rssi scan
 800574a:	79fb      	ldrb	r3, [r7, #7]
 800574c:	2b02      	cmp	r3, #2
 800574e:	d108      	bne.n	8005762 <rxlora+0x3e>
		writeReg(LORARegModemConfig1, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG1);
 8005750:	210a      	movs	r1, #10
 8005752:	201d      	movs	r0, #29
 8005754:	f7ff fd18 	bl	8005188 <writeReg>
		writeReg(LORARegModemConfig2, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG2);
 8005758:	2170      	movs	r1, #112	@ 0x70
 800575a:	201e      	movs	r0, #30
 800575c:	f7ff fd14 	bl	8005188 <writeReg>
 8005760:	e003      	b.n	800576a <rxlora+0x46>
	} else { // single or continuous rx mode
		// configure LoRa modem (cfg1, cfg2)
		configLoraModem();
 8005762:	f7ff fddd 	bl	8005320 <configLoraModem>
		// configure frequency
		configChannel();
 8005766:	f7ff fe89 	bl	800547c <configChannel>
	}
	// set LNA gain
	writeReg(RegLna, LNA_RX_GAIN);
 800576a:	2121      	movs	r1, #33	@ 0x21
 800576c:	200c      	movs	r0, #12
 800576e:	f7ff fd0b 	bl	8005188 <writeReg>
	// set max payload size
	writeReg(LORARegPayloadMaxLength, 64);
 8005772:	2140      	movs	r1, #64	@ 0x40
 8005774:	2023      	movs	r0, #35	@ 0x23
 8005776:	f7ff fd07 	bl	8005188 <writeReg>
	// use inverted I/Q signal (prevent mote-to-mote communication)

	// XXX: use flag to switch on/off inversion
	if (LMIC.noRXIQinversion) {
 800577a:	4b26      	ldr	r3, [pc, #152]	@ (8005814 <rxlora+0xf0>)
 800577c:	f893 31a8 	ldrb.w	r3, [r3, #424]	@ 0x1a8
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00b      	beq.n	800579c <rxlora+0x78>
		writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ) & ~(1 << 6));
 8005784:	2033      	movs	r0, #51	@ 0x33
 8005786:	f7ff fd1c 	bl	80051c2 <readReg>
 800578a:	4603      	mov	r3, r0
 800578c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005790:	b2db      	uxtb	r3, r3
 8005792:	4619      	mov	r1, r3
 8005794:	2033      	movs	r0, #51	@ 0x33
 8005796:	f7ff fcf7 	bl	8005188 <writeReg>
 800579a:	e00a      	b.n	80057b2 <rxlora+0x8e>
	} else {
		writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ) | (1 << 6));
 800579c:	2033      	movs	r0, #51	@ 0x33
 800579e:	f7ff fd10 	bl	80051c2 <readReg>
 80057a2:	4603      	mov	r3, r0
 80057a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	4619      	mov	r1, r3
 80057ac:	2033      	movs	r0, #51	@ 0x33
 80057ae:	f7ff fceb 	bl	8005188 <writeReg>
	}

	// set symbol timeout (for single rx)
	writeReg(LORARegSymbTimeoutLsb, LMIC.rxsyms);
 80057b2:	4b18      	ldr	r3, [pc, #96]	@ (8005814 <rxlora+0xf0>)
 80057b4:	7c1b      	ldrb	r3, [r3, #16]
 80057b6:	4619      	mov	r1, r3
 80057b8:	201f      	movs	r0, #31
 80057ba:	f7ff fce5 	bl	8005188 <writeReg>
	// set sync word
	writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 80057be:	2134      	movs	r1, #52	@ 0x34
 80057c0:	2039      	movs	r0, #57	@ 0x39
 80057c2:	f7ff fce1 	bl	8005188 <writeReg>

	// configure DIO mapping DIO0=RxDone DIO1=RxTout DIO2=NOP
	writeReg(RegDioMapping1,
 80057c6:	21c0      	movs	r1, #192	@ 0xc0
 80057c8:	2040      	movs	r0, #64	@ 0x40
 80057ca:	f7ff fcdd 	bl	8005188 <writeReg>
			MAP_DIO0_LORA_RXDONE | MAP_DIO1_LORA_RXTOUT | MAP_DIO2_LORA_NOP);
	// clear all radio IRQ flags
	writeReg(LORARegIrqFlags, 0xFF);
 80057ce:	21ff      	movs	r1, #255	@ 0xff
 80057d0:	2012      	movs	r0, #18
 80057d2:	f7ff fcd9 	bl	8005188 <writeReg>
	// enable required radio IRQs
	writeReg(LORARegIrqFlagsMask, ~rxlorairqmask[rxmode]);
 80057d6:	79fb      	ldrb	r3, [r7, #7]
 80057d8:	4a0f      	ldr	r2, [pc, #60]	@ (8005818 <rxlora+0xf4>)
 80057da:	5cd3      	ldrb	r3, [r2, r3]
 80057dc:	43db      	mvns	r3, r3
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	4619      	mov	r1, r3
 80057e2:	2011      	movs	r0, #17
 80057e4:	f7ff fcd0 	bl	8005188 <writeReg>

	// enable antenna switch for RX
	hal_pin_rxtx(0);
 80057e8:	2000      	movs	r0, #0
 80057ea:	f7fb feae 	bl	800154a <hal_pin_rxtx>

	// now instruct the radio to receive
	if (rxmode == RXMODE_SINGLE) { // single rx
 80057ee:	79fb      	ldrb	r3, [r7, #7]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d108      	bne.n	8005806 <rxlora+0xe2>
		hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 80057f4:	4b07      	ldr	r3, [pc, #28]	@ (8005814 <rxlora+0xf0>)
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7fb ff94 	bl	8001726 <hal_waitUntil>
		opmode(OPMODE_RX_SINGLE);
 80057fe:	2006      	movs	r0, #6
 8005800:	f7ff fd50 	bl	80052a4 <opmode>
	} else { // continous rx (scan or rssi)
		opmode(OPMODE_RX);
	}
}
 8005804:	e002      	b.n	800580c <rxlora+0xe8>
		opmode(OPMODE_RX);
 8005806:	2005      	movs	r0, #5
 8005808:	f7ff fd4c 	bl	80052a4 <opmode>
}
 800580c:	bf00      	nop
 800580e:	3708      	adds	r7, #8
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	200001f0 	.word	0x200001f0
 8005818:	0800c0e4 	.word	0x0800c0e4

0800581c <rxfsk>:

static void rxfsk(u1_t rxmode)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	4603      	mov	r3, r0
 8005824:	71fb      	strb	r3, [r7, #7]
	// only single rx (no continuous scanning, no noise sampling)
	ASSERT(rxmode == RXMODE_SINGLE);
 8005826:	79fb      	ldrb	r3, [r7, #7]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d001      	beq.n	8005830 <rxfsk+0x14>
 800582c:	f7fc f80c 	bl	8001848 <hal_failed>
	// select FSK modem (from sleep mode)
	//writeReg(RegOpMode, 0x00); // (not LoRa)
	opmodeFSK();
 8005830:	f7ff fd64 	bl	80052fc <opmodeFSK>
	ASSERT((readReg(RegOpMode) & OPMODE_LORA) == 0);
 8005834:	2001      	movs	r0, #1
 8005836:	f7ff fcc4 	bl	80051c2 <readReg>
 800583a:	4603      	mov	r3, r0
 800583c:	b25b      	sxtb	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	da01      	bge.n	8005846 <rxfsk+0x2a>
 8005842:	f7fc f801 	bl	8001848 <hal_failed>
	// enter standby mode (warm up))
	opmode(OPMODE_STANDBY);
 8005846:	2001      	movs	r0, #1
 8005848:	f7ff fd2c 	bl	80052a4 <opmode>
	// configure frequency
	configChannel();
 800584c:	f7ff fe16 	bl	800547c <configChannel>
	// set LNA gain
	//writeReg(RegLna, 0x20|0x03); // max gain, boost enable
	writeReg(RegLna, LNA_RX_GAIN);
 8005850:	2121      	movs	r1, #33	@ 0x21
 8005852:	200c      	movs	r0, #12
 8005854:	f7ff fc98 	bl	8005188 <writeReg>
	// configure receiver
	writeReg(FSKRegRxConfig, 0x1E); // AFC auto, AGC, trigger on preamble?!?
 8005858:	211e      	movs	r1, #30
 800585a:	200d      	movs	r0, #13
 800585c:	f7ff fc94 	bl	8005188 <writeReg>
	// set receiver bandwidth
	writeReg(FSKRegRxBw, 0x0B); // 50kHz SSb
 8005860:	210b      	movs	r1, #11
 8005862:	2012      	movs	r0, #18
 8005864:	f7ff fc90 	bl	8005188 <writeReg>
	// set AFC bandwidth
	writeReg(FSKRegAfcBw, 0x12); // 83.3kHz SSB
 8005868:	2112      	movs	r1, #18
 800586a:	2013      	movs	r0, #19
 800586c:	f7ff fc8c 	bl	8005188 <writeReg>
	// set preamble detection
	writeReg(FSKRegPreambleDetect, 0xAA); // enable, 2 bytes, 10 chip errors
 8005870:	21aa      	movs	r1, #170	@ 0xaa
 8005872:	201f      	movs	r0, #31
 8005874:	f7ff fc88 	bl	8005188 <writeReg>
	// set sync config
	writeReg(FSKRegSyncConfig, 0x12); // no auto restart, preamble 0xAA, enable, fill FIFO, 3 bytes sync
 8005878:	2112      	movs	r1, #18
 800587a:	2027      	movs	r0, #39	@ 0x27
 800587c:	f7ff fc84 	bl	8005188 <writeReg>
	// set packet config
	writeReg(FSKRegPacketConfig1, 0xD8); // var-length, whitening, crc, no auto-clear, no adr filter
 8005880:	21d8      	movs	r1, #216	@ 0xd8
 8005882:	2030      	movs	r0, #48	@ 0x30
 8005884:	f7ff fc80 	bl	8005188 <writeReg>
	writeReg(FSKRegPacketConfig2, 0x40); // packet mode
 8005888:	2140      	movs	r1, #64	@ 0x40
 800588a:	2031      	movs	r0, #49	@ 0x31
 800588c:	f7ff fc7c 	bl	8005188 <writeReg>
	// set sync value
	writeReg(FSKRegSyncValue1, 0xC1);
 8005890:	21c1      	movs	r1, #193	@ 0xc1
 8005892:	2028      	movs	r0, #40	@ 0x28
 8005894:	f7ff fc78 	bl	8005188 <writeReg>
	writeReg(FSKRegSyncValue2, 0x94);
 8005898:	2194      	movs	r1, #148	@ 0x94
 800589a:	2029      	movs	r0, #41	@ 0x29
 800589c:	f7ff fc74 	bl	8005188 <writeReg>
	writeReg(FSKRegSyncValue3, 0xC1);
 80058a0:	21c1      	movs	r1, #193	@ 0xc1
 80058a2:	202a      	movs	r0, #42	@ 0x2a
 80058a4:	f7ff fc70 	bl	8005188 <writeReg>
	// set preamble timeout
	writeReg(FSKRegRxTimeout2, 0xFF);    //(LMIC.rxsyms+1)/2);
 80058a8:	21ff      	movs	r1, #255	@ 0xff
 80058aa:	2021      	movs	r0, #33	@ 0x21
 80058ac:	f7ff fc6c 	bl	8005188 <writeReg>
	// set bitrate
	writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 80058b0:	2102      	movs	r1, #2
 80058b2:	2002      	movs	r0, #2
 80058b4:	f7ff fc68 	bl	8005188 <writeReg>
	writeReg(FSKRegBitrateLsb, 0x80);
 80058b8:	2180      	movs	r1, #128	@ 0x80
 80058ba:	2003      	movs	r0, #3
 80058bc:	f7ff fc64 	bl	8005188 <writeReg>
	// set frequency deviation
	writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 80058c0:	2101      	movs	r1, #1
 80058c2:	2004      	movs	r0, #4
 80058c4:	f7ff fc60 	bl	8005188 <writeReg>
	writeReg(FSKRegFdevLsb, 0x99);
 80058c8:	2199      	movs	r1, #153	@ 0x99
 80058ca:	2005      	movs	r0, #5
 80058cc:	f7ff fc5c 	bl	8005188 <writeReg>

	// configure DIO mapping DIO0=PayloadReady DIO1=NOP DIO2=TimeOut
	writeReg(RegDioMapping1,
 80058d0:	2138      	movs	r1, #56	@ 0x38
 80058d2:	2040      	movs	r0, #64	@ 0x40
 80058d4:	f7ff fc58 	bl	8005188 <writeReg>
			MAP_DIO0_FSK_READY | MAP_DIO1_FSK_NOP | MAP_DIO2_FSK_TIMEOUT);

	// enable antenna switch for RX
	hal_pin_rxtx(0);
 80058d8:	2000      	movs	r0, #0
 80058da:	f7fb fe36 	bl	800154a <hal_pin_rxtx>

	// now instruct the radio to receive
	hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 80058de:	4b06      	ldr	r3, [pc, #24]	@ (80058f8 <rxfsk+0xdc>)
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7fb ff1f 	bl	8001726 <hal_waitUntil>
	opmode(OPMODE_RX); // no single rx mode available in FSK
 80058e8:	2005      	movs	r0, #5
 80058ea:	f7ff fcdb 	bl	80052a4 <opmode>
}
 80058ee:	bf00      	nop
 80058f0:	3708      	adds	r7, #8
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	200001f0 	.word	0x200001f0

080058fc <startrx>:

static void startrx(u1_t rxmode)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	4603      	mov	r3, r0
 8005904:	71fb      	strb	r3, [r7, #7]
	ASSERT((readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP);
 8005906:	2001      	movs	r0, #1
 8005908:	f7ff fc5b 	bl	80051c2 <readReg>
 800590c:	4603      	mov	r3, r0
 800590e:	f003 0307 	and.w	r3, r3, #7
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <startrx+0x1e>
 8005916:	f7fb ff97 	bl	8001848 <hal_failed>
	if (getSf(LMIC.rps) == FSK) { // FSK modem
 800591a:	4b0a      	ldr	r3, [pc, #40]	@ (8005944 <startrx+0x48>)
 800591c:	89db      	ldrh	r3, [r3, #14]
 800591e:	4618      	mov	r0, r3
 8005920:	f7fc f832 	bl	8001988 <getSf>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d104      	bne.n	8005934 <startrx+0x38>
		rxfsk(rxmode);
 800592a:	79fb      	ldrb	r3, [r7, #7]
 800592c:	4618      	mov	r0, r3
 800592e:	f7ff ff75 	bl	800581c <rxfsk>
	} else { // LoRa modem
		rxlora(rxmode);
	}
	// the radio will go back to STANDBY mode as soon as the RX is finished
	// or timed out, and the corresponding IRQ will inform us about completion.
}
 8005932:	e003      	b.n	800593c <startrx+0x40>
		rxlora(rxmode);
 8005934:	79fb      	ldrb	r3, [r7, #7]
 8005936:	4618      	mov	r0, r3
 8005938:	f7ff fef4 	bl	8005724 <rxlora>
}
 800593c:	bf00      	nop
 800593e:	3708      	adds	r7, #8
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	200001f0 	.word	0x200001f0

08005948 <radio_init>:

// get random seed from wideband noise rssi
void radio_init()
{
 8005948:	b590      	push	{r4, r7, lr}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
	hal_disableIRQs();
 800594e:	f7fb ff39 	bl	80017c4 <hal_disableIRQs>

	// manually reset radio
#ifdef CFG_sx1276_radio
	hal_pin_rst(0); // drive RST pin low
 8005952:	2000      	movs	r0, #0
 8005954:	f7fb fe15 	bl	8001582 <hal_pin_rst>
#else
    hal_pin_rst(1); // drive RST pin high
#endif
	hal_waitUntil(os_getTime() + ms2osticks(1)); // wait >100us
 8005958:	f7ff fb40 	bl	8004fdc <os_getTime>
 800595c:	4603      	mov	r3, r0
 800595e:	3320      	adds	r3, #32
 8005960:	4618      	mov	r0, r3
 8005962:	f7fb fee0 	bl	8001726 <hal_waitUntil>
	hal_pin_rst(2); // configure RST pin floating!
 8005966:	2002      	movs	r0, #2
 8005968:	f7fb fe0b 	bl	8001582 <hal_pin_rst>
	hal_waitUntil(os_getTime() + ms2osticks(5)); // wait 5ms
 800596c:	f7ff fb36 	bl	8004fdc <os_getTime>
 8005970:	4603      	mov	r3, r0
 8005972:	33a0      	adds	r3, #160	@ 0xa0
 8005974:	4618      	mov	r0, r3
 8005976:	f7fb fed6 	bl	8001726 <hal_waitUntil>

	opmode(OPMODE_SLEEP);
 800597a:	2000      	movs	r0, #0
 800597c:	f7ff fc92 	bl	80052a4 <opmode>

	// some sanity checks, e.g., read version number
	u1_t v = readReg(RegVersion);
 8005980:	2042      	movs	r0, #66	@ 0x42
 8005982:	f7ff fc1e 	bl	80051c2 <readReg>
 8005986:	4603      	mov	r3, r0
 8005988:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
	ASSERT(v == 0x12);
 800598a:	79fb      	ldrb	r3, [r7, #7]
 800598c:	2b12      	cmp	r3, #18
 800598e:	d001      	beq.n	8005994 <radio_init+0x4c>
 8005990:	f7fb ff5a 	bl	8001848 <hal_failed>
    ASSERT(v == 0x22);
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif
	// seed 15-byte randomness via noise rssi
	rxlora(RXMODE_RSSI);
 8005994:	2002      	movs	r0, #2
 8005996:	f7ff fec5 	bl	8005724 <rxlora>
	while ((readReg(RegOpMode) & OPMODE_MASK) != OPMODE_RX)
 800599a:	bf00      	nop
 800599c:	2001      	movs	r0, #1
 800599e:	f7ff fc10 	bl	80051c2 <readReg>
 80059a2:	4603      	mov	r3, r0
 80059a4:	f003 0307 	and.w	r3, r3, #7
 80059a8:	2b05      	cmp	r3, #5
 80059aa:	d1f7      	bne.n	800599c <radio_init+0x54>
		; // continuous rx
	for (int i = 1; i < 16; i++) {
 80059ac:	2301      	movs	r3, #1
 80059ae:	60fb      	str	r3, [r7, #12]
 80059b0:	e02c      	b.n	8005a0c <radio_init+0xc4>
		for (int j = 0; j < 8; j++) {
 80059b2:	2300      	movs	r3, #0
 80059b4:	60bb      	str	r3, [r7, #8]
 80059b6:	e023      	b.n	8005a00 <radio_init+0xb8>
			u1_t b; // wait for two non-identical subsequent least-significant bits
			while ((b = readReg(LORARegRssiWideband) & 0x01)
 80059b8:	bf00      	nop
 80059ba:	202c      	movs	r0, #44	@ 0x2c
 80059bc:	f7ff fc01 	bl	80051c2 <readReg>
 80059c0:	4603      	mov	r3, r0
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	71bb      	strb	r3, [r7, #6]
 80059c8:	79bc      	ldrb	r4, [r7, #6]
					== (readReg(LORARegRssiWideband) & 0x01))
 80059ca:	202c      	movs	r0, #44	@ 0x2c
 80059cc:	f7ff fbf9 	bl	80051c2 <readReg>
 80059d0:	4603      	mov	r3, r0
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	429c      	cmp	r4, r3
 80059d8:	d0ef      	beq.n	80059ba <radio_init+0x72>
				;
			randbuf[i] = (randbuf[i] << 1) | b;
 80059da:	4a14      	ldr	r2, [pc, #80]	@ (8005a2c <radio_init+0xe4>)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4413      	add	r3, r2
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	005b      	lsls	r3, r3, #1
 80059e4:	b25a      	sxtb	r2, r3
 80059e6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	b25b      	sxtb	r3, r3
 80059ee:	b2d9      	uxtb	r1, r3
 80059f0:	4a0e      	ldr	r2, [pc, #56]	@ (8005a2c <radio_init+0xe4>)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	4413      	add	r3, r2
 80059f6:	460a      	mov	r2, r1
 80059f8:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++) {
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	3301      	adds	r3, #1
 80059fe:	60bb      	str	r3, [r7, #8]
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2b07      	cmp	r3, #7
 8005a04:	ddd8      	ble.n	80059b8 <radio_init+0x70>
	for (int i = 1; i < 16; i++) {
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	60fb      	str	r3, [r7, #12]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2b0f      	cmp	r3, #15
 8005a10:	ddcf      	ble.n	80059b2 <radio_init+0x6a>
		}
	}
	randbuf[0] = 16; // set initial index
 8005a12:	4b06      	ldr	r3, [pc, #24]	@ (8005a2c <radio_init+0xe4>)
 8005a14:	2210      	movs	r2, #16
 8005a16:	701a      	strb	r2, [r3, #0]
    // Launch Rx chain calibration for HF band 
    writeReg(FSKRegImageCal, (readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_MASK)|RF_IMAGECAL_IMAGECAL_START);
    while((readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_RUNNING) == RF_IMAGECAL_IMAGECAL_RUNNING) { ; }
#endif /* CFG_sx1276mb1_board */

	opmode(OPMODE_SLEEP);
 8005a18:	2000      	movs	r0, #0
 8005a1a:	f7ff fc43 	bl	80052a4 <opmode>

	hal_enableIRQs();
 8005a1e:	f7fb fee1 	bl	80017e4 <hal_enableIRQs>
}
 8005a22:	bf00      	nop
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd90      	pop	{r4, r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	200003c8 	.word	0x200003c8

08005a30 <radio_rand1>:

// return next random byte derived from seed buffer
// (buf[0] holds index of next byte to be returned)
u1_t radio_rand1()
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
	u1_t i = randbuf[0];
 8005a36:	4b10      	ldr	r3, [pc, #64]	@ (8005a78 <radio_rand1+0x48>)
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	71fb      	strb	r3, [r7, #7]
	ASSERT(i != 0);
 8005a3c:	79fb      	ldrb	r3, [r7, #7]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <radio_rand1+0x16>
 8005a42:	f7fb ff01 	bl	8001848 <hal_failed>
	if (i == 16) {
 8005a46:	79fb      	ldrb	r3, [r7, #7]
 8005a48:	2b10      	cmp	r3, #16
 8005a4a:	d106      	bne.n	8005a5a <radio_rand1+0x2a>
		os_aes(AES_ENC, randbuf, 16); // encrypt seed with any key
 8005a4c:	2210      	movs	r2, #16
 8005a4e:	490a      	ldr	r1, [pc, #40]	@ (8005a78 <radio_rand1+0x48>)
 8005a50:	2000      	movs	r0, #0
 8005a52:	f7fa fed1 	bl	80007f8 <os_aes>
		i = 0;
 8005a56:	2300      	movs	r3, #0
 8005a58:	71fb      	strb	r3, [r7, #7]
	}
	u1_t v = randbuf[i++];
 8005a5a:	79fb      	ldrb	r3, [r7, #7]
 8005a5c:	1c5a      	adds	r2, r3, #1
 8005a5e:	71fa      	strb	r2, [r7, #7]
 8005a60:	461a      	mov	r2, r3
 8005a62:	4b05      	ldr	r3, [pc, #20]	@ (8005a78 <radio_rand1+0x48>)
 8005a64:	5c9b      	ldrb	r3, [r3, r2]
 8005a66:	71bb      	strb	r3, [r7, #6]
	randbuf[0] = i;
 8005a68:	4a03      	ldr	r2, [pc, #12]	@ (8005a78 <radio_rand1+0x48>)
 8005a6a:	79fb      	ldrb	r3, [r7, #7]
 8005a6c:	7013      	strb	r3, [r2, #0]
	return v;
 8005a6e:	79bb      	ldrb	r3, [r7, #6]
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	200003c8 	.word	0x200003c8

08005a7c <radio_irq_handler>:
		};

// called by hal ext IRQ handler
// (radio goes to stanby mode after tx/rx operations)
void radio_irq_handler(u1_t dio)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	4603      	mov	r3, r0
 8005a84:	71fb      	strb	r3, [r7, #7]
    u1_t s = readReg(RegOpMode);
    u1_t c = readReg(LORARegModemConfig2);
    opmode(OPMODE_TX);
    return;
#else /* ! CFG_TxContinuousMode */
	ostime_t now = os_getTime();
 8005a86:	f7ff faa9 	bl	8004fdc <os_getTime>
 8005a8a:	60f8      	str	r0, [r7, #12]
	if ((readReg(RegOpMode) & OPMODE_LORA) != 0) { // LORA modem
 8005a8c:	2001      	movs	r0, #1
 8005a8e:	f7ff fb98 	bl	80051c2 <readReg>
 8005a92:	4603      	mov	r3, r0
 8005a94:	b25b      	sxtb	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	da74      	bge.n	8005b84 <radio_irq_handler+0x108>
		u1_t flags = readReg(LORARegIrqFlags);
 8005a9a:	2012      	movs	r0, #18
 8005a9c:	f7ff fb91 	bl	80051c2 <readReg>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	727b      	strb	r3, [r7, #9]
		if (flags & IRQ_LORA_TXDONE_MASK) {
 8005aa4:	7a7b      	ldrb	r3, [r7, #9]
 8005aa6:	f003 0308 	and.w	r3, r3, #8
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d004      	beq.n	8005ab8 <radio_irq_handler+0x3c>
			// save exact tx time
			LMIC.txend = now - us2osticks(43); // TXDONE FIXUP
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	4a59      	ldr	r2, [pc, #356]	@ (8005c18 <radio_irq_handler+0x19c>)
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	e05c      	b.n	8005b72 <radio_irq_handler+0xf6>
		} else if (flags & IRQ_LORA_RXDONE_MASK) {
 8005ab8:	7a7b      	ldrb	r3, [r7, #9]
 8005aba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d04f      	beq.n	8005b62 <radio_irq_handler+0xe6>
			// save exact rx time
			if (getBw(LMIC.rps) == BW125) {
 8005ac2:	4b55      	ldr	r3, [pc, #340]	@ (8005c18 <radio_irq_handler+0x19c>)
 8005ac4:	89db      	ldrh	r3, [r3, #14]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7fb ff6e 	bl	80019a8 <getBw>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d10d      	bne.n	8005aee <radio_irq_handler+0x72>
				now -= LORA_RXDONE_FIXUP[getSf(LMIC.rps)];
 8005ad2:	4b51      	ldr	r3, [pc, #324]	@ (8005c18 <radio_irq_handler+0x19c>)
 8005ad4:	89db      	ldrh	r3, [r3, #14]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7fb ff56 	bl	8001988 <getSf>
 8005adc:	4603      	mov	r3, r0
 8005ade:	461a      	mov	r2, r3
 8005ae0:	4b4e      	ldr	r3, [pc, #312]	@ (8005c1c <radio_irq_handler+0x1a0>)
 8005ae2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	1a9b      	subs	r3, r3, r2
 8005aec:	60fb      	str	r3, [r7, #12]
			}
			LMIC.rxtime = now;
 8005aee:	4a4a      	ldr	r2, [pc, #296]	@ (8005c18 <radio_irq_handler+0x19c>)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6053      	str	r3, [r2, #4]
			// read the PDU and inform the MAC that we received something
			LMIC.dataLen =
					(readReg(LORARegModemConfig1)
 8005af4:	201d      	movs	r0, #29
 8005af6:	f7ff fb64 	bl	80051c2 <readReg>
 8005afa:	4603      	mov	r3, r0
							& SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
 8005afc:	f003 0304 	and.w	r3, r3, #4
			LMIC.dataLen =
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d005      	beq.n	8005b10 <radio_irq_handler+0x94>
							readReg(LORARegPayloadLength) :
 8005b04:	2022      	movs	r0, #34	@ 0x22
 8005b06:	f7ff fb5c 	bl	80051c2 <readReg>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	e004      	b.n	8005b1a <radio_irq_handler+0x9e>
							readReg(LORARegRxNbBytes);
 8005b10:	2013      	movs	r0, #19
 8005b12:	f7ff fb56 	bl	80051c2 <readReg>
 8005b16:	4603      	mov	r3, r0
 8005b18:	461a      	mov	r2, r3
			LMIC.dataLen =
 8005b1a:	4b3f      	ldr	r3, [pc, #252]	@ (8005c18 <radio_irq_handler+0x19c>)
 8005b1c:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
			// set FIFO read address pointer
			writeReg(LORARegFifoAddrPtr, readReg(LORARegFifoRxCurrentAddr));
 8005b20:	2010      	movs	r0, #16
 8005b22:	f7ff fb4e 	bl	80051c2 <readReg>
 8005b26:	4603      	mov	r3, r0
 8005b28:	4619      	mov	r1, r3
 8005b2a:	200d      	movs	r0, #13
 8005b2c:	f7ff fb2c 	bl	8005188 <writeReg>
			// now read the FIFO
			readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8005b30:	4b39      	ldr	r3, [pc, #228]	@ (8005c18 <radio_irq_handler+0x19c>)
 8005b32:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8005b36:	461a      	mov	r2, r3
 8005b38:	4939      	ldr	r1, [pc, #228]	@ (8005c20 <radio_irq_handler+0x1a4>)
 8005b3a:	2000      	movs	r0, #0
 8005b3c:	f7ff fb87 	bl	800524e <readBuf>
			// read rx quality parameters
			LMIC.snr = readReg(LORARegPktSnrValue); // SNR [dB] * 4
 8005b40:	2019      	movs	r0, #25
 8005b42:	f7ff fb3e 	bl	80051c2 <readReg>
 8005b46:	4603      	mov	r3, r0
 8005b48:	b25a      	sxtb	r2, r3
 8005b4a:	4b33      	ldr	r3, [pc, #204]	@ (8005c18 <radio_irq_handler+0x19c>)
 8005b4c:	735a      	strb	r2, [r3, #13]
			LMIC.rssi = readReg(LORARegPktRssiValue) - 125 + 64; // RSSI [dBm] (-196...+63)
 8005b4e:	201a      	movs	r0, #26
 8005b50:	f7ff fb37 	bl	80051c2 <readReg>
 8005b54:	4603      	mov	r3, r0
 8005b56:	3b3d      	subs	r3, #61	@ 0x3d
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	b25a      	sxtb	r2, r3
 8005b5c:	4b2e      	ldr	r3, [pc, #184]	@ (8005c18 <radio_irq_handler+0x19c>)
 8005b5e:	731a      	strb	r2, [r3, #12]
 8005b60:	e007      	b.n	8005b72 <radio_irq_handler+0xf6>
		} else if (flags & IRQ_LORA_RXTOUT_MASK) {
 8005b62:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	da03      	bge.n	8005b72 <radio_irq_handler+0xf6>
			// indicate timeout
			LMIC.dataLen = 0;
 8005b6a:	4b2b      	ldr	r3, [pc, #172]	@ (8005c18 <radio_irq_handler+0x19c>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
		}
		// mask all radio IRQs
		writeReg(LORARegIrqFlagsMask, 0xFF);
 8005b72:	21ff      	movs	r1, #255	@ 0xff
 8005b74:	2011      	movs	r0, #17
 8005b76:	f7ff fb07 	bl	8005188 <writeReg>
		// clear radio IRQ flags
		writeReg(LORARegIrqFlags, 0xFF);
 8005b7a:	21ff      	movs	r1, #255	@ 0xff
 8005b7c:	2012      	movs	r0, #18
 8005b7e:	f7ff fb03 	bl	8005188 <writeReg>
 8005b82:	e03c      	b.n	8005bfe <radio_irq_handler+0x182>
	} else { // FSK modem
		u1_t flags1 = readReg(FSKRegIrqFlags1);
 8005b84:	203e      	movs	r0, #62	@ 0x3e
 8005b86:	f7ff fb1c 	bl	80051c2 <readReg>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	72fb      	strb	r3, [r7, #11]
		u1_t flags2 = readReg(FSKRegIrqFlags2);
 8005b8e:	203f      	movs	r0, #63	@ 0x3f
 8005b90:	f7ff fb17 	bl	80051c2 <readReg>
 8005b94:	4603      	mov	r3, r0
 8005b96:	72bb      	strb	r3, [r7, #10]
		if (flags2 & IRQ_FSK2_PACKETSENT_MASK) {
 8005b98:	7abb      	ldrb	r3, [r7, #10]
 8005b9a:	f003 0308 	and.w	r3, r3, #8
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <radio_irq_handler+0x12e>
			// save exact tx time
			LMIC.txend = now;
 8005ba2:	4a1d      	ldr	r2, [pc, #116]	@ (8005c18 <radio_irq_handler+0x19c>)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6013      	str	r3, [r2, #0]
 8005ba8:	e029      	b.n	8005bfe <radio_irq_handler+0x182>
		} else if (flags2 & IRQ_FSK2_PAYLOADREADY_MASK) {
 8005baa:	7abb      	ldrb	r3, [r7, #10]
 8005bac:	f003 0304 	and.w	r3, r3, #4
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d019      	beq.n	8005be8 <radio_irq_handler+0x16c>
			// save exact rx time
			LMIC.rxtime = now;
 8005bb4:	4a18      	ldr	r2, [pc, #96]	@ (8005c18 <radio_irq_handler+0x19c>)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6053      	str	r3, [r2, #4]
			// read the PDU and inform the MAC that we received something
			LMIC.dataLen = readReg(FSKRegPayloadLength);
 8005bba:	2032      	movs	r0, #50	@ 0x32
 8005bbc:	f7ff fb01 	bl	80051c2 <readReg>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	4b14      	ldr	r3, [pc, #80]	@ (8005c18 <radio_irq_handler+0x19c>)
 8005bc6:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
			// now read the FIFO
			readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8005bca:	4b13      	ldr	r3, [pc, #76]	@ (8005c18 <radio_irq_handler+0x19c>)
 8005bcc:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	4913      	ldr	r1, [pc, #76]	@ (8005c20 <radio_irq_handler+0x1a4>)
 8005bd4:	2000      	movs	r0, #0
 8005bd6:	f7ff fb3a 	bl	800524e <readBuf>
			// read rx quality parameters
			LMIC.snr = 0; // determine snr
 8005bda:	4b0f      	ldr	r3, [pc, #60]	@ (8005c18 <radio_irq_handler+0x19c>)
 8005bdc:	2200      	movs	r2, #0
 8005bde:	735a      	strb	r2, [r3, #13]
			LMIC.rssi = 0; // determine rssi
 8005be0:	4b0d      	ldr	r3, [pc, #52]	@ (8005c18 <radio_irq_handler+0x19c>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	731a      	strb	r2, [r3, #12]
 8005be6:	e00a      	b.n	8005bfe <radio_irq_handler+0x182>
		} else if (flags1 & IRQ_FSK1_TIMEOUT_MASK) {
 8005be8:	7afb      	ldrb	r3, [r7, #11]
 8005bea:	f003 0304 	and.w	r3, r3, #4
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d004      	beq.n	8005bfc <radio_irq_handler+0x180>
			// indicate timeout
			LMIC.dataLen = 0;
 8005bf2:	4b09      	ldr	r3, [pc, #36]	@ (8005c18 <radio_irq_handler+0x19c>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 8005bfa:	e000      	b.n	8005bfe <radio_irq_handler+0x182>
		} else {
			while (1)
 8005bfc:	e7fe      	b.n	8005bfc <radio_irq_handler+0x180>
				;
		}
	}
	// go from stanby to sleep
	opmode(OPMODE_SLEEP);
 8005bfe:	2000      	movs	r0, #0
 8005c00:	f7ff fb50 	bl	80052a4 <opmode>
	// run os job (use preset func ptr)
	os_setCallback(&LMIC.osjob, LMIC.osjob.func);
 8005c04:	4b04      	ldr	r3, [pc, #16]	@ (8005c18 <radio_irq_handler+0x19c>)
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	4619      	mov	r1, r3
 8005c0a:	4806      	ldr	r0, [pc, #24]	@ (8005c24 <radio_irq_handler+0x1a8>)
 8005c0c:	f7ff fa2a 	bl	8005064 <os_setCallback>
#endif /* ! CFG_TxContinuousMode */
}
 8005c10:	bf00      	nop
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	200001f0 	.word	0x200001f0
 8005c1c:	0800c0e8 	.word	0x0800c0e8
 8005c20:	20000338 	.word	0x20000338
 8005c24:	20000204 	.word	0x20000204

08005c28 <os_radio>:

void os_radio(u1_t mode)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	4603      	mov	r3, r0
 8005c30:	71fb      	strb	r3, [r7, #7]
	hal_disableIRQs();
 8005c32:	f7fb fdc7 	bl	80017c4 <hal_disableIRQs>
	switch (mode) {
 8005c36:	79fb      	ldrb	r3, [r7, #7]
 8005c38:	2b03      	cmp	r3, #3
 8005c3a:	d81a      	bhi.n	8005c72 <os_radio+0x4a>
 8005c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c44 <os_radio+0x1c>)
 8005c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c42:	bf00      	nop
 8005c44:	08005c55 	.word	0x08005c55
 8005c48:	08005c5d 	.word	0x08005c5d
 8005c4c:	08005c63 	.word	0x08005c63
 8005c50:	08005c6b 	.word	0x08005c6b
	case RADIO_RST:
		// put radio to sleep
		opmode(OPMODE_SLEEP);
 8005c54:	2000      	movs	r0, #0
 8005c56:	f7ff fb25 	bl	80052a4 <opmode>
		break;
 8005c5a:	e00a      	b.n	8005c72 <os_radio+0x4a>

	case RADIO_TX:
		// transmit frame now
		starttx(); // buf=LMIC.frame, len=LMIC.dataLen
 8005c5c:	f7ff fd44 	bl	80056e8 <starttx>
		break;
 8005c60:	e007      	b.n	8005c72 <os_radio+0x4a>

	case RADIO_RX:
		// receive frame now (exactly at rxtime)
		startrx(RXMODE_SINGLE); // buf=LMIC.frame, time=LMIC.rxtime, timeout=LMIC.rxsyms
 8005c62:	2000      	movs	r0, #0
 8005c64:	f7ff fe4a 	bl	80058fc <startrx>
		break;
 8005c68:	e003      	b.n	8005c72 <os_radio+0x4a>

	case RADIO_RXON:
		// start scanning for beacon now
		startrx(RXMODE_SCAN); // buf=LMIC.frame
 8005c6a:	2001      	movs	r0, #1
 8005c6c:	f7ff fe46 	bl	80058fc <startrx>
		break;
 8005c70:	bf00      	nop
	}
	hal_enableIRQs();
 8005c72:	f7fb fdb7 	bl	80017e4 <hal_enableIRQs>
}
 8005c76:	bf00      	nop
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop

08005c80 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8005c84:	4b1b      	ldr	r3, [pc, #108]	@ (8005cf4 <MX_SPI3_Init+0x74>)
 8005c86:	4a1c      	ldr	r2, [pc, #112]	@ (8005cf8 <MX_SPI3_Init+0x78>)
 8005c88:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8005c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8005cf4 <MX_SPI3_Init+0x74>)
 8005c8c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005c90:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8005c92:	4b18      	ldr	r3, [pc, #96]	@ (8005cf4 <MX_SPI3_Init+0x74>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8005c98:	4b16      	ldr	r3, [pc, #88]	@ (8005cf4 <MX_SPI3_Init+0x74>)
 8005c9a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005c9e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ca0:	4b14      	ldr	r3, [pc, #80]	@ (8005cf4 <MX_SPI3_Init+0x74>)
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005ca6:	4b13      	ldr	r3, [pc, #76]	@ (8005cf4 <MX_SPI3_Init+0x74>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005cac:	4b11      	ldr	r3, [pc, #68]	@ (8005cf4 <MX_SPI3_Init+0x74>)
 8005cae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cb2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8005cf4 <MX_SPI3_Init+0x74>)
 8005cb6:	2228      	movs	r2, #40	@ 0x28
 8005cb8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005cba:	4b0e      	ldr	r3, [pc, #56]	@ (8005cf4 <MX_SPI3_Init+0x74>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8005cf4 <MX_SPI3_Init+0x74>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8005cf4 <MX_SPI3_Init+0x74>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8005ccc:	4b09      	ldr	r3, [pc, #36]	@ (8005cf4 <MX_SPI3_Init+0x74>)
 8005cce:	2207      	movs	r2, #7
 8005cd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005cd2:	4b08      	ldr	r3, [pc, #32]	@ (8005cf4 <MX_SPI3_Init+0x74>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005cd8:	4b06      	ldr	r3, [pc, #24]	@ (8005cf4 <MX_SPI3_Init+0x74>)
 8005cda:	2208      	movs	r2, #8
 8005cdc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005cde:	4805      	ldr	r0, [pc, #20]	@ (8005cf4 <MX_SPI3_Init+0x74>)
 8005ce0:	f003 fb6a 	bl	80093b8 <HAL_SPI_Init>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8005cea:	f7ff f95f 	bl	8004fac <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8005cee:	bf00      	nop
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	200003d8 	.word	0x200003d8
 8005cf8:	40003c00 	.word	0x40003c00

08005cfc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b08a      	sub	sp, #40	@ 0x28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d04:	f107 0314 	add.w	r3, r7, #20
 8005d08:	2200      	movs	r2, #0
 8005d0a:	601a      	str	r2, [r3, #0]
 8005d0c:	605a      	str	r2, [r3, #4]
 8005d0e:	609a      	str	r2, [r3, #8]
 8005d10:	60da      	str	r2, [r3, #12]
 8005d12:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a17      	ldr	r2, [pc, #92]	@ (8005d78 <HAL_SPI_MspInit+0x7c>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d127      	bne.n	8005d6e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005d1e:	4b17      	ldr	r3, [pc, #92]	@ (8005d7c <HAL_SPI_MspInit+0x80>)
 8005d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d22:	4a16      	ldr	r2, [pc, #88]	@ (8005d7c <HAL_SPI_MspInit+0x80>)
 8005d24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d28:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d2a:	4b14      	ldr	r3, [pc, #80]	@ (8005d7c <HAL_SPI_MspInit+0x80>)
 8005d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d32:	613b      	str	r3, [r7, #16]
 8005d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d36:	4b11      	ldr	r3, [pc, #68]	@ (8005d7c <HAL_SPI_MspInit+0x80>)
 8005d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d3a:	4a10      	ldr	r2, [pc, #64]	@ (8005d7c <HAL_SPI_MspInit+0x80>)
 8005d3c:	f043 0302 	orr.w	r3, r3, #2
 8005d40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005d42:	4b0e      	ldr	r3, [pc, #56]	@ (8005d7c <HAL_SPI_MspInit+0x80>)
 8005d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	60fb      	str	r3, [r7, #12]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8005d4e:	2338      	movs	r3, #56	@ 0x38
 8005d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d52:	2302      	movs	r3, #2
 8005d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d56:	2300      	movs	r3, #0
 8005d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005d5e:	2306      	movs	r3, #6
 8005d60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d62:	f107 0314 	add.w	r3, r7, #20
 8005d66:	4619      	mov	r1, r3
 8005d68:	4805      	ldr	r0, [pc, #20]	@ (8005d80 <HAL_SPI_MspInit+0x84>)
 8005d6a:	f001 fed5 	bl	8007b18 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8005d6e:	bf00      	nop
 8005d70:	3728      	adds	r7, #40	@ 0x28
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	40003c00 	.word	0x40003c00
 8005d7c:	40021000 	.word	0x40021000
 8005d80:	48000400 	.word	0x48000400

08005d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8005dc8 <HAL_MspInit+0x44>)
 8005d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d8e:	4a0e      	ldr	r2, [pc, #56]	@ (8005dc8 <HAL_MspInit+0x44>)
 8005d90:	f043 0301 	orr.w	r3, r3, #1
 8005d94:	6613      	str	r3, [r2, #96]	@ 0x60
 8005d96:	4b0c      	ldr	r3, [pc, #48]	@ (8005dc8 <HAL_MspInit+0x44>)
 8005d98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	607b      	str	r3, [r7, #4]
 8005da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005da2:	4b09      	ldr	r3, [pc, #36]	@ (8005dc8 <HAL_MspInit+0x44>)
 8005da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005da6:	4a08      	ldr	r2, [pc, #32]	@ (8005dc8 <HAL_MspInit+0x44>)
 8005da8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dac:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dae:	4b06      	ldr	r3, [pc, #24]	@ (8005dc8 <HAL_MspInit+0x44>)
 8005db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005db6:	603b      	str	r3, [r7, #0]
 8005db8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005dba:	bf00      	nop
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	40021000 	.word	0x40021000

08005dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8005dd0:	bf00      	nop
 8005dd2:	e7fd      	b.n	8005dd0 <NMI_Handler+0x4>

08005dd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005dd8:	bf00      	nop
 8005dda:	e7fd      	b.n	8005dd8 <HardFault_Handler+0x4>

08005ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005de0:	bf00      	nop
 8005de2:	e7fd      	b.n	8005de0 <MemManage_Handler+0x4>

08005de4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005de4:	b480      	push	{r7}
 8005de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005de8:	bf00      	nop
 8005dea:	e7fd      	b.n	8005de8 <BusFault_Handler+0x4>

08005dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005dec:	b480      	push	{r7}
 8005dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005df0:	bf00      	nop
 8005df2:	e7fd      	b.n	8005df0 <UsageFault_Handler+0x4>

08005df4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005df4:	b480      	push	{r7}
 8005df6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005df8:	bf00      	nop
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005e02:	b480      	push	{r7}
 8005e04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005e06:	bf00      	nop
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005e10:	b480      	push	{r7}
 8005e12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005e14:	bf00      	nop
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005e22:	f000 f9f5 	bl	8006210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005e26:	bf00      	nop
 8005e28:	bd80      	pop	{r7, pc}
	...

08005e2c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005e30:	4802      	ldr	r0, [pc, #8]	@ (8005e3c <ADC1_IRQHandler+0x10>)
 8005e32:	f000 fe10 	bl	8006a56 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8005e36:	bf00      	nop
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	20000070 	.word	0x20000070

08005e40 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8005e44:	2040      	movs	r0, #64	@ 0x40
 8005e46:	f001 ffe9 	bl	8007e1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIO1_Pin);
 8005e4a:	2080      	movs	r0, #128	@ 0x80
 8005e4c:	f001 ffe6 	bl	8007e1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005e50:	bf00      	nop
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005e58:	4802      	ldr	r0, [pc, #8]	@ (8005e64 <TIM6_DAC_IRQHandler+0x10>)
 8005e5a:	f003 ff7f 	bl	8009d5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005e5e:	bf00      	nop
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	2000043c 	.word	0x2000043c

08005e68 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005e6c:	4802      	ldr	r0, [pc, #8]	@ (8005e78 <TIM7_IRQHandler+0x10>)
 8005e6e:	f003 ff75 	bl	8009d5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005e72:	bf00      	nop
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	20000488 	.word	0x20000488

08005e7c <SystemInit>:
 * @brief  Setup the microcontroller system.
 * @retval None
 */

void SystemInit(void)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 8005e80:	4b06      	ldr	r3, [pc, #24]	@ (8005e9c <SystemInit+0x20>)
 8005e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e86:	4a05      	ldr	r2, [pc, #20]	@ (8005e9c <SystemInit+0x20>)
 8005e88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005e8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8005e90:	bf00      	nop
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	e000ed00 	.word	0xe000ed00

08005ea0 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ea6:	1d3b      	adds	r3, r7, #4
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	605a      	str	r2, [r3, #4]
 8005eae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005eb0:	4b15      	ldr	r3, [pc, #84]	@ (8005f08 <MX_TIM6_Init+0x68>)
 8005eb2:	4a16      	ldr	r2, [pc, #88]	@ (8005f0c <MX_TIM6_Init+0x6c>)
 8005eb4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1222-1;
 8005eb6:	4b14      	ldr	r3, [pc, #80]	@ (8005f08 <MX_TIM6_Init+0x68>)
 8005eb8:	f240 42c5 	movw	r2, #1221	@ 0x4c5
 8005ebc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ebe:	4b12      	ldr	r3, [pc, #72]	@ (8005f08 <MX_TIM6_Init+0x68>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65521-1;
 8005ec4:	4b10      	ldr	r3, [pc, #64]	@ (8005f08 <MX_TIM6_Init+0x68>)
 8005ec6:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8005eca:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8005f08 <MX_TIM6_Init+0x68>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005ed2:	480d      	ldr	r0, [pc, #52]	@ (8005f08 <MX_TIM6_Init+0x68>)
 8005ed4:	f003 fe96 	bl	8009c04 <HAL_TIM_Base_Init>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8005ede:	f7ff f865 	bl	8004fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005eea:	1d3b      	adds	r3, r7, #4
 8005eec:	4619      	mov	r1, r3
 8005eee:	4806      	ldr	r0, [pc, #24]	@ (8005f08 <MX_TIM6_Init+0x68>)
 8005ef0:	f004 f8d4 	bl	800a09c <HAL_TIMEx_MasterConfigSynchronization>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d001      	beq.n	8005efe <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8005efa:	f7ff f857 	bl	8004fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005efe:	bf00      	nop
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	2000043c 	.word	0x2000043c
 8005f0c:	40001000 	.word	0x40001000

08005f10 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f16:	1d3b      	adds	r3, r7, #4
 8005f18:	2200      	movs	r2, #0
 8005f1a:	601a      	str	r2, [r3, #0]
 8005f1c:	605a      	str	r2, [r3, #4]
 8005f1e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005f20:	4b15      	ldr	r3, [pc, #84]	@ (8005f78 <MX_TIM7_Init+0x68>)
 8005f22:	4a16      	ldr	r2, [pc, #88]	@ (8005f7c <MX_TIM7_Init+0x6c>)
 8005f24:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2500-1;
 8005f26:	4b14      	ldr	r3, [pc, #80]	@ (8005f78 <MX_TIM7_Init+0x68>)
 8005f28:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8005f2c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f2e:	4b12      	ldr	r3, [pc, #72]	@ (8005f78 <MX_TIM7_Init+0x68>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8005f34:	4b10      	ldr	r3, [pc, #64]	@ (8005f78 <MX_TIM7_Init+0x68>)
 8005f36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005f3a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8005f78 <MX_TIM7_Init+0x68>)
 8005f3e:	2200      	movs	r2, #0
 8005f40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005f42:	480d      	ldr	r0, [pc, #52]	@ (8005f78 <MX_TIM7_Init+0x68>)
 8005f44:	f003 fe5e 	bl	8009c04 <HAL_TIM_Base_Init>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d001      	beq.n	8005f52 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8005f4e:	f7ff f82d 	bl	8004fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f52:	2300      	movs	r3, #0
 8005f54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f56:	2300      	movs	r3, #0
 8005f58:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005f5a:	1d3b      	adds	r3, r7, #4
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	4806      	ldr	r0, [pc, #24]	@ (8005f78 <MX_TIM7_Init+0x68>)
 8005f60:	f004 f89c 	bl	800a09c <HAL_TIMEx_MasterConfigSynchronization>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8005f6a:	f7ff f81f 	bl	8004fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005f6e:	bf00      	nop
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	20000488 	.word	0x20000488
 8005f7c:	40001400 	.word	0x40001400

08005f80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a1a      	ldr	r2, [pc, #104]	@ (8005ff8 <HAL_TIM_Base_MspInit+0x78>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d114      	bne.n	8005fbc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005f92:	4b1a      	ldr	r3, [pc, #104]	@ (8005ffc <HAL_TIM_Base_MspInit+0x7c>)
 8005f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f96:	4a19      	ldr	r2, [pc, #100]	@ (8005ffc <HAL_TIM_Base_MspInit+0x7c>)
 8005f98:	f043 0310 	orr.w	r3, r3, #16
 8005f9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f9e:	4b17      	ldr	r3, [pc, #92]	@ (8005ffc <HAL_TIM_Base_MspInit+0x7c>)
 8005fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fa2:	f003 0310 	and.w	r3, r3, #16
 8005fa6:	60fb      	str	r3, [r7, #12]
 8005fa8:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005faa:	2200      	movs	r2, #0
 8005fac:	2100      	movs	r1, #0
 8005fae:	2036      	movs	r0, #54	@ 0x36
 8005fb0:	f001 fd7b 	bl	8007aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005fb4:	2036      	movs	r0, #54	@ 0x36
 8005fb6:	f001 fd94 	bl	8007ae2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8005fba:	e018      	b.n	8005fee <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a0f      	ldr	r2, [pc, #60]	@ (8006000 <HAL_TIM_Base_MspInit+0x80>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d113      	bne.n	8005fee <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8005ffc <HAL_TIM_Base_MspInit+0x7c>)
 8005fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fca:	4a0c      	ldr	r2, [pc, #48]	@ (8005ffc <HAL_TIM_Base_MspInit+0x7c>)
 8005fcc:	f043 0320 	orr.w	r3, r3, #32
 8005fd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8005ffc <HAL_TIM_Base_MspInit+0x7c>)
 8005fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fd6:	f003 0320 	and.w	r3, r3, #32
 8005fda:	60bb      	str	r3, [r7, #8]
 8005fdc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005fde:	2200      	movs	r2, #0
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	2037      	movs	r0, #55	@ 0x37
 8005fe4:	f001 fd61 	bl	8007aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005fe8:	2037      	movs	r0, #55	@ 0x37
 8005fea:	f001 fd7a 	bl	8007ae2 <HAL_NVIC_EnableIRQ>
}
 8005fee:	bf00      	nop
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	40001000 	.word	0x40001000
 8005ffc:	40021000 	.word	0x40021000
 8006000:	40001400 	.word	0x40001400

08006004 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006008:	4b14      	ldr	r3, [pc, #80]	@ (800605c <MX_USART2_UART_Init+0x58>)
 800600a:	4a15      	ldr	r2, [pc, #84]	@ (8006060 <MX_USART2_UART_Init+0x5c>)
 800600c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800600e:	4b13      	ldr	r3, [pc, #76]	@ (800605c <MX_USART2_UART_Init+0x58>)
 8006010:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006014:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006016:	4b11      	ldr	r3, [pc, #68]	@ (800605c <MX_USART2_UART_Init+0x58>)
 8006018:	2200      	movs	r2, #0
 800601a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800601c:	4b0f      	ldr	r3, [pc, #60]	@ (800605c <MX_USART2_UART_Init+0x58>)
 800601e:	2200      	movs	r2, #0
 8006020:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006022:	4b0e      	ldr	r3, [pc, #56]	@ (800605c <MX_USART2_UART_Init+0x58>)
 8006024:	2200      	movs	r2, #0
 8006026:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006028:	4b0c      	ldr	r3, [pc, #48]	@ (800605c <MX_USART2_UART_Init+0x58>)
 800602a:	220c      	movs	r2, #12
 800602c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800602e:	4b0b      	ldr	r3, [pc, #44]	@ (800605c <MX_USART2_UART_Init+0x58>)
 8006030:	2200      	movs	r2, #0
 8006032:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006034:	4b09      	ldr	r3, [pc, #36]	@ (800605c <MX_USART2_UART_Init+0x58>)
 8006036:	2200      	movs	r2, #0
 8006038:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800603a:	4b08      	ldr	r3, [pc, #32]	@ (800605c <MX_USART2_UART_Init+0x58>)
 800603c:	2200      	movs	r2, #0
 800603e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006040:	4b06      	ldr	r3, [pc, #24]	@ (800605c <MX_USART2_UART_Init+0x58>)
 8006042:	2200      	movs	r2, #0
 8006044:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006046:	4805      	ldr	r0, [pc, #20]	@ (800605c <MX_USART2_UART_Init+0x58>)
 8006048:	f004 f8ac 	bl	800a1a4 <HAL_UART_Init>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8006052:	f7fe ffab 	bl	8004fac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006056:	bf00      	nop
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	200004d4 	.word	0x200004d4
 8006060:	40004400 	.word	0x40004400

08006064 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b09e      	sub	sp, #120	@ 0x78
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800606c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8006070:	2200      	movs	r2, #0
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	605a      	str	r2, [r3, #4]
 8006076:	609a      	str	r2, [r3, #8]
 8006078:	60da      	str	r2, [r3, #12]
 800607a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800607c:	f107 0310 	add.w	r3, r7, #16
 8006080:	2254      	movs	r2, #84	@ 0x54
 8006082:	2100      	movs	r1, #0
 8006084:	4618      	mov	r0, r3
 8006086:	f004 fdac 	bl	800abe2 <memset>
  if(uartHandle->Instance==USART2)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a1f      	ldr	r2, [pc, #124]	@ (800610c <HAL_UART_MspInit+0xa8>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d136      	bne.n	8006102 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006094:	2302      	movs	r3, #2
 8006096:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006098:	2300      	movs	r3, #0
 800609a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800609c:	f107 0310 	add.w	r3, r7, #16
 80060a0:	4618      	mov	r0, r3
 80060a2:	f002 fea1 	bl	8008de8 <HAL_RCCEx_PeriphCLKConfig>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80060ac:	f7fe ff7e 	bl	8004fac <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80060b0:	4b17      	ldr	r3, [pc, #92]	@ (8006110 <HAL_UART_MspInit+0xac>)
 80060b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060b4:	4a16      	ldr	r2, [pc, #88]	@ (8006110 <HAL_UART_MspInit+0xac>)
 80060b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80060bc:	4b14      	ldr	r3, [pc, #80]	@ (8006110 <HAL_UART_MspInit+0xac>)
 80060be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060c4:	60fb      	str	r3, [r7, #12]
 80060c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060c8:	4b11      	ldr	r3, [pc, #68]	@ (8006110 <HAL_UART_MspInit+0xac>)
 80060ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060cc:	4a10      	ldr	r2, [pc, #64]	@ (8006110 <HAL_UART_MspInit+0xac>)
 80060ce:	f043 0301 	orr.w	r3, r3, #1
 80060d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80060d4:	4b0e      	ldr	r3, [pc, #56]	@ (8006110 <HAL_UART_MspInit+0xac>)
 80060d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	60bb      	str	r3, [r7, #8]
 80060de:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80060e0:	230c      	movs	r3, #12
 80060e2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060e4:	2302      	movs	r3, #2
 80060e6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060e8:	2300      	movs	r3, #0
 80060ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060ec:	2303      	movs	r3, #3
 80060ee:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80060f0:	2307      	movs	r3, #7
 80060f2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060f4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80060f8:	4619      	mov	r1, r3
 80060fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80060fe:	f001 fd0b 	bl	8007b18 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006102:	bf00      	nop
 8006104:	3778      	adds	r7, #120	@ 0x78
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	40004400 	.word	0x40004400
 8006110:	40021000 	.word	0x40021000

08006114 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006114:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800614c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006118:	f7ff feb0 	bl	8005e7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800611c:	480c      	ldr	r0, [pc, #48]	@ (8006150 <LoopForever+0x6>)
  ldr r1, =_edata
 800611e:	490d      	ldr	r1, [pc, #52]	@ (8006154 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006120:	4a0d      	ldr	r2, [pc, #52]	@ (8006158 <LoopForever+0xe>)
  movs r3, #0
 8006122:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006124:	e002      	b.n	800612c <LoopCopyDataInit>

08006126 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006126:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006128:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800612a:	3304      	adds	r3, #4

0800612c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800612c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800612e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006130:	d3f9      	bcc.n	8006126 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006132:	4a0a      	ldr	r2, [pc, #40]	@ (800615c <LoopForever+0x12>)
  ldr r4, =_ebss
 8006134:	4c0a      	ldr	r4, [pc, #40]	@ (8006160 <LoopForever+0x16>)
  movs r3, #0
 8006136:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006138:	e001      	b.n	800613e <LoopFillZerobss>

0800613a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800613a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800613c:	3204      	adds	r2, #4

0800613e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800613e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006140:	d3fb      	bcc.n	800613a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006142:	f004 fd57 	bl	800abf4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006146:	f7fe fe5b 	bl	8004e00 <main>

0800614a <LoopForever>:

LoopForever:
    b LoopForever
 800614a:	e7fe      	b.n	800614a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800614c:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8006150:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006154:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8006158:	0800c150 	.word	0x0800c150
  ldr r2, =_sbss
 800615c:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8006160:	20000560 	.word	0x20000560

08006164 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006164:	e7fe      	b.n	8006164 <CAN1_RX0_IRQHandler>

08006166 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b082      	sub	sp, #8
 800616a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800616c:	2300      	movs	r3, #0
 800616e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006170:	2003      	movs	r0, #3
 8006172:	f001 fc8f 	bl	8007a94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006176:	200f      	movs	r0, #15
 8006178:	f000 f80e 	bl	8006198 <HAL_InitTick>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d002      	beq.n	8006188 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	71fb      	strb	r3, [r7, #7]
 8006186:	e001      	b.n	800618c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006188:	f7ff fdfc 	bl	8005d84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800618c:	79fb      	ldrb	r3, [r7, #7]
}
 800618e:	4618      	mov	r0, r3
 8006190:	3708      	adds	r7, #8
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
	...

08006198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80061a0:	2300      	movs	r3, #0
 80061a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80061a4:	4b17      	ldr	r3, [pc, #92]	@ (8006204 <HAL_InitTick+0x6c>)
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d023      	beq.n	80061f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80061ac:	4b16      	ldr	r3, [pc, #88]	@ (8006208 <HAL_InitTick+0x70>)
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	4b14      	ldr	r3, [pc, #80]	@ (8006204 <HAL_InitTick+0x6c>)
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	4619      	mov	r1, r3
 80061b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80061ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80061be:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c2:	4618      	mov	r0, r3
 80061c4:	f001 fc9b 	bl	8007afe <HAL_SYSTICK_Config>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d10f      	bne.n	80061ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2b0f      	cmp	r3, #15
 80061d2:	d809      	bhi.n	80061e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80061d4:	2200      	movs	r2, #0
 80061d6:	6879      	ldr	r1, [r7, #4]
 80061d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80061dc:	f001 fc65 	bl	8007aaa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80061e0:	4a0a      	ldr	r2, [pc, #40]	@ (800620c <HAL_InitTick+0x74>)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6013      	str	r3, [r2, #0]
 80061e6:	e007      	b.n	80061f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	73fb      	strb	r3, [r7, #15]
 80061ec:	e004      	b.n	80061f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	73fb      	strb	r3, [r7, #15]
 80061f2:	e001      	b.n	80061f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	20000050 	.word	0x20000050
 8006208:	20000048 	.word	0x20000048
 800620c:	2000004c 	.word	0x2000004c

08006210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006210:	b480      	push	{r7}
 8006212:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006214:	4b06      	ldr	r3, [pc, #24]	@ (8006230 <HAL_IncTick+0x20>)
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	461a      	mov	r2, r3
 800621a:	4b06      	ldr	r3, [pc, #24]	@ (8006234 <HAL_IncTick+0x24>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4413      	add	r3, r2
 8006220:	4a04      	ldr	r2, [pc, #16]	@ (8006234 <HAL_IncTick+0x24>)
 8006222:	6013      	str	r3, [r2, #0]
}
 8006224:	bf00      	nop
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	20000050 	.word	0x20000050
 8006234:	2000055c 	.word	0x2000055c

08006238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006238:	b480      	push	{r7}
 800623a:	af00      	add	r7, sp, #0
  return uwTick;
 800623c:	4b03      	ldr	r3, [pc, #12]	@ (800624c <HAL_GetTick+0x14>)
 800623e:	681b      	ldr	r3, [r3, #0]
}
 8006240:	4618      	mov	r0, r3
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	2000055c 	.word	0x2000055c

08006250 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	431a      	orrs	r2, r3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	609a      	str	r2, [r3, #8]
}
 800626a:	bf00      	nop
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006276:	b480      	push	{r7}
 8006278:	b083      	sub	sp, #12
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	431a      	orrs	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	609a      	str	r2, [r3, #8]
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b087      	sub	sp, #28
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
 80062c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	3360      	adds	r3, #96	@ 0x60
 80062ca:	461a      	mov	r2, r3
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	4b08      	ldr	r3, [pc, #32]	@ (80062fc <LL_ADC_SetOffset+0x44>)
 80062da:	4013      	ands	r3, r2
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	430a      	orrs	r2, r1
 80062e6:	4313      	orrs	r3, r2
 80062e8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80062f0:	bf00      	nop
 80062f2:	371c      	adds	r7, #28
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr
 80062fc:	03fff000 	.word	0x03fff000

08006300 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	3360      	adds	r3, #96	@ 0x60
 800630e:	461a      	mov	r2, r3
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4413      	add	r3, r2
 8006316:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8006320:	4618      	mov	r0, r3
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800632c:	b480      	push	{r7}
 800632e:	b087      	sub	sp, #28
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	3360      	adds	r3, #96	@ 0x60
 800633c:	461a      	mov	r2, r3
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4413      	add	r3, r2
 8006344:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	431a      	orrs	r2, r3
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006356:	bf00      	nop
 8006358:	371c      	adds	r7, #28
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006362:	b480      	push	{r7}
 8006364:	b083      	sub	sp, #12
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006376:	2301      	movs	r3, #1
 8006378:	e000      	b.n	800637c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006388:	b480      	push	{r7}
 800638a:	b087      	sub	sp, #28
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	3330      	adds	r3, #48	@ 0x30
 8006398:	461a      	mov	r2, r3
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	0a1b      	lsrs	r3, r3, #8
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	f003 030c 	and.w	r3, r3, #12
 80063a4:	4413      	add	r3, r2
 80063a6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	f003 031f 	and.w	r3, r3, #31
 80063b2:	211f      	movs	r1, #31
 80063b4:	fa01 f303 	lsl.w	r3, r1, r3
 80063b8:	43db      	mvns	r3, r3
 80063ba:	401a      	ands	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	0e9b      	lsrs	r3, r3, #26
 80063c0:	f003 011f 	and.w	r1, r3, #31
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	f003 031f 	and.w	r3, r3, #31
 80063ca:	fa01 f303 	lsl.w	r3, r1, r3
 80063ce:	431a      	orrs	r2, r3
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80063d4:	bf00      	nop
 80063d6:	371c      	adds	r7, #28
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063ec:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d101      	bne.n	80063f8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80063f4:	2301      	movs	r3, #1
 80063f6:	e000      	b.n	80063fa <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	370c      	adds	r7, #12
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006406:	b480      	push	{r7}
 8006408:	b087      	sub	sp, #28
 800640a:	af00      	add	r7, sp, #0
 800640c:	60f8      	str	r0, [r7, #12]
 800640e:	60b9      	str	r1, [r7, #8]
 8006410:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	3314      	adds	r3, #20
 8006416:	461a      	mov	r2, r3
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	0e5b      	lsrs	r3, r3, #25
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	f003 0304 	and.w	r3, r3, #4
 8006422:	4413      	add	r3, r2
 8006424:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	0d1b      	lsrs	r3, r3, #20
 800642e:	f003 031f 	and.w	r3, r3, #31
 8006432:	2107      	movs	r1, #7
 8006434:	fa01 f303 	lsl.w	r3, r1, r3
 8006438:	43db      	mvns	r3, r3
 800643a:	401a      	ands	r2, r3
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	0d1b      	lsrs	r3, r3, #20
 8006440:	f003 031f 	and.w	r3, r3, #31
 8006444:	6879      	ldr	r1, [r7, #4]
 8006446:	fa01 f303 	lsl.w	r3, r1, r3
 800644a:	431a      	orrs	r2, r3
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006450:	bf00      	nop
 8006452:	371c      	adds	r7, #28
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006474:	43db      	mvns	r3, r3
 8006476:	401a      	ands	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f003 0318 	and.w	r3, r3, #24
 800647e:	4908      	ldr	r1, [pc, #32]	@ (80064a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006480:	40d9      	lsrs	r1, r3
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	400b      	ands	r3, r1
 8006486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800648a:	431a      	orrs	r2, r3
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006492:	bf00      	nop
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	0007ffff 	.word	0x0007ffff

080064a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80064b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	6093      	str	r3, [r2, #8]
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80064d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064dc:	d101      	bne.n	80064e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80064de:	2301      	movs	r3, #1
 80064e0:	e000      	b.n	80064e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8006500:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006504:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006528:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800652c:	d101      	bne.n	8006532 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800652e:	2301      	movs	r3, #1
 8006530:	e000      	b.n	8006534 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006550:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006554:	f043 0201 	orr.w	r2, r3, #1
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006578:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800657c:	f043 0202 	orr.w	r2, r3, #2
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006584:	bf00      	nop
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	f003 0301 	and.w	r3, r3, #1
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d101      	bne.n	80065a8 <LL_ADC_IsEnabled+0x18>
 80065a4:	2301      	movs	r3, #1
 80065a6:	e000      	b.n	80065aa <LL_ADC_IsEnabled+0x1a>
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	370c      	adds	r7, #12
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b083      	sub	sp, #12
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f003 0302 	and.w	r3, r3, #2
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d101      	bne.n	80065ce <LL_ADC_IsDisableOngoing+0x18>
 80065ca:	2301      	movs	r3, #1
 80065cc:	e000      	b.n	80065d0 <LL_ADC_IsDisableOngoing+0x1a>
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80065ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80065f0:	f043 0204 	orr.w	r2, r3, #4
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80065f8:	bf00      	nop
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f003 0304 	and.w	r3, r3, #4
 8006614:	2b04      	cmp	r3, #4
 8006616:	d101      	bne.n	800661c <LL_ADC_REG_IsConversionOngoing+0x18>
 8006618:	2301      	movs	r3, #1
 800661a:	e000      	b.n	800661e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	370c      	adds	r7, #12
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800662a:	b480      	push	{r7}
 800662c:	b083      	sub	sp, #12
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f003 0308 	and.w	r3, r3, #8
 800663a:	2b08      	cmp	r3, #8
 800663c:	d101      	bne.n	8006642 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800663e:	2301      	movs	r3, #1
 8006640:	e000      	b.n	8006644 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b088      	sub	sp, #32
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006658:	2300      	movs	r3, #0
 800665a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800665c:	2300      	movs	r3, #0
 800665e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d101      	bne.n	800666a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e126      	b.n	80068b8 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006674:	2b00      	cmp	r3, #0
 8006676:	d109      	bne.n	800668c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f7f9 ffd3 	bl	8000624 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4618      	mov	r0, r3
 8006692:	f7ff ff19 	bl	80064c8 <LL_ADC_IsDeepPowerDownEnabled>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d004      	beq.n	80066a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7ff feff 	bl	80064a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7ff ff34 	bl	8006518 <LL_ADC_IsInternalRegulatorEnabled>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d115      	bne.n	80066e2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7ff ff18 	bl	80064f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80066c0:	4b7f      	ldr	r3, [pc, #508]	@ (80068c0 <HAL_ADC_Init+0x270>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	099b      	lsrs	r3, r3, #6
 80066c6:	4a7f      	ldr	r2, [pc, #508]	@ (80068c4 <HAL_ADC_Init+0x274>)
 80066c8:	fba2 2303 	umull	r2, r3, r2, r3
 80066cc:	099b      	lsrs	r3, r3, #6
 80066ce:	3301      	adds	r3, #1
 80066d0:	005b      	lsls	r3, r3, #1
 80066d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80066d4:	e002      	b.n	80066dc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	3b01      	subs	r3, #1
 80066da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1f9      	bne.n	80066d6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7ff ff16 	bl	8006518 <LL_ADC_IsInternalRegulatorEnabled>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d10d      	bne.n	800670e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066f6:	f043 0210 	orr.w	r2, r3, #16
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006702:	f043 0201 	orr.w	r2, r3, #1
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4618      	mov	r0, r3
 8006714:	f7ff ff76 	bl	8006604 <LL_ADC_REG_IsConversionOngoing>
 8006718:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800671e:	f003 0310 	and.w	r3, r3, #16
 8006722:	2b00      	cmp	r3, #0
 8006724:	f040 80bf 	bne.w	80068a6 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	2b00      	cmp	r3, #0
 800672c:	f040 80bb 	bne.w	80068a6 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006734:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8006738:	f043 0202 	orr.w	r2, r3, #2
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4618      	mov	r0, r3
 8006746:	f7ff ff23 	bl	8006590 <LL_ADC_IsEnabled>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10b      	bne.n	8006768 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006750:	485d      	ldr	r0, [pc, #372]	@ (80068c8 <HAL_ADC_Init+0x278>)
 8006752:	f7ff ff1d 	bl	8006590 <LL_ADC_IsEnabled>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d105      	bne.n	8006768 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	4619      	mov	r1, r3
 8006762:	485a      	ldr	r0, [pc, #360]	@ (80068cc <HAL_ADC_Init+0x27c>)
 8006764:	f7ff fd74 	bl	8006250 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	7e5b      	ldrb	r3, [r3, #25]
 800676c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006772:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8006778:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800677e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006786:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006788:	4313      	orrs	r3, r2
 800678a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d106      	bne.n	80067a4 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800679a:	3b01      	subs	r3, #1
 800679c:	045b      	lsls	r3, r3, #17
 800679e:	69ba      	ldr	r2, [r7, #24]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d009      	beq.n	80067c0 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80067ba:	69ba      	ldr	r2, [r7, #24]
 80067bc:	4313      	orrs	r3, r2
 80067be:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68da      	ldr	r2, [r3, #12]
 80067c6:	4b42      	ldr	r3, [pc, #264]	@ (80068d0 <HAL_ADC_Init+0x280>)
 80067c8:	4013      	ands	r3, r2
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	6812      	ldr	r2, [r2, #0]
 80067ce:	69b9      	ldr	r1, [r7, #24]
 80067d0:	430b      	orrs	r3, r1
 80067d2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4618      	mov	r0, r3
 80067da:	f7ff ff26 	bl	800662a <LL_ADC_INJ_IsConversionOngoing>
 80067de:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d13d      	bne.n	8006862 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d13a      	bne.n	8006862 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80067f0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80067f8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80067fa:	4313      	orrs	r3, r2
 80067fc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006808:	f023 0302 	bic.w	r3, r3, #2
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	6812      	ldr	r2, [r2, #0]
 8006810:	69b9      	ldr	r1, [r7, #24]
 8006812:	430b      	orrs	r3, r1
 8006814:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800681c:	2b01      	cmp	r3, #1
 800681e:	d118      	bne.n	8006852 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800682a:	f023 0304 	bic.w	r3, r3, #4
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006836:	4311      	orrs	r1, r2
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800683c:	4311      	orrs	r1, r2
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006842:	430a      	orrs	r2, r1
 8006844:	431a      	orrs	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f042 0201 	orr.w	r2, r2, #1
 800684e:	611a      	str	r2, [r3, #16]
 8006850:	e007      	b.n	8006862 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	691a      	ldr	r2, [r3, #16]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f022 0201 	bic.w	r2, r2, #1
 8006860:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d10c      	bne.n	8006884 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006870:	f023 010f 	bic.w	r1, r3, #15
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	1e5a      	subs	r2, r3, #1
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	430a      	orrs	r2, r1
 8006880:	631a      	str	r2, [r3, #48]	@ 0x30
 8006882:	e007      	b.n	8006894 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f022 020f 	bic.w	r2, r2, #15
 8006892:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006898:	f023 0303 	bic.w	r3, r3, #3
 800689c:	f043 0201 	orr.w	r2, r3, #1
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	655a      	str	r2, [r3, #84]	@ 0x54
 80068a4:	e007      	b.n	80068b6 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068aa:	f043 0210 	orr.w	r2, r3, #16
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80068b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3720      	adds	r7, #32
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	20000048 	.word	0x20000048
 80068c4:	053e2d63 	.word	0x053e2d63
 80068c8:	50040000 	.word	0x50040000
 80068cc:	50040300 	.word	0x50040300
 80068d0:	fff0c007 	.word	0xfff0c007

080068d4 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7ff fe8f 	bl	8006604 <LL_ADC_REG_IsConversionOngoing>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f040 80a0 	bne.w	8006a2e <HAL_ADC_Start_IT+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d101      	bne.n	80068fc <HAL_ADC_Start_IT+0x28>
 80068f8:	2302      	movs	r3, #2
 80068fa:	e09b      	b.n	8006a34 <HAL_ADC_Start_IT+0x160>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 fe51 	bl	80075ac <ADC_Enable>
 800690a:	4603      	mov	r3, r0
 800690c:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800690e:	7bfb      	ldrb	r3, [r7, #15]
 8006910:	2b00      	cmp	r3, #0
 8006912:	f040 8087 	bne.w	8006a24 <HAL_ADC_Start_IT+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800691a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800691e:	f023 0301 	bic.w	r3, r3, #1
 8006922:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800692e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d006      	beq.n	8006944 <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800693a:	f023 0206 	bic.w	r2, r3, #6
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	659a      	str	r2, [r3, #88]	@ 0x58
 8006942:	e002      	b.n	800694a <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	221c      	movs	r2, #28
 8006950:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	685a      	ldr	r2, [r3, #4]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f022 021c 	bic.w	r2, r2, #28
 8006968:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	2b08      	cmp	r3, #8
 8006970:	d108      	bne.n	8006984 <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	685a      	ldr	r2, [r3, #4]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f042 0208 	orr.w	r2, r2, #8
 8006980:	605a      	str	r2, [r3, #4]
          break;
 8006982:	e008      	b.n	8006996 <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	685a      	ldr	r2, [r3, #4]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f042 0204 	orr.w	r2, r2, #4
 8006992:	605a      	str	r2, [r3, #4]
          break;
 8006994:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800699a:	2b00      	cmp	r3, #0
 800699c:	d107      	bne.n	80069ae <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	685a      	ldr	r2, [r3, #4]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f042 0210 	orr.w	r2, r2, #16
 80069ac:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d02d      	beq.n	8006a18 <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069c0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80069c4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	695b      	ldr	r3, [r3, #20]
 80069d0:	2b08      	cmp	r3, #8
 80069d2:	d110      	bne.n	80069f6 <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	685a      	ldr	r2, [r3, #4]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f022 0220 	bic.w	r2, r2, #32
 80069e2:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685a      	ldr	r2, [r3, #4]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069f2:	605a      	str	r2, [r3, #4]
            break;
 80069f4:	e010      	b.n	8006a18 <HAL_ADC_Start_IT+0x144>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a04:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f042 0220 	orr.w	r2, r2, #32
 8006a14:	605a      	str	r2, [r3, #4]
            break;
 8006a16:	bf00      	nop
        }
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7ff fddd 	bl	80065dc <LL_ADC_REG_StartConversion>
 8006a22:	e006      	b.n	8006a32 <HAL_ADC_Start_IT+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006a2c:	e001      	b.n	8006a32 <HAL_ADC_Start_IT+0x15e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006a2e:	2302      	movs	r3, #2
 8006a30:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8006a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	370c      	adds	r7, #12
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b088      	sub	sp, #32
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8006a5e:	2300      	movs	r3, #0
 8006a60:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	f003 0302 	and.w	r3, r3, #2
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d017      	beq.n	8006aac <HAL_ADC_IRQHandler+0x56>
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d012      	beq.n	8006aac <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a8a:	f003 0310 	and.w	r3, r3, #16
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d105      	bne.n	8006a9e <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a96:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 ff1e 	bl	80078e0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2202      	movs	r2, #2
 8006aaa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	f003 0304 	and.w	r3, r3, #4
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d004      	beq.n	8006ac0 <HAL_ADC_IRQHandler+0x6a>
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	f003 0304 	and.w	r3, r3, #4
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d109      	bne.n	8006ad4 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d05e      	beq.n	8006b88 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	f003 0308 	and.w	r3, r3, #8
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d059      	beq.n	8006b88 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ad8:	f003 0310 	and.w	r3, r3, #16
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d105      	bne.n	8006aec <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ae4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7ff fc36 	bl	8006362 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d03e      	beq.n	8006b7a <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d135      	bne.n	8006b7a <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0308 	and.w	r3, r3, #8
 8006b18:	2b08      	cmp	r3, #8
 8006b1a:	d12e      	bne.n	8006b7a <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7ff fd6f 	bl	8006604 <LL_ADC_REG_IsConversionOngoing>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d11a      	bne.n	8006b62 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	685a      	ldr	r2, [r3, #4]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f022 020c 	bic.w	r2, r2, #12
 8006b3a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d112      	bne.n	8006b7a <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b58:	f043 0201 	orr.w	r2, r3, #1
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	655a      	str	r2, [r3, #84]	@ 0x54
 8006b60:	e00b      	b.n	8006b7a <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b66:	f043 0210 	orr.w	r2, r3, #16
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b72:	f043 0201 	orr.w	r2, r3, #1
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f7fe f9f2 	bl	8004f64 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	220c      	movs	r2, #12
 8006b86:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	f003 0320 	and.w	r3, r3, #32
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d004      	beq.n	8006b9c <HAL_ADC_IRQHandler+0x146>
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	f003 0320 	and.w	r3, r3, #32
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d109      	bne.n	8006bb0 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d072      	beq.n	8006c8c <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d06d      	beq.n	8006c8c <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bb4:	f003 0310 	and.w	r3, r3, #16
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d105      	bne.n	8006bc8 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bc0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7ff fc07 	bl	80063e0 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8006bd2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7ff fbc2 	bl	8006362 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006bde:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d047      	beq.n	8006c7e <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d007      	beq.n	8006c08 <HAL_ADC_IRQHandler+0x1b2>
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d03f      	beq.n	8006c7e <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d13a      	bne.n	8006c7e <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c12:	2b40      	cmp	r3, #64	@ 0x40
 8006c14:	d133      	bne.n	8006c7e <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d12e      	bne.n	8006c7e <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7ff fd00 	bl	800662a <LL_ADC_INJ_IsConversionOngoing>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d11a      	bne.n	8006c66 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685a      	ldr	r2, [r3, #4]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006c3e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c44:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d112      	bne.n	8006c7e <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c5c:	f043 0201 	orr.w	r2, r3, #1
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	655a      	str	r2, [r3, #84]	@ 0x54
 8006c64:	e00b      	b.n	8006c7e <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c6a:	f043 0210 	orr.w	r2, r3, #16
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c76:	f043 0201 	orr.w	r2, r3, #1
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fe06 	bl	8007890 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2260      	movs	r2, #96	@ 0x60
 8006c8a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d011      	beq.n	8006cba <HAL_ADC_IRQHandler+0x264>
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00c      	beq.n	8006cba <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ca4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f886 	bl	8006dbe <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2280      	movs	r2, #128	@ 0x80
 8006cb8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d012      	beq.n	8006cea <HAL_ADC_IRQHandler+0x294>
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00d      	beq.n	8006cea <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cd2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fdec 	bl	80078b8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006ce8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d012      	beq.n	8006d1a <HAL_ADC_IRQHandler+0x2c4>
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00d      	beq.n	8006d1a <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d02:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 fdde 	bl	80078cc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d18:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	f003 0310 	and.w	r3, r3, #16
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d02a      	beq.n	8006d7a <HAL_ADC_IRQHandler+0x324>
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	f003 0310 	and.w	r3, r3, #16
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d025      	beq.n	8006d7a <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d102      	bne.n	8006d3c <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8006d36:	2301      	movs	r3, #1
 8006d38:	61fb      	str	r3, [r7, #28]
 8006d3a:	e008      	b.n	8006d4e <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d001      	beq.n	8006d4e <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d10e      	bne.n	8006d72 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d58:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d64:	f043 0202 	orr.w	r2, r3, #2
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f830 	bl	8006dd2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2210      	movs	r2, #16
 8006d78:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d018      	beq.n	8006db6 <HAL_ADC_IRQHandler+0x360>
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d013      	beq.n	8006db6 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d92:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d9e:	f043 0208 	orr.w	r2, r3, #8
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006dae:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 fd77 	bl	80078a4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8006db6:	bf00      	nop
 8006db8:	3720      	adds	r7, #32
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b083      	sub	sp, #12
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006dc6:	bf00      	nop
 8006dc8:	370c      	adds	r7, #12
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr

08006dd2 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006dd2:	b480      	push	{r7}
 8006dd4:	b083      	sub	sp, #12
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006dda:	bf00      	nop
 8006ddc:	370c      	adds	r7, #12
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
	...

08006de8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b0b6      	sub	sp, #216	@ 0xd8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006df2:	2300      	movs	r3, #0
 8006df4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d101      	bne.n	8006e0a <HAL_ADC_ConfigChannel+0x22>
 8006e06:	2302      	movs	r3, #2
 8006e08:	e3bb      	b.n	8007582 <HAL_ADC_ConfigChannel+0x79a>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7ff fbf4 	bl	8006604 <LL_ADC_REG_IsConversionOngoing>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f040 83a0 	bne.w	8007564 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	2b05      	cmp	r3, #5
 8006e32:	d824      	bhi.n	8006e7e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	3b02      	subs	r3, #2
 8006e3a:	2b03      	cmp	r3, #3
 8006e3c:	d81b      	bhi.n	8006e76 <HAL_ADC_ConfigChannel+0x8e>
 8006e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e44 <HAL_ADC_ConfigChannel+0x5c>)
 8006e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e44:	08006e55 	.word	0x08006e55
 8006e48:	08006e5d 	.word	0x08006e5d
 8006e4c:	08006e65 	.word	0x08006e65
 8006e50:	08006e6d 	.word	0x08006e6d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8006e54:	230c      	movs	r3, #12
 8006e56:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8006e5a:	e010      	b.n	8006e7e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8006e5c:	2312      	movs	r3, #18
 8006e5e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8006e62:	e00c      	b.n	8006e7e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8006e64:	2318      	movs	r3, #24
 8006e66:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8006e6a:	e008      	b.n	8006e7e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8006e6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006e70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8006e74:	e003      	b.n	8006e7e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8006e76:	2306      	movs	r3, #6
 8006e78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8006e7c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6818      	ldr	r0, [r3, #0]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	461a      	mov	r2, r3
 8006e88:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8006e8c:	f7ff fa7c 	bl	8006388 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7ff fbb5 	bl	8006604 <LL_ADC_REG_IsConversionOngoing>
 8006e9a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7ff fbc1 	bl	800662a <LL_ADC_INJ_IsConversionOngoing>
 8006ea8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006eac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f040 81a4 	bne.w	80071fe <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006eb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f040 819f 	bne.w	80071fe <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6818      	ldr	r0, [r3, #0]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	6819      	ldr	r1, [r3, #0]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	f7ff fa9a 	bl	8006406 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	695a      	ldr	r2, [r3, #20]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	08db      	lsrs	r3, r3, #3
 8006ede:	f003 0303 	and.w	r3, r3, #3
 8006ee2:	005b      	lsls	r3, r3, #1
 8006ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	2b04      	cmp	r3, #4
 8006ef2:	d00a      	beq.n	8006f0a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6818      	ldr	r0, [r3, #0]
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	6919      	ldr	r1, [r3, #16]
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006f04:	f7ff f9d8 	bl	80062b8 <LL_ADC_SetOffset>
 8006f08:	e179      	b.n	80071fe <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2100      	movs	r1, #0
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7ff f9f5 	bl	8006300 <LL_ADC_GetOffsetChannel>
 8006f16:	4603      	mov	r3, r0
 8006f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10a      	bne.n	8006f36 <HAL_ADC_ConfigChannel+0x14e>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2100      	movs	r1, #0
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7ff f9ea 	bl	8006300 <LL_ADC_GetOffsetChannel>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	0e9b      	lsrs	r3, r3, #26
 8006f30:	f003 021f 	and.w	r2, r3, #31
 8006f34:	e01e      	b.n	8006f74 <HAL_ADC_ConfigChannel+0x18c>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7ff f9df 	bl	8006300 <LL_ADC_GetOffsetChannel>
 8006f42:	4603      	mov	r3, r0
 8006f44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f4c:	fa93 f3a3 	rbit	r3, r3
 8006f50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006f54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006f58:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006f5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d101      	bne.n	8006f68 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8006f64:	2320      	movs	r3, #32
 8006f66:	e004      	b.n	8006f72 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8006f68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006f6c:	fab3 f383 	clz	r3, r3
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d105      	bne.n	8006f8c <HAL_ADC_ConfigChannel+0x1a4>
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	0e9b      	lsrs	r3, r3, #26
 8006f86:	f003 031f 	and.w	r3, r3, #31
 8006f8a:	e018      	b.n	8006fbe <HAL_ADC_ConfigChannel+0x1d6>
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f98:	fa93 f3a3 	rbit	r3, r3
 8006f9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8006fa0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006fa4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8006fa8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d101      	bne.n	8006fb4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8006fb0:	2320      	movs	r3, #32
 8006fb2:	e004      	b.n	8006fbe <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8006fb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006fb8:	fab3 f383 	clz	r3, r3
 8006fbc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d106      	bne.n	8006fd0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	2100      	movs	r1, #0
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7ff f9ae 	bl	800632c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2101      	movs	r1, #1
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7ff f992 	bl	8006300 <LL_ADC_GetOffsetChannel>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10a      	bne.n	8006ffc <HAL_ADC_ConfigChannel+0x214>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2101      	movs	r1, #1
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7ff f987 	bl	8006300 <LL_ADC_GetOffsetChannel>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	0e9b      	lsrs	r3, r3, #26
 8006ff6:	f003 021f 	and.w	r2, r3, #31
 8006ffa:	e01e      	b.n	800703a <HAL_ADC_ConfigChannel+0x252>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2101      	movs	r1, #1
 8007002:	4618      	mov	r0, r3
 8007004:	f7ff f97c 	bl	8006300 <LL_ADC_GetOffsetChannel>
 8007008:	4603      	mov	r3, r0
 800700a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800700e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007012:	fa93 f3a3 	rbit	r3, r3
 8007016:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800701a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800701e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8007022:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007026:	2b00      	cmp	r3, #0
 8007028:	d101      	bne.n	800702e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800702a:	2320      	movs	r3, #32
 800702c:	e004      	b.n	8007038 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800702e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007032:	fab3 f383 	clz	r3, r3
 8007036:	b2db      	uxtb	r3, r3
 8007038:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007042:	2b00      	cmp	r3, #0
 8007044:	d105      	bne.n	8007052 <HAL_ADC_ConfigChannel+0x26a>
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	0e9b      	lsrs	r3, r3, #26
 800704c:	f003 031f 	and.w	r3, r3, #31
 8007050:	e018      	b.n	8007084 <HAL_ADC_ConfigChannel+0x29c>
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800705a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800705e:	fa93 f3a3 	rbit	r3, r3
 8007062:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8007066:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800706a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800706e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007072:	2b00      	cmp	r3, #0
 8007074:	d101      	bne.n	800707a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8007076:	2320      	movs	r3, #32
 8007078:	e004      	b.n	8007084 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800707a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800707e:	fab3 f383 	clz	r3, r3
 8007082:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007084:	429a      	cmp	r2, r3
 8007086:	d106      	bne.n	8007096 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2200      	movs	r2, #0
 800708e:	2101      	movs	r1, #1
 8007090:	4618      	mov	r0, r3
 8007092:	f7ff f94b 	bl	800632c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2102      	movs	r1, #2
 800709c:	4618      	mov	r0, r3
 800709e:	f7ff f92f 	bl	8006300 <LL_ADC_GetOffsetChannel>
 80070a2:	4603      	mov	r3, r0
 80070a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10a      	bne.n	80070c2 <HAL_ADC_ConfigChannel+0x2da>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2102      	movs	r1, #2
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7ff f924 	bl	8006300 <LL_ADC_GetOffsetChannel>
 80070b8:	4603      	mov	r3, r0
 80070ba:	0e9b      	lsrs	r3, r3, #26
 80070bc:	f003 021f 	and.w	r2, r3, #31
 80070c0:	e01e      	b.n	8007100 <HAL_ADC_ConfigChannel+0x318>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2102      	movs	r1, #2
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7ff f919 	bl	8006300 <LL_ADC_GetOffsetChannel>
 80070ce:	4603      	mov	r3, r0
 80070d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80070d8:	fa93 f3a3 	rbit	r3, r3
 80070dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80070e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80070e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80070e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d101      	bne.n	80070f4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80070f0:	2320      	movs	r3, #32
 80070f2:	e004      	b.n	80070fe <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80070f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070f8:	fab3 f383 	clz	r3, r3
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007108:	2b00      	cmp	r3, #0
 800710a:	d105      	bne.n	8007118 <HAL_ADC_ConfigChannel+0x330>
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	0e9b      	lsrs	r3, r3, #26
 8007112:	f003 031f 	and.w	r3, r3, #31
 8007116:	e014      	b.n	8007142 <HAL_ADC_ConfigChannel+0x35a>
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800711e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007120:	fa93 f3a3 	rbit	r3, r3
 8007124:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8007126:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007128:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800712c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007130:	2b00      	cmp	r3, #0
 8007132:	d101      	bne.n	8007138 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8007134:	2320      	movs	r3, #32
 8007136:	e004      	b.n	8007142 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8007138:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800713c:	fab3 f383 	clz	r3, r3
 8007140:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007142:	429a      	cmp	r2, r3
 8007144:	d106      	bne.n	8007154 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2200      	movs	r2, #0
 800714c:	2102      	movs	r1, #2
 800714e:	4618      	mov	r0, r3
 8007150:	f7ff f8ec 	bl	800632c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2103      	movs	r1, #3
 800715a:	4618      	mov	r0, r3
 800715c:	f7ff f8d0 	bl	8006300 <LL_ADC_GetOffsetChannel>
 8007160:	4603      	mov	r3, r0
 8007162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007166:	2b00      	cmp	r3, #0
 8007168:	d10a      	bne.n	8007180 <HAL_ADC_ConfigChannel+0x398>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2103      	movs	r1, #3
 8007170:	4618      	mov	r0, r3
 8007172:	f7ff f8c5 	bl	8006300 <LL_ADC_GetOffsetChannel>
 8007176:	4603      	mov	r3, r0
 8007178:	0e9b      	lsrs	r3, r3, #26
 800717a:	f003 021f 	and.w	r2, r3, #31
 800717e:	e017      	b.n	80071b0 <HAL_ADC_ConfigChannel+0x3c8>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2103      	movs	r1, #3
 8007186:	4618      	mov	r0, r3
 8007188:	f7ff f8ba 	bl	8006300 <LL_ADC_GetOffsetChannel>
 800718c:	4603      	mov	r3, r0
 800718e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007190:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007192:	fa93 f3a3 	rbit	r3, r3
 8007196:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8007198:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800719a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800719c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80071a2:	2320      	movs	r3, #32
 80071a4:	e003      	b.n	80071ae <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80071a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80071a8:	fab3 f383 	clz	r3, r3
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d105      	bne.n	80071c8 <HAL_ADC_ConfigChannel+0x3e0>
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	0e9b      	lsrs	r3, r3, #26
 80071c2:	f003 031f 	and.w	r3, r3, #31
 80071c6:	e011      	b.n	80071ec <HAL_ADC_ConfigChannel+0x404>
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071d0:	fa93 f3a3 	rbit	r3, r3
 80071d4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80071d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071d8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80071da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d101      	bne.n	80071e4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80071e0:	2320      	movs	r3, #32
 80071e2:	e003      	b.n	80071ec <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80071e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80071e6:	fab3 f383 	clz	r3, r3
 80071ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d106      	bne.n	80071fe <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2200      	movs	r2, #0
 80071f6:	2103      	movs	r1, #3
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7ff f897 	bl	800632c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4618      	mov	r0, r3
 8007204:	f7ff f9c4 	bl	8006590 <LL_ADC_IsEnabled>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	f040 8140 	bne.w	8007490 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6818      	ldr	r0, [r3, #0]
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	6819      	ldr	r1, [r3, #0]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	461a      	mov	r2, r3
 800721e:	f7ff f91d 	bl	800645c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	4a8f      	ldr	r2, [pc, #572]	@ (8007464 <HAL_ADC_ConfigChannel+0x67c>)
 8007228:	4293      	cmp	r3, r2
 800722a:	f040 8131 	bne.w	8007490 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800723a:	2b00      	cmp	r3, #0
 800723c:	d10b      	bne.n	8007256 <HAL_ADC_ConfigChannel+0x46e>
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	0e9b      	lsrs	r3, r3, #26
 8007244:	3301      	adds	r3, #1
 8007246:	f003 031f 	and.w	r3, r3, #31
 800724a:	2b09      	cmp	r3, #9
 800724c:	bf94      	ite	ls
 800724e:	2301      	movls	r3, #1
 8007250:	2300      	movhi	r3, #0
 8007252:	b2db      	uxtb	r3, r3
 8007254:	e019      	b.n	800728a <HAL_ADC_ConfigChannel+0x4a2>
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800725c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800725e:	fa93 f3a3 	rbit	r3, r3
 8007262:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8007264:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007266:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8007268:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800726a:	2b00      	cmp	r3, #0
 800726c:	d101      	bne.n	8007272 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800726e:	2320      	movs	r3, #32
 8007270:	e003      	b.n	800727a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8007272:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007274:	fab3 f383 	clz	r3, r3
 8007278:	b2db      	uxtb	r3, r3
 800727a:	3301      	adds	r3, #1
 800727c:	f003 031f 	and.w	r3, r3, #31
 8007280:	2b09      	cmp	r3, #9
 8007282:	bf94      	ite	ls
 8007284:	2301      	movls	r3, #1
 8007286:	2300      	movhi	r3, #0
 8007288:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800728a:	2b00      	cmp	r3, #0
 800728c:	d079      	beq.n	8007382 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007296:	2b00      	cmp	r3, #0
 8007298:	d107      	bne.n	80072aa <HAL_ADC_ConfigChannel+0x4c2>
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	0e9b      	lsrs	r3, r3, #26
 80072a0:	3301      	adds	r3, #1
 80072a2:	069b      	lsls	r3, r3, #26
 80072a4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80072a8:	e015      	b.n	80072d6 <HAL_ADC_ConfigChannel+0x4ee>
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072b2:	fa93 f3a3 	rbit	r3, r3
 80072b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80072b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072ba:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80072bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d101      	bne.n	80072c6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80072c2:	2320      	movs	r3, #32
 80072c4:	e003      	b.n	80072ce <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80072c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072c8:	fab3 f383 	clz	r3, r3
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	3301      	adds	r3, #1
 80072d0:	069b      	lsls	r3, r3, #26
 80072d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d109      	bne.n	80072f6 <HAL_ADC_ConfigChannel+0x50e>
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	0e9b      	lsrs	r3, r3, #26
 80072e8:	3301      	adds	r3, #1
 80072ea:	f003 031f 	and.w	r3, r3, #31
 80072ee:	2101      	movs	r1, #1
 80072f0:	fa01 f303 	lsl.w	r3, r1, r3
 80072f4:	e017      	b.n	8007326 <HAL_ADC_ConfigChannel+0x53e>
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072fe:	fa93 f3a3 	rbit	r3, r3
 8007302:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8007304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007306:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8007308:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800730e:	2320      	movs	r3, #32
 8007310:	e003      	b.n	800731a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8007312:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007314:	fab3 f383 	clz	r3, r3
 8007318:	b2db      	uxtb	r3, r3
 800731a:	3301      	adds	r3, #1
 800731c:	f003 031f 	and.w	r3, r3, #31
 8007320:	2101      	movs	r1, #1
 8007322:	fa01 f303 	lsl.w	r3, r1, r3
 8007326:	ea42 0103 	orr.w	r1, r2, r3
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007332:	2b00      	cmp	r3, #0
 8007334:	d10a      	bne.n	800734c <HAL_ADC_ConfigChannel+0x564>
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	0e9b      	lsrs	r3, r3, #26
 800733c:	3301      	adds	r3, #1
 800733e:	f003 021f 	and.w	r2, r3, #31
 8007342:	4613      	mov	r3, r2
 8007344:	005b      	lsls	r3, r3, #1
 8007346:	4413      	add	r3, r2
 8007348:	051b      	lsls	r3, r3, #20
 800734a:	e018      	b.n	800737e <HAL_ADC_ConfigChannel+0x596>
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007354:	fa93 f3a3 	rbit	r3, r3
 8007358:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800735a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800735c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800735e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007360:	2b00      	cmp	r3, #0
 8007362:	d101      	bne.n	8007368 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8007364:	2320      	movs	r3, #32
 8007366:	e003      	b.n	8007370 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8007368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800736a:	fab3 f383 	clz	r3, r3
 800736e:	b2db      	uxtb	r3, r3
 8007370:	3301      	adds	r3, #1
 8007372:	f003 021f 	and.w	r2, r3, #31
 8007376:	4613      	mov	r3, r2
 8007378:	005b      	lsls	r3, r3, #1
 800737a:	4413      	add	r3, r2
 800737c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800737e:	430b      	orrs	r3, r1
 8007380:	e081      	b.n	8007486 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800738a:	2b00      	cmp	r3, #0
 800738c:	d107      	bne.n	800739e <HAL_ADC_ConfigChannel+0x5b6>
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	0e9b      	lsrs	r3, r3, #26
 8007394:	3301      	adds	r3, #1
 8007396:	069b      	lsls	r3, r3, #26
 8007398:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800739c:	e015      	b.n	80073ca <HAL_ADC_ConfigChannel+0x5e2>
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a6:	fa93 f3a3 	rbit	r3, r3
 80073aa:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80073ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80073b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d101      	bne.n	80073ba <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80073b6:	2320      	movs	r3, #32
 80073b8:	e003      	b.n	80073c2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80073ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073bc:	fab3 f383 	clz	r3, r3
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	3301      	adds	r3, #1
 80073c4:	069b      	lsls	r3, r3, #26
 80073c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d109      	bne.n	80073ea <HAL_ADC_ConfigChannel+0x602>
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	0e9b      	lsrs	r3, r3, #26
 80073dc:	3301      	adds	r3, #1
 80073de:	f003 031f 	and.w	r3, r3, #31
 80073e2:	2101      	movs	r1, #1
 80073e4:	fa01 f303 	lsl.w	r3, r1, r3
 80073e8:	e017      	b.n	800741a <HAL_ADC_ConfigChannel+0x632>
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	fa93 f3a3 	rbit	r3, r3
 80073f6:	61bb      	str	r3, [r7, #24]
  return result;
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80073fc:	6a3b      	ldr	r3, [r7, #32]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8007402:	2320      	movs	r3, #32
 8007404:	e003      	b.n	800740e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8007406:	6a3b      	ldr	r3, [r7, #32]
 8007408:	fab3 f383 	clz	r3, r3
 800740c:	b2db      	uxtb	r3, r3
 800740e:	3301      	adds	r3, #1
 8007410:	f003 031f 	and.w	r3, r3, #31
 8007414:	2101      	movs	r1, #1
 8007416:	fa01 f303 	lsl.w	r3, r1, r3
 800741a:	ea42 0103 	orr.w	r1, r2, r3
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10d      	bne.n	8007446 <HAL_ADC_ConfigChannel+0x65e>
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	0e9b      	lsrs	r3, r3, #26
 8007430:	3301      	adds	r3, #1
 8007432:	f003 021f 	and.w	r2, r3, #31
 8007436:	4613      	mov	r3, r2
 8007438:	005b      	lsls	r3, r3, #1
 800743a:	4413      	add	r3, r2
 800743c:	3b1e      	subs	r3, #30
 800743e:	051b      	lsls	r3, r3, #20
 8007440:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007444:	e01e      	b.n	8007484 <HAL_ADC_ConfigChannel+0x69c>
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	fa93 f3a3 	rbit	r3, r3
 8007452:	60fb      	str	r3, [r7, #12]
  return result;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d104      	bne.n	8007468 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800745e:	2320      	movs	r3, #32
 8007460:	e006      	b.n	8007470 <HAL_ADC_ConfigChannel+0x688>
 8007462:	bf00      	nop
 8007464:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	fab3 f383 	clz	r3, r3
 800746e:	b2db      	uxtb	r3, r3
 8007470:	3301      	adds	r3, #1
 8007472:	f003 021f 	and.w	r2, r3, #31
 8007476:	4613      	mov	r3, r2
 8007478:	005b      	lsls	r3, r3, #1
 800747a:	4413      	add	r3, r2
 800747c:	3b1e      	subs	r3, #30
 800747e:	051b      	lsls	r3, r3, #20
 8007480:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007484:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8007486:	683a      	ldr	r2, [r7, #0]
 8007488:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800748a:	4619      	mov	r1, r3
 800748c:	f7fe ffbb 	bl	8006406 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	4b3d      	ldr	r3, [pc, #244]	@ (800758c <HAL_ADC_ConfigChannel+0x7a4>)
 8007496:	4013      	ands	r3, r2
 8007498:	2b00      	cmp	r3, #0
 800749a:	d06c      	beq.n	8007576 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800749c:	483c      	ldr	r0, [pc, #240]	@ (8007590 <HAL_ADC_ConfigChannel+0x7a8>)
 800749e:	f7fe fefd 	bl	800629c <LL_ADC_GetCommonPathInternalCh>
 80074a2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a3a      	ldr	r2, [pc, #232]	@ (8007594 <HAL_ADC_ConfigChannel+0x7ac>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d127      	bne.n	8007500 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80074b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80074b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d121      	bne.n	8007500 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a35      	ldr	r2, [pc, #212]	@ (8007598 <HAL_ADC_ConfigChannel+0x7b0>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d157      	bne.n	8007576 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80074c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80074ca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80074ce:	4619      	mov	r1, r3
 80074d0:	482f      	ldr	r0, [pc, #188]	@ (8007590 <HAL_ADC_ConfigChannel+0x7a8>)
 80074d2:	f7fe fed0 	bl	8006276 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80074d6:	4b31      	ldr	r3, [pc, #196]	@ (800759c <HAL_ADC_ConfigChannel+0x7b4>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	099b      	lsrs	r3, r3, #6
 80074dc:	4a30      	ldr	r2, [pc, #192]	@ (80075a0 <HAL_ADC_ConfigChannel+0x7b8>)
 80074de:	fba2 2303 	umull	r2, r3, r2, r3
 80074e2:	099b      	lsrs	r3, r3, #6
 80074e4:	1c5a      	adds	r2, r3, #1
 80074e6:	4613      	mov	r3, r2
 80074e8:	005b      	lsls	r3, r3, #1
 80074ea:	4413      	add	r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80074f0:	e002      	b.n	80074f8 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	3b01      	subs	r3, #1
 80074f6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d1f9      	bne.n	80074f2 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80074fe:	e03a      	b.n	8007576 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a27      	ldr	r2, [pc, #156]	@ (80075a4 <HAL_ADC_ConfigChannel+0x7bc>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d113      	bne.n	8007532 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800750a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800750e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10d      	bne.n	8007532 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a1f      	ldr	r2, [pc, #124]	@ (8007598 <HAL_ADC_ConfigChannel+0x7b0>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d12a      	bne.n	8007576 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007520:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007524:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007528:	4619      	mov	r1, r3
 800752a:	4819      	ldr	r0, [pc, #100]	@ (8007590 <HAL_ADC_ConfigChannel+0x7a8>)
 800752c:	f7fe fea3 	bl	8006276 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007530:	e021      	b.n	8007576 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a1c      	ldr	r2, [pc, #112]	@ (80075a8 <HAL_ADC_ConfigChannel+0x7c0>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d11c      	bne.n	8007576 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800753c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007540:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d116      	bne.n	8007576 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a12      	ldr	r2, [pc, #72]	@ (8007598 <HAL_ADC_ConfigChannel+0x7b0>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d111      	bne.n	8007576 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007552:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007556:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800755a:	4619      	mov	r1, r3
 800755c:	480c      	ldr	r0, [pc, #48]	@ (8007590 <HAL_ADC_ConfigChannel+0x7a8>)
 800755e:	f7fe fe8a 	bl	8006276 <LL_ADC_SetCommonPathInternalCh>
 8007562:	e008      	b.n	8007576 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007568:	f043 0220 	orr.w	r2, r3, #32
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800757e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8007582:	4618      	mov	r0, r3
 8007584:	37d8      	adds	r7, #216	@ 0xd8
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	80080000 	.word	0x80080000
 8007590:	50040300 	.word	0x50040300
 8007594:	c7520000 	.word	0xc7520000
 8007598:	50040000 	.word	0x50040000
 800759c:	20000048 	.word	0x20000048
 80075a0:	053e2d63 	.word	0x053e2d63
 80075a4:	cb840000 	.word	0xcb840000
 80075a8:	80000001 	.word	0x80000001

080075ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80075b4:	2300      	movs	r3, #0
 80075b6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4618      	mov	r0, r3
 80075be:	f7fe ffe7 	bl	8006590 <LL_ADC_IsEnabled>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d169      	bne.n	800769c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	689a      	ldr	r2, [r3, #8]
 80075ce:	4b36      	ldr	r3, [pc, #216]	@ (80076a8 <ADC_Enable+0xfc>)
 80075d0:	4013      	ands	r3, r2
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00d      	beq.n	80075f2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075da:	f043 0210 	orr.w	r2, r3, #16
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075e6:	f043 0201 	orr.w	r2, r3, #1
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e055      	b.n	800769e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7fe ffa2 	bl	8006540 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80075fc:	482b      	ldr	r0, [pc, #172]	@ (80076ac <ADC_Enable+0x100>)
 80075fe:	f7fe fe4d 	bl	800629c <LL_ADC_GetCommonPathInternalCh>
 8007602:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8007604:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007608:	2b00      	cmp	r3, #0
 800760a:	d013      	beq.n	8007634 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800760c:	4b28      	ldr	r3, [pc, #160]	@ (80076b0 <ADC_Enable+0x104>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	099b      	lsrs	r3, r3, #6
 8007612:	4a28      	ldr	r2, [pc, #160]	@ (80076b4 <ADC_Enable+0x108>)
 8007614:	fba2 2303 	umull	r2, r3, r2, r3
 8007618:	099b      	lsrs	r3, r3, #6
 800761a:	1c5a      	adds	r2, r3, #1
 800761c:	4613      	mov	r3, r2
 800761e:	005b      	lsls	r3, r3, #1
 8007620:	4413      	add	r3, r2
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007626:	e002      	b.n	800762e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	3b01      	subs	r3, #1
 800762c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1f9      	bne.n	8007628 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007634:	f7fe fe00 	bl	8006238 <HAL_GetTick>
 8007638:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800763a:	e028      	b.n	800768e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4618      	mov	r0, r3
 8007642:	f7fe ffa5 	bl	8006590 <LL_ADC_IsEnabled>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d104      	bne.n	8007656 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4618      	mov	r0, r3
 8007652:	f7fe ff75 	bl	8006540 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007656:	f7fe fdef 	bl	8006238 <HAL_GetTick>
 800765a:	4602      	mov	r2, r0
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	2b02      	cmp	r3, #2
 8007662:	d914      	bls.n	800768e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	2b01      	cmp	r3, #1
 8007670:	d00d      	beq.n	800768e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007676:	f043 0210 	orr.w	r2, r3, #16
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007682:	f043 0201 	orr.w	r2, r3, #1
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e007      	b.n	800769e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	2b01      	cmp	r3, #1
 800769a:	d1cf      	bne.n	800763c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	8000003f 	.word	0x8000003f
 80076ac:	50040300 	.word	0x50040300
 80076b0:	20000048 	.word	0x20000048
 80076b4:	053e2d63 	.word	0x053e2d63

080076b8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4618      	mov	r0, r3
 80076c6:	f7fe ff76 	bl	80065b6 <LL_ADC_IsDisableOngoing>
 80076ca:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7fe ff5d 	bl	8006590 <LL_ADC_IsEnabled>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d047      	beq.n	800776c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d144      	bne.n	800776c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	f003 030d 	and.w	r3, r3, #13
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d10c      	bne.n	800770a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4618      	mov	r0, r3
 80076f6:	f7fe ff37 	bl	8006568 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2203      	movs	r2, #3
 8007700:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007702:	f7fe fd99 	bl	8006238 <HAL_GetTick>
 8007706:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007708:	e029      	b.n	800775e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800770e:	f043 0210 	orr.w	r2, r3, #16
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800771a:	f043 0201 	orr.w	r2, r3, #1
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e023      	b.n	800776e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007726:	f7fe fd87 	bl	8006238 <HAL_GetTick>
 800772a:	4602      	mov	r2, r0
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	1ad3      	subs	r3, r2, r3
 8007730:	2b02      	cmp	r3, #2
 8007732:	d914      	bls.n	800775e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	f003 0301 	and.w	r3, r3, #1
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00d      	beq.n	800775e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007746:	f043 0210 	orr.w	r2, r3, #16
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007752:	f043 0201 	orr.w	r2, r3, #1
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e007      	b.n	800776e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	f003 0301 	and.w	r3, r3, #1
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1dc      	bne.n	8007726 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <LL_ADC_StartCalibration>:
{
 8007776:	b480      	push	{r7}
 8007778:	b083      	sub	sp, #12
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
 800777e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8007788:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800778c:	683a      	ldr	r2, [r7, #0]
 800778e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007792:	4313      	orrs	r3, r2
 8007794:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	609a      	str	r2, [r3, #8]
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <LL_ADC_IsCalibrationOnGoing>:
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077bc:	d101      	bne.n	80077c2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80077be:	2301      	movs	r3, #1
 80077c0:	e000      	b.n	80077c4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80077da:	2300      	movs	r3, #0
 80077dc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d101      	bne.n	80077ec <HAL_ADCEx_Calibration_Start+0x1c>
 80077e8:	2302      	movs	r3, #2
 80077ea:	e04d      	b.n	8007888 <HAL_ADCEx_Calibration_Start+0xb8>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f7ff ff5f 	bl	80076b8 <ADC_Disable>
 80077fa:	4603      	mov	r3, r0
 80077fc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80077fe:	7bfb      	ldrb	r3, [r7, #15]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d136      	bne.n	8007872 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007808:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800780c:	f023 0302 	bic.w	r3, r3, #2
 8007810:	f043 0202 	orr.w	r2, r3, #2
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	6839      	ldr	r1, [r7, #0]
 800781e:	4618      	mov	r0, r3
 8007820:	f7ff ffa9 	bl	8007776 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007824:	e014      	b.n	8007850 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	3301      	adds	r3, #1
 800782a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8007832:	d30d      	bcc.n	8007850 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007838:	f023 0312 	bic.w	r3, r3, #18
 800783c:	f043 0210 	orr.w	r2, r3, #16
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	e01b      	b.n	8007888 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4618      	mov	r0, r3
 8007856:	f7ff ffa7 	bl	80077a8 <LL_ADC_IsCalibrationOnGoing>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1e2      	bne.n	8007826 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007864:	f023 0303 	bic.w	r3, r3, #3
 8007868:	f043 0201 	orr.w	r2, r3, #1
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	655a      	str	r2, [r3, #84]	@ 0x54
 8007870:	e005      	b.n	800787e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007876:	f043 0210 	orr.w	r2, r3, #16
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8007886:	7bfb      	ldrb	r3, [r7, #15]
}
 8007888:	4618      	mov	r0, r3
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8007898:	bf00      	nop
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80078e8:	bf00      	nop
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b085      	sub	sp, #20
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f003 0307 	and.w	r3, r3, #7
 8007902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007904:	4b0c      	ldr	r3, [pc, #48]	@ (8007938 <__NVIC_SetPriorityGrouping+0x44>)
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800790a:	68ba      	ldr	r2, [r7, #8]
 800790c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007910:	4013      	ands	r3, r2
 8007912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800791c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007920:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007926:	4a04      	ldr	r2, [pc, #16]	@ (8007938 <__NVIC_SetPriorityGrouping+0x44>)
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	60d3      	str	r3, [r2, #12]
}
 800792c:	bf00      	nop
 800792e:	3714      	adds	r7, #20
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr
 8007938:	e000ed00 	.word	0xe000ed00

0800793c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800793c:	b480      	push	{r7}
 800793e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007940:	4b04      	ldr	r3, [pc, #16]	@ (8007954 <__NVIC_GetPriorityGrouping+0x18>)
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	0a1b      	lsrs	r3, r3, #8
 8007946:	f003 0307 	and.w	r3, r3, #7
}
 800794a:	4618      	mov	r0, r3
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr
 8007954:	e000ed00 	.word	0xe000ed00

08007958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	4603      	mov	r3, r0
 8007960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007966:	2b00      	cmp	r3, #0
 8007968:	db0b      	blt.n	8007982 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800796a:	79fb      	ldrb	r3, [r7, #7]
 800796c:	f003 021f 	and.w	r2, r3, #31
 8007970:	4907      	ldr	r1, [pc, #28]	@ (8007990 <__NVIC_EnableIRQ+0x38>)
 8007972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007976:	095b      	lsrs	r3, r3, #5
 8007978:	2001      	movs	r0, #1
 800797a:	fa00 f202 	lsl.w	r2, r0, r2
 800797e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007982:	bf00      	nop
 8007984:	370c      	adds	r7, #12
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	e000e100 	.word	0xe000e100

08007994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	4603      	mov	r3, r0
 800799c:	6039      	str	r1, [r7, #0]
 800799e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	db0a      	blt.n	80079be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	b2da      	uxtb	r2, r3
 80079ac:	490c      	ldr	r1, [pc, #48]	@ (80079e0 <__NVIC_SetPriority+0x4c>)
 80079ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079b2:	0112      	lsls	r2, r2, #4
 80079b4:	b2d2      	uxtb	r2, r2
 80079b6:	440b      	add	r3, r1
 80079b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80079bc:	e00a      	b.n	80079d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	b2da      	uxtb	r2, r3
 80079c2:	4908      	ldr	r1, [pc, #32]	@ (80079e4 <__NVIC_SetPriority+0x50>)
 80079c4:	79fb      	ldrb	r3, [r7, #7]
 80079c6:	f003 030f 	and.w	r3, r3, #15
 80079ca:	3b04      	subs	r3, #4
 80079cc:	0112      	lsls	r2, r2, #4
 80079ce:	b2d2      	uxtb	r2, r2
 80079d0:	440b      	add	r3, r1
 80079d2:	761a      	strb	r2, [r3, #24]
}
 80079d4:	bf00      	nop
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr
 80079e0:	e000e100 	.word	0xe000e100
 80079e4:	e000ed00 	.word	0xe000ed00

080079e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b089      	sub	sp, #36	@ 0x24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f003 0307 	and.w	r3, r3, #7
 80079fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	f1c3 0307 	rsb	r3, r3, #7
 8007a02:	2b04      	cmp	r3, #4
 8007a04:	bf28      	it	cs
 8007a06:	2304      	movcs	r3, #4
 8007a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	3304      	adds	r3, #4
 8007a0e:	2b06      	cmp	r3, #6
 8007a10:	d902      	bls.n	8007a18 <NVIC_EncodePriority+0x30>
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	3b03      	subs	r3, #3
 8007a16:	e000      	b.n	8007a1a <NVIC_EncodePriority+0x32>
 8007a18:	2300      	movs	r3, #0
 8007a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	fa02 f303 	lsl.w	r3, r2, r3
 8007a26:	43da      	mvns	r2, r3
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	401a      	ands	r2, r3
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a30:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	fa01 f303 	lsl.w	r3, r1, r3
 8007a3a:	43d9      	mvns	r1, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a40:	4313      	orrs	r3, r2
         );
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3724      	adds	r7, #36	@ 0x24
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
	...

08007a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a60:	d301      	bcc.n	8007a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007a62:	2301      	movs	r3, #1
 8007a64:	e00f      	b.n	8007a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007a66:	4a0a      	ldr	r2, [pc, #40]	@ (8007a90 <SysTick_Config+0x40>)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007a6e:	210f      	movs	r1, #15
 8007a70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a74:	f7ff ff8e 	bl	8007994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007a78:	4b05      	ldr	r3, [pc, #20]	@ (8007a90 <SysTick_Config+0x40>)
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007a7e:	4b04      	ldr	r3, [pc, #16]	@ (8007a90 <SysTick_Config+0x40>)
 8007a80:	2207      	movs	r2, #7
 8007a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3708      	adds	r7, #8
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	e000e010 	.word	0xe000e010

08007a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7ff ff29 	bl	80078f4 <__NVIC_SetPriorityGrouping>
}
 8007aa2:	bf00      	nop
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b086      	sub	sp, #24
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	60b9      	str	r1, [r7, #8]
 8007ab4:	607a      	str	r2, [r7, #4]
 8007ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007abc:	f7ff ff3e 	bl	800793c <__NVIC_GetPriorityGrouping>
 8007ac0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	68b9      	ldr	r1, [r7, #8]
 8007ac6:	6978      	ldr	r0, [r7, #20]
 8007ac8:	f7ff ff8e 	bl	80079e8 <NVIC_EncodePriority>
 8007acc:	4602      	mov	r2, r0
 8007ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ad2:	4611      	mov	r1, r2
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f7ff ff5d 	bl	8007994 <__NVIC_SetPriority>
}
 8007ada:	bf00      	nop
 8007adc:	3718      	adds	r7, #24
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b082      	sub	sp, #8
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	4603      	mov	r3, r0
 8007aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007af0:	4618      	mov	r0, r3
 8007af2:	f7ff ff31 	bl	8007958 <__NVIC_EnableIRQ>
}
 8007af6:	bf00      	nop
 8007af8:	3708      	adds	r7, #8
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b082      	sub	sp, #8
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f7ff ffa2 	bl	8007a50 <SysTick_Config>
 8007b0c:	4603      	mov	r3, r0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3708      	adds	r7, #8
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
	...

08007b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b087      	sub	sp, #28
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007b22:	2300      	movs	r3, #0
 8007b24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007b26:	e148      	b.n	8007dba <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	2101      	movs	r1, #1
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	fa01 f303 	lsl.w	r3, r1, r3
 8007b34:	4013      	ands	r3, r2
 8007b36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f000 813a 	beq.w	8007db4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	f003 0303 	and.w	r3, r3, #3
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d005      	beq.n	8007b58 <HAL_GPIO_Init+0x40>
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	f003 0303 	and.w	r3, r3, #3
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d130      	bne.n	8007bba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	005b      	lsls	r3, r3, #1
 8007b62:	2203      	movs	r2, #3
 8007b64:	fa02 f303 	lsl.w	r3, r2, r3
 8007b68:	43db      	mvns	r3, r3
 8007b6a:	693a      	ldr	r2, [r7, #16]
 8007b6c:	4013      	ands	r3, r2
 8007b6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	68da      	ldr	r2, [r3, #12]
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	005b      	lsls	r3, r3, #1
 8007b78:	fa02 f303 	lsl.w	r3, r2, r3
 8007b7c:	693a      	ldr	r2, [r7, #16]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	693a      	ldr	r2, [r7, #16]
 8007b86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007b8e:	2201      	movs	r2, #1
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	fa02 f303 	lsl.w	r3, r2, r3
 8007b96:	43db      	mvns	r3, r3
 8007b98:	693a      	ldr	r2, [r7, #16]
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	091b      	lsrs	r3, r3, #4
 8007ba4:	f003 0201 	and.w	r2, r3, #1
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	fa02 f303 	lsl.w	r3, r2, r3
 8007bae:	693a      	ldr	r2, [r7, #16]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	693a      	ldr	r2, [r7, #16]
 8007bb8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	f003 0303 	and.w	r3, r3, #3
 8007bc2:	2b03      	cmp	r3, #3
 8007bc4:	d017      	beq.n	8007bf6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	005b      	lsls	r3, r3, #1
 8007bd0:	2203      	movs	r2, #3
 8007bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bd6:	43db      	mvns	r3, r3
 8007bd8:	693a      	ldr	r2, [r7, #16]
 8007bda:	4013      	ands	r3, r2
 8007bdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	689a      	ldr	r2, [r3, #8]
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	005b      	lsls	r3, r3, #1
 8007be6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bea:	693a      	ldr	r2, [r7, #16]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	f003 0303 	and.w	r3, r3, #3
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	d123      	bne.n	8007c4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	08da      	lsrs	r2, r3, #3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	3208      	adds	r2, #8
 8007c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	f003 0307 	and.w	r3, r3, #7
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	220f      	movs	r2, #15
 8007c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c1e:	43db      	mvns	r3, r3
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	4013      	ands	r3, r2
 8007c24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	691a      	ldr	r2, [r3, #16]
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	f003 0307 	and.w	r3, r3, #7
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	fa02 f303 	lsl.w	r3, r2, r3
 8007c36:	693a      	ldr	r2, [r7, #16]
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	08da      	lsrs	r2, r3, #3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	3208      	adds	r2, #8
 8007c44:	6939      	ldr	r1, [r7, #16]
 8007c46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	005b      	lsls	r3, r3, #1
 8007c54:	2203      	movs	r2, #3
 8007c56:	fa02 f303 	lsl.w	r3, r2, r3
 8007c5a:	43db      	mvns	r3, r3
 8007c5c:	693a      	ldr	r2, [r7, #16]
 8007c5e:	4013      	ands	r3, r2
 8007c60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	f003 0203 	and.w	r2, r3, #3
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	005b      	lsls	r3, r3, #1
 8007c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c72:	693a      	ldr	r2, [r7, #16]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	693a      	ldr	r2, [r7, #16]
 8007c7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f000 8094 	beq.w	8007db4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c8c:	4b52      	ldr	r3, [pc, #328]	@ (8007dd8 <HAL_GPIO_Init+0x2c0>)
 8007c8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c90:	4a51      	ldr	r2, [pc, #324]	@ (8007dd8 <HAL_GPIO_Init+0x2c0>)
 8007c92:	f043 0301 	orr.w	r3, r3, #1
 8007c96:	6613      	str	r3, [r2, #96]	@ 0x60
 8007c98:	4b4f      	ldr	r3, [pc, #316]	@ (8007dd8 <HAL_GPIO_Init+0x2c0>)
 8007c9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c9c:	f003 0301 	and.w	r3, r3, #1
 8007ca0:	60bb      	str	r3, [r7, #8]
 8007ca2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007ca4:	4a4d      	ldr	r2, [pc, #308]	@ (8007ddc <HAL_GPIO_Init+0x2c4>)
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	089b      	lsrs	r3, r3, #2
 8007caa:	3302      	adds	r3, #2
 8007cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	f003 0303 	and.w	r3, r3, #3
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	220f      	movs	r2, #15
 8007cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc0:	43db      	mvns	r3, r3
 8007cc2:	693a      	ldr	r2, [r7, #16]
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007cce:	d00d      	beq.n	8007cec <HAL_GPIO_Init+0x1d4>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a43      	ldr	r2, [pc, #268]	@ (8007de0 <HAL_GPIO_Init+0x2c8>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d007      	beq.n	8007ce8 <HAL_GPIO_Init+0x1d0>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a42      	ldr	r2, [pc, #264]	@ (8007de4 <HAL_GPIO_Init+0x2cc>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d101      	bne.n	8007ce4 <HAL_GPIO_Init+0x1cc>
 8007ce0:	2302      	movs	r3, #2
 8007ce2:	e004      	b.n	8007cee <HAL_GPIO_Init+0x1d6>
 8007ce4:	2307      	movs	r3, #7
 8007ce6:	e002      	b.n	8007cee <HAL_GPIO_Init+0x1d6>
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e000      	b.n	8007cee <HAL_GPIO_Init+0x1d6>
 8007cec:	2300      	movs	r3, #0
 8007cee:	697a      	ldr	r2, [r7, #20]
 8007cf0:	f002 0203 	and.w	r2, r2, #3
 8007cf4:	0092      	lsls	r2, r2, #2
 8007cf6:	4093      	lsls	r3, r2
 8007cf8:	693a      	ldr	r2, [r7, #16]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007cfe:	4937      	ldr	r1, [pc, #220]	@ (8007ddc <HAL_GPIO_Init+0x2c4>)
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	089b      	lsrs	r3, r3, #2
 8007d04:	3302      	adds	r3, #2
 8007d06:	693a      	ldr	r2, [r7, #16]
 8007d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007d0c:	4b36      	ldr	r3, [pc, #216]	@ (8007de8 <HAL_GPIO_Init+0x2d0>)
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	43db      	mvns	r3, r3
 8007d16:	693a      	ldr	r2, [r7, #16]
 8007d18:	4013      	ands	r3, r2
 8007d1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d003      	beq.n	8007d30 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8007d28:	693a      	ldr	r2, [r7, #16]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007d30:	4a2d      	ldr	r2, [pc, #180]	@ (8007de8 <HAL_GPIO_Init+0x2d0>)
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007d36:	4b2c      	ldr	r3, [pc, #176]	@ (8007de8 <HAL_GPIO_Init+0x2d0>)
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	43db      	mvns	r3, r3
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	4013      	ands	r3, r2
 8007d44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d003      	beq.n	8007d5a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8007d52:	693a      	ldr	r2, [r7, #16]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007d5a:	4a23      	ldr	r2, [pc, #140]	@ (8007de8 <HAL_GPIO_Init+0x2d0>)
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007d60:	4b21      	ldr	r3, [pc, #132]	@ (8007de8 <HAL_GPIO_Init+0x2d0>)
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	43db      	mvns	r3, r3
 8007d6a:	693a      	ldr	r2, [r7, #16]
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d003      	beq.n	8007d84 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8007d7c:	693a      	ldr	r2, [r7, #16]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007d84:	4a18      	ldr	r2, [pc, #96]	@ (8007de8 <HAL_GPIO_Init+0x2d0>)
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8007d8a:	4b17      	ldr	r3, [pc, #92]	@ (8007de8 <HAL_GPIO_Init+0x2d0>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	43db      	mvns	r3, r3
 8007d94:	693a      	ldr	r2, [r7, #16]
 8007d96:	4013      	ands	r3, r2
 8007d98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d003      	beq.n	8007dae <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007dae:	4a0e      	ldr	r2, [pc, #56]	@ (8007de8 <HAL_GPIO_Init+0x2d0>)
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	3301      	adds	r3, #1
 8007db8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f47f aeaf 	bne.w	8007b28 <HAL_GPIO_Init+0x10>
  }
}
 8007dca:	bf00      	nop
 8007dcc:	bf00      	nop
 8007dce:	371c      	adds	r7, #28
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr
 8007dd8:	40021000 	.word	0x40021000
 8007ddc:	40010000 	.word	0x40010000
 8007de0:	48000400 	.word	0x48000400
 8007de4:	48000800 	.word	0x48000800
 8007de8:	40010400 	.word	0x40010400

08007dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	460b      	mov	r3, r1
 8007df6:	807b      	strh	r3, [r7, #2]
 8007df8:	4613      	mov	r3, r2
 8007dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007dfc:	787b      	ldrb	r3, [r7, #1]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d003      	beq.n	8007e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007e02:	887a      	ldrh	r2, [r7, #2]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007e08:	e002      	b.n	8007e10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007e0a:	887a      	ldrh	r2, [r7, #2]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007e10:	bf00      	nop
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	4603      	mov	r3, r0
 8007e24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007e26:	4b08      	ldr	r3, [pc, #32]	@ (8007e48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007e28:	695a      	ldr	r2, [r3, #20]
 8007e2a:	88fb      	ldrh	r3, [r7, #6]
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d006      	beq.n	8007e40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007e32:	4a05      	ldr	r2, [pc, #20]	@ (8007e48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007e34:	88fb      	ldrh	r3, [r7, #6]
 8007e36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007e38:	88fb      	ldrh	r3, [r7, #6]
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7f9 fbd6 	bl	80015ec <HAL_GPIO_EXTI_Callback>
  }
}
 8007e40:	bf00      	nop
 8007e42:	3708      	adds	r7, #8
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	40010400 	.word	0x40010400

08007e4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d101      	bne.n	8007e5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e08d      	b.n	8007f7a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d106      	bne.n	8007e78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f7f9 fd30 	bl	80018d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2224      	movs	r2, #36	@ 0x24
 8007e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f022 0201 	bic.w	r2, r2, #1
 8007e8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685a      	ldr	r2, [r3, #4]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007e9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	689a      	ldr	r2, [r3, #8]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007eac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d107      	bne.n	8007ec6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	689a      	ldr	r2, [r3, #8]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007ec2:	609a      	str	r2, [r3, #8]
 8007ec4:	e006      	b.n	8007ed4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	689a      	ldr	r2, [r3, #8]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007ed2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	2b02      	cmp	r3, #2
 8007eda:	d108      	bne.n	8007eee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	685a      	ldr	r2, [r3, #4]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007eea:	605a      	str	r2, [r3, #4]
 8007eec:	e007      	b.n	8007efe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	685a      	ldr	r2, [r3, #4]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007efc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	6812      	ldr	r2, [r2, #0]
 8007f08:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007f0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	68da      	ldr	r2, [r3, #12]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007f20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	691a      	ldr	r2, [r3, #16]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	695b      	ldr	r3, [r3, #20]
 8007f2a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	430a      	orrs	r2, r1
 8007f3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	69d9      	ldr	r1, [r3, #28]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a1a      	ldr	r2, [r3, #32]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	430a      	orrs	r2, r1
 8007f4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f042 0201 	orr.w	r2, r2, #1
 8007f5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2220      	movs	r2, #32
 8007f66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3708      	adds	r7, #8
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b083      	sub	sp, #12
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
 8007f8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	2b20      	cmp	r3, #32
 8007f96:	d138      	bne.n	800800a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d101      	bne.n	8007fa6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007fa2:	2302      	movs	r3, #2
 8007fa4:	e032      	b.n	800800c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2201      	movs	r2, #1
 8007faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2224      	movs	r2, #36	@ 0x24
 8007fb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f022 0201 	bic.w	r2, r2, #1
 8007fc4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007fd4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	6819      	ldr	r1, [r3, #0]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	683a      	ldr	r2, [r7, #0]
 8007fe2:	430a      	orrs	r2, r1
 8007fe4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f042 0201 	orr.w	r2, r2, #1
 8007ff4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2220      	movs	r2, #32
 8007ffa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008006:	2300      	movs	r3, #0
 8008008:	e000      	b.n	800800c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800800a:	2302      	movs	r3, #2
  }
}
 800800c:	4618      	mov	r0, r3
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b20      	cmp	r3, #32
 800802c:	d139      	bne.n	80080a2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008034:	2b01      	cmp	r3, #1
 8008036:	d101      	bne.n	800803c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008038:	2302      	movs	r3, #2
 800803a:	e033      	b.n	80080a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2224      	movs	r2, #36	@ 0x24
 8008048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f022 0201 	bic.w	r2, r2, #1
 800805a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800806a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	021b      	lsls	r3, r3, #8
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	4313      	orrs	r3, r2
 8008074:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68fa      	ldr	r2, [r7, #12]
 800807c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f042 0201 	orr.w	r2, r2, #1
 800808c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2220      	movs	r2, #32
 8008092:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800809e:	2300      	movs	r3, #0
 80080a0:	e000      	b.n	80080a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80080a2:	2302      	movs	r3, #2
  }
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3714      	adds	r7, #20
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80080b0:	b480      	push	{r7}
 80080b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80080b4:	4b04      	ldr	r3, [pc, #16]	@ (80080c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80080bc:	4618      	mov	r0, r3
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop
 80080c8:	40007000 	.word	0x40007000

080080cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080da:	d130      	bne.n	800813e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80080dc:	4b23      	ldr	r3, [pc, #140]	@ (800816c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80080e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080e8:	d038      	beq.n	800815c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80080ea:	4b20      	ldr	r3, [pc, #128]	@ (800816c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80080f2:	4a1e      	ldr	r2, [pc, #120]	@ (800816c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80080f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80080f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80080fa:	4b1d      	ldr	r3, [pc, #116]	@ (8008170 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2232      	movs	r2, #50	@ 0x32
 8008100:	fb02 f303 	mul.w	r3, r2, r3
 8008104:	4a1b      	ldr	r2, [pc, #108]	@ (8008174 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008106:	fba2 2303 	umull	r2, r3, r2, r3
 800810a:	0c9b      	lsrs	r3, r3, #18
 800810c:	3301      	adds	r3, #1
 800810e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008110:	e002      	b.n	8008118 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	3b01      	subs	r3, #1
 8008116:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008118:	4b14      	ldr	r3, [pc, #80]	@ (800816c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800811a:	695b      	ldr	r3, [r3, #20]
 800811c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008120:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008124:	d102      	bne.n	800812c <HAL_PWREx_ControlVoltageScaling+0x60>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1f2      	bne.n	8008112 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800812c:	4b0f      	ldr	r3, [pc, #60]	@ (800816c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800812e:	695b      	ldr	r3, [r3, #20]
 8008130:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008134:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008138:	d110      	bne.n	800815c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	e00f      	b.n	800815e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800813e:	4b0b      	ldr	r3, [pc, #44]	@ (800816c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008146:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800814a:	d007      	beq.n	800815c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800814c:	4b07      	ldr	r3, [pc, #28]	@ (800816c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008154:	4a05      	ldr	r2, [pc, #20]	@ (800816c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008156:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800815a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3714      	adds	r7, #20
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	40007000 	.word	0x40007000
 8008170:	20000048 	.word	0x20000048
 8008174:	431bde83 	.word	0x431bde83

08008178 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b088      	sub	sp, #32
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d102      	bne.n	800818c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	f000 bc02 	b.w	8008990 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800818c:	4b96      	ldr	r3, [pc, #600]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	f003 030c 	and.w	r3, r3, #12
 8008194:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008196:	4b94      	ldr	r3, [pc, #592]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	f003 0303 	and.w	r3, r3, #3
 800819e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f003 0310 	and.w	r3, r3, #16
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f000 80e4 	beq.w	8008376 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d007      	beq.n	80081c4 <HAL_RCC_OscConfig+0x4c>
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	2b0c      	cmp	r3, #12
 80081b8:	f040 808b 	bne.w	80082d2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	2b01      	cmp	r3, #1
 80081c0:	f040 8087 	bne.w	80082d2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80081c4:	4b88      	ldr	r3, [pc, #544]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 0302 	and.w	r3, r3, #2
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d005      	beq.n	80081dc <HAL_RCC_OscConfig+0x64>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d101      	bne.n	80081dc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	e3d9      	b.n	8008990 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6a1a      	ldr	r2, [r3, #32]
 80081e0:	4b81      	ldr	r3, [pc, #516]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 0308 	and.w	r3, r3, #8
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d004      	beq.n	80081f6 <HAL_RCC_OscConfig+0x7e>
 80081ec:	4b7e      	ldr	r3, [pc, #504]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80081f4:	e005      	b.n	8008202 <HAL_RCC_OscConfig+0x8a>
 80081f6:	4b7c      	ldr	r3, [pc, #496]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 80081f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80081fc:	091b      	lsrs	r3, r3, #4
 80081fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008202:	4293      	cmp	r3, r2
 8008204:	d223      	bcs.n	800824e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a1b      	ldr	r3, [r3, #32]
 800820a:	4618      	mov	r0, r3
 800820c:	f000 fd8c 	bl	8008d28 <RCC_SetFlashLatencyFromMSIRange>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d001      	beq.n	800821a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e3ba      	b.n	8008990 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800821a:	4b73      	ldr	r3, [pc, #460]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a72      	ldr	r2, [pc, #456]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 8008220:	f043 0308 	orr.w	r3, r3, #8
 8008224:	6013      	str	r3, [r2, #0]
 8008226:	4b70      	ldr	r3, [pc, #448]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a1b      	ldr	r3, [r3, #32]
 8008232:	496d      	ldr	r1, [pc, #436]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 8008234:	4313      	orrs	r3, r2
 8008236:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008238:	4b6b      	ldr	r3, [pc, #428]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	69db      	ldr	r3, [r3, #28]
 8008244:	021b      	lsls	r3, r3, #8
 8008246:	4968      	ldr	r1, [pc, #416]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 8008248:	4313      	orrs	r3, r2
 800824a:	604b      	str	r3, [r1, #4]
 800824c:	e025      	b.n	800829a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800824e:	4b66      	ldr	r3, [pc, #408]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a65      	ldr	r2, [pc, #404]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 8008254:	f043 0308 	orr.w	r3, r3, #8
 8008258:	6013      	str	r3, [r2, #0]
 800825a:	4b63      	ldr	r3, [pc, #396]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6a1b      	ldr	r3, [r3, #32]
 8008266:	4960      	ldr	r1, [pc, #384]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 8008268:	4313      	orrs	r3, r2
 800826a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800826c:	4b5e      	ldr	r3, [pc, #376]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	69db      	ldr	r3, [r3, #28]
 8008278:	021b      	lsls	r3, r3, #8
 800827a:	495b      	ldr	r1, [pc, #364]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 800827c:	4313      	orrs	r3, r2
 800827e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008280:	69bb      	ldr	r3, [r7, #24]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d109      	bne.n	800829a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a1b      	ldr	r3, [r3, #32]
 800828a:	4618      	mov	r0, r3
 800828c:	f000 fd4c 	bl	8008d28 <RCC_SetFlashLatencyFromMSIRange>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d001      	beq.n	800829a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	e37a      	b.n	8008990 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800829a:	f000 fc81 	bl	8008ba0 <HAL_RCC_GetSysClockFreq>
 800829e:	4602      	mov	r2, r0
 80082a0:	4b51      	ldr	r3, [pc, #324]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	091b      	lsrs	r3, r3, #4
 80082a6:	f003 030f 	and.w	r3, r3, #15
 80082aa:	4950      	ldr	r1, [pc, #320]	@ (80083ec <HAL_RCC_OscConfig+0x274>)
 80082ac:	5ccb      	ldrb	r3, [r1, r3]
 80082ae:	f003 031f 	and.w	r3, r3, #31
 80082b2:	fa22 f303 	lsr.w	r3, r2, r3
 80082b6:	4a4e      	ldr	r2, [pc, #312]	@ (80083f0 <HAL_RCC_OscConfig+0x278>)
 80082b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80082ba:	4b4e      	ldr	r3, [pc, #312]	@ (80083f4 <HAL_RCC_OscConfig+0x27c>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4618      	mov	r0, r3
 80082c0:	f7fd ff6a 	bl	8006198 <HAL_InitTick>
 80082c4:	4603      	mov	r3, r0
 80082c6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80082c8:	7bfb      	ldrb	r3, [r7, #15]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d052      	beq.n	8008374 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80082ce:	7bfb      	ldrb	r3, [r7, #15]
 80082d0:	e35e      	b.n	8008990 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	699b      	ldr	r3, [r3, #24]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d032      	beq.n	8008340 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80082da:	4b43      	ldr	r3, [pc, #268]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a42      	ldr	r2, [pc, #264]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 80082e0:	f043 0301 	orr.w	r3, r3, #1
 80082e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80082e6:	f7fd ffa7 	bl	8006238 <HAL_GetTick>
 80082ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80082ec:	e008      	b.n	8008300 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80082ee:	f7fd ffa3 	bl	8006238 <HAL_GetTick>
 80082f2:	4602      	mov	r2, r0
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	1ad3      	subs	r3, r2, r3
 80082f8:	2b02      	cmp	r3, #2
 80082fa:	d901      	bls.n	8008300 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80082fc:	2303      	movs	r3, #3
 80082fe:	e347      	b.n	8008990 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008300:	4b39      	ldr	r3, [pc, #228]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 0302 	and.w	r3, r3, #2
 8008308:	2b00      	cmp	r3, #0
 800830a:	d0f0      	beq.n	80082ee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800830c:	4b36      	ldr	r3, [pc, #216]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a35      	ldr	r2, [pc, #212]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 8008312:	f043 0308 	orr.w	r3, r3, #8
 8008316:	6013      	str	r3, [r2, #0]
 8008318:	4b33      	ldr	r3, [pc, #204]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6a1b      	ldr	r3, [r3, #32]
 8008324:	4930      	ldr	r1, [pc, #192]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 8008326:	4313      	orrs	r3, r2
 8008328:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800832a:	4b2f      	ldr	r3, [pc, #188]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	69db      	ldr	r3, [r3, #28]
 8008336:	021b      	lsls	r3, r3, #8
 8008338:	492b      	ldr	r1, [pc, #172]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 800833a:	4313      	orrs	r3, r2
 800833c:	604b      	str	r3, [r1, #4]
 800833e:	e01a      	b.n	8008376 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008340:	4b29      	ldr	r3, [pc, #164]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a28      	ldr	r2, [pc, #160]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 8008346:	f023 0301 	bic.w	r3, r3, #1
 800834a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800834c:	f7fd ff74 	bl	8006238 <HAL_GetTick>
 8008350:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008352:	e008      	b.n	8008366 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008354:	f7fd ff70 	bl	8006238 <HAL_GetTick>
 8008358:	4602      	mov	r2, r0
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	2b02      	cmp	r3, #2
 8008360:	d901      	bls.n	8008366 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8008362:	2303      	movs	r3, #3
 8008364:	e314      	b.n	8008990 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008366:	4b20      	ldr	r3, [pc, #128]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f003 0302 	and.w	r3, r3, #2
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1f0      	bne.n	8008354 <HAL_RCC_OscConfig+0x1dc>
 8008372:	e000      	b.n	8008376 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008374:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 0301 	and.w	r3, r3, #1
 800837e:	2b00      	cmp	r3, #0
 8008380:	d073      	beq.n	800846a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	2b08      	cmp	r3, #8
 8008386:	d005      	beq.n	8008394 <HAL_RCC_OscConfig+0x21c>
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	2b0c      	cmp	r3, #12
 800838c:	d10e      	bne.n	80083ac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	2b03      	cmp	r3, #3
 8008392:	d10b      	bne.n	80083ac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008394:	4b14      	ldr	r3, [pc, #80]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800839c:	2b00      	cmp	r3, #0
 800839e:	d063      	beq.n	8008468 <HAL_RCC_OscConfig+0x2f0>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d15f      	bne.n	8008468 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	e2f1      	b.n	8008990 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083b4:	d106      	bne.n	80083c4 <HAL_RCC_OscConfig+0x24c>
 80083b6:	4b0c      	ldr	r3, [pc, #48]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a0b      	ldr	r2, [pc, #44]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 80083bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083c0:	6013      	str	r3, [r2, #0]
 80083c2:	e025      	b.n	8008410 <HAL_RCC_OscConfig+0x298>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80083cc:	d114      	bne.n	80083f8 <HAL_RCC_OscConfig+0x280>
 80083ce:	4b06      	ldr	r3, [pc, #24]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a05      	ldr	r2, [pc, #20]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 80083d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80083d8:	6013      	str	r3, [r2, #0]
 80083da:	4b03      	ldr	r3, [pc, #12]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a02      	ldr	r2, [pc, #8]	@ (80083e8 <HAL_RCC_OscConfig+0x270>)
 80083e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083e4:	6013      	str	r3, [r2, #0]
 80083e6:	e013      	b.n	8008410 <HAL_RCC_OscConfig+0x298>
 80083e8:	40021000 	.word	0x40021000
 80083ec:	0800c0f8 	.word	0x0800c0f8
 80083f0:	20000048 	.word	0x20000048
 80083f4:	2000004c 	.word	0x2000004c
 80083f8:	4ba0      	ldr	r3, [pc, #640]	@ (800867c <HAL_RCC_OscConfig+0x504>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a9f      	ldr	r2, [pc, #636]	@ (800867c <HAL_RCC_OscConfig+0x504>)
 80083fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008402:	6013      	str	r3, [r2, #0]
 8008404:	4b9d      	ldr	r3, [pc, #628]	@ (800867c <HAL_RCC_OscConfig+0x504>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a9c      	ldr	r2, [pc, #624]	@ (800867c <HAL_RCC_OscConfig+0x504>)
 800840a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800840e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d013      	beq.n	8008440 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008418:	f7fd ff0e 	bl	8006238 <HAL_GetTick>
 800841c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800841e:	e008      	b.n	8008432 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008420:	f7fd ff0a 	bl	8006238 <HAL_GetTick>
 8008424:	4602      	mov	r2, r0
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	2b64      	cmp	r3, #100	@ 0x64
 800842c:	d901      	bls.n	8008432 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800842e:	2303      	movs	r3, #3
 8008430:	e2ae      	b.n	8008990 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008432:	4b92      	ldr	r3, [pc, #584]	@ (800867c <HAL_RCC_OscConfig+0x504>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800843a:	2b00      	cmp	r3, #0
 800843c:	d0f0      	beq.n	8008420 <HAL_RCC_OscConfig+0x2a8>
 800843e:	e014      	b.n	800846a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008440:	f7fd fefa 	bl	8006238 <HAL_GetTick>
 8008444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008446:	e008      	b.n	800845a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008448:	f7fd fef6 	bl	8006238 <HAL_GetTick>
 800844c:	4602      	mov	r2, r0
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	1ad3      	subs	r3, r2, r3
 8008452:	2b64      	cmp	r3, #100	@ 0x64
 8008454:	d901      	bls.n	800845a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008456:	2303      	movs	r3, #3
 8008458:	e29a      	b.n	8008990 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800845a:	4b88      	ldr	r3, [pc, #544]	@ (800867c <HAL_RCC_OscConfig+0x504>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008462:	2b00      	cmp	r3, #0
 8008464:	d1f0      	bne.n	8008448 <HAL_RCC_OscConfig+0x2d0>
 8008466:	e000      	b.n	800846a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f003 0302 	and.w	r3, r3, #2
 8008472:	2b00      	cmp	r3, #0
 8008474:	d060      	beq.n	8008538 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008476:	69bb      	ldr	r3, [r7, #24]
 8008478:	2b04      	cmp	r3, #4
 800847a:	d005      	beq.n	8008488 <HAL_RCC_OscConfig+0x310>
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	2b0c      	cmp	r3, #12
 8008480:	d119      	bne.n	80084b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	2b02      	cmp	r3, #2
 8008486:	d116      	bne.n	80084b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008488:	4b7c      	ldr	r3, [pc, #496]	@ (800867c <HAL_RCC_OscConfig+0x504>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008490:	2b00      	cmp	r3, #0
 8008492:	d005      	beq.n	80084a0 <HAL_RCC_OscConfig+0x328>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d101      	bne.n	80084a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e277      	b.n	8008990 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084a0:	4b76      	ldr	r3, [pc, #472]	@ (800867c <HAL_RCC_OscConfig+0x504>)
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	691b      	ldr	r3, [r3, #16]
 80084ac:	061b      	lsls	r3, r3, #24
 80084ae:	4973      	ldr	r1, [pc, #460]	@ (800867c <HAL_RCC_OscConfig+0x504>)
 80084b0:	4313      	orrs	r3, r2
 80084b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084b4:	e040      	b.n	8008538 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d023      	beq.n	8008506 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80084be:	4b6f      	ldr	r3, [pc, #444]	@ (800867c <HAL_RCC_OscConfig+0x504>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a6e      	ldr	r2, [pc, #440]	@ (800867c <HAL_RCC_OscConfig+0x504>)
 80084c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084ca:	f7fd feb5 	bl	8006238 <HAL_GetTick>
 80084ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80084d0:	e008      	b.n	80084e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084d2:	f7fd feb1 	bl	8006238 <HAL_GetTick>
 80084d6:	4602      	mov	r2, r0
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d901      	bls.n	80084e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80084e0:	2303      	movs	r3, #3
 80084e2:	e255      	b.n	8008990 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80084e4:	4b65      	ldr	r3, [pc, #404]	@ (800867c <HAL_RCC_OscConfig+0x504>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d0f0      	beq.n	80084d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084f0:	4b62      	ldr	r3, [pc, #392]	@ (800867c <HAL_RCC_OscConfig+0x504>)
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	061b      	lsls	r3, r3, #24
 80084fe:	495f      	ldr	r1, [pc, #380]	@ (800867c <HAL_RCC_OscConfig+0x504>)
 8008500:	4313      	orrs	r3, r2
 8008502:	604b      	str	r3, [r1, #4]
 8008504:	e018      	b.n	8008538 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008506:	4b5d      	ldr	r3, [pc, #372]	@ (800867c <HAL_RCC_OscConfig+0x504>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a5c      	ldr	r2, [pc, #368]	@ (800867c <HAL_RCC_OscConfig+0x504>)
 800850c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008510:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008512:	f7fd fe91 	bl	8006238 <HAL_GetTick>
 8008516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008518:	e008      	b.n	800852c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800851a:	f7fd fe8d 	bl	8006238 <HAL_GetTick>
 800851e:	4602      	mov	r2, r0
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	1ad3      	subs	r3, r2, r3
 8008524:	2b02      	cmp	r3, #2
 8008526:	d901      	bls.n	800852c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008528:	2303      	movs	r3, #3
 800852a:	e231      	b.n	8008990 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800852c:	4b53      	ldr	r3, [pc, #332]	@ (800867c <HAL_RCC_OscConfig+0x504>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008534:	2b00      	cmp	r3, #0
 8008536:	d1f0      	bne.n	800851a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f003 0308 	and.w	r3, r3, #8
 8008540:	2b00      	cmp	r3, #0
 8008542:	d03c      	beq.n	80085be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	695b      	ldr	r3, [r3, #20]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d01c      	beq.n	8008586 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800854c:	4b4b      	ldr	r3, [pc, #300]	@ (800867c <HAL_RCC_OscConfig+0x504>)
 800854e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008552:	4a4a      	ldr	r2, [pc, #296]	@ (800867c <HAL_RCC_OscConfig+0x504>)
 8008554:	f043 0301 	orr.w	r3, r3, #1
 8008558:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800855c:	f7fd fe6c 	bl	8006238 <HAL_GetTick>
 8008560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008562:	e008      	b.n	8008576 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008564:	f7fd fe68 	bl	8006238 <HAL_GetTick>
 8008568:	4602      	mov	r2, r0
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	1ad3      	subs	r3, r2, r3
 800856e:	2b02      	cmp	r3, #2
 8008570:	d901      	bls.n	8008576 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008572:	2303      	movs	r3, #3
 8008574:	e20c      	b.n	8008990 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008576:	4b41      	ldr	r3, [pc, #260]	@ (800867c <HAL_RCC_OscConfig+0x504>)
 8008578:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800857c:	f003 0302 	and.w	r3, r3, #2
 8008580:	2b00      	cmp	r3, #0
 8008582:	d0ef      	beq.n	8008564 <HAL_RCC_OscConfig+0x3ec>
 8008584:	e01b      	b.n	80085be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008586:	4b3d      	ldr	r3, [pc, #244]	@ (800867c <HAL_RCC_OscConfig+0x504>)
 8008588:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800858c:	4a3b      	ldr	r2, [pc, #236]	@ (800867c <HAL_RCC_OscConfig+0x504>)
 800858e:	f023 0301 	bic.w	r3, r3, #1
 8008592:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008596:	f7fd fe4f 	bl	8006238 <HAL_GetTick>
 800859a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800859c:	e008      	b.n	80085b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800859e:	f7fd fe4b 	bl	8006238 <HAL_GetTick>
 80085a2:	4602      	mov	r2, r0
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	1ad3      	subs	r3, r2, r3
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	d901      	bls.n	80085b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e1ef      	b.n	8008990 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80085b0:	4b32      	ldr	r3, [pc, #200]	@ (800867c <HAL_RCC_OscConfig+0x504>)
 80085b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80085b6:	f003 0302 	and.w	r3, r3, #2
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1ef      	bne.n	800859e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f003 0304 	and.w	r3, r3, #4
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f000 80a6 	beq.w	8008718 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80085cc:	2300      	movs	r3, #0
 80085ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80085d0:	4b2a      	ldr	r3, [pc, #168]	@ (800867c <HAL_RCC_OscConfig+0x504>)
 80085d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d10d      	bne.n	80085f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80085dc:	4b27      	ldr	r3, [pc, #156]	@ (800867c <HAL_RCC_OscConfig+0x504>)
 80085de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085e0:	4a26      	ldr	r2, [pc, #152]	@ (800867c <HAL_RCC_OscConfig+0x504>)
 80085e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80085e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80085e8:	4b24      	ldr	r3, [pc, #144]	@ (800867c <HAL_RCC_OscConfig+0x504>)
 80085ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80085f0:	60bb      	str	r3, [r7, #8]
 80085f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80085f4:	2301      	movs	r3, #1
 80085f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085f8:	4b21      	ldr	r3, [pc, #132]	@ (8008680 <HAL_RCC_OscConfig+0x508>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008600:	2b00      	cmp	r3, #0
 8008602:	d118      	bne.n	8008636 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008604:	4b1e      	ldr	r3, [pc, #120]	@ (8008680 <HAL_RCC_OscConfig+0x508>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a1d      	ldr	r2, [pc, #116]	@ (8008680 <HAL_RCC_OscConfig+0x508>)
 800860a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800860e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008610:	f7fd fe12 	bl	8006238 <HAL_GetTick>
 8008614:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008616:	e008      	b.n	800862a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008618:	f7fd fe0e 	bl	8006238 <HAL_GetTick>
 800861c:	4602      	mov	r2, r0
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	2b02      	cmp	r3, #2
 8008624:	d901      	bls.n	800862a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008626:	2303      	movs	r3, #3
 8008628:	e1b2      	b.n	8008990 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800862a:	4b15      	ldr	r3, [pc, #84]	@ (8008680 <HAL_RCC_OscConfig+0x508>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008632:	2b00      	cmp	r3, #0
 8008634:	d0f0      	beq.n	8008618 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	2b01      	cmp	r3, #1
 800863c:	d108      	bne.n	8008650 <HAL_RCC_OscConfig+0x4d8>
 800863e:	4b0f      	ldr	r3, [pc, #60]	@ (800867c <HAL_RCC_OscConfig+0x504>)
 8008640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008644:	4a0d      	ldr	r2, [pc, #52]	@ (800867c <HAL_RCC_OscConfig+0x504>)
 8008646:	f043 0301 	orr.w	r3, r3, #1
 800864a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800864e:	e029      	b.n	80086a4 <HAL_RCC_OscConfig+0x52c>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	2b05      	cmp	r3, #5
 8008656:	d115      	bne.n	8008684 <HAL_RCC_OscConfig+0x50c>
 8008658:	4b08      	ldr	r3, [pc, #32]	@ (800867c <HAL_RCC_OscConfig+0x504>)
 800865a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800865e:	4a07      	ldr	r2, [pc, #28]	@ (800867c <HAL_RCC_OscConfig+0x504>)
 8008660:	f043 0304 	orr.w	r3, r3, #4
 8008664:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008668:	4b04      	ldr	r3, [pc, #16]	@ (800867c <HAL_RCC_OscConfig+0x504>)
 800866a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800866e:	4a03      	ldr	r2, [pc, #12]	@ (800867c <HAL_RCC_OscConfig+0x504>)
 8008670:	f043 0301 	orr.w	r3, r3, #1
 8008674:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008678:	e014      	b.n	80086a4 <HAL_RCC_OscConfig+0x52c>
 800867a:	bf00      	nop
 800867c:	40021000 	.word	0x40021000
 8008680:	40007000 	.word	0x40007000
 8008684:	4b9a      	ldr	r3, [pc, #616]	@ (80088f0 <HAL_RCC_OscConfig+0x778>)
 8008686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800868a:	4a99      	ldr	r2, [pc, #612]	@ (80088f0 <HAL_RCC_OscConfig+0x778>)
 800868c:	f023 0301 	bic.w	r3, r3, #1
 8008690:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008694:	4b96      	ldr	r3, [pc, #600]	@ (80088f0 <HAL_RCC_OscConfig+0x778>)
 8008696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800869a:	4a95      	ldr	r2, [pc, #596]	@ (80088f0 <HAL_RCC_OscConfig+0x778>)
 800869c:	f023 0304 	bic.w	r3, r3, #4
 80086a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d016      	beq.n	80086da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086ac:	f7fd fdc4 	bl	8006238 <HAL_GetTick>
 80086b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80086b2:	e00a      	b.n	80086ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086b4:	f7fd fdc0 	bl	8006238 <HAL_GetTick>
 80086b8:	4602      	mov	r2, r0
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	1ad3      	subs	r3, r2, r3
 80086be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d901      	bls.n	80086ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80086c6:	2303      	movs	r3, #3
 80086c8:	e162      	b.n	8008990 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80086ca:	4b89      	ldr	r3, [pc, #548]	@ (80088f0 <HAL_RCC_OscConfig+0x778>)
 80086cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086d0:	f003 0302 	and.w	r3, r3, #2
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d0ed      	beq.n	80086b4 <HAL_RCC_OscConfig+0x53c>
 80086d8:	e015      	b.n	8008706 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086da:	f7fd fdad 	bl	8006238 <HAL_GetTick>
 80086de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80086e0:	e00a      	b.n	80086f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086e2:	f7fd fda9 	bl	8006238 <HAL_GetTick>
 80086e6:	4602      	mov	r2, r0
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	1ad3      	subs	r3, r2, r3
 80086ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d901      	bls.n	80086f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80086f4:	2303      	movs	r3, #3
 80086f6:	e14b      	b.n	8008990 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80086f8:	4b7d      	ldr	r3, [pc, #500]	@ (80088f0 <HAL_RCC_OscConfig+0x778>)
 80086fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086fe:	f003 0302 	and.w	r3, r3, #2
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1ed      	bne.n	80086e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008706:	7ffb      	ldrb	r3, [r7, #31]
 8008708:	2b01      	cmp	r3, #1
 800870a:	d105      	bne.n	8008718 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800870c:	4b78      	ldr	r3, [pc, #480]	@ (80088f0 <HAL_RCC_OscConfig+0x778>)
 800870e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008710:	4a77      	ldr	r2, [pc, #476]	@ (80088f0 <HAL_RCC_OscConfig+0x778>)
 8008712:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008716:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 0320 	and.w	r3, r3, #32
 8008720:	2b00      	cmp	r3, #0
 8008722:	d03c      	beq.n	800879e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008728:	2b00      	cmp	r3, #0
 800872a:	d01c      	beq.n	8008766 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800872c:	4b70      	ldr	r3, [pc, #448]	@ (80088f0 <HAL_RCC_OscConfig+0x778>)
 800872e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008732:	4a6f      	ldr	r2, [pc, #444]	@ (80088f0 <HAL_RCC_OscConfig+0x778>)
 8008734:	f043 0301 	orr.w	r3, r3, #1
 8008738:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800873c:	f7fd fd7c 	bl	8006238 <HAL_GetTick>
 8008740:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008742:	e008      	b.n	8008756 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008744:	f7fd fd78 	bl	8006238 <HAL_GetTick>
 8008748:	4602      	mov	r2, r0
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	2b02      	cmp	r3, #2
 8008750:	d901      	bls.n	8008756 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8008752:	2303      	movs	r3, #3
 8008754:	e11c      	b.n	8008990 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008756:	4b66      	ldr	r3, [pc, #408]	@ (80088f0 <HAL_RCC_OscConfig+0x778>)
 8008758:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800875c:	f003 0302 	and.w	r3, r3, #2
 8008760:	2b00      	cmp	r3, #0
 8008762:	d0ef      	beq.n	8008744 <HAL_RCC_OscConfig+0x5cc>
 8008764:	e01b      	b.n	800879e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008766:	4b62      	ldr	r3, [pc, #392]	@ (80088f0 <HAL_RCC_OscConfig+0x778>)
 8008768:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800876c:	4a60      	ldr	r2, [pc, #384]	@ (80088f0 <HAL_RCC_OscConfig+0x778>)
 800876e:	f023 0301 	bic.w	r3, r3, #1
 8008772:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008776:	f7fd fd5f 	bl	8006238 <HAL_GetTick>
 800877a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800877c:	e008      	b.n	8008790 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800877e:	f7fd fd5b 	bl	8006238 <HAL_GetTick>
 8008782:	4602      	mov	r2, r0
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	1ad3      	subs	r3, r2, r3
 8008788:	2b02      	cmp	r3, #2
 800878a:	d901      	bls.n	8008790 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800878c:	2303      	movs	r3, #3
 800878e:	e0ff      	b.n	8008990 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008790:	4b57      	ldr	r3, [pc, #348]	@ (80088f0 <HAL_RCC_OscConfig+0x778>)
 8008792:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008796:	f003 0302 	and.w	r3, r3, #2
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1ef      	bne.n	800877e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	f000 80f3 	beq.w	800898e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	f040 80c9 	bne.w	8008944 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80087b2:	4b4f      	ldr	r3, [pc, #316]	@ (80088f0 <HAL_RCC_OscConfig+0x778>)
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	f003 0203 	and.w	r2, r3, #3
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d12c      	bne.n	8008820 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087d0:	3b01      	subs	r3, #1
 80087d2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d123      	bne.n	8008820 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087e2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d11b      	bne.n	8008820 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087f2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d113      	bne.n	8008820 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008802:	085b      	lsrs	r3, r3, #1
 8008804:	3b01      	subs	r3, #1
 8008806:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008808:	429a      	cmp	r2, r3
 800880a:	d109      	bne.n	8008820 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008816:	085b      	lsrs	r3, r3, #1
 8008818:	3b01      	subs	r3, #1
 800881a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800881c:	429a      	cmp	r2, r3
 800881e:	d06b      	beq.n	80088f8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008820:	69bb      	ldr	r3, [r7, #24]
 8008822:	2b0c      	cmp	r3, #12
 8008824:	d062      	beq.n	80088ec <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008826:	4b32      	ldr	r3, [pc, #200]	@ (80088f0 <HAL_RCC_OscConfig+0x778>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800882e:	2b00      	cmp	r3, #0
 8008830:	d001      	beq.n	8008836 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e0ac      	b.n	8008990 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008836:	4b2e      	ldr	r3, [pc, #184]	@ (80088f0 <HAL_RCC_OscConfig+0x778>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a2d      	ldr	r2, [pc, #180]	@ (80088f0 <HAL_RCC_OscConfig+0x778>)
 800883c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008840:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008842:	f7fd fcf9 	bl	8006238 <HAL_GetTick>
 8008846:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008848:	e008      	b.n	800885c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800884a:	f7fd fcf5 	bl	8006238 <HAL_GetTick>
 800884e:	4602      	mov	r2, r0
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	1ad3      	subs	r3, r2, r3
 8008854:	2b02      	cmp	r3, #2
 8008856:	d901      	bls.n	800885c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8008858:	2303      	movs	r3, #3
 800885a:	e099      	b.n	8008990 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800885c:	4b24      	ldr	r3, [pc, #144]	@ (80088f0 <HAL_RCC_OscConfig+0x778>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1f0      	bne.n	800884a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008868:	4b21      	ldr	r3, [pc, #132]	@ (80088f0 <HAL_RCC_OscConfig+0x778>)
 800886a:	68da      	ldr	r2, [r3, #12]
 800886c:	4b21      	ldr	r3, [pc, #132]	@ (80088f4 <HAL_RCC_OscConfig+0x77c>)
 800886e:	4013      	ands	r3, r2
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008878:	3a01      	subs	r2, #1
 800887a:	0112      	lsls	r2, r2, #4
 800887c:	4311      	orrs	r1, r2
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008882:	0212      	lsls	r2, r2, #8
 8008884:	4311      	orrs	r1, r2
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800888a:	0852      	lsrs	r2, r2, #1
 800888c:	3a01      	subs	r2, #1
 800888e:	0552      	lsls	r2, r2, #21
 8008890:	4311      	orrs	r1, r2
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008896:	0852      	lsrs	r2, r2, #1
 8008898:	3a01      	subs	r2, #1
 800889a:	0652      	lsls	r2, r2, #25
 800889c:	4311      	orrs	r1, r2
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80088a2:	06d2      	lsls	r2, r2, #27
 80088a4:	430a      	orrs	r2, r1
 80088a6:	4912      	ldr	r1, [pc, #72]	@ (80088f0 <HAL_RCC_OscConfig+0x778>)
 80088a8:	4313      	orrs	r3, r2
 80088aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80088ac:	4b10      	ldr	r3, [pc, #64]	@ (80088f0 <HAL_RCC_OscConfig+0x778>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a0f      	ldr	r2, [pc, #60]	@ (80088f0 <HAL_RCC_OscConfig+0x778>)
 80088b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80088b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80088b8:	4b0d      	ldr	r3, [pc, #52]	@ (80088f0 <HAL_RCC_OscConfig+0x778>)
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	4a0c      	ldr	r2, [pc, #48]	@ (80088f0 <HAL_RCC_OscConfig+0x778>)
 80088be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80088c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80088c4:	f7fd fcb8 	bl	8006238 <HAL_GetTick>
 80088c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80088ca:	e008      	b.n	80088de <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088cc:	f7fd fcb4 	bl	8006238 <HAL_GetTick>
 80088d0:	4602      	mov	r2, r0
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	1ad3      	subs	r3, r2, r3
 80088d6:	2b02      	cmp	r3, #2
 80088d8:	d901      	bls.n	80088de <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80088da:	2303      	movs	r3, #3
 80088dc:	e058      	b.n	8008990 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80088de:	4b04      	ldr	r3, [pc, #16]	@ (80088f0 <HAL_RCC_OscConfig+0x778>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d0f0      	beq.n	80088cc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80088ea:	e050      	b.n	800898e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	e04f      	b.n	8008990 <HAL_RCC_OscConfig+0x818>
 80088f0:	40021000 	.word	0x40021000
 80088f4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80088f8:	4b27      	ldr	r3, [pc, #156]	@ (8008998 <HAL_RCC_OscConfig+0x820>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008900:	2b00      	cmp	r3, #0
 8008902:	d144      	bne.n	800898e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008904:	4b24      	ldr	r3, [pc, #144]	@ (8008998 <HAL_RCC_OscConfig+0x820>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a23      	ldr	r2, [pc, #140]	@ (8008998 <HAL_RCC_OscConfig+0x820>)
 800890a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800890e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008910:	4b21      	ldr	r3, [pc, #132]	@ (8008998 <HAL_RCC_OscConfig+0x820>)
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	4a20      	ldr	r2, [pc, #128]	@ (8008998 <HAL_RCC_OscConfig+0x820>)
 8008916:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800891a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800891c:	f7fd fc8c 	bl	8006238 <HAL_GetTick>
 8008920:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008922:	e008      	b.n	8008936 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008924:	f7fd fc88 	bl	8006238 <HAL_GetTick>
 8008928:	4602      	mov	r2, r0
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	1ad3      	subs	r3, r2, r3
 800892e:	2b02      	cmp	r3, #2
 8008930:	d901      	bls.n	8008936 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8008932:	2303      	movs	r3, #3
 8008934:	e02c      	b.n	8008990 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008936:	4b18      	ldr	r3, [pc, #96]	@ (8008998 <HAL_RCC_OscConfig+0x820>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800893e:	2b00      	cmp	r3, #0
 8008940:	d0f0      	beq.n	8008924 <HAL_RCC_OscConfig+0x7ac>
 8008942:	e024      	b.n	800898e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	2b0c      	cmp	r3, #12
 8008948:	d01f      	beq.n	800898a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800894a:	4b13      	ldr	r3, [pc, #76]	@ (8008998 <HAL_RCC_OscConfig+0x820>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a12      	ldr	r2, [pc, #72]	@ (8008998 <HAL_RCC_OscConfig+0x820>)
 8008950:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008954:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008956:	f7fd fc6f 	bl	8006238 <HAL_GetTick>
 800895a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800895c:	e008      	b.n	8008970 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800895e:	f7fd fc6b 	bl	8006238 <HAL_GetTick>
 8008962:	4602      	mov	r2, r0
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	1ad3      	subs	r3, r2, r3
 8008968:	2b02      	cmp	r3, #2
 800896a:	d901      	bls.n	8008970 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800896c:	2303      	movs	r3, #3
 800896e:	e00f      	b.n	8008990 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008970:	4b09      	ldr	r3, [pc, #36]	@ (8008998 <HAL_RCC_OscConfig+0x820>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008978:	2b00      	cmp	r3, #0
 800897a:	d1f0      	bne.n	800895e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800897c:	4b06      	ldr	r3, [pc, #24]	@ (8008998 <HAL_RCC_OscConfig+0x820>)
 800897e:	68da      	ldr	r2, [r3, #12]
 8008980:	4905      	ldr	r1, [pc, #20]	@ (8008998 <HAL_RCC_OscConfig+0x820>)
 8008982:	4b06      	ldr	r3, [pc, #24]	@ (800899c <HAL_RCC_OscConfig+0x824>)
 8008984:	4013      	ands	r3, r2
 8008986:	60cb      	str	r3, [r1, #12]
 8008988:	e001      	b.n	800898e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	e000      	b.n	8008990 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	3720      	adds	r7, #32
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}
 8008998:	40021000 	.word	0x40021000
 800899c:	feeefffc 	.word	0xfeeefffc

080089a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d101      	bne.n	80089b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	e0e7      	b.n	8008b84 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80089b4:	4b75      	ldr	r3, [pc, #468]	@ (8008b8c <HAL_RCC_ClockConfig+0x1ec>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f003 0307 	and.w	r3, r3, #7
 80089bc:	683a      	ldr	r2, [r7, #0]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d910      	bls.n	80089e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089c2:	4b72      	ldr	r3, [pc, #456]	@ (8008b8c <HAL_RCC_ClockConfig+0x1ec>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f023 0207 	bic.w	r2, r3, #7
 80089ca:	4970      	ldr	r1, [pc, #448]	@ (8008b8c <HAL_RCC_ClockConfig+0x1ec>)
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089d2:	4b6e      	ldr	r3, [pc, #440]	@ (8008b8c <HAL_RCC_ClockConfig+0x1ec>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f003 0307 	and.w	r3, r3, #7
 80089da:	683a      	ldr	r2, [r7, #0]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d001      	beq.n	80089e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	e0cf      	b.n	8008b84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f003 0302 	and.w	r3, r3, #2
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d010      	beq.n	8008a12 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	689a      	ldr	r2, [r3, #8]
 80089f4:	4b66      	ldr	r3, [pc, #408]	@ (8008b90 <HAL_RCC_ClockConfig+0x1f0>)
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d908      	bls.n	8008a12 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a00:	4b63      	ldr	r3, [pc, #396]	@ (8008b90 <HAL_RCC_ClockConfig+0x1f0>)
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	4960      	ldr	r1, [pc, #384]	@ (8008b90 <HAL_RCC_ClockConfig+0x1f0>)
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f003 0301 	and.w	r3, r3, #1
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d04c      	beq.n	8008ab8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	2b03      	cmp	r3, #3
 8008a24:	d107      	bne.n	8008a36 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a26:	4b5a      	ldr	r3, [pc, #360]	@ (8008b90 <HAL_RCC_ClockConfig+0x1f0>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d121      	bne.n	8008a76 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e0a6      	b.n	8008b84 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	2b02      	cmp	r3, #2
 8008a3c:	d107      	bne.n	8008a4e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008a3e:	4b54      	ldr	r3, [pc, #336]	@ (8008b90 <HAL_RCC_ClockConfig+0x1f0>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d115      	bne.n	8008a76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e09a      	b.n	8008b84 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d107      	bne.n	8008a66 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008a56:	4b4e      	ldr	r3, [pc, #312]	@ (8008b90 <HAL_RCC_ClockConfig+0x1f0>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f003 0302 	and.w	r3, r3, #2
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d109      	bne.n	8008a76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	e08e      	b.n	8008b84 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008a66:	4b4a      	ldr	r3, [pc, #296]	@ (8008b90 <HAL_RCC_ClockConfig+0x1f0>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d101      	bne.n	8008a76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	e086      	b.n	8008b84 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a76:	4b46      	ldr	r3, [pc, #280]	@ (8008b90 <HAL_RCC_ClockConfig+0x1f0>)
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	f023 0203 	bic.w	r2, r3, #3
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	4943      	ldr	r1, [pc, #268]	@ (8008b90 <HAL_RCC_ClockConfig+0x1f0>)
 8008a84:	4313      	orrs	r3, r2
 8008a86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a88:	f7fd fbd6 	bl	8006238 <HAL_GetTick>
 8008a8c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a8e:	e00a      	b.n	8008aa6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a90:	f7fd fbd2 	bl	8006238 <HAL_GetTick>
 8008a94:	4602      	mov	r2, r0
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	1ad3      	subs	r3, r2, r3
 8008a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d901      	bls.n	8008aa6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8008aa2:	2303      	movs	r3, #3
 8008aa4:	e06e      	b.n	8008b84 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008aa6:	4b3a      	ldr	r3, [pc, #232]	@ (8008b90 <HAL_RCC_ClockConfig+0x1f0>)
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	f003 020c 	and.w	r2, r3, #12
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d1eb      	bne.n	8008a90 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 0302 	and.w	r3, r3, #2
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d010      	beq.n	8008ae6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	689a      	ldr	r2, [r3, #8]
 8008ac8:	4b31      	ldr	r3, [pc, #196]	@ (8008b90 <HAL_RCC_ClockConfig+0x1f0>)
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d208      	bcs.n	8008ae6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ad4:	4b2e      	ldr	r3, [pc, #184]	@ (8008b90 <HAL_RCC_ClockConfig+0x1f0>)
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	492b      	ldr	r1, [pc, #172]	@ (8008b90 <HAL_RCC_ClockConfig+0x1f0>)
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008ae6:	4b29      	ldr	r3, [pc, #164]	@ (8008b8c <HAL_RCC_ClockConfig+0x1ec>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f003 0307 	and.w	r3, r3, #7
 8008aee:	683a      	ldr	r2, [r7, #0]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d210      	bcs.n	8008b16 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008af4:	4b25      	ldr	r3, [pc, #148]	@ (8008b8c <HAL_RCC_ClockConfig+0x1ec>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f023 0207 	bic.w	r2, r3, #7
 8008afc:	4923      	ldr	r1, [pc, #140]	@ (8008b8c <HAL_RCC_ClockConfig+0x1ec>)
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b04:	4b21      	ldr	r3, [pc, #132]	@ (8008b8c <HAL_RCC_ClockConfig+0x1ec>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 0307 	and.w	r3, r3, #7
 8008b0c:	683a      	ldr	r2, [r7, #0]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d001      	beq.n	8008b16 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e036      	b.n	8008b84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f003 0304 	and.w	r3, r3, #4
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d008      	beq.n	8008b34 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b22:	4b1b      	ldr	r3, [pc, #108]	@ (8008b90 <HAL_RCC_ClockConfig+0x1f0>)
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	4918      	ldr	r1, [pc, #96]	@ (8008b90 <HAL_RCC_ClockConfig+0x1f0>)
 8008b30:	4313      	orrs	r3, r2
 8008b32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f003 0308 	and.w	r3, r3, #8
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d009      	beq.n	8008b54 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b40:	4b13      	ldr	r3, [pc, #76]	@ (8008b90 <HAL_RCC_ClockConfig+0x1f0>)
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	691b      	ldr	r3, [r3, #16]
 8008b4c:	00db      	lsls	r3, r3, #3
 8008b4e:	4910      	ldr	r1, [pc, #64]	@ (8008b90 <HAL_RCC_ClockConfig+0x1f0>)
 8008b50:	4313      	orrs	r3, r2
 8008b52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008b54:	f000 f824 	bl	8008ba0 <HAL_RCC_GetSysClockFreq>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8008b90 <HAL_RCC_ClockConfig+0x1f0>)
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	091b      	lsrs	r3, r3, #4
 8008b60:	f003 030f 	and.w	r3, r3, #15
 8008b64:	490b      	ldr	r1, [pc, #44]	@ (8008b94 <HAL_RCC_ClockConfig+0x1f4>)
 8008b66:	5ccb      	ldrb	r3, [r1, r3]
 8008b68:	f003 031f 	and.w	r3, r3, #31
 8008b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b70:	4a09      	ldr	r2, [pc, #36]	@ (8008b98 <HAL_RCC_ClockConfig+0x1f8>)
 8008b72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008b74:	4b09      	ldr	r3, [pc, #36]	@ (8008b9c <HAL_RCC_ClockConfig+0x1fc>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7fd fb0d 	bl	8006198 <HAL_InitTick>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	72fb      	strb	r3, [r7, #11]

  return status;
 8008b82:	7afb      	ldrb	r3, [r7, #11]
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3710      	adds	r7, #16
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	40022000 	.word	0x40022000
 8008b90:	40021000 	.word	0x40021000
 8008b94:	0800c0f8 	.word	0x0800c0f8
 8008b98:	20000048 	.word	0x20000048
 8008b9c:	2000004c 	.word	0x2000004c

08008ba0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b089      	sub	sp, #36	@ 0x24
 8008ba4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	61fb      	str	r3, [r7, #28]
 8008baa:	2300      	movs	r3, #0
 8008bac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008bae:	4b3e      	ldr	r3, [pc, #248]	@ (8008ca8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	f003 030c 	and.w	r3, r3, #12
 8008bb6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008bb8:	4b3b      	ldr	r3, [pc, #236]	@ (8008ca8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	f003 0303 	and.w	r3, r3, #3
 8008bc0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d005      	beq.n	8008bd4 <HAL_RCC_GetSysClockFreq+0x34>
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	2b0c      	cmp	r3, #12
 8008bcc:	d121      	bne.n	8008c12 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d11e      	bne.n	8008c12 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008bd4:	4b34      	ldr	r3, [pc, #208]	@ (8008ca8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f003 0308 	and.w	r3, r3, #8
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d107      	bne.n	8008bf0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008be0:	4b31      	ldr	r3, [pc, #196]	@ (8008ca8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008be6:	0a1b      	lsrs	r3, r3, #8
 8008be8:	f003 030f 	and.w	r3, r3, #15
 8008bec:	61fb      	str	r3, [r7, #28]
 8008bee:	e005      	b.n	8008bfc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008bf0:	4b2d      	ldr	r3, [pc, #180]	@ (8008ca8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	091b      	lsrs	r3, r3, #4
 8008bf6:	f003 030f 	and.w	r3, r3, #15
 8008bfa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008bfc:	4a2b      	ldr	r2, [pc, #172]	@ (8008cac <HAL_RCC_GetSysClockFreq+0x10c>)
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c04:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d10d      	bne.n	8008c28 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008c0c:	69fb      	ldr	r3, [r7, #28]
 8008c0e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008c10:	e00a      	b.n	8008c28 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	2b04      	cmp	r3, #4
 8008c16:	d102      	bne.n	8008c1e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008c18:	4b25      	ldr	r3, [pc, #148]	@ (8008cb0 <HAL_RCC_GetSysClockFreq+0x110>)
 8008c1a:	61bb      	str	r3, [r7, #24]
 8008c1c:	e004      	b.n	8008c28 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	2b08      	cmp	r3, #8
 8008c22:	d101      	bne.n	8008c28 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008c24:	4b23      	ldr	r3, [pc, #140]	@ (8008cb4 <HAL_RCC_GetSysClockFreq+0x114>)
 8008c26:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	2b0c      	cmp	r3, #12
 8008c2c:	d134      	bne.n	8008c98 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8008ca8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008c30:	68db      	ldr	r3, [r3, #12]
 8008c32:	f003 0303 	and.w	r3, r3, #3
 8008c36:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d003      	beq.n	8008c46 <HAL_RCC_GetSysClockFreq+0xa6>
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	2b03      	cmp	r3, #3
 8008c42:	d003      	beq.n	8008c4c <HAL_RCC_GetSysClockFreq+0xac>
 8008c44:	e005      	b.n	8008c52 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008c46:	4b1a      	ldr	r3, [pc, #104]	@ (8008cb0 <HAL_RCC_GetSysClockFreq+0x110>)
 8008c48:	617b      	str	r3, [r7, #20]
      break;
 8008c4a:	e005      	b.n	8008c58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008c4c:	4b19      	ldr	r3, [pc, #100]	@ (8008cb4 <HAL_RCC_GetSysClockFreq+0x114>)
 8008c4e:	617b      	str	r3, [r7, #20]
      break;
 8008c50:	e002      	b.n	8008c58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	617b      	str	r3, [r7, #20]
      break;
 8008c56:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008c58:	4b13      	ldr	r3, [pc, #76]	@ (8008ca8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	091b      	lsrs	r3, r3, #4
 8008c5e:	f003 0307 	and.w	r3, r3, #7
 8008c62:	3301      	adds	r3, #1
 8008c64:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008c66:	4b10      	ldr	r3, [pc, #64]	@ (8008ca8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	0a1b      	lsrs	r3, r3, #8
 8008c6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c70:	697a      	ldr	r2, [r7, #20]
 8008c72:	fb03 f202 	mul.w	r2, r3, r2
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c7c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8008ca8 <HAL_RCC_GetSysClockFreq+0x108>)
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	0e5b      	lsrs	r3, r3, #25
 8008c84:	f003 0303 	and.w	r3, r3, #3
 8008c88:	3301      	adds	r3, #1
 8008c8a:	005b      	lsls	r3, r3, #1
 8008c8c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008c8e:	697a      	ldr	r2, [r7, #20]
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c96:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008c98:	69bb      	ldr	r3, [r7, #24]
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3724      	adds	r7, #36	@ 0x24
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr
 8008ca6:	bf00      	nop
 8008ca8:	40021000 	.word	0x40021000
 8008cac:	0800c110 	.word	0x0800c110
 8008cb0:	00f42400 	.word	0x00f42400
 8008cb4:	007a1200 	.word	0x007a1200

08008cb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008cbc:	4b03      	ldr	r3, [pc, #12]	@ (8008ccc <HAL_RCC_GetHCLKFreq+0x14>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	20000048 	.word	0x20000048

08008cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008cd4:	f7ff fff0 	bl	8008cb8 <HAL_RCC_GetHCLKFreq>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	4b06      	ldr	r3, [pc, #24]	@ (8008cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	0a1b      	lsrs	r3, r3, #8
 8008ce0:	f003 0307 	and.w	r3, r3, #7
 8008ce4:	4904      	ldr	r1, [pc, #16]	@ (8008cf8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008ce6:	5ccb      	ldrb	r3, [r1, r3]
 8008ce8:	f003 031f 	and.w	r3, r3, #31
 8008cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	40021000 	.word	0x40021000
 8008cf8:	0800c108 	.word	0x0800c108

08008cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008d00:	f7ff ffda 	bl	8008cb8 <HAL_RCC_GetHCLKFreq>
 8008d04:	4602      	mov	r2, r0
 8008d06:	4b06      	ldr	r3, [pc, #24]	@ (8008d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	0adb      	lsrs	r3, r3, #11
 8008d0c:	f003 0307 	and.w	r3, r3, #7
 8008d10:	4904      	ldr	r1, [pc, #16]	@ (8008d24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008d12:	5ccb      	ldrb	r3, [r1, r3]
 8008d14:	f003 031f 	and.w	r3, r3, #31
 8008d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	40021000 	.word	0x40021000
 8008d24:	0800c108 	.word	0x0800c108

08008d28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b086      	sub	sp, #24
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008d30:	2300      	movs	r3, #0
 8008d32:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008d34:	4b2a      	ldr	r3, [pc, #168]	@ (8008de0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d003      	beq.n	8008d48 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008d40:	f7ff f9b6 	bl	80080b0 <HAL_PWREx_GetVoltageRange>
 8008d44:	6178      	str	r0, [r7, #20]
 8008d46:	e014      	b.n	8008d72 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008d48:	4b25      	ldr	r3, [pc, #148]	@ (8008de0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d4c:	4a24      	ldr	r2, [pc, #144]	@ (8008de0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008d4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d52:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d54:	4b22      	ldr	r3, [pc, #136]	@ (8008de0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d5c:	60fb      	str	r3, [r7, #12]
 8008d5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008d60:	f7ff f9a6 	bl	80080b0 <HAL_PWREx_GetVoltageRange>
 8008d64:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008d66:	4b1e      	ldr	r3, [pc, #120]	@ (8008de0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d6a:	4a1d      	ldr	r2, [pc, #116]	@ (8008de0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008d6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d70:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d78:	d10b      	bne.n	8008d92 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2b80      	cmp	r3, #128	@ 0x80
 8008d7e:	d919      	bls.n	8008db4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2ba0      	cmp	r3, #160	@ 0xa0
 8008d84:	d902      	bls.n	8008d8c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008d86:	2302      	movs	r3, #2
 8008d88:	613b      	str	r3, [r7, #16]
 8008d8a:	e013      	b.n	8008db4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	613b      	str	r3, [r7, #16]
 8008d90:	e010      	b.n	8008db4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2b80      	cmp	r3, #128	@ 0x80
 8008d96:	d902      	bls.n	8008d9e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008d98:	2303      	movs	r3, #3
 8008d9a:	613b      	str	r3, [r7, #16]
 8008d9c:	e00a      	b.n	8008db4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2b80      	cmp	r3, #128	@ 0x80
 8008da2:	d102      	bne.n	8008daa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008da4:	2302      	movs	r3, #2
 8008da6:	613b      	str	r3, [r7, #16]
 8008da8:	e004      	b.n	8008db4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2b70      	cmp	r3, #112	@ 0x70
 8008dae:	d101      	bne.n	8008db4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008db0:	2301      	movs	r3, #1
 8008db2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008db4:	4b0b      	ldr	r3, [pc, #44]	@ (8008de4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f023 0207 	bic.w	r2, r3, #7
 8008dbc:	4909      	ldr	r1, [pc, #36]	@ (8008de4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008dc4:	4b07      	ldr	r3, [pc, #28]	@ (8008de4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f003 0307 	and.w	r3, r3, #7
 8008dcc:	693a      	ldr	r2, [r7, #16]
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d001      	beq.n	8008dd6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e000      	b.n	8008dd8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3718      	adds	r7, #24
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	40021000 	.word	0x40021000
 8008de4:	40022000 	.word	0x40022000

08008de8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b086      	sub	sp, #24
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008df0:	2300      	movs	r3, #0
 8008df2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008df4:	2300      	movs	r3, #0
 8008df6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d031      	beq.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e08:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008e0c:	d01a      	beq.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8008e0e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008e12:	d814      	bhi.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d009      	beq.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008e18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008e1c:	d10f      	bne.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8008e1e:	4b5d      	ldr	r3, [pc, #372]	@ (8008f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	4a5c      	ldr	r2, [pc, #368]	@ (8008f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e28:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008e2a:	e00c      	b.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	3304      	adds	r3, #4
 8008e30:	2100      	movs	r1, #0
 8008e32:	4618      	mov	r0, r3
 8008e34:	f000 f9ce 	bl	80091d4 <RCCEx_PLLSAI1_Config>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008e3c:	e003      	b.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	74fb      	strb	r3, [r7, #19]
      break;
 8008e42:	e000      	b.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8008e44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e46:	7cfb      	ldrb	r3, [r7, #19]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d10b      	bne.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008e4c:	4b51      	ldr	r3, [pc, #324]	@ (8008f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e52:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e5a:	494e      	ldr	r1, [pc, #312]	@ (8008f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8008e62:	e001      	b.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e64:	7cfb      	ldrb	r3, [r7, #19]
 8008e66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	f000 809e 	beq.w	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008e76:	2300      	movs	r3, #0
 8008e78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008e7a:	4b46      	ldr	r3, [pc, #280]	@ (8008f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d101      	bne.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8008e86:	2301      	movs	r3, #1
 8008e88:	e000      	b.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00d      	beq.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e90:	4b40      	ldr	r3, [pc, #256]	@ (8008f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e94:	4a3f      	ldr	r2, [pc, #252]	@ (8008f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008e96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e9c:	4b3d      	ldr	r3, [pc, #244]	@ (8008f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ea0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ea4:	60bb      	str	r3, [r7, #8]
 8008ea6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008eac:	4b3a      	ldr	r3, [pc, #232]	@ (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a39      	ldr	r2, [pc, #228]	@ (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008eb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008eb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008eb8:	f7fd f9be 	bl	8006238 <HAL_GetTick>
 8008ebc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008ebe:	e009      	b.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ec0:	f7fd f9ba 	bl	8006238 <HAL_GetTick>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	1ad3      	subs	r3, r2, r3
 8008eca:	2b02      	cmp	r3, #2
 8008ecc:	d902      	bls.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8008ece:	2303      	movs	r3, #3
 8008ed0:	74fb      	strb	r3, [r7, #19]
        break;
 8008ed2:	e005      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008ed4:	4b30      	ldr	r3, [pc, #192]	@ (8008f98 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d0ef      	beq.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8008ee0:	7cfb      	ldrb	r3, [r7, #19]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d15a      	bne.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008ee6:	4b2b      	ldr	r3, [pc, #172]	@ (8008f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008eec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ef0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d01e      	beq.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008efc:	697a      	ldr	r2, [r7, #20]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d019      	beq.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008f02:	4b24      	ldr	r3, [pc, #144]	@ (8008f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f0c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008f0e:	4b21      	ldr	r3, [pc, #132]	@ (8008f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f14:	4a1f      	ldr	r2, [pc, #124]	@ (8008f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008f16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8008f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f24:	4a1b      	ldr	r2, [pc, #108]	@ (8008f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008f26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008f2e:	4a19      	ldr	r2, [pc, #100]	@ (8008f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	f003 0301 	and.w	r3, r3, #1
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d016      	beq.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f40:	f7fd f97a 	bl	8006238 <HAL_GetTick>
 8008f44:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008f46:	e00b      	b.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f48:	f7fd f976 	bl	8006238 <HAL_GetTick>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	1ad3      	subs	r3, r2, r3
 8008f52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d902      	bls.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8008f5a:	2303      	movs	r3, #3
 8008f5c:	74fb      	strb	r3, [r7, #19]
            break;
 8008f5e:	e006      	b.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008f60:	4b0c      	ldr	r3, [pc, #48]	@ (8008f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f66:	f003 0302 	and.w	r3, r3, #2
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d0ec      	beq.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8008f6e:	7cfb      	ldrb	r3, [r7, #19]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d10b      	bne.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008f74:	4b07      	ldr	r3, [pc, #28]	@ (8008f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f7a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f82:	4904      	ldr	r1, [pc, #16]	@ (8008f94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008f84:	4313      	orrs	r3, r2
 8008f86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008f8a:	e009      	b.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008f8c:	7cfb      	ldrb	r3, [r7, #19]
 8008f8e:	74bb      	strb	r3, [r7, #18]
 8008f90:	e006      	b.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8008f92:	bf00      	nop
 8008f94:	40021000 	.word	0x40021000
 8008f98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f9c:	7cfb      	ldrb	r3, [r7, #19]
 8008f9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008fa0:	7c7b      	ldrb	r3, [r7, #17]
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d105      	bne.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008fa6:	4b8a      	ldr	r3, [pc, #552]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008faa:	4a89      	ldr	r2, [pc, #548]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008fac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008fb0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f003 0301 	and.w	r3, r3, #1
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00a      	beq.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008fbe:	4b84      	ldr	r3, [pc, #528]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fc4:	f023 0203 	bic.w	r2, r3, #3
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a1b      	ldr	r3, [r3, #32]
 8008fcc:	4980      	ldr	r1, [pc, #512]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 0302 	and.w	r3, r3, #2
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00a      	beq.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008fe0:	4b7b      	ldr	r3, [pc, #492]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fe6:	f023 020c 	bic.w	r2, r3, #12
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fee:	4978      	ldr	r1, [pc, #480]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f003 0320 	and.w	r3, r3, #32
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00a      	beq.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009002:	4b73      	ldr	r3, [pc, #460]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009008:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009010:	496f      	ldr	r1, [pc, #444]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009012:	4313      	orrs	r3, r2
 8009014:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009020:	2b00      	cmp	r3, #0
 8009022:	d00a      	beq.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009024:	4b6a      	ldr	r3, [pc, #424]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800902a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009032:	4967      	ldr	r1, [pc, #412]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009034:	4313      	orrs	r3, r2
 8009036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009042:	2b00      	cmp	r3, #0
 8009044:	d00a      	beq.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009046:	4b62      	ldr	r3, [pc, #392]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800904c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009054:	495e      	ldr	r1, [pc, #376]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009056:	4313      	orrs	r3, r2
 8009058:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00a      	beq.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009068:	4b59      	ldr	r3, [pc, #356]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800906a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800906e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009076:	4956      	ldr	r1, [pc, #344]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009078:	4313      	orrs	r3, r2
 800907a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00a      	beq.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800908a:	4b51      	ldr	r3, [pc, #324]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800908c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009090:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009098:	494d      	ldr	r1, [pc, #308]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800909a:	4313      	orrs	r3, r2
 800909c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d028      	beq.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80090ac:	4b48      	ldr	r3, [pc, #288]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80090ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090ba:	4945      	ldr	r1, [pc, #276]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80090bc:	4313      	orrs	r3, r2
 80090be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80090ca:	d106      	bne.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80090cc:	4b40      	ldr	r3, [pc, #256]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	4a3f      	ldr	r2, [pc, #252]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80090d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80090d6:	60d3      	str	r3, [r2, #12]
 80090d8:	e011      	b.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80090e2:	d10c      	bne.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	3304      	adds	r3, #4
 80090e8:	2101      	movs	r1, #1
 80090ea:	4618      	mov	r0, r3
 80090ec:	f000 f872 	bl	80091d4 <RCCEx_PLLSAI1_Config>
 80090f0:	4603      	mov	r3, r0
 80090f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80090f4:	7cfb      	ldrb	r3, [r7, #19]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d001      	beq.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80090fa:	7cfb      	ldrb	r3, [r7, #19]
 80090fc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009106:	2b00      	cmp	r3, #0
 8009108:	d028      	beq.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800910a:	4b31      	ldr	r3, [pc, #196]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800910c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009110:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009118:	492d      	ldr	r1, [pc, #180]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800911a:	4313      	orrs	r3, r2
 800911c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009124:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009128:	d106      	bne.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800912a:	4b29      	ldr	r3, [pc, #164]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	4a28      	ldr	r2, [pc, #160]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009130:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009134:	60d3      	str	r3, [r2, #12]
 8009136:	e011      	b.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800913c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009140:	d10c      	bne.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	3304      	adds	r3, #4
 8009146:	2101      	movs	r1, #1
 8009148:	4618      	mov	r0, r3
 800914a:	f000 f843 	bl	80091d4 <RCCEx_PLLSAI1_Config>
 800914e:	4603      	mov	r3, r0
 8009150:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009152:	7cfb      	ldrb	r3, [r7, #19]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d001      	beq.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8009158:	7cfb      	ldrb	r3, [r7, #19]
 800915a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009164:	2b00      	cmp	r3, #0
 8009166:	d01c      	beq.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009168:	4b19      	ldr	r3, [pc, #100]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800916a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800916e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009176:	4916      	ldr	r1, [pc, #88]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009178:	4313      	orrs	r3, r2
 800917a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009182:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009186:	d10c      	bne.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	3304      	adds	r3, #4
 800918c:	2102      	movs	r1, #2
 800918e:	4618      	mov	r0, r3
 8009190:	f000 f820 	bl	80091d4 <RCCEx_PLLSAI1_Config>
 8009194:	4603      	mov	r3, r0
 8009196:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009198:	7cfb      	ldrb	r3, [r7, #19]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d001      	beq.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800919e:	7cfb      	ldrb	r3, [r7, #19]
 80091a0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d00a      	beq.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80091ae:	4b08      	ldr	r3, [pc, #32]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80091b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091b4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091bc:	4904      	ldr	r1, [pc, #16]	@ (80091d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80091be:	4313      	orrs	r3, r2
 80091c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80091c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3718      	adds	r7, #24
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	40021000 	.word	0x40021000

080091d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80091de:	2300      	movs	r3, #0
 80091e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80091e2:	4b74      	ldr	r3, [pc, #464]	@ (80093b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	f003 0303 	and.w	r3, r3, #3
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d018      	beq.n	8009220 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80091ee:	4b71      	ldr	r3, [pc, #452]	@ (80093b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	f003 0203 	and.w	r2, r3, #3
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d10d      	bne.n	800921a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
       ||
 8009202:	2b00      	cmp	r3, #0
 8009204:	d009      	beq.n	800921a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8009206:	4b6b      	ldr	r3, [pc, #428]	@ (80093b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	091b      	lsrs	r3, r3, #4
 800920c:	f003 0307 	and.w	r3, r3, #7
 8009210:	1c5a      	adds	r2, r3, #1
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	685b      	ldr	r3, [r3, #4]
       ||
 8009216:	429a      	cmp	r2, r3
 8009218:	d047      	beq.n	80092aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	73fb      	strb	r3, [r7, #15]
 800921e:	e044      	b.n	80092aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2b03      	cmp	r3, #3
 8009226:	d018      	beq.n	800925a <RCCEx_PLLSAI1_Config+0x86>
 8009228:	2b03      	cmp	r3, #3
 800922a:	d825      	bhi.n	8009278 <RCCEx_PLLSAI1_Config+0xa4>
 800922c:	2b01      	cmp	r3, #1
 800922e:	d002      	beq.n	8009236 <RCCEx_PLLSAI1_Config+0x62>
 8009230:	2b02      	cmp	r3, #2
 8009232:	d009      	beq.n	8009248 <RCCEx_PLLSAI1_Config+0x74>
 8009234:	e020      	b.n	8009278 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009236:	4b5f      	ldr	r3, [pc, #380]	@ (80093b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f003 0302 	and.w	r3, r3, #2
 800923e:	2b00      	cmp	r3, #0
 8009240:	d11d      	bne.n	800927e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009246:	e01a      	b.n	800927e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009248:	4b5a      	ldr	r3, [pc, #360]	@ (80093b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009250:	2b00      	cmp	r3, #0
 8009252:	d116      	bne.n	8009282 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8009254:	2301      	movs	r3, #1
 8009256:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009258:	e013      	b.n	8009282 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800925a:	4b56      	ldr	r3, [pc, #344]	@ (80093b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009262:	2b00      	cmp	r3, #0
 8009264:	d10f      	bne.n	8009286 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009266:	4b53      	ldr	r3, [pc, #332]	@ (80093b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800926e:	2b00      	cmp	r3, #0
 8009270:	d109      	bne.n	8009286 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8009272:	2301      	movs	r3, #1
 8009274:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009276:	e006      	b.n	8009286 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009278:	2301      	movs	r3, #1
 800927a:	73fb      	strb	r3, [r7, #15]
      break;
 800927c:	e004      	b.n	8009288 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800927e:	bf00      	nop
 8009280:	e002      	b.n	8009288 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009282:	bf00      	nop
 8009284:	e000      	b.n	8009288 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009286:	bf00      	nop
    }

    if(status == HAL_OK)
 8009288:	7bfb      	ldrb	r3, [r7, #15]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d10d      	bne.n	80092aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800928e:	4b49      	ldr	r3, [pc, #292]	@ (80093b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009290:	68db      	ldr	r3, [r3, #12]
 8009292:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6819      	ldr	r1, [r3, #0]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	3b01      	subs	r3, #1
 80092a0:	011b      	lsls	r3, r3, #4
 80092a2:	430b      	orrs	r3, r1
 80092a4:	4943      	ldr	r1, [pc, #268]	@ (80093b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80092a6:	4313      	orrs	r3, r2
 80092a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80092aa:	7bfb      	ldrb	r3, [r7, #15]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d17c      	bne.n	80093aa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80092b0:	4b40      	ldr	r3, [pc, #256]	@ (80093b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a3f      	ldr	r2, [pc, #252]	@ (80093b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80092b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80092ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092bc:	f7fc ffbc 	bl	8006238 <HAL_GetTick>
 80092c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80092c2:	e009      	b.n	80092d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80092c4:	f7fc ffb8 	bl	8006238 <HAL_GetTick>
 80092c8:	4602      	mov	r2, r0
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	1ad3      	subs	r3, r2, r3
 80092ce:	2b02      	cmp	r3, #2
 80092d0:	d902      	bls.n	80092d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80092d2:	2303      	movs	r3, #3
 80092d4:	73fb      	strb	r3, [r7, #15]
        break;
 80092d6:	e005      	b.n	80092e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80092d8:	4b36      	ldr	r3, [pc, #216]	@ (80093b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d1ef      	bne.n	80092c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80092e4:	7bfb      	ldrb	r3, [r7, #15]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d15f      	bne.n	80093aa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d110      	bne.n	8009312 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80092f0:	4b30      	ldr	r3, [pc, #192]	@ (80093b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80092f2:	691b      	ldr	r3, [r3, #16]
 80092f4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80092f8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	6892      	ldr	r2, [r2, #8]
 8009300:	0211      	lsls	r1, r2, #8
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	68d2      	ldr	r2, [r2, #12]
 8009306:	06d2      	lsls	r2, r2, #27
 8009308:	430a      	orrs	r2, r1
 800930a:	492a      	ldr	r1, [pc, #168]	@ (80093b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800930c:	4313      	orrs	r3, r2
 800930e:	610b      	str	r3, [r1, #16]
 8009310:	e027      	b.n	8009362 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	2b01      	cmp	r3, #1
 8009316:	d112      	bne.n	800933e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009318:	4b26      	ldr	r3, [pc, #152]	@ (80093b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800931a:	691b      	ldr	r3, [r3, #16]
 800931c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8009320:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	6892      	ldr	r2, [r2, #8]
 8009328:	0211      	lsls	r1, r2, #8
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	6912      	ldr	r2, [r2, #16]
 800932e:	0852      	lsrs	r2, r2, #1
 8009330:	3a01      	subs	r2, #1
 8009332:	0552      	lsls	r2, r2, #21
 8009334:	430a      	orrs	r2, r1
 8009336:	491f      	ldr	r1, [pc, #124]	@ (80093b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009338:	4313      	orrs	r3, r2
 800933a:	610b      	str	r3, [r1, #16]
 800933c:	e011      	b.n	8009362 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800933e:	4b1d      	ldr	r3, [pc, #116]	@ (80093b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009340:	691b      	ldr	r3, [r3, #16]
 8009342:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8009346:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	6892      	ldr	r2, [r2, #8]
 800934e:	0211      	lsls	r1, r2, #8
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	6952      	ldr	r2, [r2, #20]
 8009354:	0852      	lsrs	r2, r2, #1
 8009356:	3a01      	subs	r2, #1
 8009358:	0652      	lsls	r2, r2, #25
 800935a:	430a      	orrs	r2, r1
 800935c:	4915      	ldr	r1, [pc, #84]	@ (80093b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800935e:	4313      	orrs	r3, r2
 8009360:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009362:	4b14      	ldr	r3, [pc, #80]	@ (80093b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a13      	ldr	r2, [pc, #76]	@ (80093b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009368:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800936c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800936e:	f7fc ff63 	bl	8006238 <HAL_GetTick>
 8009372:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009374:	e009      	b.n	800938a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009376:	f7fc ff5f 	bl	8006238 <HAL_GetTick>
 800937a:	4602      	mov	r2, r0
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	1ad3      	subs	r3, r2, r3
 8009380:	2b02      	cmp	r3, #2
 8009382:	d902      	bls.n	800938a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8009384:	2303      	movs	r3, #3
 8009386:	73fb      	strb	r3, [r7, #15]
          break;
 8009388:	e005      	b.n	8009396 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800938a:	4b0a      	ldr	r3, [pc, #40]	@ (80093b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009392:	2b00      	cmp	r3, #0
 8009394:	d0ef      	beq.n	8009376 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8009396:	7bfb      	ldrb	r3, [r7, #15]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d106      	bne.n	80093aa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800939c:	4b05      	ldr	r3, [pc, #20]	@ (80093b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800939e:	691a      	ldr	r2, [r3, #16]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	699b      	ldr	r3, [r3, #24]
 80093a4:	4903      	ldr	r1, [pc, #12]	@ (80093b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80093a6:	4313      	orrs	r3, r2
 80093a8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80093aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	40021000 	.word	0x40021000

080093b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d101      	bne.n	80093ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	e095      	b.n	80094f6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d108      	bne.n	80093e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80093da:	d009      	beq.n	80093f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	61da      	str	r2, [r3, #28]
 80093e2:	e005      	b.n	80093f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d106      	bne.n	8009410 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f7fc fc76 	bl	8005cfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2202      	movs	r2, #2
 8009414:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009426:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009430:	d902      	bls.n	8009438 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009432:	2300      	movs	r3, #0
 8009434:	60fb      	str	r3, [r7, #12]
 8009436:	e002      	b.n	800943e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009438:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800943c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009446:	d007      	beq.n	8009458 <HAL_SPI_Init+0xa0>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009450:	d002      	beq.n	8009458 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009468:	431a      	orrs	r2, r3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	691b      	ldr	r3, [r3, #16]
 800946e:	f003 0302 	and.w	r3, r3, #2
 8009472:	431a      	orrs	r2, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	695b      	ldr	r3, [r3, #20]
 8009478:	f003 0301 	and.w	r3, r3, #1
 800947c:	431a      	orrs	r2, r3
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	699b      	ldr	r3, [r3, #24]
 8009482:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009486:	431a      	orrs	r2, r3
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	69db      	ldr	r3, [r3, #28]
 800948c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009490:	431a      	orrs	r2, r3
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6a1b      	ldr	r3, [r3, #32]
 8009496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800949a:	ea42 0103 	orr.w	r1, r2, r3
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094a2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	430a      	orrs	r2, r1
 80094ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	699b      	ldr	r3, [r3, #24]
 80094b2:	0c1b      	lsrs	r3, r3, #16
 80094b4:	f003 0204 	and.w	r2, r3, #4
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094bc:	f003 0310 	and.w	r3, r3, #16
 80094c0:	431a      	orrs	r2, r3
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094c6:	f003 0308 	and.w	r3, r3, #8
 80094ca:	431a      	orrs	r2, r3
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80094d4:	ea42 0103 	orr.w	r1, r2, r3
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	430a      	orrs	r2, r1
 80094e4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2200      	movs	r2, #0
 80094ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2201      	movs	r2, #1
 80094f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80094f4:	2300      	movs	r3, #0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3710      	adds	r7, #16
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}

080094fe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80094fe:	b580      	push	{r7, lr}
 8009500:	b08a      	sub	sp, #40	@ 0x28
 8009502:	af00      	add	r7, sp, #0
 8009504:	60f8      	str	r0, [r7, #12]
 8009506:	60b9      	str	r1, [r7, #8]
 8009508:	607a      	str	r2, [r7, #4]
 800950a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800950c:	2301      	movs	r3, #1
 800950e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009510:	f7fc fe92 	bl	8006238 <HAL_GetTick>
 8009514:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800951c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009524:	887b      	ldrh	r3, [r7, #2]
 8009526:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8009528:	887b      	ldrh	r3, [r7, #2]
 800952a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800952c:	7ffb      	ldrb	r3, [r7, #31]
 800952e:	2b01      	cmp	r3, #1
 8009530:	d00c      	beq.n	800954c <HAL_SPI_TransmitReceive+0x4e>
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009538:	d106      	bne.n	8009548 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d102      	bne.n	8009548 <HAL_SPI_TransmitReceive+0x4a>
 8009542:	7ffb      	ldrb	r3, [r7, #31]
 8009544:	2b04      	cmp	r3, #4
 8009546:	d001      	beq.n	800954c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8009548:	2302      	movs	r3, #2
 800954a:	e1f3      	b.n	8009934 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d005      	beq.n	800955e <HAL_SPI_TransmitReceive+0x60>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d002      	beq.n	800955e <HAL_SPI_TransmitReceive+0x60>
 8009558:	887b      	ldrh	r3, [r7, #2]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d101      	bne.n	8009562 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	e1e8      	b.n	8009934 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009568:	2b01      	cmp	r3, #1
 800956a:	d101      	bne.n	8009570 <HAL_SPI_TransmitReceive+0x72>
 800956c:	2302      	movs	r3, #2
 800956e:	e1e1      	b.n	8009934 <HAL_SPI_TransmitReceive+0x436>
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800957e:	b2db      	uxtb	r3, r3
 8009580:	2b04      	cmp	r3, #4
 8009582:	d003      	beq.n	800958c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2205      	movs	r2, #5
 8009588:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2200      	movs	r2, #0
 8009590:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	887a      	ldrh	r2, [r7, #2]
 800959c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	887a      	ldrh	r2, [r7, #2]
 80095a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	68ba      	ldr	r2, [r7, #8]
 80095ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	887a      	ldrh	r2, [r7, #2]
 80095b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	887a      	ldrh	r2, [r7, #2]
 80095b8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2200      	movs	r2, #0
 80095be:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2200      	movs	r2, #0
 80095c4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80095ce:	d802      	bhi.n	80095d6 <HAL_SPI_TransmitReceive+0xd8>
 80095d0:	8abb      	ldrh	r3, [r7, #20]
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d908      	bls.n	80095e8 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	685a      	ldr	r2, [r3, #4]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80095e4:	605a      	str	r2, [r3, #4]
 80095e6:	e007      	b.n	80095f8 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	685a      	ldr	r2, [r3, #4]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80095f6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009602:	2b40      	cmp	r3, #64	@ 0x40
 8009604:	d007      	beq.n	8009616 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009614:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	68db      	ldr	r3, [r3, #12]
 800961a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800961e:	f240 8083 	bls.w	8009728 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d002      	beq.n	8009630 <HAL_SPI_TransmitReceive+0x132>
 800962a:	8afb      	ldrh	r3, [r7, #22]
 800962c:	2b01      	cmp	r3, #1
 800962e:	d16f      	bne.n	8009710 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009634:	881a      	ldrh	r2, [r3, #0]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009640:	1c9a      	adds	r2, r3, #2
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800964a:	b29b      	uxth	r3, r3
 800964c:	3b01      	subs	r3, #1
 800964e:	b29a      	uxth	r2, r3
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009654:	e05c      	b.n	8009710 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	f003 0302 	and.w	r3, r3, #2
 8009660:	2b02      	cmp	r3, #2
 8009662:	d11b      	bne.n	800969c <HAL_SPI_TransmitReceive+0x19e>
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009668:	b29b      	uxth	r3, r3
 800966a:	2b00      	cmp	r3, #0
 800966c:	d016      	beq.n	800969c <HAL_SPI_TransmitReceive+0x19e>
 800966e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009670:	2b01      	cmp	r3, #1
 8009672:	d113      	bne.n	800969c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009678:	881a      	ldrh	r2, [r3, #0]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009684:	1c9a      	adds	r2, r3, #2
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800968e:	b29b      	uxth	r3, r3
 8009690:	3b01      	subs	r3, #1
 8009692:	b29a      	uxth	r2, r3
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009698:	2300      	movs	r3, #0
 800969a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	f003 0301 	and.w	r3, r3, #1
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	d11c      	bne.n	80096e4 <HAL_SPI_TransmitReceive+0x1e6>
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d016      	beq.n	80096e4 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	68da      	ldr	r2, [r3, #12]
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096c0:	b292      	uxth	r2, r2
 80096c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096c8:	1c9a      	adds	r2, r3, #2
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	3b01      	subs	r3, #1
 80096d8:	b29a      	uxth	r2, r3
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80096e0:	2301      	movs	r3, #1
 80096e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80096e4:	f7fc fda8 	bl	8006238 <HAL_GetTick>
 80096e8:	4602      	mov	r2, r0
 80096ea:	6a3b      	ldr	r3, [r7, #32]
 80096ec:	1ad3      	subs	r3, r2, r3
 80096ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d80d      	bhi.n	8009710 <HAL_SPI_TransmitReceive+0x212>
 80096f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80096fa:	d009      	beq.n	8009710 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2201      	movs	r2, #1
 8009700:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2200      	movs	r2, #0
 8009708:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800970c:	2303      	movs	r3, #3
 800970e:	e111      	b.n	8009934 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009714:	b29b      	uxth	r3, r3
 8009716:	2b00      	cmp	r3, #0
 8009718:	d19d      	bne.n	8009656 <HAL_SPI_TransmitReceive+0x158>
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009720:	b29b      	uxth	r3, r3
 8009722:	2b00      	cmp	r3, #0
 8009724:	d197      	bne.n	8009656 <HAL_SPI_TransmitReceive+0x158>
 8009726:	e0e5      	b.n	80098f4 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d003      	beq.n	8009738 <HAL_SPI_TransmitReceive+0x23a>
 8009730:	8afb      	ldrh	r3, [r7, #22]
 8009732:	2b01      	cmp	r3, #1
 8009734:	f040 80d1 	bne.w	80098da <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800973c:	b29b      	uxth	r3, r3
 800973e:	2b01      	cmp	r3, #1
 8009740:	d912      	bls.n	8009768 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009746:	881a      	ldrh	r2, [r3, #0]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009752:	1c9a      	adds	r2, r3, #2
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800975c:	b29b      	uxth	r3, r3
 800975e:	3b02      	subs	r3, #2
 8009760:	b29a      	uxth	r2, r3
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009766:	e0b8      	b.n	80098da <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	330c      	adds	r3, #12
 8009772:	7812      	ldrb	r2, [r2, #0]
 8009774:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800977a:	1c5a      	adds	r2, r3, #1
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009784:	b29b      	uxth	r3, r3
 8009786:	3b01      	subs	r3, #1
 8009788:	b29a      	uxth	r2, r3
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800978e:	e0a4      	b.n	80098da <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	f003 0302 	and.w	r3, r3, #2
 800979a:	2b02      	cmp	r3, #2
 800979c:	d134      	bne.n	8009808 <HAL_SPI_TransmitReceive+0x30a>
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d02f      	beq.n	8009808 <HAL_SPI_TransmitReceive+0x30a>
 80097a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d12c      	bne.n	8009808 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d912      	bls.n	80097de <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097bc:	881a      	ldrh	r2, [r3, #0]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097c8:	1c9a      	adds	r2, r3, #2
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	3b02      	subs	r3, #2
 80097d6:	b29a      	uxth	r2, r3
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80097dc:	e012      	b.n	8009804 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	330c      	adds	r3, #12
 80097e8:	7812      	ldrb	r2, [r2, #0]
 80097ea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097f0:	1c5a      	adds	r2, r3, #1
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	3b01      	subs	r3, #1
 80097fe:	b29a      	uxth	r2, r3
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009804:	2300      	movs	r3, #0
 8009806:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	f003 0301 	and.w	r3, r3, #1
 8009812:	2b01      	cmp	r3, #1
 8009814:	d148      	bne.n	80098a8 <HAL_SPI_TransmitReceive+0x3aa>
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800981c:	b29b      	uxth	r3, r3
 800981e:	2b00      	cmp	r3, #0
 8009820:	d042      	beq.n	80098a8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009828:	b29b      	uxth	r3, r3
 800982a:	2b01      	cmp	r3, #1
 800982c:	d923      	bls.n	8009876 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	68da      	ldr	r2, [r3, #12]
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009838:	b292      	uxth	r2, r2
 800983a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009840:	1c9a      	adds	r2, r3, #2
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800984c:	b29b      	uxth	r3, r3
 800984e:	3b02      	subs	r3, #2
 8009850:	b29a      	uxth	r2, r3
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800985e:	b29b      	uxth	r3, r3
 8009860:	2b01      	cmp	r3, #1
 8009862:	d81f      	bhi.n	80098a4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	685a      	ldr	r2, [r3, #4]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009872:	605a      	str	r2, [r3, #4]
 8009874:	e016      	b.n	80098a4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f103 020c 	add.w	r2, r3, #12
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009882:	7812      	ldrb	r2, [r2, #0]
 8009884:	b2d2      	uxtb	r2, r2
 8009886:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800988c:	1c5a      	adds	r2, r3, #1
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009898:	b29b      	uxth	r3, r3
 800989a:	3b01      	subs	r3, #1
 800989c:	b29a      	uxth	r2, r3
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80098a4:	2301      	movs	r3, #1
 80098a6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80098a8:	f7fc fcc6 	bl	8006238 <HAL_GetTick>
 80098ac:	4602      	mov	r2, r0
 80098ae:	6a3b      	ldr	r3, [r7, #32]
 80098b0:	1ad3      	subs	r3, r2, r3
 80098b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d803      	bhi.n	80098c0 <HAL_SPI_TransmitReceive+0x3c2>
 80098b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80098be:	d102      	bne.n	80098c6 <HAL_SPI_TransmitReceive+0x3c8>
 80098c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d109      	bne.n	80098da <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	2201      	movs	r2, #1
 80098ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2200      	movs	r2, #0
 80098d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80098d6:	2303      	movs	r3, #3
 80098d8:	e02c      	b.n	8009934 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80098de:	b29b      	uxth	r3, r3
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	f47f af55 	bne.w	8009790 <HAL_SPI_TransmitReceive+0x292>
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	f47f af4e 	bne.w	8009790 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80098f4:	6a3a      	ldr	r2, [r7, #32]
 80098f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80098f8:	68f8      	ldr	r0, [r7, #12]
 80098fa:	f000 f93d 	bl	8009b78 <SPI_EndRxTxTransaction>
 80098fe:	4603      	mov	r3, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	d008      	beq.n	8009916 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2220      	movs	r2, #32
 8009908:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2200      	movs	r2, #0
 800990e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009912:	2301      	movs	r3, #1
 8009914:	e00e      	b.n	8009934 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2201      	movs	r2, #1
 800991a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2200      	movs	r2, #0
 8009922:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800992a:	2b00      	cmp	r3, #0
 800992c:	d001      	beq.n	8009932 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	e000      	b.n	8009934 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8009932:	2300      	movs	r3, #0
  }
}
 8009934:	4618      	mov	r0, r3
 8009936:	3728      	adds	r7, #40	@ 0x28
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b088      	sub	sp, #32
 8009940:	af00      	add	r7, sp, #0
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	60b9      	str	r1, [r7, #8]
 8009946:	603b      	str	r3, [r7, #0]
 8009948:	4613      	mov	r3, r2
 800994a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800994c:	f7fc fc74 	bl	8006238 <HAL_GetTick>
 8009950:	4602      	mov	r2, r0
 8009952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009954:	1a9b      	subs	r3, r3, r2
 8009956:	683a      	ldr	r2, [r7, #0]
 8009958:	4413      	add	r3, r2
 800995a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800995c:	f7fc fc6c 	bl	8006238 <HAL_GetTick>
 8009960:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009962:	4b39      	ldr	r3, [pc, #228]	@ (8009a48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	015b      	lsls	r3, r3, #5
 8009968:	0d1b      	lsrs	r3, r3, #20
 800996a:	69fa      	ldr	r2, [r7, #28]
 800996c:	fb02 f303 	mul.w	r3, r2, r3
 8009970:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009972:	e054      	b.n	8009a1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800997a:	d050      	beq.n	8009a1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800997c:	f7fc fc5c 	bl	8006238 <HAL_GetTick>
 8009980:	4602      	mov	r2, r0
 8009982:	69bb      	ldr	r3, [r7, #24]
 8009984:	1ad3      	subs	r3, r2, r3
 8009986:	69fa      	ldr	r2, [r7, #28]
 8009988:	429a      	cmp	r2, r3
 800998a:	d902      	bls.n	8009992 <SPI_WaitFlagStateUntilTimeout+0x56>
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d13d      	bne.n	8009a0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	685a      	ldr	r2, [r3, #4]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80099a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80099aa:	d111      	bne.n	80099d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099b4:	d004      	beq.n	80099c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099be:	d107      	bne.n	80099d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	681a      	ldr	r2, [r3, #0]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80099ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099d8:	d10f      	bne.n	80099fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80099e8:	601a      	str	r2, [r3, #0]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80099f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2201      	movs	r2, #1
 80099fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2200      	movs	r2, #0
 8009a06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009a0a:	2303      	movs	r3, #3
 8009a0c:	e017      	b.n	8009a3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d101      	bne.n	8009a18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009a14:	2300      	movs	r3, #0
 8009a16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	689a      	ldr	r2, [r3, #8]
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	4013      	ands	r3, r2
 8009a28:	68ba      	ldr	r2, [r7, #8]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	bf0c      	ite	eq
 8009a2e:	2301      	moveq	r3, #1
 8009a30:	2300      	movne	r3, #0
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	461a      	mov	r2, r3
 8009a36:	79fb      	ldrb	r3, [r7, #7]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d19b      	bne.n	8009974 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3720      	adds	r7, #32
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	20000048 	.word	0x20000048

08009a4c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b08a      	sub	sp, #40	@ 0x28
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	60b9      	str	r1, [r7, #8]
 8009a56:	607a      	str	r2, [r7, #4]
 8009a58:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009a5e:	f7fc fbeb 	bl	8006238 <HAL_GetTick>
 8009a62:	4602      	mov	r2, r0
 8009a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a66:	1a9b      	subs	r3, r3, r2
 8009a68:	683a      	ldr	r2, [r7, #0]
 8009a6a:	4413      	add	r3, r2
 8009a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009a6e:	f7fc fbe3 	bl	8006238 <HAL_GetTick>
 8009a72:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	330c      	adds	r3, #12
 8009a7a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009a7c:	4b3d      	ldr	r3, [pc, #244]	@ (8009b74 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	4613      	mov	r3, r2
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	4413      	add	r3, r2
 8009a86:	00da      	lsls	r2, r3, #3
 8009a88:	1ad3      	subs	r3, r2, r3
 8009a8a:	0d1b      	lsrs	r3, r3, #20
 8009a8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a8e:	fb02 f303 	mul.w	r3, r2, r3
 8009a92:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009a94:	e060      	b.n	8009b58 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009a9c:	d107      	bne.n	8009aae <SPI_WaitFifoStateUntilTimeout+0x62>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d104      	bne.n	8009aae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009aac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ab4:	d050      	beq.n	8009b58 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009ab6:	f7fc fbbf 	bl	8006238 <HAL_GetTick>
 8009aba:	4602      	mov	r2, r0
 8009abc:	6a3b      	ldr	r3, [r7, #32]
 8009abe:	1ad3      	subs	r3, r2, r3
 8009ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d902      	bls.n	8009acc <SPI_WaitFifoStateUntilTimeout+0x80>
 8009ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d13d      	bne.n	8009b48 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	685a      	ldr	r2, [r3, #4]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009ada:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009ae4:	d111      	bne.n	8009b0a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009aee:	d004      	beq.n	8009afa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009af8:	d107      	bne.n	8009b0a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009b08:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b12:	d10f      	bne.n	8009b34 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009b22:	601a      	str	r2, [r3, #0]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009b32:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009b44:	2303      	movs	r3, #3
 8009b46:	e010      	b.n	8009b6a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d101      	bne.n	8009b52 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009b52:	69bb      	ldr	r3, [r7, #24]
 8009b54:	3b01      	subs	r3, #1
 8009b56:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	689a      	ldr	r2, [r3, #8]
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	4013      	ands	r3, r2
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d196      	bne.n	8009a96 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009b68:	2300      	movs	r3, #0
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3728      	adds	r7, #40	@ 0x28
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	20000048 	.word	0x20000048

08009b78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b086      	sub	sp, #24
 8009b7c:	af02      	add	r7, sp, #8
 8009b7e:	60f8      	str	r0, [r7, #12]
 8009b80:	60b9      	str	r1, [r7, #8]
 8009b82:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	9300      	str	r3, [sp, #0]
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009b90:	68f8      	ldr	r0, [r7, #12]
 8009b92:	f7ff ff5b 	bl	8009a4c <SPI_WaitFifoStateUntilTimeout>
 8009b96:	4603      	mov	r3, r0
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d007      	beq.n	8009bac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ba0:	f043 0220 	orr.w	r2, r3, #32
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009ba8:	2303      	movs	r3, #3
 8009baa:	e027      	b.n	8009bfc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	9300      	str	r3, [sp, #0]
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	2180      	movs	r1, #128	@ 0x80
 8009bb6:	68f8      	ldr	r0, [r7, #12]
 8009bb8:	f7ff fec0 	bl	800993c <SPI_WaitFlagStateUntilTimeout>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d007      	beq.n	8009bd2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bc6:	f043 0220 	orr.w	r2, r3, #32
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009bce:	2303      	movs	r3, #3
 8009bd0:	e014      	b.n	8009bfc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	9300      	str	r3, [sp, #0]
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009bde:	68f8      	ldr	r0, [r7, #12]
 8009be0:	f7ff ff34 	bl	8009a4c <SPI_WaitFifoStateUntilTimeout>
 8009be4:	4603      	mov	r3, r0
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d007      	beq.n	8009bfa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bee:	f043 0220 	orr.w	r2, r3, #32
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009bf6:	2303      	movs	r3, #3
 8009bf8:	e000      	b.n	8009bfc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009bfa:	2300      	movs	r3, #0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3710      	adds	r7, #16
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d101      	bne.n	8009c16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
 8009c14:	e049      	b.n	8009caa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d106      	bne.n	8009c30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f7fc f9a8 	bl	8005f80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2202      	movs	r2, #2
 8009c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	3304      	adds	r3, #4
 8009c40:	4619      	mov	r1, r3
 8009c42:	4610      	mov	r0, r2
 8009c44:	f000 f9ba 	bl	8009fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2201      	movs	r2, #1
 8009c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2201      	movs	r2, #1
 8009c64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2201      	movs	r2, #1
 8009c74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2201      	movs	r2, #1
 8009c84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2201      	movs	r2, #1
 8009c94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009ca8:	2300      	movs	r3, #0
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3708      	adds	r7, #8
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
	...

08009cb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d001      	beq.n	8009ccc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	e03b      	b.n	8009d44 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2202      	movs	r2, #2
 8009cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	68da      	ldr	r2, [r3, #12]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f042 0201 	orr.w	r2, r2, #1
 8009ce2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a19      	ldr	r2, [pc, #100]	@ (8009d50 <HAL_TIM_Base_Start_IT+0x9c>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d009      	beq.n	8009d02 <HAL_TIM_Base_Start_IT+0x4e>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cf6:	d004      	beq.n	8009d02 <HAL_TIM_Base_Start_IT+0x4e>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a15      	ldr	r2, [pc, #84]	@ (8009d54 <HAL_TIM_Base_Start_IT+0xa0>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d115      	bne.n	8009d2e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	689a      	ldr	r2, [r3, #8]
 8009d08:	4b13      	ldr	r3, [pc, #76]	@ (8009d58 <HAL_TIM_Base_Start_IT+0xa4>)
 8009d0a:	4013      	ands	r3, r2
 8009d0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2b06      	cmp	r3, #6
 8009d12:	d015      	beq.n	8009d40 <HAL_TIM_Base_Start_IT+0x8c>
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d1a:	d011      	beq.n	8009d40 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f042 0201 	orr.w	r2, r2, #1
 8009d2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d2c:	e008      	b.n	8009d40 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f042 0201 	orr.w	r2, r2, #1
 8009d3c:	601a      	str	r2, [r3, #0]
 8009d3e:	e000      	b.n	8009d42 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009d42:	2300      	movs	r3, #0
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3714      	adds	r7, #20
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr
 8009d50:	40012c00 	.word	0x40012c00
 8009d54:	40014000 	.word	0x40014000
 8009d58:	00010007 	.word	0x00010007

08009d5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	68db      	ldr	r3, [r3, #12]
 8009d6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	691b      	ldr	r3, [r3, #16]
 8009d72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	f003 0302 	and.w	r3, r3, #2
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d020      	beq.n	8009dc0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	f003 0302 	and.w	r3, r3, #2
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d01b      	beq.n	8009dc0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f06f 0202 	mvn.w	r2, #2
 8009d90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2201      	movs	r2, #1
 8009d96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	699b      	ldr	r3, [r3, #24]
 8009d9e:	f003 0303 	and.w	r3, r3, #3
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d003      	beq.n	8009dae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 f8e9 	bl	8009f7e <HAL_TIM_IC_CaptureCallback>
 8009dac:	e005      	b.n	8009dba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 f8db 	bl	8009f6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f000 f8ec 	bl	8009f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	f003 0304 	and.w	r3, r3, #4
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d020      	beq.n	8009e0c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	f003 0304 	and.w	r3, r3, #4
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d01b      	beq.n	8009e0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f06f 0204 	mvn.w	r2, #4
 8009ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2202      	movs	r2, #2
 8009de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	699b      	ldr	r3, [r3, #24]
 8009dea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d003      	beq.n	8009dfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 f8c3 	bl	8009f7e <HAL_TIM_IC_CaptureCallback>
 8009df8:	e005      	b.n	8009e06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 f8b5 	bl	8009f6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 f8c6 	bl	8009f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	f003 0308 	and.w	r3, r3, #8
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d020      	beq.n	8009e58 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f003 0308 	and.w	r3, r3, #8
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d01b      	beq.n	8009e58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f06f 0208 	mvn.w	r2, #8
 8009e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2204      	movs	r2, #4
 8009e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	69db      	ldr	r3, [r3, #28]
 8009e36:	f003 0303 	and.w	r3, r3, #3
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d003      	beq.n	8009e46 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 f89d 	bl	8009f7e <HAL_TIM_IC_CaptureCallback>
 8009e44:	e005      	b.n	8009e52 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 f88f 	bl	8009f6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 f8a0 	bl	8009f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2200      	movs	r2, #0
 8009e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	f003 0310 	and.w	r3, r3, #16
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d020      	beq.n	8009ea4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f003 0310 	and.w	r3, r3, #16
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d01b      	beq.n	8009ea4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f06f 0210 	mvn.w	r2, #16
 8009e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2208      	movs	r2, #8
 8009e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	69db      	ldr	r3, [r3, #28]
 8009e82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d003      	beq.n	8009e92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 f877 	bl	8009f7e <HAL_TIM_IC_CaptureCallback>
 8009e90:	e005      	b.n	8009e9e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 f869 	bl	8009f6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 f87a 	bl	8009f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	f003 0301 	and.w	r3, r3, #1
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00c      	beq.n	8009ec8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f003 0301 	and.w	r3, r3, #1
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d007      	beq.n	8009ec8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f06f 0201 	mvn.w	r2, #1
 8009ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f7fb f830 	bl	8004f28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d104      	bne.n	8009edc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d00c      	beq.n	8009ef6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d007      	beq.n	8009ef6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 f943 	bl	800a17c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d00c      	beq.n	8009f1a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d007      	beq.n	8009f1a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 f93b 	bl	800a190 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d00c      	beq.n	8009f3e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d007      	beq.n	8009f3e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 f834 	bl	8009fa6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	f003 0320 	and.w	r3, r3, #32
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d00c      	beq.n	8009f62 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f003 0320 	and.w	r3, r3, #32
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d007      	beq.n	8009f62 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f06f 0220 	mvn.w	r2, #32
 8009f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 f903 	bl	800a168 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009f62:	bf00      	nop
 8009f64:	3710      	adds	r7, #16
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f6a:	b480      	push	{r7}
 8009f6c:	b083      	sub	sp, #12
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f72:	bf00      	nop
 8009f74:	370c      	adds	r7, #12
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr

08009f7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009f7e:	b480      	push	{r7}
 8009f80:	b083      	sub	sp, #12
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009f86:	bf00      	nop
 8009f88:	370c      	adds	r7, #12
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr

08009f92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f92:	b480      	push	{r7}
 8009f94:	b083      	sub	sp, #12
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f9a:	bf00      	nop
 8009f9c:	370c      	adds	r7, #12
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr

08009fa6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009fa6:	b480      	push	{r7}
 8009fa8:	b083      	sub	sp, #12
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009fae:	bf00      	nop
 8009fb0:	370c      	adds	r7, #12
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr
	...

08009fbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b085      	sub	sp, #20
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	4a30      	ldr	r2, [pc, #192]	@ (800a090 <TIM_Base_SetConfig+0xd4>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d003      	beq.n	8009fdc <TIM_Base_SetConfig+0x20>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fda:	d108      	bne.n	8009fee <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	68fa      	ldr	r2, [r7, #12]
 8009fea:	4313      	orrs	r3, r2
 8009fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	4a27      	ldr	r2, [pc, #156]	@ (800a090 <TIM_Base_SetConfig+0xd4>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d00b      	beq.n	800a00e <TIM_Base_SetConfig+0x52>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ffc:	d007      	beq.n	800a00e <TIM_Base_SetConfig+0x52>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	4a24      	ldr	r2, [pc, #144]	@ (800a094 <TIM_Base_SetConfig+0xd8>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d003      	beq.n	800a00e <TIM_Base_SetConfig+0x52>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	4a23      	ldr	r2, [pc, #140]	@ (800a098 <TIM_Base_SetConfig+0xdc>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d108      	bne.n	800a020 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a014:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	68fa      	ldr	r2, [r7, #12]
 800a01c:	4313      	orrs	r3, r2
 800a01e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	695b      	ldr	r3, [r3, #20]
 800a02a:	4313      	orrs	r3, r2
 800a02c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	68fa      	ldr	r2, [r7, #12]
 800a032:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	689a      	ldr	r2, [r3, #8]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	4a12      	ldr	r2, [pc, #72]	@ (800a090 <TIM_Base_SetConfig+0xd4>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d007      	beq.n	800a05c <TIM_Base_SetConfig+0xa0>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	4a11      	ldr	r2, [pc, #68]	@ (800a094 <TIM_Base_SetConfig+0xd8>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d003      	beq.n	800a05c <TIM_Base_SetConfig+0xa0>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	4a10      	ldr	r2, [pc, #64]	@ (800a098 <TIM_Base_SetConfig+0xdc>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d103      	bne.n	800a064 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	691a      	ldr	r2, [r3, #16]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2201      	movs	r2, #1
 800a068:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	691b      	ldr	r3, [r3, #16]
 800a06e:	f003 0301 	and.w	r3, r3, #1
 800a072:	2b01      	cmp	r3, #1
 800a074:	d105      	bne.n	800a082 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	691b      	ldr	r3, [r3, #16]
 800a07a:	f023 0201 	bic.w	r2, r3, #1
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	611a      	str	r2, [r3, #16]
  }
}
 800a082:	bf00      	nop
 800a084:	3714      	adds	r7, #20
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr
 800a08e:	bf00      	nop
 800a090:	40012c00 	.word	0x40012c00
 800a094:	40014000 	.word	0x40014000
 800a098:	40014400 	.word	0x40014400

0800a09c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b085      	sub	sp, #20
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d101      	bne.n	800a0b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a0b0:	2302      	movs	r3, #2
 800a0b2:	e04f      	b.n	800a154 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2202      	movs	r2, #2
 800a0c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	689b      	ldr	r3, [r3, #8]
 800a0d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4a21      	ldr	r2, [pc, #132]	@ (800a160 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d108      	bne.n	800a0f0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a0e4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	68fa      	ldr	r2, [r7, #12]
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	68fa      	ldr	r2, [r7, #12]
 800a0fe:	4313      	orrs	r3, r2
 800a100:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	68fa      	ldr	r2, [r7, #12]
 800a108:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4a14      	ldr	r2, [pc, #80]	@ (800a160 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d009      	beq.n	800a128 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a11c:	d004      	beq.n	800a128 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a10      	ldr	r2, [pc, #64]	@ (800a164 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d10c      	bne.n	800a142 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a12e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	689b      	ldr	r3, [r3, #8]
 800a134:	68ba      	ldr	r2, [r7, #8]
 800a136:	4313      	orrs	r3, r2
 800a138:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	68ba      	ldr	r2, [r7, #8]
 800a140:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2201      	movs	r2, #1
 800a146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a152:	2300      	movs	r3, #0
}
 800a154:	4618      	mov	r0, r3
 800a156:	3714      	adds	r7, #20
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr
 800a160:	40012c00 	.word	0x40012c00
 800a164:	40014000 	.word	0x40014000

0800a168 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a170:	bf00      	nop
 800a172:	370c      	adds	r7, #12
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr

0800a17c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a184:	bf00      	nop
 800a186:	370c      	adds	r7, #12
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a190:	b480      	push	{r7}
 800a192:	b083      	sub	sp, #12
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a198:	bf00      	nop
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr

0800a1a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d101      	bne.n	800a1b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e040      	b.n	800a238 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d106      	bne.n	800a1cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f7fb ff4c 	bl	8006064 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2224      	movs	r2, #36	@ 0x24
 800a1d0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f022 0201 	bic.w	r2, r2, #1
 800a1e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d002      	beq.n	800a1f0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 fade 	bl	800a7ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 f8af 	bl	800a354 <UART_SetConfig>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d101      	bne.n	800a200 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	e01b      	b.n	800a238 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	685a      	ldr	r2, [r3, #4]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a20e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	689a      	ldr	r2, [r3, #8]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a21e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	681a      	ldr	r2, [r3, #0]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f042 0201 	orr.w	r2, r2, #1
 800a22e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 fb5d 	bl	800a8f0 <UART_CheckIdleState>
 800a236:	4603      	mov	r3, r0
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3708      	adds	r7, #8
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b08a      	sub	sp, #40	@ 0x28
 800a244:	af02      	add	r7, sp, #8
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	60b9      	str	r1, [r7, #8]
 800a24a:	603b      	str	r3, [r7, #0]
 800a24c:	4613      	mov	r3, r2
 800a24e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a254:	2b20      	cmp	r3, #32
 800a256:	d177      	bne.n	800a348 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d002      	beq.n	800a264 <HAL_UART_Transmit+0x24>
 800a25e:	88fb      	ldrh	r3, [r7, #6]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d101      	bne.n	800a268 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a264:	2301      	movs	r3, #1
 800a266:	e070      	b.n	800a34a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2200      	movs	r2, #0
 800a26c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2221      	movs	r2, #33	@ 0x21
 800a274:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a276:	f7fb ffdf 	bl	8006238 <HAL_GetTick>
 800a27a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	88fa      	ldrh	r2, [r7, #6]
 800a280:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	88fa      	ldrh	r2, [r7, #6]
 800a288:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	689b      	ldr	r3, [r3, #8]
 800a290:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a294:	d108      	bne.n	800a2a8 <HAL_UART_Transmit+0x68>
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	691b      	ldr	r3, [r3, #16]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d104      	bne.n	800a2a8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	61bb      	str	r3, [r7, #24]
 800a2a6:	e003      	b.n	800a2b0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a2b0:	e02f      	b.n	800a312 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	9300      	str	r3, [sp, #0]
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	2180      	movs	r1, #128	@ 0x80
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	f000 fbbf 	bl	800aa40 <UART_WaitOnFlagUntilTimeout>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d004      	beq.n	800a2d2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2220      	movs	r2, #32
 800a2cc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800a2ce:	2303      	movs	r3, #3
 800a2d0:	e03b      	b.n	800a34a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800a2d2:	69fb      	ldr	r3, [r7, #28]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d10b      	bne.n	800a2f0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	881a      	ldrh	r2, [r3, #0]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2e4:	b292      	uxth	r2, r2
 800a2e6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a2e8:	69bb      	ldr	r3, [r7, #24]
 800a2ea:	3302      	adds	r3, #2
 800a2ec:	61bb      	str	r3, [r7, #24]
 800a2ee:	e007      	b.n	800a300 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a2f0:	69fb      	ldr	r3, [r7, #28]
 800a2f2:	781a      	ldrb	r2, [r3, #0]
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a2fa:	69fb      	ldr	r3, [r7, #28]
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a306:	b29b      	uxth	r3, r3
 800a308:	3b01      	subs	r3, #1
 800a30a:	b29a      	uxth	r2, r3
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a318:	b29b      	uxth	r3, r3
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d1c9      	bne.n	800a2b2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	9300      	str	r3, [sp, #0]
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	2200      	movs	r2, #0
 800a326:	2140      	movs	r1, #64	@ 0x40
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	f000 fb89 	bl	800aa40 <UART_WaitOnFlagUntilTimeout>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d004      	beq.n	800a33e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2220      	movs	r2, #32
 800a338:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800a33a:	2303      	movs	r3, #3
 800a33c:	e005      	b.n	800a34a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2220      	movs	r2, #32
 800a342:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800a344:	2300      	movs	r3, #0
 800a346:	e000      	b.n	800a34a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800a348:	2302      	movs	r3, #2
  }
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3720      	adds	r7, #32
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
	...

0800a354 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a358:	b08a      	sub	sp, #40	@ 0x28
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a35e:	2300      	movs	r3, #0
 800a360:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	689a      	ldr	r2, [r3, #8]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	691b      	ldr	r3, [r3, #16]
 800a36c:	431a      	orrs	r2, r3
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	695b      	ldr	r3, [r3, #20]
 800a372:	431a      	orrs	r2, r3
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	69db      	ldr	r3, [r3, #28]
 800a378:	4313      	orrs	r3, r2
 800a37a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	4bb4      	ldr	r3, [pc, #720]	@ (800a654 <UART_SetConfig+0x300>)
 800a384:	4013      	ands	r3, r2
 800a386:	68fa      	ldr	r2, [r7, #12]
 800a388:	6812      	ldr	r2, [r2, #0]
 800a38a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a38c:	430b      	orrs	r3, r1
 800a38e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	68da      	ldr	r2, [r3, #12]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	430a      	orrs	r2, r1
 800a3a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	699b      	ldr	r3, [r3, #24]
 800a3aa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4aa9      	ldr	r2, [pc, #676]	@ (800a658 <UART_SetConfig+0x304>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d004      	beq.n	800a3c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	6a1b      	ldr	r3, [r3, #32]
 800a3ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	689b      	ldr	r3, [r3, #8]
 800a3c6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3d0:	430a      	orrs	r2, r1
 800a3d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4aa0      	ldr	r2, [pc, #640]	@ (800a65c <UART_SetConfig+0x308>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d126      	bne.n	800a42c <UART_SetConfig+0xd8>
 800a3de:	4ba0      	ldr	r3, [pc, #640]	@ (800a660 <UART_SetConfig+0x30c>)
 800a3e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3e4:	f003 0303 	and.w	r3, r3, #3
 800a3e8:	2b03      	cmp	r3, #3
 800a3ea:	d81b      	bhi.n	800a424 <UART_SetConfig+0xd0>
 800a3ec:	a201      	add	r2, pc, #4	@ (adr r2, 800a3f4 <UART_SetConfig+0xa0>)
 800a3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f2:	bf00      	nop
 800a3f4:	0800a405 	.word	0x0800a405
 800a3f8:	0800a415 	.word	0x0800a415
 800a3fc:	0800a40d 	.word	0x0800a40d
 800a400:	0800a41d 	.word	0x0800a41d
 800a404:	2301      	movs	r3, #1
 800a406:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a40a:	e080      	b.n	800a50e <UART_SetConfig+0x1ba>
 800a40c:	2302      	movs	r3, #2
 800a40e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a412:	e07c      	b.n	800a50e <UART_SetConfig+0x1ba>
 800a414:	2304      	movs	r3, #4
 800a416:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a41a:	e078      	b.n	800a50e <UART_SetConfig+0x1ba>
 800a41c:	2308      	movs	r3, #8
 800a41e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a422:	e074      	b.n	800a50e <UART_SetConfig+0x1ba>
 800a424:	2310      	movs	r3, #16
 800a426:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a42a:	e070      	b.n	800a50e <UART_SetConfig+0x1ba>
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a8c      	ldr	r2, [pc, #560]	@ (800a664 <UART_SetConfig+0x310>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d138      	bne.n	800a4a8 <UART_SetConfig+0x154>
 800a436:	4b8a      	ldr	r3, [pc, #552]	@ (800a660 <UART_SetConfig+0x30c>)
 800a438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a43c:	f003 030c 	and.w	r3, r3, #12
 800a440:	2b0c      	cmp	r3, #12
 800a442:	d82d      	bhi.n	800a4a0 <UART_SetConfig+0x14c>
 800a444:	a201      	add	r2, pc, #4	@ (adr r2, 800a44c <UART_SetConfig+0xf8>)
 800a446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a44a:	bf00      	nop
 800a44c:	0800a481 	.word	0x0800a481
 800a450:	0800a4a1 	.word	0x0800a4a1
 800a454:	0800a4a1 	.word	0x0800a4a1
 800a458:	0800a4a1 	.word	0x0800a4a1
 800a45c:	0800a491 	.word	0x0800a491
 800a460:	0800a4a1 	.word	0x0800a4a1
 800a464:	0800a4a1 	.word	0x0800a4a1
 800a468:	0800a4a1 	.word	0x0800a4a1
 800a46c:	0800a489 	.word	0x0800a489
 800a470:	0800a4a1 	.word	0x0800a4a1
 800a474:	0800a4a1 	.word	0x0800a4a1
 800a478:	0800a4a1 	.word	0x0800a4a1
 800a47c:	0800a499 	.word	0x0800a499
 800a480:	2300      	movs	r3, #0
 800a482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a486:	e042      	b.n	800a50e <UART_SetConfig+0x1ba>
 800a488:	2302      	movs	r3, #2
 800a48a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a48e:	e03e      	b.n	800a50e <UART_SetConfig+0x1ba>
 800a490:	2304      	movs	r3, #4
 800a492:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a496:	e03a      	b.n	800a50e <UART_SetConfig+0x1ba>
 800a498:	2308      	movs	r3, #8
 800a49a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a49e:	e036      	b.n	800a50e <UART_SetConfig+0x1ba>
 800a4a0:	2310      	movs	r3, #16
 800a4a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a4a6:	e032      	b.n	800a50e <UART_SetConfig+0x1ba>
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a6a      	ldr	r2, [pc, #424]	@ (800a658 <UART_SetConfig+0x304>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d12a      	bne.n	800a508 <UART_SetConfig+0x1b4>
 800a4b2:	4b6b      	ldr	r3, [pc, #428]	@ (800a660 <UART_SetConfig+0x30c>)
 800a4b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a4bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a4c0:	d01a      	beq.n	800a4f8 <UART_SetConfig+0x1a4>
 800a4c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a4c6:	d81b      	bhi.n	800a500 <UART_SetConfig+0x1ac>
 800a4c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a4cc:	d00c      	beq.n	800a4e8 <UART_SetConfig+0x194>
 800a4ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a4d2:	d815      	bhi.n	800a500 <UART_SetConfig+0x1ac>
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d003      	beq.n	800a4e0 <UART_SetConfig+0x18c>
 800a4d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a4dc:	d008      	beq.n	800a4f0 <UART_SetConfig+0x19c>
 800a4de:	e00f      	b.n	800a500 <UART_SetConfig+0x1ac>
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a4e6:	e012      	b.n	800a50e <UART_SetConfig+0x1ba>
 800a4e8:	2302      	movs	r3, #2
 800a4ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a4ee:	e00e      	b.n	800a50e <UART_SetConfig+0x1ba>
 800a4f0:	2304      	movs	r3, #4
 800a4f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a4f6:	e00a      	b.n	800a50e <UART_SetConfig+0x1ba>
 800a4f8:	2308      	movs	r3, #8
 800a4fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a4fe:	e006      	b.n	800a50e <UART_SetConfig+0x1ba>
 800a500:	2310      	movs	r3, #16
 800a502:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a506:	e002      	b.n	800a50e <UART_SetConfig+0x1ba>
 800a508:	2310      	movs	r3, #16
 800a50a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4a51      	ldr	r2, [pc, #324]	@ (800a658 <UART_SetConfig+0x304>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d17a      	bne.n	800a60e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a518:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a51c:	2b08      	cmp	r3, #8
 800a51e:	d824      	bhi.n	800a56a <UART_SetConfig+0x216>
 800a520:	a201      	add	r2, pc, #4	@ (adr r2, 800a528 <UART_SetConfig+0x1d4>)
 800a522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a526:	bf00      	nop
 800a528:	0800a54d 	.word	0x0800a54d
 800a52c:	0800a56b 	.word	0x0800a56b
 800a530:	0800a555 	.word	0x0800a555
 800a534:	0800a56b 	.word	0x0800a56b
 800a538:	0800a55b 	.word	0x0800a55b
 800a53c:	0800a56b 	.word	0x0800a56b
 800a540:	0800a56b 	.word	0x0800a56b
 800a544:	0800a56b 	.word	0x0800a56b
 800a548:	0800a563 	.word	0x0800a563
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a54c:	f7fe fbc0 	bl	8008cd0 <HAL_RCC_GetPCLK1Freq>
 800a550:	61f8      	str	r0, [r7, #28]
        break;
 800a552:	e010      	b.n	800a576 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a554:	4b44      	ldr	r3, [pc, #272]	@ (800a668 <UART_SetConfig+0x314>)
 800a556:	61fb      	str	r3, [r7, #28]
        break;
 800a558:	e00d      	b.n	800a576 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a55a:	f7fe fb21 	bl	8008ba0 <HAL_RCC_GetSysClockFreq>
 800a55e:	61f8      	str	r0, [r7, #28]
        break;
 800a560:	e009      	b.n	800a576 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a562:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a566:	61fb      	str	r3, [r7, #28]
        break;
 800a568:	e005      	b.n	800a576 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800a56a:	2300      	movs	r3, #0
 800a56c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a56e:	2301      	movs	r3, #1
 800a570:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a574:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a576:	69fb      	ldr	r3, [r7, #28]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	f000 8107 	beq.w	800a78c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	685a      	ldr	r2, [r3, #4]
 800a582:	4613      	mov	r3, r2
 800a584:	005b      	lsls	r3, r3, #1
 800a586:	4413      	add	r3, r2
 800a588:	69fa      	ldr	r2, [r7, #28]
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d305      	bcc.n	800a59a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a594:	69fa      	ldr	r2, [r7, #28]
 800a596:	429a      	cmp	r2, r3
 800a598:	d903      	bls.n	800a5a2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800a59a:	2301      	movs	r3, #1
 800a59c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a5a0:	e0f4      	b.n	800a78c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a5a2:	69fb      	ldr	r3, [r7, #28]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	461c      	mov	r4, r3
 800a5a8:	4615      	mov	r5, r2
 800a5aa:	f04f 0200 	mov.w	r2, #0
 800a5ae:	f04f 0300 	mov.w	r3, #0
 800a5b2:	022b      	lsls	r3, r5, #8
 800a5b4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800a5b8:	0222      	lsls	r2, r4, #8
 800a5ba:	68f9      	ldr	r1, [r7, #12]
 800a5bc:	6849      	ldr	r1, [r1, #4]
 800a5be:	0849      	lsrs	r1, r1, #1
 800a5c0:	2000      	movs	r0, #0
 800a5c2:	4688      	mov	r8, r1
 800a5c4:	4681      	mov	r9, r0
 800a5c6:	eb12 0a08 	adds.w	sl, r2, r8
 800a5ca:	eb43 0b09 	adc.w	fp, r3, r9
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	603b      	str	r3, [r7, #0]
 800a5d6:	607a      	str	r2, [r7, #4]
 800a5d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5dc:	4650      	mov	r0, sl
 800a5de:	4659      	mov	r1, fp
 800a5e0:	f7f5 fe44 	bl	800026c <__aeabi_uldivmod>
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a5ec:	69bb      	ldr	r3, [r7, #24]
 800a5ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a5f2:	d308      	bcc.n	800a606 <UART_SetConfig+0x2b2>
 800a5f4:	69bb      	ldr	r3, [r7, #24]
 800a5f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a5fa:	d204      	bcs.n	800a606 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	69ba      	ldr	r2, [r7, #24]
 800a602:	60da      	str	r2, [r3, #12]
 800a604:	e0c2      	b.n	800a78c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800a606:	2301      	movs	r3, #1
 800a608:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a60c:	e0be      	b.n	800a78c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	69db      	ldr	r3, [r3, #28]
 800a612:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a616:	d16a      	bne.n	800a6ee <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800a618:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a61c:	2b08      	cmp	r3, #8
 800a61e:	d834      	bhi.n	800a68a <UART_SetConfig+0x336>
 800a620:	a201      	add	r2, pc, #4	@ (adr r2, 800a628 <UART_SetConfig+0x2d4>)
 800a622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a626:	bf00      	nop
 800a628:	0800a64d 	.word	0x0800a64d
 800a62c:	0800a66d 	.word	0x0800a66d
 800a630:	0800a675 	.word	0x0800a675
 800a634:	0800a68b 	.word	0x0800a68b
 800a638:	0800a67b 	.word	0x0800a67b
 800a63c:	0800a68b 	.word	0x0800a68b
 800a640:	0800a68b 	.word	0x0800a68b
 800a644:	0800a68b 	.word	0x0800a68b
 800a648:	0800a683 	.word	0x0800a683
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a64c:	f7fe fb40 	bl	8008cd0 <HAL_RCC_GetPCLK1Freq>
 800a650:	61f8      	str	r0, [r7, #28]
        break;
 800a652:	e020      	b.n	800a696 <UART_SetConfig+0x342>
 800a654:	efff69f3 	.word	0xefff69f3
 800a658:	40008000 	.word	0x40008000
 800a65c:	40013800 	.word	0x40013800
 800a660:	40021000 	.word	0x40021000
 800a664:	40004400 	.word	0x40004400
 800a668:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a66c:	f7fe fb46 	bl	8008cfc <HAL_RCC_GetPCLK2Freq>
 800a670:	61f8      	str	r0, [r7, #28]
        break;
 800a672:	e010      	b.n	800a696 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a674:	4b4c      	ldr	r3, [pc, #304]	@ (800a7a8 <UART_SetConfig+0x454>)
 800a676:	61fb      	str	r3, [r7, #28]
        break;
 800a678:	e00d      	b.n	800a696 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a67a:	f7fe fa91 	bl	8008ba0 <HAL_RCC_GetSysClockFreq>
 800a67e:	61f8      	str	r0, [r7, #28]
        break;
 800a680:	e009      	b.n	800a696 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a682:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a686:	61fb      	str	r3, [r7, #28]
        break;
 800a688:	e005      	b.n	800a696 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800a68a:	2300      	movs	r3, #0
 800a68c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a68e:	2301      	movs	r3, #1
 800a690:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a694:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a696:	69fb      	ldr	r3, [r7, #28]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d077      	beq.n	800a78c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a69c:	69fb      	ldr	r3, [r7, #28]
 800a69e:	005a      	lsls	r2, r3, #1
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	085b      	lsrs	r3, r3, #1
 800a6a6:	441a      	add	r2, r3
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6b2:	69bb      	ldr	r3, [r7, #24]
 800a6b4:	2b0f      	cmp	r3, #15
 800a6b6:	d916      	bls.n	800a6e6 <UART_SetConfig+0x392>
 800a6b8:	69bb      	ldr	r3, [r7, #24]
 800a6ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6be:	d212      	bcs.n	800a6e6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	f023 030f 	bic.w	r3, r3, #15
 800a6c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a6ca:	69bb      	ldr	r3, [r7, #24]
 800a6cc:	085b      	lsrs	r3, r3, #1
 800a6ce:	b29b      	uxth	r3, r3
 800a6d0:	f003 0307 	and.w	r3, r3, #7
 800a6d4:	b29a      	uxth	r2, r3
 800a6d6:	8afb      	ldrh	r3, [r7, #22]
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	8afa      	ldrh	r2, [r7, #22]
 800a6e2:	60da      	str	r2, [r3, #12]
 800a6e4:	e052      	b.n	800a78c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a6ec:	e04e      	b.n	800a78c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a6ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a6f2:	2b08      	cmp	r3, #8
 800a6f4:	d827      	bhi.n	800a746 <UART_SetConfig+0x3f2>
 800a6f6:	a201      	add	r2, pc, #4	@ (adr r2, 800a6fc <UART_SetConfig+0x3a8>)
 800a6f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6fc:	0800a721 	.word	0x0800a721
 800a700:	0800a729 	.word	0x0800a729
 800a704:	0800a731 	.word	0x0800a731
 800a708:	0800a747 	.word	0x0800a747
 800a70c:	0800a737 	.word	0x0800a737
 800a710:	0800a747 	.word	0x0800a747
 800a714:	0800a747 	.word	0x0800a747
 800a718:	0800a747 	.word	0x0800a747
 800a71c:	0800a73f 	.word	0x0800a73f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a720:	f7fe fad6 	bl	8008cd0 <HAL_RCC_GetPCLK1Freq>
 800a724:	61f8      	str	r0, [r7, #28]
        break;
 800a726:	e014      	b.n	800a752 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a728:	f7fe fae8 	bl	8008cfc <HAL_RCC_GetPCLK2Freq>
 800a72c:	61f8      	str	r0, [r7, #28]
        break;
 800a72e:	e010      	b.n	800a752 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a730:	4b1d      	ldr	r3, [pc, #116]	@ (800a7a8 <UART_SetConfig+0x454>)
 800a732:	61fb      	str	r3, [r7, #28]
        break;
 800a734:	e00d      	b.n	800a752 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a736:	f7fe fa33 	bl	8008ba0 <HAL_RCC_GetSysClockFreq>
 800a73a:	61f8      	str	r0, [r7, #28]
        break;
 800a73c:	e009      	b.n	800a752 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a73e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a742:	61fb      	str	r3, [r7, #28]
        break;
 800a744:	e005      	b.n	800a752 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800a746:	2300      	movs	r3, #0
 800a748:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a74a:	2301      	movs	r3, #1
 800a74c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a750:	bf00      	nop
    }

    if (pclk != 0U)
 800a752:	69fb      	ldr	r3, [r7, #28]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d019      	beq.n	800a78c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	085a      	lsrs	r2, r3, #1
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	441a      	add	r2, r3
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	fbb2 f3f3 	udiv	r3, r2, r3
 800a76a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a76c:	69bb      	ldr	r3, [r7, #24]
 800a76e:	2b0f      	cmp	r3, #15
 800a770:	d909      	bls.n	800a786 <UART_SetConfig+0x432>
 800a772:	69bb      	ldr	r3, [r7, #24]
 800a774:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a778:	d205      	bcs.n	800a786 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	b29a      	uxth	r2, r3
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	60da      	str	r2, [r3, #12]
 800a784:	e002      	b.n	800a78c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800a786:	2301      	movs	r3, #1
 800a788:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2200      	movs	r2, #0
 800a790:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2200      	movs	r2, #0
 800a796:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a798:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3728      	adds	r7, #40	@ 0x28
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a7a6:	bf00      	nop
 800a7a8:	00f42400 	.word	0x00f42400

0800a7ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7b8:	f003 0308 	and.w	r3, r3, #8
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d00a      	beq.n	800a7d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	430a      	orrs	r2, r1
 800a7d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7da:	f003 0301 	and.w	r3, r3, #1
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d00a      	beq.n	800a7f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	430a      	orrs	r2, r1
 800a7f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7fc:	f003 0302 	and.w	r3, r3, #2
 800a800:	2b00      	cmp	r3, #0
 800a802:	d00a      	beq.n	800a81a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	430a      	orrs	r2, r1
 800a818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a81e:	f003 0304 	and.w	r3, r3, #4
 800a822:	2b00      	cmp	r3, #0
 800a824:	d00a      	beq.n	800a83c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	430a      	orrs	r2, r1
 800a83a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a840:	f003 0310 	and.w	r3, r3, #16
 800a844:	2b00      	cmp	r3, #0
 800a846:	d00a      	beq.n	800a85e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	689b      	ldr	r3, [r3, #8]
 800a84e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	430a      	orrs	r2, r1
 800a85c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a862:	f003 0320 	and.w	r3, r3, #32
 800a866:	2b00      	cmp	r3, #0
 800a868:	d00a      	beq.n	800a880 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	430a      	orrs	r2, r1
 800a87e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d01a      	beq.n	800a8c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	430a      	orrs	r2, r1
 800a8a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a8aa:	d10a      	bne.n	800a8c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	430a      	orrs	r2, r1
 800a8c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d00a      	beq.n	800a8e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	430a      	orrs	r2, r1
 800a8e2:	605a      	str	r2, [r3, #4]
  }
}
 800a8e4:	bf00      	nop
 800a8e6:	370c      	adds	r7, #12
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr

0800a8f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b098      	sub	sp, #96	@ 0x60
 800a8f4:	af02      	add	r7, sp, #8
 800a8f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a900:	f7fb fc9a 	bl	8006238 <HAL_GetTick>
 800a904:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f003 0308 	and.w	r3, r3, #8
 800a910:	2b08      	cmp	r3, #8
 800a912:	d12e      	bne.n	800a972 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a914:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a918:	9300      	str	r3, [sp, #0]
 800a91a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a91c:	2200      	movs	r2, #0
 800a91e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 f88c 	bl	800aa40 <UART_WaitOnFlagUntilTimeout>
 800a928:	4603      	mov	r3, r0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d021      	beq.n	800a972 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a936:	e853 3f00 	ldrex	r3, [r3]
 800a93a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a93c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a93e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a942:	653b      	str	r3, [r7, #80]	@ 0x50
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	461a      	mov	r2, r3
 800a94a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a94c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a94e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a950:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a952:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a954:	e841 2300 	strex	r3, r2, [r1]
 800a958:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a95a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d1e6      	bne.n	800a92e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2220      	movs	r2, #32
 800a964:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2200      	movs	r2, #0
 800a96a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a96e:	2303      	movs	r3, #3
 800a970:	e062      	b.n	800aa38 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f003 0304 	and.w	r3, r3, #4
 800a97c:	2b04      	cmp	r3, #4
 800a97e:	d149      	bne.n	800aa14 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a980:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a984:	9300      	str	r3, [sp, #0]
 800a986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a988:	2200      	movs	r2, #0
 800a98a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f000 f856 	bl	800aa40 <UART_WaitOnFlagUntilTimeout>
 800a994:	4603      	mov	r3, r0
 800a996:	2b00      	cmp	r3, #0
 800a998:	d03c      	beq.n	800aa14 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9a2:	e853 3f00 	ldrex	r3, [r3]
 800a9a6:	623b      	str	r3, [r7, #32]
   return(result);
 800a9a8:	6a3b      	ldr	r3, [r7, #32]
 800a9aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a9ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9b8:	633b      	str	r3, [r7, #48]	@ 0x30
 800a9ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a9be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9c0:	e841 2300 	strex	r3, r2, [r1]
 800a9c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a9c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d1e6      	bne.n	800a99a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	3308      	adds	r3, #8
 800a9d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	e853 3f00 	ldrex	r3, [r3]
 800a9da:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f023 0301 	bic.w	r3, r3, #1
 800a9e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	3308      	adds	r3, #8
 800a9ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a9ec:	61fa      	str	r2, [r7, #28]
 800a9ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f0:	69b9      	ldr	r1, [r7, #24]
 800a9f2:	69fa      	ldr	r2, [r7, #28]
 800a9f4:	e841 2300 	strex	r3, r2, [r1]
 800a9f8:	617b      	str	r3, [r7, #20]
   return(result);
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d1e5      	bne.n	800a9cc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2220      	movs	r2, #32
 800aa04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa10:	2303      	movs	r3, #3
 800aa12:	e011      	b.n	800aa38 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2220      	movs	r2, #32
 800aa18:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2220      	movs	r2, #32
 800aa1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2200      	movs	r2, #0
 800aa26:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800aa36:	2300      	movs	r3, #0
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3758      	adds	r7, #88	@ 0x58
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b084      	sub	sp, #16
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	60f8      	str	r0, [r7, #12]
 800aa48:	60b9      	str	r1, [r7, #8]
 800aa4a:	603b      	str	r3, [r7, #0]
 800aa4c:	4613      	mov	r3, r2
 800aa4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa50:	e04f      	b.n	800aaf2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa52:	69bb      	ldr	r3, [r7, #24]
 800aa54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa58:	d04b      	beq.n	800aaf2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa5a:	f7fb fbed 	bl	8006238 <HAL_GetTick>
 800aa5e:	4602      	mov	r2, r0
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	1ad3      	subs	r3, r2, r3
 800aa64:	69ba      	ldr	r2, [r7, #24]
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d302      	bcc.n	800aa70 <UART_WaitOnFlagUntilTimeout+0x30>
 800aa6a:	69bb      	ldr	r3, [r7, #24]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d101      	bne.n	800aa74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800aa70:	2303      	movs	r3, #3
 800aa72:	e04e      	b.n	800ab12 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f003 0304 	and.w	r3, r3, #4
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d037      	beq.n	800aaf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	2b80      	cmp	r3, #128	@ 0x80
 800aa86:	d034      	beq.n	800aaf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	2b40      	cmp	r3, #64	@ 0x40
 800aa8c:	d031      	beq.n	800aaf2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	69db      	ldr	r3, [r3, #28]
 800aa94:	f003 0308 	and.w	r3, r3, #8
 800aa98:	2b08      	cmp	r3, #8
 800aa9a:	d110      	bne.n	800aabe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	2208      	movs	r2, #8
 800aaa2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aaa4:	68f8      	ldr	r0, [r7, #12]
 800aaa6:	f000 f838 	bl	800ab1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2208      	movs	r2, #8
 800aaae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800aaba:	2301      	movs	r3, #1
 800aabc:	e029      	b.n	800ab12 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	69db      	ldr	r3, [r3, #28]
 800aac4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aac8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aacc:	d111      	bne.n	800aaf2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aad6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aad8:	68f8      	ldr	r0, [r7, #12]
 800aada:	f000 f81e 	bl	800ab1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2220      	movs	r2, #32
 800aae2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2200      	movs	r2, #0
 800aaea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800aaee:	2303      	movs	r3, #3
 800aaf0:	e00f      	b.n	800ab12 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	69da      	ldr	r2, [r3, #28]
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	4013      	ands	r3, r2
 800aafc:	68ba      	ldr	r2, [r7, #8]
 800aafe:	429a      	cmp	r2, r3
 800ab00:	bf0c      	ite	eq
 800ab02:	2301      	moveq	r3, #1
 800ab04:	2300      	movne	r3, #0
 800ab06:	b2db      	uxtb	r3, r3
 800ab08:	461a      	mov	r2, r3
 800ab0a:	79fb      	ldrb	r3, [r7, #7]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d0a0      	beq.n	800aa52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ab10:	2300      	movs	r3, #0
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ab1a:	b480      	push	{r7}
 800ab1c:	b095      	sub	sp, #84	@ 0x54
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab2a:	e853 3f00 	ldrex	r3, [r3]
 800ab2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ab30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab40:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab42:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ab46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ab48:	e841 2300 	strex	r3, r2, [r1]
 800ab4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ab4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d1e6      	bne.n	800ab22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	3308      	adds	r3, #8
 800ab5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab5c:	6a3b      	ldr	r3, [r7, #32]
 800ab5e:	e853 3f00 	ldrex	r3, [r3]
 800ab62:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab64:	69fb      	ldr	r3, [r7, #28]
 800ab66:	f023 0301 	bic.w	r3, r3, #1
 800ab6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	3308      	adds	r3, #8
 800ab72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ab74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ab76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ab7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab7c:	e841 2300 	strex	r3, r2, [r1]
 800ab80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ab82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d1e5      	bne.n	800ab54 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d118      	bne.n	800abc2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	e853 3f00 	ldrex	r3, [r3]
 800ab9c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	f023 0310 	bic.w	r3, r3, #16
 800aba4:	647b      	str	r3, [r7, #68]	@ 0x44
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	461a      	mov	r2, r3
 800abac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abae:	61bb      	str	r3, [r7, #24]
 800abb0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abb2:	6979      	ldr	r1, [r7, #20]
 800abb4:	69ba      	ldr	r2, [r7, #24]
 800abb6:	e841 2300 	strex	r3, r2, [r1]
 800abba:	613b      	str	r3, [r7, #16]
   return(result);
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d1e6      	bne.n	800ab90 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2220      	movs	r2, #32
 800abc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2200      	movs	r2, #0
 800abce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2200      	movs	r2, #0
 800abd4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800abd6:	bf00      	nop
 800abd8:	3754      	adds	r7, #84	@ 0x54
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr

0800abe2 <memset>:
 800abe2:	4402      	add	r2, r0
 800abe4:	4603      	mov	r3, r0
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d100      	bne.n	800abec <memset+0xa>
 800abea:	4770      	bx	lr
 800abec:	f803 1b01 	strb.w	r1, [r3], #1
 800abf0:	e7f9      	b.n	800abe6 <memset+0x4>
	...

0800abf4 <__libc_init_array>:
 800abf4:	b570      	push	{r4, r5, r6, lr}
 800abf6:	4d0d      	ldr	r5, [pc, #52]	@ (800ac2c <__libc_init_array+0x38>)
 800abf8:	4c0d      	ldr	r4, [pc, #52]	@ (800ac30 <__libc_init_array+0x3c>)
 800abfa:	1b64      	subs	r4, r4, r5
 800abfc:	10a4      	asrs	r4, r4, #2
 800abfe:	2600      	movs	r6, #0
 800ac00:	42a6      	cmp	r6, r4
 800ac02:	d109      	bne.n	800ac18 <__libc_init_array+0x24>
 800ac04:	4d0b      	ldr	r5, [pc, #44]	@ (800ac34 <__libc_init_array+0x40>)
 800ac06:	4c0c      	ldr	r4, [pc, #48]	@ (800ac38 <__libc_init_array+0x44>)
 800ac08:	f000 f826 	bl	800ac58 <_init>
 800ac0c:	1b64      	subs	r4, r4, r5
 800ac0e:	10a4      	asrs	r4, r4, #2
 800ac10:	2600      	movs	r6, #0
 800ac12:	42a6      	cmp	r6, r4
 800ac14:	d105      	bne.n	800ac22 <__libc_init_array+0x2e>
 800ac16:	bd70      	pop	{r4, r5, r6, pc}
 800ac18:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac1c:	4798      	blx	r3
 800ac1e:	3601      	adds	r6, #1
 800ac20:	e7ee      	b.n	800ac00 <__libc_init_array+0xc>
 800ac22:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac26:	4798      	blx	r3
 800ac28:	3601      	adds	r6, #1
 800ac2a:	e7f2      	b.n	800ac12 <__libc_init_array+0x1e>
 800ac2c:	0800c148 	.word	0x0800c148
 800ac30:	0800c148 	.word	0x0800c148
 800ac34:	0800c148 	.word	0x0800c148
 800ac38:	0800c14c 	.word	0x0800c14c

0800ac3c <memcpy>:
 800ac3c:	440a      	add	r2, r1
 800ac3e:	4291      	cmp	r1, r2
 800ac40:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ac44:	d100      	bne.n	800ac48 <memcpy+0xc>
 800ac46:	4770      	bx	lr
 800ac48:	b510      	push	{r4, lr}
 800ac4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac52:	4291      	cmp	r1, r2
 800ac54:	d1f9      	bne.n	800ac4a <memcpy+0xe>
 800ac56:	bd10      	pop	{r4, pc}

0800ac58 <_init>:
 800ac58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac5a:	bf00      	nop
 800ac5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac5e:	bc08      	pop	{r3}
 800ac60:	469e      	mov	lr, r3
 800ac62:	4770      	bx	lr

0800ac64 <_fini>:
 800ac64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac66:	bf00      	nop
 800ac68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac6a:	bc08      	pop	{r3}
 800ac6c:	469e      	mov	lr, r3
 800ac6e:	4770      	bx	lr
