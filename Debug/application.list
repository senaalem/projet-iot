
application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000112c4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bf8  08011458  08011458  00012458  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013050  08013050  000150c4  2**0
                  CONTENTS
  4 .ARM          00000008  08013050  08013050  00014050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013058  08013058  000150c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013058  08013058  00014058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801305c  0801305c  0001405c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c4  20000000  08013060  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000780  200000c4  08013124  000150c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000844  08013124  00015844  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000150c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024207  00000000  00000000  000150f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e55  00000000  00000000  000392fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002060  00000000  00000000  0003e150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001947  00000000  00000000  000401b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002755b  00000000  00000000  00041af7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025947  00000000  00000000  00069052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7bde  00000000  00000000  0008e999  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00176577  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000099a0  00000000  00000000  001765bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0017ff5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c4 	.word	0x200000c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801143c 	.word	0x0801143c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c8 	.word	0x200000c8
 80001cc:	0801143c 	.word	0x0801143c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_ldivmod>:
 8000c0c:	b97b      	cbnz	r3, 8000c2e <__aeabi_ldivmod+0x22>
 8000c0e:	b972      	cbnz	r2, 8000c2e <__aeabi_ldivmod+0x22>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bfbe      	ittt	lt
 8000c14:	2000      	movlt	r0, #0
 8000c16:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c1a:	e006      	blt.n	8000c2a <__aeabi_ldivmod+0x1e>
 8000c1c:	bf08      	it	eq
 8000c1e:	2800      	cmpeq	r0, #0
 8000c20:	bf1c      	itt	ne
 8000c22:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c26:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c2a:	f000 b9b5 	b.w	8000f98 <__aeabi_idiv0>
 8000c2e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c32:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c36:	2900      	cmp	r1, #0
 8000c38:	db09      	blt.n	8000c4e <__aeabi_ldivmod+0x42>
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	db1a      	blt.n	8000c74 <__aeabi_ldivmod+0x68>
 8000c3e:	f000 f84d 	bl	8000cdc <__udivmoddi4>
 8000c42:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4a:	b004      	add	sp, #16
 8000c4c:	4770      	bx	lr
 8000c4e:	4240      	negs	r0, r0
 8000c50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	db1b      	blt.n	8000c90 <__aeabi_ldivmod+0x84>
 8000c58:	f000 f840 	bl	8000cdc <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4240      	negs	r0, r0
 8000c68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6c:	4252      	negs	r2, r2
 8000c6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c72:	4770      	bx	lr
 8000c74:	4252      	negs	r2, r2
 8000c76:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c7a:	f000 f82f 	bl	8000cdc <__udivmoddi4>
 8000c7e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c86:	b004      	add	sp, #16
 8000c88:	4240      	negs	r0, r0
 8000c8a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8e:	4770      	bx	lr
 8000c90:	4252      	negs	r2, r2
 8000c92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c96:	f000 f821 	bl	8000cdc <__udivmoddi4>
 8000c9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca2:	b004      	add	sp, #16
 8000ca4:	4252      	negs	r2, r2
 8000ca6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000caa:	4770      	bx	lr

08000cac <__aeabi_uldivmod>:
 8000cac:	b953      	cbnz	r3, 8000cc4 <__aeabi_uldivmod+0x18>
 8000cae:	b94a      	cbnz	r2, 8000cc4 <__aeabi_uldivmod+0x18>
 8000cb0:	2900      	cmp	r1, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	2800      	cmpeq	r0, #0
 8000cb6:	bf1c      	itt	ne
 8000cb8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cbc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cc0:	f000 b96a 	b.w	8000f98 <__aeabi_idiv0>
 8000cc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ccc:	f000 f806 	bl	8000cdc <__udivmoddi4>
 8000cd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd8:	b004      	add	sp, #16
 8000cda:	4770      	bx	lr

08000cdc <__udivmoddi4>:
 8000cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce0:	9d08      	ldr	r5, [sp, #32]
 8000ce2:	460c      	mov	r4, r1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d14e      	bne.n	8000d86 <__udivmoddi4+0xaa>
 8000ce8:	4694      	mov	ip, r2
 8000cea:	458c      	cmp	ip, r1
 8000cec:	4686      	mov	lr, r0
 8000cee:	fab2 f282 	clz	r2, r2
 8000cf2:	d962      	bls.n	8000dba <__udivmoddi4+0xde>
 8000cf4:	b14a      	cbz	r2, 8000d0a <__udivmoddi4+0x2e>
 8000cf6:	f1c2 0320 	rsb	r3, r2, #32
 8000cfa:	4091      	lsls	r1, r2
 8000cfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000d00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d04:	4319      	orrs	r1, r3
 8000d06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f f68c 	uxth.w	r6, ip
 8000d12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000d1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d22:	fb04 f106 	mul.w	r1, r4, r6
 8000d26:	4299      	cmp	r1, r3
 8000d28:	d90a      	bls.n	8000d40 <__udivmoddi4+0x64>
 8000d2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d32:	f080 8112 	bcs.w	8000f5a <__udivmoddi4+0x27e>
 8000d36:	4299      	cmp	r1, r3
 8000d38:	f240 810f 	bls.w	8000f5a <__udivmoddi4+0x27e>
 8000d3c:	3c02      	subs	r4, #2
 8000d3e:	4463      	add	r3, ip
 8000d40:	1a59      	subs	r1, r3, r1
 8000d42:	fa1f f38e 	uxth.w	r3, lr
 8000d46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000d4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d52:	fb00 f606 	mul.w	r6, r0, r6
 8000d56:	429e      	cmp	r6, r3
 8000d58:	d90a      	bls.n	8000d70 <__udivmoddi4+0x94>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d62:	f080 80fc 	bcs.w	8000f5e <__udivmoddi4+0x282>
 8000d66:	429e      	cmp	r6, r3
 8000d68:	f240 80f9 	bls.w	8000f5e <__udivmoddi4+0x282>
 8000d6c:	4463      	add	r3, ip
 8000d6e:	3802      	subs	r0, #2
 8000d70:	1b9b      	subs	r3, r3, r6
 8000d72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d76:	2100      	movs	r1, #0
 8000d78:	b11d      	cbz	r5, 8000d82 <__udivmoddi4+0xa6>
 8000d7a:	40d3      	lsrs	r3, r2
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	428b      	cmp	r3, r1
 8000d88:	d905      	bls.n	8000d96 <__udivmoddi4+0xba>
 8000d8a:	b10d      	cbz	r5, 8000d90 <__udivmoddi4+0xb4>
 8000d8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000d90:	2100      	movs	r1, #0
 8000d92:	4608      	mov	r0, r1
 8000d94:	e7f5      	b.n	8000d82 <__udivmoddi4+0xa6>
 8000d96:	fab3 f183 	clz	r1, r3
 8000d9a:	2900      	cmp	r1, #0
 8000d9c:	d146      	bne.n	8000e2c <__udivmoddi4+0x150>
 8000d9e:	42a3      	cmp	r3, r4
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xcc>
 8000da2:	4290      	cmp	r0, r2
 8000da4:	f0c0 80f0 	bcc.w	8000f88 <__udivmoddi4+0x2ac>
 8000da8:	1a86      	subs	r6, r0, r2
 8000daa:	eb64 0303 	sbc.w	r3, r4, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	2d00      	cmp	r5, #0
 8000db2:	d0e6      	beq.n	8000d82 <__udivmoddi4+0xa6>
 8000db4:	e9c5 6300 	strd	r6, r3, [r5]
 8000db8:	e7e3      	b.n	8000d82 <__udivmoddi4+0xa6>
 8000dba:	2a00      	cmp	r2, #0
 8000dbc:	f040 8090 	bne.w	8000ee0 <__udivmoddi4+0x204>
 8000dc0:	eba1 040c 	sub.w	r4, r1, ip
 8000dc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc8:	fa1f f78c 	uxth.w	r7, ip
 8000dcc:	2101      	movs	r1, #1
 8000dce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000dda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dde:	fb07 f006 	mul.w	r0, r7, r6
 8000de2:	4298      	cmp	r0, r3
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x11c>
 8000de6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dea:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dee:	d202      	bcs.n	8000df6 <__udivmoddi4+0x11a>
 8000df0:	4298      	cmp	r0, r3
 8000df2:	f200 80cd 	bhi.w	8000f90 <__udivmoddi4+0x2b4>
 8000df6:	4626      	mov	r6, r4
 8000df8:	1a1c      	subs	r4, r3, r0
 8000dfa:	fa1f f38e 	uxth.w	r3, lr
 8000dfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e02:	fb08 4410 	mls	r4, r8, r0, r4
 8000e06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e0a:	fb00 f707 	mul.w	r7, r0, r7
 8000e0e:	429f      	cmp	r7, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x148>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x146>
 8000e1c:	429f      	cmp	r7, r3
 8000e1e:	f200 80b0 	bhi.w	8000f82 <__udivmoddi4+0x2a6>
 8000e22:	4620      	mov	r0, r4
 8000e24:	1bdb      	subs	r3, r3, r7
 8000e26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e2a:	e7a5      	b.n	8000d78 <__udivmoddi4+0x9c>
 8000e2c:	f1c1 0620 	rsb	r6, r1, #32
 8000e30:	408b      	lsls	r3, r1
 8000e32:	fa22 f706 	lsr.w	r7, r2, r6
 8000e36:	431f      	orrs	r7, r3
 8000e38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000e40:	ea43 030c 	orr.w	r3, r3, ip
 8000e44:	40f4      	lsrs	r4, r6
 8000e46:	fa00 f801 	lsl.w	r8, r0, r1
 8000e4a:	0c38      	lsrs	r0, r7, #16
 8000e4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e50:	fbb4 fef0 	udiv	lr, r4, r0
 8000e54:	fa1f fc87 	uxth.w	ip, r7
 8000e58:	fb00 441e 	mls	r4, r0, lr, r4
 8000e5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e60:	fb0e f90c 	mul.w	r9, lr, ip
 8000e64:	45a1      	cmp	r9, r4
 8000e66:	fa02 f201 	lsl.w	r2, r2, r1
 8000e6a:	d90a      	bls.n	8000e82 <__udivmoddi4+0x1a6>
 8000e6c:	193c      	adds	r4, r7, r4
 8000e6e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e72:	f080 8084 	bcs.w	8000f7e <__udivmoddi4+0x2a2>
 8000e76:	45a1      	cmp	r9, r4
 8000e78:	f240 8081 	bls.w	8000f7e <__udivmoddi4+0x2a2>
 8000e7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e80:	443c      	add	r4, r7
 8000e82:	eba4 0409 	sub.w	r4, r4, r9
 8000e86:	fa1f f983 	uxth.w	r9, r3
 8000e8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000e92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e9a:	45a4      	cmp	ip, r4
 8000e9c:	d907      	bls.n	8000eae <__udivmoddi4+0x1d2>
 8000e9e:	193c      	adds	r4, r7, r4
 8000ea0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ea4:	d267      	bcs.n	8000f76 <__udivmoddi4+0x29a>
 8000ea6:	45a4      	cmp	ip, r4
 8000ea8:	d965      	bls.n	8000f76 <__udivmoddi4+0x29a>
 8000eaa:	3b02      	subs	r3, #2
 8000eac:	443c      	add	r4, r7
 8000eae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eb2:	fba0 9302 	umull	r9, r3, r0, r2
 8000eb6:	eba4 040c 	sub.w	r4, r4, ip
 8000eba:	429c      	cmp	r4, r3
 8000ebc:	46ce      	mov	lr, r9
 8000ebe:	469c      	mov	ip, r3
 8000ec0:	d351      	bcc.n	8000f66 <__udivmoddi4+0x28a>
 8000ec2:	d04e      	beq.n	8000f62 <__udivmoddi4+0x286>
 8000ec4:	b155      	cbz	r5, 8000edc <__udivmoddi4+0x200>
 8000ec6:	ebb8 030e 	subs.w	r3, r8, lr
 8000eca:	eb64 040c 	sbc.w	r4, r4, ip
 8000ece:	fa04 f606 	lsl.w	r6, r4, r6
 8000ed2:	40cb      	lsrs	r3, r1
 8000ed4:	431e      	orrs	r6, r3
 8000ed6:	40cc      	lsrs	r4, r1
 8000ed8:	e9c5 6400 	strd	r6, r4, [r5]
 8000edc:	2100      	movs	r1, #0
 8000ede:	e750      	b.n	8000d82 <__udivmoddi4+0xa6>
 8000ee0:	f1c2 0320 	rsb	r3, r2, #32
 8000ee4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa24 f303 	lsr.w	r3, r4, r3
 8000ef0:	4094      	lsls	r4, r2
 8000ef2:	430c      	orrs	r4, r1
 8000ef4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000efc:	fa1f f78c 	uxth.w	r7, ip
 8000f00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f04:	fb08 3110 	mls	r1, r8, r0, r3
 8000f08:	0c23      	lsrs	r3, r4, #16
 8000f0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f0e:	fb00 f107 	mul.w	r1, r0, r7
 8000f12:	4299      	cmp	r1, r3
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x24c>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f1e:	d22c      	bcs.n	8000f7a <__udivmoddi4+0x29e>
 8000f20:	4299      	cmp	r1, r3
 8000f22:	d92a      	bls.n	8000f7a <__udivmoddi4+0x29e>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1a5b      	subs	r3, r3, r1
 8000f2a:	b2a4      	uxth	r4, r4
 8000f2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f30:	fb08 3311 	mls	r3, r8, r1, r3
 8000f34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f38:	fb01 f307 	mul.w	r3, r1, r7
 8000f3c:	42a3      	cmp	r3, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x276>
 8000f40:	eb1c 0404 	adds.w	r4, ip, r4
 8000f44:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f48:	d213      	bcs.n	8000f72 <__udivmoddi4+0x296>
 8000f4a:	42a3      	cmp	r3, r4
 8000f4c:	d911      	bls.n	8000f72 <__udivmoddi4+0x296>
 8000f4e:	3902      	subs	r1, #2
 8000f50:	4464      	add	r4, ip
 8000f52:	1ae4      	subs	r4, r4, r3
 8000f54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f58:	e739      	b.n	8000dce <__udivmoddi4+0xf2>
 8000f5a:	4604      	mov	r4, r0
 8000f5c:	e6f0      	b.n	8000d40 <__udivmoddi4+0x64>
 8000f5e:	4608      	mov	r0, r1
 8000f60:	e706      	b.n	8000d70 <__udivmoddi4+0x94>
 8000f62:	45c8      	cmp	r8, r9
 8000f64:	d2ae      	bcs.n	8000ec4 <__udivmoddi4+0x1e8>
 8000f66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f6e:	3801      	subs	r0, #1
 8000f70:	e7a8      	b.n	8000ec4 <__udivmoddi4+0x1e8>
 8000f72:	4631      	mov	r1, r6
 8000f74:	e7ed      	b.n	8000f52 <__udivmoddi4+0x276>
 8000f76:	4603      	mov	r3, r0
 8000f78:	e799      	b.n	8000eae <__udivmoddi4+0x1d2>
 8000f7a:	4630      	mov	r0, r6
 8000f7c:	e7d4      	b.n	8000f28 <__udivmoddi4+0x24c>
 8000f7e:	46d6      	mov	lr, sl
 8000f80:	e77f      	b.n	8000e82 <__udivmoddi4+0x1a6>
 8000f82:	4463      	add	r3, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e74d      	b.n	8000e24 <__udivmoddi4+0x148>
 8000f88:	4606      	mov	r6, r0
 8000f8a:	4623      	mov	r3, r4
 8000f8c:	4608      	mov	r0, r1
 8000f8e:	e70f      	b.n	8000db0 <__udivmoddi4+0xd4>
 8000f90:	3e02      	subs	r6, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	e730      	b.n	8000df8 <__udivmoddi4+0x11c>
 8000f96:	bf00      	nop

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
 8000fb0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fb2:	4b29      	ldr	r3, [pc, #164]	@ (8001058 <MX_ADC1_Init+0xbc>)
 8000fb4:	4a29      	ldr	r2, [pc, #164]	@ (800105c <MX_ADC1_Init+0xc0>)
 8000fb6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 8000fb8:	4b27      	ldr	r3, [pc, #156]	@ (8001058 <MX_ADC1_Init+0xbc>)
 8000fba:	f44f 12e0 	mov.w	r2, #1835008	@ 0x1c0000
 8000fbe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fc0:	4b25      	ldr	r3, [pc, #148]	@ (8001058 <MX_ADC1_Init+0xbc>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc6:	4b24      	ldr	r3, [pc, #144]	@ (8001058 <MX_ADC1_Init+0xbc>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fcc:	4b22      	ldr	r3, [pc, #136]	@ (8001058 <MX_ADC1_Init+0xbc>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fd2:	4b21      	ldr	r3, [pc, #132]	@ (8001058 <MX_ADC1_Init+0xbc>)
 8000fd4:	2204      	movs	r2, #4
 8000fd6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001058 <MX_ADC1_Init+0xbc>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fde:	4b1e      	ldr	r3, [pc, #120]	@ (8001058 <MX_ADC1_Init+0xbc>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	@ (8001058 <MX_ADC1_Init+0xbc>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fea:	4b1b      	ldr	r3, [pc, #108]	@ (8001058 <MX_ADC1_Init+0xbc>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ff2:	4b19      	ldr	r3, [pc, #100]	@ (8001058 <MX_ADC1_Init+0xbc>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ff8:	4b17      	ldr	r3, [pc, #92]	@ (8001058 <MX_ADC1_Init+0xbc>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ffe:	4b16      	ldr	r3, [pc, #88]	@ (8001058 <MX_ADC1_Init+0xbc>)
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001006:	4b14      	ldr	r3, [pc, #80]	@ (8001058 <MX_ADC1_Init+0xbc>)
 8001008:	2200      	movs	r2, #0
 800100a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800100c:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <MX_ADC1_Init+0xbc>)
 800100e:	2200      	movs	r2, #0
 8001010:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001014:	4810      	ldr	r0, [pc, #64]	@ (8001058 <MX_ADC1_Init+0xbc>)
 8001016:	f008 fe51 	bl	8009cbc <HAL_ADC_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001020:	f007 fa10 	bl	8008444 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001024:	4b0e      	ldr	r3, [pc, #56]	@ (8001060 <MX_ADC1_Init+0xc4>)
 8001026:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001028:	2306      	movs	r3, #6
 800102a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800102c:	2307      	movs	r3, #7
 800102e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001030:	237f      	movs	r3, #127	@ 0x7f
 8001032:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001034:	2304      	movs	r3, #4
 8001036:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103c:	463b      	mov	r3, r7
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	@ (8001058 <MX_ADC1_Init+0xbc>)
 8001042:	f009 fa07 	bl	800a454 <HAL_ADC_ConfigChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800104c:	f007 f9fa 	bl	8008444 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200000e0 	.word	0x200000e0
 800105c:	50040000 	.word	0x50040000
 8001060:	3ef08000 	.word	0x3ef08000

08001064 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b09e      	sub	sp, #120	@ 0x78
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800107c:	f107 0310 	add.w	r3, r7, #16
 8001080:	2254      	movs	r2, #84	@ 0x54
 8001082:	2100      	movs	r1, #0
 8001084:	4618      	mov	r0, r3
 8001086:	f00d ffb3 	bl	800eff0 <memset>
  if(adcHandle->Instance==ADC1)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a29      	ldr	r2, [pc, #164]	@ (8001134 <HAL_ADC_MspInit+0xd0>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d14a      	bne.n	800112a <HAL_ADC_MspInit+0xc6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001094:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001098:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800109a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800109e:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80010a0:	2302      	movs	r3, #2
 80010a2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80010a4:	2301      	movs	r3, #1
 80010a6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80010a8:	2308      	movs	r3, #8
 80010aa:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80010ac:	2307      	movs	r3, #7
 80010ae:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010b0:	2302      	movs	r3, #2
 80010b2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80010b4:	2302      	movs	r3, #2
 80010b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80010b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80010bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010be:	f107 0310 	add.w	r3, r7, #16
 80010c2:	4618      	mov	r0, r3
 80010c4:	f00b ffa4 	bl	800d010 <HAL_RCCEx_PeriphCLKConfig>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80010ce:	f007 f9b9 	bl	8008444 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010d2:	4b19      	ldr	r3, [pc, #100]	@ (8001138 <HAL_ADC_MspInit+0xd4>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d6:	4a18      	ldr	r2, [pc, #96]	@ (8001138 <HAL_ADC_MspInit+0xd4>)
 80010d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010de:	4b16      	ldr	r3, [pc, #88]	@ (8001138 <HAL_ADC_MspInit+0xd4>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ea:	4b13      	ldr	r3, [pc, #76]	@ (8001138 <HAL_ADC_MspInit+0xd4>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ee:	4a12      	ldr	r2, [pc, #72]	@ (8001138 <HAL_ADC_MspInit+0xd4>)
 80010f0:	f043 0302 	orr.w	r3, r3, #2
 80010f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010f6:	4b10      	ldr	r3, [pc, #64]	@ (8001138 <HAL_ADC_MspInit+0xd4>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001102:	2301      	movs	r3, #1
 8001104:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001106:	230b      	movs	r3, #11
 8001108:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001112:	4619      	mov	r1, r3
 8001114:	4809      	ldr	r0, [pc, #36]	@ (800113c <HAL_ADC_MspInit+0xd8>)
 8001116:	f00a f835 	bl	800b184 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2100      	movs	r1, #0
 800111e:	2012      	movs	r0, #18
 8001120:	f009 fff9 	bl	800b116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001124:	2012      	movs	r0, #18
 8001126:	f00a f812 	bl	800b14e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800112a:	bf00      	nop
 800112c:	3778      	adds	r7, #120	@ 0x78
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	50040000 	.word	0x50040000
 8001138:	40021000 	.word	0x40021000
 800113c:	48000400 	.word	0x48000400

08001140 <aesroundkeys>:
u4_t AESKEY[11 * 16 / sizeof(u4_t)];

// generate 1+10 roundkeys for encryption with 128-bit key
// read 128-bit key from AESKEY in MSBF, generate roundkey words in place
static void aesroundkeys()
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
	int i;
	u4_t b;

	for (i = 0; i < 4; i++) {
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	e021      	b.n	8001190 <aesroundkeys+0x50>
		AESKEY[i] = swapmsbf(AESKEY[i]);
 800114c:	4a37      	ldr	r2, [pc, #220]	@ (800122c <aesroundkeys+0xec>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001154:	061a      	lsls	r2, r3, #24
 8001156:	4935      	ldr	r1, [pc, #212]	@ (800122c <aesroundkeys+0xec>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800115e:	021b      	lsls	r3, r3, #8
 8001160:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001164:	431a      	orrs	r2, r3
 8001166:	4931      	ldr	r1, [pc, #196]	@ (800122c <aesroundkeys+0xec>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800116e:	0a1b      	lsrs	r3, r3, #8
 8001170:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001174:	431a      	orrs	r2, r3
 8001176:	492d      	ldr	r1, [pc, #180]	@ (800122c <aesroundkeys+0xec>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800117e:	0e1b      	lsrs	r3, r3, #24
 8001180:	431a      	orrs	r2, r3
 8001182:	492a      	ldr	r1, [pc, #168]	@ (800122c <aesroundkeys+0xec>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i = 0; i < 4; i++) {
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3301      	adds	r3, #1
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b03      	cmp	r3, #3
 8001194:	ddda      	ble.n	800114c <aesroundkeys+0xc>
	}

	b = AESKEY[3];
 8001196:	4b25      	ldr	r3, [pc, #148]	@ (800122c <aesroundkeys+0xec>)
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	603b      	str	r3, [r7, #0]
	for (; i < 44; i++) {
 800119c:	e03c      	b.n	8001218 <aesroundkeys+0xd8>
		if (i % 4 == 0) {
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d127      	bne.n	80011f8 <aesroundkeys+0xb8>
			// b = SubWord(RotWord(b)) xor Rcon[i/4]
			b = (AES_S[u1(b >> 16)] << 24) ^ (AES_S[u1(b >> 8)] << 16)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	0c1b      	lsrs	r3, r3, #16
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	461a      	mov	r2, r3
 80011b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001230 <aesroundkeys+0xf0>)
 80011b2:	5c9b      	ldrb	r3, [r3, r2]
 80011b4:	061a      	lsls	r2, r3, #24
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	0a1b      	lsrs	r3, r3, #8
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	4619      	mov	r1, r3
 80011be:	4b1c      	ldr	r3, [pc, #112]	@ (8001230 <aesroundkeys+0xf0>)
 80011c0:	5c5b      	ldrb	r3, [r3, r1]
 80011c2:	041b      	lsls	r3, r3, #16
 80011c4:	405a      	eors	r2, r3
					^ (AES_S[u1(b)] << 8) ^ (AES_S[b >> 24])
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	4619      	mov	r1, r3
 80011cc:	4b18      	ldr	r3, [pc, #96]	@ (8001230 <aesroundkeys+0xf0>)
 80011ce:	5c5b      	ldrb	r3, [r3, r1]
 80011d0:	021b      	lsls	r3, r3, #8
 80011d2:	4053      	eors	r3, r2
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	0e12      	lsrs	r2, r2, #24
 80011d8:	4915      	ldr	r1, [pc, #84]	@ (8001230 <aesroundkeys+0xf0>)
 80011da:	5c8a      	ldrb	r2, [r1, r2]
 80011dc:	4053      	eors	r3, r2
 80011de:	461a      	mov	r2, r3
					^ AES_RCON[(i - 4) / 4];
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3b04      	subs	r3, #4
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	da00      	bge.n	80011ea <aesroundkeys+0xaa>
 80011e8:	3303      	adds	r3, #3
 80011ea:	109b      	asrs	r3, r3, #2
 80011ec:	4619      	mov	r1, r3
 80011ee:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <aesroundkeys+0xf4>)
 80011f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			b = (AES_S[u1(b >> 16)] << 24) ^ (AES_S[u1(b >> 8)] << 16)
 80011f4:	4053      	eors	r3, r2
 80011f6:	603b      	str	r3, [r7, #0]
		}
		AESKEY[i] = b ^= AESKEY[i - 4];
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b04      	subs	r3, #4
 80011fc:	4a0b      	ldr	r2, [pc, #44]	@ (800122c <aesroundkeys+0xec>)
 80011fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	4053      	eors	r3, r2
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	4908      	ldr	r1, [pc, #32]	@ (800122c <aesroundkeys+0xec>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (; i < 44; i++) {
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3301      	adds	r3, #1
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b2b      	cmp	r3, #43	@ 0x2b
 800121c:	ddbf      	ble.n	800119e <aesroundkeys+0x5e>
	}
}
 800121e:	bf00      	nop
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	20000154 	.word	0x20000154
 8001230:	08011b90 	.word	0x08011b90
 8001234:	08011b68 	.word	0x08011b68

08001238 <os_aes>:

u4_t os_aes(u1_t mode, xref2u1_t buf, u2_t len)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08c      	sub	sp, #48	@ 0x30
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	6039      	str	r1, [r7, #0]
 8001242:	71fb      	strb	r3, [r7, #7]
 8001244:	4613      	mov	r3, r2
 8001246:	80bb      	strh	r3, [r7, #4]

	aesroundkeys();
 8001248:	f7ff ff7a 	bl	8001140 <aesroundkeys>

	if (mode & AES_MICNOAUX) {
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	f003 0308 	and.w	r3, r3, #8
 8001252:	2b00      	cmp	r3, #0
 8001254:	d010      	beq.n	8001278 <os_aes+0x40>
		AESAUX[0] = AESAUX[1] = AESAUX[2] = AESAUX[3] = 0;
 8001256:	4b5a      	ldr	r3, [pc, #360]	@ (80013c0 <os_aes+0x188>)
 8001258:	2200      	movs	r2, #0
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	4b58      	ldr	r3, [pc, #352]	@ (80013c0 <os_aes+0x188>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	4a57      	ldr	r2, [pc, #348]	@ (80013c0 <os_aes+0x188>)
 8001262:	6093      	str	r3, [r2, #8]
 8001264:	4b56      	ldr	r3, [pc, #344]	@ (80013c0 <os_aes+0x188>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	4a55      	ldr	r2, [pc, #340]	@ (80013c0 <os_aes+0x188>)
 800126a:	6053      	str	r3, [r2, #4]
 800126c:	4b54      	ldr	r3, [pc, #336]	@ (80013c0 <os_aes+0x188>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	4a53      	ldr	r2, [pc, #332]	@ (80013c0 <os_aes+0x188>)
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	f000 bc97 	b.w	8001ba6 <os_aes+0x96e>
	} else {
		AESAUX[0] = swapmsbf(AESAUX[0]);
 8001278:	4b51      	ldr	r3, [pc, #324]	@ (80013c0 <os_aes+0x188>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	061a      	lsls	r2, r3, #24
 800127e:	4b50      	ldr	r3, [pc, #320]	@ (80013c0 <os_aes+0x188>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	021b      	lsls	r3, r3, #8
 8001284:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001288:	431a      	orrs	r2, r3
 800128a:	4b4d      	ldr	r3, [pc, #308]	@ (80013c0 <os_aes+0x188>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	0a1b      	lsrs	r3, r3, #8
 8001290:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001294:	431a      	orrs	r2, r3
 8001296:	4b4a      	ldr	r3, [pc, #296]	@ (80013c0 <os_aes+0x188>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	0e1b      	lsrs	r3, r3, #24
 800129c:	4313      	orrs	r3, r2
 800129e:	4a48      	ldr	r2, [pc, #288]	@ (80013c0 <os_aes+0x188>)
 80012a0:	6013      	str	r3, [r2, #0]
		AESAUX[1] = swapmsbf(AESAUX[1]);
 80012a2:	4b47      	ldr	r3, [pc, #284]	@ (80013c0 <os_aes+0x188>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	061a      	lsls	r2, r3, #24
 80012a8:	4b45      	ldr	r3, [pc, #276]	@ (80013c0 <os_aes+0x188>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	021b      	lsls	r3, r3, #8
 80012ae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80012b2:	431a      	orrs	r2, r3
 80012b4:	4b42      	ldr	r3, [pc, #264]	@ (80013c0 <os_aes+0x188>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80012be:	431a      	orrs	r2, r3
 80012c0:	4b3f      	ldr	r3, [pc, #252]	@ (80013c0 <os_aes+0x188>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	0e1b      	lsrs	r3, r3, #24
 80012c6:	4313      	orrs	r3, r2
 80012c8:	4a3d      	ldr	r2, [pc, #244]	@ (80013c0 <os_aes+0x188>)
 80012ca:	6053      	str	r3, [r2, #4]
		AESAUX[2] = swapmsbf(AESAUX[2]);
 80012cc:	4b3c      	ldr	r3, [pc, #240]	@ (80013c0 <os_aes+0x188>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	061a      	lsls	r2, r3, #24
 80012d2:	4b3b      	ldr	r3, [pc, #236]	@ (80013c0 <os_aes+0x188>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	021b      	lsls	r3, r3, #8
 80012d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80012dc:	431a      	orrs	r2, r3
 80012de:	4b38      	ldr	r3, [pc, #224]	@ (80013c0 <os_aes+0x188>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	0a1b      	lsrs	r3, r3, #8
 80012e4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80012e8:	431a      	orrs	r2, r3
 80012ea:	4b35      	ldr	r3, [pc, #212]	@ (80013c0 <os_aes+0x188>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	0e1b      	lsrs	r3, r3, #24
 80012f0:	4313      	orrs	r3, r2
 80012f2:	4a33      	ldr	r2, [pc, #204]	@ (80013c0 <os_aes+0x188>)
 80012f4:	6093      	str	r3, [r2, #8]
		AESAUX[3] = swapmsbf(AESAUX[3]);
 80012f6:	4b32      	ldr	r3, [pc, #200]	@ (80013c0 <os_aes+0x188>)
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	061a      	lsls	r2, r3, #24
 80012fc:	4b30      	ldr	r3, [pc, #192]	@ (80013c0 <os_aes+0x188>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	021b      	lsls	r3, r3, #8
 8001302:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001306:	431a      	orrs	r2, r3
 8001308:	4b2d      	ldr	r3, [pc, #180]	@ (80013c0 <os_aes+0x188>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001312:	431a      	orrs	r2, r3
 8001314:	4b2a      	ldr	r3, [pc, #168]	@ (80013c0 <os_aes+0x188>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	0e1b      	lsrs	r3, r3, #24
 800131a:	4313      	orrs	r3, r2
 800131c:	4a28      	ldr	r2, [pc, #160]	@ (80013c0 <os_aes+0x188>)
 800131e:	60d3      	str	r3, [r2, #12]
	}

	while ((signed char) len > 0) {
 8001320:	f000 bc41 	b.w	8001ba6 <os_aes+0x96e>
		u4_t a0, a1, a2, a3;
		u4_t t0, t1, t2, t3;
		u4_t *ki, *ke;

		// load input block
		if ((mode & AES_CTR)
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	2b00      	cmp	r3, #0
 800132c:	d109      	bne.n	8001342 <os_aes+0x10a>
				|| ((mode & AES_MIC) && (mode & AES_MICNOAUX) == 0)) { // load CTR block or first MIC block
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d011      	beq.n	800135c <os_aes+0x124>
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10c      	bne.n	800135c <os_aes+0x124>
			a0 = AESAUX[0];
 8001342:	4b1f      	ldr	r3, [pc, #124]	@ (80013c0 <os_aes+0x188>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	62fb      	str	r3, [r7, #44]	@ 0x2c
			a1 = AESAUX[1];
 8001348:	4b1d      	ldr	r3, [pc, #116]	@ (80013c0 <os_aes+0x188>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	62bb      	str	r3, [r7, #40]	@ 0x28
			a2 = AESAUX[2];
 800134e:	4b1c      	ldr	r3, [pc, #112]	@ (80013c0 <os_aes+0x188>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	627b      	str	r3, [r7, #36]	@ 0x24
			a3 = AESAUX[3];
 8001354:	4b1a      	ldr	r3, [pc, #104]	@ (80013c0 <os_aes+0x188>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	623b      	str	r3, [r7, #32]
 800135a:	e062      	b.n	8001422 <os_aes+0x1ea>
		} else if ((mode & AES_MIC) && len <= 16) { // last MIC block
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d016      	beq.n	8001394 <os_aes+0x15c>
 8001366:	88bb      	ldrh	r3, [r7, #4]
 8001368:	2b10      	cmp	r3, #16
 800136a:	d813      	bhi.n	8001394 <os_aes+0x15c>
			a0 = a1 = a2 = a3 = 0; // load null block
 800136c:	2300      	movs	r3, #0
 800136e:	623b      	str	r3, [r7, #32]
 8001370:	6a3b      	ldr	r3, [r7, #32]
 8001372:	627b      	str	r3, [r7, #36]	@ 0x24
 8001374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001376:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800137a:	62fb      	str	r3, [r7, #44]	@ 0x2c
			mode |= ((len == 16) ? 1 : 2) << 4; // set MICSUB: CMAC subkey K1 or K2
 800137c:	88bb      	ldrh	r3, [r7, #4]
 800137e:	2b10      	cmp	r3, #16
 8001380:	d101      	bne.n	8001386 <os_aes+0x14e>
 8001382:	2210      	movs	r2, #16
 8001384:	e000      	b.n	8001388 <os_aes+0x150>
 8001386:	2220      	movs	r2, #32
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	4313      	orrs	r3, r2
 800138e:	b25b      	sxtb	r3, r3
 8001390:	71fb      	strb	r3, [r7, #7]
 8001392:	e046      	b.n	8001422 <os_aes+0x1ea>
		} else
			LOADDATA: { // load data block (partially)
 8001394:	bf00      	nop
				for (t0 = 0; t0 < 16; t0++) {
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
 800139a:	e026      	b.n	80013ea <os_aes+0x1b2>
					t1 =
							(t1 << 8)
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	021a      	lsls	r2, r3, #8
									| ((t0 < len) ? buf[t0] :
 80013a0:	88bb      	ldrh	r3, [r7, #4]
 80013a2:	69f9      	ldr	r1, [r7, #28]
 80013a4:	4299      	cmp	r1, r3
 80013a6:	d204      	bcs.n	80013b2 <os_aes+0x17a>
 80013a8:	6839      	ldr	r1, [r7, #0]
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	440b      	add	r3, r1
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	e009      	b.n	80013c6 <os_aes+0x18e>
										(t0 == len) ? 0x80 : 0x00);
 80013b2:	88bb      	ldrh	r3, [r7, #4]
									| ((t0 < len) ? buf[t0] :
 80013b4:	69f9      	ldr	r1, [r7, #28]
 80013b6:	4299      	cmp	r1, r3
 80013b8:	d104      	bne.n	80013c4 <os_aes+0x18c>
 80013ba:	2380      	movs	r3, #128	@ 0x80
 80013bc:	e003      	b.n	80013c6 <os_aes+0x18e>
 80013be:	bf00      	nop
 80013c0:	20000144 	.word	0x20000144
 80013c4:	2300      	movs	r3, #0
					t1 =
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
					if ((t0 & 3) == 3) {
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	2b03      	cmp	r3, #3
 80013d2:	d107      	bne.n	80013e4 <os_aes+0x1ac>
						a0 = a1;
 80013d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
						a1 = a2;
 80013d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013da:	62bb      	str	r3, [r7, #40]	@ 0x28
						a2 = a3;
 80013dc:	6a3b      	ldr	r3, [r7, #32]
 80013de:	627b      	str	r3, [r7, #36]	@ 0x24
						a3 = t1;
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	623b      	str	r3, [r7, #32]
				for (t0 = 0; t0 < 16; t0++) {
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	3301      	adds	r3, #1
 80013e8:	61fb      	str	r3, [r7, #28]
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	2b0f      	cmp	r3, #15
 80013ee:	d9d5      	bls.n	800139c <os_aes+0x164>
					}
				}
				if (mode & AES_MIC) {
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d013      	beq.n	8001422 <os_aes+0x1ea>
					a0 ^= AESAUX[0];
 80013fa:	4ba0      	ldr	r3, [pc, #640]	@ (800167c <os_aes+0x444>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001400:	4053      	eors	r3, r2
 8001402:	62fb      	str	r3, [r7, #44]	@ 0x2c
					a1 ^= AESAUX[1];
 8001404:	4b9d      	ldr	r3, [pc, #628]	@ (800167c <os_aes+0x444>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800140a:	4053      	eors	r3, r2
 800140c:	62bb      	str	r3, [r7, #40]	@ 0x28
					a2 ^= AESAUX[2];
 800140e:	4b9b      	ldr	r3, [pc, #620]	@ (800167c <os_aes+0x444>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001414:	4053      	eors	r3, r2
 8001416:	627b      	str	r3, [r7, #36]	@ 0x24
					a3 ^= AESAUX[3];
 8001418:	4b98      	ldr	r3, [pc, #608]	@ (800167c <os_aes+0x444>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	6a3a      	ldr	r2, [r7, #32]
 800141e:	4053      	eors	r3, r2
 8001420:	623b      	str	r3, [r7, #32]
				}
			}

		// perform AES encryption on block in a0-a3
		ki = AESKEY;
 8001422:	4b97      	ldr	r3, [pc, #604]	@ (8001680 <os_aes+0x448>)
 8001424:	617b      	str	r3, [r7, #20]
		ke = ki + 8 * 4;
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	3380      	adds	r3, #128	@ 0x80
 800142a:	613b      	str	r3, [r7, #16]
		a0 ^= ki[0];
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001432:	4053      	eors	r3, r2
 8001434:	62fb      	str	r3, [r7, #44]	@ 0x2c
		a1 ^= ki[1];
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	3304      	adds	r3, #4
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800143e:	4053      	eors	r3, r2
 8001440:	62bb      	str	r3, [r7, #40]	@ 0x28
		a2 ^= ki[2];
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	3308      	adds	r3, #8
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800144a:	4053      	eors	r3, r2
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
		a3 ^= ki[3];
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	330c      	adds	r3, #12
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6a3a      	ldr	r2, [r7, #32]
 8001456:	4053      	eors	r3, r2
 8001458:	623b      	str	r3, [r7, #32]
		do {
			AES_key4(t1, t2, t3, t0, 4);
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	61bb      	str	r3, [r7, #24]
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	61fb      	str	r3, [r7, #28]
			AES_expr4(t1, t2, t3, t0, a0);
 8001472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001474:	b2db      	uxtb	r3, r3
 8001476:	461a      	mov	r2, r3
 8001478:	4b82      	ldr	r3, [pc, #520]	@ (8001684 <os_aes+0x44c>)
 800147a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4053      	eors	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
 8001484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001486:	0a1b      	lsrs	r3, r3, #8
 8001488:	b2db      	uxtb	r3, r3
 800148a:	461a      	mov	r2, r3
 800148c:	4b7e      	ldr	r3, [pc, #504]	@ (8001688 <os_aes+0x450>)
 800148e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	4053      	eors	r3, r2
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800149a:	0c1b      	lsrs	r3, r3, #16
 800149c:	b2db      	uxtb	r3, r3
 800149e:	461a      	mov	r2, r3
 80014a0:	4b7a      	ldr	r3, [pc, #488]	@ (800168c <os_aes+0x454>)
 80014a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	4053      	eors	r3, r2
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014ae:	0e1b      	lsrs	r3, r3, #24
 80014b0:	4a77      	ldr	r2, [pc, #476]	@ (8001690 <os_aes+0x458>)
 80014b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b6:	69fa      	ldr	r2, [r7, #28]
 80014b8:	4053      	eors	r3, r2
 80014ba:	61fb      	str	r3, [r7, #28]
			AES_expr4(t2, t3, t0, t1, a1);
 80014bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b70      	ldr	r3, [pc, #448]	@ (8001684 <os_aes+0x44c>)
 80014c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c8:	68fa      	ldr	r2, [r7, #12]
 80014ca:	4053      	eors	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014d0:	0a1b      	lsrs	r3, r3, #8
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b6c      	ldr	r3, [pc, #432]	@ (8001688 <os_aes+0x450>)
 80014d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014dc:	68ba      	ldr	r2, [r7, #8]
 80014de:	4053      	eors	r3, r2
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014e4:	0c1b      	lsrs	r3, r3, #16
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b68      	ldr	r3, [pc, #416]	@ (800168c <os_aes+0x454>)
 80014ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f0:	69fa      	ldr	r2, [r7, #28]
 80014f2:	4053      	eors	r3, r2
 80014f4:	61fb      	str	r3, [r7, #28]
 80014f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014f8:	0e1b      	lsrs	r3, r3, #24
 80014fa:	4a65      	ldr	r2, [pc, #404]	@ (8001690 <os_aes+0x458>)
 80014fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4053      	eors	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
			AES_expr4(t3, t0, t1, t2, a2);
 8001506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001508:	b2db      	uxtb	r3, r3
 800150a:	461a      	mov	r2, r3
 800150c:	4b5d      	ldr	r3, [pc, #372]	@ (8001684 <os_aes+0x44c>)
 800150e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	4053      	eors	r3, r2
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151a:	0a1b      	lsrs	r3, r3, #8
 800151c:	b2db      	uxtb	r3, r3
 800151e:	461a      	mov	r2, r3
 8001520:	4b59      	ldr	r3, [pc, #356]	@ (8001688 <os_aes+0x450>)
 8001522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001526:	69fa      	ldr	r2, [r7, #28]
 8001528:	4053      	eors	r3, r2
 800152a:	61fb      	str	r3, [r7, #28]
 800152c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152e:	0c1b      	lsrs	r3, r3, #16
 8001530:	b2db      	uxtb	r3, r3
 8001532:	461a      	mov	r2, r3
 8001534:	4b55      	ldr	r3, [pc, #340]	@ (800168c <os_aes+0x454>)
 8001536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4053      	eors	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
 8001540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001542:	0e1b      	lsrs	r3, r3, #24
 8001544:	4a52      	ldr	r2, [pc, #328]	@ (8001690 <os_aes+0x458>)
 8001546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	4053      	eors	r3, r2
 800154e:	60fb      	str	r3, [r7, #12]
			AES_expr4(t0, t1, t2, t3, a3);
 8001550:	6a3b      	ldr	r3, [r7, #32]
 8001552:	b2db      	uxtb	r3, r3
 8001554:	461a      	mov	r2, r3
 8001556:	4b4b      	ldr	r3, [pc, #300]	@ (8001684 <os_aes+0x44c>)
 8001558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800155c:	69fa      	ldr	r2, [r7, #28]
 800155e:	4053      	eors	r3, r2
 8001560:	61fb      	str	r3, [r7, #28]
 8001562:	6a3b      	ldr	r3, [r7, #32]
 8001564:	0a1b      	lsrs	r3, r3, #8
 8001566:	b2db      	uxtb	r3, r3
 8001568:	461a      	mov	r2, r3
 800156a:	4b47      	ldr	r3, [pc, #284]	@ (8001688 <os_aes+0x450>)
 800156c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4053      	eors	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
 8001576:	6a3b      	ldr	r3, [r7, #32]
 8001578:	0c1b      	lsrs	r3, r3, #16
 800157a:	b2db      	uxtb	r3, r3
 800157c:	461a      	mov	r2, r3
 800157e:	4b43      	ldr	r3, [pc, #268]	@ (800168c <os_aes+0x454>)
 8001580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	4053      	eors	r3, r2
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	6a3b      	ldr	r3, [r7, #32]
 800158c:	0e1b      	lsrs	r3, r3, #24
 800158e:	4a40      	ldr	r2, [pc, #256]	@ (8001690 <os_aes+0x458>)
 8001590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001594:	68ba      	ldr	r2, [r7, #8]
 8001596:	4053      	eors	r3, r2
 8001598:	60bb      	str	r3, [r7, #8]

			AES_key4(a1, a2, a3, a0, 8);
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800159e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015aa:	623b      	str	r3, [r7, #32]
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			AES_expr4(a1, a2, a3, a0, t0);
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	461a      	mov	r2, r3
 80015b8:	4b32      	ldr	r3, [pc, #200]	@ (8001684 <os_aes+0x44c>)
 80015ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80015c0:	4053      	eors	r3, r2
 80015c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	0a1b      	lsrs	r3, r3, #8
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	461a      	mov	r2, r3
 80015cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001688 <os_aes+0x450>)
 80015ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015d4:	4053      	eors	r3, r2
 80015d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	0c1b      	lsrs	r3, r3, #16
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	461a      	mov	r2, r3
 80015e0:	4b2a      	ldr	r3, [pc, #168]	@ (800168c <os_aes+0x454>)
 80015e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e6:	6a3a      	ldr	r2, [r7, #32]
 80015e8:	4053      	eors	r3, r2
 80015ea:	623b      	str	r3, [r7, #32]
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	0e1b      	lsrs	r3, r3, #24
 80015f0:	4a27      	ldr	r2, [pc, #156]	@ (8001690 <os_aes+0x458>)
 80015f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015f8:	4053      	eors	r3, r2
 80015fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
			AES_expr4(a2, a3, a0, a1, t1);
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	461a      	mov	r2, r3
 8001602:	4b20      	ldr	r3, [pc, #128]	@ (8001684 <os_aes+0x44c>)
 8001604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001608:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800160a:	4053      	eors	r3, r2
 800160c:	627b      	str	r3, [r7, #36]	@ 0x24
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	0a1b      	lsrs	r3, r3, #8
 8001612:	b2db      	uxtb	r3, r3
 8001614:	461a      	mov	r2, r3
 8001616:	4b1c      	ldr	r3, [pc, #112]	@ (8001688 <os_aes+0x450>)
 8001618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800161c:	6a3a      	ldr	r2, [r7, #32]
 800161e:	4053      	eors	r3, r2
 8001620:	623b      	str	r3, [r7, #32]
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	0c1b      	lsrs	r3, r3, #16
 8001626:	b2db      	uxtb	r3, r3
 8001628:	461a      	mov	r2, r3
 800162a:	4b18      	ldr	r3, [pc, #96]	@ (800168c <os_aes+0x454>)
 800162c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001630:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001632:	4053      	eors	r3, r2
 8001634:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	0e1b      	lsrs	r3, r3, #24
 800163a:	4a15      	ldr	r2, [pc, #84]	@ (8001690 <os_aes+0x458>)
 800163c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001640:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001642:	4053      	eors	r3, r2
 8001644:	62bb      	str	r3, [r7, #40]	@ 0x28
			AES_expr4(a3, a0, a1, a2, t2);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	461a      	mov	r2, r3
 800164c:	4b0d      	ldr	r3, [pc, #52]	@ (8001684 <os_aes+0x44c>)
 800164e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001652:	6a3a      	ldr	r2, [r7, #32]
 8001654:	4053      	eors	r3, r2
 8001656:	623b      	str	r3, [r7, #32]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	0a1b      	lsrs	r3, r3, #8
 800165c:	b2db      	uxtb	r3, r3
 800165e:	461a      	mov	r2, r3
 8001660:	4b09      	ldr	r3, [pc, #36]	@ (8001688 <os_aes+0x450>)
 8001662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001666:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001668:	4053      	eors	r3, r2
 800166a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	0c1b      	lsrs	r3, r3, #16
 8001670:	b2db      	uxtb	r3, r3
 8001672:	461a      	mov	r2, r3
 8001674:	4b05      	ldr	r3, [pc, #20]	@ (800168c <os_aes+0x454>)
 8001676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800167a:	e00b      	b.n	8001694 <os_aes+0x45c>
 800167c:	20000144 	.word	0x20000144
 8001680:	20000154 	.word	0x20000154
 8001684:	08012890 	.word	0x08012890
 8001688:	08012490 	.word	0x08012490
 800168c:	08012090 	.word	0x08012090
 8001690:	08011c90 	.word	0x08011c90
 8001694:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001696:	4053      	eors	r3, r2
 8001698:	62bb      	str	r3, [r7, #40]	@ 0x28
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	0e1b      	lsrs	r3, r3, #24
 800169e:	4aa1      	ldr	r2, [pc, #644]	@ (8001924 <os_aes+0x6ec>)
 80016a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016a6:	4053      	eors	r3, r2
 80016a8:	627b      	str	r3, [r7, #36]	@ 0x24
			AES_expr4(a0, a1, a2, a3, t3);
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	461a      	mov	r2, r3
 80016b0:	4b9d      	ldr	r3, [pc, #628]	@ (8001928 <os_aes+0x6f0>)
 80016b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016b8:	4053      	eors	r3, r2
 80016ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	0a1b      	lsrs	r3, r3, #8
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	461a      	mov	r2, r3
 80016c4:	4b99      	ldr	r3, [pc, #612]	@ (800192c <os_aes+0x6f4>)
 80016c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80016cc:	4053      	eors	r3, r2
 80016ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	0c1b      	lsrs	r3, r3, #16
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	461a      	mov	r2, r3
 80016d8:	4b95      	ldr	r3, [pc, #596]	@ (8001930 <os_aes+0x6f8>)
 80016da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016e0:	4053      	eors	r3, r2
 80016e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	0e1b      	lsrs	r3, r3, #24
 80016e8:	4a8e      	ldr	r2, [pc, #568]	@ (8001924 <os_aes+0x6ec>)
 80016ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ee:	6a3a      	ldr	r2, [r7, #32]
 80016f0:	4053      	eors	r3, r2
 80016f2:	623b      	str	r3, [r7, #32]
		} while ((ki += 8) < ke);
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	3320      	adds	r3, #32
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	429a      	cmp	r2, r3
 8001700:	f4ff aeab 	bcc.w	800145a <os_aes+0x222>

		AES_key4(t1, t2, t3, t0, 4);
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	695b      	ldr	r3, [r3, #20]
 8001708:	61bb      	str	r3, [r7, #24]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	69db      	ldr	r3, [r3, #28]
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	61fb      	str	r3, [r7, #28]
		AES_expr4(t1, t2, t3, t0, a0);
 800171c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800171e:	b2db      	uxtb	r3, r3
 8001720:	461a      	mov	r2, r3
 8001722:	4b81      	ldr	r3, [pc, #516]	@ (8001928 <os_aes+0x6f0>)
 8001724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4053      	eors	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
 800172e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001730:	0a1b      	lsrs	r3, r3, #8
 8001732:	b2db      	uxtb	r3, r3
 8001734:	461a      	mov	r2, r3
 8001736:	4b7d      	ldr	r3, [pc, #500]	@ (800192c <os_aes+0x6f4>)
 8001738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	4053      	eors	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001744:	0c1b      	lsrs	r3, r3, #16
 8001746:	b2db      	uxtb	r3, r3
 8001748:	461a      	mov	r2, r3
 800174a:	4b79      	ldr	r3, [pc, #484]	@ (8001930 <os_aes+0x6f8>)
 800174c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001750:	68ba      	ldr	r2, [r7, #8]
 8001752:	4053      	eors	r3, r2
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001758:	0e1b      	lsrs	r3, r3, #24
 800175a:	4a72      	ldr	r2, [pc, #456]	@ (8001924 <os_aes+0x6ec>)
 800175c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001760:	69fa      	ldr	r2, [r7, #28]
 8001762:	4053      	eors	r3, r2
 8001764:	61fb      	str	r3, [r7, #28]
		AES_expr4(t2, t3, t0, t1, a1);
 8001766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001768:	b2db      	uxtb	r3, r3
 800176a:	461a      	mov	r2, r3
 800176c:	4b6e      	ldr	r3, [pc, #440]	@ (8001928 <os_aes+0x6f0>)
 800176e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	4053      	eors	r3, r2
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800177a:	0a1b      	lsrs	r3, r3, #8
 800177c:	b2db      	uxtb	r3, r3
 800177e:	461a      	mov	r2, r3
 8001780:	4b6a      	ldr	r3, [pc, #424]	@ (800192c <os_aes+0x6f4>)
 8001782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	4053      	eors	r3, r2
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800178e:	0c1b      	lsrs	r3, r3, #16
 8001790:	b2db      	uxtb	r3, r3
 8001792:	461a      	mov	r2, r3
 8001794:	4b66      	ldr	r3, [pc, #408]	@ (8001930 <os_aes+0x6f8>)
 8001796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800179a:	69fa      	ldr	r2, [r7, #28]
 800179c:	4053      	eors	r3, r2
 800179e:	61fb      	str	r3, [r7, #28]
 80017a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017a2:	0e1b      	lsrs	r3, r3, #24
 80017a4:	4a5f      	ldr	r2, [pc, #380]	@ (8001924 <os_aes+0x6ec>)
 80017a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4053      	eors	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
		AES_expr4(t3, t0, t1, t2, a2);
 80017b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b5c      	ldr	r3, [pc, #368]	@ (8001928 <os_aes+0x6f0>)
 80017b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017bc:	68ba      	ldr	r2, [r7, #8]
 80017be:	4053      	eors	r3, r2
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	461a      	mov	r2, r3
 80017ca:	4b58      	ldr	r3, [pc, #352]	@ (800192c <os_aes+0x6f4>)
 80017cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d0:	69fa      	ldr	r2, [r7, #28]
 80017d2:	4053      	eors	r3, r2
 80017d4:	61fb      	str	r3, [r7, #28]
 80017d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d8:	0c1b      	lsrs	r3, r3, #16
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	461a      	mov	r2, r3
 80017de:	4b54      	ldr	r3, [pc, #336]	@ (8001930 <os_aes+0x6f8>)
 80017e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4053      	eors	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
 80017ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ec:	0e1b      	lsrs	r3, r3, #24
 80017ee:	4a4d      	ldr	r2, [pc, #308]	@ (8001924 <os_aes+0x6ec>)
 80017f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	4053      	eors	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]
		AES_expr4(t0, t1, t2, t3, a3);
 80017fa:	6a3b      	ldr	r3, [r7, #32]
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	461a      	mov	r2, r3
 8001800:	4b49      	ldr	r3, [pc, #292]	@ (8001928 <os_aes+0x6f0>)
 8001802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001806:	69fa      	ldr	r2, [r7, #28]
 8001808:	4053      	eors	r3, r2
 800180a:	61fb      	str	r3, [r7, #28]
 800180c:	6a3b      	ldr	r3, [r7, #32]
 800180e:	0a1b      	lsrs	r3, r3, #8
 8001810:	b2db      	uxtb	r3, r3
 8001812:	461a      	mov	r2, r3
 8001814:	4b45      	ldr	r3, [pc, #276]	@ (800192c <os_aes+0x6f4>)
 8001816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4053      	eors	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
 8001820:	6a3b      	ldr	r3, [r7, #32]
 8001822:	0c1b      	lsrs	r3, r3, #16
 8001824:	b2db      	uxtb	r3, r3
 8001826:	461a      	mov	r2, r3
 8001828:	4b41      	ldr	r3, [pc, #260]	@ (8001930 <os_aes+0x6f8>)
 800182a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	4053      	eors	r3, r2
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	6a3b      	ldr	r3, [r7, #32]
 8001836:	0e1b      	lsrs	r3, r3, #24
 8001838:	4a3a      	ldr	r2, [pc, #232]	@ (8001924 <os_aes+0x6ec>)
 800183a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	4053      	eors	r3, r2
 8001842:	60bb      	str	r3, [r7, #8]

		AES_expr(a0, t0, t1, t2, t3, 8);
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	0e1b      	lsrs	r3, r3, #24
 800184e:	4a39      	ldr	r2, [pc, #228]	@ (8001934 <os_aes+0x6fc>)
 8001850:	5cd3      	ldrb	r3, [r2, r3]
 8001852:	061b      	lsls	r3, r3, #24
 8001854:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001856:	4053      	eors	r3, r2
 8001858:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	0c1b      	lsrs	r3, r3, #16
 800185e:	b2db      	uxtb	r3, r3
 8001860:	461a      	mov	r2, r3
 8001862:	4b34      	ldr	r3, [pc, #208]	@ (8001934 <os_aes+0x6fc>)
 8001864:	5c9b      	ldrb	r3, [r3, r2]
 8001866:	041b      	lsls	r3, r3, #16
 8001868:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800186a:	4053      	eors	r3, r2
 800186c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	0a1b      	lsrs	r3, r3, #8
 8001872:	b2db      	uxtb	r3, r3
 8001874:	461a      	mov	r2, r3
 8001876:	4b2f      	ldr	r3, [pc, #188]	@ (8001934 <os_aes+0x6fc>)
 8001878:	5c9b      	ldrb	r3, [r3, r2]
 800187a:	021b      	lsls	r3, r3, #8
 800187c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800187e:	4053      	eors	r3, r2
 8001880:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	461a      	mov	r2, r3
 8001888:	4b2a      	ldr	r3, [pc, #168]	@ (8001934 <os_aes+0x6fc>)
 800188a:	5c9b      	ldrb	r3, [r3, r2]
 800188c:	461a      	mov	r2, r3
 800188e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001890:	4053      	eors	r3, r2
 8001892:	62fb      	str	r3, [r7, #44]	@ 0x2c
		AES_expr(a1, t1, t2, t3, t0, 9);
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001898:	62bb      	str	r3, [r7, #40]	@ 0x28
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	0e1b      	lsrs	r3, r3, #24
 800189e:	4a25      	ldr	r2, [pc, #148]	@ (8001934 <os_aes+0x6fc>)
 80018a0:	5cd3      	ldrb	r3, [r2, r3]
 80018a2:	061b      	lsls	r3, r3, #24
 80018a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018a6:	4053      	eors	r3, r2
 80018a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	0c1b      	lsrs	r3, r3, #16
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b20      	ldr	r3, [pc, #128]	@ (8001934 <os_aes+0x6fc>)
 80018b4:	5c9b      	ldrb	r3, [r3, r2]
 80018b6:	041b      	lsls	r3, r3, #16
 80018b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018ba:	4053      	eors	r3, r2
 80018bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	0a1b      	lsrs	r3, r3, #8
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001934 <os_aes+0x6fc>)
 80018c8:	5c9b      	ldrb	r3, [r3, r2]
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018ce:	4053      	eors	r3, r2
 80018d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	461a      	mov	r2, r3
 80018d8:	4b16      	ldr	r3, [pc, #88]	@ (8001934 <os_aes+0x6fc>)
 80018da:	5c9b      	ldrb	r3, [r3, r2]
 80018dc:	461a      	mov	r2, r3
 80018de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018e0:	4053      	eors	r3, r2
 80018e2:	62bb      	str	r3, [r7, #40]	@ 0x28
		AES_expr(a2, t2, t3, t0, t1, 10);
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	0e1b      	lsrs	r3, r3, #24
 80018ee:	4a11      	ldr	r2, [pc, #68]	@ (8001934 <os_aes+0x6fc>)
 80018f0:	5cd3      	ldrb	r3, [r2, r3]
 80018f2:	061b      	lsls	r3, r3, #24
 80018f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018f6:	4053      	eors	r3, r2
 80018f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	0c1b      	lsrs	r3, r3, #16
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	461a      	mov	r2, r3
 8001902:	4b0c      	ldr	r3, [pc, #48]	@ (8001934 <os_aes+0x6fc>)
 8001904:	5c9b      	ldrb	r3, [r3, r2]
 8001906:	041b      	lsls	r3, r3, #16
 8001908:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800190a:	4053      	eors	r3, r2
 800190c:	627b      	str	r3, [r7, #36]	@ 0x24
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	0a1b      	lsrs	r3, r3, #8
 8001912:	b2db      	uxtb	r3, r3
 8001914:	461a      	mov	r2, r3
 8001916:	4b07      	ldr	r3, [pc, #28]	@ (8001934 <os_aes+0x6fc>)
 8001918:	5c9b      	ldrb	r3, [r3, r2]
 800191a:	021b      	lsls	r3, r3, #8
 800191c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800191e:	4053      	eors	r3, r2
 8001920:	e00a      	b.n	8001938 <os_aes+0x700>
 8001922:	bf00      	nop
 8001924:	08011c90 	.word	0x08011c90
 8001928:	08012890 	.word	0x08012890
 800192c:	08012490 	.word	0x08012490
 8001930:	08012090 	.word	0x08012090
 8001934:	08011b90 	.word	0x08011b90
 8001938:	627b      	str	r3, [r7, #36]	@ 0x24
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	b2db      	uxtb	r3, r3
 800193e:	461a      	mov	r2, r3
 8001940:	4b5f      	ldr	r3, [pc, #380]	@ (8001ac0 <os_aes+0x888>)
 8001942:	5c9b      	ldrb	r3, [r3, r2]
 8001944:	461a      	mov	r2, r3
 8001946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001948:	4053      	eors	r3, r2
 800194a:	627b      	str	r3, [r7, #36]	@ 0x24
		AES_expr(a3, t3, t0, t1, t2, 11);
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001950:	623b      	str	r3, [r7, #32]
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	0e1b      	lsrs	r3, r3, #24
 8001956:	4a5a      	ldr	r2, [pc, #360]	@ (8001ac0 <os_aes+0x888>)
 8001958:	5cd3      	ldrb	r3, [r2, r3]
 800195a:	061b      	lsls	r3, r3, #24
 800195c:	6a3a      	ldr	r2, [r7, #32]
 800195e:	4053      	eors	r3, r2
 8001960:	623b      	str	r3, [r7, #32]
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	0c1b      	lsrs	r3, r3, #16
 8001966:	b2db      	uxtb	r3, r3
 8001968:	461a      	mov	r2, r3
 800196a:	4b55      	ldr	r3, [pc, #340]	@ (8001ac0 <os_aes+0x888>)
 800196c:	5c9b      	ldrb	r3, [r3, r2]
 800196e:	041b      	lsls	r3, r3, #16
 8001970:	6a3a      	ldr	r2, [r7, #32]
 8001972:	4053      	eors	r3, r2
 8001974:	623b      	str	r3, [r7, #32]
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	0a1b      	lsrs	r3, r3, #8
 800197a:	b2db      	uxtb	r3, r3
 800197c:	461a      	mov	r2, r3
 800197e:	4b50      	ldr	r3, [pc, #320]	@ (8001ac0 <os_aes+0x888>)
 8001980:	5c9b      	ldrb	r3, [r3, r2]
 8001982:	021b      	lsls	r3, r3, #8
 8001984:	6a3a      	ldr	r2, [r7, #32]
 8001986:	4053      	eors	r3, r2
 8001988:	623b      	str	r3, [r7, #32]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	b2db      	uxtb	r3, r3
 800198e:	461a      	mov	r2, r3
 8001990:	4b4b      	ldr	r3, [pc, #300]	@ (8001ac0 <os_aes+0x888>)
 8001992:	5c9b      	ldrb	r3, [r3, r2]
 8001994:	461a      	mov	r2, r3
 8001996:	6a3b      	ldr	r3, [r7, #32]
 8001998:	4053      	eors	r3, r2
 800199a:	623b      	str	r3, [r7, #32]
		// result of AES encryption in a0-a3

		if (mode & AES_MIC) {
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d056      	beq.n	8001a54 <os_aes+0x81c>
			if ((t1 = (mode & AES_MICSUB) >> 4) != 0) { // last block
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	111b      	asrs	r3, r3, #4
 80019aa:	f003 0303 	and.w	r3, r3, #3
 80019ae:	61bb      	str	r3, [r7, #24]
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d041      	beq.n	8001a3a <os_aes+0x802>
				do {
					// compute CMAC subkey K1 and K2
					t0 = a0 >> 31; // save MSB
 80019b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019b8:	0fdb      	lsrs	r3, r3, #31
 80019ba:	61fb      	str	r3, [r7, #28]
					a0 = (a0 << 1) | (a1 >> 31);
 80019bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019be:	005a      	lsls	r2, r3, #1
 80019c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019c2:	0fdb      	lsrs	r3, r3, #31
 80019c4:	4313      	orrs	r3, r2
 80019c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
					a1 = (a1 << 1) | (a2 >> 31);
 80019c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ca:	005a      	lsls	r2, r3, #1
 80019cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ce:	0fdb      	lsrs	r3, r3, #31
 80019d0:	4313      	orrs	r3, r2
 80019d2:	62bb      	str	r3, [r7, #40]	@ 0x28
					a2 = (a2 << 1) | (a3 >> 31);
 80019d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d6:	005a      	lsls	r2, r3, #1
 80019d8:	6a3b      	ldr	r3, [r7, #32]
 80019da:	0fdb      	lsrs	r3, r3, #31
 80019dc:	4313      	orrs	r3, r2
 80019de:	627b      	str	r3, [r7, #36]	@ 0x24
					a3 = (a3 << 1);
 80019e0:	6a3b      	ldr	r3, [r7, #32]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	623b      	str	r3, [r7, #32]
					if (t0)
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <os_aes+0x7bc>
						a3 ^= 0x87;
 80019ec:	6a3b      	ldr	r3, [r7, #32]
 80019ee:	f083 0387 	eor.w	r3, r3, #135	@ 0x87
 80019f2:	623b      	str	r3, [r7, #32]
				} while (--t1);
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	61bb      	str	r3, [r7, #24]
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1da      	bne.n	80019b6 <os_aes+0x77e>

				AESAUX[0] ^= a0;
 8001a00:	4b30      	ldr	r3, [pc, #192]	@ (8001ac4 <os_aes+0x88c>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a06:	4053      	eors	r3, r2
 8001a08:	4a2e      	ldr	r2, [pc, #184]	@ (8001ac4 <os_aes+0x88c>)
 8001a0a:	6013      	str	r3, [r2, #0]
				AESAUX[1] ^= a1;
 8001a0c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ac4 <os_aes+0x88c>)
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a12:	4053      	eors	r3, r2
 8001a14:	4a2b      	ldr	r2, [pc, #172]	@ (8001ac4 <os_aes+0x88c>)
 8001a16:	6053      	str	r3, [r2, #4]
				AESAUX[2] ^= a2;
 8001a18:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac4 <os_aes+0x88c>)
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1e:	4053      	eors	r3, r2
 8001a20:	4a28      	ldr	r2, [pc, #160]	@ (8001ac4 <os_aes+0x88c>)
 8001a22:	6093      	str	r3, [r2, #8]
				AESAUX[3] ^= a3;
 8001a24:	4b27      	ldr	r3, [pc, #156]	@ (8001ac4 <os_aes+0x88c>)
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	6a3b      	ldr	r3, [r7, #32]
 8001a2a:	4053      	eors	r3, r2
 8001a2c:	4a25      	ldr	r2, [pc, #148]	@ (8001ac4 <os_aes+0x88c>)
 8001a2e:	60d3      	str	r3, [r2, #12]
				mode &= ~AES_MICSUB;
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001a36:	71fb      	strb	r3, [r7, #7]
				goto LOADDATA;
 8001a38:	e4ad      	b.n	8001396 <os_aes+0x15e>
			} else {
				// save cipher block as new iv
				AESAUX[0] = a0;
 8001a3a:	4a22      	ldr	r2, [pc, #136]	@ (8001ac4 <os_aes+0x88c>)
 8001a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a3e:	6013      	str	r3, [r2, #0]
				AESAUX[1] = a1;
 8001a40:	4a20      	ldr	r2, [pc, #128]	@ (8001ac4 <os_aes+0x88c>)
 8001a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a44:	6053      	str	r3, [r2, #4]
				AESAUX[2] = a2;
 8001a46:	4a1f      	ldr	r2, [pc, #124]	@ (8001ac4 <os_aes+0x88c>)
 8001a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4a:	6093      	str	r3, [r2, #8]
				AESAUX[3] = a3;
 8001a4c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ac4 <os_aes+0x88c>)
 8001a4e:	6a3b      	ldr	r3, [r7, #32]
 8001a50:	60d3      	str	r3, [r2, #12]
 8001a52:	e094      	b.n	8001b7e <os_aes+0x946>
			}
		} else { // CIPHER
			if (mode & AES_CTR) { // xor block (partially)
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	f003 0304 	and.w	r3, r3, #4
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d034      	beq.n	8001ac8 <os_aes+0x890>
				t0 = (len > 16) ? 16 : len;
 8001a5e:	88bb      	ldrh	r3, [r7, #4]
 8001a60:	2b10      	cmp	r3, #16
 8001a62:	bf28      	it	cs
 8001a64:	2310      	movcs	r3, #16
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	61fb      	str	r3, [r7, #28]
				for (t1 = 0; t1 < t0; t1++) {
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61bb      	str	r3, [r7, #24]
 8001a6e:	e01d      	b.n	8001aac <os_aes+0x874>
					buf[t1] ^= (a0 >> 24);
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	4413      	add	r3, r2
 8001a76:	7819      	ldrb	r1, [r3, #0]
 8001a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a7a:	0e1b      	lsrs	r3, r3, #24
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	6838      	ldr	r0, [r7, #0]
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	4403      	add	r3, r0
 8001a84:	404a      	eors	r2, r1
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	701a      	strb	r2, [r3, #0]
					a0 <<= 8;
 8001a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a8c:	021b      	lsls	r3, r3, #8
 8001a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
					if ((t1 & 3) == 3) {
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	f003 0303 	and.w	r3, r3, #3
 8001a96:	2b03      	cmp	r3, #3
 8001a98:	d105      	bne.n	8001aa6 <os_aes+0x86e>
						a0 = a1;
 8001a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
						a1 = a2;
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
						a2 = a3;
 8001aa2:	6a3b      	ldr	r3, [r7, #32]
 8001aa4:	627b      	str	r3, [r7, #36]	@ 0x24
				for (t1 = 0; t1 < t0; t1++) {
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	61bb      	str	r3, [r7, #24]
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d3dd      	bcc.n	8001a70 <os_aes+0x838>
					}
				}
				// update counter
				AESAUX[3]++;
 8001ab4:	4b03      	ldr	r3, [pc, #12]	@ (8001ac4 <os_aes+0x88c>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	4a02      	ldr	r2, [pc, #8]	@ (8001ac4 <os_aes+0x88c>)
 8001abc:	60d3      	str	r3, [r2, #12]
 8001abe:	e05e      	b.n	8001b7e <os_aes+0x946>
 8001ac0:	08011b90 	.word	0x08011b90
 8001ac4:	20000144 	.word	0x20000144
			} else { // ECB
				// store block
				msbf4_write(buf + 0, a0);
 8001ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aca:	0e1b      	lsrs	r3, r3, #24
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	701a      	strb	r2, [r3, #0]
 8001ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ad4:	0c1a      	lsrs	r2, r3, #16
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	701a      	strb	r2, [r3, #0]
 8001ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ae0:	0a1a      	lsrs	r2, r3, #8
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	3302      	adds	r3, #2
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	701a      	strb	r2, [r3, #0]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	3303      	adds	r3, #3
 8001aee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	701a      	strb	r2, [r3, #0]
				msbf4_write(buf + 4, a1);
 8001af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001af6:	0e1a      	lsrs	r2, r3, #24
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	3304      	adds	r3, #4
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	701a      	strb	r2, [r3, #0]
 8001b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b02:	0c1a      	lsrs	r2, r3, #16
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	3305      	adds	r3, #5
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	701a      	strb	r2, [r3, #0]
 8001b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b0e:	0a1a      	lsrs	r2, r3, #8
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	3306      	adds	r3, #6
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	701a      	strb	r2, [r3, #0]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	3307      	adds	r3, #7
 8001b1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	701a      	strb	r2, [r3, #0]
				msbf4_write(buf + 8, a2);
 8001b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b24:	0e1a      	lsrs	r2, r3, #24
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	3308      	adds	r3, #8
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	701a      	strb	r2, [r3, #0]
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b30:	0c1a      	lsrs	r2, r3, #16
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	3309      	adds	r3, #9
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	701a      	strb	r2, [r3, #0]
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3c:	0a1a      	lsrs	r2, r3, #8
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	330a      	adds	r3, #10
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	701a      	strb	r2, [r3, #0]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	330b      	adds	r3, #11
 8001b4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	701a      	strb	r2, [r3, #0]
				msbf4_write(buf + 12, a3);
 8001b50:	6a3b      	ldr	r3, [r7, #32]
 8001b52:	0e1a      	lsrs	r2, r3, #24
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	330c      	adds	r3, #12
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	701a      	strb	r2, [r3, #0]
 8001b5c:	6a3b      	ldr	r3, [r7, #32]
 8001b5e:	0c1a      	lsrs	r2, r3, #16
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	330d      	adds	r3, #13
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	701a      	strb	r2, [r3, #0]
 8001b68:	6a3b      	ldr	r3, [r7, #32]
 8001b6a:	0a1a      	lsrs	r2, r3, #8
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	330e      	adds	r3, #14
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	701a      	strb	r2, [r3, #0]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	330f      	adds	r3, #15
 8001b78:	6a3a      	ldr	r2, [r7, #32]
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	701a      	strb	r2, [r3, #0]
			}
		}

		// update block state
		if ((mode & AES_MIC) == 0 || (mode & AES_MICNOAUX)) {
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d004      	beq.n	8001b92 <os_aes+0x95a>
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d005      	beq.n	8001b9e <os_aes+0x966>
			buf += 16;
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	3310      	adds	r3, #16
 8001b96:	603b      	str	r3, [r7, #0]
			len -= 16;
 8001b98:	88bb      	ldrh	r3, [r7, #4]
 8001b9a:	3b10      	subs	r3, #16
 8001b9c:	80bb      	strh	r3, [r7, #4]
		}
		mode |= AES_MICNOAUX;
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	f043 0308 	orr.w	r3, r3, #8
 8001ba4:	71fb      	strb	r3, [r7, #7]
	while ((signed char) len > 0) {
 8001ba6:	88bb      	ldrh	r3, [r7, #4]
 8001ba8:	b25b      	sxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f73f abba 	bgt.w	8001324 <os_aes+0xec>
	}
	return AESAUX[0];
 8001bb0:	4b02      	ldr	r3, [pc, #8]	@ (8001bbc <os_aes+0x984>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3730      	adds	r7, #48	@ 0x30
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000144 	.word	0x20000144

08001bc0 <bme68x_init>:
/* @brief This API reads the chip-id of the sensor which is the first step to
 * verify the sensor and also calibrates the sensor
 * As this API is the entry point, call this API before using other APIs.
 */
int8_t bme68x_init(struct bme68x_dev *dev)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	rslt = bme68x_soft_reset(dev);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f901 	bl	8001dd0 <bme68x_soft_reset>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME68X_OK) {
 8001bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d120      	bne.n	8001c1c <bme68x_init+0x5c>
		rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	20d0      	movs	r0, #208	@ 0xd0
 8001be2:	f000 f8b1 	bl	8001d48 <bme68x_get_regs>
 8001be6:	4603      	mov	r3, r0
 8001be8:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME68X_OK) {
 8001bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d114      	bne.n	8001c1c <bme68x_init+0x5c>
			if (dev->chip_id == BME68X_CHIP_ID) {
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b61      	cmp	r3, #97	@ 0x61
 8001bf8:	d10e      	bne.n	8001c18 <bme68x_init+0x58>
				/* Read Variant ID */
				rslt = read_variant_id(dev);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f002 f84c 	bl	8003c98 <read_variant_id>
 8001c00:	4603      	mov	r3, r0
 8001c02:	73fb      	strb	r3, [r7, #15]

				if (rslt == BME68X_OK) {
 8001c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d107      	bne.n	8001c1c <bme68x_init+0x5c>
					/* Get the Calibration data */
					rslt = get_calib_data(dev);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f001 ff3f 	bl	8003a90 <get_calib_data>
 8001c12:	4603      	mov	r3, r0
 8001c14:	73fb      	strb	r3, [r7, #15]
 8001c16:	e001      	b.n	8001c1c <bme68x_init+0x5c>
				}
			} else {
				rslt = BME68X_E_DEV_NOT_FOUND;
 8001c18:	23fd      	movs	r3, #253	@ 0xfd
 8001c1a:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return rslt;
 8001c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <bme68x_set_regs>:
/*
 * @brief This API writes the given data to the register address of the sensor
 */
int8_t bme68x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data,
		uint32_t len, struct bme68x_dev *dev)
{
 8001c28:	b5b0      	push	{r4, r5, r7, lr}
 8001c2a:	b08a      	sub	sp, #40	@ 0x28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
 8001c34:	603b      	str	r3, [r7, #0]
	int8_t rslt;

	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	f107 0314 	add.w	r3, r7, #20
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	609a      	str	r2, [r3, #8]
 8001c46:	60da      	str	r2, [r3, #12]
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001c48:	6838      	ldr	r0, [r7, #0]
 8001c4a:	f001 fcfb 	bl	8003644 <null_ptr_check>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if ((rslt == BME68X_OK) && reg_addr && reg_data) {
 8001c54:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d16c      	bne.n	8001d36 <bme68x_set_regs+0x10e>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d069      	beq.n	8001d36 <bme68x_set_regs+0x10e>
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d066      	beq.n	8001d36 <bme68x_set_regs+0x10e>
		if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2))) {
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d05d      	beq.n	8001d2a <bme68x_set_regs+0x102>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b0a      	cmp	r3, #10
 8001c72:	d85a      	bhi.n	8001d2a <bme68x_set_regs+0x102>
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
 8001c74:	2300      	movs	r3, #0
 8001c76:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001c78:	e034      	b.n	8001ce4 <bme68x_set_regs+0xbc>
				if (dev->intf == BME68X_SPI_INTF) {
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	7b1b      	ldrb	r3, [r3, #12]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d118      	bne.n	8001cb4 <bme68x_set_regs+0x8c>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 8001c82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	4413      	add	r3, r2
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	6839      	ldr	r1, [r7, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f001 fc18 	bl	80034c2 <set_mem_page>
 8001c92:	4603      	mov	r3, r0
 8001c94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8001c98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	781a      	ldrb	r2, [r3, #0]
 8001ca0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	3328      	adds	r3, #40	@ 0x28
 8001cac:	443b      	add	r3, r7
 8001cae:	f803 2c18 	strb.w	r2, [r3, #-24]
 8001cb2:	e009      	b.n	8001cc8 <bme68x_set_regs+0xa0>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
 8001cb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	441a      	add	r2, r3
 8001cba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	7812      	ldrb	r2, [r2, #0]
 8001cc0:	3328      	adds	r3, #40	@ 0x28
 8001cc2:	443b      	add	r3, r7
 8001cc4:	f803 2c18 	strb.w	r2, [r3, #-24]
				}

				tmp_buff[(2 * index) + 1] = reg_data[index];
 8001cc8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	441a      	add	r2, r3
 8001cce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	7812      	ldrb	r2, [r2, #0]
 8001cd6:	3328      	adds	r3, #40	@ 0x28
 8001cd8:	443b      	add	r3, r7
 8001cda:	f803 2c18 	strb.w	r2, [r3, #-24]
			for (index = 0; index < len; index++) {
 8001cde:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001ce4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d8c6      	bhi.n	8001c7a <bme68x_set_regs+0x52>
			}

			/* Write the interleaved array */
			if (rslt == BME68X_OK) {
 8001cec:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d11e      	bne.n	8001d32 <bme68x_set_regs+0x10a>
				dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1],
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8001cf8:	7c38      	ldrb	r0, [r7, #16]
						(2 * len) - 1, dev->intf_ptr);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	005b      	lsls	r3, r3, #1
				dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1],
 8001cfe:	1e5a      	subs	r2, r3, #1
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685d      	ldr	r5, [r3, #4]
 8001d04:	f107 0310 	add.w	r3, r7, #16
 8001d08:	1c59      	adds	r1, r3, #1
 8001d0a:	462b      	mov	r3, r5
 8001d0c:	47a0      	blx	r4
 8001d0e:	4603      	mov	r3, r0
 8001d10:	461a      	mov	r2, r3
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
				if (dev->intf_rslt != 0) {
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d007      	beq.n	8001d32 <bme68x_set_regs+0x10a>
					rslt = BME68X_E_COM_FAIL;
 8001d22:	23fe      	movs	r3, #254	@ 0xfe
 8001d24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (rslt == BME68X_OK) {
 8001d28:	e003      	b.n	8001d32 <bme68x_set_regs+0x10a>
				}
			}
		} else {
			rslt = BME68X_E_INVALID_LENGTH;
 8001d2a:	23fc      	movs	r3, #252	@ 0xfc
 8001d2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2))) {
 8001d30:	e004      	b.n	8001d3c <bme68x_set_regs+0x114>
			if (rslt == BME68X_OK) {
 8001d32:	bf00      	nop
		if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2))) {
 8001d34:	e002      	b.n	8001d3c <bme68x_set_regs+0x114>
		}
	} else {
		rslt = BME68X_E_NULL_PTR;
 8001d36:	23ff      	movs	r3, #255	@ 0xff
 8001d38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return rslt;
 8001d3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3728      	adds	r7, #40	@ 0x28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bdb0      	pop	{r4, r5, r7, pc}

08001d48 <bme68x_get_regs>:
/*
 * @brief This API reads the data from the given register address of sensor.
 */
int8_t bme68x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len,
		struct bme68x_dev *dev)
{
 8001d48:	b590      	push	{r4, r7, lr}
 8001d4a:	b087      	sub	sp, #28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	4603      	mov	r3, r0
 8001d56:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001d58:	6838      	ldr	r0, [r7, #0]
 8001d5a:	f001 fc73 	bl	8003644 <null_ptr_check>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	75fb      	strb	r3, [r7, #23]
	if ((rslt == BME68X_OK) && reg_data) {
 8001d62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d12a      	bne.n	8001dc0 <bme68x_get_regs+0x78>
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d027      	beq.n	8001dc0 <bme68x_get_regs+0x78>
		if (dev->intf == BME68X_SPI_INTF) {
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	7b1b      	ldrb	r3, [r3, #12]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10e      	bne.n	8001d96 <bme68x_get_regs+0x4e>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	6839      	ldr	r1, [r7, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f001 fba0 	bl	80034c2 <set_mem_page>
 8001d82:	4603      	mov	r3, r0
 8001d84:	75fb      	strb	r3, [r7, #23]
			if (rslt == BME68X_OK) {
 8001d86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d103      	bne.n	8001d96 <bme68x_get_regs+0x4e>
				reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d94:	73fb      	strb	r3, [r7, #15]
			}
		}

		dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	7bf8      	ldrb	r0, [r7, #15]
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	68b9      	ldr	r1, [r7, #8]
 8001da4:	47a0      	blx	r4
 8001da6:	4603      	mov	r3, r0
 8001da8:	461a      	mov	r2, r3
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		if (dev->intf_rslt != 0) {
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d004      	beq.n	8001dc4 <bme68x_get_regs+0x7c>
			rslt = BME68X_E_COM_FAIL;
 8001dba:	23fe      	movs	r3, #254	@ 0xfe
 8001dbc:	75fb      	strb	r3, [r7, #23]
		if (dev->intf_rslt != 0) {
 8001dbe:	e001      	b.n	8001dc4 <bme68x_get_regs+0x7c>
		}
	} else {
		rslt = BME68X_E_NULL_PTR;
 8001dc0:	23ff      	movs	r3, #255	@ 0xff
 8001dc2:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001dc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	371c      	adds	r7, #28
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd90      	pop	{r4, r7, pc}

08001dd0 <bme68x_soft_reset>:

/*
 * @brief This API soft-resets the sensor.
 */
int8_t bme68x_soft_reset(struct bme68x_dev *dev)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 8001dd8:	23e0      	movs	r3, #224	@ 0xe0
 8001dda:	73bb      	strb	r3, [r7, #14]

	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 8001ddc:	23b6      	movs	r3, #182	@ 0xb6
 8001dde:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f001 fc2f 	bl	8003644 <null_ptr_check>
 8001de6:	4603      	mov	r3, r0
 8001de8:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME68X_OK) {
 8001dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d12b      	bne.n	8001e4a <bme68x_soft_reset+0x7a>
		if (dev->intf == BME68X_SPI_INTF) {
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	7b1b      	ldrb	r3, [r3, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d104      	bne.n	8001e04 <bme68x_soft_reset+0x34>
			rslt = get_mem_page(dev);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f001 fbc6 	bl	800358c <get_mem_page>
 8001e00:	4603      	mov	r3, r0
 8001e02:	73fb      	strb	r3, [r7, #15]
		}

		/* Reset the device */
		if (rslt == BME68X_OK) {
 8001e04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d11e      	bne.n	8001e4a <bme68x_soft_reset+0x7a>
			rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001e0c:	f107 010d 	add.w	r1, r7, #13
 8001e10:	f107 000e 	add.w	r0, r7, #14
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f7ff ff06 	bl	8001c28 <bme68x_set_regs>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	73fb      	strb	r3, [r7, #15]

			/* Wait for 5ms */
			dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6852      	ldr	r2, [r2, #4]
 8001e28:	4611      	mov	r1, r2
 8001e2a:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001e2e:	4798      	blx	r3
			if (rslt == BME68X_OK) {
 8001e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d108      	bne.n	8001e4a <bme68x_soft_reset+0x7a>
				/* After reset get the memory page */
				if (dev->intf == BME68X_SPI_INTF) {
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	7b1b      	ldrb	r3, [r3, #12]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d104      	bne.n	8001e4a <bme68x_soft_reset+0x7a>
					rslt = get_mem_page(dev);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f001 fba3 	bl	800358c <get_mem_page>
 8001e46:	4603      	mov	r3, r0
 8001e48:	73fb      	strb	r3, [r7, #15]
				}
			}
		}
	}

	return rslt;
 8001e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
	...

08001e58 <bme68x_set_conf>:

/*
 * @brief This API is used to set the oversampling, filter and odr configuration
 */
int8_t bme68x_set_conf(struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b088      	sub	sp, #32
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t odr20 = 0, odr3 = 1;
 8001e62:	2300      	movs	r3, #0
 8001e64:	77bb      	strb	r3, [r7, #30]
 8001e66:	2301      	movs	r3, #1
 8001e68:	777b      	strb	r3, [r7, #29]
	uint8_t current_op_mode;

	/* Register data starting from BME68X_REG_CTRL_GAS_1(0x71) up to BME68X_REG_CONFIG(0x75) */
	uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 8001e6a:	4a7c      	ldr	r2, [pc, #496]	@ (800205c <bme68x_set_conf+0x204>)
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e74:	6018      	str	r0, [r3, #0]
 8001e76:	3304      	adds	r3, #4
 8001e78:	7019      	strb	r1, [r3, #0]
	uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	2300      	movs	r3, #0
 8001e80:	743b      	strb	r3, [r7, #16]

	rslt = bme68x_get_op_mode(&current_op_mode, dev);
 8001e82:	f107 031c 	add.w	r3, r7, #28
 8001e86:	6839      	ldr	r1, [r7, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f000 f94a 	bl	8002122 <bme68x_get_op_mode>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	77fb      	strb	r3, [r7, #31]
	if (rslt == BME68X_OK) {
 8001e92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d105      	bne.n	8001ea6 <bme68x_set_conf+0x4e>
		/* Configure only in the sleep mode */
		rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8001e9a:	6839      	ldr	r1, [r7, #0]
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f000 f8df 	bl	8002060 <bme68x_set_op_mode>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	77fb      	strb	r3, [r7, #31]
	}

	if (conf == NULL) {
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d102      	bne.n	8001eb2 <bme68x_set_conf+0x5a>
		rslt = BME68X_E_NULL_PTR;
 8001eac:	23ff      	movs	r3, #255	@ 0xff
 8001eae:	77fb      	strb	r3, [r7, #31]
 8001eb0:	e0b2      	b.n	8002018 <bme68x_set_conf+0x1c0>
	} else if (rslt == BME68X_OK) {
 8001eb2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f040 80ae 	bne.w	8002018 <bme68x_set_conf+0x1c0>
		/* Read the whole configuration and write it back once later */
		rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG,
 8001ebc:	7d38      	ldrb	r0, [r7, #20]
 8001ebe:	f107 010c 	add.w	r1, r7, #12
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	2205      	movs	r2, #5
 8001ec6:	f7ff ff3f 	bl	8001d48 <bme68x_get_regs>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	77fb      	strb	r3, [r7, #31]
				dev);
		dev->info_msg = BME68X_OK;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
		if (rslt == BME68X_OK) {
 8001ed6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d108      	bne.n	8001ef0 <bme68x_set_conf+0x98>
			rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3303      	adds	r3, #3
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	2107      	movs	r1, #7
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f001 fb7f 	bl	80035ea <boundary_check>
 8001eec:	4603      	mov	r3, r0
 8001eee:	77fb      	strb	r3, [r7, #31]
		}

		if (rslt == BME68X_OK) {
 8001ef0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d108      	bne.n	8001f0a <bme68x_set_conf+0xb2>
			rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3301      	adds	r3, #1
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	2105      	movs	r1, #5
 8001f00:	4618      	mov	r0, r3
 8001f02:	f001 fb72 	bl	80035ea <boundary_check>
 8001f06:	4603      	mov	r3, r0
 8001f08:	77fb      	strb	r3, [r7, #31]
		}

		if (rslt == BME68X_OK) {
 8001f0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d108      	bne.n	8001f24 <bme68x_set_conf+0xcc>
			rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3302      	adds	r3, #2
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	2105      	movs	r1, #5
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f001 fb65 	bl	80035ea <boundary_check>
 8001f20:	4603      	mov	r3, r0
 8001f22:	77fb      	strb	r3, [r7, #31]
		}

		if (rslt == BME68X_OK) {
 8001f24:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d107      	bne.n	8001f3c <bme68x_set_conf+0xe4>
			rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	2105      	movs	r1, #5
 8001f32:	4618      	mov	r0, r3
 8001f34:	f001 fb59 	bl	80035ea <boundary_check>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	77fb      	strb	r3, [r7, #31]
		}

		if (rslt == BME68X_OK) {
 8001f3c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d108      	bne.n	8001f56 <bme68x_set_conf+0xfe>
			rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3304      	adds	r3, #4
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	2108      	movs	r1, #8
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f001 fb4c 	bl	80035ea <boundary_check>
 8001f52:	4603      	mov	r3, r0
 8001f54:	77fb      	strb	r3, [r7, #31]
		}

		if (rslt == BME68X_OK) {
 8001f56:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d15c      	bne.n	8002018 <bme68x_set_conf+0x1c0>
			data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER,
 8001f5e:	7c3b      	ldrb	r3, [r7, #16]
 8001f60:	b25b      	sxtb	r3, r3
 8001f62:	f023 031c 	bic.w	r3, r3, #28
 8001f66:	b25a      	sxtb	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	78db      	ldrb	r3, [r3, #3]
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	b25b      	sxtb	r3, r3
 8001f70:	f003 031c 	and.w	r3, r3, #28
 8001f74:	b25b      	sxtb	r3, r3
 8001f76:	4313      	orrs	r3, r2
 8001f78:	b25b      	sxtb	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	743b      	strb	r3, [r7, #16]
					conf->filter);
			data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST,
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
 8001f80:	b25b      	sxtb	r3, r3
 8001f82:	f003 031f 	and.w	r3, r3, #31
 8001f86:	b25a      	sxtb	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	785b      	ldrb	r3, [r3, #1]
 8001f8c:	015b      	lsls	r3, r3, #5
 8001f8e:	b25b      	sxtb	r3, r3
 8001f90:	4313      	orrs	r3, r2
 8001f92:	b25b      	sxtb	r3, r3
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	73fb      	strb	r3, [r7, #15]
					conf->os_temp);
			data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP,
 8001f98:	7bfb      	ldrb	r3, [r7, #15]
 8001f9a:	b25b      	sxtb	r3, r3
 8001f9c:	f023 031c 	bic.w	r3, r3, #28
 8001fa0:	b25a      	sxtb	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	789b      	ldrb	r3, [r3, #2]
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	b25b      	sxtb	r3, r3
 8001faa:	f003 031c 	and.w	r3, r3, #28
 8001fae:	b25b      	sxtb	r3, r3
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	b25b      	sxtb	r3, r3
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	73fb      	strb	r3, [r7, #15]
					conf->os_pres);
			data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH,
 8001fb8:	7b7b      	ldrb	r3, [r7, #13]
 8001fba:	b25b      	sxtb	r3, r3
 8001fbc:	f023 0307 	bic.w	r3, r3, #7
 8001fc0:	b25a      	sxtb	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	b25b      	sxtb	r3, r3
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	b25b      	sxtb	r3, r3
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	b25b      	sxtb	r3, r3
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	737b      	strb	r3, [r7, #13]
					conf->os_hum);
			if (conf->odr != BME68X_ODR_NONE) {
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	791b      	ldrb	r3, [r3, #4]
 8001fda:	2b08      	cmp	r3, #8
 8001fdc:	d004      	beq.n	8001fe8 <bme68x_set_conf+0x190>
				odr20 = conf->odr;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	791b      	ldrb	r3, [r3, #4]
 8001fe2:	77bb      	strb	r3, [r7, #30]
				odr3 = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	777b      	strb	r3, [r7, #29]
			}

			data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 8001fe8:	7c3b      	ldrb	r3, [r7, #16]
 8001fea:	b25b      	sxtb	r3, r3
 8001fec:	f003 031f 	and.w	r3, r3, #31
 8001ff0:	b25a      	sxtb	r2, r3
 8001ff2:	7fbb      	ldrb	r3, [r7, #30]
 8001ff4:	015b      	lsls	r3, r3, #5
 8001ff6:	b25b      	sxtb	r3, r3
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	b25b      	sxtb	r3, r3
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	743b      	strb	r3, [r7, #16]
			data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8002000:	7b3b      	ldrb	r3, [r7, #12]
 8002002:	b25b      	sxtb	r3, r3
 8002004:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002008:	b25a      	sxtb	r2, r3
 800200a:	7f7b      	ldrb	r3, [r7, #29]
 800200c:	01db      	lsls	r3, r3, #7
 800200e:	b25b      	sxtb	r3, r3
 8002010:	4313      	orrs	r3, r2
 8002012:	b25b      	sxtb	r3, r3
 8002014:	b2db      	uxtb	r3, r3
 8002016:	733b      	strb	r3, [r7, #12]
		}
	}

	if (rslt == BME68X_OK) {
 8002018:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d109      	bne.n	8002034 <bme68x_set_conf+0x1dc>
		rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
 8002020:	f107 010c 	add.w	r1, r7, #12
 8002024:	f107 0014 	add.w	r0, r7, #20
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	2205      	movs	r2, #5
 800202c:	f7ff fdfc 	bl	8001c28 <bme68x_set_regs>
 8002030:	4603      	mov	r3, r0
 8002032:	77fb      	strb	r3, [r7, #31]
	}

	if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK)) {
 8002034:	7f3b      	ldrb	r3, [r7, #28]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00a      	beq.n	8002050 <bme68x_set_conf+0x1f8>
 800203a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d106      	bne.n	8002050 <bme68x_set_conf+0x1f8>
		rslt = bme68x_set_op_mode(current_op_mode, dev);
 8002042:	7f3b      	ldrb	r3, [r7, #28]
 8002044:	6839      	ldr	r1, [r7, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f000 f80a 	bl	8002060 <bme68x_set_op_mode>
 800204c:	4603      	mov	r3, r0
 800204e:	77fb      	strb	r3, [r7, #31]
	}

	return rslt;
 8002050:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3720      	adds	r7, #32
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	08011458 	.word	0x08011458

08002060 <bme68x_set_op_mode>:

/*
 * @brief This API is used to set the operation mode of the sensor
 */
int8_t bme68x_set_op_mode(const uint8_t op_mode, struct bme68x_dev *dev)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	6039      	str	r1, [r7, #0]
 800206a:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	73bb      	strb	r3, [r7, #14]
	uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 8002070:	2374      	movs	r3, #116	@ 0x74
 8002072:	733b      	strb	r3, [r7, #12]

	/* Call until in sleep */
	do {
		rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 8002074:	f107 010d 	add.w	r1, r7, #13
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2201      	movs	r2, #1
 800207c:	2074      	movs	r0, #116	@ 0x74
 800207e:	f7ff fe63 	bl	8001d48 <bme68x_get_regs>
 8002082:	4603      	mov	r3, r0
 8002084:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME68X_OK) {
 8002086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d11d      	bne.n	80020ca <bme68x_set_op_mode+0x6a>
			/* Put to sleep before changing mode */
			pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 800208e:	7b7b      	ldrb	r3, [r7, #13]
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	73bb      	strb	r3, [r7, #14]
			if (pow_mode != BME68X_SLEEP_MODE) {
 8002096:	7bbb      	ldrb	r3, [r7, #14]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d016      	beq.n	80020ca <bme68x_set_op_mode+0x6a>
				tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 800209c:	7b7b      	ldrb	r3, [r7, #13]
 800209e:	f023 0303 	bic.w	r3, r3, #3
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	737b      	strb	r3, [r7, #13]
				rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80020a6:	f107 010d 	add.w	r1, r7, #13
 80020aa:	f107 000c 	add.w	r0, r7, #12
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f7ff fdb9 	bl	8001c28 <bme68x_set_regs>
 80020b6:	4603      	mov	r3, r0
 80020b8:	73fb      	strb	r3, [r7, #15]
				dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	6852      	ldr	r2, [r2, #4]
 80020c2:	4611      	mov	r1, r2
 80020c4:	f242 7010 	movw	r0, #10000	@ 0x2710
 80020c8:	4798      	blx	r3
			}
		}
	} while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 80020ca:	7bbb      	ldrb	r3, [r7, #14]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <bme68x_set_op_mode+0x78>
 80020d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0cd      	beq.n	8002074 <bme68x_set_op_mode+0x14>

	/* Already in sleep */
	if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK)) {
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d01b      	beq.n	8002116 <bme68x_set_op_mode+0xb6>
 80020de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d117      	bne.n	8002116 <bme68x_set_op_mode+0xb6>
		tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK)
 80020e6:	7b7b      	ldrb	r3, [r7, #13]
 80020e8:	b25b      	sxtb	r3, r3
 80020ea:	f023 0303 	bic.w	r3, r3, #3
 80020ee:	b25a      	sxtb	r2, r3
				| (op_mode & BME68X_MODE_MSK);
 80020f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	b25b      	sxtb	r3, r3
 80020fa:	4313      	orrs	r3, r2
 80020fc:	b25b      	sxtb	r3, r3
 80020fe:	b2db      	uxtb	r3, r3
		tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK)
 8002100:	737b      	strb	r3, [r7, #13]
		rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8002102:	f107 010d 	add.w	r1, r7, #13
 8002106:	f107 000c 	add.w	r0, r7, #12
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2201      	movs	r2, #1
 800210e:	f7ff fd8b 	bl	8001c28 <bme68x_set_regs>
 8002112:	4603      	mov	r3, r0
 8002114:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8002116:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <bme68x_get_op_mode>:

/*
 * @brief This API is used to get the operation mode of the sensor.
 */
int8_t bme68x_get_op_mode(uint8_t *op_mode, struct bme68x_dev *dev)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b084      	sub	sp, #16
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t mode;

	if (op_mode) {
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00f      	beq.n	8002152 <bme68x_get_op_mode+0x30>
		rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
 8002132:	f107 010e 	add.w	r1, r7, #14
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	2201      	movs	r2, #1
 800213a:	2074      	movs	r0, #116	@ 0x74
 800213c:	f7ff fe04 	bl	8001d48 <bme68x_get_regs>
 8002140:	4603      	mov	r3, r0
 8002142:	73fb      	strb	r3, [r7, #15]

		/* Masking the other register bit info*/
		*op_mode = mode & BME68X_MODE_MSK;
 8002144:	7bbb      	ldrb	r3, [r7, #14]
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	b2da      	uxtb	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	701a      	strb	r2, [r3, #0]
 8002150:	e001      	b.n	8002156 <bme68x_get_op_mode+0x34>
	} else {
		rslt = BME68X_E_NULL_PTR;
 8002152:	23ff      	movs	r3, #255	@ 0xff
 8002154:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8002156:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <bme68x_get_meas_dur>:
/*
 * @brief This API is used to get the remaining duration that can be used for heating.
 */
uint32_t bme68x_get_meas_dur(const uint8_t op_mode, struct bme68x_conf *conf,
		struct bme68x_dev *dev)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08a      	sub	sp, #40	@ 0x28
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
 8002170:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint32_t meas_dur = 0; /* Calculate in us */
 8002172:	2300      	movs	r3, #0
 8002174:	623b      	str	r3, [r7, #32]
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = { 0, 1, 2, 4, 8, 16 };
 8002176:	4a34      	ldr	r2, [pc, #208]	@ (8002248 <bme68x_get_meas_dur+0xe4>)
 8002178:	f107 0314 	add.w	r3, r7, #20
 800217c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002180:	6018      	str	r0, [r3, #0]
 8002182:	3304      	adds	r3, #4
 8002184:	8019      	strh	r1, [r3, #0]

	if (conf != NULL) {
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d058      	beq.n	800223e <bme68x_get_meas_dur+0xda>
		/* Boundary check for temperature oversampling */
		rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	3301      	adds	r3, #1
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	2105      	movs	r1, #5
 8002194:	4618      	mov	r0, r3
 8002196:	f001 fa28 	bl	80035ea <boundary_check>
 800219a:	4603      	mov	r3, r0
 800219c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		if (rslt == BME68X_OK) {
 80021a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d109      	bne.n	80021bc <bme68x_get_meas_dur+0x58>
			/* Boundary check for pressure oversampling */
			rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	3302      	adds	r3, #2
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	2105      	movs	r1, #5
 80021b0:	4618      	mov	r0, r3
 80021b2:	f001 fa1a 	bl	80035ea <boundary_check>
 80021b6:	4603      	mov	r3, r0
 80021b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}

		if (rslt == BME68X_OK) {
 80021bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d108      	bne.n	80021d6 <bme68x_get_meas_dur+0x72>
			/* Boundary check for humidity oversampling */
			rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	2105      	movs	r1, #5
 80021ca:	4618      	mov	r0, r3
 80021cc:	f001 fa0d 	bl	80035ea <boundary_check>
 80021d0:	4603      	mov	r3, r0
 80021d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}

		if (rslt == BME68X_OK) {
 80021d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d12f      	bne.n	800223e <bme68x_get_meas_dur+0xda>
			meas_cycles = os_to_meas_cycles[conf->os_temp];
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	785b      	ldrb	r3, [r3, #1]
 80021e2:	3328      	adds	r3, #40	@ 0x28
 80021e4:	443b      	add	r3, r7
 80021e6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80021ea:	61fb      	str	r3, [r7, #28]
			meas_cycles += os_to_meas_cycles[conf->os_pres];
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	789b      	ldrb	r3, [r3, #2]
 80021f0:	3328      	adds	r3, #40	@ 0x28
 80021f2:	443b      	add	r3, r7
 80021f4:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80021f8:	461a      	mov	r2, r3
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	4413      	add	r3, r2
 80021fe:	61fb      	str	r3, [r7, #28]
			meas_cycles += os_to_meas_cycles[conf->os_hum];
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	3328      	adds	r3, #40	@ 0x28
 8002206:	443b      	add	r3, r7
 8002208:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800220c:	461a      	mov	r2, r3
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	4413      	add	r3, r2
 8002212:	61fb      	str	r3, [r7, #28]

			/* TPH measurement duration */
			meas_dur = meas_cycles * UINT32_C(1963);
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f240 72ab 	movw	r2, #1963	@ 0x7ab
 800221a:	fb02 f303 	mul.w	r3, r2, r3
 800221e:	623b      	str	r3, [r7, #32]
			meas_dur += UINT32_C(477 * 4); /* TPH switching duration */
 8002220:	6a3b      	ldr	r3, [r7, #32]
 8002222:	f203 7374 	addw	r3, r3, #1908	@ 0x774
 8002226:	623b      	str	r3, [r7, #32]
			meas_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 8002228:	6a3b      	ldr	r3, [r7, #32]
 800222a:	f603 1351 	addw	r3, r3, #2385	@ 0x951
 800222e:	623b      	str	r3, [r7, #32]

			if (op_mode != BME68X_PARALLEL_MODE) {
 8002230:	7bfb      	ldrb	r3, [r7, #15]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d003      	beq.n	800223e <bme68x_get_meas_dur+0xda>
				meas_dur += UINT32_C(1000); /* Wake up duration of 1ms */
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800223c:	623b      	str	r3, [r7, #32]
			}
		}
	}

	return meas_dur;
 800223e:	6a3b      	ldr	r3, [r7, #32]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3728      	adds	r7, #40	@ 0x28
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	08011460 	.word	0x08011460

0800224c <bme68x_get_data>:
 * from the sensor, compensates the data and store it in the bme68x_data
 * structure instance passed by the user.
 */
int8_t bme68x_get_data(uint8_t op_mode, struct bme68x_data *data,
		uint8_t *n_data, struct bme68x_dev *dev)
{
 800224c:	b5b0      	push	{r4, r5, r7, lr}
 800224e:	b09e      	sub	sp, #120	@ 0x78
 8002250:	af00      	add	r7, sp, #0
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	607a      	str	r2, [r7, #4]
 8002256:	603b      	str	r3, [r7, #0]
 8002258:	4603      	mov	r3, r0
 800225a:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t i = 0, j = 0, new_fields = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8002262:	2300      	movs	r3, #0
 8002264:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8002268:	2300      	movs	r3, #0
 800226a:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
	struct bme68x_data *field_ptr[3] = { 0 };
 800226e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	609a      	str	r2, [r3, #8]
	struct bme68x_data field_data[3] = { { 0 } };
 800227a:	f107 0314 	add.w	r3, r7, #20
 800227e:	2254      	movs	r2, #84	@ 0x54
 8002280:	2100      	movs	r1, #0
 8002282:	4618      	mov	r0, r3
 8002284:	f00c feb4 	bl	800eff0 <memset>

	field_ptr[0] = &field_data[0];
 8002288:	f107 0314 	add.w	r3, r7, #20
 800228c:	66bb      	str	r3, [r7, #104]	@ 0x68
	field_ptr[1] = &field_data[1];
 800228e:	f107 0314 	add.w	r3, r7, #20
 8002292:	331c      	adds	r3, #28
 8002294:	66fb      	str	r3, [r7, #108]	@ 0x6c
	field_ptr[2] = &field_data[2];
 8002296:	f107 0314 	add.w	r3, r7, #20
 800229a:	3338      	adds	r3, #56	@ 0x38
 800229c:	673b      	str	r3, [r7, #112]	@ 0x70

	rslt = null_ptr_check(dev);
 800229e:	6838      	ldr	r0, [r7, #0]
 80022a0:	f001 f9d0 	bl	8003644 <null_ptr_check>
 80022a4:	4603      	mov	r3, r0
 80022a6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	if ((rslt == BME68X_OK) && (data != NULL)) {
 80022aa:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f040 80c1 	bne.w	8002436 <bme68x_get_data+0x1ea>
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 80bd 	beq.w	8002436 <bme68x_get_data+0x1ea>
		/* Reading the sensor data in forced mode only */
		if (op_mode == BME68X_FORCED_MODE) {
 80022bc:	7bfb      	ldrb	r3, [r7, #15]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d11c      	bne.n	80022fc <bme68x_get_data+0xb0>
			rslt = read_field_data(0, data, dev);
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	68b9      	ldr	r1, [r7, #8]
 80022c6:	2000      	movs	r0, #0
 80022c8:	f000 fd8b 	bl	8002de2 <read_field_data>
 80022cc:	4603      	mov	r3, r0
 80022ce:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			if (rslt == BME68X_OK) {
 80022d2:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f040 80a1 	bne.w	800241e <bme68x_get_data+0x1d2>
				if (data->status & BME68X_NEW_DATA_MSK) {
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	b25b      	sxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	da03      	bge.n	80022ee <bme68x_get_data+0xa2>
					new_fields = 1;
 80022e6:	2301      	movs	r3, #1
 80022e8:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 80022ec:	e097      	b.n	800241e <bme68x_get_data+0x1d2>
				} else {
					new_fields = 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
					rslt = BME68X_W_NO_NEW_DATA;
 80022f4:	2302      	movs	r3, #2
 80022f6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80022fa:	e090      	b.n	800241e <bme68x_get_data+0x1d2>
				}
			}
		} else if ((op_mode == BME68X_PARALLEL_MODE)
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d003      	beq.n	800230a <bme68x_get_data+0xbe>
				|| (op_mode == BME68X_SEQUENTIAL_MODE)) {
 8002302:	7bfb      	ldrb	r3, [r7, #15]
 8002304:	2b03      	cmp	r3, #3
 8002306:	f040 8087 	bne.w	8002418 <bme68x_get_data+0x1cc>
			/* Read the 3 fields and count the number of new data fields */
			rslt = read_all_field_data(field_ptr, dev);
 800230a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800230e:	6839      	ldr	r1, [r7, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f000 feaa 	bl	800306a <read_all_field_data>
 8002316:	4603      	mov	r3, r0
 8002318:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

			new_fields = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
			for (i = 0; (i < 3) && (rslt == BME68X_OK); i++) {
 8002322:	2300      	movs	r3, #0
 8002324:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8002328:	e014      	b.n	8002354 <bme68x_get_data+0x108>
				if (field_ptr[i]->status & BME68X_NEW_DATA_MSK) {
 800232a:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	3378      	adds	r3, #120	@ 0x78
 8002332:	443b      	add	r3, r7
 8002334:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	b25b      	sxtb	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	da04      	bge.n	800234a <bme68x_get_data+0xfe>
					new_fields++;
 8002340:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8002344:	3301      	adds	r3, #1
 8002346:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
			for (i = 0; (i < 3) && (rslt == BME68X_OK); i++) {
 800234a:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800234e:	3301      	adds	r3, #1
 8002350:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8002354:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002358:	2b02      	cmp	r3, #2
 800235a:	d803      	bhi.n	8002364 <bme68x_get_data+0x118>
 800235c:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0e2      	beq.n	800232a <bme68x_get_data+0xde>
				}
			}

			/* Sort the sensor data in parallel & sequential modes*/
			for (i = 0; (i < 2) && (rslt == BME68X_OK); i++) {
 8002364:	2300      	movs	r3, #0
 8002366:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 800236a:	e01c      	b.n	80023a6 <bme68x_get_data+0x15a>
				for (j = i + 1; j < 3; j++) {
 800236c:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002370:	3301      	adds	r3, #1
 8002372:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8002376:	e00d      	b.n	8002394 <bme68x_get_data+0x148>
					sort_sensor_data(i, j, field_ptr);
 8002378:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800237c:	f897 1075 	ldrb.w	r1, [r7, #117]	@ 0x75
 8002380:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002384:	4618      	mov	r0, r3
 8002386:	f001 fb09 	bl	800399c <sort_sensor_data>
				for (j = i + 1; j < 3; j++) {
 800238a:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 800238e:	3301      	adds	r3, #1
 8002390:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8002394:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8002398:	2b02      	cmp	r3, #2
 800239a:	d9ed      	bls.n	8002378 <bme68x_get_data+0x12c>
			for (i = 0; (i < 2) && (rslt == BME68X_OK); i++) {
 800239c:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80023a0:	3301      	adds	r3, #1
 80023a2:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80023a6:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d803      	bhi.n	80023b6 <bme68x_get_data+0x16a>
 80023ae:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0da      	beq.n	800236c <bme68x_get_data+0x120>
				}
			}

			/* Copy the sorted data */
			for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++) {
 80023b6:	2300      	movs	r3, #0
 80023b8:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80023bc:	e01c      	b.n	80023f8 <bme68x_get_data+0x1ac>
				data[i] = *field_ptr[i];
 80023be:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	3378      	adds	r3, #120	@ 0x78
 80023c6:	443b      	add	r3, r7
 80023c8:	f853 1c10 	ldr.w	r1, [r3, #-16]
 80023cc:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 80023d0:	4613      	mov	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	1a9b      	subs	r3, r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	461a      	mov	r2, r3
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	4413      	add	r3, r2
 80023de:	461c      	mov	r4, r3
 80023e0:	460d      	mov	r5, r1
 80023e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++) {
 80023ee:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80023f2:	3301      	adds	r3, #1
 80023f4:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80023f8:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d803      	bhi.n	8002408 <bme68x_get_data+0x1bc>
 8002400:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0da      	beq.n	80023be <bme68x_get_data+0x172>
			}

			if (new_fields == 0) {
 8002408:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800240c:	2b00      	cmp	r3, #0
 800240e:	d106      	bne.n	800241e <bme68x_get_data+0x1d2>
				rslt = BME68X_W_NO_NEW_DATA;
 8002410:	2302      	movs	r3, #2
 8002412:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			if (new_fields == 0) {
 8002416:	e002      	b.n	800241e <bme68x_get_data+0x1d2>
			}
		} else {
			rslt = BME68X_W_DEFINE_OP_MODE;
 8002418:	2301      	movs	r3, #1
 800241a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		}

		if (n_data == NULL) {
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d103      	bne.n	800242c <bme68x_get_data+0x1e0>
			rslt = BME68X_E_NULL_PTR;
 8002424:	23ff      	movs	r3, #255	@ 0xff
 8002426:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (n_data == NULL) {
 800242a:	e007      	b.n	800243c <bme68x_get_data+0x1f0>
		} else {
			*n_data = new_fields;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f897 2074 	ldrb.w	r2, [r7, #116]	@ 0x74
 8002432:	701a      	strb	r2, [r3, #0]
		if (n_data == NULL) {
 8002434:	e002      	b.n	800243c <bme68x_get_data+0x1f0>
		}
	} else {
		rslt = BME68X_E_NULL_PTR;
 8002436:	23ff      	movs	r3, #255	@ 0xff
 8002438:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	}

	return rslt;
 800243c:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
}
 8002440:	4618      	mov	r0, r3
 8002442:	3778      	adds	r7, #120	@ 0x78
 8002444:	46bd      	mov	sp, r7
 8002446:	bdb0      	pop	{r4, r5, r7, pc}

08002448 <bme68x_set_heatr_conf>:
/*
 * @brief This API is used to set the gas configuration of the sensor.
 */
int8_t bme68x_set_heatr_conf(uint8_t op_mode,
		const struct bme68x_heatr_conf *conf, struct bme68x_dev *dev)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b088      	sub	sp, #32
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t nb_conv = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	773b      	strb	r3, [r7, #28]
	uint8_t hctrl, run_gas = 0;
 800245a:	2300      	movs	r3, #0
 800245c:	777b      	strb	r3, [r7, #29]
	uint8_t ctrl_gas_data[2];
	uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 800245e:	f247 1370 	movw	r3, #29040	@ 0x7170
 8002462:	82bb      	strh	r3, [r7, #20]

	if (conf != NULL) {
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d06e      	beq.n	8002548 <bme68x_set_heatr_conf+0x100>
		rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	2000      	movs	r0, #0
 800246e:	f7ff fdf7 	bl	8002060 <bme68x_set_op_mode>
 8002472:	4603      	mov	r3, r0
 8002474:	77fb      	strb	r3, [r7, #31]
		if (rslt == BME68X_OK) {
 8002476:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d108      	bne.n	8002490 <bme68x_set_heatr_conf+0x48>
			rslt = set_conf(conf, op_mode, &nb_conv, dev);
 800247e:	f107 021c 	add.w	r2, r7, #28
 8002482:	7bf9      	ldrb	r1, [r7, #15]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68b8      	ldr	r0, [r7, #8]
 8002488:	f001 f8fc 	bl	8003684 <set_conf>
 800248c:	4603      	mov	r3, r0
 800248e:	77fb      	strb	r3, [r7, #31]
		}

		if (rslt == BME68X_OK) {
 8002490:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d159      	bne.n	800254c <bme68x_set_heatr_conf+0x104>
			rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2,
 8002498:	f107 0118 	add.w	r1, r7, #24
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2202      	movs	r2, #2
 80024a0:	2070      	movs	r0, #112	@ 0x70
 80024a2:	f7ff fc51 	bl	8001d48 <bme68x_get_regs>
 80024a6:	4603      	mov	r3, r0
 80024a8:	77fb      	strb	r3, [r7, #31]
					dev);
			if (rslt == BME68X_OK) {
 80024aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d14c      	bne.n	800254c <bme68x_set_heatr_conf+0x104>
				if (conf->enable == BME68X_ENABLE) {
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d10b      	bne.n	80024d2 <bme68x_set_heatr_conf+0x8a>
					hctrl = BME68X_ENABLE_HEATER;
 80024ba:	2300      	movs	r3, #0
 80024bc:	77bb      	strb	r3, [r7, #30]
					if (dev->variant_id == BME68X_VARIANT_GAS_HIGH) {
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d102      	bne.n	80024cc <bme68x_set_heatr_conf+0x84>
						run_gas = BME68X_ENABLE_GAS_MEAS_H;
 80024c6:	2302      	movs	r3, #2
 80024c8:	777b      	strb	r3, [r7, #29]
 80024ca:	e006      	b.n	80024da <bme68x_set_heatr_conf+0x92>
					} else {
						run_gas = BME68X_ENABLE_GAS_MEAS_L;
 80024cc:	2301      	movs	r3, #1
 80024ce:	777b      	strb	r3, [r7, #29]
 80024d0:	e003      	b.n	80024da <bme68x_set_heatr_conf+0x92>
					}
				} else {
					hctrl = BME68X_DISABLE_HEATER;
 80024d2:	2301      	movs	r3, #1
 80024d4:	77bb      	strb	r3, [r7, #30]
					run_gas = BME68X_DISABLE_GAS_MEAS;
 80024d6:	2300      	movs	r3, #0
 80024d8:	777b      	strb	r3, [r7, #29]
				}

				ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0],
 80024da:	7e3b      	ldrb	r3, [r7, #24]
 80024dc:	b25b      	sxtb	r3, r3
 80024de:	f023 0308 	bic.w	r3, r3, #8
 80024e2:	b25a      	sxtb	r2, r3
 80024e4:	7fbb      	ldrb	r3, [r7, #30]
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	b25b      	sxtb	r3, r3
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	b25b      	sxtb	r3, r3
 80024f0:	4313      	orrs	r3, r2
 80024f2:	b25b      	sxtb	r3, r3
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	763b      	strb	r3, [r7, #24]
						BME68X_HCTRL, hctrl);
				ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1],
 80024f8:	7e7b      	ldrb	r3, [r7, #25]
 80024fa:	b25b      	sxtb	r3, r3
 80024fc:	f023 030f 	bic.w	r3, r3, #15
 8002500:	b25a      	sxtb	r2, r3
 8002502:	7f3b      	ldrb	r3, [r7, #28]
 8002504:	b25b      	sxtb	r3, r3
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	b25b      	sxtb	r3, r3
 800250c:	4313      	orrs	r3, r2
 800250e:	b25b      	sxtb	r3, r3
 8002510:	b2db      	uxtb	r3, r3
 8002512:	767b      	strb	r3, [r7, #25]
						BME68X_NBCONV, nb_conv);
				ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1],
 8002514:	7e7b      	ldrb	r3, [r7, #25]
 8002516:	b25b      	sxtb	r3, r3
 8002518:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800251c:	b25a      	sxtb	r2, r3
 800251e:	7f7b      	ldrb	r3, [r7, #29]
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	b25b      	sxtb	r3, r3
 8002524:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002528:	b25b      	sxtb	r3, r3
 800252a:	4313      	orrs	r3, r2
 800252c:	b25b      	sxtb	r3, r3
 800252e:	b2db      	uxtb	r3, r3
 8002530:	767b      	strb	r3, [r7, #25]
						BME68X_RUN_GAS, run_gas);
				rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 8002532:	f107 0118 	add.w	r1, r7, #24
 8002536:	f107 0014 	add.w	r0, r7, #20
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2202      	movs	r2, #2
 800253e:	f7ff fb73 	bl	8001c28 <bme68x_set_regs>
 8002542:	4603      	mov	r3, r0
 8002544:	77fb      	strb	r3, [r7, #31]
 8002546:	e001      	b.n	800254c <bme68x_set_heatr_conf+0x104>
			}
		}
	} else {
		rslt = BME68X_E_NULL_PTR;
 8002548:	23ff      	movs	r3, #255	@ 0xff
 800254a:	77fb      	strb	r3, [r7, #31]
	}

	return rslt;
 800254c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3720      	adds	r7, #32
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <calc_temperature>:

#else

/* @brief This internal API is used to calculate the temperature value. */
static float calc_temperature(uint32_t temp_adc, struct bme68x_dev *dev)
{
 8002558:	b480      	push	{r7}
 800255a:	b087      	sub	sp, #28
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
	float var1;
	float var2;
	float calc_temp;

	/* calculate var1 data */
	var1 = ((((float) temp_adc / 16384.0f)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	ee07 3a90 	vmov	s15, r3
 8002568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800256c:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002650 <calc_temperature+0xf8>
 8002570:	ee87 7aa6 	vdiv.f32	s14, s15, s13
			- ((float) dev->calib.par_t1 / 1024.0f))
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	8bdb      	ldrh	r3, [r3, #30]
 8002578:	ee07 3a90 	vmov	s15, r3
 800257c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002580:	ed9f 6a34 	vldr	s12, [pc, #208]	@ 8002654 <calc_temperature+0xfc>
 8002584:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002588:	ee37 7a67 	vsub.f32	s14, s14, s15
			* ((float) dev->calib.par_t2));
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002592:	ee07 3a90 	vmov	s15, r3
 8002596:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	var1 = ((((float) temp_adc / 16384.0f)
 800259a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800259e:	edc7 7a05 	vstr	s15, [r7, #20]

	/* calculate var2 data */
	var2 = (((((float) temp_adc / 131072.0f)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	ee07 3a90 	vmov	s15, r3
 80025a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025ac:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8002658 <calc_temperature+0x100>
 80025b0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
			- ((float) dev->calib.par_t1 / 8192.0f))
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	8bdb      	ldrh	r3, [r3, #30]
 80025b8:	ee07 3a90 	vmov	s15, r3
 80025bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025c0:	ed9f 6a26 	vldr	s12, [pc, #152]	@ 800265c <calc_temperature+0x104>
 80025c4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80025c8:	ee37 7a67 	vsub.f32	s14, s14, s15
			* (((float) temp_adc / 131072.0f)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	ee07 3a90 	vmov	s15, r3
 80025d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025d6:	ed9f 6a20 	vldr	s12, [pc, #128]	@ 8002658 <calc_temperature+0x100>
 80025da:	eec7 6a86 	vdiv.f32	s13, s15, s12
					- ((float) dev->calib.par_t1 / 8192.0f)))
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	8bdb      	ldrh	r3, [r3, #30]
 80025e2:	ee07 3a90 	vmov	s15, r3
 80025e6:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80025ea:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 800265c <calc_temperature+0x104>
 80025ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025f2:	ee76 7ae7 	vsub.f32	s15, s13, s15
			* (((float) temp_adc / 131072.0f)
 80025f6:	ee27 7a27 	vmul.f32	s14, s14, s15
			* ((float) dev->calib.par_t3 * 16.0f));
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	f993 3022 	ldrsb.w	r3, [r3, #34]	@ 0x22
 8002600:	ee07 3a90 	vmov	s15, r3
 8002604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002608:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800260c:	ee67 7aa6 	vmul.f32	s15, s15, s13
	var2 = (((((float) temp_adc / 131072.0f)
 8002610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002614:	edc7 7a04 	vstr	s15, [r7, #16]

	/* t_fine value*/
	dev->calib.t_fine = (var1 + var2);
 8002618:	ed97 7a05 	vldr	s14, [r7, #20]
 800261c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002620:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

	/* compensated temperature data*/
	calc_temp = ((dev->calib.t_fine) / 5120.0f);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8002630:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8002660 <calc_temperature+0x108>
 8002634:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002638:	edc7 7a03 	vstr	s15, [r7, #12]

	return calc_temp;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	ee07 3a90 	vmov	s15, r3
}
 8002642:	eeb0 0a67 	vmov.f32	s0, s15
 8002646:	371c      	adds	r7, #28
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	46800000 	.word	0x46800000
 8002654:	44800000 	.word	0x44800000
 8002658:	48000000 	.word	0x48000000
 800265c:	46000000 	.word	0x46000000
 8002660:	45a00000 	.word	0x45a00000

08002664 <calc_pressure>:

/* @brief This internal API is used to calculate the pressure value. */
static float calc_pressure(uint32_t pres_adc, const struct bme68x_dev *dev)
{
 8002664:	b480      	push	{r7}
 8002666:	b087      	sub	sp, #28
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
	float var1;
	float var2;
	float var3;
	float calc_pres;

	var1 = (((float) dev->calib.t_fine / 2.0f) - 64000.0f);
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8002674:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002678:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800267c:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 80028b8 <calc_pressure+0x254>
 8002680:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002684:	edc7 7a04 	vstr	s15, [r7, #16]
	var2 = var1 * var1 * (((float) dev->calib.par_p6) / (131072.0f));
 8002688:	edd7 7a04 	vldr	s15, [r7, #16]
 800268c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	f993 302e 	ldrsb.w	r3, [r3, #46]	@ 0x2e
 8002696:	ee07 3a90 	vmov	s15, r3
 800269a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800269e:	ed9f 6a87 	vldr	s12, [pc, #540]	@ 80028bc <calc_pressure+0x258>
 80026a2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80026a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026aa:	edc7 7a03 	vstr	s15, [r7, #12]
	var2 = var2 + (var1 * ((float) dev->calib.par_p5) * 2.0f);
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 80026b4:	ee07 3a90 	vmov	s15, r3
 80026b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80026c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80026c8:	ed97 7a03 	vldr	s14, [r7, #12]
 80026cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026d0:	edc7 7a03 	vstr	s15, [r7, #12]
	var2 = (var2 / 4.0f) + (((float) dev->calib.par_p4) * 65536.0f);
 80026d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80026d8:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80026dc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 80026e6:	ee07 3a90 	vmov	s15, r3
 80026ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026ee:	eddf 6a74 	vldr	s13, [pc, #464]	@ 80028c0 <calc_pressure+0x25c>
 80026f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80026f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026fa:	edc7 7a03 	vstr	s15, [r7, #12]
	var1 = (((((float) dev->calib.par_p3 * var1 * var1) / 16384.0f)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	f993 3028 	ldrsb.w	r3, [r3, #40]	@ 0x28
 8002704:	ee07 3a90 	vmov	s15, r3
 8002708:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800270c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002710:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002714:	edd7 7a04 	vldr	s15, [r7, #16]
 8002718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800271c:	eddf 6a69 	vldr	s13, [pc, #420]	@ 80028c4 <calc_pressure+0x260>
 8002720:	ee87 7aa6 	vdiv.f32	s14, s15, s13
			+ ((float) dev->calib.par_p2 * var1)) / 524288.0f);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800272a:	ee07 3a90 	vmov	s15, r3
 800272e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002732:	edd7 7a04 	vldr	s15, [r7, #16]
 8002736:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800273a:	ee37 7a27 	vadd.f32	s14, s14, s15
	var1 = (((((float) dev->calib.par_p3 * var1 * var1) / 16384.0f)
 800273e:	eddf 6a62 	vldr	s13, [pc, #392]	@ 80028c8 <calc_pressure+0x264>
 8002742:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002746:	edc7 7a04 	vstr	s15, [r7, #16]
	var1 = ((1.0f + (var1 / 32768.0f)) * ((float) dev->calib.par_p1));
 800274a:	ed97 7a04 	vldr	s14, [r7, #16]
 800274e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80028cc <calc_pressure+0x268>
 8002752:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002756:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800275a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002762:	ee07 3a90 	vmov	s15, r3
 8002766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800276a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800276e:	edc7 7a04 	vstr	s15, [r7, #16]
	calc_pres = (1048576.0f - ((float) pres_adc));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	ee07 3a90 	vmov	s15, r3
 8002778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800277c:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 80028d0 <calc_pressure+0x26c>
 8002780:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002784:	edc7 7a05 	vstr	s15, [r7, #20]

	/* Avoid exception caused by division by zero */
	if ((int) var1 != 0) {
 8002788:	edd7 7a04 	vldr	s15, [r7, #16]
 800278c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002790:	ee17 3a90 	vmov	r3, s15
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 8081 	beq.w	800289c <calc_pressure+0x238>
		calc_pres = (((calc_pres - (var2 / 4096.0f)) * 6250.0f) / var1);
 800279a:	ed97 7a03 	vldr	s14, [r7, #12]
 800279e:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 80028d4 <calc_pressure+0x270>
 80027a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027a6:	ed97 7a05 	vldr	s14, [r7, #20]
 80027aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027ae:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80028d8 <calc_pressure+0x274>
 80027b2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80027b6:	ed97 7a04 	vldr	s14, [r7, #16]
 80027ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027be:	edc7 7a05 	vstr	s15, [r7, #20]
		var1 = (((float) dev->calib.par_p9) * calc_pres * calc_pres)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 80027c8:	ee07 3a90 	vmov	s15, r3
 80027cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80027d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80027dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027e0:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 80028dc <calc_pressure+0x278>
 80027e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027e8:	edc7 7a04 	vstr	s15, [r7, #16]
				/ 2147483648.0f;
		var2 = calc_pres * (((float) dev->calib.par_p8) / 32768.0f);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80027f2:	ee07 3a90 	vmov	s15, r3
 80027f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027fa:	eddf 6a34 	vldr	s13, [pc, #208]	@ 80028cc <calc_pressure+0x268>
 80027fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002802:	ed97 7a05 	vldr	s14, [r7, #20]
 8002806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800280a:	edc7 7a03 	vstr	s15, [r7, #12]
		var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f)
 800280e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002812:	eddf 6a33 	vldr	s13, [pc, #204]	@ 80028e0 <calc_pressure+0x27c>
 8002816:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800281a:	edd7 6a05 	vldr	s13, [r7, #20]
 800281e:	ed9f 6a30 	vldr	s12, [pc, #192]	@ 80028e0 <calc_pressure+0x27c>
 8002822:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002826:	ee27 7a27 	vmul.f32	s14, s14, s15
				* (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
 800282a:	edd7 6a05 	vldr	s13, [r7, #20]
 800282e:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 80028e0 <calc_pressure+0x27c>
 8002832:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002836:	ee27 7a27 	vmul.f32	s14, s14, s15
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002840:	ee07 3a90 	vmov	s15, r3
 8002844:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002848:	ed9f 6a1c 	vldr	s12, [pc, #112]	@ 80028bc <calc_pressure+0x258>
 800284c:	eec6 7a86 	vdiv.f32	s15, s13, s12
		var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f)
 8002850:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002854:	edc7 7a02 	vstr	s15, [r7, #8]
		calc_pres = (calc_pres
				+ (var1 + var2 + var3 + ((float) dev->calib.par_p7 * 128.0f))
 8002858:	ed97 7a04 	vldr	s14, [r7, #16]
 800285c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002860:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002864:	edd7 7a02 	vldr	s15, [r7, #8]
 8002868:	ee37 7a27 	vadd.f32	s14, s14, s15
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	f993 302f 	ldrsb.w	r3, [r3, #47]	@ 0x2f
 8002872:	ee07 3a90 	vmov	s15, r3
 8002876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800287a:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 80028e4 <calc_pressure+0x280>
 800287e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002882:	ee37 7a27 	vadd.f32	s14, s14, s15
						/ 16.0f);
 8002886:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800288a:	eec7 7a26 	vdiv.f32	s15, s14, s13
		calc_pres = (calc_pres
 800288e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002892:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002896:	edc7 7a05 	vstr	s15, [r7, #20]
 800289a:	e002      	b.n	80028a2 <calc_pressure+0x23e>
	} else {
		calc_pres = 0;
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
	}

	return calc_pres;
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	ee07 3a90 	vmov	s15, r3
}
 80028a8:	eeb0 0a67 	vmov.f32	s0, s15
 80028ac:	371c      	adds	r7, #28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	477a0000 	.word	0x477a0000
 80028bc:	48000000 	.word	0x48000000
 80028c0:	47800000 	.word	0x47800000
 80028c4:	46800000 	.word	0x46800000
 80028c8:	49000000 	.word	0x49000000
 80028cc:	47000000 	.word	0x47000000
 80028d0:	49800000 	.word	0x49800000
 80028d4:	45800000 	.word	0x45800000
 80028d8:	45c35000 	.word	0x45c35000
 80028dc:	4f000000 	.word	0x4f000000
 80028e0:	43800000 	.word	0x43800000
 80028e4:	43000000 	.word	0x43000000

080028e8 <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static float calc_humidity(uint16_t hum_adc, const struct bme68x_dev *dev)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b089      	sub	sp, #36	@ 0x24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	6039      	str	r1, [r7, #0]
 80028f2:	80fb      	strh	r3, [r7, #6]
	float var3;
	float var4;
	float temp_comp;

	/* compensated temperature data*/
	temp_comp = ((dev->calib.t_fine) / 5120.0f);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80028fa:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8002a64 <calc_humidity+0x17c>
 80028fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002902:	edc7 7a06 	vstr	s15, [r7, #24]
	var1 = (float) ((float) hum_adc)
 8002906:	88fb      	ldrh	r3, [r7, #6]
 8002908:	ee07 3a90 	vmov	s15, r3
 800290c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
			- (((float) dev->calib.par_h1 * 16.0f)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	8a1b      	ldrh	r3, [r3, #16]
 8002914:	ee07 3a90 	vmov	s15, r3
 8002918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800291c:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8002920:	ee67 6aa6 	vmul.f32	s13, s15, s13
					+ (((float) dev->calib.par_h3 / 2.0f) * temp_comp));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800292a:	ee07 3a90 	vmov	s15, r3
 800292e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002932:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 8002936:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800293a:	edd7 7a06 	vldr	s15, [r7, #24]
 800293e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002942:	ee76 7aa7 	vadd.f32	s15, s13, s15
	var1 = (float) ((float) hum_adc)
 8002946:	ee77 7a67 	vsub.f32	s15, s14, s15
 800294a:	edc7 7a05 	vstr	s15, [r7, #20]
	var2 = var1
			* ((float) (((float) dev->calib.par_h2 / 262144.0f)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	8a5b      	ldrh	r3, [r3, #18]
 8002952:	ee07 3a90 	vmov	s15, r3
 8002956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800295a:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8002a68 <calc_humidity+0x180>
 800295e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					* (1.0f
							+ (((float) dev->calib.par_h4 / 16384.0f)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8002968:	ee07 3a90 	vmov	s15, r3
 800296c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002970:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 8002a6c <calc_humidity+0x184>
 8002974:	eec7 6a86 	vdiv.f32	s13, s15, s12
									* temp_comp)
 8002978:	edd7 7a06 	vldr	s15, [r7, #24]
 800297c:	ee66 7aa7 	vmul.f32	s15, s13, s15
							+ (((float) dev->calib.par_h4 / 16384.0f)
 8002980:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002984:	ee77 6aa6 	vadd.f32	s13, s15, s13
							+ (((float) dev->calib.par_h5 / 1048576.0f)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	f993 3016 	ldrsb.w	r3, [r3, #22]
 800298e:	ee07 3a90 	vmov	s15, r3
 8002992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002996:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8002a70 <calc_humidity+0x188>
 800299a:	ee87 6aa5 	vdiv.f32	s12, s15, s11
									* temp_comp * temp_comp))));
 800299e:	edd7 7a06 	vldr	s15, [r7, #24]
 80029a2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80029a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80029aa:	ee66 7a27 	vmul.f32	s15, s12, s15
							+ (((float) dev->calib.par_h5 / 1048576.0f)
 80029ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
			* ((float) (((float) dev->calib.par_h2 / 262144.0f)
 80029b2:	ee67 7a27 	vmul.f32	s15, s14, s15
	var2 = var1
 80029b6:	ed97 7a05 	vldr	s14, [r7, #20]
 80029ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029be:	edc7 7a04 	vstr	s15, [r7, #16]
	var3 = (float) dev->calib.par_h6 / 16384.0f;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	7ddb      	ldrb	r3, [r3, #23]
 80029c6:	ee07 3a90 	vmov	s15, r3
 80029ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029ce:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8002a6c <calc_humidity+0x184>
 80029d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029d6:	edc7 7a03 	vstr	s15, [r7, #12]
	var4 = (float) dev->calib.par_h7 / 2097152.0f;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	f993 3018 	ldrsb.w	r3, [r3, #24]
 80029e0:	ee07 3a90 	vmov	s15, r3
 80029e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029e8:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8002a74 <calc_humidity+0x18c>
 80029ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029f0:	edc7 7a02 	vstr	s15, [r7, #8]
	calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
 80029f4:	ed97 7a02 	vldr	s14, [r7, #8]
 80029f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80029fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a00:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a08:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a10:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a18:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a20:	edc7 7a07 	vstr	s15, [r7, #28]
	if (calc_hum > 100.0f) {
 8002a24:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a28:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8002a78 <calc_humidity+0x190>
 8002a2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a34:	dd02      	ble.n	8002a3c <calc_humidity+0x154>
		calc_hum = 100.0f;
 8002a36:	4b11      	ldr	r3, [pc, #68]	@ (8002a7c <calc_humidity+0x194>)
 8002a38:	61fb      	str	r3, [r7, #28]
 8002a3a:	e009      	b.n	8002a50 <calc_humidity+0x168>
	} else if (calc_hum < 0.0f) {
 8002a3c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a48:	d502      	bpl.n	8002a50 <calc_humidity+0x168>
		calc_hum = 0.0f;
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	61fb      	str	r3, [r7, #28]
	}

	return calc_hum;
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	ee07 3a90 	vmov	s15, r3
}
 8002a56:	eeb0 0a67 	vmov.f32	s0, s15
 8002a5a:	3724      	adds	r7, #36	@ 0x24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	45a00000 	.word	0x45a00000
 8002a68:	48800000 	.word	0x48800000
 8002a6c:	46800000 	.word	0x46800000
 8002a70:	49800000 	.word	0x49800000
 8002a74:	4a000000 	.word	0x4a000000
 8002a78:	42c80000 	.word	0x42c80000
 8002a7c:	42c80000 	.word	0x42c80000

08002a80 <calc_gas_resistance_low>:

/* This internal API is used to calculate the gas resistance low value in float */
static float calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range,
		const struct bme68x_dev *dev)
{
 8002a80:	b4b0      	push	{r4, r5, r7}
 8002a82:	b0a9      	sub	sp, #164	@ 0xa4
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	603a      	str	r2, [r7, #0]
 8002a8a:	80fb      	strh	r3, [r7, #6]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	717b      	strb	r3, [r7, #5]
	float calc_gas_res;
	float var1;
	float var2;
	float var3;
	float gas_res_f = gas_res_adc;
 8002a90:	88fb      	ldrh	r3, [r7, #6]
 8002a92:	ee07 3a90 	vmov	s15, r3
 8002a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a9a:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
	float gas_range_f = (1U << gas_range); /*lint !e790 / Suspicious truncation, integral to float */
 8002a9e:	797b      	ldrb	r3, [r7, #5]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	ee07 3a90 	vmov	s15, r3
 8002aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aae:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
	const float lookup_k1_range[16] = { 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -1.0f,
 8002ab2:	4b3e      	ldr	r3, [pc, #248]	@ (8002bac <calc_gas_resistance_low+0x12c>)
 8002ab4:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8002ab8:	461d      	mov	r5, r3
 8002aba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002abc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002abe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ac0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ac2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ac4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ac6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002aca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0.0f, -0.8f, 0.0f, 0.0f, -0.2f, -0.5f, 0.0f, -1.0f, 0.0f, 0.0f };
	const float lookup_k2_range[16] = { 0.0f, 0.0f, 0.0f, 0.0f, 0.1f, 0.7f,
 8002ace:	4b38      	ldr	r3, [pc, #224]	@ (8002bb0 <calc_gas_resistance_low+0x130>)
 8002ad0:	f107 0408 	add.w	r4, r7, #8
 8002ad4:	461d      	mov	r5, r3
 8002ad6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ad8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ada:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002adc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ade:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ae0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ae2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002ae6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0.0f, -0.8f, -0.1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f };

	var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	f993 303e 	ldrsb.w	r3, [r3, #62]	@ 0x3e
 8002af0:	ee07 3a90 	vmov	s15, r3
 8002af4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002af8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002afc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b00:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8002bb4 <calc_gas_resistance_low+0x134>
 8002b04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b08:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
	var2 = (var1) * (1.0f + lookup_k1_range[gas_range] / 100.0f);
 8002b0c:	797b      	ldrb	r3, [r7, #5]
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	33a0      	adds	r3, #160	@ 0xa0
 8002b12:	443b      	add	r3, r7
 8002b14:	3b58      	subs	r3, #88	@ 0x58
 8002b16:	ed93 7a00 	vldr	s14, [r3]
 8002b1a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8002bb8 <calc_gas_resistance_low+0x138>
 8002b1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b2a:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8002b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b32:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
	var3 = 1.0f + (lookup_k2_range[gas_range] / 100.0f);
 8002b36:	797b      	ldrb	r3, [r7, #5]
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	33a0      	adds	r3, #160	@ 0xa0
 8002b3c:	443b      	add	r3, r7
 8002b3e:	3b98      	subs	r3, #152	@ 0x98
 8002b40:	ed93 7a00 	vldr	s14, [r3]
 8002b44:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8002bb8 <calc_gas_resistance_low+0x138>
 8002b48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b54:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
	calc_gas_res = 1.0f
			/ (float) (var3 * (0.000000125f) * gas_range_f
 8002b58:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8002b5c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002bbc <calc_gas_resistance_low+0x13c>
 8002b60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b64:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8002b68:	ee27 7a27 	vmul.f32	s14, s14, s15
					* (((gas_res_f - 512.0f) / var2) + 1.0f));
 8002b6c:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002b70:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8002bc0 <calc_gas_resistance_low+0x140>
 8002b74:	ee37 6ae6 	vsub.f32	s12, s15, s13
 8002b78:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8002b7c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002b80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b84:	ee77 7aa6 	vadd.f32	s15, s15, s13
			/ (float) (var3 * (0.000000125f) * gas_range_f
 8002b88:	ee27 7a27 	vmul.f32	s14, s14, s15
	calc_gas_res = 1.0f
 8002b8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b94:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

	return calc_gas_res;
 8002b98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b9c:	ee07 3a90 	vmov	s15, r3
}
 8002ba0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ba4:	37a4      	adds	r7, #164	@ 0xa4
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bcb0      	pop	{r4, r5, r7}
 8002baa:	4770      	bx	lr
 8002bac:	08011468 	.word	0x08011468
 8002bb0:	080114a8 	.word	0x080114a8
 8002bb4:	44a78000 	.word	0x44a78000
 8002bb8:	42c80000 	.word	0x42c80000
 8002bbc:	340637bd 	.word	0x340637bd
 8002bc0:	44000000 	.word	0x44000000

08002bc4 <calc_gas_resistance_high>:

/* This internal API is used to calculate the gas resistance value in float */
static float calc_gas_resistance_high(uint16_t gas_res_adc, uint8_t gas_range)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b087      	sub	sp, #28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	460a      	mov	r2, r1
 8002bce:	80fb      	strh	r3, [r7, #6]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	717b      	strb	r3, [r7, #5]
	float calc_gas_res;
	uint32_t var1 = UINT32_C(262144) >> gas_range;
 8002bd4:	797b      	ldrb	r3, [r7, #5]
 8002bd6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002bda:	fa22 f303 	lsr.w	r3, r2, r3
 8002bde:	617b      	str	r3, [r7, #20]
	int32_t var2 = (int32_t) gas_res_adc - INT32_C(512);
 8002be0:	88fb      	ldrh	r3, [r7, #6]
 8002be2:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8002be6:	613b      	str	r3, [r7, #16]

	var2 *= INT32_C(3);
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	4613      	mov	r3, r2
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	4413      	add	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
	var2 = INT32_C(4096) + var2;
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bf8:	613b      	str	r3, [r7, #16]

	calc_gas_res = 1000000.0f * (float) var1 / (float) var2;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	ee07 3a90 	vmov	s15, r3
 8002c00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c04:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002c34 <calc_gas_resistance_high+0x70>
 8002c08:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	ee07 3a90 	vmov	s15, r3
 8002c12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c1a:	edc7 7a03 	vstr	s15, [r7, #12]

	return calc_gas_res;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	ee07 3a90 	vmov	s15, r3
}
 8002c24:	eeb0 0a67 	vmov.f32	s0, s15
 8002c28:	371c      	adds	r7, #28
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	49742400 	.word	0x49742400

08002c38 <calc_res_heat>:

/* This internal API is used to calculate the heater resistance value */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b08b      	sub	sp, #44	@ 0x2c
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	81fb      	strh	r3, [r7, #14]
	float var3;
	float var4;
	float var5;
	uint8_t res_heat;

	if (temp > 400) /* Cap temperature */
 8002c44:	89fb      	ldrh	r3, [r7, #14]
 8002c46:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002c4a:	d902      	bls.n	8002c52 <calc_res_heat+0x1a>
	{
		temp = 400;
 8002c4c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002c50:	81fb      	strh	r3, [r7, #14]
	}

	var1 = (((float) dev->calib.par_gh1 / (16.0f)) + 49.0f);
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	f993 3019 	ldrsb.w	r3, [r3, #25]
 8002c58:	ee07 3a90 	vmov	s15, r3
 8002c5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c60:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8002c64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c68:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8002d7c <calc_res_heat+0x144>
 8002c6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c70:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	var2 = ((((float) dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002c7a:	ee07 3a90 	vmov	s15, r3
 8002c7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c82:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8002d80 <calc_res_heat+0x148>
 8002c86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c8a:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8002d84 <calc_res_heat+0x14c>
 8002c8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c92:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8002d88 <calc_res_heat+0x150>
 8002c96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c9a:	edc7 7a08 	vstr	s15, [r7, #32]
	var3 = ((float) dev->calib.par_gh3 / (1024.0f));
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8002ca4:	ee07 3a90 	vmov	s15, r3
 8002ca8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cac:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8002d8c <calc_res_heat+0x154>
 8002cb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cb4:	edc7 7a07 	vstr	s15, [r7, #28]
	var4 = (var1 * (1.0f + (var2 * (float) temp)));
 8002cb8:	89fb      	ldrh	r3, [r7, #14]
 8002cba:	ee07 3a90 	vmov	s15, r3
 8002cbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002cc2:	edd7 7a08 	vldr	s15, [r7, #32]
 8002cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002cce:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002cd2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cda:	edc7 7a06 	vstr	s15, [r7, #24]
	var5 = (var4 + (var3 * (float) dev->amb_temp));
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8002ce4:	ee07 3a90 	vmov	s15, r3
 8002ce8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cec:	edd7 7a07 	vldr	s15, [r7, #28]
 8002cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cf4:	ed97 7a06 	vldr	s14, [r7, #24]
 8002cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cfc:	edc7 7a05 	vstr	s15, [r7, #20]
	res_heat = (uint8_t) (3.4f
			* ((var5 * (4 / (4 + (float) dev->calib.res_heat_range))
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d06:	ee07 3a90 	vmov	s15, r3
 8002d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d0e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002d12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d16:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8002d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d22:	ee27 7a27 	vmul.f32	s14, s14, s15
					* (1 / (1 + ((float) dev->calib.res_heat_val * 0.002f))))
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	f993 303d 	ldrsb.w	r3, [r3, #61]	@ 0x3d
 8002d2c:	ee07 3a90 	vmov	s15, r3
 8002d30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d34:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8002d90 <calc_res_heat+0x158>
 8002d38:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d40:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8002d44:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8002d48:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
					- 25));
 8002d50:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8002d54:	ee77 7ac7 	vsub.f32	s15, s15, s14
			* ((var5 * (4 / (4 + (float) dev->calib.res_heat_range))
 8002d58:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002d94 <calc_res_heat+0x15c>
 8002d5c:	ee67 7a87 	vmul.f32	s15, s15, s14
	res_heat = (uint8_t) (3.4f
 8002d60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d64:	edc7 7a01 	vstr	s15, [r7, #4]
 8002d68:	793b      	ldrb	r3, [r7, #4]
 8002d6a:	74fb      	strb	r3, [r7, #19]

	return res_heat;
 8002d6c:	7cfb      	ldrb	r3, [r7, #19]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	372c      	adds	r7, #44	@ 0x2c
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	42440000 	.word	0x42440000
 8002d80:	47000000 	.word	0x47000000
 8002d84:	3a03126f 	.word	0x3a03126f
 8002d88:	3b1a0275 	.word	0x3b1a0275
 8002d8c:	44800000 	.word	0x44800000
 8002d90:	3b03126f 	.word	0x3b03126f
 8002d94:	4059999a 	.word	0x4059999a

08002d98 <calc_gas_wait>:

#endif

/* This internal API is used to calculate the gas wait */
static uint8_t calc_gas_wait(uint16_t dur)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	80fb      	strh	r3, [r7, #6]
	uint8_t factor = 0;
 8002da2:	2300      	movs	r3, #0
 8002da4:	73fb      	strb	r3, [r7, #15]
	uint8_t durval;

	if (dur >= 0xfc0) {
 8002da6:	88fb      	ldrh	r3, [r7, #6]
 8002da8:	f5b3 6f7c 	cmp.w	r3, #4032	@ 0xfc0
 8002dac:	d308      	bcc.n	8002dc0 <calc_gas_wait+0x28>
		durval = 0xff; /* Max duration*/
 8002dae:	23ff      	movs	r3, #255	@ 0xff
 8002db0:	73bb      	strb	r3, [r7, #14]
 8002db2:	e00f      	b.n	8002dd4 <calc_gas_wait+0x3c>
	} else {
		while (dur > 0x3F) {
			dur = dur / 4;
 8002db4:	88fb      	ldrh	r3, [r7, #6]
 8002db6:	089b      	lsrs	r3, r3, #2
 8002db8:	80fb      	strh	r3, [r7, #6]
			factor += 1;
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	73fb      	strb	r3, [r7, #15]
		while (dur > 0x3F) {
 8002dc0:	88fb      	ldrh	r3, [r7, #6]
 8002dc2:	2b3f      	cmp	r3, #63	@ 0x3f
 8002dc4:	d8f6      	bhi.n	8002db4 <calc_gas_wait+0x1c>
		}

		durval = (uint8_t) (dur + (factor * 64));
 8002dc6:	88fb      	ldrh	r3, [r7, #6]
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
 8002dcc:	019b      	lsls	r3, r3, #6
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	73bb      	strb	r3, [r7, #14]
	}

	return durval;
 8002dd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <read_field_data>:

/* This internal API is used to read a single data of the sensor */
static int8_t read_field_data(uint8_t index, struct bme68x_data *data,
		struct bme68x_dev *dev)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b08e      	sub	sp, #56	@ 0x38
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	4603      	mov	r3, r0
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
 8002dee:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME68X_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t buff[BME68X_LEN_FIELD] = { 0 };
 8002df6:	2300      	movs	r3, #0
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	f107 0314 	add.w	r3, r7, #20
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	605a      	str	r2, [r3, #4]
 8002e04:	609a      	str	r2, [r3, #8]
 8002e06:	731a      	strb	r2, [r3, #12]
	uint8_t gas_range_l, gas_range_h;
	uint32_t adc_temp;
	uint32_t adc_pres;
	uint16_t adc_hum;
	uint16_t adc_gas_res_low, adc_gas_res_high;
	uint8_t tries = 5;
 8002e08:	2305      	movs	r3, #5
 8002e0a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

	while ((tries) && (rslt == BME68X_OK)) {
 8002e0e:	e11d      	b.n	800304c <read_field_data+0x26a>
		rslt = bme68x_get_regs(
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	461a      	mov	r2, r3
 8002e14:	0112      	lsls	r2, r2, #4
 8002e16:	4413      	add	r3, r2
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	331d      	adds	r3, #29
 8002e1c:	b2d8      	uxtb	r0, r3
 8002e1e:	f107 0110 	add.w	r1, r7, #16
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2211      	movs	r2, #17
 8002e26:	f7fe ff8f 	bl	8001d48 <bme68x_get_regs>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				((uint8_t) (BME68X_REG_FIELD0
						+ (index * BME68X_LEN_FIELD_OFFSET))), buff,
				(uint16_t) BME68X_LEN_FIELD, dev);
		if (!data) {
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d103      	bne.n	8002e3e <read_field_data+0x5c>
			rslt = BME68X_E_NULL_PTR;
 8002e36:	23ff      	movs	r3, #255	@ 0xff
 8002e38:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			break;
 8002e3c:	e10f      	b.n	800305e <read_field_data+0x27c>
		}

		data->status = buff[0] & BME68X_NEW_DATA_MSK;
 8002e3e:	7c3b      	ldrb	r3, [r7, #16]
 8002e40:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	701a      	strb	r2, [r3, #0]
		data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
 8002e4a:	7c3b      	ldrb	r3, [r7, #16]
 8002e4c:	f003 030f 	and.w	r3, r3, #15
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	705a      	strb	r2, [r3, #1]
		data->meas_index = buff[1];
 8002e56:	7c7a      	ldrb	r2, [r7, #17]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	709a      	strb	r2, [r3, #2]

		/* read the raw data from the sensor */
		adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096)
 8002e5c:	7cbb      	ldrb	r3, [r7, #18]
 8002e5e:	031a      	lsls	r2, r3, #12
				| ((uint32_t) buff[3] * 16) | ((uint32_t) buff[4] / 16));
 8002e60:	7cfb      	ldrb	r3, [r7, #19]
 8002e62:	011b      	lsls	r3, r3, #4
 8002e64:	4313      	orrs	r3, r2
 8002e66:	7d3a      	ldrb	r2, [r7, #20]
 8002e68:	0912      	lsrs	r2, r2, #4
 8002e6a:	b2d2      	uxtb	r2, r2
		adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	633b      	str	r3, [r7, #48]	@ 0x30
		adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096)
 8002e70:	7d7b      	ldrb	r3, [r7, #21]
 8002e72:	031a      	lsls	r2, r3, #12
				| ((uint32_t) buff[6] * 16) | ((uint32_t) buff[7] / 16));
 8002e74:	7dbb      	ldrb	r3, [r7, #22]
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	7dfa      	ldrb	r2, [r7, #23]
 8002e7c:	0912      	lsrs	r2, r2, #4
 8002e7e:	b2d2      	uxtb	r2, r2
		adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
		adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8002e84:	7e3b      	ldrb	r3, [r7, #24]
 8002e86:	021b      	lsls	r3, r3, #8
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	7e7a      	ldrb	r2, [r7, #25]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	857b      	strh	r3, [r7, #42]	@ 0x2a
		adc_gas_res_low = (uint16_t) ((uint32_t) buff[13] * 4
 8002e90:	7f7b      	ldrb	r3, [r7, #29]
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	b29b      	uxth	r3, r3
				| (((uint32_t) buff[14]) / 64));
 8002e96:	7fba      	ldrb	r2, [r7, #30]
		adc_gas_res_low = (uint16_t) ((uint32_t) buff[13] * 4
 8002e98:	0992      	lsrs	r2, r2, #6
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	853b      	strh	r3, [r7, #40]	@ 0x28
		adc_gas_res_high = (uint16_t) ((uint32_t) buff[15] * 4
 8002ea0:	7ffb      	ldrb	r3, [r7, #31]
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	b29b      	uxth	r3, r3
				| (((uint32_t) buff[16]) / 64));
 8002ea6:	f897 2020 	ldrb.w	r2, [r7, #32]
		adc_gas_res_high = (uint16_t) ((uint32_t) buff[15] * 4
 8002eaa:	0992      	lsrs	r2, r2, #6
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	84fb      	strh	r3, [r7, #38]	@ 0x26
		gas_range_l = buff[14] & BME68X_GAS_RANGE_MSK;
 8002eb2:	7fbb      	ldrb	r3, [r7, #30]
 8002eb4:	f003 030f 	and.w	r3, r3, #15
 8002eb8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		gas_range_h = buff[16] & BME68X_GAS_RANGE_MSK;
 8002ebc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ec0:	f003 030f 	and.w	r3, r3, #15
 8002ec4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		if (dev->variant_id == BME68X_VARIANT_GAS_HIGH) {
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d11c      	bne.n	8002f0a <read_field_data+0x128>
			data->status |= buff[16] & BME68X_GASM_VALID_MSK;
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	b25a      	sxtb	r2, r3
 8002ed6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002eda:	b25b      	sxtb	r3, r3
 8002edc:	f003 0320 	and.w	r3, r3, #32
 8002ee0:	b25b      	sxtb	r3, r3
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	b25b      	sxtb	r3, r3
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	701a      	strb	r2, [r3, #0]
			data->status |= buff[16] & BME68X_HEAT_STAB_MSK;
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	b25a      	sxtb	r2, r3
 8002ef2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ef6:	b25b      	sxtb	r3, r3
 8002ef8:	f003 0310 	and.w	r3, r3, #16
 8002efc:	b25b      	sxtb	r3, r3
 8002efe:	4313      	orrs	r3, r2
 8002f00:	b25b      	sxtb	r3, r3
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	701a      	strb	r2, [r3, #0]
 8002f08:	e019      	b.n	8002f3e <read_field_data+0x15c>
		} else {
			data->status |= buff[14] & BME68X_GASM_VALID_MSK;
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	b25a      	sxtb	r2, r3
 8002f10:	7fbb      	ldrb	r3, [r7, #30]
 8002f12:	b25b      	sxtb	r3, r3
 8002f14:	f003 0320 	and.w	r3, r3, #32
 8002f18:	b25b      	sxtb	r3, r3
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	b25b      	sxtb	r3, r3
 8002f1e:	b2da      	uxtb	r2, r3
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	701a      	strb	r2, [r3, #0]
			data->status |= buff[14] & BME68X_HEAT_STAB_MSK;
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	b25a      	sxtb	r2, r3
 8002f2a:	7fbb      	ldrb	r3, [r7, #30]
 8002f2c:	b25b      	sxtb	r3, r3
 8002f2e:	f003 0310 	and.w	r3, r3, #16
 8002f32:	b25b      	sxtb	r3, r3
 8002f34:	4313      	orrs	r3, r2
 8002f36:	b25b      	sxtb	r3, r3
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	701a      	strb	r2, [r3, #0]
		}

		if ((data->status & BME68X_NEW_DATA_MSK) && (rslt == BME68X_OK)) {
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	b25b      	sxtb	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	da70      	bge.n	800302a <read_field_data+0x248>
 8002f48:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d16c      	bne.n	800302a <read_field_data+0x248>
			rslt = bme68x_get_regs(BME68X_REG_RES_HEAT0 + data->gas_index,
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	785b      	ldrb	r3, [r3, #1]
 8002f54:	335a      	adds	r3, #90	@ 0x5a
 8002f56:	b2d8      	uxtb	r0, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	1cd9      	adds	r1, r3, #3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f7fe fef2 	bl	8001d48 <bme68x_get_regs>
 8002f64:	4603      	mov	r3, r0
 8002f66:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					&data->res_heat, 1, dev);
			if (rslt == BME68X_OK) {
 8002f6a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10c      	bne.n	8002f8c <read_field_data+0x1aa>
				rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0 + data->gas_index,
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	785b      	ldrb	r3, [r3, #1]
 8002f76:	3350      	adds	r3, #80	@ 0x50
 8002f78:	b2d8      	uxtb	r0, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	1d19      	adds	r1, r3, #4
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f7fe fee1 	bl	8001d48 <bme68x_get_regs>
 8002f86:	4603      	mov	r3, r0
 8002f88:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						&data->idac, 1, dev);
			}

			if (rslt == BME68X_OK) {
 8002f8c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10c      	bne.n	8002fae <read_field_data+0x1cc>
				rslt = bme68x_get_regs(BME68X_REG_GAS_WAIT0 + data->gas_index,
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	785b      	ldrb	r3, [r3, #1]
 8002f98:	3364      	adds	r3, #100	@ 0x64
 8002f9a:	b2d8      	uxtb	r0, r3
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	1d59      	adds	r1, r3, #5
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f7fe fed0 	bl	8001d48 <bme68x_get_regs>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						&data->gas_wait, 1, dev);
			}

			if (rslt == BME68X_OK) {
 8002fae:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d139      	bne.n	800302a <read_field_data+0x248>
				data->temperature = calc_temperature(adc_temp, dev);
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002fba:	f7ff facd 	bl	8002558 <calc_temperature>
 8002fbe:	eef0 7a40 	vmov.f32	s15, s0
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	edc3 7a03 	vstr	s15, [r3, #12]
				data->pressure = calc_pressure(adc_pres, dev);
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fcc:	f7ff fb4a 	bl	8002664 <calc_pressure>
 8002fd0:	eef0 7a40 	vmov.f32	s15, s0
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	edc3 7a04 	vstr	s15, [r3, #16]
				data->humidity = calc_humidity(adc_hum, dev);
 8002fda:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff fc82 	bl	80028e8 <calc_humidity>
 8002fe4:	eef0 7a40 	vmov.f32	s15, s0
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	edc3 7a05 	vstr	s15, [r3, #20]
				if (dev->variant_id == BME68X_VARIANT_GAS_HIGH) {
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d10c      	bne.n	8003010 <read_field_data+0x22e>
					data->gas_resistance = calc_gas_resistance_high(
 8002ff6:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002ffa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff fde0 	bl	8002bc4 <calc_gas_resistance_high>
 8003004:	eef0 7a40 	vmov.f32	s15, s0
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	edc3 7a06 	vstr	s15, [r3, #24]
				} else {
					data->gas_resistance = calc_gas_resistance_low(
							adc_gas_res_low, gas_range_l, dev);
				}

				break;
 800300e:	e026      	b.n	800305e <read_field_data+0x27c>
					data->gas_resistance = calc_gas_resistance_low(
 8003010:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8003014:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff fd31 	bl	8002a80 <calc_gas_resistance_low>
 800301e:	eef0 7a40 	vmov.f32	s15, s0
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	edc3 7a06 	vstr	s15, [r3, #24]
				break;
 8003028:	e019      	b.n	800305e <read_field_data+0x27c>
			}
		}

		if (rslt == BME68X_OK) {
 800302a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800302e:	2b00      	cmp	r3, #0
 8003030:	d107      	bne.n	8003042 <read_field_data+0x260>
			dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6852      	ldr	r2, [r2, #4]
 800303a:	4611      	mov	r1, r2
 800303c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8003040:	4798      	blx	r3
		}

		tries--;
 8003042:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003046:	3b01      	subs	r3, #1
 8003048:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	while ((tries) && (rslt == BME68X_OK)) {
 800304c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003050:	2b00      	cmp	r3, #0
 8003052:	d004      	beq.n	800305e <read_field_data+0x27c>
 8003054:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8003058:	2b00      	cmp	r3, #0
 800305a:	f43f aed9 	beq.w	8002e10 <read_field_data+0x2e>
	}

	return rslt;
 800305e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8003062:	4618      	mov	r0, r3
 8003064:	3738      	adds	r7, #56	@ 0x38
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <read_all_field_data>:

/* This internal API is used to read all data fields of the sensor */
static int8_t read_all_field_data(struct bme68x_data *const data[],
		struct bme68x_dev *dev)
{
 800306a:	b590      	push	{r4, r7, lr}
 800306c:	b09d      	sub	sp, #116	@ 0x74
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	6039      	str	r1, [r7, #0]
	int8_t rslt = BME68X_OK;
 8003074:	2300      	movs	r3, #0
 8003076:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	uint8_t buff[BME68X_LEN_FIELD * 3] = { 0 };
 800307a:	2300      	movs	r3, #0
 800307c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800307e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003082:	222f      	movs	r2, #47	@ 0x2f
 8003084:	2100      	movs	r1, #0
 8003086:	4618      	mov	r0, r3
 8003088:	f00b ffb2 	bl	800eff0 <memset>
	uint32_t adc_temp;
	uint32_t adc_pres;
	uint16_t adc_hum;
	uint16_t adc_gas_res_low, adc_gas_res_high;
	uint8_t off;
	uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
 800308c:	2300      	movs	r3, #0
 800308e:	60bb      	str	r3, [r7, #8]
 8003090:	f107 030c 	add.w	r3, r7, #12
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	605a      	str	r2, [r3, #4]
 800309a:	609a      	str	r2, [r3, #8]
 800309c:	60da      	str	r2, [r3, #12]
 800309e:	611a      	str	r2, [r3, #16]
 80030a0:	615a      	str	r2, [r3, #20]
 80030a2:	831a      	strh	r2, [r3, #24]
	uint8_t i;

	if (!data[0] && !data[1] && !data[2]) {
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10c      	bne.n	80030c6 <read_all_field_data+0x5c>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3304      	adds	r3, #4
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d107      	bne.n	80030c6 <read_all_field_data+0x5c>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3308      	adds	r3, #8
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d102      	bne.n	80030c6 <read_all_field_data+0x5c>
		rslt = BME68X_E_NULL_PTR;
 80030c0:	23ff      	movs	r3, #255	@ 0xff
 80030c2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	}

	if (rslt == BME68X_OK) {
 80030c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d109      	bne.n	80030e2 <read_all_field_data+0x78>
		rslt = bme68x_get_regs(BME68X_REG_FIELD0, buff,
 80030ce:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	2233      	movs	r2, #51	@ 0x33
 80030d6:	201d      	movs	r0, #29
 80030d8:	f7fe fe36 	bl	8001d48 <bme68x_get_regs>
 80030dc:	4603      	mov	r3, r0
 80030de:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				(uint32_t) BME68X_LEN_FIELD * 3, dev);
	}

	if (rslt == BME68X_OK) {
 80030e2:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d109      	bne.n	80030fe <read_all_field_data+0x94>
		rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0, set_val, 30, dev);
 80030ea:	f107 0108 	add.w	r1, r7, #8
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	221e      	movs	r2, #30
 80030f2:	2050      	movs	r0, #80	@ 0x50
 80030f4:	f7fe fe28 	bl	8001d48 <bme68x_get_regs>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	}

	for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++) {
 80030fe:	2300      	movs	r3, #0
 8003100:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8003104:	e1ce      	b.n	80034a4 <read_all_field_data+0x43a>
		off = (uint8_t) (i * BME68X_LEN_FIELD);
 8003106:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800310a:	461a      	mov	r2, r3
 800310c:	0112      	lsls	r2, r2, #4
 800310e:	4413      	add	r3, r2
 8003110:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
		data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 8003114:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003118:	3370      	adds	r3, #112	@ 0x70
 800311a:	443b      	add	r3, r7
 800311c:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 8003120:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	440b      	add	r3, r1
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8003130:	b2d2      	uxtb	r2, r2
 8003132:	701a      	strb	r2, [r3, #0]
		data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 8003134:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003138:	3370      	adds	r3, #112	@ 0x70
 800313a:	443b      	add	r3, r7
 800313c:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 8003140:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	440b      	add	r3, r1
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f002 020f 	and.w	r2, r2, #15
 8003150:	b2d2      	uxtb	r2, r2
 8003152:	705a      	strb	r2, [r3, #1]
		data[i]->meas_index = buff[off + 1];
 8003154:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	440b      	add	r3, r1
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	3270      	adds	r2, #112	@ 0x70
 8003168:	443a      	add	r2, r7
 800316a:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 800316e:	709a      	strb	r2, [r3, #2]

		/* read the raw data from the sensor */
		adc_pres = (uint32_t) (((uint32_t) buff[off + 2] * 4096)
 8003170:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003174:	3302      	adds	r3, #2
 8003176:	3370      	adds	r3, #112	@ 0x70
 8003178:	443b      	add	r3, r7
 800317a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800317e:	031a      	lsls	r2, r3, #12
				| ((uint32_t) buff[off + 3] * 16)
 8003180:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003184:	3303      	adds	r3, #3
 8003186:	3370      	adds	r3, #112	@ 0x70
 8003188:	443b      	add	r3, r7
 800318a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	4313      	orrs	r3, r2
				| ((uint32_t) buff[off + 4] / 16));
 8003192:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8003196:	3204      	adds	r2, #4
 8003198:	3270      	adds	r2, #112	@ 0x70
 800319a:	443a      	add	r2, r7
 800319c:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 80031a0:	0912      	lsrs	r2, r2, #4
 80031a2:	b2d2      	uxtb	r2, r2
		adc_pres = (uint32_t) (((uint32_t) buff[off + 2] * 4096)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	66bb      	str	r3, [r7, #104]	@ 0x68
		adc_temp = (uint32_t) (((uint32_t) buff[off + 5] * 4096)
 80031a8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80031ac:	3305      	adds	r3, #5
 80031ae:	3370      	adds	r3, #112	@ 0x70
 80031b0:	443b      	add	r3, r7
 80031b2:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80031b6:	031a      	lsls	r2, r3, #12
				| ((uint32_t) buff[off + 6] * 16)
 80031b8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80031bc:	3306      	adds	r3, #6
 80031be:	3370      	adds	r3, #112	@ 0x70
 80031c0:	443b      	add	r3, r7
 80031c2:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	4313      	orrs	r3, r2
				| ((uint32_t) buff[off + 7] / 16));
 80031ca:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80031ce:	3207      	adds	r2, #7
 80031d0:	3270      	adds	r2, #112	@ 0x70
 80031d2:	443a      	add	r2, r7
 80031d4:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 80031d8:	0912      	lsrs	r2, r2, #4
 80031da:	b2d2      	uxtb	r2, r2
		adc_temp = (uint32_t) (((uint32_t) buff[off + 5] * 4096)
 80031dc:	4313      	orrs	r3, r2
 80031de:	667b      	str	r3, [r7, #100]	@ 0x64
		adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256)
 80031e0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80031e4:	3308      	adds	r3, #8
 80031e6:	3370      	adds	r3, #112	@ 0x70
 80031e8:	443b      	add	r3, r7
 80031ea:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80031ee:	021b      	lsls	r3, r3, #8
 80031f0:	b29b      	uxth	r3, r3
				| (uint32_t) buff[off + 9]);
 80031f2:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80031f6:	3209      	adds	r2, #9
 80031f8:	3270      	adds	r2, #112	@ 0x70
 80031fa:	443a      	add	r2, r7
 80031fc:	f812 2c48 	ldrb.w	r2, [r2, #-72]
		adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256)
 8003200:	4313      	orrs	r3, r2
 8003202:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
		adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4
 8003206:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800320a:	330d      	adds	r3, #13
 800320c:	3370      	adds	r3, #112	@ 0x70
 800320e:	443b      	add	r3, r7
 8003210:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	b29b      	uxth	r3, r3
				| (((uint32_t) buff[off + 14]) / 64));
 8003218:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800321c:	320e      	adds	r2, #14
 800321e:	3270      	adds	r2, #112	@ 0x70
 8003220:	443a      	add	r2, r7
 8003222:	f812 2c48 	ldrb.w	r2, [r2, #-72]
		adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4
 8003226:	0992      	lsrs	r2, r2, #6
 8003228:	b2d2      	uxtb	r2, r2
 800322a:	4313      	orrs	r3, r2
 800322c:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
		adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4
 8003230:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003234:	330f      	adds	r3, #15
 8003236:	3370      	adds	r3, #112	@ 0x70
 8003238:	443b      	add	r3, r7
 800323a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	b29b      	uxth	r3, r3
				| (((uint32_t) buff[off + 16]) / 64));
 8003242:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8003246:	3210      	adds	r2, #16
 8003248:	3270      	adds	r2, #112	@ 0x70
 800324a:	443a      	add	r2, r7
 800324c:	f812 2c48 	ldrb.w	r2, [r2, #-72]
		adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4
 8003250:	0992      	lsrs	r2, r2, #6
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	4313      	orrs	r3, r2
 8003256:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		gas_range_l = buff[off + 14] & BME68X_GAS_RANGE_MSK;
 800325a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800325e:	330e      	adds	r3, #14
 8003260:	3370      	adds	r3, #112	@ 0x70
 8003262:	443b      	add	r3, r7
 8003264:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8003268:	f003 030f 	and.w	r3, r3, #15
 800326c:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
		gas_range_h = buff[off + 16] & BME68X_GAS_RANGE_MSK;
 8003270:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003274:	3310      	adds	r3, #16
 8003276:	3370      	adds	r3, #112	@ 0x70
 8003278:	443b      	add	r3, r7
 800327a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
		if (dev->variant_id == BME68X_VARIANT_GAS_HIGH) {
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d13a      	bne.n	8003304 <read_all_field_data+0x29a>
			data[i]->status |= buff[off + 16] & BME68X_GASM_VALID_MSK;
 800328e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	4413      	add	r3, r2
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	b25a      	sxtb	r2, r3
 800329e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80032a2:	3310      	adds	r3, #16
 80032a4:	3370      	adds	r3, #112	@ 0x70
 80032a6:	443b      	add	r3, r7
 80032a8:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80032ac:	b25b      	sxtb	r3, r3
 80032ae:	f003 0320 	and.w	r3, r3, #32
 80032b2:	b25b      	sxtb	r3, r3
 80032b4:	4313      	orrs	r3, r2
 80032b6:	b259      	sxtb	r1, r3
 80032b8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	4413      	add	r3, r2
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	b2ca      	uxtb	r2, r1
 80032c6:	701a      	strb	r2, [r3, #0]
			data[i]->status |= buff[off + 16] & BME68X_HEAT_STAB_MSK;
 80032c8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	4413      	add	r3, r2
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	b25a      	sxtb	r2, r3
 80032d8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80032dc:	3310      	adds	r3, #16
 80032de:	3370      	adds	r3, #112	@ 0x70
 80032e0:	443b      	add	r3, r7
 80032e2:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80032e6:	b25b      	sxtb	r3, r3
 80032e8:	f003 0310 	and.w	r3, r3, #16
 80032ec:	b25b      	sxtb	r3, r3
 80032ee:	4313      	orrs	r3, r2
 80032f0:	b259      	sxtb	r1, r3
 80032f2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	4413      	add	r3, r2
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	b2ca      	uxtb	r2, r1
 8003300:	701a      	strb	r2, [r3, #0]
 8003302:	e039      	b.n	8003378 <read_all_field_data+0x30e>
		} else {
			data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
 8003304:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	4413      	add	r3, r2
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	b25a      	sxtb	r2, r3
 8003314:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003318:	330e      	adds	r3, #14
 800331a:	3370      	adds	r3, #112	@ 0x70
 800331c:	443b      	add	r3, r7
 800331e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8003322:	b25b      	sxtb	r3, r3
 8003324:	f003 0320 	and.w	r3, r3, #32
 8003328:	b25b      	sxtb	r3, r3
 800332a:	4313      	orrs	r3, r2
 800332c:	b259      	sxtb	r1, r3
 800332e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	4413      	add	r3, r2
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	b2ca      	uxtb	r2, r1
 800333c:	701a      	strb	r2, [r3, #0]
			data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
 800333e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	4413      	add	r3, r2
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	b25a      	sxtb	r2, r3
 800334e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003352:	330e      	adds	r3, #14
 8003354:	3370      	adds	r3, #112	@ 0x70
 8003356:	443b      	add	r3, r7
 8003358:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800335c:	b25b      	sxtb	r3, r3
 800335e:	f003 0310 	and.w	r3, r3, #16
 8003362:	b25b      	sxtb	r3, r3
 8003364:	4313      	orrs	r3, r2
 8003366:	b259      	sxtb	r1, r3
 8003368:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	4413      	add	r3, r2
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	b2ca      	uxtb	r2, r1
 8003376:	701a      	strb	r2, [r3, #0]
		}

		data[i]->idac = set_val[data[i]->gas_index];
 8003378:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	4413      	add	r3, r2
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	785b      	ldrb	r3, [r3, #1]
 8003386:	4619      	mov	r1, r3
 8003388:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	4413      	add	r3, r2
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f101 0270 	add.w	r2, r1, #112	@ 0x70
 8003398:	443a      	add	r2, r7
 800339a:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 800339e:	711a      	strb	r2, [r3, #4]
		data[i]->res_heat = set_val[10 + data[i]->gas_index];
 80033a0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	4413      	add	r3, r2
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	785b      	ldrb	r3, [r3, #1]
 80033ae:	f103 020a 	add.w	r2, r3, #10
 80033b2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	440b      	add	r3, r1
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	3270      	adds	r2, #112	@ 0x70
 80033c0:	443a      	add	r2, r7
 80033c2:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 80033c6:	70da      	strb	r2, [r3, #3]
		data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 80033c8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	4413      	add	r3, r2
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	785b      	ldrb	r3, [r3, #1]
 80033d6:	f103 0214 	add.w	r2, r3, #20
 80033da:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	440b      	add	r3, r1
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3270      	adds	r2, #112	@ 0x70
 80033e8:	443a      	add	r2, r7
 80033ea:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 80033ee:	715a      	strb	r2, [r3, #5]
		data[i]->temperature = calc_temperature(adc_temp, dev);
 80033f0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	4413      	add	r3, r2
 80033fa:	681c      	ldr	r4, [r3, #0]
 80033fc:	6839      	ldr	r1, [r7, #0]
 80033fe:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003400:	f7ff f8aa 	bl	8002558 <calc_temperature>
 8003404:	eef0 7a40 	vmov.f32	s15, s0
 8003408:	edc4 7a03 	vstr	s15, [r4, #12]
		data[i]->pressure = calc_pressure(adc_pres, dev);
 800340c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	4413      	add	r3, r2
 8003416:	681c      	ldr	r4, [r3, #0]
 8003418:	6839      	ldr	r1, [r7, #0]
 800341a:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800341c:	f7ff f922 	bl	8002664 <calc_pressure>
 8003420:	eef0 7a40 	vmov.f32	s15, s0
 8003424:	edc4 7a04 	vstr	s15, [r4, #16]
		data[i]->humidity = calc_humidity(adc_hum, dev);
 8003428:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	4413      	add	r3, r2
 8003432:	681c      	ldr	r4, [r3, #0]
 8003434:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8003438:	6839      	ldr	r1, [r7, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff fa54 	bl	80028e8 <calc_humidity>
 8003440:	eef0 7a40 	vmov.f32	s15, s0
 8003444:	edc4 7a05 	vstr	s15, [r4, #20]
		if (dev->variant_id == BME68X_VARIANT_GAS_HIGH) {
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d112      	bne.n	8003476 <read_all_field_data+0x40c>
			data[i]->gas_resistance = calc_gas_resistance_high(adc_gas_res_high,
 8003450:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	4413      	add	r3, r2
 800345a:	681c      	ldr	r4, [r3, #0]
 800345c:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8003460:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8003464:	4611      	mov	r1, r2
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff fbac 	bl	8002bc4 <calc_gas_resistance_high>
 800346c:	eef0 7a40 	vmov.f32	s15, s0
 8003470:	edc4 7a06 	vstr	s15, [r4, #24]
 8003474:	e011      	b.n	800349a <read_all_field_data+0x430>
					gas_range_h);
		} else {
			data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low,
 8003476:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	4413      	add	r3, r2
 8003480:	681c      	ldr	r4, [r3, #0]
 8003482:	f897 105d 	ldrb.w	r1, [r7, #93]	@ 0x5d
 8003486:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff faf7 	bl	8002a80 <calc_gas_resistance_low>
 8003492:	eef0 7a40 	vmov.f32	s15, s0
 8003496:	edc4 7a06 	vstr	s15, [r4, #24]
	for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++) {
 800349a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800349e:	3301      	adds	r3, #1
 80034a0:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80034a4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d804      	bhi.n	80034b6 <read_all_field_data+0x44c>
 80034ac:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f43f ae28 	beq.w	8003106 <read_all_field_data+0x9c>
					gas_range_l, dev);
		}
	}

	return rslt;
 80034b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3774      	adds	r7, #116	@ 0x74
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd90      	pop	{r4, r7, pc}

080034c2 <set_mem_page>:

/* This internal API is used to switch between SPI memory pages */
static int8_t set_mem_page(uint8_t reg_addr, struct bme68x_dev *dev)
{
 80034c2:	b590      	push	{r4, r7, lr}
 80034c4:	b085      	sub	sp, #20
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	4603      	mov	r3, r0
 80034ca:	6039      	str	r1, [r7, #0]
 80034cc:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 80034ce:	6838      	ldr	r0, [r7, #0]
 80034d0:	f000 f8b8 	bl	8003644 <null_ptr_check>
 80034d4:	4603      	mov	r3, r0
 80034d6:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME68X_OK) {
 80034d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d14f      	bne.n	8003580 <set_mem_page+0xbe>
		if (reg_addr > 0x7f) {
 80034e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	da02      	bge.n	80034ee <set_mem_page+0x2c>
			mem_page = BME68X_MEM_PAGE1;
 80034e8:	2300      	movs	r3, #0
 80034ea:	73bb      	strb	r3, [r7, #14]
 80034ec:	e001      	b.n	80034f2 <set_mem_page+0x30>
		} else {
			mem_page = BME68X_MEM_PAGE0;
 80034ee:	2310      	movs	r3, #16
 80034f0:	73bb      	strb	r3, [r7, #14]
		}

		if (mem_page != dev->mem_page) {
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	7b5b      	ldrb	r3, [r3, #13]
 80034f6:	7bba      	ldrb	r2, [r7, #14]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d041      	beq.n	8003580 <set_mem_page+0xbe>
			dev->mem_page = mem_page;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	7bba      	ldrb	r2, [r7, #14]
 8003500:	735a      	strb	r2, [r3, #13]
			dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK,
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f107 010d 	add.w	r1, r7, #13
 800350e:	2201      	movs	r2, #1
 8003510:	20f3      	movs	r0, #243	@ 0xf3
 8003512:	47a0      	blx	r4
 8003514:	4603      	mov	r3, r0
 8003516:	461a      	mov	r2, r3
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
					&reg, 1, dev->intf_ptr);
			if (dev->intf_rslt != 0) {
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <set_mem_page+0x6a>
				rslt = BME68X_E_COM_FAIL;
 8003528:	23fe      	movs	r3, #254	@ 0xfe
 800352a:	73fb      	strb	r3, [r7, #15]
			}

			if (rslt == BME68X_OK) {
 800352c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d125      	bne.n	8003580 <set_mem_page+0xbe>
				reg = reg & (~BME68X_MEM_PAGE_MSK);
 8003534:	7b7b      	ldrb	r3, [r7, #13]
 8003536:	f023 0310 	bic.w	r3, r3, #16
 800353a:	b2db      	uxtb	r3, r3
 800353c:	737b      	strb	r3, [r7, #13]
				reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	7b5b      	ldrb	r3, [r3, #13]
 8003542:	b25b      	sxtb	r3, r3
 8003544:	f003 0310 	and.w	r3, r3, #16
 8003548:	b25a      	sxtb	r2, r3
 800354a:	7b7b      	ldrb	r3, [r7, #13]
 800354c:	b25b      	sxtb	r3, r3
 800354e:	4313      	orrs	r3, r2
 8003550:	b25b      	sxtb	r3, r3
 8003552:	b2db      	uxtb	r3, r3
 8003554:	737b      	strb	r3, [r7, #13]
				dev->intf_rslt = dev->write(
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f107 010d 	add.w	r1, r7, #13
 8003562:	2201      	movs	r2, #1
 8003564:	2073      	movs	r0, #115	@ 0x73
 8003566:	47a0      	blx	r4
 8003568:	4603      	mov	r3, r0
 800356a:	461a      	mov	r2, r3
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
						BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1,
						dev->intf_ptr);
				if (dev->intf_rslt != 0) {
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <set_mem_page+0xbe>
					rslt = BME68X_E_COM_FAIL;
 800357c:	23fe      	movs	r3, #254	@ 0xfe
 800357e:	73fb      	strb	r3, [r7, #15]
				}
			}
		}
	}

	return rslt;
 8003580:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3714      	adds	r7, #20
 8003588:	46bd      	mov	sp, r7
 800358a:	bd90      	pop	{r4, r7, pc}

0800358c <get_mem_page>:

/* This internal API is used to get the current SPI memory page */
static int8_t get_mem_page(struct bme68x_dev *dev)
{
 800358c:	b590      	push	{r4, r7, lr}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f855 	bl	8003644 <null_ptr_check>
 800359a:	4603      	mov	r3, r0
 800359c:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME68X_OK) {
 800359e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d11b      	bne.n	80035de <get_mem_page+0x52>
		dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK,
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f107 010e 	add.w	r1, r7, #14
 80035b2:	2201      	movs	r2, #1
 80035b4:	20f3      	movs	r0, #243	@ 0xf3
 80035b6:	47a0      	blx	r4
 80035b8:	4603      	mov	r3, r0
 80035ba:	461a      	mov	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
				&reg, 1, dev->intf_ptr);
		if (dev->intf_rslt != 0) {
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <get_mem_page+0x46>
			rslt = BME68X_E_COM_FAIL;
 80035cc:	23fe      	movs	r3, #254	@ 0xfe
 80035ce:	73fb      	strb	r3, [r7, #15]
 80035d0:	e005      	b.n	80035de <get_mem_page+0x52>
		} else {
			dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 80035d2:	7bbb      	ldrb	r3, [r7, #14]
 80035d4:	f003 0310 	and.w	r3, r3, #16
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	735a      	strb	r2, [r3, #13]
		}
	}

	return rslt;
 80035de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd90      	pop	{r4, r7, pc}

080035ea <boundary_check>:

/* This internal API is used to limit the max value of a parameter */
static int8_t boundary_check(uint8_t *value, uint8_t max,
		struct bme68x_dev *dev)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b086      	sub	sp, #24
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	60f8      	str	r0, [r7, #12]
 80035f2:	460b      	mov	r3, r1
 80035f4:	607a      	str	r2, [r7, #4]
 80035f6:	72fb      	strb	r3, [r7, #11]
	int8_t rslt;

	rslt = null_ptr_check(dev);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f823 	bl	8003644 <null_ptr_check>
 80035fe:	4603      	mov	r3, r0
 8003600:	75fb      	strb	r3, [r7, #23]
	if ((value != NULL) && (rslt == BME68X_OK)) {
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d015      	beq.n	8003634 <boundary_check+0x4a>
 8003608:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d111      	bne.n	8003634 <boundary_check+0x4a>
		/* Check if value is above maximum value */
		if (*value > max) {
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	7afa      	ldrb	r2, [r7, #11]
 8003616:	429a      	cmp	r2, r3
 8003618:	d20e      	bcs.n	8003638 <boundary_check+0x4e>
			/* Auto correct the invalid value to maximum value */
			*value = max;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	7afa      	ldrb	r2, [r7, #11]
 800361e:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME68X_I_PARAM_CORR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8003626:	f043 0301 	orr.w	r3, r3, #1
 800362a:	b2da      	uxtb	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
		if (*value > max) {
 8003632:	e001      	b.n	8003638 <boundary_check+0x4e>
		}
	} else {
		rslt = BME68X_E_NULL_PTR;
 8003634:	23ff      	movs	r3, #255	@ 0xff
 8003636:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8003638:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3718      	adds	r7, #24
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <null_ptr_check>:

/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
	int8_t rslt = BME68X_OK;
 800364c:	2300      	movs	r3, #0
 800364e:	73fb      	strb	r3, [r7, #15]

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00b      	beq.n	800366e <null_ptr_check+0x2a>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365a:	2b00      	cmp	r3, #0
 800365c:	d007      	beq.n	800366e <null_ptr_check+0x2a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <null_ptr_check+0x2a>
			|| (dev->delay_us == NULL)) {
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <null_ptr_check+0x2e>
		/* Device structure pointer is not valid */
		rslt = BME68X_E_NULL_PTR;
 800366e:	23ff      	movs	r3, #255	@ 0xff
 8003670:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8003672:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
	...

08003684 <set_conf>:

/* This internal API is used to set heater configurations */
static int8_t set_conf(const struct bme68x_heatr_conf *conf, uint8_t op_mode,
		uint8_t *nb_conv, struct bme68x_dev *dev)
{
 8003684:	b590      	push	{r4, r7, lr}
 8003686:	b093      	sub	sp, #76	@ 0x4c
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	607a      	str	r2, [r7, #4]
 800368e:	603b      	str	r3, [r7, #0]
 8003690:	460b      	mov	r3, r1
 8003692:	72fb      	strb	r3, [r7, #11]
	int8_t rslt = BME68X_OK;
 8003694:	2300      	movs	r3, #0
 8003696:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	uint8_t i;
	uint8_t shared_dur;
	uint8_t write_len = 0;
 800369a:	2300      	movs	r3, #0
 800369c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
	uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 80036a0:	236e      	movs	r3, #110	@ 0x6e
 80036a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80036a6:	4aa1      	ldr	r2, [pc, #644]	@ (800392c <set_conf+0x2a8>)
 80036a8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80036ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80036ae:	c303      	stmia	r3!, {r0, r1}
 80036b0:	801a      	strh	r2, [r3, #0]
	uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80036b2:	4a9e      	ldr	r2, [pc, #632]	@ (800392c <set_conf+0x2a8>)
 80036b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80036ba:	c303      	stmia	r3!, {r0, r1}
 80036bc:	801a      	strh	r2, [r3, #0]
	uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80036be:	4a9b      	ldr	r2, [pc, #620]	@ (800392c <set_conf+0x2a8>)
 80036c0:	f107 0320 	add.w	r3, r7, #32
 80036c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80036c6:	c303      	stmia	r3!, {r0, r1}
 80036c8:	801a      	strh	r2, [r3, #0]
	uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80036ca:	4a98      	ldr	r2, [pc, #608]	@ (800392c <set_conf+0x2a8>)
 80036cc:	f107 0314 	add.w	r3, r7, #20
 80036d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80036d2:	c303      	stmia	r3!, {r0, r1}
 80036d4:	801a      	strh	r2, [r3, #0]

	switch (op_mode) {
 80036d6:	7afb      	ldrb	r3, [r7, #11]
 80036d8:	2b03      	cmp	r3, #3
 80036da:	d024      	beq.n	8003726 <set_conf+0xa2>
 80036dc:	2b03      	cmp	r3, #3
 80036de:	f300 80f9 	bgt.w	80038d4 <set_conf+0x250>
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d002      	beq.n	80036ec <set_conf+0x68>
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d07c      	beq.n	80037e4 <set_conf+0x160>
 80036ea:	e0f3      	b.n	80038d4 <set_conf+0x250>
	case BME68X_FORCED_MODE:
		rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 80036ec:	235a      	movs	r3, #90	@ 0x5a
 80036ee:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
		rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	885b      	ldrh	r3, [r3, #2]
 80036f6:	6839      	ldr	r1, [r7, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff fa9d 	bl	8002c38 <calc_res_heat>
 80036fe:	4603      	mov	r3, r0
 8003700:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
		gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 8003704:	2364      	movs	r3, #100	@ 0x64
 8003706:	f887 3020 	strb.w	r3, [r7, #32]
		gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	889b      	ldrh	r3, [r3, #4]
 800370e:	4618      	mov	r0, r3
 8003710:	f7ff fb42 	bl	8002d98 <calc_gas_wait>
 8003714:	4603      	mov	r3, r0
 8003716:	753b      	strb	r3, [r7, #20]
		(*nb_conv) = 0;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	701a      	strb	r2, [r3, #0]
		write_len = 1;
 800371e:	2301      	movs	r3, #1
 8003720:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
		break;
 8003724:	e0db      	b.n	80038de <set_conf+0x25a>
	case BME68X_SEQUENTIAL_MODE:
		if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof)) {
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <set_conf+0xb2>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d103      	bne.n	800373e <set_conf+0xba>
			rslt = BME68X_E_NULL_PTR;
 8003736:	23ff      	movs	r3, #255	@ 0xff
 8003738:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			break;
 800373c:	e0cf      	b.n	80038de <set_conf+0x25a>
		}

		for (i = 0; i < conf->profile_len; i++) {
 800373e:	2300      	movs	r3, #0
 8003740:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8003744:	e03f      	b.n	80037c6 <set_conf+0x142>
			rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8003746:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800374a:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800374e:	325a      	adds	r2, #90	@ 0x5a
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	3348      	adds	r3, #72	@ 0x48
 8003754:	443b      	add	r3, r7
 8003756:	f803 2c10 	strb.w	r2, [r3, #-16]
			rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	689a      	ldr	r2, [r3, #8]
 800375e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	4413      	add	r3, r2
 8003766:	881b      	ldrh	r3, [r3, #0]
 8003768:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 800376c:	6839      	ldr	r1, [r7, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff fa62 	bl	8002c38 <calc_res_heat>
 8003774:	4603      	mov	r3, r0
 8003776:	461a      	mov	r2, r3
 8003778:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 800377c:	443b      	add	r3, r7
 800377e:	f803 2c1c 	strb.w	r2, [r3, #-28]
			gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8003782:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003786:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800378a:	3264      	adds	r2, #100	@ 0x64
 800378c:	b2d2      	uxtb	r2, r2
 800378e:	3348      	adds	r3, #72	@ 0x48
 8003790:	443b      	add	r3, r7
 8003792:	f803 2c28 	strb.w	r2, [r3, #-40]
			gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	4413      	add	r3, r2
 80037a2:	881b      	ldrh	r3, [r3, #0]
 80037a4:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff faf5 	bl	8002d98 <calc_gas_wait>
 80037ae:	4603      	mov	r3, r0
 80037b0:	461a      	mov	r2, r3
 80037b2:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 80037b6:	443b      	add	r3, r7
 80037b8:	f803 2c34 	strb.w	r2, [r3, #-52]
		for (i = 0; i < conf->profile_len; i++) {
 80037bc:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80037c0:	3301      	adds	r3, #1
 80037c2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	7c1b      	ldrb	r3, [r3, #16]
 80037ca:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d3b9      	bcc.n	8003746 <set_conf+0xc2>
		}

		(*nb_conv) = conf->profile_len;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	7c1a      	ldrb	r2, [r3, #16]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	701a      	strb	r2, [r3, #0]
		write_len = conf->profile_len;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	7c1b      	ldrb	r3, [r3, #16]
 80037de:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
		break;
 80037e2:	e07c      	b.n	80038de <set_conf+0x25a>
	case BME68X_PARALLEL_MODE:
		if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof)) {
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <set_conf+0x170>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d103      	bne.n	80037fc <set_conf+0x178>
			rslt = BME68X_E_NULL_PTR;
 80037f4:	23ff      	movs	r3, #255	@ 0xff
 80037f6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			break;
 80037fa:	e070      	b.n	80038de <set_conf+0x25a>
		}

		if (conf->shared_heatr_dur == 0) {
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8a5b      	ldrh	r3, [r3, #18]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d102      	bne.n	800380a <set_conf+0x186>
			rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
 8003804:	2303      	movs	r3, #3
 8003806:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		}

		for (i = 0; i < conf->profile_len; i++) {
 800380a:	2300      	movs	r3, #0
 800380c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8003810:	e03a      	b.n	8003888 <set_conf+0x204>
			rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8003812:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003816:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800381a:	325a      	adds	r2, #90	@ 0x5a
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	3348      	adds	r3, #72	@ 0x48
 8003820:	443b      	add	r3, r7
 8003822:	f803 2c10 	strb.w	r2, [r3, #-16]
			rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	689a      	ldr	r2, [r3, #8]
 800382a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	4413      	add	r3, r2
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 8003838:	6839      	ldr	r1, [r7, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f7ff f9fc 	bl	8002c38 <calc_res_heat>
 8003840:	4603      	mov	r3, r0
 8003842:	461a      	mov	r2, r3
 8003844:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8003848:	443b      	add	r3, r7
 800384a:	f803 2c1c 	strb.w	r2, [r3, #-28]
			gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 800384e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003852:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8003856:	3264      	adds	r2, #100	@ 0x64
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	3348      	adds	r3, #72	@ 0x48
 800385c:	443b      	add	r3, r7
 800385e:	f803 2c28 	strb.w	r2, [r3, #-40]
			gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	4413      	add	r3, r2
 800386e:	881a      	ldrh	r2, [r3, #0]
 8003870:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003874:	b2d2      	uxtb	r2, r2
 8003876:	3348      	adds	r3, #72	@ 0x48
 8003878:	443b      	add	r3, r7
 800387a:	f803 2c34 	strb.w	r2, [r3, #-52]
		for (i = 0; i < conf->profile_len; i++) {
 800387e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003882:	3301      	adds	r3, #1
 8003884:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	7c1b      	ldrb	r3, [r3, #16]
 800388c:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8003890:	429a      	cmp	r2, r3
 8003892:	d3be      	bcc.n	8003812 <set_conf+0x18e>
		}

		(*nb_conv) = conf->profile_len;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	7c1a      	ldrb	r2, [r3, #16]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	701a      	strb	r2, [r3, #0]
		write_len = conf->profile_len;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	7c1b      	ldrb	r3, [r3, #16]
 80038a0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
		shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8a5b      	ldrh	r3, [r3, #18]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 f841 	bl	8003930 <calc_heatr_dur_shared>
 80038ae:	4603      	mov	r3, r0
 80038b0:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
		if (rslt == BME68X_OK) {
 80038b4:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10f      	bne.n	80038dc <set_conf+0x258>
			rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1,
 80038bc:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80038c0:	f107 0043 	add.w	r0, r7, #67	@ 0x43
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f7fe f9ae 	bl	8001c28 <bme68x_set_regs>
 80038cc:	4603      	mov	r3, r0
 80038ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
					dev);
		}

		break;
 80038d2:	e003      	b.n	80038dc <set_conf+0x258>
	default:
		rslt = BME68X_W_DEFINE_OP_MODE;
 80038d4:	2301      	movs	r3, #1
 80038d6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80038da:	e000      	b.n	80038de <set_conf+0x25a>
		break;
 80038dc:	bf00      	nop
	}

	if (rslt == BME68X_OK) {
 80038de:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10b      	bne.n	80038fe <set_conf+0x27a>
		rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 80038e6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80038ea:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80038ee:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	f7fe f998 	bl	8001c28 <bme68x_set_regs>
 80038f8:	4603      	mov	r3, r0
 80038fa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	}

	if (rslt == BME68X_OK) {
 80038fe:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10b      	bne.n	800391e <set_conf+0x29a>
		rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 8003906:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800390a:	f107 0114 	add.w	r1, r7, #20
 800390e:	f107 0020 	add.w	r0, r7, #32
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	f7fe f988 	bl	8001c28 <bme68x_set_regs>
 8003918:	4603      	mov	r3, r0
 800391a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	}

	return rslt;
 800391e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 8003922:	4618      	mov	r0, r3
 8003924:	374c      	adds	r7, #76	@ 0x4c
 8003926:	46bd      	mov	sp, r7
 8003928:	bd90      	pop	{r4, r7, pc}
 800392a:	bf00      	nop
 800392c:	080114e8 	.word	0x080114e8

08003930 <calc_heatr_dur_shared>:

/* This internal API is used to calculate the register value for
 * shared heater duration */
static uint8_t calc_heatr_dur_shared(uint16_t dur)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	80fb      	strh	r3, [r7, #6]
	uint8_t factor = 0;
 800393a:	2300      	movs	r3, #0
 800393c:	73fb      	strb	r3, [r7, #15]
	uint8_t heatdurval;

	if (dur >= 0x783) {
 800393e:	88fb      	ldrh	r3, [r7, #6]
 8003940:	f240 7282 	movw	r2, #1922	@ 0x782
 8003944:	4293      	cmp	r3, r2
 8003946:	d902      	bls.n	800394e <calc_heatr_dur_shared+0x1e>
		heatdurval = 0xff; /* Max duration */
 8003948:	23ff      	movs	r3, #255	@ 0xff
 800394a:	73bb      	strb	r3, [r7, #14]
 800394c:	e01d      	b.n	800398a <calc_heatr_dur_shared+0x5a>
	} else {
		/* Step size of 0.477ms */
		dur = (uint16_t) (((uint32_t) dur * 1000) / 477);
 800394e:	88fb      	ldrh	r3, [r7, #6]
 8003950:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003954:	fb03 f202 	mul.w	r2, r3, r2
 8003958:	4b0f      	ldr	r3, [pc, #60]	@ (8003998 <calc_heatr_dur_shared+0x68>)
 800395a:	fba3 1302 	umull	r1, r3, r3, r2
 800395e:	1ad2      	subs	r2, r2, r3
 8003960:	0852      	lsrs	r2, r2, #1
 8003962:	4413      	add	r3, r2
 8003964:	0a1b      	lsrs	r3, r3, #8
 8003966:	80fb      	strh	r3, [r7, #6]
		while (dur > 0x3F) {
 8003968:	e005      	b.n	8003976 <calc_heatr_dur_shared+0x46>
			dur = dur >> 2;
 800396a:	88fb      	ldrh	r3, [r7, #6]
 800396c:	089b      	lsrs	r3, r3, #2
 800396e:	80fb      	strh	r3, [r7, #6]
			factor += 1;
 8003970:	7bfb      	ldrb	r3, [r7, #15]
 8003972:	3301      	adds	r3, #1
 8003974:	73fb      	strb	r3, [r7, #15]
		while (dur > 0x3F) {
 8003976:	88fb      	ldrh	r3, [r7, #6]
 8003978:	2b3f      	cmp	r3, #63	@ 0x3f
 800397a:	d8f6      	bhi.n	800396a <calc_heatr_dur_shared+0x3a>
		}

		heatdurval = (uint8_t) (dur + (factor * 64));
 800397c:	88fb      	ldrh	r3, [r7, #6]
 800397e:	b2da      	uxtb	r2, r3
 8003980:	7bfb      	ldrb	r3, [r7, #15]
 8003982:	019b      	lsls	r3, r3, #6
 8003984:	b2db      	uxtb	r3, r3
 8003986:	4413      	add	r3, r2
 8003988:	73bb      	strb	r3, [r7, #14]
	}

	return heatdurval;
 800398a:	7bbb      	ldrb	r3, [r7, #14]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	12c8b89f 	.word	0x12c8b89f

0800399c <sort_sensor_data>:

/* This internal API is used sort the sensor data */
static void sort_sensor_data(uint8_t low_index, uint8_t high_index,
		struct bme68x_data *field[])
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	603a      	str	r2, [r7, #0]
 80039a6:	71fb      	strb	r3, [r7, #7]
 80039a8:	460b      	mov	r3, r1
 80039aa:	71bb      	strb	r3, [r7, #6]
	int16_t meas_index1;
	int16_t meas_index2;

	meas_index1 = (int16_t) field[low_index]->meas_index;
 80039ac:	79fb      	ldrb	r3, [r7, #7]
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	4413      	add	r3, r2
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	789b      	ldrb	r3, [r3, #2]
 80039b8:	81fb      	strh	r3, [r7, #14]
	meas_index2 = (int16_t) field[high_index]->meas_index;
 80039ba:	79bb      	ldrb	r3, [r7, #6]
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	4413      	add	r3, r2
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	789b      	ldrb	r3, [r3, #2]
 80039c6:	81bb      	strh	r3, [r7, #12]
	if ((field[low_index]->status & BME68X_NEW_DATA_MSK)
 80039c8:	79fb      	ldrb	r3, [r7, #7]
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	4413      	add	r3, r2
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	b25b      	sxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	da21      	bge.n	8003a1e <sort_sensor_data+0x82>
			&& (field[high_index]->status & BME68X_NEW_DATA_MSK)) {
 80039da:	79bb      	ldrb	r3, [r7, #6]
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	4413      	add	r3, r2
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	b25b      	sxtb	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	da18      	bge.n	8003a1e <sort_sensor_data+0x82>
		int16_t diff = meas_index2 - meas_index1;
 80039ec:	89ba      	ldrh	r2, [r7, #12]
 80039ee:	89fb      	ldrh	r3, [r7, #14]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	817b      	strh	r3, [r7, #10]
		if (((diff > -3) && (diff < 0)) || (diff > 2)) {
 80039f6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80039fa:	f113 0f02 	cmn.w	r3, #2
 80039fe:	db03      	blt.n	8003a08 <sort_sensor_data+0x6c>
 8003a00:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	db03      	blt.n	8003a10 <sort_sensor_data+0x74>
 8003a08:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	dd16      	ble.n	8003a3e <sort_sensor_data+0xa2>
			swap_fields(low_index, high_index, field);
 8003a10:	79b9      	ldrb	r1, [r7, #6]
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 f816 	bl	8003a48 <swap_fields>
			&& (field[high_index]->status & BME68X_NEW_DATA_MSK)) {
 8003a1c:	e00f      	b.n	8003a3e <sort_sensor_data+0xa2>
		}
	} else if (field[high_index]->status & BME68X_NEW_DATA_MSK) {
 8003a1e:	79bb      	ldrb	r3, [r7, #6]
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	4413      	add	r3, r2
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	b25b      	sxtb	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	da07      	bge.n	8003a40 <sort_sensor_data+0xa4>
		swap_fields(low_index, high_index, field);
 8003a30:	79b9      	ldrb	r1, [r7, #6]
 8003a32:	79fb      	ldrb	r3, [r7, #7]
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 f806 	bl	8003a48 <swap_fields>
	 *         - diff > 2, case 4.
	 *
	 *     Here the limits of -3 and 2 derive from the fact that there are 3 fields.
	 *     These values decrease or increase respectively if the number of fields increases.
	 */
}
 8003a3c:	e000      	b.n	8003a40 <sort_sensor_data+0xa4>
			&& (field[high_index]->status & BME68X_NEW_DATA_MSK)) {
 8003a3e:	bf00      	nop
}
 8003a40:	bf00      	nop
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <swap_fields>:

/* This internal API is used sort the sensor data */
static void swap_fields(uint8_t index1, uint8_t index2,
		struct bme68x_data *field[])
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	603a      	str	r2, [r7, #0]
 8003a52:	71fb      	strb	r3, [r7, #7]
 8003a54:	460b      	mov	r3, r1
 8003a56:	71bb      	strb	r3, [r7, #6]
	struct bme68x_data *temp;

	temp = field[index1];
 8003a58:	79fb      	ldrb	r3, [r7, #7]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	4413      	add	r3, r2
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	60fb      	str	r3, [r7, #12]
	field[index1] = field[index2];
 8003a64:	79bb      	ldrb	r3, [r7, #6]
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	441a      	add	r2, r3
 8003a6c:	79fb      	ldrb	r3, [r7, #7]
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	6839      	ldr	r1, [r7, #0]
 8003a72:	440b      	add	r3, r1
 8003a74:	6812      	ldr	r2, [r2, #0]
 8003a76:	601a      	str	r2, [r3, #0]
	field[index2] = temp;
 8003a78:	79bb      	ldrb	r3, [r7, #6]
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	4413      	add	r3, r2
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	601a      	str	r2, [r3, #0]
}
 8003a84:	bf00      	nop
 8003a86:	3714      	adds	r7, #20
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <get_calib_data>:
	return rslt;
}

/* This internal API is used to read the calibration coefficients */
static int8_t get_calib_data(struct bme68x_dev *dev)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b08e      	sub	sp, #56	@ 0x38
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t coeff_array[BME68X_LEN_COEFF_ALL];

	rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1,
 8003a98:	f107 010c 	add.w	r1, r7, #12
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2217      	movs	r2, #23
 8003aa0:	208a      	movs	r0, #138	@ 0x8a
 8003aa2:	f7fe f951 	bl	8001d48 <bme68x_get_regs>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			dev);
	if (rslt == BME68X_OK) {
 8003aac:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10b      	bne.n	8003acc <get_calib_data+0x3c>
		rslt = bme68x_get_regs(BME68X_REG_COEFF2,
 8003ab4:	f107 030c 	add.w	r3, r7, #12
 8003ab8:	f103 0117 	add.w	r1, r3, #23
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	220e      	movs	r2, #14
 8003ac0:	20e1      	movs	r0, #225	@ 0xe1
 8003ac2:	f7fe f941 	bl	8001d48 <bme68x_get_regs>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				&coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
	}

	if (rslt == BME68X_OK) {
 8003acc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10b      	bne.n	8003aec <get_calib_data+0x5c>
		rslt = bme68x_get_regs(BME68X_REG_COEFF3,
 8003ad4:	f107 030c 	add.w	r3, r7, #12
 8003ad8:	f103 0125 	add.w	r1, r3, #37	@ 0x25
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2205      	movs	r2, #5
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	f7fe f931 	bl	8001d48 <bme68x_get_regs>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				&coeff_array[BME68X_LEN_COEFF1 + BME68X_LEN_COEFF2],
				BME68X_LEN_COEFF3, dev);
	}

	if (rslt == BME68X_OK) {
 8003aec:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f040 80cb 	bne.w	8003c8c <get_calib_data+0x1fc>
		/* Temperature related coefficients */
		dev->calib.par_t1 =
				(uint16_t) (BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T1_MSB],
 8003af6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003afa:	021b      	lsls	r3, r3, #8
 8003afc:	b21a      	sxth	r2, r3
 8003afe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003b02:	b21b      	sxth	r3, r3
 8003b04:	4313      	orrs	r3, r2
 8003b06:	b21b      	sxth	r3, r3
 8003b08:	b29a      	uxth	r2, r3
		dev->calib.par_t1 =
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	83da      	strh	r2, [r3, #30]
						coeff_array[BME68X_IDX_T1_LSB]));
		dev->calib.par_t2 =
				(int16_t) (BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T2_MSB],
 8003b0e:	7b7b      	ldrb	r3, [r7, #13]
 8003b10:	021b      	lsls	r3, r3, #8
 8003b12:	b21a      	sxth	r2, r3
 8003b14:	7b3b      	ldrb	r3, [r7, #12]
 8003b16:	b21b      	sxth	r3, r3
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	b21a      	sxth	r2, r3
		dev->calib.par_t2 =
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	841a      	strh	r2, [r3, #32]
						coeff_array[BME68X_IDX_T2_LSB]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME68X_IDX_T3]);
 8003b20:	7bbb      	ldrb	r3, [r7, #14]
 8003b22:	b25a      	sxtb	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

		/* Pressure related coefficients */
		dev->calib.par_p1 =
				(uint16_t) (BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P1_MSB],
 8003b2a:	7c7b      	ldrb	r3, [r7, #17]
 8003b2c:	021b      	lsls	r3, r3, #8
 8003b2e:	b21a      	sxth	r2, r3
 8003b30:	7c3b      	ldrb	r3, [r7, #16]
 8003b32:	b21b      	sxth	r3, r3
 8003b34:	4313      	orrs	r3, r2
 8003b36:	b21b      	sxth	r3, r3
 8003b38:	b29a      	uxth	r2, r3
		dev->calib.par_p1 =
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	849a      	strh	r2, [r3, #36]	@ 0x24
						coeff_array[BME68X_IDX_P1_LSB]));
		dev->calib.par_p2 =
				(int16_t) (BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P2_MSB],
 8003b3e:	7cfb      	ldrb	r3, [r7, #19]
 8003b40:	021b      	lsls	r3, r3, #8
 8003b42:	b21a      	sxth	r2, r3
 8003b44:	7cbb      	ldrb	r3, [r7, #18]
 8003b46:	b21b      	sxth	r3, r3
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	b21a      	sxth	r2, r3
		dev->calib.par_p2 =
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	84da      	strh	r2, [r3, #38]	@ 0x26
						coeff_array[BME68X_IDX_P2_LSB]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME68X_IDX_P3];
 8003b50:	7d3b      	ldrb	r3, [r7, #20]
 8003b52:	b25a      	sxtb	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		dev->calib.par_p4 =
				(int16_t) (BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB],
 8003b5a:	7dfb      	ldrb	r3, [r7, #23]
 8003b5c:	021b      	lsls	r3, r3, #8
 8003b5e:	b21a      	sxth	r2, r3
 8003b60:	7dbb      	ldrb	r3, [r7, #22]
 8003b62:	b21b      	sxth	r3, r3
 8003b64:	4313      	orrs	r3, r2
 8003b66:	b21a      	sxth	r2, r3
		dev->calib.par_p4 =
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
						coeff_array[BME68X_IDX_P4_LSB]));
		dev->calib.par_p5 =
				(int16_t) (BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P5_MSB],
 8003b6c:	7e7b      	ldrb	r3, [r7, #25]
 8003b6e:	021b      	lsls	r3, r3, #8
 8003b70:	b21a      	sxth	r2, r3
 8003b72:	7e3b      	ldrb	r3, [r7, #24]
 8003b74:	b21b      	sxth	r3, r3
 8003b76:	4313      	orrs	r3, r2
 8003b78:	b21a      	sxth	r2, r3
		dev->calib.par_p5 =
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	859a      	strh	r2, [r3, #44]	@ 0x2c
						coeff_array[BME68X_IDX_P5_LSB]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME68X_IDX_P6]);
 8003b7e:	7efb      	ldrb	r3, [r7, #27]
 8003b80:	b25a      	sxtb	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		dev->calib.par_p7 = (int8_t) (coeff_array[BME68X_IDX_P7]);
 8003b88:	7ebb      	ldrb	r3, [r7, #26]
 8003b8a:	b25a      	sxtb	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		dev->calib.par_p8 =
				(int16_t) (BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB],
 8003b92:	7ffb      	ldrb	r3, [r7, #31]
 8003b94:	021b      	lsls	r3, r3, #8
 8003b96:	b21a      	sxth	r2, r3
 8003b98:	7fbb      	ldrb	r3, [r7, #30]
 8003b9a:	b21b      	sxth	r3, r3
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	b21a      	sxth	r2, r3
		dev->calib.par_p8 =
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	861a      	strh	r2, [r3, #48]	@ 0x30
						coeff_array[BME68X_IDX_P8_LSB]));
		dev->calib.par_p9 =
				(int16_t) (BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P9_MSB],
 8003ba4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003ba8:	021b      	lsls	r3, r3, #8
 8003baa:	b21a      	sxth	r2, r3
 8003bac:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003bb0:	b21b      	sxth	r3, r3
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	b21a      	sxth	r2, r3
		dev->calib.par_p9 =
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	865a      	strh	r2, [r3, #50]	@ 0x32
						coeff_array[BME68X_IDX_P9_LSB]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME68X_IDX_P10]);
 8003bba:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

		/* Humidity related coefficients */
		dev->calib.par_h1 =
				(uint16_t) (((uint16_t) coeff_array[BME68X_IDX_H1_MSB] << 4)
 8003bc4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003bc8:	011b      	lsls	r3, r3, #4
						| (coeff_array[BME68X_IDX_H1_LSB]
 8003bca:	b21a      	sxth	r2, r3
 8003bcc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003bd0:	b21b      	sxth	r3, r3
								& BME68X_BIT_H1_DATA_MSK));
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	b21b      	sxth	r3, r3
						| (coeff_array[BME68X_IDX_H1_LSB]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	b21b      	sxth	r3, r3
				(uint16_t) (((uint16_t) coeff_array[BME68X_IDX_H1_MSB] << 4)
 8003bdc:	b29a      	uxth	r2, r3
		dev->calib.par_h1 =
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	821a      	strh	r2, [r3, #16]
		dev->calib.par_h2 =
				(uint16_t) (((uint16_t) coeff_array[BME68X_IDX_H2_MSB] << 4)
 8003be2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003be6:	011b      	lsls	r3, r3, #4
						| ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 8003be8:	b21a      	sxth	r2, r3
 8003bea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003bee:	091b      	lsrs	r3, r3, #4
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	b21b      	sxth	r3, r3
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	b21b      	sxth	r3, r3
				(uint16_t) (((uint16_t) coeff_array[BME68X_IDX_H2_MSB] << 4)
 8003bf8:	b29a      	uxth	r2, r3
		dev->calib.par_h2 =
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	825a      	strh	r2, [r3, #18]
		dev->calib.par_h3 = (int8_t) coeff_array[BME68X_IDX_H3];
 8003bfe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003c02:	b25a      	sxtb	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	751a      	strb	r2, [r3, #20]
		dev->calib.par_h4 = (int8_t) coeff_array[BME68X_IDX_H4];
 8003c08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c0c:	b25a      	sxtb	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	755a      	strb	r2, [r3, #21]
		dev->calib.par_h5 = (int8_t) coeff_array[BME68X_IDX_H5];
 8003c12:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003c16:	b25a      	sxtb	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	759a      	strb	r2, [r3, #22]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME68X_IDX_H6];
 8003c1c:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	75da      	strb	r2, [r3, #23]
		dev->calib.par_h7 = (int8_t) coeff_array[BME68X_IDX_H7];
 8003c24:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003c28:	b25a      	sxtb	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	761a      	strb	r2, [r3, #24]

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME68X_IDX_GH1];
 8003c2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003c32:	b25a      	sxtb	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	765a      	strb	r2, [r3, #25]
		dev->calib.par_gh2 = (int16_t) (BME68X_CONCAT_BYTES(
 8003c38:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003c3c:	021b      	lsls	r3, r3, #8
 8003c3e:	b21a      	sxth	r2, r3
 8003c40:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003c44:	b21b      	sxth	r3, r3
 8003c46:	4313      	orrs	r3, r2
 8003c48:	b21a      	sxth	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	835a      	strh	r2, [r3, #26]
				coeff_array[BME68X_IDX_GH2_MSB],
				coeff_array[BME68X_IDX_GH2_LSB]));
		dev->calib.par_gh3 = (int8_t) coeff_array[BME68X_IDX_GH3];
 8003c4e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003c52:	b25a      	sxtb	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	771a      	strb	r2, [r3, #28]

		/* Other coefficients */
		dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE]
 8003c58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
				& BME68X_RHRANGE_MSK) / 16);
 8003c5c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	da00      	bge.n	8003c66 <get_calib_data+0x1d6>
 8003c64:	330f      	adds	r3, #15
 8003c66:	111b      	asrs	r3, r3, #4
		dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE]
 8003c68:	b2da      	uxtb	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		dev->calib.res_heat_val = (int8_t) coeff_array[BME68X_IDX_RES_HEAT_VAL];
 8003c70:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8003c74:	b25a      	sxtb	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
		dev->calib.range_sw_err =
				((int8_t) (coeff_array[BME68X_IDX_RANGE_SW_ERR]
 8003c7c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003c80:	b25b      	sxtb	r3, r3
		dev->calib.range_sw_err =
 8003c82:	111b      	asrs	r3, r3, #4
 8003c84:	b25a      	sxtb	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
						& BME68X_RSERROR_MSK)) / 16;
	}

	return rslt;
 8003c8c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3738      	adds	r7, #56	@ 0x38
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <read_variant_id>:

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme68x_dev *dev)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data = 0;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	73bb      	strb	r3, [r7, #14]

	/* Read variant ID information register */
	rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 8003ca4:	f107 010e 	add.w	r1, r7, #14
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	20f0      	movs	r0, #240	@ 0xf0
 8003cae:	f7fe f84b 	bl	8001d48 <bme68x_get_regs>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME68X_OK) {
 8003cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d103      	bne.n	8003cc6 <read_variant_id+0x2e>
		dev->variant_id = reg_data;
 8003cbe:	7bbb      	ldrb	r3, [r7, #14]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	609a      	str	r2, [r3, #8]
	}

	return rslt;
 8003cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
	...

08003cd4 <bme68x_start>:
float gas_lower_limit = 5000;   // Bad air quality limit
float gas_upper_limit = 50000;  // Good air quality limit

/* Complete init. function. */
int8_t bme68x_start(struct bme68x_data *dataPtr, I2C_HandleTypeDef *handler)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]

	// I2C handler copy
	memcpy(&BME68x_I2C_Handler, handler, sizeof(*handler));
 8003cde:	2254      	movs	r2, #84	@ 0x54
 8003ce0:	6839      	ldr	r1, [r7, #0]
 8003ce2:	481e      	ldr	r0, [pc, #120]	@ (8003d5c <bme68x_start+0x88>)
 8003ce4:	f00b f9e6 	bl	800f0b4 <memcpy>

	// Init.
	bme68x_interface_init(&bme, BME68X_I2C_INTF);
 8003ce8:	2101      	movs	r1, #1
 8003cea:	481d      	ldr	r0, [pc, #116]	@ (8003d60 <bme68x_start+0x8c>)
 8003cec:	f000 f8ea 	bl	8003ec4 <bme68x_interface_init>
	bme68x_init(&bme);
 8003cf0:	481b      	ldr	r0, [pc, #108]	@ (8003d60 <bme68x_start+0x8c>)
 8003cf2:	f7fd ff65 	bl	8001bc0 <bme68x_init>

	// Init. for data variable
	BME68x_DATA = dataPtr;
 8003cf6:	4a1b      	ldr	r2, [pc, #108]	@ (8003d64 <bme68x_start+0x90>)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6013      	str	r3, [r2, #0]

	// Configuration
	/* Check if rslt == BME68X_OK, report or handle if otherwise */
	conf.filter = BME68X_FILTER_SIZE_3;
 8003cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8003d68 <bme68x_start+0x94>)
 8003cfe:	2202      	movs	r2, #2
 8003d00:	70da      	strb	r2, [r3, #3]
	conf.odr = BME68X_ODR_NONE;
 8003d02:	4b19      	ldr	r3, [pc, #100]	@ (8003d68 <bme68x_start+0x94>)
 8003d04:	2208      	movs	r2, #8
 8003d06:	711a      	strb	r2, [r3, #4]
	conf.os_hum = BME68X_OS_2X;
 8003d08:	4b17      	ldr	r3, [pc, #92]	@ (8003d68 <bme68x_start+0x94>)
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	701a      	strb	r2, [r3, #0]
	conf.os_pres = BME68X_OS_4X;
 8003d0e:	4b16      	ldr	r3, [pc, #88]	@ (8003d68 <bme68x_start+0x94>)
 8003d10:	2203      	movs	r2, #3
 8003d12:	709a      	strb	r2, [r3, #2]
	conf.os_temp = BME68X_OS_8X;
 8003d14:	4b14      	ldr	r3, [pc, #80]	@ (8003d68 <bme68x_start+0x94>)
 8003d16:	2204      	movs	r2, #4
 8003d18:	705a      	strb	r2, [r3, #1]
	bme68x_set_conf(&conf, &bme);
 8003d1a:	4911      	ldr	r1, [pc, #68]	@ (8003d60 <bme68x_start+0x8c>)
 8003d1c:	4812      	ldr	r0, [pc, #72]	@ (8003d68 <bme68x_start+0x94>)
 8003d1e:	f7fe f89b 	bl	8001e58 <bme68x_set_conf>

	// Heat conf.
	/* Check if rslt == BME68X_OK, report or handle if otherwise */
	heatr_conf.enable = BME68X_ENABLE;
 8003d22:	4b12      	ldr	r3, [pc, #72]	@ (8003d6c <bme68x_start+0x98>)
 8003d24:	2201      	movs	r2, #1
 8003d26:	701a      	strb	r2, [r3, #0]
	heatr_conf.heatr_temp = 320;
 8003d28:	4b10      	ldr	r3, [pc, #64]	@ (8003d6c <bme68x_start+0x98>)
 8003d2a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003d2e:	805a      	strh	r2, [r3, #2]
	heatr_conf.heatr_dur = 150;
 8003d30:	4b0e      	ldr	r3, [pc, #56]	@ (8003d6c <bme68x_start+0x98>)
 8003d32:	2296      	movs	r2, #150	@ 0x96
 8003d34:	809a      	strh	r2, [r3, #4]
	rslt = bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heatr_conf, &bme);
 8003d36:	4a0a      	ldr	r2, [pc, #40]	@ (8003d60 <bme68x_start+0x8c>)
 8003d38:	490c      	ldr	r1, [pc, #48]	@ (8003d6c <bme68x_start+0x98>)
 8003d3a:	2001      	movs	r0, #1
 8003d3c:	f7fe fb84 	bl	8002448 <bme68x_set_heatr_conf>
 8003d40:	4603      	mov	r3, r0
 8003d42:	461a      	mov	r2, r3
 8003d44:	4b0a      	ldr	r3, [pc, #40]	@ (8003d70 <bme68x_start+0x9c>)
 8003d46:	701a      	strb	r2, [r3, #0]

	// Gather gas reference for the IAQ calculation
	bme68x_GetGasReference();
 8003d48:	f000 f906 	bl	8003f58 <bme68x_GetGasReference>

	return rslt;
 8003d4c:	4b08      	ldr	r3, [pc, #32]	@ (8003d70 <bme68x_start+0x9c>)
 8003d4e:	f993 3000 	ldrsb.w	r3, [r3]
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	20000204 	.word	0x20000204
 8003d60:	20000258 	.word	0x20000258
 8003d64:	200002a8 	.word	0x200002a8
 8003d68:	200002b0 	.word	0x200002b0
 8003d6c:	200002b8 	.word	0x200002b8
 8003d70:	200002ac 	.word	0x200002ac

08003d74 <bme68x_single_measure>:

/* Force mode measurement. */
int8_t bme68x_single_measure(struct bme68x_data *dataPtr)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]

	bme68x_set_op_mode(BME68X_FORCED_MODE, &bme);
 8003d7c:	4916      	ldr	r1, [pc, #88]	@ (8003dd8 <bme68x_single_measure+0x64>)
 8003d7e:	2001      	movs	r0, #1
 8003d80:	f7fe f96e 	bl	8002060 <bme68x_set_op_mode>

	/* Calculate delay period in microseconds */
	del_period = bme68x_get_meas_dur(BME68X_FORCED_MODE, &conf, &bme)
 8003d84:	4a14      	ldr	r2, [pc, #80]	@ (8003dd8 <bme68x_single_measure+0x64>)
 8003d86:	4915      	ldr	r1, [pc, #84]	@ (8003ddc <bme68x_single_measure+0x68>)
 8003d88:	2001      	movs	r0, #1
 8003d8a:	f7fe f9eb 	bl	8002164 <bme68x_get_meas_dur>
 8003d8e:	4603      	mov	r3, r0
			+ (heatr_conf.heatr_dur * 1000);
 8003d90:	4a13      	ldr	r2, [pc, #76]	@ (8003de0 <bme68x_single_measure+0x6c>)
 8003d92:	8892      	ldrh	r2, [r2, #4]
 8003d94:	4611      	mov	r1, r2
 8003d96:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003d9a:	fb01 f202 	mul.w	r2, r1, r2
 8003d9e:	4413      	add	r3, r2
	del_period = bme68x_get_meas_dur(BME68X_FORCED_MODE, &conf, &bme)
 8003da0:	4a10      	ldr	r2, [pc, #64]	@ (8003de4 <bme68x_single_measure+0x70>)
 8003da2:	6013      	str	r3, [r2, #0]
	// bme.delay_us(del_period, bme.intf_ptr);
	HAL_Delay(del_period / 1000);
 8003da4:	4b0f      	ldr	r3, [pc, #60]	@ (8003de4 <bme68x_single_measure+0x70>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a0f      	ldr	r2, [pc, #60]	@ (8003de8 <bme68x_single_measure+0x74>)
 8003daa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dae:	099b      	lsrs	r3, r3, #6
 8003db0:	4618      	mov	r0, r3
 8003db2:	f005 fd5f 	bl	8009874 <HAL_Delay>

	/* Check if rslt == BME68X_OK, report or handle if otherwise */
	rslt = bme68x_get_data(BME68X_FORCED_MODE, dataPtr, &n_fields, &bme);
 8003db6:	4b08      	ldr	r3, [pc, #32]	@ (8003dd8 <bme68x_single_measure+0x64>)
 8003db8:	4a0c      	ldr	r2, [pc, #48]	@ (8003dec <bme68x_single_measure+0x78>)
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	2001      	movs	r0, #1
 8003dbe:	f7fe fa45 	bl	800224c <bme68x_get_data>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8003df0 <bme68x_single_measure+0x7c>)
 8003dc8:	701a      	strb	r2, [r3, #0]

	return rslt;
 8003dca:	4b09      	ldr	r3, [pc, #36]	@ (8003df0 <bme68x_single_measure+0x7c>)
 8003dcc:	f993 3000 	ldrsb.w	r3, [r3]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3708      	adds	r7, #8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	20000258 	.word	0x20000258
 8003ddc:	200002b0 	.word	0x200002b0
 8003de0:	200002b8 	.word	0x200002b8
 8003de4:	200002cc 	.word	0x200002cc
 8003de8:	10624dd3 	.word	0x10624dd3
 8003dec:	200002d0 	.word	0x200002d0
 8003df0:	200002ac 	.word	0x200002ac

08003df4 <bme68x_i2c_write>:

/* Necessary functions. */
// I2C write function.
BME68X_INTF_RET_TYPE bme68x_i2c_write(uint8_t reg_addr, const uint8_t *reg_data,
		uint32_t len, void *intf_ptr)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b08a      	sub	sp, #40	@ 0x28
 8003df8:	af04      	add	r7, sp, #16
 8003dfa:	60b9      	str	r1, [r7, #8]
 8003dfc:	607a      	str	r2, [r7, #4]
 8003dfe:	603b      	str	r3, [r7, #0]
 8003e00:	4603      	mov	r3, r0
 8003e02:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t*) intf_ptr;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	75fb      	strb	r3, [r7, #23]

	if (HAL_I2C_Mem_Write(&BME68x_I2C_Handler, (uint16_t) (dev_addr << 1),
 8003e0a:	7dfb      	ldrb	r3, [r7, #23]
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	b299      	uxth	r1, r3
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	200f      	movs	r0, #15
 8003e1c:	9002      	str	r0, [sp, #8]
 8003e1e:	9301      	str	r3, [sp, #4]
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	2301      	movs	r3, #1
 8003e26:	4806      	ldr	r0, [pc, #24]	@ (8003e40 <bme68x_i2c_write+0x4c>)
 8003e28:	f007 fbe2 	bl	800b5f0 <HAL_I2C_Mem_Write>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <bme68x_i2c_write+0x42>
			reg_addr, 1, (uint8_t*) reg_data, len, 15) == HAL_OK)
		return 0;
 8003e32:	2300      	movs	r3, #0
 8003e34:	e000      	b.n	8003e38 <bme68x_i2c_write+0x44>

	return 1;
 8003e36:	2301      	movs	r3, #1
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3718      	adds	r7, #24
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	20000204 	.word	0x20000204

08003e44 <bme68x_i2c_read>:

// I2C read function.
BME68X_INTF_RET_TYPE bme68x_i2c_read(uint8_t reg_addr, uint8_t *reg_data,
		uint32_t len, void *intf_ptr)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b08a      	sub	sp, #40	@ 0x28
 8003e48:	af04      	add	r7, sp, #16
 8003e4a:	60b9      	str	r1, [r7, #8]
 8003e4c:	607a      	str	r2, [r7, #4]
 8003e4e:	603b      	str	r3, [r7, #0]
 8003e50:	4603      	mov	r3, r0
 8003e52:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t*) intf_ptr;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	75fb      	strb	r3, [r7, #23]

	if (HAL_I2C_Mem_Read(&BME68x_I2C_Handler,
			(uint16_t) ((dev_addr << 1) | 0x1), reg_addr, 1, reg_data, len, 15)
 8003e5a:	7dfb      	ldrb	r3, [r7, #23]
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	b21b      	sxth	r3, r3
 8003e60:	f043 0301 	orr.w	r3, r3, #1
 8003e64:	b21b      	sxth	r3, r3
	if (HAL_I2C_Mem_Read(&BME68x_I2C_Handler,
 8003e66:	b299      	uxth	r1, r3
 8003e68:	7bfb      	ldrb	r3, [r7, #15]
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	200f      	movs	r0, #15
 8003e72:	9002      	str	r0, [sp, #8]
 8003e74:	9301      	str	r3, [sp, #4]
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	4806      	ldr	r0, [pc, #24]	@ (8003e98 <bme68x_i2c_read+0x54>)
 8003e7e:	f007 fccb 	bl	800b818 <HAL_I2C_Mem_Read>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <bme68x_i2c_read+0x48>
			== HAL_OK)
		return 0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	e000      	b.n	8003e8e <bme68x_i2c_read+0x4a>

	return 1;
 8003e8c:	2301      	movs	r3, #1
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	20000204 	.word	0x20000204

08003e9c <bme68x_delay_us>:

// BME68x delay function
void bme68x_delay_us(uint32_t period, void *intf_ptr)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
	HAL_Delay(period / 1000);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a05      	ldr	r2, [pc, #20]	@ (8003ec0 <bme68x_delay_us+0x24>)
 8003eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003eae:	099b      	lsrs	r3, r3, #6
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f005 fcdf 	bl	8009874 <HAL_Delay>
}
 8003eb6:	bf00      	nop
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	10624dd3 	.word	0x10624dd3

08003ec4 <bme68x_interface_init>:

// BME68x interface function
int8_t bme68x_interface_init(struct bme68x_dev *bme, uint8_t intf)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	70fb      	strb	r3, [r7, #3]
	int8_t rslt = BME68X_OK;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	73fb      	strb	r3, [r7, #15]

	if (bme != NULL) {
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d02c      	beq.n	8003f34 <bme68x_interface_init+0x70>

		// Check for the device on the I2C line
		if (HAL_I2C_IsDeviceReady(&BME68x_I2C_Handler,
 8003eda:	4b1a      	ldr	r3, [pc, #104]	@ (8003f44 <bme68x_interface_init+0x80>)
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	b299      	uxth	r1, r3
 8003ee2:	2305      	movs	r3, #5
 8003ee4:	2205      	movs	r2, #5
 8003ee6:	4818      	ldr	r0, [pc, #96]	@ (8003f48 <bme68x_interface_init+0x84>)
 8003ee8:	f007 fdb0 	bl	800ba4c <HAL_I2C_IsDeviceReady>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d105      	bne.n	8003efe <bme68x_interface_init+0x3a>
				(uint16_t) (dev_addr << 1), 5, 5) == HAL_OK) {
			// Device found at the I2C line.
			rslt = 0;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	73fb      	strb	r3, [r7, #15]
			rslt = -2; // Communication error.
			return rslt;
		}

		/* Bus configuration : I2C */
		if (intf == BME68X_I2C_INTF) {
 8003ef6:	78fb      	ldrb	r3, [r7, #3]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d118      	bne.n	8003f2e <bme68x_interface_init+0x6a>
 8003efc:	e004      	b.n	8003f08 <bme68x_interface_init+0x44>
			rslt = -2; // Communication error.
 8003efe:	23fe      	movs	r3, #254	@ 0xfe
 8003f00:	73fb      	strb	r3, [r7, #15]
			return rslt;
 8003f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f06:	e019      	b.n	8003f3c <bme68x_interface_init+0x78>
			bme->read = bme68x_i2c_read;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a10      	ldr	r2, [pc, #64]	@ (8003f4c <bme68x_interface_init+0x88>)
 8003f0c:	641a      	str	r2, [r3, #64]	@ 0x40
			bme->write = bme68x_i2c_write;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a0f      	ldr	r2, [pc, #60]	@ (8003f50 <bme68x_interface_init+0x8c>)
 8003f12:	645a      	str	r2, [r3, #68]	@ 0x44
			bme->intf = BME68X_I2C_INTF;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	731a      	strb	r2, [r3, #12]
		} else {
			return -2;
		}

		bme->delay_us = bme68x_delay_us;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a0d      	ldr	r2, [pc, #52]	@ (8003f54 <bme68x_interface_init+0x90>)
 8003f1e:	649a      	str	r2, [r3, #72]	@ 0x48
		bme->intf_ptr = &dev_addr;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a08      	ldr	r2, [pc, #32]	@ (8003f44 <bme68x_interface_init+0x80>)
 8003f24:	605a      	str	r2, [r3, #4]
		bme->amb_temp = 30; /* The ambient temperature in deg C is used for defining the heater temperature */
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	221e      	movs	r2, #30
 8003f2a:	739a      	strb	r2, [r3, #14]
 8003f2c:	e004      	b.n	8003f38 <bme68x_interface_init+0x74>
			return -2;
 8003f2e:	f06f 0301 	mvn.w	r3, #1
 8003f32:	e003      	b.n	8003f3c <bme68x_interface_init+0x78>
	} else {
		rslt = BME68X_E_NULL_PTR;
 8003f34:	23ff      	movs	r3, #255	@ 0xff
 8003f36:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8003f38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	20000000 	.word	0x20000000
 8003f48:	20000204 	.word	0x20000204
 8003f4c:	08003e45 	.word	0x08003e45
 8003f50:	08003df5 	.word	0x08003df5
 8003f54:	08003e9d 	.word	0x08003e9d

08003f58 <bme68x_GetGasReference>:
 See more at http://www.dsbird.org.uk
 */

/* IAQ functions */
void bme68x_GetGasReference()
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
	// Now run the sensor for a burn-in period, then use combination of relative humidity and gas resistance to estimate indoor air quality as a percentage.

	int readings = 10;
 8003f5e:	230a      	movs	r3, #10
 8003f60:	603b      	str	r3, [r7, #0]
	for (int i = 1; i <= readings; i++) { // read gas for 10 x 0.150mS = 1.5secs
 8003f62:	2301      	movs	r3, #1
 8003f64:	607b      	str	r3, [r7, #4]
 8003f66:	e013      	b.n	8003f90 <bme68x_GetGasReference+0x38>
		bme68x_single_measure(BME68x_DATA);
 8003f68:	4b14      	ldr	r3, [pc, #80]	@ (8003fbc <bme68x_GetGasReference+0x64>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff ff01 	bl	8003d74 <bme68x_single_measure>
		gas_reference += BME68x_DATA->gas_resistance;
 8003f72:	4b12      	ldr	r3, [pc, #72]	@ (8003fbc <bme68x_GetGasReference+0x64>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	ed93 7a06 	vldr	s14, [r3, #24]
 8003f7a:	4b11      	ldr	r3, [pc, #68]	@ (8003fc0 <bme68x_GetGasReference+0x68>)
 8003f7c:	edd3 7a00 	vldr	s15, [r3]
 8003f80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f84:	4b0e      	ldr	r3, [pc, #56]	@ (8003fc0 <bme68x_GetGasReference+0x68>)
 8003f86:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 1; i <= readings; i++) { // read gas for 10 x 0.150mS = 1.5secs
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	607b      	str	r3, [r7, #4]
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	dde7      	ble.n	8003f68 <bme68x_GetGasReference+0x10>
	}
	gas_reference = gas_reference / readings;
 8003f98:	4b09      	ldr	r3, [pc, #36]	@ (8003fc0 <bme68x_GetGasReference+0x68>)
 8003f9a:	edd3 6a00 	vldr	s13, [r3]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	ee07 3a90 	vmov	s15, r3
 8003fa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fac:	4b04      	ldr	r3, [pc, #16]	@ (8003fc0 <bme68x_GetGasReference+0x68>)
 8003fae:	edc3 7a00 	vstr	s15, [r3]

}
 8003fb2:	bf00      	nop
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	200002a8 	.word	0x200002a8
 8003fc0:	20000004 	.word	0x20000004
 8003fc4:	00000000 	.word	0x00000000

08003fc8 <bme68x_GetHumidityScore>:

//Calculate humidity contribution to IAQ index
int8_t bme68x_GetHumidityScore()
{
 8003fc8:	b5b0      	push	{r4, r5, r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0

	if (BME68x_DATA->humidity >= 38 && BME68x_DATA->humidity <= 42) // Humidity +/-5% around optimum
 8003fce:	4b52      	ldr	r3, [pc, #328]	@ (8004118 <bme68x_GetHumidityScore+0x150>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	edd3 7a05 	vldr	s15, [r3, #20]
 8003fd6:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 800411c <bme68x_GetHumidityScore+0x154>
 8003fda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fe2:	db0e      	blt.n	8004002 <bme68x_GetHumidityScore+0x3a>
 8003fe4:	4b4c      	ldr	r3, [pc, #304]	@ (8004118 <bme68x_GetHumidityScore+0x150>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	edd3 7a05 	vldr	s15, [r3, #20]
 8003fec:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8004120 <bme68x_GetHumidityScore+0x158>
 8003ff0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ff8:	d803      	bhi.n	8004002 <bme68x_GetHumidityScore+0x3a>
		humidity_score = 0.25 * 100;
 8003ffa:	4b4a      	ldr	r3, [pc, #296]	@ (8004124 <bme68x_GetHumidityScore+0x15c>)
 8003ffc:	4a4a      	ldr	r2, [pc, #296]	@ (8004128 <bme68x_GetHumidityScore+0x160>)
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	e076      	b.n	80040f0 <bme68x_GetHumidityScore+0x128>
	else { // Humidity is sub-optimal
		if (BME68x_DATA->humidity < 38)
 8004002:	4b45      	ldr	r3, [pc, #276]	@ (8004118 <bme68x_GetHumidityScore+0x150>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	edd3 7a05 	vldr	s15, [r3, #20]
 800400a:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800411c <bme68x_GetHumidityScore+0x154>
 800400e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004016:	d52e      	bpl.n	8004076 <bme68x_GetHumidityScore+0xae>
			humidity_score = 0.25 / hum_reference * BME68x_DATA->humidity * 100;
 8004018:	4b44      	ldr	r3, [pc, #272]	@ (800412c <bme68x_GetHumidityScore+0x164>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4618      	mov	r0, r3
 800401e:	f7fc fa8b 	bl	8000538 <__aeabi_f2d>
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	f04f 0000 	mov.w	r0, #0
 800402a:	4941      	ldr	r1, [pc, #260]	@ (8004130 <bme68x_GetHumidityScore+0x168>)
 800402c:	f7fc fc06 	bl	800083c <__aeabi_ddiv>
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	4614      	mov	r4, r2
 8004036:	461d      	mov	r5, r3
 8004038:	4b37      	ldr	r3, [pc, #220]	@ (8004118 <bme68x_GetHumidityScore+0x150>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	4618      	mov	r0, r3
 8004040:	f7fc fa7a 	bl	8000538 <__aeabi_f2d>
 8004044:	4602      	mov	r2, r0
 8004046:	460b      	mov	r3, r1
 8004048:	4620      	mov	r0, r4
 800404a:	4629      	mov	r1, r5
 800404c:	f7fc facc 	bl	80005e8 <__aeabi_dmul>
 8004050:	4602      	mov	r2, r0
 8004052:	460b      	mov	r3, r1
 8004054:	4610      	mov	r0, r2
 8004056:	4619      	mov	r1, r3
 8004058:	f04f 0200 	mov.w	r2, #0
 800405c:	4b35      	ldr	r3, [pc, #212]	@ (8004134 <bme68x_GetHumidityScore+0x16c>)
 800405e:	f7fc fac3 	bl	80005e8 <__aeabi_dmul>
 8004062:	4602      	mov	r2, r0
 8004064:	460b      	mov	r3, r1
 8004066:	4610      	mov	r0, r2
 8004068:	4619      	mov	r1, r3
 800406a:	f7fc fd7f 	bl	8000b6c <__aeabi_d2f>
 800406e:	4603      	mov	r3, r0
 8004070:	4a2c      	ldr	r2, [pc, #176]	@ (8004124 <bme68x_GetHumidityScore+0x15c>)
 8004072:	6013      	str	r3, [r2, #0]
 8004074:	e03c      	b.n	80040f0 <bme68x_GetHumidityScore+0x128>
		else {
			humidity_score = ((-0.25 / (100 - hum_reference)
 8004076:	4b2d      	ldr	r3, [pc, #180]	@ (800412c <bme68x_GetHumidityScore+0x164>)
 8004078:	edd3 7a00 	vldr	s15, [r3]
 800407c:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8004138 <bme68x_GetHumidityScore+0x170>
 8004080:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004084:	ee17 0a90 	vmov	r0, s15
 8004088:	f7fc fa56 	bl	8000538 <__aeabi_f2d>
 800408c:	4602      	mov	r2, r0
 800408e:	460b      	mov	r3, r1
 8004090:	f04f 0000 	mov.w	r0, #0
 8004094:	4929      	ldr	r1, [pc, #164]	@ (800413c <bme68x_GetHumidityScore+0x174>)
 8004096:	f7fc fbd1 	bl	800083c <__aeabi_ddiv>
 800409a:	4602      	mov	r2, r0
 800409c:	460b      	mov	r3, r1
 800409e:	4614      	mov	r4, r2
 80040a0:	461d      	mov	r5, r3
					* BME68x_DATA->humidity) + 0.416666) * 100;
 80040a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004118 <bme68x_GetHumidityScore+0x150>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7fc fa45 	bl	8000538 <__aeabi_f2d>
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	4620      	mov	r0, r4
 80040b4:	4629      	mov	r1, r5
 80040b6:	f7fc fa97 	bl	80005e8 <__aeabi_dmul>
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	4610      	mov	r0, r2
 80040c0:	4619      	mov	r1, r3
 80040c2:	a313      	add	r3, pc, #76	@ (adr r3, 8004110 <bme68x_GetHumidityScore+0x148>)
 80040c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c8:	f7fc f8d8 	bl	800027c <__adddf3>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4610      	mov	r0, r2
 80040d2:	4619      	mov	r1, r3
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	4b16      	ldr	r3, [pc, #88]	@ (8004134 <bme68x_GetHumidityScore+0x16c>)
 80040da:	f7fc fa85 	bl	80005e8 <__aeabi_dmul>
 80040de:	4602      	mov	r2, r0
 80040e0:	460b      	mov	r3, r1
 80040e2:	4610      	mov	r0, r2
 80040e4:	4619      	mov	r1, r3
 80040e6:	f7fc fd41 	bl	8000b6c <__aeabi_d2f>
 80040ea:	4603      	mov	r3, r0
			humidity_score = ((-0.25 / (100 - hum_reference)
 80040ec:	4a0d      	ldr	r2, [pc, #52]	@ (8004124 <bme68x_GetHumidityScore+0x15c>)
 80040ee:	6013      	str	r3, [r2, #0]
		}
	}

	return humidity_score;
 80040f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004124 <bme68x_GetHumidityScore+0x15c>)
 80040f2:	edd3 7a00 	vldr	s15, [r3]
 80040f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040fa:	edc7 7a01 	vstr	s15, [r7, #4]
 80040fe:	793b      	ldrb	r3, [r7, #4]
 8004100:	b25b      	sxtb	r3, r3
}
 8004102:	4618      	mov	r0, r3
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bdb0      	pop	{r4, r5, r7, pc}
 800410a:	bf00      	nop
 800410c:	f3af 8000 	nop.w
 8004110:	ded6ba8c 	.word	0xded6ba8c
 8004114:	3fdaaaa7 	.word	0x3fdaaaa7
 8004118:	200002a8 	.word	0x200002a8
 800411c:	42180000 	.word	0x42180000
 8004120:	42280000 	.word	0x42280000
 8004124:	200002d4 	.word	0x200002d4
 8004128:	41c80000 	.word	0x41c80000
 800412c:	20000008 	.word	0x20000008
 8004130:	3fd00000 	.word	0x3fd00000
 8004134:	40590000 	.word	0x40590000
 8004138:	42c80000 	.word	0x42c80000
 800413c:	bfd00000 	.word	0xbfd00000

08004140 <bme68x_GetGasScore>:

//Calculate gas contribution to IAQ index
int8_t bme68x_GetGasScore()
{
 8004140:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004144:	b082      	sub	sp, #8
 8004146:	af00      	add	r7, sp, #0

	gas_score = (0.75 / (gas_upper_limit - gas_lower_limit) * gas_reference
 8004148:	4b42      	ldr	r3, [pc, #264]	@ (8004254 <bme68x_GetGasScore+0x114>)
 800414a:	ed93 7a00 	vldr	s14, [r3]
 800414e:	4b42      	ldr	r3, [pc, #264]	@ (8004258 <bme68x_GetGasScore+0x118>)
 8004150:	edd3 7a00 	vldr	s15, [r3]
 8004154:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004158:	ee17 0a90 	vmov	r0, s15
 800415c:	f7fc f9ec 	bl	8000538 <__aeabi_f2d>
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1
 8004164:	f04f 0000 	mov.w	r0, #0
 8004168:	493c      	ldr	r1, [pc, #240]	@ (800425c <bme68x_GetGasScore+0x11c>)
 800416a:	f7fc fb67 	bl	800083c <__aeabi_ddiv>
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4614      	mov	r4, r2
 8004174:	461d      	mov	r5, r3
 8004176:	4b3a      	ldr	r3, [pc, #232]	@ (8004260 <bme68x_GetGasScore+0x120>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	f7fc f9dc 	bl	8000538 <__aeabi_f2d>
 8004180:	4602      	mov	r2, r0
 8004182:	460b      	mov	r3, r1
 8004184:	4620      	mov	r0, r4
 8004186:	4629      	mov	r1, r5
 8004188:	f7fc fa2e 	bl	80005e8 <__aeabi_dmul>
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	4690      	mov	r8, r2
 8004192:	4699      	mov	r9, r3
			- (gas_lower_limit * (0.75 / (gas_upper_limit - gas_lower_limit))))
 8004194:	4b30      	ldr	r3, [pc, #192]	@ (8004258 <bme68x_GetGasScore+0x118>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4618      	mov	r0, r3
 800419a:	f7fc f9cd 	bl	8000538 <__aeabi_f2d>
 800419e:	4604      	mov	r4, r0
 80041a0:	460d      	mov	r5, r1
 80041a2:	4b2c      	ldr	r3, [pc, #176]	@ (8004254 <bme68x_GetGasScore+0x114>)
 80041a4:	ed93 7a00 	vldr	s14, [r3]
 80041a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004258 <bme68x_GetGasScore+0x118>)
 80041aa:	edd3 7a00 	vldr	s15, [r3]
 80041ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041b2:	ee17 0a90 	vmov	r0, s15
 80041b6:	f7fc f9bf 	bl	8000538 <__aeabi_f2d>
 80041ba:	4602      	mov	r2, r0
 80041bc:	460b      	mov	r3, r1
 80041be:	f04f 0000 	mov.w	r0, #0
 80041c2:	4926      	ldr	r1, [pc, #152]	@ (800425c <bme68x_GetGasScore+0x11c>)
 80041c4:	f7fc fb3a 	bl	800083c <__aeabi_ddiv>
 80041c8:	4602      	mov	r2, r0
 80041ca:	460b      	mov	r3, r1
 80041cc:	4620      	mov	r0, r4
 80041ce:	4629      	mov	r1, r5
 80041d0:	f7fc fa0a 	bl	80005e8 <__aeabi_dmul>
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	4640      	mov	r0, r8
 80041da:	4649      	mov	r1, r9
 80041dc:	f7fc f84c 	bl	8000278 <__aeabi_dsub>
 80041e0:	4602      	mov	r2, r0
 80041e2:	460b      	mov	r3, r1
 80041e4:	4610      	mov	r0, r2
 80041e6:	4619      	mov	r1, r3
			* 100.00;
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004264 <bme68x_GetGasScore+0x124>)
 80041ee:	f7fc f9fb 	bl	80005e8 <__aeabi_dmul>
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	4610      	mov	r0, r2
 80041f8:	4619      	mov	r1, r3
 80041fa:	f7fc fcb7 	bl	8000b6c <__aeabi_d2f>
 80041fe:	4603      	mov	r3, r0
	gas_score = (0.75 / (gas_upper_limit - gas_lower_limit) * gas_reference
 8004200:	4a19      	ldr	r2, [pc, #100]	@ (8004268 <bme68x_GetGasScore+0x128>)
 8004202:	6013      	str	r3, [r2, #0]
	if (gas_score > 75)
 8004204:	4b18      	ldr	r3, [pc, #96]	@ (8004268 <bme68x_GetGasScore+0x128>)
 8004206:	edd3 7a00 	vldr	s15, [r3]
 800420a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800426c <bme68x_GetGasScore+0x12c>
 800420e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004216:	dd02      	ble.n	800421e <bme68x_GetGasScore+0xde>
		gas_score = 75; // Sometimes gas readings can go outside of expected scale maximum
 8004218:	4b13      	ldr	r3, [pc, #76]	@ (8004268 <bme68x_GetGasScore+0x128>)
 800421a:	4a15      	ldr	r2, [pc, #84]	@ (8004270 <bme68x_GetGasScore+0x130>)
 800421c:	601a      	str	r2, [r3, #0]
	if (gas_score < 0)
 800421e:	4b12      	ldr	r3, [pc, #72]	@ (8004268 <bme68x_GetGasScore+0x128>)
 8004220:	edd3 7a00 	vldr	s15, [r3]
 8004224:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800422c:	d503      	bpl.n	8004236 <bme68x_GetGasScore+0xf6>
		gas_score = 0; // Sometimes gas readings can go outside of expected scale minimum
 800422e:	4b0e      	ldr	r3, [pc, #56]	@ (8004268 <bme68x_GetGasScore+0x128>)
 8004230:	f04f 0200 	mov.w	r2, #0
 8004234:	601a      	str	r2, [r3, #0]

	return gas_score;
 8004236:	4b0c      	ldr	r3, [pc, #48]	@ (8004268 <bme68x_GetGasScore+0x128>)
 8004238:	edd3 7a00 	vldr	s15, [r3]
 800423c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004240:	edc7 7a01 	vstr	s15, [r7, #4]
 8004244:	793b      	ldrb	r3, [r7, #4]
 8004246:	b25b      	sxtb	r3, r3
}
 8004248:	4618      	mov	r0, r3
 800424a:	3708      	adds	r7, #8
 800424c:	46bd      	mov	sp, r7
 800424e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004252:	bf00      	nop
 8004254:	20000010 	.word	0x20000010
 8004258:	2000000c 	.word	0x2000000c
 800425c:	3fe80000 	.word	0x3fe80000
 8004260:	20000004 	.word	0x20000004
 8004264:	40590000 	.word	0x40590000
 8004268:	200002d8 	.word	0x200002d8
 800426c:	42960000 	.word	0x42960000
 8004270:	42960000 	.word	0x42960000

08004274 <bme68x_iaq>:

float bme68x_iaq()
{
 8004274:	b590      	push	{r4, r7, lr}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0

	float air_quality_score = (100
			- (bme68x_GetHumidityScore(BME68x_DATA)
 800427a:	4b1e      	ldr	r3, [pc, #120]	@ (80042f4 <bme68x_iaq+0x80>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff fea2 	bl	8003fc8 <bme68x_GetHumidityScore>
 8004284:	4603      	mov	r3, r0
 8004286:	461c      	mov	r4, r3
					+ bme68x_GetGasScore(BME68x_DATA))) * 5;
 8004288:	4b1a      	ldr	r3, [pc, #104]	@ (80042f4 <bme68x_iaq+0x80>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff ff57 	bl	8004140 <bme68x_GetGasScore>
 8004292:	4603      	mov	r3, r0
 8004294:	4423      	add	r3, r4
			- (bme68x_GetHumidityScore(BME68x_DATA)
 8004296:	f1c3 0264 	rsb	r2, r3, #100	@ 0x64
					+ bme68x_GetGasScore(BME68x_DATA))) * 5;
 800429a:	4613      	mov	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4413      	add	r3, r2
	float air_quality_score = (100
 80042a0:	ee07 3a90 	vmov	s15, r3
 80042a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042a8:	edc7 7a01 	vstr	s15, [r7, #4]

	// If 5 measurements passed, recalculate the gas reference.
	if ((getgasreference_count++) % 5 == 0)
 80042ac:	4b12      	ldr	r3, [pc, #72]	@ (80042f8 <bme68x_iaq+0x84>)
 80042ae:	f993 2000 	ldrsb.w	r2, [r3]
 80042b2:	b2d3      	uxtb	r3, r2
 80042b4:	3301      	adds	r3, #1
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	b259      	sxtb	r1, r3
 80042ba:	4b0f      	ldr	r3, [pc, #60]	@ (80042f8 <bme68x_iaq+0x84>)
 80042bc:	7019      	strb	r1, [r3, #0]
 80042be:	4b0f      	ldr	r3, [pc, #60]	@ (80042fc <bme68x_iaq+0x88>)
 80042c0:	fb83 1302 	smull	r1, r3, r3, r2
 80042c4:	1059      	asrs	r1, r3, #1
 80042c6:	17d3      	asrs	r3, r2, #31
 80042c8:	1ac9      	subs	r1, r1, r3
 80042ca:	460b      	mov	r3, r1
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	440b      	add	r3, r1
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	b25b      	sxtb	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d104      	bne.n	80042e2 <bme68x_iaq+0x6e>
		bme68x_GetGasReference(BME68x_DATA);
 80042d8:	4b06      	ldr	r3, [pc, #24]	@ (80042f4 <bme68x_iaq+0x80>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff fe3b 	bl	8003f58 <bme68x_GetGasReference>

	return air_quality_score;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	ee07 3a90 	vmov	s15, r3

}
 80042e8:	eeb0 0a67 	vmov.f32	s0, s15
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd90      	pop	{r4, r7, pc}
 80042f2:	bf00      	nop
 80042f4:	200002a8 	.word	0x200002a8
 80042f8:	200002dc 	.word	0x200002dc
 80042fc:	66666667 	.word	0x66666667

08004300 <cayenne_lpp_reset>:
#include <string.h>

#include "cayenne_lpp.h"

void cayenne_lpp_reset(cayenne_lpp_t *lpp)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
	memset(lpp->buffer, 0, CAYENNE_LPP_MAX_BUFFER_SIZE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	222a      	movs	r2, #42	@ 0x2a
 800430c:	2100      	movs	r1, #0
 800430e:	4618      	mov	r0, r3
 8004310:	f00a fe6e 	bl	800eff0 <memset>
	lpp->cursor = 0;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
}
 800431c:	bf00      	nop
 800431e:	3708      	adds	r7, #8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <cayenne_lpp_add_analog_output>:
	lpp->buffer[lpp->cursor++] = val;
}

void cayenne_lpp_add_analog_output(cayenne_lpp_t *lpp, uint8_t channel,
		float value)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	460b      	mov	r3, r1
 800432e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004332:	72fb      	strb	r3, [r7, #11]
	assert(
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800433a:	3304      	adds	r3, #4
 800433c:	2b29      	cmp	r3, #41	@ 0x29
 800433e:	d905      	bls.n	800434c <cayenne_lpp_add_analog_output+0x28>
 8004340:	4b24      	ldr	r3, [pc, #144]	@ (80043d4 <cayenne_lpp_add_analog_output+0xb0>)
 8004342:	4a25      	ldr	r2, [pc, #148]	@ (80043d8 <cayenne_lpp_add_analog_output+0xb4>)
 8004344:	2141      	movs	r1, #65	@ 0x41
 8004346:	4825      	ldr	r0, [pc, #148]	@ (80043dc <cayenne_lpp_add_analog_output+0xb8>)
 8004348:	f00a fd60 	bl	800ee0c <__assert_func>
			(lpp->cursor + CAYENNE_LPP_ANALOG_OUTPUT_SIZE) < CAYENNE_LPP_MAX_BUFFER_SIZE);

	int16_t val = value * 100;
 800434c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004350:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80043e0 <cayenne_lpp_add_analog_output+0xbc>
 8004354:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004358:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800435c:	ee17 3a90 	vmov	r3, s15
 8004360:	82fb      	strh	r3, [r7, #22]
	lpp->buffer[lpp->cursor++] = channel;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	b2d1      	uxtb	r1, r2
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	f882 102a 	strb.w	r1, [r2, #42]	@ 0x2a
 8004372:	4619      	mov	r1, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	7afa      	ldrb	r2, [r7, #11]
 8004378:	545a      	strb	r2, [r3, r1]
	lpp->buffer[lpp->cursor++] = CAYENNE_LPP_ANALOG_OUTPUT;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	b2d1      	uxtb	r1, r2
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	f882 102a 	strb.w	r1, [r2, #42]	@ 0x2a
 800438a:	461a      	mov	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2103      	movs	r1, #3
 8004390:	5499      	strb	r1, [r3, r2]
	lpp->buffer[lpp->cursor++] = val >> 8;
 8004392:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004396:	121b      	asrs	r3, r3, #8
 8004398:	b219      	sxth	r1, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	b2d0      	uxtb	r0, r2
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	f882 002a 	strb.w	r0, [r2, #42]	@ 0x2a
 80043aa:	461a      	mov	r2, r3
 80043ac:	b2c9      	uxtb	r1, r1
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	5499      	strb	r1, [r3, r2]
	lpp->buffer[lpp->cursor++] = val;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80043b8:	1c5a      	adds	r2, r3, #1
 80043ba:	b2d1      	uxtb	r1, r2
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	f882 102a 	strb.w	r1, [r2, #42]	@ 0x2a
 80043c2:	461a      	mov	r2, r3
 80043c4:	8afb      	ldrh	r3, [r7, #22]
 80043c6:	b2d9      	uxtb	r1, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	5499      	strb	r1, [r3, r2]
}
 80043cc:	bf00      	nop
 80043ce:	3718      	adds	r7, #24
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	080115fc 	.word	0x080115fc
 80043d8:	08012c90 	.word	0x08012c90
 80043dc:	08011544 	.word	0x08011544
 80043e0:	42c80000 	.word	0x42c80000

080043e4 <cayenne_lpp_add_temperature>:
	lpp->buffer[lpp->cursor++] = value;
}

void cayenne_lpp_add_temperature(cayenne_lpp_t *lpp, uint8_t channel,
		float celsius)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	460b      	mov	r3, r1
 80043ee:	ed87 0a01 	vstr	s0, [r7, #4]
 80043f2:	72fb      	strb	r3, [r7, #11]
	assert(
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80043fa:	3304      	adds	r3, #4
 80043fc:	2b29      	cmp	r3, #41	@ 0x29
 80043fe:	d905      	bls.n	800440c <cayenne_lpp_add_temperature+0x28>
 8004400:	4b24      	ldr	r3, [pc, #144]	@ (8004494 <cayenne_lpp_add_temperature+0xb0>)
 8004402:	4a25      	ldr	r2, [pc, #148]	@ (8004498 <cayenne_lpp_add_temperature+0xb4>)
 8004404:	2165      	movs	r1, #101	@ 0x65
 8004406:	4825      	ldr	r0, [pc, #148]	@ (800449c <cayenne_lpp_add_temperature+0xb8>)
 8004408:	f00a fd00 	bl	800ee0c <__assert_func>
			(lpp->cursor + CAYENNE_LPP_TEMPERATURE_SIZE) < CAYENNE_LPP_MAX_BUFFER_SIZE);

	int16_t val = celsius * 10;
 800440c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004410:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004414:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004418:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800441c:	ee17 3a90 	vmov	r3, s15
 8004420:	82fb      	strh	r3, [r7, #22]
	lpp->buffer[lpp->cursor++] = channel;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	b2d1      	uxtb	r1, r2
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	f882 102a 	strb.w	r1, [r2, #42]	@ 0x2a
 8004432:	4619      	mov	r1, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	7afa      	ldrb	r2, [r7, #11]
 8004438:	545a      	strb	r2, [r3, r1]
	lpp->buffer[lpp->cursor++] = CAYENNE_LPP_TEMPERATURE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8004440:	1c5a      	adds	r2, r3, #1
 8004442:	b2d1      	uxtb	r1, r2
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	f882 102a 	strb.w	r1, [r2, #42]	@ 0x2a
 800444a:	461a      	mov	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2167      	movs	r1, #103	@ 0x67
 8004450:	5499      	strb	r1, [r3, r2]
	lpp->buffer[lpp->cursor++] = val >> 8;
 8004452:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004456:	121b      	asrs	r3, r3, #8
 8004458:	b219      	sxth	r1, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8004460:	1c5a      	adds	r2, r3, #1
 8004462:	b2d0      	uxtb	r0, r2
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	f882 002a 	strb.w	r0, [r2, #42]	@ 0x2a
 800446a:	461a      	mov	r2, r3
 800446c:	b2c9      	uxtb	r1, r1
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	5499      	strb	r1, [r3, r2]
	lpp->buffer[lpp->cursor++] = val;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	b2d1      	uxtb	r1, r2
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	f882 102a 	strb.w	r1, [r2, #42]	@ 0x2a
 8004482:	461a      	mov	r2, r3
 8004484:	8afb      	ldrh	r3, [r7, #22]
 8004486:	b2d9      	uxtb	r1, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	5499      	strb	r1, [r3, r2]
}
 800448c:	bf00      	nop
 800448e:	3718      	adds	r7, #24
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	080116e0 	.word	0x080116e0
 8004498:	08012cb0 	.word	0x08012cb0
 800449c:	08011544 	.word	0x08011544

080044a0 <cayenne_lpp_add_relative_humidity>:

void cayenne_lpp_add_relative_humidity(cayenne_lpp_t *lpp, uint8_t channel,
		float rh)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	460b      	mov	r3, r1
 80044aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80044ae:	72fb      	strb	r3, [r7, #11]
	assert(
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80044b6:	3303      	adds	r3, #3
 80044b8:	2b29      	cmp	r3, #41	@ 0x29
 80044ba:	d905      	bls.n	80044c8 <cayenne_lpp_add_relative_humidity+0x28>
 80044bc:	4b1b      	ldr	r3, [pc, #108]	@ (800452c <cayenne_lpp_add_relative_humidity+0x8c>)
 80044be:	4a1c      	ldr	r2, [pc, #112]	@ (8004530 <cayenne_lpp_add_relative_humidity+0x90>)
 80044c0:	2172      	movs	r1, #114	@ 0x72
 80044c2:	481c      	ldr	r0, [pc, #112]	@ (8004534 <cayenne_lpp_add_relative_humidity+0x94>)
 80044c4:	f00a fca2 	bl	800ee0c <__assert_func>
			(lpp->cursor + CAYENNE_LPP_RELATIVE_HUMIDITY_SIZE) < CAYENNE_LPP_MAX_BUFFER_SIZE);

	uint8_t val = rh * 2;
 80044c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80044cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80044d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044d4:	edc7 7a00 	vstr	s15, [r7]
 80044d8:	783b      	ldrb	r3, [r7, #0]
 80044da:	75fb      	strb	r3, [r7, #23]
	lpp->buffer[lpp->cursor++] = channel;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80044e2:	1c5a      	adds	r2, r3, #1
 80044e4:	b2d1      	uxtb	r1, r2
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	f882 102a 	strb.w	r1, [r2, #42]	@ 0x2a
 80044ec:	4619      	mov	r1, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	7afa      	ldrb	r2, [r7, #11]
 80044f2:	545a      	strb	r2, [r3, r1]
	lpp->buffer[lpp->cursor++] = CAYENNE_LPP_RELATIVE_HUMIDITY;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80044fa:	1c5a      	adds	r2, r3, #1
 80044fc:	b2d1      	uxtb	r1, r2
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	f882 102a 	strb.w	r1, [r2, #42]	@ 0x2a
 8004504:	461a      	mov	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2168      	movs	r1, #104	@ 0x68
 800450a:	5499      	strb	r1, [r3, r2]
	lpp->buffer[lpp->cursor++] = val;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8004512:	1c5a      	adds	r2, r3, #1
 8004514:	b2d1      	uxtb	r1, r2
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	f882 102a 	strb.w	r1, [r2, #42]	@ 0x2a
 800451c:	4619      	mov	r1, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	7dfa      	ldrb	r2, [r7, #23]
 8004522:	545a      	strb	r2, [r3, r1]
}
 8004524:	bf00      	nop
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	0801172c 	.word	0x0801172c
 8004530:	08012ccc 	.word	0x08012ccc
 8004534:	08011544 	.word	0x08011544

08004538 <debug_init>:
/*  ************************************** */
/*    DO NOT CHANGE BELOW THIS LINE        */
/*  ************************************** */

void debug_init()
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
//    debug_led(0);

// configure USART1 (115200/8N1, tx-only)

// print banner
	debug_str("\r\n============== DEBUG STARTED ==============\r\n");
 800453c:	4802      	ldr	r0, [pc, #8]	@ (8004548 <debug_init+0x10>)
 800453e:	f000 f88d 	bl	800465c <debug_str>
}
 8004542:	bf00      	nop
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	080118b4 	.word	0x080118b4

0800454c <debug_led>:

void debug_led(int val)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, val);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	b2db      	uxtb	r3, r3
 8004558:	461a      	mov	r2, r3
 800455a:	2102      	movs	r1, #2
 800455c:	4803      	ldr	r0, [pc, #12]	@ (800456c <debug_led+0x20>)
 800455e:	f006 ff7b 	bl	800b458 <HAL_GPIO_WritePin>
}
 8004562:	bf00      	nop
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	48000400 	.word	0x48000400

08004570 <debug_char>:

void debug_char(char c)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	4603      	mov	r3, r0
 8004578:	71fb      	strb	r3, [r7, #7]
	char buffer[] = "";
 800457a:	2300      	movs	r3, #0
 800457c:	733b      	strb	r3, [r7, #12]
	buffer[0] = c;
 800457e:	79fb      	ldrb	r3, [r7, #7]
 8004580:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&myUART, buffer, sizeof(buffer), HAL_MAX_DELAY);
 8004582:	f107 010c 	add.w	r1, r7, #12
 8004586:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800458a:	2201      	movs	r2, #1
 800458c:	4803      	ldr	r0, [pc, #12]	@ (800459c <debug_char+0x2c>)
 800458e:	f009 ff6b 	bl	800e468 <HAL_UART_Transmit>
}
 8004592:	bf00      	nop
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	2000066c 	.word	0x2000066c

080045a0 <debug_hex>:

void debug_hex(u1_t b)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	4603      	mov	r3, r0
 80045a8:	71fb      	strb	r3, [r7, #7]
	debug_char("0123456789ABCDEF"[b >> 4]);
 80045aa:	79fb      	ldrb	r3, [r7, #7]
 80045ac:	091b      	lsrs	r3, r3, #4
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	461a      	mov	r2, r3
 80045b2:	4b08      	ldr	r3, [pc, #32]	@ (80045d4 <debug_hex+0x34>)
 80045b4:	5c9b      	ldrb	r3, [r3, r2]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7ff ffda 	bl	8004570 <debug_char>
	debug_char("0123456789ABCDEF"[b & 0xF]);
 80045bc:	79fb      	ldrb	r3, [r7, #7]
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	4a04      	ldr	r2, [pc, #16]	@ (80045d4 <debug_hex+0x34>)
 80045c4:	5cd3      	ldrb	r3, [r2, r3]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7ff ffd2 	bl	8004570 <debug_char>
}
 80045cc:	bf00      	nop
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	080118e4 	.word	0x080118e4

080045d8 <debug_uint>:
	debug_char('\r');
	debug_char('\n');
}

void debug_uint(u4_t v)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
	for (s1_t n = 24; n >= 0; n -= 8) {
 80045e0:	2318      	movs	r3, #24
 80045e2:	73fb      	strb	r3, [r7, #15]
 80045e4:	e00c      	b.n	8004600 <debug_uint+0x28>
		debug_hex(v >> n);
 80045e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	fa22 f303 	lsr.w	r3, r2, r3
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff ffd4 	bl	80045a0 <debug_hex>
	for (s1_t n = 24; n >= 0; n -= 8) {
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
 80045fa:	3b08      	subs	r3, #8
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	73fb      	strb	r3, [r7, #15]
 8004600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004604:	2b00      	cmp	r3, #0
 8004606:	daee      	bge.n	80045e6 <debug_uint+0xe>
	}
}
 8004608:	bf00      	nop
 800460a:	bf00      	nop
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <debug_int>:

void debug_int(s4_t v)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b08a      	sub	sp, #40	@ 0x28
 8004616:	af02      	add	r7, sp, #8
 8004618:	6078      	str	r0, [r7, #4]
	char buf[10], *p = buf;
 800461a:	f107 030c 	add.w	r3, r7, #12
 800461e:	61fb      	str	r3, [r7, #28]
	int n = debug_fmt(buf, sizeof(buf), v, 10, 0, 0);
 8004620:	f107 000c 	add.w	r0, r7, #12
 8004624:	2300      	movs	r3, #0
 8004626:	9301      	str	r3, [sp, #4]
 8004628:	2300      	movs	r3, #0
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	230a      	movs	r3, #10
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	210a      	movs	r1, #10
 8004632:	f000 f88e 	bl	8004752 <debug_fmt>
 8004636:	61b8      	str	r0, [r7, #24]
	while (n--)
 8004638:	e006      	b.n	8004648 <debug_int+0x36>
		debug_char(*p++);
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	61fa      	str	r2, [r7, #28]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff ff94 	bl	8004570 <debug_char>
	while (n--)
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	1e5a      	subs	r2, r3, #1
 800464c:	61ba      	str	r2, [r7, #24]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1f3      	bne.n	800463a <debug_int+0x28>
}
 8004652:	bf00      	nop
 8004654:	bf00      	nop
 8004656:	3720      	adds	r7, #32
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <debug_str>:

void debug_str(const char *str)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
	while (*str) {
 8004664:	e006      	b.n	8004674 <debug_str+0x18>
		debug_char(*str++);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	607a      	str	r2, [r7, #4]
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	4618      	mov	r0, r3
 8004670:	f7ff ff7e 	bl	8004570 <debug_char>
	while (*str) {
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1f4      	bne.n	8004666 <debug_str+0xa>
	}
}
 800467c:	bf00      	nop
 800467e:	bf00      	nop
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <debug_float2str>:

void debug_float2str(double val, int n)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b09e      	sub	sp, #120	@ 0x78
 800468a:	af00      	add	r7, sp, #0
 800468c:	ed87 0b02 	vstr	d0, [r7, #8]
 8004690:	6078      	str	r0, [r7, #4]
	char buf[100], *p = buf;
 8004692:	f107 0310 	add.w	r3, r7, #16
 8004696:	677b      	str	r3, [r7, #116]	@ 0x74
	//int n = 7;	// number of digits
	gcvt(val, n, buf);
 8004698:	f107 0310 	add.w	r3, r7, #16
 800469c:	4619      	mov	r1, r3
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	ed97 0b02 	vldr	d0, [r7, #8]
 80046a4:	f00a fcda 	bl	800f05c <gcvt>
	while (n--)
 80046a8:	e006      	b.n	80046b8 <debug_float2str+0x32>
		debug_char(*p++);
 80046aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046ac:	1c5a      	adds	r2, r3, #1
 80046ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff ff5c 	bl	8004570 <debug_char>
	while (n--)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	1e5a      	subs	r2, r3, #1
 80046bc:	607a      	str	r2, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1f3      	bne.n	80046aa <debug_float2str+0x24>
}
 80046c2:	bf00      	nop
 80046c4:	bf00      	nop
 80046c6:	3778      	adds	r7, #120	@ 0x78
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <debug_valfloat>:

void debug_valfloat(const char *label, double val, int n)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	ed87 0b00 	vstr	d0, [r7]
 80046d8:	60b9      	str	r1, [r7, #8]
	debug_str(label);
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f7ff ffbe 	bl	800465c <debug_str>
	debug_float2str(val, n);
 80046e0:	68b8      	ldr	r0, [r7, #8]
 80046e2:	ed97 0b00 	vldr	d0, [r7]
 80046e6:	f7ff ffce 	bl	8004686 <debug_float2str>
	debug_char('\r');
 80046ea:	200d      	movs	r0, #13
 80046ec:	f7ff ff40 	bl	8004570 <debug_char>
	debug_char('\n');
 80046f0:	200a      	movs	r0, #10
 80046f2:	f7ff ff3d 	bl	8004570 <debug_char>
}
 80046f6:	bf00      	nop
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <debug_val>:

void debug_val(const char *label, u4_t val)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b082      	sub	sp, #8
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
 8004706:	6039      	str	r1, [r7, #0]
	debug_str(label);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f7ff ffa7 	bl	800465c <debug_str>
	debug_uint(val);
 800470e:	6838      	ldr	r0, [r7, #0]
 8004710:	f7ff ff62 	bl	80045d8 <debug_uint>
	debug_char('\r');
 8004714:	200d      	movs	r0, #13
 8004716:	f7ff ff2b 	bl	8004570 <debug_char>
	debug_char('\n');
 800471a:	200a      	movs	r0, #10
 800471c:	f7ff ff28 	bl	8004570 <debug_char>
}
 8004720:	bf00      	nop
 8004722:	3708      	adds	r7, #8
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <debug_valdec>:

void debug_valdec(const char *label, s4_t val)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
	debug_str(label);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7ff ff92 	bl	800465c <debug_str>
	debug_int(val);
 8004738:	6838      	ldr	r0, [r7, #0]
 800473a:	f7ff ff6a 	bl	8004612 <debug_int>
	debug_char('\r');
 800473e:	200d      	movs	r0, #13
 8004740:	f7ff ff16 	bl	8004570 <debug_char>
	debug_char('\n');
 8004744:	200a      	movs	r0, #10
 8004746:	f7ff ff13 	bl	8004570 <debug_char>
}
 800474a:	bf00      	nop
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <debug_fmt>:

int debug_fmt(char *buf, int max, s4_t val, int base, int width, char pad)
{
 8004752:	b480      	push	{r7}
 8004754:	b093      	sub	sp, #76	@ 0x4c
 8004756:	af00      	add	r7, sp, #0
 8004758:	60f8      	str	r0, [r7, #12]
 800475a:	60b9      	str	r1, [r7, #8]
 800475c:	607a      	str	r2, [r7, #4]
 800475e:	603b      	str	r3, [r7, #0]
	char num[33], *p = num, *b = buf;
 8004760:	f107 0314 	add.w	r3, r7, #20
 8004764:	647b      	str	r3, [r7, #68]	@ 0x44
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	643b      	str	r3, [r7, #64]	@ 0x40
	u4_t m, v;
	// special handling of negative decimals
	v = (base == 10 && val < 0) ? -val : val;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b0a      	cmp	r3, #10
 800476e:	d105      	bne.n	800477c <debug_fmt+0x2a>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	da02      	bge.n	800477c <debug_fmt+0x2a>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	425b      	negs	r3, r3
 800477a:	e000      	b.n	800477e <debug_fmt+0x2c>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	// generate digits backwards
	do {
		*p++ = ((m = v % base) <= 9) ? m + '0' : m + 'A' - 10;
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004784:	fbb3 f1f2 	udiv	r1, r3, r2
 8004788:	fb01 f202 	mul.w	r2, r1, r2
 800478c:	1a9b      	subs	r3, r3, r2
 800478e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004792:	2b09      	cmp	r3, #9
 8004794:	d804      	bhi.n	80047a0 <debug_fmt+0x4e>
 8004796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004798:	b2db      	uxtb	r3, r3
 800479a:	3330      	adds	r3, #48	@ 0x30
 800479c:	b2da      	uxtb	r2, r3
 800479e:	e003      	b.n	80047a8 <debug_fmt+0x56>
 80047a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	3337      	adds	r3, #55	@ 0x37
 80047a6:	b2da      	uxtb	r2, r3
 80047a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047aa:	1c59      	adds	r1, r3, #1
 80047ac:	6479      	str	r1, [r7, #68]	@ 0x44
 80047ae:	701a      	strb	r2, [r3, #0]
	} while (v /= base);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80047b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1df      	bne.n	8004780 <debug_fmt+0x2e>
	// prefix negative decimals with '-'
	if (base == 10 && val < 0) {
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	2b0a      	cmp	r3, #10
 80047c4:	d10e      	bne.n	80047e4 <debug_fmt+0x92>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	da0b      	bge.n	80047e4 <debug_fmt+0x92>
		*p++ = '-';
 80047cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047ce:	1c5a      	adds	r2, r3, #1
 80047d0:	647a      	str	r2, [r7, #68]	@ 0x44
 80047d2:	222d      	movs	r2, #45	@ 0x2d
 80047d4:	701a      	strb	r2, [r3, #0]
	}
	// add leading zeroes or spaces
	while (b - buf < max - 1 && b - buf < width - (p - num)) {
 80047d6:	e005      	b.n	80047e4 <debug_fmt+0x92>
		*b++ = pad;
 80047d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047da:	1c5a      	adds	r2, r3, #1
 80047dc:	643a      	str	r2, [r7, #64]	@ 0x40
 80047de:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 80047e2:	701a      	strb	r2, [r3, #0]
	while (b - buf < max - 1 && b - buf < width - (p - num)) {
 80047e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	1ad2      	subs	r2, r2, r3
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	3b01      	subs	r3, #1
 80047ee:	429a      	cmp	r2, r3
 80047f0:	da0a      	bge.n	8004808 <debug_fmt+0xb6>
 80047f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	1ad2      	subs	r2, r2, r3
 80047f8:	f107 0314 	add.w	r3, r7, #20
 80047fc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80047fe:	1acb      	subs	r3, r1, r3
 8004800:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004802:	1acb      	subs	r3, r1, r3
 8004804:	429a      	cmp	r2, r3
 8004806:	dbe7      	blt.n	80047d8 <debug_fmt+0x86>
	}
	// copy digits and sign forwards
	do
		*b++ = *--p;
 8004808:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800480a:	3b01      	subs	r3, #1
 800480c:	647b      	str	r3, [r7, #68]	@ 0x44
 800480e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004810:	1c5a      	adds	r2, r3, #1
 8004812:	643a      	str	r2, [r7, #64]	@ 0x40
 8004814:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004816:	7812      	ldrb	r2, [r2, #0]
 8004818:	701a      	strb	r2, [r3, #0]
	while (b - buf < max && p > num);
 800481a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	429a      	cmp	r2, r3
 8004824:	dd04      	ble.n	8004830 <debug_fmt+0xde>
 8004826:	f107 0314 	add.w	r3, r7, #20
 800482a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800482c:	429a      	cmp	r2, r3
 800482e:	d8eb      	bhi.n	8004808 <debug_fmt+0xb6>
	// return number of characters written
	return b - buf;
 8004830:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	1ad3      	subs	r3, r2, r3
}
 8004836:	4618      	mov	r0, r3
 8004838:	374c      	adds	r7, #76	@ 0x4c
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
	...

08004844 <debug_event>:

void debug_event(int ev)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
			[EV_TXCOMPLETE] = "TXCOMPLETE", [EV_LOST_TSYNC] = "LOST_TSYNC",
			[EV_RESET] = "RESET", [EV_RXCOMPLETE] = "RXCOMPLETE", [EV_LINK_DEAD
					] = "LINK_DEAD", [EV_LINK_ALIVE] = "LINK_ALIVE",
			[EV_SCAN_FOUND] = "SCAN_FOUND", [EV_TXSTART] = "EV_TXSTART", };
	debug_str(
			(ev < sizeof(evnames) / sizeof(evnames[0])) ?
 800484c:	687b      	ldr	r3, [r7, #4]
	debug_str(
 800484e:	2b11      	cmp	r3, #17
 8004850:	d804      	bhi.n	800485c <debug_event+0x18>
 8004852:	4a09      	ldr	r2, [pc, #36]	@ (8004878 <debug_event+0x34>)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800485a:	e000      	b.n	800485e <debug_event+0x1a>
 800485c:	4b07      	ldr	r3, [pc, #28]	@ (800487c <debug_event+0x38>)
 800485e:	4618      	mov	r0, r3
 8004860:	f7ff fefc 	bl	800465c <debug_str>
					evnames[ev] : "EV_UNKNOWN");
	debug_char('\r');
 8004864:	200d      	movs	r0, #13
 8004866:	f7ff fe83 	bl	8004570 <debug_char>
	debug_char('\n');
 800486a:	200a      	movs	r0, #10
 800486c:	f7ff fe80 	bl	8004570 <debug_char>
}
 8004870:	bf00      	nop
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	20000014 	.word	0x20000014
 800487c:	080118f8 	.word	0x080118f8

08004880 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b088      	sub	sp, #32
 8004884:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004886:	f107 030c 	add.w	r3, r7, #12
 800488a:	2200      	movs	r2, #0
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	605a      	str	r2, [r3, #4]
 8004890:	609a      	str	r2, [r3, #8]
 8004892:	60da      	str	r2, [r3, #12]
 8004894:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004896:	4b33      	ldr	r3, [pc, #204]	@ (8004964 <MX_GPIO_Init+0xe4>)
 8004898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800489a:	4a32      	ldr	r2, [pc, #200]	@ (8004964 <MX_GPIO_Init+0xe4>)
 800489c:	f043 0304 	orr.w	r3, r3, #4
 80048a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048a2:	4b30      	ldr	r3, [pc, #192]	@ (8004964 <MX_GPIO_Init+0xe4>)
 80048a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048a6:	f003 0304 	and.w	r3, r3, #4
 80048aa:	60bb      	str	r3, [r7, #8]
 80048ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80048ae:	4b2d      	ldr	r3, [pc, #180]	@ (8004964 <MX_GPIO_Init+0xe4>)
 80048b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048b2:	4a2c      	ldr	r2, [pc, #176]	@ (8004964 <MX_GPIO_Init+0xe4>)
 80048b4:	f043 0301 	orr.w	r3, r3, #1
 80048b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048ba:	4b2a      	ldr	r3, [pc, #168]	@ (8004964 <MX_GPIO_Init+0xe4>)
 80048bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	607b      	str	r3, [r7, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80048c6:	4b27      	ldr	r3, [pc, #156]	@ (8004964 <MX_GPIO_Init+0xe4>)
 80048c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ca:	4a26      	ldr	r2, [pc, #152]	@ (8004964 <MX_GPIO_Init+0xe4>)
 80048cc:	f043 0302 	orr.w	r3, r3, #2
 80048d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048d2:	4b24      	ldr	r3, [pc, #144]	@ (8004964 <MX_GPIO_Init+0xe4>)
 80048d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	603b      	str	r3, [r7, #0]
 80048dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Alim_temp_Pin|RST_Pin|NSS_Pin, GPIO_PIN_RESET);
 80048de:	2200      	movs	r2, #0
 80048e0:	f648 0180 	movw	r1, #34944	@ 0x8880
 80048e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80048e8:	f006 fdb6 	bl	800b458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80048ec:	2200      	movs	r2, #0
 80048ee:	2102      	movs	r1, #2
 80048f0:	481d      	ldr	r0, [pc, #116]	@ (8004968 <MX_GPIO_Init+0xe8>)
 80048f2:	f006 fdb1 	bl	800b458 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Alim_temp_Pin RST_Pin NSS_Pin */
  GPIO_InitStruct.Pin = Alim_temp_Pin|RST_Pin|NSS_Pin;
 80048f6:	f648 0380 	movw	r3, #34944	@ 0x8880
 80048fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048fc:	2301      	movs	r3, #1
 80048fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004900:	2300      	movs	r3, #0
 8004902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004904:	2300      	movs	r3, #0
 8004906:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004908:	f107 030c 	add.w	r3, r7, #12
 800490c:	4619      	mov	r1, r3
 800490e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004912:	f006 fc37 	bl	800b184 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8004916:	2302      	movs	r3, #2
 8004918:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800491a:	2301      	movs	r3, #1
 800491c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800491e:	2300      	movs	r3, #0
 8004920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004922:	2300      	movs	r3, #0
 8004924:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8004926:	f107 030c 	add.w	r3, r7, #12
 800492a:	4619      	mov	r1, r3
 800492c:	480e      	ldr	r0, [pc, #56]	@ (8004968 <MX_GPIO_Init+0xe8>)
 800492e:	f006 fc29 	bl	800b184 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO0_Pin DIO1_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin|DIO1_Pin;
 8004932:	23c0      	movs	r3, #192	@ 0xc0
 8004934:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004936:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800493a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800493c:	2300      	movs	r3, #0
 800493e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004940:	f107 030c 	add.w	r3, r7, #12
 8004944:	4619      	mov	r1, r3
 8004946:	4808      	ldr	r0, [pc, #32]	@ (8004968 <MX_GPIO_Init+0xe8>)
 8004948:	f006 fc1c 	bl	800b184 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800494c:	2200      	movs	r2, #0
 800494e:	2100      	movs	r1, #0
 8004950:	2017      	movs	r0, #23
 8004952:	f006 fbe0 	bl	800b116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004956:	2017      	movs	r0, #23
 8004958:	f006 fbf9 	bl	800b14e <HAL_NVIC_EnableIRQ>

}
 800495c:	bf00      	nop
 800495e:	3720      	adds	r7, #32
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	40021000 	.word	0x40021000
 8004968:	48000400 	.word	0x48000400

0800496c <hal_io_init>:

// -----------------------------------------------------------------------------
// I/O

static void hal_io_init()
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
	//already done by cubemx
}
 8004970:	bf00      	nop
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <hal_pin_rxtx>:

// val ==1  => tx 1, rx 0 ; val == 0 => tx 0, rx 1
void hal_pin_rxtx(u1_t val)
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	4603      	mov	r3, r0
 8004982:	71fb      	strb	r3, [r7, #7]
  #ifdef TX_GPIO_Port
    HAL_GPIO_WritePin(RX_GPIO_Port,RX_Pin,~val);
    HAL_GPIO_WritePin(TX_GPIO_Port,TX_Pin,val);
  #endif
#endif
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <hal_pin_nss>:

// set radio NSS pin to given value
void hal_pin_nss(u1_t val)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	4603      	mov	r3, r0
 8004998:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, val);
 800499a:	79fb      	ldrb	r3, [r7, #7]
 800499c:	461a      	mov	r2, r3
 800499e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80049a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80049a6:	f006 fd57 	bl	800b458 <HAL_GPIO_WritePin>
}
 80049aa:	bf00      	nop
 80049ac:	3708      	adds	r7, #8
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <hal_pin_rst>:

// set radio RST pin to given value (or keep floating!)
void hal_pin_rst(u1_t val)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b08c      	sub	sp, #48	@ 0x30
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	4603      	mov	r3, r0
 80049ba:	71fb      	strb	r3, [r7, #7]
	if (val == 0 || val == 1) { // drive pin
 80049bc:	79fb      	ldrb	r3, [r7, #7]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d002      	beq.n	80049c8 <hal_pin_rst+0x16>
 80049c2:	79fb      	ldrb	r3, [r7, #7]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d116      	bne.n	80049f6 <hal_pin_rst+0x44>
		GPIO_InitTypeDef GPIO_InitStruct;
		GPIO_InitStruct.Pin = RST_Pin;
 80049c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80049cc:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049ce:	2301      	movs	r3, #1
 80049d0:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049d2:	2300      	movs	r3, #0
 80049d4:	62bb      	str	r3, [r7, #40]	@ 0x28
		HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80049d6:	f107 031c 	add.w	r3, r7, #28
 80049da:	4619      	mov	r1, r3
 80049dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80049e0:	f006 fbd0 	bl	800b184 <HAL_GPIO_Init>

		HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, val);
 80049e4:	79fb      	ldrb	r3, [r7, #7]
 80049e6:	461a      	mov	r2, r3
 80049e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80049ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80049f0:	f006 fd32 	bl	800b458 <HAL_GPIO_WritePin>
	if (val == 0 || val == 1) { // drive pin
 80049f4:	e00e      	b.n	8004a14 <hal_pin_rst+0x62>

	} else { // keep pin floating
		GPIO_InitTypeDef GPIO_InitStruct;
		GPIO_InitStruct.Pin = RST_Pin;
 80049f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80049fa:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049fc:	2300      	movs	r3, #0
 80049fe:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a00:	2300      	movs	r3, #0
 8004a02:	613b      	str	r3, [r7, #16]
		HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8004a04:	f107 0308 	add.w	r3, r7, #8
 8004a08:	4619      	mov	r1, r3
 8004a0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004a0e:	f006 fbb9 	bl	800b184 <HAL_GPIO_Init>
	}
}
 8004a12:	bf00      	nop
 8004a14:	bf00      	nop
 8004a16:	3730      	adds	r7, #48	@ 0x30
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <HAL_GPIO_EXTI_Callback>:

extern void radio_irq_handler(u1_t dio);

// generic EXTI IRQ handler for all channels
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin_int)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	4603      	mov	r3, r0
 8004a24:	80fb      	strh	r3, [r7, #6]
	// DIO 0
	if (GPIO_Pin_int == DIO0_Pin) {
 8004a26:	88fb      	ldrh	r3, [r7, #6]
 8004a28:	2b40      	cmp	r3, #64	@ 0x40
 8004a2a:	d102      	bne.n	8004a32 <HAL_GPIO_EXTI_Callback+0x16>
		// invoke radio handler (on IRQ!)
		radio_irq_handler(0);
 8004a2c:	2000      	movs	r0, #0
 8004a2e:	f004 fa71 	bl	8008f14 <radio_irq_handler>
	}
	// DIO 1
	if (GPIO_Pin_int == DIO1_Pin) {
 8004a32:	88fb      	ldrh	r3, [r7, #6]
 8004a34:	2b80      	cmp	r3, #128	@ 0x80
 8004a36:	d102      	bne.n	8004a3e <HAL_GPIO_EXTI_Callback+0x22>
		// invoke radio handler (on IRQ!)
		radio_irq_handler(1);
 8004a38:	2001      	movs	r0, #1
 8004a3a:	f004 fa6b 	bl	8008f14 <radio_irq_handler>
	// DIO 2
//	if(GPIO_Pin_int == DIO2_Pin) {
	//    // invoke radio handler (on IRQ!)
//	    radio_irq_handler(2);
//	}
}
 8004a3e:	bf00      	nop
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <hal_spi_init>:

// -----------------------------------------------------------------------------
// SPI
void hal_spi_init()
{
 8004a46:	b480      	push	{r7}
 8004a48:	af00      	add	r7, sp, #0
	// already done by cube mx
}
 8004a4a:	bf00      	nop
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <hal_spi>:

// perform SPI transaction with radio
u1_t hal_spi(u1_t out)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af02      	add	r7, sp, #8
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	71fb      	strb	r3, [r7, #7]
	char outbuffer[] = "";
 8004a5e:	2300      	movs	r3, #0
 8004a60:	733b      	strb	r3, [r7, #12]
	char inbuffer[] = "";
 8004a62:	2300      	movs	r3, #0
 8004a64:	723b      	strb	r3, [r7, #8]
	outbuffer[0] = out;
 8004a66:	79fb      	ldrb	r3, [r7, #7]
 8004a68:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&mySPI, outbuffer, inbuffer, sizeof(outbuffer),
 8004a6a:	f107 0208 	add.w	r2, r7, #8
 8004a6e:	f107 010c 	add.w	r1, r7, #12
 8004a72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	2301      	movs	r3, #1
 8004a7a:	4804      	ldr	r0, [pc, #16]	@ (8004a8c <hal_spi+0x38>)
 8004a7c:	f008 fe53 	bl	800d726 <HAL_SPI_TransmitReceive>
	HAL_MAX_DELAY);
	return inbuffer[0];
 8004a80:	7a3b      	ldrb	r3, [r7, #8]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	2000056c 	.word	0x2000056c

08004a90 <hal_time_init>:

// -----------------------------------------------------------------------------
// TIME
static void hal_time_init()
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
	// already done by cubemx
}
 8004a94:	bf00      	nop
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
	...

08004aa0 <hal_ticks>:

u4_t hal_ticks()
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
	hal_disableIRQs();
 8004aa6:	f000 f8a5 	bl	8004bf4 <hal_disableIRQs>
	u4_t t = HAL.ticks;
 8004aaa:	4b13      	ldr	r3, [pc, #76]	@ (8004af8 <hal_ticks+0x58>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	607b      	str	r3, [r7, #4]
	u2_t cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 8004ab0:	4b12      	ldr	r3, [pc, #72]	@ (8004afc <hal_ticks+0x5c>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab6:	807b      	strh	r3, [r7, #2]
	if (__HAL_TIM_GET_FLAG(&myTIMER, TIM_FLAG_CC1) != RESET) {
 8004ab8:	4b10      	ldr	r3, [pc, #64]	@ (8004afc <hal_ticks+0x5c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d10d      	bne.n	8004ae2 <hal_ticks+0x42>
		if (__HAL_TIM_GET_IT_SOURCE(&myTIMER, TIM_IT_CC1) != RESET) {
 8004ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8004afc <hal_ticks+0x5c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d106      	bne.n	8004ae2 <hal_ticks+0x42>
			cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 8004ad4:	4b09      	ldr	r3, [pc, #36]	@ (8004afc <hal_ticks+0x5c>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ada:	807b      	strh	r3, [r7, #2]
			t++;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	607b      	str	r3, [r7, #4]
		}
	}
	hal_enableIRQs();
 8004ae2:	f000 f897 	bl	8004c14 <hal_enableIRQs>
	return (t << 16) | cnt;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	041a      	lsls	r2, r3, #16
 8004aea:	887b      	ldrh	r3, [r7, #2]
 8004aec:	4313      	orrs	r3, r2
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	200002e0 	.word	0x200002e0
 8004afc:	20000620 	.word	0x20000620

08004b00 <hal_ticksplusplus>:

void hal_ticksplusplus(void)
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0
	HAL.ticks++;
 8004b04:	4b04      	ldr	r3, [pc, #16]	@ (8004b18 <hal_ticksplusplus+0x18>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	4a03      	ldr	r2, [pc, #12]	@ (8004b18 <hal_ticksplusplus+0x18>)
 8004b0c:	6053      	str	r3, [r2, #4]
}
 8004b0e:	bf00      	nop
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	200002e0 	.word	0x200002e0

08004b1c <deltaticks>:

// return modified delta ticks from now to specified ticktime (0 for past, FFFF for far future)
static u2_t deltaticks(u4_t time)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
	u4_t t = hal_ticks();
 8004b24:	f7ff ffbc 	bl	8004aa0 <hal_ticks>
 8004b28:	60f8      	str	r0, [r7, #12]
	s4_t d = time - t;
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	60bb      	str	r3, [r7, #8]
	if (d <= 0)
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	dc01      	bgt.n	8004b3c <deltaticks+0x20>
		return 0;    // in the past
 8004b38:	2300      	movs	r3, #0
 8004b3a:	e008      	b.n	8004b4e <deltaticks+0x32>
	if ((d >> 16) != 0)
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	141b      	asrs	r3, r3, #16
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <deltaticks+0x2e>
		return 0xFFFF; // far ahead
 8004b44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004b48:	e001      	b.n	8004b4e <deltaticks+0x32>
	return (u2_t) d;
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	b29b      	uxth	r3, r3
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <hal_waitUntil>:

void hal_waitUntil(u4_t time)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b082      	sub	sp, #8
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
	while (deltaticks(time) != 0)
 8004b5e:	bf00      	nop
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f7ff ffdb 	bl	8004b1c <deltaticks>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1f9      	bne.n	8004b60 <hal_waitUntil+0xa>
		; // busy wait until timestamp is reached
}
 8004b6c:	bf00      	nop
 8004b6e:	bf00      	nop
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
	...

08004b78 <hal_checkTimer>:

// check and rewind for target time
u1_t hal_checkTimer(u4_t time)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
	u2_t dt;
	myTIMER.Instance->SR &= ~TIM_SR_CC1IF; // clear any pending interrupts
 8004b80:	4b1b      	ldr	r3, [pc, #108]	@ (8004bf0 <hal_checkTimer+0x78>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	691a      	ldr	r2, [r3, #16]
 8004b86:	4b1a      	ldr	r3, [pc, #104]	@ (8004bf0 <hal_checkTimer+0x78>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 0202 	bic.w	r2, r2, #2
 8004b8e:	611a      	str	r2, [r3, #16]
	if ((dt = deltaticks(time)) < 5) { // event is now (a few ticks ahead)
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7ff ffc3 	bl	8004b1c <deltaticks>
 8004b96:	4603      	mov	r3, r0
 8004b98:	81fb      	strh	r3, [r7, #14]
 8004b9a:	89fb      	ldrh	r3, [r7, #14]
 8004b9c:	2b04      	cmp	r3, #4
 8004b9e:	d809      	bhi.n	8004bb4 <hal_checkTimer+0x3c>
		myTIMER.Instance->DIER &= ~TIM_DIER_CC1IE; // disable IE
 8004ba0:	4b13      	ldr	r3, [pc, #76]	@ (8004bf0 <hal_checkTimer+0x78>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68da      	ldr	r2, [r3, #12]
 8004ba6:	4b12      	ldr	r3, [pc, #72]	@ (8004bf0 <hal_checkTimer+0x78>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 0202 	bic.w	r2, r2, #2
 8004bae:	60da      	str	r2, [r3, #12]
		return 1;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e018      	b.n	8004be6 <hal_checkTimer+0x6e>
	} else { // rewind timer (fully or to exact time))
		myTIMER.Instance->CCR1 = myTIMER.Instance->CNT + dt;   // set comparator
 8004bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8004bf0 <hal_checkTimer+0x78>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004bba:	89fa      	ldrh	r2, [r7, #14]
 8004bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8004bf0 <hal_checkTimer+0x78>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	440a      	add	r2, r1
 8004bc2:	635a      	str	r2, [r3, #52]	@ 0x34
		myTIMER.Instance->DIER |= TIM_DIER_CC1IE;  // enable IE
 8004bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8004bf0 <hal_checkTimer+0x78>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68da      	ldr	r2, [r3, #12]
 8004bca:	4b09      	ldr	r3, [pc, #36]	@ (8004bf0 <hal_checkTimer+0x78>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 0202 	orr.w	r2, r2, #2
 8004bd2:	60da      	str	r2, [r3, #12]
		myTIMER.Instance->CCER |= TIM_CCER_CC1E; // enable capture/compare uint 2
 8004bd4:	4b06      	ldr	r3, [pc, #24]	@ (8004bf0 <hal_checkTimer+0x78>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6a1a      	ldr	r2, [r3, #32]
 8004bda:	4b05      	ldr	r3, [pc, #20]	@ (8004bf0 <hal_checkTimer+0x78>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f042 0201 	orr.w	r2, r2, #1
 8004be2:	621a      	str	r2, [r3, #32]
		return 0;
 8004be4:	2300      	movs	r3, #0
	}
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	20000620 	.word	0x20000620

08004bf4 <hal_disableIRQs>:

// -----------------------------------------------------------------------------
// IRQ
void hal_disableIRQs()
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004bf8:	b672      	cpsid	i
}
 8004bfa:	bf00      	nop
	__disable_irq();
	//__set_BASEPRI(1 << 4);
	HAL.irqlevel++;
 8004bfc:	4b04      	ldr	r3, [pc, #16]	@ (8004c10 <hal_disableIRQs+0x1c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	3301      	adds	r3, #1
 8004c02:	4a03      	ldr	r2, [pc, #12]	@ (8004c10 <hal_disableIRQs+0x1c>)
 8004c04:	6013      	str	r3, [r2, #0]
}
 8004c06:	bf00      	nop
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	200002e0 	.word	0x200002e0

08004c14 <hal_enableIRQs>:

void hal_enableIRQs()
{
 8004c14:	b480      	push	{r7}
 8004c16:	af00      	add	r7, sp, #0
	if (--HAL.irqlevel == 0) {
 8004c18:	4b07      	ldr	r3, [pc, #28]	@ (8004c38 <hal_enableIRQs+0x24>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	4a06      	ldr	r2, [pc, #24]	@ (8004c38 <hal_enableIRQs+0x24>)
 8004c20:	6013      	str	r3, [r2, #0]
 8004c22:	4b05      	ldr	r3, [pc, #20]	@ (8004c38 <hal_enableIRQs+0x24>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <hal_enableIRQs+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 8004c2a:	b662      	cpsie	i
}
 8004c2c:	bf00      	nop
		__enable_irq();
		//__set_BASEPRI(0);
	}
}
 8004c2e:	bf00      	nop
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr
 8004c38:	200002e0 	.word	0x200002e0

08004c3c <hal_sleep>:

void hal_sleep()
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
	// low power sleep mode
#ifndef CFG_no_low_power_sleep_mode
	// PWR->CR |= PWR_CR_LPSDSR;
#endif
	// suspend execution until IRQ, regardless of the CPSR I-bit
	__WFI();
 8004c40:	bf30      	wfi
}
 8004c42:	bf00      	nop
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <hal_init>:

// -----------------------------------------------------------------------------

void hal_init()
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	af00      	add	r7, sp, #0
	memset(&HAL, 0x00, sizeof(HAL));
 8004c50:	2208      	movs	r2, #8
 8004c52:	2100      	movs	r1, #0
 8004c54:	4807      	ldr	r0, [pc, #28]	@ (8004c74 <hal_init+0x28>)
 8004c56:	f00a f9cb 	bl	800eff0 <memset>
	hal_disableIRQs();
 8004c5a:	f7ff ffcb 	bl	8004bf4 <hal_disableIRQs>
	// configure radio I/O and interrupt handler
	hal_io_init();
 8004c5e:	f7ff fe85 	bl	800496c <hal_io_init>
	// configure radio SPI
	hal_spi_init();
 8004c62:	f7ff fef0 	bl	8004a46 <hal_spi_init>
	// configure timer and interrupt handler
	hal_time_init();
 8004c66:	f7ff ff13 	bl	8004a90 <hal_time_init>
	hal_enableIRQs();
 8004c6a:	f7ff ffd3 	bl	8004c14 <hal_enableIRQs>
}
 8004c6e:	bf00      	nop
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	200002e0 	.word	0x200002e0

08004c78 <hal_failed>:

void hal_failed()
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	af00      	add	r7, sp, #0
	// HALT...
	hal_disableIRQs();
 8004c7c:	f7ff ffba 	bl	8004bf4 <hal_disableIRQs>
	hal_sleep();
 8004c80:	f7ff ffdc 	bl	8004c3c <hal_sleep>
	while (1)
 8004c84:	bf00      	nop
 8004c86:	e7fd      	b.n	8004c84 <hal_failed+0xc>

08004c88 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8004cfc <MX_I2C1_Init+0x74>)
 8004c8e:	4a1c      	ldr	r2, [pc, #112]	@ (8004d00 <MX_I2C1_Init+0x78>)
 8004c90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8004c92:	4b1a      	ldr	r3, [pc, #104]	@ (8004cfc <MX_I2C1_Init+0x74>)
 8004c94:	4a1b      	ldr	r2, [pc, #108]	@ (8004d04 <MX_I2C1_Init+0x7c>)
 8004c96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004c98:	4b18      	ldr	r3, [pc, #96]	@ (8004cfc <MX_I2C1_Init+0x74>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004c9e:	4b17      	ldr	r3, [pc, #92]	@ (8004cfc <MX_I2C1_Init+0x74>)
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004ca4:	4b15      	ldr	r3, [pc, #84]	@ (8004cfc <MX_I2C1_Init+0x74>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004caa:	4b14      	ldr	r3, [pc, #80]	@ (8004cfc <MX_I2C1_Init+0x74>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004cb0:	4b12      	ldr	r3, [pc, #72]	@ (8004cfc <MX_I2C1_Init+0x74>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004cb6:	4b11      	ldr	r3, [pc, #68]	@ (8004cfc <MX_I2C1_Init+0x74>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8004cfc <MX_I2C1_Init+0x74>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004cc2:	480e      	ldr	r0, [pc, #56]	@ (8004cfc <MX_I2C1_Init+0x74>)
 8004cc4:	f006 fbf8 	bl	800b4b8 <HAL_I2C_Init>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004cce:	f003 fbb9 	bl	8008444 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	4809      	ldr	r0, [pc, #36]	@ (8004cfc <MX_I2C1_Init+0x74>)
 8004cd6:	f007 fa67 	bl	800c1a8 <HAL_I2CEx_ConfigAnalogFilter>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004ce0:	f003 fbb0 	bl	8008444 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	4805      	ldr	r0, [pc, #20]	@ (8004cfc <MX_I2C1_Init+0x74>)
 8004ce8:	f007 faa9 	bl	800c23e <HAL_I2CEx_ConfigDigitalFilter>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004cf2:	f003 fba7 	bl	8008444 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004cf6:	bf00      	nop
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	200002e8 	.word	0x200002e8
 8004d00:	40005400 	.word	0x40005400
 8004d04:	10d19ce4 	.word	0x10d19ce4

08004d08 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b09e      	sub	sp, #120	@ 0x78
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d10:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]
 8004d18:	605a      	str	r2, [r3, #4]
 8004d1a:	609a      	str	r2, [r3, #8]
 8004d1c:	60da      	str	r2, [r3, #12]
 8004d1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004d20:	f107 0310 	add.w	r3, r7, #16
 8004d24:	2254      	movs	r2, #84	@ 0x54
 8004d26:	2100      	movs	r1, #0
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f00a f961 	bl	800eff0 <memset>
  if(i2cHandle->Instance==I2C1)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a1f      	ldr	r2, [pc, #124]	@ (8004db0 <HAL_I2C_MspInit+0xa8>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d137      	bne.n	8004da8 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004d38:	2340      	movs	r3, #64	@ 0x40
 8004d3a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d40:	f107 0310 	add.w	r3, r7, #16
 8004d44:	4618      	mov	r0, r3
 8004d46:	f008 f963 	bl	800d010 <HAL_RCCEx_PeriphCLKConfig>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d001      	beq.n	8004d54 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004d50:	f003 fb78 	bl	8008444 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d54:	4b17      	ldr	r3, [pc, #92]	@ (8004db4 <HAL_I2C_MspInit+0xac>)
 8004d56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d58:	4a16      	ldr	r2, [pc, #88]	@ (8004db4 <HAL_I2C_MspInit+0xac>)
 8004d5a:	f043 0301 	orr.w	r3, r3, #1
 8004d5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d60:	4b14      	ldr	r3, [pc, #80]	@ (8004db4 <HAL_I2C_MspInit+0xac>)
 8004d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	60fb      	str	r3, [r7, #12]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004d6c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004d70:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d72:	2312      	movs	r3, #18
 8004d74:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d76:	2300      	movs	r3, #0
 8004d78:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004d7e:	2304      	movs	r3, #4
 8004d80:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d82:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004d86:	4619      	mov	r1, r3
 8004d88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d8c:	f006 f9fa 	bl	800b184 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004d90:	4b08      	ldr	r3, [pc, #32]	@ (8004db4 <HAL_I2C_MspInit+0xac>)
 8004d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d94:	4a07      	ldr	r2, [pc, #28]	@ (8004db4 <HAL_I2C_MspInit+0xac>)
 8004d96:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004d9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d9c:	4b05      	ldr	r3, [pc, #20]	@ (8004db4 <HAL_I2C_MspInit+0xac>)
 8004d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004da4:	60bb      	str	r3, [r7, #8]
 8004da6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004da8:	bf00      	nop
 8004daa:	3778      	adds	r7, #120	@ 0x78
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	40005400 	.word	0x40005400
 8004db4:	40021000 	.word	0x40021000

08004db8 <getSf>:
enum {
	RSSI_OFF = 64, SNR_SCALEUP = 4
};

inline sf_t getSf(rps_t params)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	80fb      	strh	r3, [r7, #6]
	return (sf_t) (params & 0x7);
 8004dc2:	88fb      	ldrh	r3, [r7, #6]
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	f003 0307 	and.w	r3, r3, #7
 8004dca:	b2db      	uxtb	r3, r3
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <getBw>:
inline rps_t setSf(rps_t params, sf_t sf)
{
	return (rps_t) ((params & ~0x7) | sf);
}
inline bw_t getBw(rps_t params)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	4603      	mov	r3, r0
 8004de0:	80fb      	strh	r3, [r7, #6]
	return (bw_t) ((params >> 3) & 0x3);
 8004de2:	88fb      	ldrh	r3, [r7, #6]
 8004de4:	08db      	lsrs	r3, r3, #3
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	f003 0303 	and.w	r3, r3, #3
 8004dee:	b2db      	uxtb	r3, r3
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <getCr>:
inline rps_t setBw(rps_t params, bw_t cr)
{
	return (rps_t) ((params & ~0x18) | (cr << 3));
}
inline cr_t getCr(rps_t params)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	4603      	mov	r3, r0
 8004e04:	80fb      	strh	r3, [r7, #6]
	return (cr_t) ((params >> 5) & 0x3);
 8004e06:	88fb      	ldrh	r3, [r7, #6]
 8004e08:	095b      	lsrs	r3, r3, #5
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	f003 0303 	and.w	r3, r3, #3
 8004e12:	b2db      	uxtb	r3, r3
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <setCr>:
inline rps_t setCr(rps_t params, cr_t cr)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	4603      	mov	r3, r0
 8004e28:	460a      	mov	r2, r1
 8004e2a:	80fb      	strh	r3, [r7, #6]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	717b      	strb	r3, [r7, #5]
	return (rps_t) ((params & ~0x60) | (cr << 5));
 8004e30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e34:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8004e38:	b21a      	sxth	r2, r3
 8004e3a:	797b      	ldrb	r3, [r7, #5]
 8004e3c:	015b      	lsls	r3, r3, #5
 8004e3e:	b21b      	sxth	r3, r3
 8004e40:	4313      	orrs	r3, r2
 8004e42:	b21b      	sxth	r3, r3
 8004e44:	b29b      	uxth	r3, r3
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <getNocrc>:
inline int getNocrc(rps_t params)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	4603      	mov	r3, r0
 8004e5a:	80fb      	strh	r3, [r7, #6]
	return ((params >> 7) & 0x1);
 8004e5c:	88fb      	ldrh	r3, [r7, #6]
 8004e5e:	09db      	lsrs	r3, r3, #7
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	f003 0301 	and.w	r3, r3, #1
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <setNocrc>:
inline rps_t setNocrc(rps_t params, int nocrc)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b083      	sub	sp, #12
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	4603      	mov	r3, r0
 8004e7a:	6039      	str	r1, [r7, #0]
 8004e7c:	80fb      	strh	r3, [r7, #6]
	return (rps_t) ((params & ~0x80) | (nocrc << 7));
 8004e7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e86:	b21a      	sxth	r2, r3
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	01db      	lsls	r3, r3, #7
 8004e8c:	b21b      	sxth	r3, r3
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	b21b      	sxth	r3, r3
 8004e92:	b29b      	uxth	r3, r3
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <getIh>:
inline int getIh(rps_t params)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	80fb      	strh	r3, [r7, #6]
	return ((params >> 8) & 0xFF);
 8004eaa:	88fb      	ldrh	r3, [r7, #6]
 8004eac:	0a1b      	lsrs	r3, r3, #8
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	b2db      	uxtb	r3, r3
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <setIh>:
inline rps_t setIh(rps_t params, int ih)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	6039      	str	r1, [r7, #0]
 8004ec8:	80fb      	strh	r3, [r7, #6]
	return (rps_t) ((params & ~0xFF00) | (ih << 8));
 8004eca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	b21a      	sxth	r2, r3
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	021b      	lsls	r3, r3, #8
 8004ed6:	b21b      	sxth	r3, r3
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	b21b      	sxth	r3, r3
 8004edc:	b29b      	uxth	r3, r3
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
	...

08004eec <updr2rps>:
	return ((r1 ^ r2) & 0x1F) == 0;
}

extern const u1_t _DR2RPS_CRC[];
inline rps_t updr2rps(dr_t dr)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	71fb      	strb	r3, [r7, #7]
	return (rps_t) _DR2RPS_CRC[dr + 1];
 8004ef6:	79fb      	ldrb	r3, [r7, #7]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	4a04      	ldr	r2, [pc, #16]	@ (8004f0c <updr2rps+0x20>)
 8004efc:	5cd3      	ldrb	r3, [r2, r3]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	08012cf0 	.word	0x08012cf0

08004f10 <dndr2rps>:
inline rps_t dndr2rps(dr_t dr)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	4603      	mov	r3, r0
 8004f18:	71fb      	strb	r3, [r7, #7]
	return setNocrc(updr2rps(dr), 1);
 8004f1a:	79fb      	ldrb	r3, [r7, #7]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7ff ffe5 	bl	8004eec <updr2rps>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2101      	movs	r1, #1
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7ff ffa3 	bl	8004e72 <setNocrc>
 8004f2c:	4603      	mov	r3, r0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3708      	adds	r7, #8
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
	...

08004f38 <decDR>:
inline dr_t incDR(dr_t dr)
{
	return _DR2RPS_CRC[dr + 2] == ILLEGAL_RPS ? dr : (dr_t) (dr + 1);
} // increase data rate
inline dr_t decDR(dr_t dr)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	4603      	mov	r3, r0
 8004f40:	71fb      	strb	r3, [r7, #7]
	return _DR2RPS_CRC[dr] == ILLEGAL_RPS ? dr : (dr_t) (dr - 1);
 8004f42:	79fb      	ldrb	r3, [r7, #7]
 8004f44:	4a07      	ldr	r2, [pc, #28]	@ (8004f64 <decDR+0x2c>)
 8004f46:	5cd3      	ldrb	r3, [r2, r3]
 8004f48:	2bff      	cmp	r3, #255	@ 0xff
 8004f4a:	d003      	beq.n	8004f54 <decDR+0x1c>
 8004f4c:	79fb      	ldrb	r3, [r7, #7]
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	e000      	b.n	8004f56 <decDR+0x1e>
 8004f54:	79fb      	ldrb	r3, [r7, #7]
} // decrease data rate
 8004f56:	4618      	mov	r0, r3
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	08012cf0 	.word	0x08012cf0

08004f68 <validDR>:
inline dr_t assertDR(dr_t dr)
{
	return _DR2RPS_CRC[dr + 1] == ILLEGAL_RPS ? DR_DFLTMIN : dr;
}   // force into a valid DR
inline bit_t validDR(dr_t dr)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	4603      	mov	r3, r0
 8004f70:	71fb      	strb	r3, [r7, #7]
	return _DR2RPS_CRC[dr + 1] != ILLEGAL_RPS;
 8004f72:	79fb      	ldrb	r3, [r7, #7]
 8004f74:	3301      	adds	r3, #1
 8004f76:	4a06      	ldr	r2, [pc, #24]	@ (8004f90 <validDR+0x28>)
 8004f78:	5cd3      	ldrb	r3, [r2, r3]
 8004f7a:	2bff      	cmp	r3, #255	@ 0xff
 8004f7c:	bf14      	ite	ne
 8004f7e:	2301      	movne	r3, #1
 8004f80:	2300      	moveq	r3, #0
 8004f82:	b2db      	uxtb	r3, r3
} // in range
 8004f84:	4618      	mov	r0, r3
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	08012cf0 	.word	0x08012cf0

08004f94 <lowerDR>:
inline dr_t lowerDR(dr_t dr, u1_t n)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	460a      	mov	r2, r1
 8004f9e:	71fb      	strb	r3, [r7, #7]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	71bb      	strb	r3, [r7, #6]
	while (n--) {
 8004fa4:	e005      	b.n	8004fb2 <lowerDR+0x1e>
		dr = decDR(dr);
 8004fa6:	79fb      	ldrb	r3, [r7, #7]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7ff ffc5 	bl	8004f38 <decDR>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	71fb      	strb	r3, [r7, #7]
	while (n--) {
 8004fb2:	79bb      	ldrb	r3, [r7, #6]
 8004fb4:	1e5a      	subs	r2, r3, #1
 8004fb6:	71ba      	strb	r2, [r7, #6]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1f4      	bne.n	8004fa6 <lowerDR+0x12>
	}
	return dr;
 8004fbc:	79fb      	ldrb	r3, [r7, #7]
} // decrease data rate by n steps
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <os_rlsbf2>:

#if !defined(HAS_os_calls)

#if !defined(os_rlsbf2)
u2_t os_rlsbf2(xref2cu1_t buf)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
	return (u2_t) (buf[0] | (buf[1] << 8));
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	b21a      	sxth	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	021b      	lsls	r3, r3, #8
 8004fdc:	b21b      	sxth	r3, r3
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	b21b      	sxth	r3, r3
 8004fe2:	b29b      	uxth	r3, r3
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <os_rlsbf4>:
#endif

#if !defined(os_rlsbf4)
u4_t os_rlsbf4(xref2cu1_t buf)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
	return (u4_t) (buf[0] | (buf[1] << 8) | ((u4_t) buf[2] << 16)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	3301      	adds	r3, #1
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	021b      	lsls	r3, r3, #8
 8005006:	4313      	orrs	r3, r2
 8005008:	461a      	mov	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	3302      	adds	r3, #2
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	041b      	lsls	r3, r3, #16
 8005012:	431a      	orrs	r2, r3
			| ((u4_t) buf[3] << 24));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3303      	adds	r3, #3
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	061b      	lsls	r3, r3, #24
	return (u4_t) (buf[0] | (buf[1] << 8) | ((u4_t) buf[2] << 16)
 800501c:	4313      	orrs	r3, r2
}
 800501e:	4618      	mov	r0, r3
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <os_rmsbf4>:
#endif

#if !defined(os_rmsbf4)
u4_t os_rmsbf4(xref2cu1_t buf)
{
 800502a:	b480      	push	{r7}
 800502c:	b083      	sub	sp, #12
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
	return (u4_t) (buf[3] | (buf[2] << 8) | ((u4_t) buf[1] << 16)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	3303      	adds	r3, #3
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	461a      	mov	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	3302      	adds	r3, #2
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	021b      	lsls	r3, r3, #8
 8005042:	4313      	orrs	r3, r2
 8005044:	461a      	mov	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	3301      	adds	r3, #1
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	041b      	lsls	r3, r3, #16
 800504e:	431a      	orrs	r2, r3
			| ((u4_t) buf[0] << 24));
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	061b      	lsls	r3, r3, #24
	return (u4_t) (buf[3] | (buf[2] << 8) | ((u4_t) buf[1] << 16)
 8005056:	4313      	orrs	r3, r2
}
 8005058:	4618      	mov	r0, r3
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <os_wlsbf2>:
#endif

#if !defined(os_wlsbf2)
void os_wlsbf2(xref2u1_t buf, u2_t v)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	460b      	mov	r3, r1
 800506e:	807b      	strh	r3, [r7, #2]
	buf[0] = v;
 8005070:	887b      	ldrh	r3, [r7, #2]
 8005072:	b2da      	uxtb	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	701a      	strb	r2, [r3, #0]
	buf[1] = v >> 8;
 8005078:	887b      	ldrh	r3, [r7, #2]
 800507a:	0a1b      	lsrs	r3, r3, #8
 800507c:	b29a      	uxth	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	3301      	adds	r3, #1
 8005082:	b2d2      	uxtb	r2, r2
 8005084:	701a      	strb	r2, [r3, #0]
}
 8005086:	bf00      	nop
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <os_wlsbf4>:
#endif

#if !defined(os_wlsbf4)
void os_wlsbf4(xref2u1_t buf, u4_t v)
{
 8005092:	b480      	push	{r7}
 8005094:	b083      	sub	sp, #12
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
 800509a:	6039      	str	r1, [r7, #0]
	buf[0] = v;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	b2da      	uxtb	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	701a      	strb	r2, [r3, #0]
	buf[1] = v >> 8;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	0a1a      	lsrs	r2, r3, #8
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3301      	adds	r3, #1
 80050ac:	b2d2      	uxtb	r2, r2
 80050ae:	701a      	strb	r2, [r3, #0]
	buf[2] = v >> 16;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	0c1a      	lsrs	r2, r3, #16
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	3302      	adds	r3, #2
 80050b8:	b2d2      	uxtb	r2, r2
 80050ba:	701a      	strb	r2, [r3, #0]
	buf[3] = v >> 24;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	0e1a      	lsrs	r2, r3, #24
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	3303      	adds	r3, #3
 80050c4:	b2d2      	uxtb	r2, r2
 80050c6:	701a      	strb	r2, [r3, #0]
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <os_wmsbf4>:
#endif

#if !defined(os_wmsbf4)
void os_wmsbf4(xref2u1_t buf, u4_t v)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
	buf[3] = v;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	3303      	adds	r3, #3
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	b2d2      	uxtb	r2, r2
 80050e6:	701a      	strb	r2, [r3, #0]
	buf[2] = v >> 8;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	0a1a      	lsrs	r2, r3, #8
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	3302      	adds	r3, #2
 80050f0:	b2d2      	uxtb	r2, r2
 80050f2:	701a      	strb	r2, [r3, #0]
	buf[1] = v >> 16;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	0c1a      	lsrs	r2, r3, #16
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	3301      	adds	r3, #1
 80050fc:	b2d2      	uxtb	r2, r2
 80050fe:	701a      	strb	r2, [r3, #0]
	buf[0] = v >> 24;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	0e1b      	lsrs	r3, r3, #24
 8005104:	b2da      	uxtb	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	701a      	strb	r2, [r3, #0]
}
 800510a:	bf00      	nop
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <os_getBattLevel>:
#endif

#if !defined(os_getBattLevel)
u1_t os_getBattLevel(void)
{
 8005116:	b480      	push	{r7}
 8005118:	af00      	add	r7, sp, #0
	return MCMD_DEVS_BATT_NOINFO;
 800511a:	23ff      	movs	r3, #255	@ 0xff
}
 800511c:	4618      	mov	r0, r3
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <os_crc16>:
#endif

#if !defined(os_crc16)
// New CRC-16 CCITT(XMODEM) checksum for beacons:
u2_t os_crc16(xref2u1_t data, uint len)
{
 8005126:	b480      	push	{r7}
 8005128:	b087      	sub	sp, #28
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
 800512e:	6039      	str	r1, [r7, #0]
	u2_t remainder = 0;
 8005130:	2300      	movs	r3, #0
 8005132:	82fb      	strh	r3, [r7, #22]
	u2_t polynomial = 0x1021;
 8005134:	f241 0321 	movw	r3, #4129	@ 0x1021
 8005138:	81bb      	strh	r3, [r7, #12]
	for (uint i = 0; i < len; i++) {
 800513a:	2300      	movs	r3, #0
 800513c:	613b      	str	r3, [r7, #16]
 800513e:	e026      	b.n	800518e <os_crc16+0x68>
		remainder ^= data[i] << 8;
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	4413      	add	r3, r2
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	021b      	lsls	r3, r3, #8
 800514a:	b21a      	sxth	r2, r3
 800514c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005150:	4053      	eors	r3, r2
 8005152:	b21b      	sxth	r3, r3
 8005154:	82fb      	strh	r3, [r7, #22]
		for (u1_t bit = 8; bit > 0; bit--) {
 8005156:	2308      	movs	r3, #8
 8005158:	73fb      	strb	r3, [r7, #15]
 800515a:	e012      	b.n	8005182 <os_crc16+0x5c>
			if ((remainder & 0x8000))
 800515c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005160:	2b00      	cmp	r3, #0
 8005162:	da08      	bge.n	8005176 <os_crc16+0x50>
				remainder = (remainder << 1) ^ polynomial;
 8005164:	8afb      	ldrh	r3, [r7, #22]
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	b21a      	sxth	r2, r3
 800516a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800516e:	4053      	eors	r3, r2
 8005170:	b21b      	sxth	r3, r3
 8005172:	82fb      	strh	r3, [r7, #22]
 8005174:	e002      	b.n	800517c <os_crc16+0x56>
			else
				remainder <<= 1;
 8005176:	8afb      	ldrh	r3, [r7, #22]
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	82fb      	strh	r3, [r7, #22]
		for (u1_t bit = 8; bit > 0; bit--) {
 800517c:	7bfb      	ldrb	r3, [r7, #15]
 800517e:	3b01      	subs	r3, #1
 8005180:	73fb      	strb	r3, [r7, #15]
 8005182:	7bfb      	ldrb	r3, [r7, #15]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1e9      	bne.n	800515c <os_crc16+0x36>
	for (uint i = 0; i < len; i++) {
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	3301      	adds	r3, #1
 800518c:	613b      	str	r3, [r7, #16]
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	429a      	cmp	r2, r3
 8005194:	d3d4      	bcc.n	8005140 <os_crc16+0x1a>
		}
	}
	return remainder;
 8005196:	8afb      	ldrh	r3, [r7, #22]
}
 8005198:	4618      	mov	r0, r3
 800519a:	371c      	adds	r7, #28
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <micB0>:

// ================================================================================
// BEG AES

static void micB0(u4_t devaddr, u4_t seqno, int dndir, int len)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
 80051b0:	603b      	str	r3, [r7, #0]
	os_clearMem(AESaux, 16);
 80051b2:	2210      	movs	r2, #16
 80051b4:	2100      	movs	r1, #0
 80051b6:	4810      	ldr	r0, [pc, #64]	@ (80051f8 <micB0+0x54>)
 80051b8:	f009 ff1a 	bl	800eff0 <memset>
	AESaux[0] = 0x49;
 80051bc:	4b0e      	ldr	r3, [pc, #56]	@ (80051f8 <micB0+0x54>)
 80051be:	2249      	movs	r2, #73	@ 0x49
 80051c0:	701a      	strb	r2, [r3, #0]
	AESaux[5] = dndir ? 1 : 0;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	bf14      	ite	ne
 80051c8:	2301      	movne	r3, #1
 80051ca:	2300      	moveq	r3, #0
 80051cc:	b2da      	uxtb	r2, r3
 80051ce:	4b0b      	ldr	r3, [pc, #44]	@ (80051fc <micB0+0x58>)
 80051d0:	701a      	strb	r2, [r3, #0]
	AESaux[15] = len;
 80051d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005200 <micB0+0x5c>)
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	701a      	strb	r2, [r3, #0]
	os_wlsbf4(AESaux + 6, devaddr);
 80051da:	4b0a      	ldr	r3, [pc, #40]	@ (8005204 <micB0+0x60>)
 80051dc:	68f9      	ldr	r1, [r7, #12]
 80051de:	4618      	mov	r0, r3
 80051e0:	f7ff ff57 	bl	8005092 <os_wlsbf4>
	os_wlsbf4(AESaux + 10, seqno);
 80051e4:	4b08      	ldr	r3, [pc, #32]	@ (8005208 <micB0+0x64>)
 80051e6:	68b9      	ldr	r1, [r7, #8]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7ff ff52 	bl	8005092 <os_wlsbf4>
}
 80051ee:	bf00      	nop
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	20000144 	.word	0x20000144
 80051fc:	20000149 	.word	0x20000149
 8005200:	20000153 	.word	0x20000153
 8005204:	2000014a 	.word	0x2000014a
 8005208:	2000014e 	.word	0x2000014e

0800520c <aes_verifyMic>:

static int aes_verifyMic(xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir,
		xref2u1_t pdu, int len)
{
 800520c:	b590      	push	{r4, r7, lr}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
 8005218:	603b      	str	r3, [r7, #0]
	micB0(devaddr, seqno, dndir, len);
 800521a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	6879      	ldr	r1, [r7, #4]
 8005220:	68b8      	ldr	r0, [r7, #8]
 8005222:	f7ff ffbf 	bl	80051a4 <micB0>
	os_copyMem(AESkey, key, 16);
 8005226:	2210      	movs	r2, #16
 8005228:	68f9      	ldr	r1, [r7, #12]
 800522a:	480d      	ldr	r0, [pc, #52]	@ (8005260 <aes_verifyMic+0x54>)
 800522c:	f009 ff42 	bl	800f0b4 <memcpy>
	return os_aes(AES_MIC, pdu, len) == os_rmsbf4(pdu + len);
 8005230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005232:	b29b      	uxth	r3, r3
 8005234:	461a      	mov	r2, r3
 8005236:	6a39      	ldr	r1, [r7, #32]
 8005238:	2002      	movs	r0, #2
 800523a:	f7fb fffd 	bl	8001238 <os_aes>
 800523e:	4604      	mov	r4, r0
 8005240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005242:	6a3a      	ldr	r2, [r7, #32]
 8005244:	4413      	add	r3, r2
 8005246:	4618      	mov	r0, r3
 8005248:	f7ff feef 	bl	800502a <os_rmsbf4>
 800524c:	4603      	mov	r3, r0
 800524e:	429c      	cmp	r4, r3
 8005250:	bf0c      	ite	eq
 8005252:	2301      	moveq	r3, #1
 8005254:	2300      	movne	r3, #0
 8005256:	b2db      	uxtb	r3, r3
}
 8005258:	4618      	mov	r0, r3
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	bd90      	pop	{r4, r7, pc}
 8005260:	20000154 	.word	0x20000154

08005264 <aes_appendMic>:

static void aes_appendMic(xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir,
		xref2u1_t pdu, int len)
{
 8005264:	b590      	push	{r4, r7, lr}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
 8005270:	603b      	str	r3, [r7, #0]
	micB0(devaddr, seqno, dndir, len);
 8005272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	6879      	ldr	r1, [r7, #4]
 8005278:	68b8      	ldr	r0, [r7, #8]
 800527a:	f7ff ff93 	bl	80051a4 <micB0>
	os_copyMem(AESkey, key, 16);
 800527e:	2210      	movs	r2, #16
 8005280:	68f9      	ldr	r1, [r7, #12]
 8005282:	480b      	ldr	r0, [pc, #44]	@ (80052b0 <aes_appendMic+0x4c>)
 8005284:	f009 ff16 	bl	800f0b4 <memcpy>
	// MSB because of internal structure of AES
	os_wmsbf4(pdu + len, os_aes(AES_MIC, pdu, len));
 8005288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528a:	6a3a      	ldr	r2, [r7, #32]
 800528c:	18d4      	adds	r4, r2, r3
 800528e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005290:	b29b      	uxth	r3, r3
 8005292:	461a      	mov	r2, r3
 8005294:	6a39      	ldr	r1, [r7, #32]
 8005296:	2002      	movs	r0, #2
 8005298:	f7fb ffce 	bl	8001238 <os_aes>
 800529c:	4603      	mov	r3, r0
 800529e:	4619      	mov	r1, r3
 80052a0:	4620      	mov	r0, r4
 80052a2:	f7ff ff17 	bl	80050d4 <os_wmsbf4>
}
 80052a6:	bf00      	nop
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd90      	pop	{r4, r7, pc}
 80052ae:	bf00      	nop
 80052b0:	20000154 	.word	0x20000154

080052b4 <aes_appendMic0>:

static void aes_appendMic0(xref2u1_t pdu, int len)
{
 80052b4:	b590      	push	{r4, r7, lr}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
	os_getDevKey(AESkey);
 80052be:	480b      	ldr	r0, [pc, #44]	@ (80052ec <aes_appendMic0+0x38>)
 80052c0:	f002 fe38 	bl	8007f34 <os_getDevKey>
	os_wmsbf4(pdu + len, os_aes(AES_MIC | AES_MICNOAUX, pdu, len)); // MSB because of internal structure of AES
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	18d4      	adds	r4, r2, r3
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	461a      	mov	r2, r3
 80052d0:	6879      	ldr	r1, [r7, #4]
 80052d2:	200a      	movs	r0, #10
 80052d4:	f7fb ffb0 	bl	8001238 <os_aes>
 80052d8:	4603      	mov	r3, r0
 80052da:	4619      	mov	r1, r3
 80052dc:	4620      	mov	r0, r4
 80052de:	f7ff fef9 	bl	80050d4 <os_wmsbf4>
}
 80052e2:	bf00      	nop
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd90      	pop	{r4, r7, pc}
 80052ea:	bf00      	nop
 80052ec:	20000154 	.word	0x20000154

080052f0 <aes_verifyMic0>:

static int aes_verifyMic0(xref2u1_t pdu, int len)
{
 80052f0:	b590      	push	{r4, r7, lr}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
	os_getDevKey(AESkey);
 80052fa:	480d      	ldr	r0, [pc, #52]	@ (8005330 <aes_verifyMic0+0x40>)
 80052fc:	f002 fe1a 	bl	8007f34 <os_getDevKey>
	return os_aes(AES_MIC | AES_MICNOAUX, pdu, len) == os_rmsbf4(pdu + len);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	b29b      	uxth	r3, r3
 8005304:	461a      	mov	r2, r3
 8005306:	6879      	ldr	r1, [r7, #4]
 8005308:	200a      	movs	r0, #10
 800530a:	f7fb ff95 	bl	8001238 <os_aes>
 800530e:	4604      	mov	r4, r0
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	4413      	add	r3, r2
 8005316:	4618      	mov	r0, r3
 8005318:	f7ff fe87 	bl	800502a <os_rmsbf4>
 800531c:	4603      	mov	r3, r0
 800531e:	429c      	cmp	r4, r3
 8005320:	bf0c      	ite	eq
 8005322:	2301      	moveq	r3, #1
 8005324:	2300      	movne	r3, #0
 8005326:	b2db      	uxtb	r3, r3
}
 8005328:	4618      	mov	r0, r3
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	bd90      	pop	{r4, r7, pc}
 8005330:	20000154 	.word	0x20000154

08005334 <aes_encrypt>:

static void aes_encrypt(xref2u1_t pdu, int len)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
	os_getDevKey(AESkey);
 800533e:	4807      	ldr	r0, [pc, #28]	@ (800535c <aes_encrypt+0x28>)
 8005340:	f002 fdf8 	bl	8007f34 <os_getDevKey>
	os_aes(AES_ENC, pdu, len);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	b29b      	uxth	r3, r3
 8005348:	461a      	mov	r2, r3
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	2000      	movs	r0, #0
 800534e:	f7fb ff73 	bl	8001238 <os_aes>
}
 8005352:	bf00      	nop
 8005354:	3708      	adds	r7, #8
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	20000154 	.word	0x20000154

08005360 <aes_cipher>:

static void aes_cipher(xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir,
		xref2u1_t payload, int len)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
 800536c:	603b      	str	r3, [r7, #0]
	if (len <= 0)
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	2b00      	cmp	r3, #0
 8005372:	dd29      	ble.n	80053c8 <aes_cipher+0x68>
		return;
	os_clearMem(AESaux, 16);
 8005374:	2210      	movs	r2, #16
 8005376:	2100      	movs	r1, #0
 8005378:	4815      	ldr	r0, [pc, #84]	@ (80053d0 <aes_cipher+0x70>)
 800537a:	f009 fe39 	bl	800eff0 <memset>
	AESaux[0] = AESaux[15] = 1; // mode=cipher / dir=down / block counter=1
 800537e:	4b15      	ldr	r3, [pc, #84]	@ (80053d4 <aes_cipher+0x74>)
 8005380:	2201      	movs	r2, #1
 8005382:	701a      	strb	r2, [r3, #0]
 8005384:	4a12      	ldr	r2, [pc, #72]	@ (80053d0 <aes_cipher+0x70>)
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	7013      	strb	r3, [r2, #0]
	AESaux[5] = dndir ? 1 : 0;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	bf14      	ite	ne
 8005390:	2301      	movne	r3, #1
 8005392:	2300      	moveq	r3, #0
 8005394:	b2da      	uxtb	r2, r3
 8005396:	4b10      	ldr	r3, [pc, #64]	@ (80053d8 <aes_cipher+0x78>)
 8005398:	701a      	strb	r2, [r3, #0]
	os_wlsbf4(AESaux + 6, devaddr);
 800539a:	4b10      	ldr	r3, [pc, #64]	@ (80053dc <aes_cipher+0x7c>)
 800539c:	68b9      	ldr	r1, [r7, #8]
 800539e:	4618      	mov	r0, r3
 80053a0:	f7ff fe77 	bl	8005092 <os_wlsbf4>
	os_wlsbf4(AESaux + 10, seqno);
 80053a4:	4b0e      	ldr	r3, [pc, #56]	@ (80053e0 <aes_cipher+0x80>)
 80053a6:	6879      	ldr	r1, [r7, #4]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7ff fe72 	bl	8005092 <os_wlsbf4>
	os_copyMem(AESkey, key, 16);
 80053ae:	2210      	movs	r2, #16
 80053b0:	68f9      	ldr	r1, [r7, #12]
 80053b2:	480c      	ldr	r0, [pc, #48]	@ (80053e4 <aes_cipher+0x84>)
 80053b4:	f009 fe7e 	bl	800f0b4 <memcpy>
	os_aes(AES_CTR, payload, len);
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	461a      	mov	r2, r3
 80053be:	69b9      	ldr	r1, [r7, #24]
 80053c0:	2004      	movs	r0, #4
 80053c2:	f7fb ff39 	bl	8001238 <os_aes>
 80053c6:	e000      	b.n	80053ca <aes_cipher+0x6a>
		return;
 80053c8:	bf00      	nop
}
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	20000144 	.word	0x20000144
 80053d4:	20000153 	.word	0x20000153
 80053d8:	20000149 	.word	0x20000149
 80053dc:	2000014a 	.word	0x2000014a
 80053e0:	2000014e 	.word	0x2000014e
 80053e4:	20000154 	.word	0x20000154

080053e8 <aes_sessKeys>:

static void aes_sessKeys(u2_t devnonce, xref2cu1_t artnonce, xref2u1_t nwkkey,
		xref2u1_t artkey)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60b9      	str	r1, [r7, #8]
 80053f0:	607a      	str	r2, [r7, #4]
 80053f2:	603b      	str	r3, [r7, #0]
 80053f4:	4603      	mov	r3, r0
 80053f6:	81fb      	strh	r3, [r7, #14]
	os_clearMem(nwkkey, 16);
 80053f8:	2210      	movs	r2, #16
 80053fa:	2100      	movs	r1, #0
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f009 fdf7 	bl	800eff0 <memset>
	nwkkey[0] = 0x01;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	701a      	strb	r2, [r3, #0]
	os_copyMem(nwkkey + 1, artnonce, LEN_ARTNONCE + LEN_NETID);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	3301      	adds	r3, #1
 800540c:	2206      	movs	r2, #6
 800540e:	68b9      	ldr	r1, [r7, #8]
 8005410:	4618      	mov	r0, r3
 8005412:	f009 fe4f 	bl	800f0b4 <memcpy>
	os_wlsbf2(nwkkey + 1 + LEN_ARTNONCE + LEN_NETID, devnonce);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	3307      	adds	r3, #7
 800541a:	89fa      	ldrh	r2, [r7, #14]
 800541c:	4611      	mov	r1, r2
 800541e:	4618      	mov	r0, r3
 8005420:	f7ff fe20 	bl	8005064 <os_wlsbf2>
	os_copyMem(artkey, nwkkey, 16);
 8005424:	2210      	movs	r2, #16
 8005426:	6879      	ldr	r1, [r7, #4]
 8005428:	6838      	ldr	r0, [r7, #0]
 800542a:	f009 fe43 	bl	800f0b4 <memcpy>
	artkey[0] = 0x02;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2202      	movs	r2, #2
 8005432:	701a      	strb	r2, [r3, #0]

	os_getDevKey(AESkey);
 8005434:	4809      	ldr	r0, [pc, #36]	@ (800545c <aes_sessKeys+0x74>)
 8005436:	f002 fd7d 	bl	8007f34 <os_getDevKey>
	os_aes(AES_ENC, nwkkey, 16);
 800543a:	2210      	movs	r2, #16
 800543c:	6879      	ldr	r1, [r7, #4]
 800543e:	2000      	movs	r0, #0
 8005440:	f7fb fefa 	bl	8001238 <os_aes>
	os_getDevKey(AESkey);
 8005444:	4805      	ldr	r0, [pc, #20]	@ (800545c <aes_sessKeys+0x74>)
 8005446:	f002 fd75 	bl	8007f34 <os_getDevKey>
	os_aes(AES_ENC, artkey, 16);
 800544a:	2210      	movs	r2, #16
 800544c:	6839      	ldr	r1, [r7, #0]
 800544e:	2000      	movs	r0, #0
 8005450:	f7fb fef2 	bl	8001238 <os_aes>
}
 8005454:	bf00      	nop
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	20000154 	.word	0x20000154

08005460 <getSensitivity>:
		{ 141 - 138, 141 - 135, 141 - 132 },  // SF11
		{ 141 - 141, 141 - 138, 141 - 135 }   // SF12
};

int getSensitivity(rps_t rps)
{
 8005460:	b590      	push	{r4, r7, lr}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	4603      	mov	r3, r0
 8005468:	80fb      	strh	r3, [r7, #6]
	return -141 + SENSITIVITY[getSf(rps)][getBw(rps)];
 800546a:	88fb      	ldrh	r3, [r7, #6]
 800546c:	4618      	mov	r0, r3
 800546e:	f7ff fca3 	bl	8004db8 <getSf>
 8005472:	4603      	mov	r3, r0
 8005474:	461c      	mov	r4, r3
 8005476:	88fb      	ldrh	r3, [r7, #6]
 8005478:	4618      	mov	r0, r3
 800547a:	f7ff fcad 	bl	8004dd8 <getBw>
 800547e:	4603      	mov	r3, r0
 8005480:	4619      	mov	r1, r3
 8005482:	4a06      	ldr	r2, [pc, #24]	@ (800549c <getSensitivity+0x3c>)
 8005484:	4623      	mov	r3, r4
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	4423      	add	r3, r4
 800548a:	4413      	add	r3, r2
 800548c:	440b      	add	r3, r1
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	3b8d      	subs	r3, #141	@ 0x8d
}
 8005492:	4618      	mov	r0, r3
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	bd90      	pop	{r4, r7, pc}
 800549a:	bf00      	nop
 800549c:	08012d0c 	.word	0x08012d0c

080054a0 <calcAirTime>:

ostime_t calcAirTime(rps_t rps, u1_t plen)
{
 80054a0:	b590      	push	{r4, r7, lr}
 80054a2:	b087      	sub	sp, #28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	4603      	mov	r3, r0
 80054a8:	460a      	mov	r2, r1
 80054aa:	80fb      	strh	r3, [r7, #6]
 80054ac:	4613      	mov	r3, r2
 80054ae:	717b      	strb	r3, [r7, #5]
	u1_t bw = getBw(rps);  // 0,1,2 = 125,250,500kHz
 80054b0:	88fb      	ldrh	r3, [r7, #6]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7ff fc90 	bl	8004dd8 <getBw>
 80054b8:	4603      	mov	r3, r0
 80054ba:	72fb      	strb	r3, [r7, #11]
	u1_t sf = getSf(rps);  // 0=FSK, 1..6 = SF7..12
 80054bc:	88fb      	ldrh	r3, [r7, #6]
 80054be:	4618      	mov	r0, r3
 80054c0:	f7ff fc7a 	bl	8004db8 <getSf>
 80054c4:	4603      	mov	r3, r0
 80054c6:	72bb      	strb	r3, [r7, #10]
	if (sf == FSK) {
 80054c8:	7abb      	ldrb	r3, [r7, #10]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10c      	bne.n	80054e8 <calcAirTime+0x48>
		return (plen + /*preamble*/5 + /*syncword*/3 + /*len*/1 + /*crc*/2)
 80054ce:	797b      	ldrb	r3, [r7, #5]
 80054d0:	330b      	adds	r3, #11
				* /*bits/byte*/8 * (s4_t) OSTICKS_PER_SEC / /*kbit/s*/50000;
 80054d2:	f44f 327a 	mov.w	r2, #256000	@ 0x3e800
 80054d6:	fb02 f303 	mul.w	r3, r2, r3
 80054da:	4a3c      	ldr	r2, [pc, #240]	@ (80055cc <calcAirTime+0x12c>)
 80054dc:	fb82 1203 	smull	r1, r2, r2, r3
 80054e0:	1312      	asrs	r2, r2, #12
 80054e2:	17db      	asrs	r3, r3, #31
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	e06d      	b.n	80055c4 <calcAirTime+0x124>
	}
	u1_t sfx = 4 * (sf + (7 - SF7));
 80054e8:	7abb      	ldrb	r3, [r7, #10]
 80054ea:	3306      	adds	r3, #6
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	75fb      	strb	r3, [r7, #23]
	u1_t q = sfx - (sf >= SF11 ? 8 : 0);
 80054f2:	7abb      	ldrb	r3, [r7, #10]
 80054f4:	2b04      	cmp	r3, #4
 80054f6:	d901      	bls.n	80054fc <calcAirTime+0x5c>
 80054f8:	2308      	movs	r3, #8
 80054fa:	e000      	b.n	80054fe <calcAirTime+0x5e>
 80054fc:	2300      	movs	r3, #0
 80054fe:	7dfa      	ldrb	r2, [r7, #23]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	727b      	strb	r3, [r7, #9]
	int tmp = 8 * plen - sfx + 28 + (getNocrc(rps) ? 0 : 16)
 8005504:	797b      	ldrb	r3, [r7, #5]
 8005506:	00da      	lsls	r2, r3, #3
 8005508:	7dfb      	ldrb	r3, [r7, #23]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	f103 041c 	add.w	r4, r3, #28
 8005510:	88fb      	ldrh	r3, [r7, #6]
 8005512:	4618      	mov	r0, r3
 8005514:	f7ff fc9d 	bl	8004e52 <getNocrc>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <calcAirTime+0x82>
 800551e:	2300      	movs	r3, #0
 8005520:	e000      	b.n	8005524 <calcAirTime+0x84>
 8005522:	2310      	movs	r3, #16
 8005524:	441c      	add	r4, r3
			- (getIh(rps) ? 20 : 0);
 8005526:	88fb      	ldrh	r3, [r7, #6]
 8005528:	4618      	mov	r0, r3
 800552a:	f7ff fcb9 	bl	8004ea0 <getIh>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <calcAirTime+0x98>
 8005534:	2314      	movs	r3, #20
 8005536:	e000      	b.n	800553a <calcAirTime+0x9a>
 8005538:	2300      	movs	r3, #0
	int tmp = 8 * plen - sfx + 28 + (getNocrc(rps) ? 0 : 16)
 800553a:	1ae3      	subs	r3, r4, r3
 800553c:	613b      	str	r3, [r7, #16]
	if (tmp > 0) {
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	2b00      	cmp	r3, #0
 8005542:	dd15      	ble.n	8005570 <calcAirTime+0xd0>
		tmp = (tmp + q - 1) / q;
 8005544:	7a7a      	ldrb	r2, [r7, #9]
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	4413      	add	r3, r2
 800554a:	1e5a      	subs	r2, r3, #1
 800554c:	7a7b      	ldrb	r3, [r7, #9]
 800554e:	fb92 f3f3 	sdiv	r3, r2, r3
 8005552:	613b      	str	r3, [r7, #16]
		tmp *= getCr(rps) + 5;
 8005554:	88fb      	ldrh	r3, [r7, #6]
 8005556:	4618      	mov	r0, r3
 8005558:	f7ff fc50 	bl	8004dfc <getCr>
 800555c:	4603      	mov	r3, r0
 800555e:	1d5a      	adds	r2, r3, #5
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	fb02 f303 	mul.w	r3, r2, r3
 8005566:	613b      	str	r3, [r7, #16]
		tmp += 8;
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	3308      	adds	r3, #8
 800556c:	613b      	str	r3, [r7, #16]
 800556e:	e001      	b.n	8005574 <calcAirTime+0xd4>
	} else {
		tmp = 8;
 8005570:	2308      	movs	r3, #8
 8005572:	613b      	str	r3, [r7, #16]
	}
	tmp = (tmp << 2) + /*preamble*/49 /* 4 * (8 + 4.25) */;
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	3331      	adds	r3, #49	@ 0x31
 800557a:	613b      	str	r3, [r7, #16]
	//
	// osticks =  tmp * OSTICKS_PER_SEC * 1<<sf / bw
	//
	// 3 => counter reduced divisor 125000/8 => 15625
	// 2 => counter 2 shift on tmp
	sfx = sf + (7 - SF7) - (3 + 2) - bw;
 800557c:	7aba      	ldrb	r2, [r7, #10]
 800557e:	7afb      	ldrb	r3, [r7, #11]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	b2db      	uxtb	r3, r3
 8005584:	3301      	adds	r3, #1
 8005586:	75fb      	strb	r3, [r7, #23]
	int div = 15625;
 8005588:	f643 5309 	movw	r3, #15625	@ 0x3d09
 800558c:	60fb      	str	r3, [r7, #12]
	if (sfx > 4) {
 800558e:	7dfb      	ldrb	r3, [r7, #23]
 8005590:	2b04      	cmp	r3, #4
 8005592:	d907      	bls.n	80055a4 <calcAirTime+0x104>
		// prevent 32bit signed int overflow in last step
		div >>= sfx - 4;
 8005594:	7dfb      	ldrb	r3, [r7, #23]
 8005596:	3b04      	subs	r3, #4
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	fa42 f303 	asr.w	r3, r2, r3
 800559e:	60fb      	str	r3, [r7, #12]
		sfx = 4;
 80055a0:	2304      	movs	r3, #4
 80055a2:	75fb      	strb	r3, [r7, #23]
	}
	// Need 32bit arithmetic for this last step
	return (((ostime_t) tmp << sfx) * OSTICKS_PER_SEC + div / 2) / div;
 80055a4:	7dfb      	ldrb	r3, [r7, #23]
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ac:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80055b0:	fb03 f202 	mul.w	r2, r3, r2
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	0fd9      	lsrs	r1, r3, #31
 80055b8:	440b      	add	r3, r1
 80055ba:	105b      	asrs	r3, r3, #1
 80055bc:	441a      	add	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	fb92 f3f3 	sdiv	r3, r2, r3
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	371c      	adds	r7, #28
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd90      	pop	{r4, r7, pc}
 80055cc:	14f8b589 	.word	0x14f8b589

080055d0 <calcRxWindow>:
    us2osticksRound(128<<0)   // ------    DR_SF7CR
#endif
		};

static ostime_t calcRxWindow(u1_t secs, dr_t dr)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	4603      	mov	r3, r0
 80055d8:	460a      	mov	r2, r1
 80055da:	71fb      	strb	r3, [r7, #7]
 80055dc:	4613      	mov	r3, r2
 80055de:	71bb      	strb	r3, [r7, #6]
	ostime_t rxoff, err;
	if (secs == 0) {
 80055e0:	79fb      	ldrb	r3, [r7, #7]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d108      	bne.n	80055f8 <calcRxWindow+0x28>
		// aka 128 secs (next becaon)
		rxoff = LMIC.drift;
 80055e6:	4b22      	ldr	r3, [pc, #136]	@ (8005670 <calcRxWindow+0xa0>)
 80055e8:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 80055ec:	617b      	str	r3, [r7, #20]
		err = LMIC.lastDriftDiff;
 80055ee:	4b20      	ldr	r3, [pc, #128]	@ (8005670 <calcRxWindow+0xa0>)
 80055f0:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 80055f4:	613b      	str	r3, [r7, #16]
 80055f6:	e011      	b.n	800561c <calcRxWindow+0x4c>
	} else {
		// scheduled RX window within secs into current beacon period
		rxoff = (LMIC.drift * (ostime_t) secs) >> BCN_INTV_exp;
 80055f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005670 <calcRxWindow+0xa0>)
 80055fa:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 80055fe:	461a      	mov	r2, r3
 8005600:	79fb      	ldrb	r3, [r7, #7]
 8005602:	fb02 f303 	mul.w	r3, r2, r3
 8005606:	11db      	asrs	r3, r3, #7
 8005608:	617b      	str	r3, [r7, #20]
		err = (LMIC.lastDriftDiff * (ostime_t) secs) >> BCN_INTV_exp;
 800560a:	4b19      	ldr	r3, [pc, #100]	@ (8005670 <calcRxWindow+0xa0>)
 800560c:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 8005610:	461a      	mov	r2, r3
 8005612:	79fb      	ldrb	r3, [r7, #7]
 8005614:	fb02 f303 	mul.w	r3, r2, r3
 8005618:	11db      	asrs	r3, r3, #7
 800561a:	613b      	str	r3, [r7, #16]
	}
	u1_t rxsyms = MINRX_SYMS;
 800561c:	2305      	movs	r3, #5
 800561e:	73fb      	strb	r3, [r7, #15]
	err += (ostime_t) LMIC.maxDriftDiff * LMIC.missedBcns;
 8005620:	4b13      	ldr	r3, [pc, #76]	@ (8005670 <calcRxWindow+0xa0>)
 8005622:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 8005626:	461a      	mov	r2, r3
 8005628:	4b11      	ldr	r3, [pc, #68]	@ (8005670 <calcRxWindow+0xa0>)
 800562a:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 800562e:	fb02 f303 	mul.w	r3, r2, r3
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	4413      	add	r3, r2
 8005636:	613b      	str	r3, [r7, #16]
	LMIC.rxsyms = MINRX_SYMS + (err / dr2hsym(dr));
 8005638:	79bb      	ldrb	r3, [r7, #6]
 800563a:	4a0e      	ldr	r2, [pc, #56]	@ (8005674 <calcRxWindow+0xa4>)
 800563c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	fb92 f3f3 	sdiv	r3, r2, r3
 8005646:	b2db      	uxtb	r3, r3
 8005648:	3305      	adds	r3, #5
 800564a:	b2da      	uxtb	r2, r3
 800564c:	4b08      	ldr	r3, [pc, #32]	@ (8005670 <calcRxWindow+0xa0>)
 800564e:	741a      	strb	r2, [r3, #16]

	return (rxsyms - PAMBL_SYMS) * dr2hsym(dr) + rxoff;
 8005650:	7bfb      	ldrb	r3, [r7, #15]
 8005652:	3b08      	subs	r3, #8
 8005654:	79ba      	ldrb	r2, [r7, #6]
 8005656:	4907      	ldr	r1, [pc, #28]	@ (8005674 <calcRxWindow+0xa4>)
 8005658:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800565c:	fb03 f202 	mul.w	r2, r3, r2
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	4413      	add	r3, r2
}
 8005664:	4618      	mov	r0, r3
 8005666:	371c      	adds	r7, #28
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	2000033c 	.word	0x2000033c
 8005674:	08012d30 	.word	0x08012d30

08005678 <calcBcnRxWindowFromMillis>:

// Setup beacon RX parameters assuming we have an error of ms (aka +/-(ms/2))
static void calcBcnRxWindowFromMillis(u1_t ms, bit_t ini)
{
 8005678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800567c:	b087      	sub	sp, #28
 800567e:	af00      	add	r7, sp, #0
 8005680:	4606      	mov	r6, r0
 8005682:	4608      	mov	r0, r1
 8005684:	4631      	mov	r1, r6
 8005686:	73f9      	strb	r1, [r7, #15]
 8005688:	4601      	mov	r1, r0
 800568a:	73b9      	strb	r1, [r7, #14]
	if (ini) {
 800568c:	7bb9      	ldrb	r1, [r7, #14]
 800568e:	2900      	cmp	r1, #0
 8005690:	d014      	beq.n	80056bc <calcBcnRxWindowFromMillis+0x44>
		LMIC.drift = 0;
 8005692:	493b      	ldr	r1, [pc, #236]	@ (8005780 <calcBcnRxWindowFromMillis+0x108>)
 8005694:	2000      	movs	r0, #0
 8005696:	f8a1 00b4 	strh.w	r0, [r1, #180]	@ 0xb4
		LMIC.maxDriftDiff = 0;
 800569a:	4939      	ldr	r1, [pc, #228]	@ (8005780 <calcBcnRxWindowFromMillis+0x108>)
 800569c:	2000      	movs	r0, #0
 800569e:	f8a1 00b8 	strh.w	r0, [r1, #184]	@ 0xb8
		LMIC.missedBcns = 0;
 80056a2:	4937      	ldr	r1, [pc, #220]	@ (8005780 <calcBcnRxWindowFromMillis+0x108>)
 80056a4:	2000      	movs	r0, #0
 80056a6:	f881 0131 	strb.w	r0, [r1, #305]	@ 0x131
		LMIC.bcninfo.flags |= BCN_NODRIFT | BCN_NODDIFF;
 80056aa:	4935      	ldr	r1, [pc, #212]	@ (8005780 <calcBcnRxWindowFromMillis+0x108>)
 80056ac:	f891 1196 	ldrb.w	r1, [r1, #406]	@ 0x196
 80056b0:	f041 010c 	orr.w	r1, r1, #12
 80056b4:	b2c8      	uxtb	r0, r1
 80056b6:	4932      	ldr	r1, [pc, #200]	@ (8005780 <calcBcnRxWindowFromMillis+0x108>)
 80056b8:	f881 0196 	strb.w	r0, [r1, #406]	@ 0x196
	}
	ostime_t hsym = dr2hsym(DR_BCN);
 80056bc:	2142      	movs	r1, #66	@ 0x42
 80056be:	6179      	str	r1, [r7, #20]
	LMIC.bcnRxsyms = MINRX_SYMS + ms2osticksCeil(ms) / hsym;
 80056c0:	7bf9      	ldrb	r1, [r7, #15]
 80056c2:	2000      	movs	r0, #0
 80056c4:	460c      	mov	r4, r1
 80056c6:	4605      	mov	r5, r0
 80056c8:	4620      	mov	r0, r4
 80056ca:	4629      	mov	r1, r5
 80056cc:	f04f 0a00 	mov.w	sl, #0
 80056d0:	f04f 0b00 	mov.w	fp, #0
 80056d4:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 80056d8:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 80056dc:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 80056e0:	4650      	mov	r0, sl
 80056e2:	4659      	mov	r1, fp
 80056e4:	1b02      	subs	r2, r0, r4
 80056e6:	eb61 0305 	sbc.w	r3, r1, r5
 80056ea:	f04f 0000 	mov.w	r0, #0
 80056ee:	f04f 0100 	mov.w	r1, #0
 80056f2:	0099      	lsls	r1, r3, #2
 80056f4:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80056f8:	0090      	lsls	r0, r2, #2
 80056fa:	4602      	mov	r2, r0
 80056fc:	460b      	mov	r3, r1
 80056fe:	eb12 0804 	adds.w	r8, r2, r4
 8005702:	eb43 0905 	adc.w	r9, r3, r5
 8005706:	f04f 0200 	mov.w	r2, #0
 800570a:	f04f 0300 	mov.w	r3, #0
 800570e:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8005712:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 8005716:	ea4f 2208 	mov.w	r2, r8, lsl #8
 800571a:	4690      	mov	r8, r2
 800571c:	4699      	mov	r9, r3
 800571e:	4642      	mov	r2, r8
 8005720:	464b      	mov	r3, r9
 8005722:	f240 31e7 	movw	r1, #999	@ 0x3e7
 8005726:	1851      	adds	r1, r2, r1
 8005728:	6039      	str	r1, [r7, #0]
 800572a:	f143 0300 	adc.w	r3, r3, #0
 800572e:	607b      	str	r3, [r7, #4]
 8005730:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005734:	f04f 0300 	mov.w	r3, #0
 8005738:	e9d7 0100 	ldrd	r0, r1, [r7]
 800573c:	f7fb fa66 	bl	8000c0c <__aeabi_ldivmod>
 8005740:	4602      	mov	r2, r0
 8005742:	460b      	mov	r3, r1
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	fb92 f3f3 	sdiv	r3, r2, r3
 800574a:	b2db      	uxtb	r3, r3
 800574c:	3305      	adds	r3, #5
 800574e:	b2da      	uxtb	r2, r3
 8005750:	4b0b      	ldr	r3, [pc, #44]	@ (8005780 <calcBcnRxWindowFromMillis+0x108>)
 8005752:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
	LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks
 8005756:	4b0a      	ldr	r3, [pc, #40]	@ (8005780 <calcBcnRxWindowFromMillis+0x108>)
 8005758:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 800575c:	f503 127a 	add.w	r2, r3, #4096000	@ 0x3e8000
			- (LMIC.bcnRxsyms - PAMBL_SYMS) * hsym;
 8005760:	4b07      	ldr	r3, [pc, #28]	@ (8005780 <calcBcnRxWindowFromMillis+0x108>)
 8005762:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 8005766:	3b08      	subs	r3, #8
 8005768:	6979      	ldr	r1, [r7, #20]
 800576a:	fb01 f303 	mul.w	r3, r1, r3
 800576e:	1ad3      	subs	r3, r2, r3
	LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks
 8005770:	4a03      	ldr	r2, [pc, #12]	@ (8005780 <calcBcnRxWindowFromMillis+0x108>)
 8005772:	f8c2 318c 	str.w	r3, [r2, #396]	@ 0x18c
}
 8005776:	bf00      	nop
 8005778:	371c      	adds	r7, #28
 800577a:	46bd      	mov	sp, r7
 800577c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005780:	2000033c 	.word	0x2000033c

08005784 <rxschedInit>:

// Setup scheduled RX window (ping/multicast slot)
static void rxschedInit(xref2rxsched_t rxsched)
{
 8005784:	b590      	push	{r4, r7, lr}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
	os_clearMem(AESkey, 16);
 800578c:	2210      	movs	r2, #16
 800578e:	2100      	movs	r1, #0
 8005790:	482e      	ldr	r0, [pc, #184]	@ (800584c <rxschedInit+0xc8>)
 8005792:	f009 fc2d 	bl	800eff0 <memset>
	os_clearMem(LMIC.frame + 8, 8);
 8005796:	4b2e      	ldr	r3, [pc, #184]	@ (8005850 <rxschedInit+0xcc>)
 8005798:	2208      	movs	r2, #8
 800579a:	2100      	movs	r1, #0
 800579c:	4618      	mov	r0, r3
 800579e:	f009 fc27 	bl	800eff0 <memset>
	os_wlsbf4(LMIC.frame, LMIC.bcninfo.time);
 80057a2:	4b2c      	ldr	r3, [pc, #176]	@ (8005854 <rxschedInit+0xd0>)
 80057a4:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 80057a8:	4619      	mov	r1, r3
 80057aa:	482b      	ldr	r0, [pc, #172]	@ (8005858 <rxschedInit+0xd4>)
 80057ac:	f7ff fc71 	bl	8005092 <os_wlsbf4>
	os_wlsbf4(LMIC.frame + 4, LMIC.devaddr);
 80057b0:	4a2a      	ldr	r2, [pc, #168]	@ (800585c <rxschedInit+0xd8>)
 80057b2:	4b28      	ldr	r3, [pc, #160]	@ (8005854 <rxschedInit+0xd0>)
 80057b4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80057b8:	4619      	mov	r1, r3
 80057ba:	4610      	mov	r0, r2
 80057bc:	f7ff fc69 	bl	8005092 <os_wlsbf4>
	os_aes(AES_ENC, LMIC.frame, 16);
 80057c0:	2210      	movs	r2, #16
 80057c2:	4925      	ldr	r1, [pc, #148]	@ (8005858 <rxschedInit+0xd4>)
 80057c4:	2000      	movs	r0, #0
 80057c6:	f7fb fd37 	bl	8001238 <os_aes>
	u1_t intvExp = rxsched->intvExp;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	785b      	ldrb	r3, [r3, #1]
 80057ce:	73fb      	strb	r3, [r7, #15]
	ostime_t off = os_rlsbf2(LMIC.frame) & (0x0FFF >> (7 - intvExp)); // random offset (slot units)
 80057d0:	4821      	ldr	r0, [pc, #132]	@ (8005858 <rxschedInit+0xd4>)
 80057d2:	f7ff fbf8 	bl	8004fc6 <os_rlsbf2>
 80057d6:	4603      	mov	r3, r0
 80057d8:	4619      	mov	r1, r3
 80057da:	7bfb      	ldrb	r3, [r7, #15]
 80057dc:	f1c3 0307 	rsb	r3, r3, #7
 80057e0:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80057e4:	fa42 f303 	asr.w	r3, r2, r3
 80057e8:	400b      	ands	r3, r1
 80057ea:	60bb      	str	r3, [r7, #8]
	rxsched->rxbase = (LMIC.bcninfo.txtime +
 80057ec:	4b19      	ldr	r3, [pc, #100]	@ (8005854 <rxschedInit+0xd0>)
 80057ee:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
	BCN_RESERVE_osticks + ms2osticks(BCN_SLOT_SPAN_ms * off)); // random offset osticks
 80057f2:	4619      	mov	r1, r3
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	4613      	mov	r3, r2
 80057f8:	011b      	lsls	r3, r3, #4
 80057fa:	1a9b      	subs	r3, r3, r2
 80057fc:	019b      	lsls	r3, r3, #6
 80057fe:	440b      	add	r3, r1
 8005800:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 8005804:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005808:	461a      	mov	r2, r3
	rxsched->rxbase = (LMIC.bcninfo.txtime +
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	605a      	str	r2, [r3, #4]
	rxsched->slot = 0;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	709a      	strb	r2, [r3, #2]
	rxsched->rxtime = rxsched->rxbase
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685c      	ldr	r4, [r3, #4]
			- calcRxWindow(/*secs BCN_RESERVE*/2 + (1 << intvExp), rxsched->dr);
 8005818:	7bfb      	ldrb	r3, [r7, #15]
 800581a:	2201      	movs	r2, #1
 800581c:	fa02 f303 	lsl.w	r3, r2, r3
 8005820:	b2db      	uxtb	r3, r3
 8005822:	3302      	adds	r3, #2
 8005824:	b2da      	uxtb	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	4619      	mov	r1, r3
 800582c:	4610      	mov	r0, r2
 800582e:	f7ff fecf 	bl	80055d0 <calcRxWindow>
 8005832:	4603      	mov	r3, r0
 8005834:	1ae2      	subs	r2, r4, r3
	rxsched->rxtime = rxsched->rxbase
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	609a      	str	r2, [r3, #8]
	rxsched->rxsyms = LMIC.rxsyms;
 800583a:	4b06      	ldr	r3, [pc, #24]	@ (8005854 <rxschedInit+0xd0>)
 800583c:	7c1a      	ldrb	r2, [r3, #16]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	70da      	strb	r2, [r3, #3]
}
 8005842:	bf00      	nop
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	bd90      	pop	{r4, r7, pc}
 800584a:	bf00      	nop
 800584c:	20000154 	.word	0x20000154
 8005850:	2000048c 	.word	0x2000048c
 8005854:	2000033c 	.word	0x2000033c
 8005858:	20000484 	.word	0x20000484
 800585c:	20000488 	.word	0x20000488

08005860 <rxschedNext>:

static bit_t rxschedNext(xref2rxsched_t rxsched, ostime_t cando)
{
 8005860:	b590      	push	{r4, r7, lr}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
	again: if (rxsched->rxtime - cando >= 0)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	689a      	ldr	r2, [r3, #8]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	db01      	blt.n	800587a <rxschedNext+0x1a>
		return 1;
 8005876:	2301      	movs	r3, #1
 8005878:	e03a      	b.n	80058f0 <rxschedNext+0x90>
	u1_t slot;
	if ((slot = rxsched->slot) >= 128)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	789b      	ldrb	r3, [r3, #2]
 800587e:	73fb      	strb	r3, [r7, #15]
 8005880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005884:	2b00      	cmp	r3, #0
 8005886:	da01      	bge.n	800588c <rxschedNext+0x2c>
		return 0;
 8005888:	2300      	movs	r3, #0
 800588a:	e031      	b.n	80058f0 <rxschedNext+0x90>
	u1_t intv = 1 << rxsched->intvExp;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	785b      	ldrb	r3, [r3, #1]
 8005890:	461a      	mov	r2, r3
 8005892:	2301      	movs	r3, #1
 8005894:	4093      	lsls	r3, r2
 8005896:	73bb      	strb	r3, [r7, #14]
	if ((rxsched->slot = (slot += (intv))) >= 128)
 8005898:	7bfa      	ldrb	r2, [r7, #15]
 800589a:	7bbb      	ldrb	r3, [r7, #14]
 800589c:	4413      	add	r3, r2
 800589e:	73fb      	strb	r3, [r7, #15]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	7bfa      	ldrb	r2, [r7, #15]
 80058a4:	709a      	strb	r2, [r3, #2]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	789b      	ldrb	r3, [r3, #2]
 80058aa:	b25b      	sxtb	r3, r3
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	da01      	bge.n	80058b4 <rxschedNext+0x54>
		return 0;
 80058b0:	2300      	movs	r3, #0
 80058b2:	e01d      	b.n	80058f0 <rxschedNext+0x90>
	rxsched->rxtime = rxsched->rxbase
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6859      	ldr	r1, [r3, #4]
			+ ((BCN_WINDOW_osticks * (ostime_t) slot) >> BCN_INTV_exp)
 80058b8:	7bfa      	ldrb	r2, [r7, #15]
 80058ba:	4613      	mov	r3, r2
 80058bc:	011b      	lsls	r3, r3, #4
 80058be:	1a9b      	subs	r3, r3, r2
 80058c0:	049b      	lsls	r3, r3, #18
 80058c2:	11db      	asrs	r3, r3, #7
 80058c4:	18cc      	adds	r4, r1, r3
			- calcRxWindow(/*secs BCN_RESERVE*/2 + slot + intv, rxsched->dr);
 80058c6:	7bfa      	ldrb	r2, [r7, #15]
 80058c8:	7bbb      	ldrb	r3, [r7, #14]
 80058ca:	4413      	add	r3, r2
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	3302      	adds	r3, #2
 80058d0:	b2da      	uxtb	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	4619      	mov	r1, r3
 80058d8:	4610      	mov	r0, r2
 80058da:	f7ff fe79 	bl	80055d0 <calcRxWindow>
 80058de:	4603      	mov	r3, r0
 80058e0:	1ae2      	subs	r2, r4, r3
	rxsched->rxtime = rxsched->rxbase
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	609a      	str	r2, [r3, #8]
	rxsched->rxsyms = LMIC.rxsyms;
 80058e6:	4b04      	ldr	r3, [pc, #16]	@ (80058f8 <rxschedNext+0x98>)
 80058e8:	7c1a      	ldrb	r2, [r3, #16]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	70da      	strb	r2, [r3, #3]
	goto again;
 80058ee:	e7bc      	b.n	800586a <rxschedNext+0xa>
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3714      	adds	r7, #20
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd90      	pop	{r4, r7, pc}
 80058f8:	2000033c 	.word	0x2000033c

080058fc <rndDelay>:

static ostime_t rndDelay(u1_t secSpan)
{
 80058fc:	b590      	push	{r4, r7, lr}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	4603      	mov	r3, r0
 8005904:	71fb      	strb	r3, [r7, #7]
	u2_t r = os_getRndU2();
 8005906:	f003 fadf 	bl	8008ec8 <radio_rand1>
 800590a:	4603      	mov	r3, r0
 800590c:	021b      	lsls	r3, r3, #8
 800590e:	b21c      	sxth	r4, r3
 8005910:	f003 fada 	bl	8008ec8 <radio_rand1>
 8005914:	4603      	mov	r3, r0
 8005916:	b21b      	sxth	r3, r3
 8005918:	4323      	orrs	r3, r4
 800591a:	b21b      	sxth	r3, r3
 800591c:	817b      	strh	r3, [r7, #10]
	ostime_t delay = r;
 800591e:	897b      	ldrh	r3, [r7, #10]
 8005920:	60fb      	str	r3, [r7, #12]
	if (delay > OSTICKS_PER_SEC)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8005928:	dd0b      	ble.n	8005942 <rndDelay+0x46>
		delay = r % (u2_t) OSTICKS_PER_SEC;
 800592a:	897b      	ldrh	r3, [r7, #10]
 800592c:	4a11      	ldr	r2, [pc, #68]	@ (8005974 <rndDelay+0x78>)
 800592e:	fba2 1203 	umull	r1, r2, r2, r3
 8005932:	0ad2      	lsrs	r2, r2, #11
 8005934:	f44f 41fa 	mov.w	r1, #32000	@ 0x7d00
 8005938:	fb01 f202 	mul.w	r2, r1, r2
 800593c:	1a9b      	subs	r3, r3, r2
 800593e:	b29b      	uxth	r3, r3
 8005940:	60fb      	str	r3, [r7, #12]
	if (secSpan > 0)
 8005942:	79fb      	ldrb	r3, [r7, #7]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d010      	beq.n	800596a <rndDelay+0x6e>
		delay += ((u1_t) r % secSpan) * OSTICKS_PER_SEC;
 8005948:	897b      	ldrh	r3, [r7, #10]
 800594a:	b2db      	uxtb	r3, r3
 800594c:	79fa      	ldrb	r2, [r7, #7]
 800594e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005952:	fb01 f202 	mul.w	r2, r1, r2
 8005956:	1a9b      	subs	r3, r3, r2
 8005958:	b2db      	uxtb	r3, r3
 800595a:	461a      	mov	r2, r3
 800595c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005960:	fb02 f303 	mul.w	r3, r2, r3
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4413      	add	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]
	return delay;
 800596a:	68fb      	ldr	r3, [r7, #12]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	bd90      	pop	{r4, r7, pc}
 8005974:	10624dd3 	.word	0x10624dd3

08005978 <txDelay>:

static void txDelay(ostime_t reftime, u1_t secSpan)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	460b      	mov	r3, r1
 8005982:	70fb      	strb	r3, [r7, #3]
	reftime += rndDelay(secSpan);
 8005984:	78fb      	ldrb	r3, [r7, #3]
 8005986:	4618      	mov	r0, r3
 8005988:	f7ff ffb8 	bl	80058fc <rndDelay>
 800598c:	4602      	mov	r2, r0
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4413      	add	r3, r2
 8005992:	607b      	str	r3, [r7, #4]
	if (LMIC.globalDutyRate == 0 || (reftime - LMIC.globalDutyAvail) > 0) {
 8005994:	4b0e      	ldr	r3, [pc, #56]	@ (80059d0 <txDelay+0x58>)
 8005996:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d006      	beq.n	80059ac <txDelay+0x34>
 800599e:	4b0c      	ldr	r3, [pc, #48]	@ (80059d0 <txDelay+0x58>)
 80059a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	dd0c      	ble.n	80059c6 <txDelay+0x4e>
		LMIC.globalDutyAvail = reftime;
 80059ac:	4a08      	ldr	r2, [pc, #32]	@ (80059d0 <txDelay+0x58>)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
		LMIC.opmode |= OP_RNDTX;
 80059b4:	4b06      	ldr	r3, [pc, #24]	@ (80059d0 <txDelay+0x58>)
 80059b6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80059ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059be:	b29a      	uxth	r2, r3
 80059c0:	4b03      	ldr	r3, [pc, #12]	@ (80059d0 <txDelay+0x58>)
 80059c2:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	}
}
 80059c6:	bf00      	nop
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	2000033c 	.word	0x2000033c

080059d4 <setDrJoin>:

static void setDrJoin(u1_t reason, u1_t dr)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	4603      	mov	r3, r0
 80059dc:	460a      	mov	r2, r1
 80059de:	71fb      	strb	r3, [r7, #7]
 80059e0:	4613      	mov	r3, r2
 80059e2:	71bb      	strb	r3, [r7, #6]
					e_.deveui = MAIN::CDEV->getEui(),
					e_.dr = dr|DR_PAGE,
					e_.txpow = LMIC.adrTxPow,
					e_.prevdr = LMIC.datarate|DR_PAGE,
					e_.prevtxpow = LMIC.adrTxPow));
	LMIC.datarate = dr;
 80059e4:	4a04      	ldr	r2, [pc, #16]	@ (80059f8 <setDrJoin+0x24>)
 80059e6:	79bb      	ldrb	r3, [r7, #6]
 80059e8:	f882 30b0 	strb.w	r3, [r2, #176]	@ 0xb0
	DO_DEVDB(LMIC.datarate,datarate);
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	2000033c 	.word	0x2000033c

080059fc <setDrTxpow>:

static void setDrTxpow(u1_t reason, u1_t dr, s1_t pow)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	4603      	mov	r3, r0
 8005a04:	71fb      	strb	r3, [r7, #7]
 8005a06:	460b      	mov	r3, r1
 8005a08:	71bb      	strb	r3, [r7, #6]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	717b      	strb	r3, [r7, #5]
					e_.dr = dr|DR_PAGE,
					e_.txpow = pow,
					e_.prevdr = LMIC.datarate|DR_PAGE,
					e_.prevtxpow = LMIC.adrTxPow));

	if (pow != KEEP_TXPOW)
 8005a0e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005a12:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 8005a16:	d003      	beq.n	8005a20 <setDrTxpow+0x24>
		LMIC.adrTxPow = pow;
 8005a18:	4a0e      	ldr	r2, [pc, #56]	@ (8005a54 <setDrTxpow+0x58>)
 8005a1a:	797b      	ldrb	r3, [r7, #5]
 8005a1c:	f882 30af 	strb.w	r3, [r2, #175]	@ 0xaf
	if (LMIC.datarate != dr) {
 8005a20:	4b0c      	ldr	r3, [pc, #48]	@ (8005a54 <setDrTxpow+0x58>)
 8005a22:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8005a26:	79ba      	ldrb	r2, [r7, #6]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d00c      	beq.n	8005a46 <setDrTxpow+0x4a>
		LMIC.datarate = dr;
 8005a2c:	4a09      	ldr	r2, [pc, #36]	@ (8005a54 <setDrTxpow+0x58>)
 8005a2e:	79bb      	ldrb	r3, [r7, #6]
 8005a30:	f882 30b0 	strb.w	r3, [r2, #176]	@ 0xb0
		DO_DEVDB(LMIC.datarate,datarate);
		LMIC.opmode |= OP_NEXTCHNL;
 8005a34:	4b07      	ldr	r3, [pc, #28]	@ (8005a54 <setDrTxpow+0x58>)
 8005a36:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8005a3a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	4b04      	ldr	r3, [pc, #16]	@ (8005a54 <setDrTxpow+0x58>)
 8005a42:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	}
}
 8005a46:	bf00      	nop
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	2000033c 	.word	0x2000033c

08005a58 <initDefaultChannels>:
		// Default operational frequencies
		EU868_F1 | BAND_CENTI, EU868_F2 | BAND_CENTI, EU868_F3 | BAND_CENTI,
		EU868_F4 | BAND_MILLI, EU868_F5 | BAND_MILLI, EU868_F6 | BAND_DECI };

static void initDefaultChannels(bit_t join)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	4603      	mov	r3, r0
 8005a60:	71fb      	strb	r3, [r7, #7]
	os_clearMem(&LMIC.channelFreq, sizeof(LMIC.channelFreq));
 8005a62:	2240      	movs	r2, #64	@ 0x40
 8005a64:	2100      	movs	r1, #0
 8005a66:	483a      	ldr	r0, [pc, #232]	@ (8005b50 <initDefaultChannels+0xf8>)
 8005a68:	f009 fac2 	bl	800eff0 <memset>
	os_clearMem(&LMIC.channelDrMap, sizeof(LMIC.channelDrMap));
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	2100      	movs	r1, #0
 8005a70:	4838      	ldr	r0, [pc, #224]	@ (8005b54 <initDefaultChannels+0xfc>)
 8005a72:	f009 fabd 	bl	800eff0 <memset>
	os_clearMem(&LMIC.bands, sizeof(LMIC.bands));
 8005a76:	2220      	movs	r2, #32
 8005a78:	2100      	movs	r1, #0
 8005a7a:	4837      	ldr	r0, [pc, #220]	@ (8005b58 <initDefaultChannels+0x100>)
 8005a7c:	f009 fab8 	bl	800eff0 <memset>

	LMIC.channelMap = (1 << NUM_DEFAULT_CHANNELS) - 1;
 8005a80:	4b36      	ldr	r3, [pc, #216]	@ (8005b5c <initDefaultChannels+0x104>)
 8005a82:	223f      	movs	r2, #63	@ 0x3f
 8005a84:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	u1_t su = join ? 0 : NUM_DEFAULT_CHANNELS;
 8005a88:	79fb      	ldrb	r3, [r7, #7]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <initDefaultChannels+0x3a>
 8005a8e:	2300      	movs	r3, #0
 8005a90:	e000      	b.n	8005a94 <initDefaultChannels+0x3c>
 8005a92:	2306      	movs	r3, #6
 8005a94:	73fb      	strb	r3, [r7, #15]
	for (u1_t fu = 0; fu < NUM_DEFAULT_CHANNELS; fu++, su++) {
 8005a96:	2300      	movs	r3, #0
 8005a98:	73bb      	strb	r3, [r7, #14]
 8005a9a:	e014      	b.n	8005ac6 <initDefaultChannels+0x6e>
		LMIC.channelFreq[fu] = iniChannelFreq[su];
 8005a9c:	7bfa      	ldrb	r2, [r7, #15]
 8005a9e:	7bbb      	ldrb	r3, [r7, #14]
 8005aa0:	492f      	ldr	r1, [pc, #188]	@ (8005b60 <initDefaultChannels+0x108>)
 8005aa2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005aa6:	492d      	ldr	r1, [pc, #180]	@ (8005b5c <initDefaultChannels+0x104>)
 8005aa8:	3310      	adds	r3, #16
 8005aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		LMIC.channelDrMap[fu] = DR_RANGE_MAP(DR_SF12, DR_SF7);
 8005aae:	7bbb      	ldrb	r3, [r7, #14]
 8005ab0:	4a2a      	ldr	r2, [pc, #168]	@ (8005b5c <initDefaultChannels+0x104>)
 8005ab2:	3340      	adds	r3, #64	@ 0x40
 8005ab4:	213f      	movs	r1, #63	@ 0x3f
 8005ab6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (u1_t fu = 0; fu < NUM_DEFAULT_CHANNELS; fu++, su++) {
 8005aba:	7bbb      	ldrb	r3, [r7, #14]
 8005abc:	3301      	adds	r3, #1
 8005abe:	73bb      	strb	r3, [r7, #14]
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	73fb      	strb	r3, [r7, #15]
 8005ac6:	7bbb      	ldrb	r3, [r7, #14]
 8005ac8:	2b05      	cmp	r3, #5
 8005aca:	d9e7      	bls.n	8005a9c <initDefaultChannels+0x44>
//    if( !join ) {
//        LMIC.channelDrMap[5] = DR_RANGE_MAP(DR_SF12,DR_SF7);
//        LMIC.channelDrMap[1] = DR_RANGE_MAP(DR_SF12,DR_FSK);
//    }

	LMIC.bands[BAND_MILLI].txcap = 1000;  // 0.1%
 8005acc:	4b23      	ldr	r3, [pc, #140]	@ (8005b5c <initDefaultChannels+0x104>)
 8005ace:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005ad2:	841a      	strh	r2, [r3, #32]
	LMIC.bands[BAND_MILLI].txpow = 14;
 8005ad4:	4b21      	ldr	r3, [pc, #132]	@ (8005b5c <initDefaultChannels+0x104>)
 8005ad6:	220e      	movs	r2, #14
 8005ad8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	LMIC.bands[BAND_MILLI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 8005adc:	f003 f9f4 	bl	8008ec8 <radio_rand1>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	f003 030f 	and.w	r3, r3, #15
 8005ae6:	b2da      	uxtb	r2, r3
 8005ae8:	4b1c      	ldr	r3, [pc, #112]	@ (8005b5c <initDefaultChannels+0x104>)
 8005aea:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	LMIC.bands[BAND_CENTI].txcap = 100;   // 1%
 8005aee:	4b1b      	ldr	r3, [pc, #108]	@ (8005b5c <initDefaultChannels+0x104>)
 8005af0:	2264      	movs	r2, #100	@ 0x64
 8005af2:	851a      	strh	r2, [r3, #40]	@ 0x28
	LMIC.bands[BAND_CENTI].txpow = 14;
 8005af4:	4b19      	ldr	r3, [pc, #100]	@ (8005b5c <initDefaultChannels+0x104>)
 8005af6:	220e      	movs	r2, #14
 8005af8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	LMIC.bands[BAND_CENTI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 8005afc:	f003 f9e4 	bl	8008ec8 <radio_rand1>
 8005b00:	4603      	mov	r3, r0
 8005b02:	f003 030f 	and.w	r3, r3, #15
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	4b14      	ldr	r3, [pc, #80]	@ (8005b5c <initDefaultChannels+0x104>)
 8005b0a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	LMIC.bands[BAND_DECI].txcap = 10;    // 10%
 8005b0e:	4b13      	ldr	r3, [pc, #76]	@ (8005b5c <initDefaultChannels+0x104>)
 8005b10:	220a      	movs	r2, #10
 8005b12:	861a      	strh	r2, [r3, #48]	@ 0x30
	LMIC.bands[BAND_DECI].txpow = 27;
 8005b14:	4b11      	ldr	r3, [pc, #68]	@ (8005b5c <initDefaultChannels+0x104>)
 8005b16:	221b      	movs	r2, #27
 8005b18:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
	LMIC.bands[BAND_DECI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 8005b1c:	f003 f9d4 	bl	8008ec8 <radio_rand1>
 8005b20:	4603      	mov	r3, r0
 8005b22:	f003 030f 	and.w	r3, r3, #15
 8005b26:	b2da      	uxtb	r2, r3
 8005b28:	4b0c      	ldr	r3, [pc, #48]	@ (8005b5c <initDefaultChannels+0x104>)
 8005b2a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
	LMIC.bands[BAND_MILLI].avail = LMIC.bands[BAND_CENTI].avail =
			LMIC.bands[BAND_DECI].avail = os_getTime();
 8005b2e:	f002 fca1 	bl	8008474 <os_getTime>
 8005b32:	4603      	mov	r3, r0
 8005b34:	4a09      	ldr	r2, [pc, #36]	@ (8005b5c <initDefaultChannels+0x104>)
 8005b36:	6353      	str	r3, [r2, #52]	@ 0x34
 8005b38:	4b08      	ldr	r3, [pc, #32]	@ (8005b5c <initDefaultChannels+0x104>)
 8005b3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
	LMIC.bands[BAND_MILLI].avail = LMIC.bands[BAND_CENTI].avail =
 8005b3c:	4a07      	ldr	r2, [pc, #28]	@ (8005b5c <initDefaultChannels+0x104>)
 8005b3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005b40:	4b06      	ldr	r3, [pc, #24]	@ (8005b5c <initDefaultChannels+0x104>)
 8005b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b44:	4a05      	ldr	r2, [pc, #20]	@ (8005b5c <initDefaultChannels+0x104>)
 8005b46:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8005b48:	bf00      	nop
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	2000037c 	.word	0x2000037c
 8005b54:	200003bc 	.word	0x200003bc
 8005b58:	2000035c 	.word	0x2000035c
 8005b5c:	2000033c 	.word	0x2000033c
 8005b60:	08012d50 	.word	0x08012d50

08005b64 <LMIC_setupChannel>:
	b->lastchnl = os_getRndU1() % MAX_CHANNELS;
	return 1;
}

bit_t LMIC_setupChannel(u1_t chidx, u4_t freq, u2_t drmap, s1_t band)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6039      	str	r1, [r7, #0]
 8005b6c:	4611      	mov	r1, r2
 8005b6e:	461a      	mov	r2, r3
 8005b70:	4603      	mov	r3, r0
 8005b72:	71fb      	strb	r3, [r7, #7]
 8005b74:	460b      	mov	r3, r1
 8005b76:	80bb      	strh	r3, [r7, #4]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	71bb      	strb	r3, [r7, #6]
	if (chidx >= MAX_CHANNELS)
 8005b7c:	79fb      	ldrb	r3, [r7, #7]
 8005b7e:	2b0f      	cmp	r3, #15
 8005b80:	d901      	bls.n	8005b86 <LMIC_setupChannel+0x22>
		return 0;
 8005b82:	2300      	movs	r3, #0
 8005b84:	e054      	b.n	8005c30 <LMIC_setupChannel+0xcc>
	if (band == -1) {
 8005b86:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005b8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b8e:	d121      	bne.n	8005bd4 <LMIC_setupChannel+0x70>
		if (freq >= 869400000 && freq <= 869650000)
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	4a2a      	ldr	r2, [pc, #168]	@ (8005c3c <LMIC_setupChannel+0xd8>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d908      	bls.n	8005baa <LMIC_setupChannel+0x46>
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	4a29      	ldr	r2, [pc, #164]	@ (8005c40 <LMIC_setupChannel+0xdc>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d804      	bhi.n	8005baa <LMIC_setupChannel+0x46>
			freq |= BAND_DECI;   // 10% 27dBm
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	f043 0302 	orr.w	r3, r3, #2
 8005ba6:	603b      	str	r3, [r7, #0]
 8005ba8:	e021      	b.n	8005bee <LMIC_setupChannel+0x8a>
		else if ((freq >= 868000000 && freq <= 868600000)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	4a25      	ldr	r2, [pc, #148]	@ (8005c44 <LMIC_setupChannel+0xe0>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d903      	bls.n	8005bba <LMIC_setupChannel+0x56>
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	4a24      	ldr	r2, [pc, #144]	@ (8005c48 <LMIC_setupChannel+0xe4>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d907      	bls.n	8005bca <LMIC_setupChannel+0x66>
				|| (freq >= 869700000 && freq <= 870000000))
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	4a23      	ldr	r2, [pc, #140]	@ (8005c4c <LMIC_setupChannel+0xe8>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d315      	bcc.n	8005bee <LMIC_setupChannel+0x8a>
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	4a22      	ldr	r2, [pc, #136]	@ (8005c50 <LMIC_setupChannel+0xec>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d811      	bhi.n	8005bee <LMIC_setupChannel+0x8a>
			freq |= BAND_CENTI;  // 1% 14dBm 
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	f043 0301 	orr.w	r3, r3, #1
 8005bd0:	603b      	str	r3, [r7, #0]
 8005bd2:	e00c      	b.n	8005bee <LMIC_setupChannel+0x8a>
		else
			freq |= BAND_MILLI;  // 0.1% 14dBm
	} else {
		if (band > BAND_AUX)
 8005bd4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005bd8:	2b03      	cmp	r3, #3
 8005bda:	dd01      	ble.n	8005be0 <LMIC_setupChannel+0x7c>
			return 0;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	e027      	b.n	8005c30 <LMIC_setupChannel+0xcc>
		freq = (freq & ~3) | band;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	f023 0203 	bic.w	r2, r3, #3
 8005be6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	603b      	str	r3, [r7, #0]
	}
	LMIC.channelFreq[chidx] = freq;
 8005bee:	79fb      	ldrb	r3, [r7, #7]
 8005bf0:	4918      	ldr	r1, [pc, #96]	@ (8005c54 <LMIC_setupChannel+0xf0>)
 8005bf2:	3310      	adds	r3, #16
 8005bf4:	683a      	ldr	r2, [r7, #0]
 8005bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	LMIC.channelDrMap[chidx] =
 8005bfa:	88bb      	ldrh	r3, [r7, #4]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d001      	beq.n	8005c04 <LMIC_setupChannel+0xa0>
 8005c00:	88ba      	ldrh	r2, [r7, #4]
 8005c02:	e000      	b.n	8005c06 <LMIC_setupChannel+0xa2>
 8005c04:	223f      	movs	r2, #63	@ 0x3f
 8005c06:	79fb      	ldrb	r3, [r7, #7]
 8005c08:	4912      	ldr	r1, [pc, #72]	@ (8005c54 <LMIC_setupChannel+0xf0>)
 8005c0a:	3340      	adds	r3, #64	@ 0x40
 8005c0c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			drmap == 0 ? DR_RANGE_MAP(DR_SF12, DR_SF7) : drmap;
	LMIC.channelMap |= 1 << chidx;  // enabled right away
 8005c10:	4b10      	ldr	r3, [pc, #64]	@ (8005c54 <LMIC_setupChannel+0xf0>)
 8005c12:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8005c16:	b21a      	sxth	r2, r3
 8005c18:	79fb      	ldrb	r3, [r7, #7]
 8005c1a:	2101      	movs	r1, #1
 8005c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c20:	b21b      	sxth	r3, r3
 8005c22:	4313      	orrs	r3, r2
 8005c24:	b21b      	sxth	r3, r3
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	4b0a      	ldr	r3, [pc, #40]	@ (8005c54 <LMIC_setupChannel+0xf0>)
 8005c2a:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	return 1;
 8005c2e:	2301      	movs	r3, #1
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	33d1fdbf 	.word	0x33d1fdbf
 8005c40:	33d5ce50 	.word	0x33d5ce50
 8005c44:	33bca0ff 	.word	0x33bca0ff
 8005c48:	33c5c8c0 	.word	0x33c5c8c0
 8005c4c:	33d691a0 	.word	0x33d691a0
 8005c50:	33db2580 	.word	0x33db2580
 8005c54:	2000033c 	.word	0x2000033c

08005c58 <convFreq>:
	LMIC.channelDrMap[channel] = 0;
	LMIC.channelMap &= ~(1 << channel);
}

static u4_t convFreq(xref2u1_t ptr)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
	u4_t freq = (os_rlsbf4(ptr - 1) >> 8) * 100;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	3b01      	subs	r3, #1
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7ff f9c3 	bl	8004ff0 <os_rlsbf4>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	0a1b      	lsrs	r3, r3, #8
 8005c6e:	2264      	movs	r2, #100	@ 0x64
 8005c70:	fb02 f303 	mul.w	r3, r2, r3
 8005c74:	60fb      	str	r3, [r7, #12]
	if (freq < EU868_FREQ_MIN || freq > EU868_FREQ_MAX)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	4a06      	ldr	r2, [pc, #24]	@ (8005c94 <convFreq+0x3c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d303      	bcc.n	8005c86 <convFreq+0x2e>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	4a05      	ldr	r2, [pc, #20]	@ (8005c98 <convFreq+0x40>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d901      	bls.n	8005c8a <convFreq+0x32>
		freq = 0;
 8005c86:	2300      	movs	r3, #0
 8005c88:	60fb      	str	r3, [r7, #12]
	return freq;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	337055c0 	.word	0x337055c0
 8005c98:	33db2580 	.word	0x33db2580

08005c9c <mapChannels>:

static u1_t mapChannels(u1_t chpage, u2_t chmap)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	460a      	mov	r2, r1
 8005ca6:	71fb      	strb	r3, [r7, #7]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	80bb      	strh	r3, [r7, #4]
	// Bad page, disable all channel, enable non-existent
	if (chpage != 0 || chmap == 0 || (chmap & ~LMIC.channelMap) != 0)
 8005cac:	79fb      	ldrb	r3, [r7, #7]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10a      	bne.n	8005cc8 <mapChannels+0x2c>
 8005cb2:	88bb      	ldrh	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d007      	beq.n	8005cc8 <mapChannels+0x2c>
 8005cb8:	88ba      	ldrh	r2, [r7, #4]
 8005cba:	4b1c      	ldr	r3, [pc, #112]	@ (8005d2c <mapChannels+0x90>)
 8005cbc:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8005cc0:	43db      	mvns	r3, r3
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <mapChannels+0x30>
		return 0;  // illegal input
 8005cc8:	2300      	movs	r3, #0
 8005cca:	e028      	b.n	8005d1e <mapChannels+0x82>
	for (u1_t chnl = 0; chnl < MAX_CHANNELS; chnl++) {
 8005ccc:	2300      	movs	r3, #0
 8005cce:	73fb      	strb	r3, [r7, #15]
 8005cd0:	e01d      	b.n	8005d0e <mapChannels+0x72>
		if ((chmap & (1 << chnl)) != 0 && LMIC.channelFreq[chnl] == 0)
 8005cd2:	88ba      	ldrh	r2, [r7, #4]
 8005cd4:	7bfb      	ldrb	r3, [r7, #15]
 8005cd6:	fa42 f303 	asr.w	r3, r2, r3
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d012      	beq.n	8005d08 <mapChannels+0x6c>
 8005ce2:	7bfb      	ldrb	r3, [r7, #15]
 8005ce4:	4a11      	ldr	r2, [pc, #68]	@ (8005d2c <mapChannels+0x90>)
 8005ce6:	3310      	adds	r3, #16
 8005ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10b      	bne.n	8005d08 <mapChannels+0x6c>
			chmap &= ~(1 << chnl); // ignore - channel is not defined
 8005cf0:	7bfb      	ldrb	r3, [r7, #15]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf8:	b21b      	sxth	r3, r3
 8005cfa:	43db      	mvns	r3, r3
 8005cfc:	b21a      	sxth	r2, r3
 8005cfe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005d02:	4013      	ands	r3, r2
 8005d04:	b21b      	sxth	r3, r3
 8005d06:	80bb      	strh	r3, [r7, #4]
	for (u1_t chnl = 0; chnl < MAX_CHANNELS; chnl++) {
 8005d08:	7bfb      	ldrb	r3, [r7, #15]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	73fb      	strb	r3, [r7, #15]
 8005d0e:	7bfb      	ldrb	r3, [r7, #15]
 8005d10:	2b0f      	cmp	r3, #15
 8005d12:	d9de      	bls.n	8005cd2 <mapChannels+0x36>
	}
	LMIC.channelMap = chmap;
 8005d14:	4a05      	ldr	r2, [pc, #20]	@ (8005d2c <mapChannels+0x90>)
 8005d16:	88bb      	ldrh	r3, [r7, #4]
 8005d18:	f8a2 30a0 	strh.w	r3, [r2, #160]	@ 0xa0
	return 1;
 8005d1c:	2301      	movs	r3, #1
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	2000033c 	.word	0x2000033c

08005d30 <updateTx>:

static void updateTx(ostime_t txbeg)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
	u4_t freq = LMIC.channelFreq[LMIC.txChnl];
 8005d38:	4b21      	ldr	r3, [pc, #132]	@ (8005dc0 <updateTx+0x90>)
 8005d3a:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8005d3e:	4a20      	ldr	r2, [pc, #128]	@ (8005dc0 <updateTx+0x90>)
 8005d40:	3310      	adds	r3, #16
 8005d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d46:	617b      	str	r3, [r7, #20]
	// Update global/band specific duty cycle stats
	ostime_t airtime = calcAirTime(LMIC.rps, LMIC.dataLen);
 8005d48:	4b1d      	ldr	r3, [pc, #116]	@ (8005dc0 <updateTx+0x90>)
 8005d4a:	89db      	ldrh	r3, [r3, #14]
 8005d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8005dc0 <updateTx+0x90>)
 8005d4e:	f892 2147 	ldrb.w	r2, [r2, #327]	@ 0x147
 8005d52:	4611      	mov	r1, r2
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7ff fba3 	bl	80054a0 <calcAirTime>
 8005d5a:	6138      	str	r0, [r7, #16]
	// Update channel/global duty cycle stats
	xref2band_t band = &LMIC.bands[freq & 0x3];
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	f003 0303 	and.w	r3, r3, #3
 8005d62:	3304      	adds	r3, #4
 8005d64:	00db      	lsls	r3, r3, #3
 8005d66:	4a16      	ldr	r2, [pc, #88]	@ (8005dc0 <updateTx+0x90>)
 8005d68:	4413      	add	r3, r2
 8005d6a:	60fb      	str	r3, [r7, #12]
	LMIC.freq = freq & ~(u4_t) 3;
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	f023 0303 	bic.w	r3, r3, #3
 8005d72:	4a13      	ldr	r2, [pc, #76]	@ (8005dc0 <updateTx+0x90>)
 8005d74:	6093      	str	r3, [r2, #8]
	LMIC.txpow = band->txpow;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8005d7c:	4b10      	ldr	r3, [pc, #64]	@ (8005dc0 <updateTx+0x90>)
 8005d7e:	749a      	strb	r2, [r3, #18]
	band->avail = txbeg + airtime * band->txcap;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	461a      	mov	r2, r3
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	fb03 f202 	mul.w	r2, r3, r2
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	441a      	add	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	605a      	str	r2, [r3, #4]
	if (LMIC.globalDutyRate != 0)
 8005d94:	4b0a      	ldr	r3, [pc, #40]	@ (8005dc0 <updateTx+0x90>)
 8005d96:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00b      	beq.n	8005db6 <updateTx+0x86>
		LMIC.globalDutyAvail = txbeg + (airtime << LMIC.globalDutyRate);
 8005d9e:	4b08      	ldr	r3, [pc, #32]	@ (8005dc0 <updateTx+0x90>)
 8005da0:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 8005da4:	461a      	mov	r2, r3
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	fa03 f202 	lsl.w	r2, r3, r2
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4413      	add	r3, r2
 8005db0:	4a03      	ldr	r2, [pc, #12]	@ (8005dc0 <updateTx+0x90>)
 8005db2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
}
 8005db6:	bf00      	nop
 8005db8:	3718      	adds	r7, #24
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	2000033c 	.word	0x2000033c

08005dc4 <nextTx>:

static ostime_t nextTx(ostime_t now)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b087      	sub	sp, #28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
	u1_t bmap = 0xF;
 8005dcc:	230f      	movs	r3, #15
 8005dce:	75fb      	strb	r3, [r7, #23]
	do {
		ostime_t mintime = now + /*10h*/36000 * OSTICKS_PER_SEC;
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	4b48      	ldr	r3, [pc, #288]	@ (8005ef4 <nextTx+0x130>)
 8005dd4:	4413      	add	r3, r2
 8005dd6:	613b      	str	r3, [r7, #16]
		u1_t band = 0;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	73fb      	strb	r3, [r7, #15]
		for (u1_t bi = 0; bi < 4; bi++) {
 8005ddc:	2300      	movs	r3, #0
 8005dde:	73bb      	strb	r3, [r7, #14]
 8005de0:	e01d      	b.n	8005e1e <nextTx+0x5a>
			if ((bmap & (1 << bi)) && mintime - LMIC.bands[bi].avail > 0)
 8005de2:	7dfa      	ldrb	r2, [r7, #23]
 8005de4:	7bbb      	ldrb	r3, [r7, #14]
 8005de6:	fa42 f303 	asr.w	r3, r2, r3
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d012      	beq.n	8005e18 <nextTx+0x54>
 8005df2:	7bbb      	ldrb	r3, [r7, #14]
 8005df4:	4a40      	ldr	r2, [pc, #256]	@ (8005ef8 <nextTx+0x134>)
 8005df6:	3304      	adds	r3, #4
 8005df8:	00db      	lsls	r3, r3, #3
 8005dfa:	4413      	add	r3, r2
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	dd08      	ble.n	8005e18 <nextTx+0x54>
				mintime = LMIC.bands[band = bi].avail;
 8005e06:	7bbb      	ldrb	r3, [r7, #14]
 8005e08:	73fb      	strb	r3, [r7, #15]
 8005e0a:	7bfb      	ldrb	r3, [r7, #15]
 8005e0c:	4a3a      	ldr	r2, [pc, #232]	@ (8005ef8 <nextTx+0x134>)
 8005e0e:	3304      	adds	r3, #4
 8005e10:	00db      	lsls	r3, r3, #3
 8005e12:	4413      	add	r3, r2
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	613b      	str	r3, [r7, #16]
		for (u1_t bi = 0; bi < 4; bi++) {
 8005e18:	7bbb      	ldrb	r3, [r7, #14]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	73bb      	strb	r3, [r7, #14]
 8005e1e:	7bbb      	ldrb	r3, [r7, #14]
 8005e20:	2b03      	cmp	r3, #3
 8005e22:	d9de      	bls.n	8005de2 <nextTx+0x1e>
		}
		// Find next channel in given band
		u1_t chnl = LMIC.bands[band].lastchnl;
 8005e24:	7bfb      	ldrb	r3, [r7, #15]
 8005e26:	4a34      	ldr	r2, [pc, #208]	@ (8005ef8 <nextTx+0x134>)
 8005e28:	3304      	adds	r3, #4
 8005e2a:	00db      	lsls	r3, r3, #3
 8005e2c:	4413      	add	r3, r2
 8005e2e:	78db      	ldrb	r3, [r3, #3]
 8005e30:	737b      	strb	r3, [r7, #13]
		for (u1_t ci = 0; ci < MAX_CHANNELS; ci++) {
 8005e32:	2300      	movs	r3, #0
 8005e34:	733b      	strb	r3, [r7, #12]
 8005e36:	e042      	b.n	8005ebe <nextTx+0xfa>
			if ((chnl = (chnl + 1)) >= MAX_CHANNELS)
 8005e38:	7b7b      	ldrb	r3, [r7, #13]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	737b      	strb	r3, [r7, #13]
 8005e3e:	7b7b      	ldrb	r3, [r7, #13]
 8005e40:	2b0f      	cmp	r3, #15
 8005e42:	d902      	bls.n	8005e4a <nextTx+0x86>
				chnl -= MAX_CHANNELS;
 8005e44:	7b7b      	ldrb	r3, [r7, #13]
 8005e46:	3b10      	subs	r3, #16
 8005e48:	737b      	strb	r3, [r7, #13]
			if ((LMIC.channelMap & (1 << chnl)) != 0 &&  // channel enabled
 8005e4a:	4b2b      	ldr	r3, [pc, #172]	@ (8005ef8 <nextTx+0x134>)
 8005e4c:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8005e50:	461a      	mov	r2, r3
 8005e52:	7b7b      	ldrb	r3, [r7, #13]
 8005e54:	fa42 f303 	asr.w	r3, r2, r3
 8005e58:	f003 0301 	and.w	r3, r3, #1
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d02b      	beq.n	8005eb8 <nextTx+0xf4>
					(LMIC.channelDrMap[chnl] & (1 << (LMIC.datarate & 0xF)))
 8005e60:	7b7b      	ldrb	r3, [r7, #13]
 8005e62:	4a25      	ldr	r2, [pc, #148]	@ (8005ef8 <nextTx+0x134>)
 8005e64:	3340      	adds	r3, #64	@ 0x40
 8005e66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	4b22      	ldr	r3, [pc, #136]	@ (8005ef8 <nextTx+0x134>)
 8005e6e:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8005e72:	f003 030f 	and.w	r3, r3, #15
							!= 0 && band == (LMIC.channelFreq[chnl] & 0x3)) { // in selected band
 8005e76:	fa42 f303 	asr.w	r3, r2, r3
 8005e7a:	f003 0301 	and.w	r3, r3, #1
			if ((LMIC.channelMap & (1 << chnl)) != 0 &&  // channel enabled
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d01a      	beq.n	8005eb8 <nextTx+0xf4>
							!= 0 && band == (LMIC.channelFreq[chnl] & 0x3)) { // in selected band
 8005e82:	7bfa      	ldrb	r2, [r7, #15]
 8005e84:	7b7b      	ldrb	r3, [r7, #13]
 8005e86:	491c      	ldr	r1, [pc, #112]	@ (8005ef8 <nextTx+0x134>)
 8005e88:	3310      	adds	r3, #16
 8005e8a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e8e:	f003 0303 	and.w	r3, r3, #3
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d110      	bne.n	8005eb8 <nextTx+0xf4>
				LMIC.txChnl = LMIC.bands[band].lastchnl = chnl;
 8005e96:	7bfa      	ldrb	r2, [r7, #15]
 8005e98:	4917      	ldr	r1, [pc, #92]	@ (8005ef8 <nextTx+0x134>)
 8005e9a:	1d13      	adds	r3, r2, #4
 8005e9c:	00db      	lsls	r3, r3, #3
 8005e9e:	440b      	add	r3, r1
 8005ea0:	7b79      	ldrb	r1, [r7, #13]
 8005ea2:	70d9      	strb	r1, [r3, #3]
 8005ea4:	4914      	ldr	r1, [pc, #80]	@ (8005ef8 <nextTx+0x134>)
 8005ea6:	1d13      	adds	r3, r2, #4
 8005ea8:	00db      	lsls	r3, r3, #3
 8005eaa:	440b      	add	r3, r1
 8005eac:	78da      	ldrb	r2, [r3, #3]
 8005eae:	4b12      	ldr	r3, [pc, #72]	@ (8005ef8 <nextTx+0x134>)
 8005eb0:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
				return mintime;
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	e016      	b.n	8005ee6 <nextTx+0x122>
		for (u1_t ci = 0; ci < MAX_CHANNELS; ci++) {
 8005eb8:	7b3b      	ldrb	r3, [r7, #12]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	733b      	strb	r3, [r7, #12]
 8005ebe:	7b3b      	ldrb	r3, [r7, #12]
 8005ec0:	2b0f      	cmp	r3, #15
 8005ec2:	d9b9      	bls.n	8005e38 <nextTx+0x74>
			}
		}
		if ((bmap &= ~(1 << band)) == 0) {
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ecc:	b25b      	sxtb	r3, r3
 8005ece:	43db      	mvns	r3, r3
 8005ed0:	b25a      	sxtb	r2, r3
 8005ed2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	b25b      	sxtb	r3, r3
 8005eda:	75fb      	strb	r3, [r7, #23]
 8005edc:	7dfb      	ldrb	r3, [r7, #23]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f47f af76 	bne.w	8005dd0 <nextTx+0xc>
			// No feasible channel  found!
			return mintime;
 8005ee4:	693b      	ldr	r3, [r7, #16]
		}
	} while (1);
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	371c      	adds	r7, #28
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	44aa2000 	.word	0x44aa2000
 8005ef8:	2000033c 	.word	0x2000033c

08005efc <setBcnRxParams>:

static void setBcnRxParams(void)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	af00      	add	r7, sp, #0
	LMIC.dataLen = 0;
 8005f00:	4b10      	ldr	r3, [pc, #64]	@ (8005f44 <setBcnRxParams+0x48>)
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
	LMIC.freq = LMIC.channelFreq[LMIC.bcnChnl] & ~(u4_t) 3;
 8005f08:	4b0e      	ldr	r3, [pc, #56]	@ (8005f44 <setBcnRxParams+0x48>)
 8005f0a:	f893 3188 	ldrb.w	r3, [r3, #392]	@ 0x188
 8005f0e:	4a0d      	ldr	r2, [pc, #52]	@ (8005f44 <setBcnRxParams+0x48>)
 8005f10:	3310      	adds	r3, #16
 8005f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f16:	f023 0303 	bic.w	r3, r3, #3
 8005f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8005f44 <setBcnRxParams+0x48>)
 8005f1c:	6093      	str	r3, [r2, #8]
	LMIC.rps = setIh(setNocrc(dndr2rps((dr_t) DR_BCN), 1), LEN_BCN);
 8005f1e:	2003      	movs	r0, #3
 8005f20:	f7fe fff6 	bl	8004f10 <dndr2rps>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2101      	movs	r1, #1
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7fe ffa2 	bl	8004e72 <setNocrc>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2111      	movs	r1, #17
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7fe ffc3 	bl	8004ebe <setIh>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	4b01      	ldr	r3, [pc, #4]	@ (8005f44 <setBcnRxParams+0x48>)
 8005f3e:	81da      	strh	r2, [r3, #14]
}
 8005f40:	bf00      	nop
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	2000033c 	.word	0x2000033c

08005f48 <initJoinLoop>:

#define setRx1Params() /*LMIC.freq/rps remain unchanged*/

static void initJoinLoop(void)
{
 8005f48:	b598      	push	{r3, r4, r7, lr}
 8005f4a:	af00      	add	r7, sp, #0
#if CFG_TxContinuousMode
  LMIC.txChnl = 0;
#else
	LMIC.txChnl = os_getRndU1() % NUM_DEFAULT_CHANNELS;
 8005f4c:	f002 ffbc 	bl	8008ec8 <radio_rand1>
 8005f50:	4603      	mov	r3, r0
 8005f52:	461a      	mov	r2, r3
 8005f54:	4b15      	ldr	r3, [pc, #84]	@ (8005fac <initJoinLoop+0x64>)
 8005f56:	fba3 1302 	umull	r1, r3, r3, r2
 8005f5a:	0899      	lsrs	r1, r3, #2
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	005b      	lsls	r3, r3, #1
 8005f60:	440b      	add	r3, r1
 8005f62:	005b      	lsls	r3, r3, #1
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	b2da      	uxtb	r2, r3
 8005f68:	4b11      	ldr	r3, [pc, #68]	@ (8005fb0 <initJoinLoop+0x68>)
 8005f6a:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
#endif
	LMIC.adrTxPow = 14;
 8005f6e:	4b10      	ldr	r3, [pc, #64]	@ (8005fb0 <initJoinLoop+0x68>)
 8005f70:	220e      	movs	r2, #14
 8005f72:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf
	setDrJoin(DRCHG_SET, DR_SF7);
 8005f76:	2105      	movs	r1, #5
 8005f78:	2000      	movs	r0, #0
 8005f7a:	f7ff fd2b 	bl	80059d4 <setDrJoin>
	initDefaultChannels(1);
 8005f7e:	2001      	movs	r0, #1
 8005f80:	f7ff fd6a 	bl	8005a58 <initDefaultChannels>
	ASSERT((LMIC.opmode & OP_NEXTCHNL) == 0);
 8005f84:	4b0a      	ldr	r3, [pc, #40]	@ (8005fb0 <initJoinLoop+0x68>)
 8005f86:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8005f8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d001      	beq.n	8005f96 <initJoinLoop+0x4e>
 8005f92:	f7fe fe71 	bl	8004c78 <hal_failed>
	LMIC.txend = LMIC.bands[BAND_MILLI].avail + rndDelay(8);
 8005f96:	4b06      	ldr	r3, [pc, #24]	@ (8005fb0 <initJoinLoop+0x68>)
 8005f98:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8005f9a:	2008      	movs	r0, #8
 8005f9c:	f7ff fcae 	bl	80058fc <rndDelay>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	4423      	add	r3, r4
 8005fa4:	4a02      	ldr	r2, [pc, #8]	@ (8005fb0 <initJoinLoop+0x68>)
 8005fa6:	6013      	str	r3, [r2, #0]
}
 8005fa8:	bf00      	nop
 8005faa:	bd98      	pop	{r3, r4, r7, pc}
 8005fac:	aaaaaaab 	.word	0xaaaaaaab
 8005fb0:	2000033c 	.word	0x2000033c

08005fb4 <nextJoinState>:

static ostime_t nextJoinState(void)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
	u1_t failed = 0;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	71fb      	strb	r3, [r7, #7]

	// Try 869.x and then 864.x with same DR
	// If both fail try next lower datarate
	if (++LMIC.txChnl == NUM_DEFAULT_CHANNELS)
 8005fbe:	4b30      	ldr	r3, [pc, #192]	@ (8006080 <nextJoinState+0xcc>)
 8005fc0:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	4b2d      	ldr	r3, [pc, #180]	@ (8006080 <nextJoinState+0xcc>)
 8005fca:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
 8005fce:	4b2c      	ldr	r3, [pc, #176]	@ (8006080 <nextJoinState+0xcc>)
 8005fd0:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8005fd4:	2b06      	cmp	r3, #6
 8005fd6:	d103      	bne.n	8005fe0 <nextJoinState+0x2c>
		LMIC.txChnl = 0;
 8005fd8:	4b29      	ldr	r3, [pc, #164]	@ (8006080 <nextJoinState+0xcc>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
	if ((++LMIC.txCnt & 1) == 0) {
 8005fe0:	4b27      	ldr	r3, [pc, #156]	@ (8006080 <nextJoinState+0xcc>)
 8005fe2:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	b2da      	uxtb	r2, r3
 8005fea:	4b25      	ldr	r3, [pc, #148]	@ (8006080 <nextJoinState+0xcc>)
 8005fec:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
 8005ff0:	4b23      	ldr	r3, [pc, #140]	@ (8006080 <nextJoinState+0xcc>)
 8005ff2:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d112      	bne.n	8006024 <nextJoinState+0x70>
		// Lower DR every 2nd try (having tried 868.x and 864.x with the same DR)
		if (LMIC.datarate == DR_SF9)
 8005ffe:	4b20      	ldr	r3, [pc, #128]	@ (8006080 <nextJoinState+0xcc>)
 8006000:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8006004:	2b03      	cmp	r3, #3
 8006006:	d102      	bne.n	800600e <nextJoinState+0x5a>
			failed = 1; // we have tried all DR - signal EV_JOIN_FAILED
 8006008:	2301      	movs	r3, #1
 800600a:	71fb      	strb	r3, [r7, #7]
 800600c:	e00a      	b.n	8006024 <nextJoinState+0x70>
		else
			setDrJoin(DRCHG_NOJACC, decDR((dr_t) LMIC.datarate));
 800600e:	4b1c      	ldr	r3, [pc, #112]	@ (8006080 <nextJoinState+0xcc>)
 8006010:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8006014:	4618      	mov	r0, r3
 8006016:	f7fe ff8f 	bl	8004f38 <decDR>
 800601a:	4603      	mov	r3, r0
 800601c:	4619      	mov	r1, r3
 800601e:	2001      	movs	r0, #1
 8006020:	f7ff fcd8 	bl	80059d4 <setDrJoin>
	}
	// Clear NEXTCHNL because join state engine controls channel hopping
	LMIC.opmode &= ~OP_NEXTCHNL;
 8006024:	4b16      	ldr	r3, [pc, #88]	@ (8006080 <nextJoinState+0xcc>)
 8006026:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800602a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800602e:	b29a      	uxth	r2, r3
 8006030:	4b13      	ldr	r3, [pc, #76]	@ (8006080 <nextJoinState+0xcc>)
 8006032:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	// Move txend to randomize synchronized concurrent joins.
	// Duty cycle is based on txend.
	ostime_t time = os_getTime();
 8006036:	f002 fa1d 	bl	8008474 <os_getTime>
 800603a:	6038      	str	r0, [r7, #0]
	if (time - LMIC.bands[BAND_MILLI].avail < 0)
 800603c:	4b10      	ldr	r3, [pc, #64]	@ (8006080 <nextJoinState+0xcc>)
 800603e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	2b00      	cmp	r3, #0
 8006046:	da02      	bge.n	800604e <nextJoinState+0x9a>
		time = LMIC.bands[BAND_MILLI].avail;
 8006048:	4b0d      	ldr	r3, [pc, #52]	@ (8006080 <nextJoinState+0xcc>)
 800604a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800604c:	603b      	str	r3, [r7, #0]
	// Avoid collision with JOIN ACCEPT @ SF12 being sent by GW (but we missed it)
			? DNW2_SAFETY_ZONE
			// Otherwise: randomize join (street lamp case):
			// SF12:255, SF11:127, .., SF7:8secs
			:
				DNW2_SAFETY_ZONE + rndDelay(255 >> LMIC.datarate));
 800604e:	4b0c      	ldr	r3, [pc, #48]	@ (8006080 <nextJoinState+0xcc>)
 8006050:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8006054:	461a      	mov	r2, r3
 8006056:	23ff      	movs	r3, #255	@ 0xff
 8006058:	4113      	asrs	r3, r2
 800605a:	b2db      	uxtb	r3, r3
 800605c:	4618      	mov	r0, r3
 800605e:	f7ff fc4d 	bl	80058fc <rndDelay>
 8006062:	4603      	mov	r3, r0
 8006064:	f503 33bb 	add.w	r3, r3, #95744	@ 0x17600
 8006068:	f503 7380 	add.w	r3, r3, #256	@ 0x100
	LMIC.txend = time + (isTESTMODE()
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	4413      	add	r3, r2
 8006070:	4a03      	ldr	r2, [pc, #12]	@ (8006080 <nextJoinState+0xcc>)
 8006072:	6013      	str	r3, [r2, #0]
	// 1 - triggers EV_JOIN_FAILED event
	return failed;
 8006074:	79fb      	ldrb	r3, [r7, #7]
}
 8006076:	4618      	mov	r0, r3
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	2000033c 	.word	0x2000033c

08006084 <runEngineUpdate>:
#else
#error Unsupported frequency band!
#endif

static void runEngineUpdate(xref2osjob_t osjob)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
	engineUpdate();
 800608c:	f001 fcb6 	bl	80079fc <engineUpdate>
}
 8006090:	bf00      	nop
 8006092:	3708      	adds	r7, #8
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <reportEvent>:

static void reportEvent(ev_t ev)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	4603      	mov	r3, r0
 80060a0:	71fb      	strb	r3, [r7, #7]
	EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
					e_.eui = MAIN::CDEV->getEui(),
					e_.info = ev));
	ON_LMIC_EVENT(ev);
 80060a2:	79fb      	ldrb	r3, [r7, #7]
 80060a4:	4618      	mov	r0, r3
 80060a6:	f002 f823 	bl	80080f0 <onEvent>
	engineUpdate();
 80060aa:	f001 fca7 	bl	80079fc <engineUpdate>
}
 80060ae:	bf00      	nop
 80060b0:	3708      	adds	r7, #8
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <runReset>:

static void runReset(xref2osjob_t osjob)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b082      	sub	sp, #8
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
	// Disable session
	LMIC_reset();
 80060be:	f001 fe67 	bl	8007d90 <LMIC_reset>
	LMIC_startJoining();
 80060c2:	f001 fa0f 	bl	80074e4 <LMIC_startJoining>
	reportEvent(EV_RESET);
 80060c6:	200c      	movs	r0, #12
 80060c8:	f7ff ffe6 	bl	8006098 <reportEvent>
}
 80060cc:	bf00      	nop
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <stateJustJoined>:

static void stateJustJoined(void)
{
 80060d4:	b480      	push	{r7}
 80060d6:	af00      	add	r7, sp, #0
	LMIC.seqnoDn = LMIC.seqnoUp = 0;
 80060d8:	4b2f      	ldr	r3, [pc, #188]	@ (8006198 <stateJustJoined+0xc4>)
 80060da:	2200      	movs	r2, #0
 80060dc:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
 80060e0:	4b2d      	ldr	r3, [pc, #180]	@ (8006198 <stateJustJoined+0xc4>)
 80060e2:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80060e6:	4a2c      	ldr	r2, [pc, #176]	@ (8006198 <stateJustJoined+0xc4>)
 80060e8:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
	LMIC.rejoinCnt = 0;
 80060ec:	4b2a      	ldr	r3, [pc, #168]	@ (8006198 <stateJustJoined+0xc4>)
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
	LMIC.dnConf = LMIC.adrChanged = LMIC.ladrAns = LMIC.devsAns = 0;
 80060f4:	4b28      	ldr	r3, [pc, #160]	@ (8006198 <stateJustJoined+0xc4>)
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
 80060fc:	4b26      	ldr	r3, [pc, #152]	@ (8006198 <stateJustJoined+0xc4>)
 80060fe:	f893 2126 	ldrb.w	r2, [r3, #294]	@ 0x126
 8006102:	4b25      	ldr	r3, [pc, #148]	@ (8006198 <stateJustJoined+0xc4>)
 8006104:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
 8006108:	4b23      	ldr	r3, [pc, #140]	@ (8006198 <stateJustJoined+0xc4>)
 800610a:	f893 2125 	ldrb.w	r2, [r3, #293]	@ 0x125
 800610e:	4b22      	ldr	r3, [pc, #136]	@ (8006198 <stateJustJoined+0xc4>)
 8006110:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
 8006114:	4b20      	ldr	r3, [pc, #128]	@ (8006198 <stateJustJoined+0xc4>)
 8006116:	f893 2122 	ldrb.w	r2, [r3, #290]	@ 0x122
 800611a:	4b1f      	ldr	r3, [pc, #124]	@ (8006198 <stateJustJoined+0xc4>)
 800611c:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
	LMIC.moreData = LMIC.dn2Ans = LMIC.snchAns = LMIC.dutyCapAns = 0;
 8006120:	4b1d      	ldr	r3, [pc, #116]	@ (8006198 <stateJustJoined+0xc4>)
 8006122:	2200      	movs	r2, #0
 8006124:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
 8006128:	4b1b      	ldr	r3, [pc, #108]	@ (8006198 <stateJustJoined+0xc4>)
 800612a:	f893 2129 	ldrb.w	r2, [r3, #297]	@ 0x129
 800612e:	4b1a      	ldr	r3, [pc, #104]	@ (8006198 <stateJustJoined+0xc4>)
 8006130:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
 8006134:	4b18      	ldr	r3, [pc, #96]	@ (8006198 <stateJustJoined+0xc4>)
 8006136:	f893 212a 	ldrb.w	r2, [r3, #298]	@ 0x12a
 800613a:	4b17      	ldr	r3, [pc, #92]	@ (8006198 <stateJustJoined+0xc4>)
 800613c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
 8006140:	4b15      	ldr	r3, [pc, #84]	@ (8006198 <stateJustJoined+0xc4>)
 8006142:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8006146:	4b14      	ldr	r3, [pc, #80]	@ (8006198 <stateJustJoined+0xc4>)
 8006148:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
	LMIC.pingSetAns = 0;
 800614c:	4b12      	ldr	r3, [pc, #72]	@ (8006198 <stateJustJoined+0xc4>)
 800614e:	2200      	movs	r2, #0
 8006150:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
	LMIC.upRepeat = 0;
 8006154:	4b10      	ldr	r3, [pc, #64]	@ (8006198 <stateJustJoined+0xc4>)
 8006156:	2200      	movs	r2, #0
 8006158:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
	LMIC.adrAckReq = LINK_CHECK_INIT;
 800615c:	4b0e      	ldr	r3, [pc, #56]	@ (8006198 <stateJustJoined+0xc4>)
 800615e:	22f4      	movs	r2, #244	@ 0xf4
 8006160:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
	LMIC.dn2Dr = DR_DNW2;
 8006164:	4b0c      	ldr	r3, [pc, #48]	@ (8006198 <stateJustJoined+0xc4>)
 8006166:	2200      	movs	r2, #0
 8006168:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
	LMIC.dn2Freq = FREQ_DNW2;
 800616c:	4b0a      	ldr	r3, [pc, #40]	@ (8006198 <stateJustJoined+0xc4>)
 800616e:	4a0b      	ldr	r2, [pc, #44]	@ (800619c <stateJustJoined+0xc8>)
 8006170:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
	LMIC.bcnChnl = CHNL_BCN;
 8006174:	4b08      	ldr	r3, [pc, #32]	@ (8006198 <stateJustJoined+0xc4>)
 8006176:	2205      	movs	r2, #5
 8006178:	f883 2188 	strb.w	r2, [r3, #392]	@ 0x188
	LMIC.ping.freq = FREQ_PING;
 800617c:	4b06      	ldr	r3, [pc, #24]	@ (8006198 <stateJustJoined+0xc4>)
 800617e:	4a07      	ldr	r2, [pc, #28]	@ (800619c <stateJustJoined+0xc8>)
 8006180:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
	LMIC.ping.dr = DR_PING;
 8006184:	4b04      	ldr	r3, [pc, #16]	@ (8006198 <stateJustJoined+0xc4>)
 8006186:	2203      	movs	r2, #3
 8006188:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
}
 800618c:	bf00      	nop
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	2000033c 	.word	0x2000033c
 800619c:	33d3e608 	.word	0x33d3e608

080061a0 <decodeBeacon>:
// ================================================================================
// Decoding frames

// Decode beacon  - do not overwrite bcninfo unless we have a match!
static int decodeBeacon(void)
{
 80061a0:	b590      	push	{r4, r7, lr}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
	ASSERT(LMIC.dataLen == LEN_BCN); // implicit header RX guarantees this
 80061a6:	4b46      	ldr	r3, [pc, #280]	@ (80062c0 <decodeBeacon+0x120>)
 80061a8:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80061ac:	2b11      	cmp	r3, #17
 80061ae:	d001      	beq.n	80061b4 <decodeBeacon+0x14>
 80061b0:	f7fe fd62 	bl	8004c78 <hal_failed>
	xref2u1_t d = LMIC.frame;
 80061b4:	4b43      	ldr	r3, [pc, #268]	@ (80062c4 <decodeBeacon+0x124>)
 80061b6:	607b      	str	r3, [r7, #4]
	if (
#if defined CFG_eu868
	d[OFF_BCN_CRC1] != (u1_t) os_crc16(d, OFF_BCN_CRC1)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	3307      	adds	r3, #7
 80061bc:	781c      	ldrb	r4, [r3, #0]
 80061be:	2107      	movs	r1, #7
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f7fe ffb0 	bl	8005126 <os_crc16>
 80061c6:	4603      	mov	r3, r0
 80061c8:	b2db      	uxtb	r3, r3
	if (
 80061ca:	429c      	cmp	r4, r3
 80061cc:	d001      	beq.n	80061d2 <decodeBeacon+0x32>
#elif CFG_us915
        os_rlsbf2(&d[OFF_BCN_CRC1]) != os_crc16(d,OFF_BCN_CRC1)
#endif
			)
		return 0;   // first (common) part fails CRC check
 80061ce:	2300      	movs	r3, #0
 80061d0:	e071      	b.n	80062b6 <decodeBeacon+0x116>
	// First set of fields is ok
	u4_t bcnnetid = os_rlsbf4(&d[OFF_BCN_NETID]) & 0xFFFFFF;
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f7fe ff0c 	bl	8004ff0 <os_rlsbf4>
 80061d8:	4603      	mov	r3, r0
 80061da:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80061de:	603b      	str	r3, [r7, #0]
	if (bcnnetid != LMIC.netid)
 80061e0:	4b37      	ldr	r3, [pc, #220]	@ (80062c0 <decodeBeacon+0x120>)
 80061e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80061e6:	683a      	ldr	r2, [r7, #0]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d002      	beq.n	80061f2 <decodeBeacon+0x52>
		return -1;  // not the beacon we're looking for
 80061ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80061f0:	e061      	b.n	80062b6 <decodeBeacon+0x116>

	LMIC.bcninfo.flags &= ~(BCN_PARTIAL | BCN_FULL);
 80061f2:	4b33      	ldr	r3, [pc, #204]	@ (80062c0 <decodeBeacon+0x120>)
 80061f4:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 80061f8:	f023 0303 	bic.w	r3, r3, #3
 80061fc:	b2da      	uxtb	r2, r3
 80061fe:	4b30      	ldr	r3, [pc, #192]	@ (80062c0 <decodeBeacon+0x120>)
 8006200:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
	// Match - update bcninfo structure
	LMIC.bcninfo.snr = LMIC.snr;
 8006204:	4b2e      	ldr	r3, [pc, #184]	@ (80062c0 <decodeBeacon+0x120>)
 8006206:	f993 200d 	ldrsb.w	r2, [r3, #13]
 800620a:	4b2d      	ldr	r3, [pc, #180]	@ (80062c0 <decodeBeacon+0x120>)
 800620c:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
	LMIC.bcninfo.rssi = LMIC.rssi;
 8006210:	4b2b      	ldr	r3, [pc, #172]	@ (80062c0 <decodeBeacon+0x120>)
 8006212:	f993 200c 	ldrsb.w	r2, [r3, #12]
 8006216:	4b2a      	ldr	r3, [pc, #168]	@ (80062c0 <decodeBeacon+0x120>)
 8006218:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
	LMIC.bcninfo.txtime = LMIC.rxtime - AIRTIME_BCN_osticks;
 800621c:	4b28      	ldr	r3, [pc, #160]	@ (80062c0 <decodeBeacon+0x120>)
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f5a3 5390 	sub.w	r3, r3, #4608	@ 0x1200
 8006224:	3b0c      	subs	r3, #12
 8006226:	4a26      	ldr	r2, [pc, #152]	@ (80062c0 <decodeBeacon+0x120>)
 8006228:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
	LMIC.bcninfo.time = os_rlsbf4(&d[OFF_BCN_TIME]);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	3303      	adds	r3, #3
 8006230:	4618      	mov	r0, r3
 8006232:	f7fe fedd 	bl	8004ff0 <os_rlsbf4>
 8006236:	4603      	mov	r3, r0
 8006238:	4a21      	ldr	r2, [pc, #132]	@ (80062c0 <decodeBeacon+0x120>)
 800623a:	f8c2 3198 	str.w	r3, [r2, #408]	@ 0x198
	LMIC.bcninfo.flags |= BCN_PARTIAL;
 800623e:	4b20      	ldr	r3, [pc, #128]	@ (80062c0 <decodeBeacon+0x120>)
 8006240:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8006244:	f043 0301 	orr.w	r3, r3, #1
 8006248:	b2da      	uxtb	r2, r3
 800624a:	4b1d      	ldr	r3, [pc, #116]	@ (80062c0 <decodeBeacon+0x120>)
 800624c:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196

	// Check 2nd set
	if (os_rlsbf2(&d[OFF_BCN_CRC2]) != os_crc16(d, OFF_BCN_CRC2))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	330f      	adds	r3, #15
 8006254:	4618      	mov	r0, r3
 8006256:	f7fe feb6 	bl	8004fc6 <os_rlsbf2>
 800625a:	4603      	mov	r3, r0
 800625c:	461c      	mov	r4, r3
 800625e:	210f      	movs	r1, #15
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f7fe ff60 	bl	8005126 <os_crc16>
 8006266:	4603      	mov	r3, r0
 8006268:	429c      	cmp	r4, r3
 800626a:	d001      	beq.n	8006270 <decodeBeacon+0xd0>
		return 1;
 800626c:	2301      	movs	r3, #1
 800626e:	e022      	b.n	80062b6 <decodeBeacon+0x116>
	// Second set of fields is ok
	LMIC.bcninfo.lat = (s4_t) os_rlsbf4(&d[OFF_BCN_LAT - 1]) >> 8; // read as signed 24-bit
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	3308      	adds	r3, #8
 8006274:	4618      	mov	r0, r3
 8006276:	f7fe febb 	bl	8004ff0 <os_rlsbf4>
 800627a:	4603      	mov	r3, r0
 800627c:	121b      	asrs	r3, r3, #8
 800627e:	4a10      	ldr	r2, [pc, #64]	@ (80062c0 <decodeBeacon+0x120>)
 8006280:	f8c2 31a0 	str.w	r3, [r2, #416]	@ 0x1a0
	LMIC.bcninfo.lon = (s4_t) os_rlsbf4(&d[OFF_BCN_LON - 1]) >> 8; // ditto
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	330b      	adds	r3, #11
 8006288:	4618      	mov	r0, r3
 800628a:	f7fe feb1 	bl	8004ff0 <os_rlsbf4>
 800628e:	4603      	mov	r3, r0
 8006290:	121b      	asrs	r3, r3, #8
 8006292:	4a0b      	ldr	r2, [pc, #44]	@ (80062c0 <decodeBeacon+0x120>)
 8006294:	f8c2 31a4 	str.w	r3, [r2, #420]	@ 0x1a4
	LMIC.bcninfo.info = d[OFF_BCN_INFO];
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	7a1a      	ldrb	r2, [r3, #8]
 800629c:	4b08      	ldr	r3, [pc, #32]	@ (80062c0 <decodeBeacon+0x120>)
 800629e:	f883 219c 	strb.w	r2, [r3, #412]	@ 0x19c
	LMIC.bcninfo.flags |= BCN_FULL;
 80062a2:	4b07      	ldr	r3, [pc, #28]	@ (80062c0 <decodeBeacon+0x120>)
 80062a4:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 80062a8:	f043 0302 	orr.w	r3, r3, #2
 80062ac:	b2da      	uxtb	r2, r3
 80062ae:	4b04      	ldr	r3, [pc, #16]	@ (80062c0 <decodeBeacon+0x120>)
 80062b0:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
	return 2;
 80062b4:	2302      	movs	r3, #2
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd90      	pop	{r4, r7, pc}
 80062be:	bf00      	nop
 80062c0:	2000033c 	.word	0x2000033c
 80062c4:	20000484 	.word	0x20000484

080062c8 <decodeFrame>:

static bit_t decodeFrame(void)
{
 80062c8:	b590      	push	{r4, r7, lr}
 80062ca:	b09b      	sub	sp, #108	@ 0x6c
 80062cc:	af02      	add	r7, sp, #8
	xref2u1_t d = LMIC.frame;
 80062ce:	4b98      	ldr	r3, [pc, #608]	@ (8006530 <decodeFrame+0x268>)
 80062d0:	64bb      	str	r3, [r7, #72]	@ 0x48
	u1_t hdr = d[0];
 80062d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	u1_t ftype = hdr & HDR_FTYPE;
 80062da:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80062de:	f023 031f 	bic.w	r3, r3, #31
 80062e2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	int dlen = LMIC.dataLen;
 80062e6:	4b93      	ldr	r3, [pc, #588]	@ (8006534 <decodeFrame+0x26c>)
 80062e8:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80062ec:	643b      	str	r3, [r7, #64]	@ 0x40
	if (dlen < OFF_DAT_OPTS + 4 || (hdr & HDR_MAJOR) != HDR_MAJOR_V1
 80062ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062f0:	2b0b      	cmp	r3, #11
 80062f2:	dd0d      	ble.n	8006310 <decodeFrame+0x48>
 80062f4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80062f8:	f003 0303 	and.w	r3, r3, #3
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d107      	bne.n	8006310 <decodeFrame+0x48>
			|| (ftype != HDR_FTYPE_DADN && ftype != HDR_FTYPE_DCDN)) {
 8006300:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8006304:	2b60      	cmp	r3, #96	@ 0x60
 8006306:	d014      	beq.n	8006332 <decodeFrame+0x6a>
 8006308:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800630c:	2ba0      	cmp	r3, #160	@ 0xa0
 800630e:	d010      	beq.n	8006332 <decodeFrame+0x6a>
		// Basic sanity checks failed
		EV(specCond, WARN, (e_.reason = EV::specCond_t::UNEXPECTED_FRAME,
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = dlen < 4 ? 0 : os_rlsbf4(&d[dlen-4]),
						e_.info2 = hdr + (dlen<<8)));
		norx: LMIC.dataLen = 0;
 8006310:	bf00      	nop
 8006312:	e008      	b.n	8006326 <decodeFrame+0x5e>
	if (addr != LMIC.devaddr) {
		EV(specCond, WARN, (e_.reason = EV::specCond_t::ALIEN_ADDRESS,
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = addr,
						e_.info2 = LMIC.devaddr));
		goto norx;
 8006314:	bf00      	nop
 8006316:	e006      	b.n	8006326 <decodeFrame+0x5e>
	}
	if (poff > pend) {
		EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = 0x1000000 + (poff-pend) + (fct<<8) + (dlen<<16)));
		goto norx;
 8006318:	bf00      	nop
 800631a:	e004      	b.n	8006326 <decodeFrame+0x5e>
		EV(spe3Cond, ERR, (e_.reason = EV::spe3Cond_t::CORRUPTED_MIC,
						e_.eui1 = MAIN::CDEV->getEui(),
						e_.info1 = Base::lsbf4(&d[pend]),
						e_.info2 = seqno,
						e_.info3 = LMIC.devaddr));
		goto norx;
 800631c:	bf00      	nop
 800631e:	e002      	b.n	8006326 <decodeFrame+0x5e>
		if ((s4_t) seqno > (s4_t) LMIC.seqnoDn) {
			EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_ROLL_OVER,
							e_.eui = MAIN::CDEV->getEui(),
							e_.info = LMIC.seqnoDn,
							e_.info2 = seqno));
			goto norx;
 8006320:	bf00      	nop
 8006322:	e000      	b.n	8006326 <decodeFrame+0x5e>
				|| ftype != HDR_FTYPE_DCDN) {
			EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_OBSOLETE,
							e_.eui = MAIN::CDEV->getEui(),
							e_.info = LMIC.seqnoDn,
							e_.info2 = seqno));
			goto norx;
 8006324:	bf00      	nop
		norx: LMIC.dataLen = 0;
 8006326:	4b83      	ldr	r3, [pc, #524]	@ (8006534 <decodeFrame+0x26c>)
 8006328:	2200      	movs	r2, #0
 800632a:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
		return 0;
 800632e:	2300      	movs	r3, #0
 8006330:	e2f6      	b.n	8006920 <decodeFrame+0x658>
	int fct = d[OFF_DAT_FCT];
 8006332:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006334:	3305      	adds	r3, #5
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	63fb      	str	r3, [r7, #60]	@ 0x3c
	u4_t addr = os_rlsbf4(&d[OFF_DAT_ADDR]);
 800633a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800633c:	3301      	adds	r3, #1
 800633e:	4618      	mov	r0, r3
 8006340:	f7fe fe56 	bl	8004ff0 <os_rlsbf4>
 8006344:	63b8      	str	r0, [r7, #56]	@ 0x38
	u4_t seqno = os_rlsbf2(&d[OFF_DAT_SEQNO]);
 8006346:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006348:	3306      	adds	r3, #6
 800634a:	4618      	mov	r0, r3
 800634c:	f7fe fe3b 	bl	8004fc6 <os_rlsbf2>
 8006350:	4603      	mov	r3, r0
 8006352:	637b      	str	r3, [r7, #52]	@ 0x34
	int olen = fct & FCT_OPTLEN;
 8006354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006356:	f003 030f 	and.w	r3, r3, #15
 800635a:	633b      	str	r3, [r7, #48]	@ 0x30
	int ackup = (fct & FCT_ACK) != 0 ? 1 : 0;   // ACK last up frame
 800635c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800635e:	115b      	asrs	r3, r3, #5
 8006360:	f003 0301 	and.w	r3, r3, #1
 8006364:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int poff = OFF_DAT_OPTS + olen;
 8006366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006368:	3308      	adds	r3, #8
 800636a:	65fb      	str	r3, [r7, #92]	@ 0x5c
	int pend = dlen - 4;  // MIC
 800636c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800636e:	3b04      	subs	r3, #4
 8006370:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (addr != LMIC.devaddr) {
 8006372:	4b70      	ldr	r3, [pc, #448]	@ (8006534 <decodeFrame+0x26c>)
 8006374:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006378:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800637a:	429a      	cmp	r2, r3
 800637c:	d1ca      	bne.n	8006314 <decodeFrame+0x4c>
	if (poff > pend) {
 800637e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006382:	429a      	cmp	r2, r3
 8006384:	dcc8      	bgt.n	8006318 <decodeFrame+0x50>
	int port = -1;
 8006386:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800638a:	65bb      	str	r3, [r7, #88]	@ 0x58
	int replayConf = 0;
 800638c:	2300      	movs	r3, #0
 800638e:	657b      	str	r3, [r7, #84]	@ 0x54
	if (pend > poff)
 8006390:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006392:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006394:	429a      	cmp	r2, r3
 8006396:	dd07      	ble.n	80063a8 <decodeFrame+0xe0>
		port = d[poff++];
 8006398:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800639e:	461a      	mov	r2, r3
 80063a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063a2:	4413      	add	r3, r2
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	65bb      	str	r3, [r7, #88]	@ 0x58
	seqno = LMIC.seqnoDn + (u2_t) (seqno - LMIC.seqnoDn);
 80063a8:	4b62      	ldr	r3, [pc, #392]	@ (8006534 <decodeFrame+0x26c>)
 80063aa:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80063ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063b0:	b291      	uxth	r1, r2
 80063b2:	4a60      	ldr	r2, [pc, #384]	@ (8006534 <decodeFrame+0x26c>)
 80063b4:	f8d2 2118 	ldr.w	r2, [r2, #280]	@ 0x118
 80063b8:	b292      	uxth	r2, r2
 80063ba:	1a8a      	subs	r2, r1, r2
 80063bc:	b292      	uxth	r2, r2
 80063be:	4413      	add	r3, r2
 80063c0:	637b      	str	r3, [r7, #52]	@ 0x34
	if (!aes_verifyMic(LMIC.nwkKey, LMIC.devaddr, seqno, /*dn*/1, d, pend)) {
 80063c2:	4b5c      	ldr	r3, [pc, #368]	@ (8006534 <decodeFrame+0x26c>)
 80063c4:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 80063c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ca:	9301      	str	r3, [sp, #4]
 80063cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063ce:	9300      	str	r3, [sp, #0]
 80063d0:	2301      	movs	r3, #1
 80063d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063d4:	4858      	ldr	r0, [pc, #352]	@ (8006538 <decodeFrame+0x270>)
 80063d6:	f7fe ff19 	bl	800520c <aes_verifyMic>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d09d      	beq.n	800631c <decodeFrame+0x54>
	if (seqno < LMIC.seqnoDn) {
 80063e0:	4b54      	ldr	r3, [pc, #336]	@ (8006534 <decodeFrame+0x26c>)
 80063e2:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80063e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d219      	bcs.n	8006420 <decodeFrame+0x158>
		if ((s4_t) seqno > (s4_t) LMIC.seqnoDn) {
 80063ec:	4b51      	ldr	r3, [pc, #324]	@ (8006534 <decodeFrame+0x26c>)
 80063ee:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80063f2:	461a      	mov	r2, r3
 80063f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063f6:	429a      	cmp	r2, r3
 80063f8:	db92      	blt.n	8006320 <decodeFrame+0x58>
		if (seqno != LMIC.seqnoDn - 1 || !LMIC.dnConf
 80063fa:	4b4e      	ldr	r3, [pc, #312]	@ (8006534 <decodeFrame+0x26c>)
 80063fc:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8006400:	3b01      	subs	r3, #1
 8006402:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006404:	429a      	cmp	r2, r3
 8006406:	d18d      	bne.n	8006324 <decodeFrame+0x5c>
 8006408:	4b4a      	ldr	r3, [pc, #296]	@ (8006534 <decodeFrame+0x26c>)
 800640a:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 800640e:	2b00      	cmp	r3, #0
 8006410:	d088      	beq.n	8006324 <decodeFrame+0x5c>
				|| ftype != HDR_FTYPE_DCDN) {
 8006412:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8006416:	2ba0      	cmp	r3, #160	@ 0xa0
 8006418:	d184      	bne.n	8006324 <decodeFrame+0x5c>
		}
		// Replay of previous sequence number allowed only if
		// previous frame and repeated both requested confirmation
		replayConf = 1;
 800641a:	2301      	movs	r3, #1
 800641c:	657b      	str	r3, [r7, #84]	@ 0x54
 800641e:	e00e      	b.n	800643e <decodeFrame+0x176>
			EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_SKIP,
							e_.eui = MAIN::CDEV->getEui(),
							e_.info = LMIC.seqnoDn,
							e_.info2 = seqno));
		}
		LMIC.seqnoDn = seqno + 1;  // next number to be expected
 8006420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006422:	3301      	adds	r3, #1
 8006424:	4a43      	ldr	r2, [pc, #268]	@ (8006534 <decodeFrame+0x26c>)
 8006426:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
		DO_DEVDB(LMIC.seqnoDn,seqnoDn);
		// DN frame requested confirmation - provide ACK once with next UP frame
		LMIC.dnConf = (ftype == HDR_FTYPE_DCDN ? FCT_ACK : 0);
 800642a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800642e:	2ba0      	cmp	r3, #160	@ 0xa0
 8006430:	d101      	bne.n	8006436 <decodeFrame+0x16e>
 8006432:	2220      	movs	r2, #32
 8006434:	e000      	b.n	8006438 <decodeFrame+0x170>
 8006436:	2200      	movs	r2, #0
 8006438:	4b3e      	ldr	r3, [pc, #248]	@ (8006534 <decodeFrame+0x26c>)
 800643a:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
	}

	if (LMIC.dnConf || (fct & FCT_MORE))
 800643e:	4b3d      	ldr	r3, [pc, #244]	@ (8006534 <decodeFrame+0x26c>)
 8006440:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 8006444:	2b00      	cmp	r3, #0
 8006446:	d104      	bne.n	8006452 <decodeFrame+0x18a>
 8006448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800644a:	f003 0310 	and.w	r3, r3, #16
 800644e:	2b00      	cmp	r3, #0
 8006450:	d008      	beq.n	8006464 <decodeFrame+0x19c>
		LMIC.opmode |= OP_POLL;
 8006452:	4b38      	ldr	r3, [pc, #224]	@ (8006534 <decodeFrame+0x26c>)
 8006454:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006458:	f043 0310 	orr.w	r3, r3, #16
 800645c:	b29a      	uxth	r2, r3
 800645e:	4b35      	ldr	r3, [pc, #212]	@ (8006534 <decodeFrame+0x26c>)
 8006460:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac

	// We heard from network
	LMIC.adrChanged = LMIC.rejoinCnt = 0;
 8006464:	4b33      	ldr	r3, [pc, #204]	@ (8006534 <decodeFrame+0x26c>)
 8006466:	2200      	movs	r2, #0
 8006468:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
 800646c:	4b31      	ldr	r3, [pc, #196]	@ (8006534 <decodeFrame+0x26c>)
 800646e:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 8006472:	4b30      	ldr	r3, [pc, #192]	@ (8006534 <decodeFrame+0x26c>)
 8006474:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
	if (LMIC.adrAckReq != LINK_CHECK_OFF)
 8006478:	4b2e      	ldr	r3, [pc, #184]	@ (8006534 <decodeFrame+0x26c>)
 800647a:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 800647e:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 8006482:	d003      	beq.n	800648c <decodeFrame+0x1c4>
		LMIC.adrAckReq = LINK_CHECK_INIT;
 8006484:	4b2b      	ldr	r3, [pc, #172]	@ (8006534 <decodeFrame+0x26c>)
 8006486:	22f4      	movs	r2, #244	@ 0xf4
 8006488:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121

	// Process OPTS
	int m = LMIC.rssi - RSSI_OFF - getSensitivity(LMIC.rps);
 800648c:	4b29      	ldr	r3, [pc, #164]	@ (8006534 <decodeFrame+0x26c>)
 800648e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8006492:	f1a3 0440 	sub.w	r4, r3, #64	@ 0x40
 8006496:	4b27      	ldr	r3, [pc, #156]	@ (8006534 <decodeFrame+0x26c>)
 8006498:	89db      	ldrh	r3, [r3, #14]
 800649a:	4618      	mov	r0, r3
 800649c:	f7fe ffe0 	bl	8005460 <getSensitivity>
 80064a0:	4603      	mov	r3, r0
 80064a2:	1ae3      	subs	r3, r4, r3
 80064a4:	627b      	str	r3, [r7, #36]	@ 0x24
	LMIC.margin = m < 0 ? 0 : m > 254 ? 254 : m;
 80064a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	db05      	blt.n	80064b8 <decodeFrame+0x1f0>
 80064ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ae:	2bfe      	cmp	r3, #254	@ 0xfe
 80064b0:	bfa8      	it	ge
 80064b2:	23fe      	movge	r3, #254	@ 0xfe
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	e000      	b.n	80064ba <decodeFrame+0x1f2>
 80064b8:	2300      	movs	r3, #0
 80064ba:	4a1e      	ldr	r2, [pc, #120]	@ (8006534 <decodeFrame+0x26c>)
 80064bc:	f882 3124 	strb.w	r3, [r2, #292]	@ 0x124

	xref2u1_t opts = &d[OFF_DAT_OPTS];
 80064c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064c2:	3308      	adds	r3, #8
 80064c4:	623b      	str	r3, [r7, #32]
	int oidx = 0;
 80064c6:	2300      	movs	r3, #0
 80064c8:	653b      	str	r3, [r7, #80]	@ 0x50
	while (oidx < olen) {
 80064ca:	e1b5      	b.n	8006838 <decodeFrame+0x570>
		switch (opts[oidx]) {
 80064cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064ce:	6a3a      	ldr	r2, [r7, #32]
 80064d0:	4413      	add	r3, r2
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	3b02      	subs	r3, #2
 80064d6:	2b10      	cmp	r3, #16
 80064d8:	f200 81ba 	bhi.w	8006850 <decodeFrame+0x588>
 80064dc:	a201      	add	r2, pc, #4	@ (adr r2, 80064e4 <decodeFrame+0x21c>)
 80064de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e2:	bf00      	nop
 80064e4:	08006529 	.word	0x08006529
 80064e8:	0800653d 	.word	0x0800653d
 80064ec:	0800669b 	.word	0x0800669b
 80064f0:	08006617 	.word	0x08006617
 80064f4:	08006607 	.word	0x08006607
 80064f8:	080066e9 	.word	0x080066e9
 80064fc:	08006851 	.word	0x08006851
 8006500:	08006851 	.word	0x08006851
 8006504:	08006851 	.word	0x08006851
 8006508:	08006851 	.word	0x08006851
 800650c:	08006851 	.word	0x08006851
 8006510:	08006851 	.word	0x08006851
 8006514:	08006851 	.word	0x08006851
 8006518:	08006851 	.word	0x08006851
 800651c:	08006851 	.word	0x08006851
 8006520:	08006775 	.word	0x08006775
 8006524:	080067b7 	.word	0x080067b7
		case MCMD_LCHK_ANS: {
			//int gwmargin = opts[oidx+1];
			//int ngws = opts[oidx+2];
			oidx += 3;
 8006528:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800652a:	3303      	adds	r3, #3
 800652c:	653b      	str	r3, [r7, #80]	@ 0x50
			continue;
 800652e:	e183      	b.n	8006838 <decodeFrame+0x570>
 8006530:	20000484 	.word	0x20000484
 8006534:	2000033c 	.word	0x2000033c
 8006538:	20000430 	.word	0x20000430
		}
		case MCMD_LADR_REQ: {
			u1_t p1 = opts[oidx + 1];            // txpow + DR
 800653c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800653e:	3301      	adds	r3, #1
 8006540:	6a3a      	ldr	r2, [r7, #32]
 8006542:	4413      	add	r3, r2
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	72bb      	strb	r3, [r7, #10]
			u2_t chmap = os_rlsbf2(&opts[oidx + 2]); // list of enabled channels
 8006548:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800654a:	3302      	adds	r3, #2
 800654c:	6a3a      	ldr	r2, [r7, #32]
 800654e:	4413      	add	r3, r2
 8006550:	4618      	mov	r0, r3
 8006552:	f7fe fd38 	bl	8004fc6 <os_rlsbf2>
 8006556:	4603      	mov	r3, r0
 8006558:	813b      	strh	r3, [r7, #8]
			u1_t chpage = opts[oidx + 4] & MCMD_LADR_CHPAGE_MASK; // channel page
 800655a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800655c:	3304      	adds	r3, #4
 800655e:	6a3a      	ldr	r2, [r7, #32]
 8006560:	4413      	add	r3, r2
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	f023 030f 	bic.w	r3, r3, #15
 8006568:	71fb      	strb	r3, [r7, #7]
			u1_t uprpt = opts[oidx + 4] & MCMD_LADR_REPEAT_MASK; // up repeat count
 800656a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800656c:	3304      	adds	r3, #4
 800656e:	6a3a      	ldr	r2, [r7, #32]
 8006570:	4413      	add	r3, r2
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	f003 030f 	and.w	r3, r3, #15
 8006578:	71bb      	strb	r3, [r7, #6]
			oidx += 5;
 800657a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800657c:	3305      	adds	r3, #5
 800657e:	653b      	str	r3, [r7, #80]	@ 0x50

			LMIC.ladrAns = 0x80
 8006580:	4bb0      	ldr	r3, [pc, #704]	@ (8006844 <decodeFrame+0x57c>)
 8006582:	2287      	movs	r2, #135	@ 0x87
 8006584:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
					|     // Include an answer into next frame up
					MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK
					| MCMD_LADR_ANS_DRACK;
			if (!mapChannels(chpage, chmap))
 8006588:	893a      	ldrh	r2, [r7, #8]
 800658a:	79fb      	ldrb	r3, [r7, #7]
 800658c:	4611      	mov	r1, r2
 800658e:	4618      	mov	r0, r3
 8006590:	f7ff fb84 	bl	8005c9c <mapChannels>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d108      	bne.n	80065ac <decodeFrame+0x2e4>
				LMIC.ladrAns &= ~MCMD_LADR_ANS_CHACK;
 800659a:	4baa      	ldr	r3, [pc, #680]	@ (8006844 <decodeFrame+0x57c>)
 800659c:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 80065a0:	f023 0301 	bic.w	r3, r3, #1
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	4ba7      	ldr	r3, [pc, #668]	@ (8006844 <decodeFrame+0x57c>)
 80065a8:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
			dr_t dr = (dr_t) (p1 >> MCMD_LADR_DR_SHIFT);
 80065ac:	7abb      	ldrb	r3, [r7, #10]
 80065ae:	091b      	lsrs	r3, r3, #4
 80065b0:	717b      	strb	r3, [r7, #5]
			if (!validDR(dr)) {
 80065b2:	797b      	ldrb	r3, [r7, #5]
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7fe fcd7 	bl	8004f68 <validDR>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d108      	bne.n	80065d2 <decodeFrame+0x30a>
				LMIC.ladrAns &= ~MCMD_LADR_ANS_DRACK;
 80065c0:	4ba0      	ldr	r3, [pc, #640]	@ (8006844 <decodeFrame+0x57c>)
 80065c2:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 80065c6:	f023 0302 	bic.w	r3, r3, #2
 80065ca:	b2da      	uxtb	r2, r3
 80065cc:	4b9d      	ldr	r3, [pc, #628]	@ (8006844 <decodeFrame+0x57c>)
 80065ce:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
				EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
								e_.eui = MAIN::CDEV->getEui(),
								e_.info = Base::lsbf4(&d[pend]),
								e_.info2 = Base::msbf4(&opts[oidx-4])));
			}
			if ((LMIC.ladrAns & 0x7F)
 80065d2:	4b9c      	ldr	r3, [pc, #624]	@ (8006844 <decodeFrame+0x57c>)
 80065d4:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 80065d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065dc:	2b07      	cmp	r3, #7
 80065de:	d10d      	bne.n	80065fc <decodeFrame+0x334>
					== (MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK
							| MCMD_LADR_ANS_DRACK)) {
				// Nothing went wrong - use settings
				LMIC.upRepeat = uprpt;
 80065e0:	4a98      	ldr	r2, [pc, #608]	@ (8006844 <decodeFrame+0x57c>)
 80065e2:	79bb      	ldrb	r3, [r7, #6]
 80065e4:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
				setDrTxpow(DRCHG_NWKCMD, dr, pow2dBm(p1));
 80065e8:	7abb      	ldrb	r3, [r7, #10]
 80065ea:	f003 030f 	and.w	r3, r3, #15
 80065ee:	4a96      	ldr	r2, [pc, #600]	@ (8006848 <decodeFrame+0x580>)
 80065f0:	56d2      	ldrsb	r2, [r2, r3]
 80065f2:	797b      	ldrb	r3, [r7, #5]
 80065f4:	4619      	mov	r1, r3
 80065f6:	2004      	movs	r0, #4
 80065f8:	f7ff fa00 	bl	80059fc <setDrTxpow>
			}
			LMIC.adrChanged = 1;  // Trigger an ACK to NWK
 80065fc:	4b91      	ldr	r3, [pc, #580]	@ (8006844 <decodeFrame+0x57c>)
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
			continue;
 8006604:	e118      	b.n	8006838 <decodeFrame+0x570>
		}
		case MCMD_DEVS_REQ: {
			LMIC.devsAns = 1;
 8006606:	4b8f      	ldr	r3, [pc, #572]	@ (8006844 <decodeFrame+0x57c>)
 8006608:	2201      	movs	r2, #1
 800660a:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
			oidx += 1;
 800660e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006610:	3301      	adds	r3, #1
 8006612:	653b      	str	r3, [r7, #80]	@ 0x50
			continue;
 8006614:	e110      	b.n	8006838 <decodeFrame+0x570>
		}
		case MCMD_DN2P_SET: {
			dr_t dr = (dr_t) (opts[oidx + 1] & 0x0F);
 8006616:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006618:	3301      	adds	r3, #1
 800661a:	6a3a      	ldr	r2, [r7, #32]
 800661c:	4413      	add	r3, r2
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	f003 030f 	and.w	r3, r3, #15
 8006624:	74bb      	strb	r3, [r7, #18]
			u4_t freq = convFreq(&opts[oidx + 2]);
 8006626:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006628:	3302      	adds	r3, #2
 800662a:	6a3a      	ldr	r2, [r7, #32]
 800662c:	4413      	add	r3, r2
 800662e:	4618      	mov	r0, r3
 8006630:	f7ff fb12 	bl	8005c58 <convFreq>
 8006634:	60f8      	str	r0, [r7, #12]
			oidx += 5;
 8006636:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006638:	3305      	adds	r3, #5
 800663a:	653b      	str	r3, [r7, #80]	@ 0x50
			LMIC.dn2Ans = 0x80;   // answer pending
 800663c:	4b81      	ldr	r3, [pc, #516]	@ (8006844 <decodeFrame+0x57c>)
 800663e:	2280      	movs	r2, #128	@ 0x80
 8006640:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
			if (validDR(dr))
 8006644:	7cbb      	ldrb	r3, [r7, #18]
 8006646:	4618      	mov	r0, r3
 8006648:	f7fe fc8e 	bl	8004f68 <validDR>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d008      	beq.n	8006664 <decodeFrame+0x39c>
				LMIC.dn2Ans |= MCMD_DN2P_ANS_DRACK;
 8006652:	4b7c      	ldr	r3, [pc, #496]	@ (8006844 <decodeFrame+0x57c>)
 8006654:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8006658:	f043 0302 	orr.w	r3, r3, #2
 800665c:	b2da      	uxtb	r2, r3
 800665e:	4b79      	ldr	r3, [pc, #484]	@ (8006844 <decodeFrame+0x57c>)
 8006660:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
			if (freq != 0)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d008      	beq.n	800667c <decodeFrame+0x3b4>
				LMIC.dn2Ans |= MCMD_DN2P_ANS_CHACK;
 800666a:	4b76      	ldr	r3, [pc, #472]	@ (8006844 <decodeFrame+0x57c>)
 800666c:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8006670:	f043 0301 	orr.w	r3, r3, #1
 8006674:	b2da      	uxtb	r2, r3
 8006676:	4b73      	ldr	r3, [pc, #460]	@ (8006844 <decodeFrame+0x57c>)
 8006678:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
			if (LMIC.dn2Ans
 800667c:	4b71      	ldr	r3, [pc, #452]	@ (8006844 <decodeFrame+0x57c>)
 800667e:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8006682:	2b83      	cmp	r3, #131	@ 0x83
 8006684:	f040 80d7 	bne.w	8006836 <decodeFrame+0x56e>
					== (0x80 | MCMD_DN2P_ANS_DRACK | MCMD_DN2P_ANS_CHACK)) {
				LMIC.dn2Dr = dr;
 8006688:	4a6e      	ldr	r2, [pc, #440]	@ (8006844 <decodeFrame+0x57c>)
 800668a:	7cbb      	ldrb	r3, [r7, #18]
 800668c:	f882 312b 	strb.w	r3, [r2, #299]	@ 0x12b
				LMIC.dn2Freq = freq;
 8006690:	4a6c      	ldr	r2, [pc, #432]	@ (8006844 <decodeFrame+0x57c>)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
				DO_DEVDB(LMIC.dn2Dr,dn2Dr);DO_DEVDB(LMIC.dn2Freq,dn2Freq);
			}
			continue;
 8006698:	e0cd      	b.n	8006836 <decodeFrame+0x56e>
		}
		case MCMD_DCAP_REQ: {
			u1_t cap = opts[oidx + 1];
 800669a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800669c:	3301      	adds	r3, #1
 800669e:	6a3a      	ldr	r2, [r7, #32]
 80066a0:	4413      	add	r3, r2
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	72fb      	strb	r3, [r7, #11]
			oidx += 2;
 80066a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066a8:	3302      	adds	r3, #2
 80066aa:	653b      	str	r3, [r7, #80]	@ 0x50
			// A value cap=0xFF means device is OFF unless enabled again manually.
			if (cap == 0xFF)
 80066ac:	7afb      	ldrb	r3, [r7, #11]
 80066ae:	2bff      	cmp	r3, #255	@ 0xff
 80066b0:	d108      	bne.n	80066c4 <decodeFrame+0x3fc>
				LMIC.opmode |= OP_SHUTDOWN;  // stop any sending
 80066b2:	4b64      	ldr	r3, [pc, #400]	@ (8006844 <decodeFrame+0x57c>)
 80066b4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80066b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066bc:	b29a      	uxth	r2, r3
 80066be:	4b61      	ldr	r3, [pc, #388]	@ (8006844 <decodeFrame+0x57c>)
 80066c0:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			LMIC.globalDutyRate = cap & 0xF;
 80066c4:	7afb      	ldrb	r3, [r7, #11]
 80066c6:	f003 030f 	and.w	r3, r3, #15
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	4b5d      	ldr	r3, [pc, #372]	@ (8006844 <decodeFrame+0x57c>)
 80066ce:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
			LMIC.globalDutyAvail = os_getTime();
 80066d2:	f001 fecf 	bl	8008474 <os_getTime>
 80066d6:	4603      	mov	r3, r0
 80066d8:	4a5a      	ldr	r2, [pc, #360]	@ (8006844 <decodeFrame+0x57c>)
 80066da:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
			DO_DEVDB(cap,dutyCap);
			LMIC.dutyCapAns = 1;
 80066de:	4b59      	ldr	r3, [pc, #356]	@ (8006844 <decodeFrame+0x57c>)
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
			continue;
 80066e6:	e0a7      	b.n	8006838 <decodeFrame+0x570>
		}
		case MCMD_SNCH_REQ: {
			u1_t chidx = opts[oidx + 1];  // channel
 80066e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066ea:	3301      	adds	r3, #1
 80066ec:	6a3a      	ldr	r2, [r7, #32]
 80066ee:	4413      	add	r3, r2
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	76fb      	strb	r3, [r7, #27]
			u4_t freq = convFreq(&opts[oidx + 2]); // freq
 80066f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066f6:	3302      	adds	r3, #2
 80066f8:	6a3a      	ldr	r2, [r7, #32]
 80066fa:	4413      	add	r3, r2
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7ff faab 	bl	8005c58 <convFreq>
 8006702:	6178      	str	r0, [r7, #20]
			u1_t drs = opts[oidx + 5];  // datarate span
 8006704:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006706:	3305      	adds	r3, #5
 8006708:	6a3a      	ldr	r2, [r7, #32]
 800670a:	4413      	add	r3, r2
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	74fb      	strb	r3, [r7, #19]
			LMIC.snchAns = 0x80;
 8006710:	4b4c      	ldr	r3, [pc, #304]	@ (8006844 <decodeFrame+0x57c>)
 8006712:	2280      	movs	r2, #128	@ 0x80
 8006714:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
			if (freq != 0
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d026      	beq.n	800676c <decodeFrame+0x4a4>
					&& LMIC_setupChannel(chidx, freq,
							DR_RANGE_MAP(drs & 0xF, drs >> 4), -1))
 800671e:	7cfb      	ldrb	r3, [r7, #19]
 8006720:	f003 030f 	and.w	r3, r3, #15
 8006724:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006728:	fa02 f303 	lsl.w	r3, r2, r3
 800672c:	b21a      	sxth	r2, r3
 800672e:	7cfb      	ldrb	r3, [r7, #19]
 8006730:	091b      	lsrs	r3, r3, #4
 8006732:	b2db      	uxtb	r3, r3
 8006734:	f1c3 030f 	rsb	r3, r3, #15
 8006738:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800673c:	fa41 f303 	asr.w	r3, r1, r3
 8006740:	b21b      	sxth	r3, r3
 8006742:	4013      	ands	r3, r2
 8006744:	b21b      	sxth	r3, r3
					&& LMIC_setupChannel(chidx, freq,
 8006746:	b29a      	uxth	r2, r3
 8006748:	7ef8      	ldrb	r0, [r7, #27]
 800674a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800674e:	6979      	ldr	r1, [r7, #20]
 8006750:	f7ff fa08 	bl	8005b64 <LMIC_setupChannel>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d008      	beq.n	800676c <decodeFrame+0x4a4>
				LMIC.snchAns |= MCMD_SNCH_ANS_DRACK | MCMD_SNCH_ANS_FQACK;
 800675a:	4b3a      	ldr	r3, [pc, #232]	@ (8006844 <decodeFrame+0x57c>)
 800675c:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8006760:	f043 0303 	orr.w	r3, r3, #3
 8006764:	b2da      	uxtb	r2, r3
 8006766:	4b37      	ldr	r3, [pc, #220]	@ (8006844 <decodeFrame+0x57c>)
 8006768:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
			oidx += 6;
 800676c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800676e:	3306      	adds	r3, #6
 8006770:	653b      	str	r3, [r7, #80]	@ 0x50
			continue;
 8006772:	e061      	b.n	8006838 <decodeFrame+0x570>
		}
		case MCMD_PING_SET: {
			u4_t freq = convFreq(&opts[oidx + 1]);
 8006774:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006776:	3301      	adds	r3, #1
 8006778:	6a3a      	ldr	r2, [r7, #32]
 800677a:	4413      	add	r3, r2
 800677c:	4618      	mov	r0, r3
 800677e:	f7ff fa6b 	bl	8005c58 <convFreq>
 8006782:	61f8      	str	r0, [r7, #28]
			oidx += 4;
 8006784:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006786:	3304      	adds	r3, #4
 8006788:	653b      	str	r3, [r7, #80]	@ 0x50
			u1_t flags = 0x80;
 800678a:	2380      	movs	r3, #128	@ 0x80
 800678c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			if (freq != 0) {
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d009      	beq.n	80067aa <decodeFrame+0x4e2>
				flags |= MCMD_PING_ANS_FQACK;
 8006796:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800679a:	f043 0301 	orr.w	r3, r3, #1
 800679e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
				LMIC.ping.freq = freq;
 80067a2:	4a28      	ldr	r2, [pc, #160]	@ (8006844 <decodeFrame+0x57c>)
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
				DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);DO_DEVDB(LMIC.ping.freq, pingFreq);DO_DEVDB(LMIC.ping.dr, pingDr);
			}
			LMIC.pingSetAns = flags;
 80067aa:	4a26      	ldr	r2, [pc, #152]	@ (8006844 <decodeFrame+0x57c>)
 80067ac:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80067b0:	f882 3133 	strb.w	r3, [r2, #307]	@ 0x133
			continue;
 80067b4:	e040      	b.n	8006838 <decodeFrame+0x570>
		}
		case MCMD_BCNI_ANS: {
			// Ignore if tracking already enabled
			if ((LMIC.opmode & OP_TRACK) == 0) {
 80067b6:	4b23      	ldr	r3, [pc, #140]	@ (8006844 <decodeFrame+0x57c>)
 80067b8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d134      	bne.n	800682e <decodeFrame+0x566>
				LMIC.bcnChnl = opts[oidx + 3];
 80067c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067c6:	3303      	adds	r3, #3
 80067c8:	6a3a      	ldr	r2, [r7, #32]
 80067ca:	4413      	add	r3, r2
 80067cc:	781a      	ldrb	r2, [r3, #0]
 80067ce:	4b1d      	ldr	r3, [pc, #116]	@ (8006844 <decodeFrame+0x57c>)
 80067d0:	f883 2188 	strb.w	r2, [r3, #392]	@ 0x188
				// Enable tracking - bcninfoTries
				LMIC.opmode |= OP_TRACK;
 80067d4:	4b1b      	ldr	r3, [pc, #108]	@ (8006844 <decodeFrame+0x57c>)
 80067d6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80067da:	f043 0302 	orr.w	r3, r3, #2
 80067de:	b29a      	uxth	r2, r3
 80067e0:	4b18      	ldr	r3, [pc, #96]	@ (8006844 <decodeFrame+0x57c>)
 80067e2:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
				// Cleared later in txComplete handling - triggers EV_BEACON_FOUND
				ASSERT(LMIC.bcninfoTries != 0);
 80067e6:	4b17      	ldr	r3, [pc, #92]	@ (8006844 <decodeFrame+0x57c>)
 80067e8:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d101      	bne.n	80067f4 <decodeFrame+0x52c>
 80067f0:	f7fe fa42 	bl	8004c78 <hal_failed>
				// Setup RX parameters
				LMIC.bcninfo.txtime =
						(LMIC.rxtime
 80067f4:	4b13      	ldr	r3, [pc, #76]	@ (8006844 <decodeFrame+0x57c>)
 80067f6:	685c      	ldr	r4, [r3, #4]
								+ ms2osticks(
 80067f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067fa:	3301      	adds	r3, #1
 80067fc:	6a3a      	ldr	r2, [r7, #32]
 80067fe:	4413      	add	r3, r2
 8006800:	4618      	mov	r0, r3
 8006802:	f7fe fbe0 	bl	8004fc6 <os_rlsbf2>
 8006806:	4603      	mov	r3, r0
 8006808:	461a      	mov	r2, r3
 800680a:	4613      	mov	r3, r2
 800680c:	011b      	lsls	r3, r3, #4
 800680e:	1a9b      	subs	r3, r3, r2
 8006810:	019b      	lsls	r3, r3, #6
 8006812:	18e2      	adds	r2, r4, r3
										os_rlsbf2(&opts[oidx + 1])
												* MCMD_BCNI_TUNIT)
								+ ms2osticksCeil(MCMD_BCNI_TUNIT / 2)
								- BCN_INTV_osticks);
 8006814:	4b0d      	ldr	r3, [pc, #52]	@ (800684c <decodeFrame+0x584>)
 8006816:	4413      	add	r3, r2
				LMIC.bcninfo.txtime =
 8006818:	4a0a      	ldr	r2, [pc, #40]	@ (8006844 <decodeFrame+0x57c>)
 800681a:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
				LMIC.bcninfo.flags = 0; // txtime above cannot be used as reference (BCN_PARTIAL|BCN_FULL cleared)
 800681e:	4b09      	ldr	r3, [pc, #36]	@ (8006844 <decodeFrame+0x57c>)
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
				calcBcnRxWindowFromMillis(MCMD_BCNI_TUNIT, 1); // error of +/-N ms 
 8006826:	2101      	movs	r1, #1
 8006828:	201e      	movs	r0, #30
 800682a:	f7fe ff25 	bl	8005678 <calcBcnRxWindowFromMillis>
								e_.info = (LMIC.missedBcns |
										(osticks2us(LMIC.bcninfo.txtime + BCN_INTV_osticks
														- LMIC.bcnRxtime) << 8)),
								e_.time = MAIN::CDEV->ostime2ustime(LMIC.bcninfo.txtime + BCN_INTV_osticks)));
			}
			oidx += 4;
 800682e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006830:	3304      	adds	r3, #4
 8006832:	653b      	str	r3, [r7, #80]	@ 0x50
			continue;
 8006834:	e000      	b.n	8006838 <decodeFrame+0x570>
			continue;
 8006836:	bf00      	nop
	while (oidx < olen) {
 8006838:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800683a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800683c:	429a      	cmp	r2, r3
 800683e:	f6ff ae45 	blt.w	80064cc <decodeFrame+0x204>
 8006842:	e006      	b.n	8006852 <decodeFrame+0x58a>
 8006844:	2000033c 	.word	0x2000033c
 8006848:	08012cfc 	.word	0x08012cfc
 800684c:	ffc181e0 	.word	0xffc181e0
		}
		}EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = Base::lsbf4(&d[pend]),
						e_.info2 = Base::msbf4(&opts[oidx])));
		break;
 8006850:	bf00      	nop
		EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = 0x1000000 + (oidx) + (olen<<8)));
	}

	if (!replayConf) {
 8006852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006854:	2b00      	cmp	r3, #0
 8006856:	d11d      	bne.n	8006894 <decodeFrame+0x5cc>
		// Handle payload only if not a replay
		// Decrypt payload - if any
		if (port >= 0 && pend - poff > 0)
 8006858:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800685a:	2b00      	cmp	r3, #0
 800685c:	db1a      	blt.n	8006894 <decodeFrame+0x5cc>
 800685e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006860:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	2b00      	cmp	r3, #0
 8006866:	dd15      	ble.n	8006894 <decodeFrame+0x5cc>
			aes_cipher(port <= 0 ? LMIC.nwkKey : LMIC.artKey, LMIC.devaddr,
 8006868:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800686a:	2b00      	cmp	r3, #0
 800686c:	dc01      	bgt.n	8006872 <decodeFrame+0x5aa>
 800686e:	482e      	ldr	r0, [pc, #184]	@ (8006928 <decodeFrame+0x660>)
 8006870:	e000      	b.n	8006874 <decodeFrame+0x5ac>
 8006872:	482e      	ldr	r0, [pc, #184]	@ (800692c <decodeFrame+0x664>)
 8006874:	4b2e      	ldr	r3, [pc, #184]	@ (8006930 <decodeFrame+0x668>)
 8006876:	f8d3 4114 	ldr.w	r4, [r3, #276]	@ 0x114
 800687a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800687c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800687e:	4413      	add	r3, r2
 8006880:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006882:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006884:	1a8a      	subs	r2, r1, r2
 8006886:	9201      	str	r2, [sp, #4]
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	2301      	movs	r3, #1
 800688c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800688e:	4621      	mov	r1, r4
 8006890:	f7fe fd66 	bl	8005360 <aes_cipher>
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = Base::lsbf4(&d[pend]),
						e_.info2 = seqno));
	}

	if ( // NWK acks but we don't have a frame pending
 8006894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006896:	2b00      	cmp	r3, #0
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = seqno,
						e_.info2 = ackup));
	}

	if (LMIC.txCnt != 0) // we requested an ACK
 8006898:	4b25      	ldr	r3, [pc, #148]	@ (8006930 <decodeFrame+0x668>)
 800689a:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d010      	beq.n	80068c4 <decodeFrame+0x5fc>
		LMIC.txrxFlags |= ackup ? TXRX_ACK : TXRX_NACK;
 80068a2:	4b23      	ldr	r3, [pc, #140]	@ (8006930 <decodeFrame+0x668>)
 80068a4:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 80068a8:	b25b      	sxtb	r3, r3
 80068aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068ac:	2a00      	cmp	r2, #0
 80068ae:	d002      	beq.n	80068b6 <decodeFrame+0x5ee>
 80068b0:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 80068b4:	e000      	b.n	80068b8 <decodeFrame+0x5f0>
 80068b6:	2240      	movs	r2, #64	@ 0x40
 80068b8:	4313      	orrs	r3, r2
 80068ba:	b25b      	sxtb	r3, r3
 80068bc:	b2da      	uxtb	r2, r3
 80068be:	4b1c      	ldr	r3, [pc, #112]	@ (8006930 <decodeFrame+0x668>)
 80068c0:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145

	if (port < 0) {
 80068c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	da12      	bge.n	80068f0 <decodeFrame+0x628>
		LMIC.txrxFlags |= TXRX_NOPORT;
 80068ca:	4b19      	ldr	r3, [pc, #100]	@ (8006930 <decodeFrame+0x668>)
 80068cc:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 80068d0:	f043 0320 	orr.w	r3, r3, #32
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	4b16      	ldr	r3, [pc, #88]	@ (8006930 <decodeFrame+0x668>)
 80068d8:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		LMIC.dataBeg = poff;
 80068dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	4b13      	ldr	r3, [pc, #76]	@ (8006930 <decodeFrame+0x668>)
 80068e2:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
		LMIC.dataLen = 0;
 80068e6:	4b12      	ldr	r3, [pc, #72]	@ (8006930 <decodeFrame+0x668>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 80068ee:	e016      	b.n	800691e <decodeFrame+0x656>
	} else {
		LMIC.txrxFlags |= TXRX_PORT;
 80068f0:	4b0f      	ldr	r3, [pc, #60]	@ (8006930 <decodeFrame+0x668>)
 80068f2:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 80068f6:	f043 0310 	orr.w	r3, r3, #16
 80068fa:	b2da      	uxtb	r2, r3
 80068fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006930 <decodeFrame+0x668>)
 80068fe:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		LMIC.dataBeg = poff;
 8006902:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006904:	b2da      	uxtb	r2, r3
 8006906:	4b0a      	ldr	r3, [pc, #40]	@ (8006930 <decodeFrame+0x668>)
 8006908:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
		LMIC.dataLen = pend - poff;
 800690c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800690e:	b2da      	uxtb	r2, r3
 8006910:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006912:	b2db      	uxtb	r3, r3
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	b2da      	uxtb	r2, r3
 8006918:	4b05      	ldr	r3, [pc, #20]	@ (8006930 <decodeFrame+0x668>)
 800691a:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
	}
	return 1;
 800691e:	2301      	movs	r3, #1
}
 8006920:	4618      	mov	r0, r3
 8006922:	3764      	adds	r7, #100	@ 0x64
 8006924:	46bd      	mov	sp, r7
 8006926:	bd90      	pop	{r4, r7, pc}
 8006928:	20000430 	.word	0x20000430
 800692c:	20000440 	.word	0x20000440
 8006930:	2000033c 	.word	0x2000033c

08006934 <setupRx2>:

// ================================================================================
// TX/RX transaction support

static void setupRx2(void)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	af00      	add	r7, sp, #0
	LMIC.txrxFlags = TXRX_DNW2;
 8006938:	4b0d      	ldr	r3, [pc, #52]	@ (8006970 <setupRx2+0x3c>)
 800693a:	2202      	movs	r2, #2
 800693c:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	LMIC.rps = dndr2rps(LMIC.dn2Dr);
 8006940:	4b0b      	ldr	r3, [pc, #44]	@ (8006970 <setupRx2+0x3c>)
 8006942:	f893 312b 	ldrb.w	r3, [r3, #299]	@ 0x12b
 8006946:	4618      	mov	r0, r3
 8006948:	f7fe fae2 	bl	8004f10 <dndr2rps>
 800694c:	4603      	mov	r3, r0
 800694e:	461a      	mov	r2, r3
 8006950:	4b07      	ldr	r3, [pc, #28]	@ (8006970 <setupRx2+0x3c>)
 8006952:	81da      	strh	r2, [r3, #14]
	LMIC.freq = LMIC.dn2Freq;
 8006954:	4b06      	ldr	r3, [pc, #24]	@ (8006970 <setupRx2+0x3c>)
 8006956:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800695a:	4a05      	ldr	r2, [pc, #20]	@ (8006970 <setupRx2+0x3c>)
 800695c:	6093      	str	r3, [r2, #8]
	LMIC.dataLen = 0;
 800695e:	4b04      	ldr	r3, [pc, #16]	@ (8006970 <setupRx2+0x3c>)
 8006960:	2200      	movs	r2, #0
 8006962:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
	os_radio(RADIO_RX);
 8006966:	2002      	movs	r0, #2
 8006968:	f002 fbaa 	bl	80090c0 <os_radio>
}
 800696c:	bf00      	nop
 800696e:	bd80      	pop	{r7, pc}
 8006970:	2000033c 	.word	0x2000033c

08006974 <schedRx2>:

static void schedRx2(ostime_t delay, osjobcb_t func)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
	// Add 1.5 symbols we need 5 out of 8. Try to sync 1.5 symbols into the preamble.
	LMIC.rxtime = LMIC.txend + delay
 800697e:	4b0e      	ldr	r3, [pc, #56]	@ (80069b8 <schedRx2+0x44>)
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	18d1      	adds	r1, r2, r3
			+ (PAMBL_SYMS - MINRX_SYMS) * dr2hsym(LMIC.dn2Dr);
 8006986:	4b0c      	ldr	r3, [pc, #48]	@ (80069b8 <schedRx2+0x44>)
 8006988:	f893 312b 	ldrb.w	r3, [r3, #299]	@ 0x12b
 800698c:	461a      	mov	r2, r3
 800698e:	4b0b      	ldr	r3, [pc, #44]	@ (80069bc <schedRx2+0x48>)
 8006990:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006994:	4613      	mov	r3, r2
 8006996:	005b      	lsls	r3, r3, #1
 8006998:	4413      	add	r3, r2
 800699a:	440b      	add	r3, r1
	LMIC.rxtime = LMIC.txend + delay
 800699c:	4a06      	ldr	r2, [pc, #24]	@ (80069b8 <schedRx2+0x44>)
 800699e:	6053      	str	r3, [r2, #4]
	os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 80069a0:	4b05      	ldr	r3, [pc, #20]	@ (80069b8 <schedRx2+0x44>)
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	3b40      	subs	r3, #64	@ 0x40
 80069a6:	683a      	ldr	r2, [r7, #0]
 80069a8:	4619      	mov	r1, r3
 80069aa:	4805      	ldr	r0, [pc, #20]	@ (80069c0 <schedRx2+0x4c>)
 80069ac:	f001 fdcc 	bl	8008548 <os_setTimedCallback>
}
 80069b0:	bf00      	nop
 80069b2:	3708      	adds	r7, #8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	2000033c 	.word	0x2000033c
 80069bc:	08012d30 	.word	0x08012d30
 80069c0:	20000350 	.word	0x20000350

080069c4 <setupRx1>:

static void setupRx1(osjobcb_t func)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
	LMIC.txrxFlags = TXRX_DNW1;
 80069cc:	4b0d      	ldr	r3, [pc, #52]	@ (8006a04 <setupRx1+0x40>)
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	// Turn LMIC.rps from TX over to RX
	LMIC.rps = setNocrc(LMIC.rps, 1);
 80069d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006a04 <setupRx1+0x40>)
 80069d6:	89db      	ldrh	r3, [r3, #14]
 80069d8:	2101      	movs	r1, #1
 80069da:	4618      	mov	r0, r3
 80069dc:	f7fe fa49 	bl	8004e72 <setNocrc>
 80069e0:	4603      	mov	r3, r0
 80069e2:	461a      	mov	r2, r3
 80069e4:	4b07      	ldr	r3, [pc, #28]	@ (8006a04 <setupRx1+0x40>)
 80069e6:	81da      	strh	r2, [r3, #14]
	LMIC.dataLen = 0;
 80069e8:	4b06      	ldr	r3, [pc, #24]	@ (8006a04 <setupRx1+0x40>)
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
	LMIC.osjob.func = func;
 80069f0:	4a04      	ldr	r2, [pc, #16]	@ (8006a04 <setupRx1+0x40>)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	61d3      	str	r3, [r2, #28]
	os_radio(RADIO_RX);
 80069f6:	2002      	movs	r0, #2
 80069f8:	f002 fb62 	bl	80090c0 <os_radio>
}
 80069fc:	bf00      	nop
 80069fe:	3708      	adds	r7, #8
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	2000033c 	.word	0x2000033c

08006a08 <txDone>:

// Called by HAL once TX complete and delivers exact end of TX time stamp in LMIC.rxtime
static void txDone(ostime_t delay, osjobcb_t func)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
	if ((LMIC.opmode & (OP_TRACK | OP_PINGABLE | OP_PINGINI))
 8006a12:	4b22      	ldr	r3, [pc, #136]	@ (8006a9c <txDone+0x94>)
 8006a14:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006a18:	461a      	mov	r2, r3
 8006a1a:	f240 6302 	movw	r3, #1538	@ 0x602
 8006a1e:	4013      	ands	r3, r2
 8006a20:	f240 4202 	movw	r2, #1026	@ 0x402
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d10b      	bne.n	8006a40 <txDone+0x38>
			== (OP_TRACK | OP_PINGABLE)) {
		rxschedInit(&LMIC.ping);    // note: reuses LMIC.frame buffer!
 8006a28:	481d      	ldr	r0, [pc, #116]	@ (8006aa0 <txDone+0x98>)
 8006a2a:	f7fe feab 	bl	8005784 <rxschedInit>
		LMIC.opmode |= OP_PINGINI;
 8006a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8006a9c <txDone+0x94>)
 8006a30:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006a34:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006a38:	b29a      	uxth	r2, r3
 8006a3a:	4b18      	ldr	r3, [pc, #96]	@ (8006a9c <txDone+0x94>)
 8006a3c:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	setRx1Params();
	// LMIC.rxsyms carries the TX datarate (can be != LMIC.datarate [confirm retries etc.])
	// Setup receive - LMIC.rxtime is preloaded with 1.5 symbols offset to tune
	// into the middle of the 8 symbols preamble.
#if defined(CFG_eu868)
	if ( /* TX datarate */LMIC.rxsyms == DR_FSK) {
 8006a40:	4b16      	ldr	r3, [pc, #88]	@ (8006a9c <txDone+0x94>)
 8006a42:	7c1b      	ldrb	r3, [r3, #16]
 8006a44:	2b07      	cmp	r3, #7
 8006a46:	d10a      	bne.n	8006a5e <txDone+0x56>
		LMIC.rxtime = LMIC.txend + delay - PRERX_FSK * us2osticksRound(160);
 8006a48:	4b14      	ldr	r3, [pc, #80]	@ (8006a9c <txDone+0x94>)
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4413      	add	r3, r2
 8006a50:	3b05      	subs	r3, #5
 8006a52:	4a12      	ldr	r2, [pc, #72]	@ (8006a9c <txDone+0x94>)
 8006a54:	6053      	str	r3, [r2, #4]
		LMIC.rxsyms = RXLEN_FSK;
 8006a56:	4b11      	ldr	r3, [pc, #68]	@ (8006a9c <txDone+0x94>)
 8006a58:	2208      	movs	r2, #8
 8006a5a:	741a      	strb	r2, [r3, #16]
 8006a5c:	e012      	b.n	8006a84 <txDone+0x7c>
	} else
#endif
	{
		LMIC.rxtime = LMIC.txend + delay
 8006a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8006a9c <txDone+0x94>)
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	18d1      	adds	r1, r2, r3
				+ (PAMBL_SYMS - MINRX_SYMS) * dr2hsym(LMIC.dndr);
 8006a66:	4b0d      	ldr	r3, [pc, #52]	@ (8006a9c <txDone+0x94>)
 8006a68:	7c5b      	ldrb	r3, [r3, #17]
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8006aa4 <txDone+0x9c>)
 8006a6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a72:	4613      	mov	r3, r2
 8006a74:	005b      	lsls	r3, r3, #1
 8006a76:	4413      	add	r3, r2
 8006a78:	440b      	add	r3, r1
		LMIC.rxtime = LMIC.txend + delay
 8006a7a:	4a08      	ldr	r2, [pc, #32]	@ (8006a9c <txDone+0x94>)
 8006a7c:	6053      	str	r3, [r2, #4]
		LMIC.rxsyms = MINRX_SYMS;
 8006a7e:	4b07      	ldr	r3, [pc, #28]	@ (8006a9c <txDone+0x94>)
 8006a80:	2205      	movs	r2, #5
 8006a82:	741a      	strb	r2, [r3, #16]
	}
	os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 8006a84:	4b05      	ldr	r3, [pc, #20]	@ (8006a9c <txDone+0x94>)
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	3b40      	subs	r3, #64	@ 0x40
 8006a8a:	683a      	ldr	r2, [r7, #0]
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	4806      	ldr	r0, [pc, #24]	@ (8006aa8 <txDone+0xa0>)
 8006a90:	f001 fd5a 	bl	8008548 <os_setTimedCallback>
}
 8006a94:	bf00      	nop
 8006a96:	3708      	adds	r7, #8
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	2000033c 	.word	0x2000033c
 8006aa0:	20000470 	.word	0x20000470
 8006aa4:	08012d30 	.word	0x08012d30
 8006aa8:	20000350 	.word	0x20000350

08006aac <onJoinFailed>:

// ======================================== Join frames

static void onJoinFailed(xref2osjob_t osjob)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
	// Notify app - must call LMIC_reset() to stop joining
	// otherwise join procedure continues.
	reportEvent(EV_JOIN_FAILED);
 8006ab4:	2008      	movs	r0, #8
 8006ab6:	f7ff faef 	bl	8006098 <reportEvent>
}
 8006aba:	bf00      	nop
 8006abc:	3708      	adds	r7, #8
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
	...

08006ac4 <processJoinAccept>:

static bit_t processJoinAccept(void)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b086      	sub	sp, #24
 8006ac8:	af00      	add	r7, sp, #0
	ASSERT(LMIC.txrxFlags != TXRX_DNW1 || LMIC.dataLen != 0);
 8006aca:	4b99      	ldr	r3, [pc, #612]	@ (8006d30 <processJoinAccept+0x26c>)
 8006acc:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d106      	bne.n	8006ae2 <processJoinAccept+0x1e>
 8006ad4:	4b96      	ldr	r3, [pc, #600]	@ (8006d30 <processJoinAccept+0x26c>)
 8006ad6:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d101      	bne.n	8006ae2 <processJoinAccept+0x1e>
 8006ade:	f7fe f8cb 	bl	8004c78 <hal_failed>
	ASSERT((LMIC.opmode & OP_TXRXPEND) != 0);
 8006ae2:	4b93      	ldr	r3, [pc, #588]	@ (8006d30 <processJoinAccept+0x26c>)
 8006ae4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006ae8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d101      	bne.n	8006af4 <processJoinAccept+0x30>
 8006af0:	f7fe f8c2 	bl	8004c78 <hal_failed>

	if (LMIC.dataLen == 0) {
 8006af4:	4b8e      	ldr	r3, [pc, #568]	@ (8006d30 <processJoinAccept+0x26c>)
 8006af6:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d14c      	bne.n	8006b98 <processJoinAccept+0xd4>
		nojoinframe: if ((LMIC.opmode & OP_JOINING) == 0) {
 8006afe:	bf00      	nop
 8006b00:	e000      	b.n	8006b04 <processJoinAccept+0x40>
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = dlen < 4 ? 0 : mic,
						e_.info2 = hdr + (dlen<<8)));
		badframe: if ((LMIC.txrxFlags & TXRX_DNW1) != 0)
			return 0;
		goto nojoinframe;
 8006b02:	bf00      	nop
		nojoinframe: if ((LMIC.opmode & OP_JOINING) == 0) {
 8006b04:	4b8a      	ldr	r3, [pc, #552]	@ (8006d30 <processJoinAccept+0x26c>)
 8006b06:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006b0a:	f003 0304 	and.w	r3, r3, #4
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d123      	bne.n	8006b5a <processJoinAccept+0x96>
			ASSERT((LMIC.opmode & OP_REJOIN) != 0);
 8006b12:	4b87      	ldr	r3, [pc, #540]	@ (8006d30 <processJoinAccept+0x26c>)
 8006b14:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006b18:	f003 0320 	and.w	r3, r3, #32
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <processJoinAccept+0x60>
 8006b20:	f7fe f8aa 	bl	8004c78 <hal_failed>
			LMIC.opmode &= ~(OP_REJOIN | OP_TXRXPEND);
 8006b24:	4b82      	ldr	r3, [pc, #520]	@ (8006d30 <processJoinAccept+0x26c>)
 8006b26:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006b2a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b2e:	b29a      	uxth	r2, r3
 8006b30:	4b7f      	ldr	r3, [pc, #508]	@ (8006d30 <processJoinAccept+0x26c>)
 8006b32:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			if (LMIC.rejoinCnt < 10)
 8006b36:	4b7e      	ldr	r3, [pc, #504]	@ (8006d30 <processJoinAccept+0x26c>)
 8006b38:	f893 30b2 	ldrb.w	r3, [r3, #178]	@ 0xb2
 8006b3c:	2b09      	cmp	r3, #9
 8006b3e:	d807      	bhi.n	8006b50 <processJoinAccept+0x8c>
				LMIC.rejoinCnt++;
 8006b40:	4b7b      	ldr	r3, [pc, #492]	@ (8006d30 <processJoinAccept+0x26c>)
 8006b42:	f893 30b2 	ldrb.w	r3, [r3, #178]	@ 0xb2
 8006b46:	3301      	adds	r3, #1
 8006b48:	b2da      	uxtb	r2, r3
 8006b4a:	4b79      	ldr	r3, [pc, #484]	@ (8006d30 <processJoinAccept+0x26c>)
 8006b4c:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
			reportEvent(EV_REJOIN_FAILED);
 8006b50:	2009      	movs	r0, #9
 8006b52:	f7ff faa1 	bl	8006098 <reportEvent>
			return 1;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e0e6      	b.n	8006d28 <processJoinAccept+0x264>
		LMIC.opmode &= ~OP_TXRXPEND;
 8006b5a:	4b75      	ldr	r3, [pc, #468]	@ (8006d30 <processJoinAccept+0x26c>)
 8006b5c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006b60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	4b72      	ldr	r3, [pc, #456]	@ (8006d30 <processJoinAccept+0x26c>)
 8006b68:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		ostime_t delay = nextJoinState();
 8006b6c:	f7ff fa22 	bl	8005fb4 <nextJoinState>
 8006b70:	6078      	str	r0, [r7, #4]
		os_setTimedCallback(&LMIC.osjob, os_getTime() + delay,
 8006b72:	f001 fc7f 	bl	8008474 <os_getTime>
 8006b76:	4602      	mov	r2, r0
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	18d1      	adds	r1, r2, r3
				(delay & 1) != 0 ? FUNC_ADDR(onJoinFailed) // one JOIN iteration done and failed
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f003 0301 	and.w	r3, r3, #1
		os_setTimedCallback(&LMIC.osjob, os_getTime() + delay,
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d001      	beq.n	8006b8a <processJoinAccept+0xc6>
 8006b86:	4b6b      	ldr	r3, [pc, #428]	@ (8006d34 <processJoinAccept+0x270>)
 8006b88:	e000      	b.n	8006b8c <processJoinAccept+0xc8>
 8006b8a:	4b6b      	ldr	r3, [pc, #428]	@ (8006d38 <processJoinAccept+0x274>)
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	486b      	ldr	r0, [pc, #428]	@ (8006d3c <processJoinAccept+0x278>)
 8006b90:	f001 fcda 	bl	8008548 <os_setTimedCallback>
		return 1;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e0c7      	b.n	8006d28 <processJoinAccept+0x264>
	u1_t hdr = LMIC.frame[0];
 8006b98:	4b65      	ldr	r3, [pc, #404]	@ (8006d30 <processJoinAccept+0x26c>)
 8006b9a:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8006b9e:	757b      	strb	r3, [r7, #21]
	u1_t dlen = LMIC.dataLen;
 8006ba0:	4b63      	ldr	r3, [pc, #396]	@ (8006d30 <processJoinAccept+0x26c>)
 8006ba2:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8006ba6:	75fb      	strb	r3, [r7, #23]
	u4_t mic = os_rlsbf4(&LMIC.frame[dlen - 4]); // safe before modified by encrypt!
 8006ba8:	7dfb      	ldrb	r3, [r7, #23]
 8006baa:	3b04      	subs	r3, #4
 8006bac:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006bb0:	4a5f      	ldr	r2, [pc, #380]	@ (8006d30 <processJoinAccept+0x26c>)
 8006bb2:	4413      	add	r3, r2
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7fe fa1b 	bl	8004ff0 <os_rlsbf4>
 8006bba:	6138      	str	r0, [r7, #16]
	if ((dlen != LEN_JA && dlen != LEN_JAEXT)
 8006bbc:	7dfb      	ldrb	r3, [r7, #23]
 8006bbe:	2b11      	cmp	r3, #17
 8006bc0:	d002      	beq.n	8006bc8 <processJoinAccept+0x104>
 8006bc2:	7dfb      	ldrb	r3, [r7, #23]
 8006bc4:	2b21      	cmp	r3, #33	@ 0x21
 8006bc6:	d104      	bne.n	8006bd2 <processJoinAccept+0x10e>
			|| (hdr & (HDR_FTYPE | HDR_MAJOR))
 8006bc8:	7d7b      	ldrb	r3, [r7, #21]
 8006bca:	f003 03e3 	and.w	r3, r3, #227	@ 0xe3
 8006bce:	2b20      	cmp	r3, #32
 8006bd0:	d00b      	beq.n	8006bea <processJoinAccept+0x126>
		badframe: if ((LMIC.txrxFlags & TXRX_DNW1) != 0)
 8006bd2:	bf00      	nop
 8006bd4:	e000      	b.n	8006bd8 <processJoinAccept+0x114>
	}
	aes_encrypt(LMIC.frame + 1, dlen - 1);
	if (!aes_verifyMic0(LMIC.frame, dlen - 4)) {
		EV(specCond, ERR, (e_.reason = EV::specCond_t::JOIN_BAD_MIC,
						e_.info = mic));
		goto badframe;
 8006bd6:	bf00      	nop
		badframe: if ((LMIC.txrxFlags & TXRX_DNW1) != 0)
 8006bd8:	4b55      	ldr	r3, [pc, #340]	@ (8006d30 <processJoinAccept+0x26c>)
 8006bda:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d08d      	beq.n	8006b02 <processJoinAccept+0x3e>
			return 0;
 8006be6:	2300      	movs	r3, #0
 8006be8:	e09e      	b.n	8006d28 <processJoinAccept+0x264>
	aes_encrypt(LMIC.frame + 1, dlen - 1);
 8006bea:	4a55      	ldr	r2, [pc, #340]	@ (8006d40 <processJoinAccept+0x27c>)
 8006bec:	7dfb      	ldrb	r3, [r7, #23]
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	4610      	mov	r0, r2
 8006bf4:	f7fe fb9e 	bl	8005334 <aes_encrypt>
	if (!aes_verifyMic0(LMIC.frame, dlen - 4)) {
 8006bf8:	7dfb      	ldrb	r3, [r7, #23]
 8006bfa:	3b04      	subs	r3, #4
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	4851      	ldr	r0, [pc, #324]	@ (8006d44 <processJoinAccept+0x280>)
 8006c00:	f7fe fb76 	bl	80052f0 <aes_verifyMic0>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d0e5      	beq.n	8006bd6 <processJoinAccept+0x112>
	}

	u4_t addr = os_rlsbf4(LMIC.frame + OFF_JA_DEVADDR);
 8006c0a:	4b4f      	ldr	r3, [pc, #316]	@ (8006d48 <processJoinAccept+0x284>)
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7fe f9ef 	bl	8004ff0 <os_rlsbf4>
 8006c12:	60f8      	str	r0, [r7, #12]
	LMIC.devaddr = addr;
 8006c14:	4a46      	ldr	r2, [pc, #280]	@ (8006d30 <processJoinAccept+0x26c>)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
	LMIC.netid = os_rlsbf4(&LMIC.frame[OFF_JA_NETID]) & 0xFFFFFF;
 8006c1c:	484b      	ldr	r0, [pc, #300]	@ (8006d4c <processJoinAccept+0x288>)
 8006c1e:	f7fe f9e7 	bl	8004ff0 <os_rlsbf4>
 8006c22:	4603      	mov	r3, r0
 8006c24:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006c28:	4a41      	ldr	r2, [pc, #260]	@ (8006d30 <processJoinAccept+0x26c>)
 8006c2a:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

#if defined(CFG_eu868)
	initDefaultChannels(0);
 8006c2e:	2000      	movs	r0, #0
 8006c30:	f7fe ff12 	bl	8005a58 <initDefaultChannels>
#endif
	if (dlen > LEN_JA) {
 8006c34:	7dfb      	ldrb	r3, [r7, #23]
 8006c36:	2b11      	cmp	r3, #17
 8006c38:	d920      	bls.n	8006c7c <processJoinAccept+0x1b8>
#if defined(CFG_us915)
        goto badframe;
#endif
		dlen = OFF_CFLIST;
 8006c3a:	230d      	movs	r3, #13
 8006c3c:	75fb      	strb	r3, [r7, #23]
		for (u1_t chidx = 3; chidx < 8; chidx++, dlen += 3) {
 8006c3e:	2303      	movs	r3, #3
 8006c40:	75bb      	strb	r3, [r7, #22]
 8006c42:	e018      	b.n	8006c76 <processJoinAccept+0x1b2>
			u4_t freq = convFreq(&LMIC.frame[dlen]);
 8006c44:	7dfb      	ldrb	r3, [r7, #23]
 8006c46:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006c4a:	4a39      	ldr	r2, [pc, #228]	@ (8006d30 <processJoinAccept+0x26c>)
 8006c4c:	4413      	add	r3, r2
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7ff f802 	bl	8005c58 <convFreq>
 8006c54:	60b8      	str	r0, [r7, #8]
			if (freq)
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d006      	beq.n	8006c6a <processJoinAccept+0x1a6>
				LMIC_setupChannel(chidx, freq, 0, -1);
 8006c5c:	7db8      	ldrb	r0, [r7, #22]
 8006c5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006c62:	2200      	movs	r2, #0
 8006c64:	68b9      	ldr	r1, [r7, #8]
 8006c66:	f7fe ff7d 	bl	8005b64 <LMIC_setupChannel>
		for (u1_t chidx = 3; chidx < 8; chidx++, dlen += 3) {
 8006c6a:	7dbb      	ldrb	r3, [r7, #22]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	75bb      	strb	r3, [r7, #22]
 8006c70:	7dfb      	ldrb	r3, [r7, #23]
 8006c72:	3303      	adds	r3, #3
 8006c74:	75fb      	strb	r3, [r7, #23]
 8006c76:	7dbb      	ldrb	r3, [r7, #22]
 8006c78:	2b07      	cmp	r3, #7
 8006c7a:	d9e3      	bls.n	8006c44 <processJoinAccept+0x180>
		}
	}

	// already incremented when JOIN REQ got sent off
	aes_sessKeys(LMIC.devNonce - 1, &LMIC.frame[OFF_JA_ARTNONCE], LMIC.nwkKey,
 8006c7c:	4b2c      	ldr	r3, [pc, #176]	@ (8006d30 <processJoinAccept+0x26c>)
 8006c7e:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 8006c82:	3b01      	subs	r3, #1
 8006c84:	b298      	uxth	r0, r3
 8006c86:	4b32      	ldr	r3, [pc, #200]	@ (8006d50 <processJoinAccept+0x28c>)
 8006c88:	4a32      	ldr	r2, [pc, #200]	@ (8006d54 <processJoinAccept+0x290>)
 8006c8a:	492d      	ldr	r1, [pc, #180]	@ (8006d40 <processJoinAccept+0x27c>)
 8006c8c:	f7fe fbac 	bl	80053e8 <aes_sessKeys>
					e_.mic = mic,
					e_.reason = ((LMIC.opmode & OP_REJOIN) != 0
							? EV::joininfo_t::REJOIN_ACCEPT
							: EV::joininfo_t::ACCEPT)));

	ASSERT((LMIC.opmode & (OP_JOINING | OP_REJOIN)) != 0);
 8006c90:	4b27      	ldr	r3, [pc, #156]	@ (8006d30 <processJoinAccept+0x26c>)
 8006c92:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006c96:	f003 0324 	and.w	r3, r3, #36	@ 0x24
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d101      	bne.n	8006ca2 <processJoinAccept+0x1de>
 8006c9e:	f7fd ffeb 	bl	8004c78 <hal_failed>
	if ((LMIC.opmode & OP_REJOIN) != 0) {
 8006ca2:	4b23      	ldr	r3, [pc, #140]	@ (8006d30 <processJoinAccept+0x26c>)
 8006ca4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006ca8:	f003 0320 	and.w	r3, r3, #32
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00e      	beq.n	8006cce <processJoinAccept+0x20a>
		// Lower DR every try below current UP DR
		LMIC.datarate = lowerDR(LMIC.datarate, LMIC.rejoinCnt);
 8006cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8006d30 <processJoinAccept+0x26c>)
 8006cb2:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8006cb6:	4a1e      	ldr	r2, [pc, #120]	@ (8006d30 <processJoinAccept+0x26c>)
 8006cb8:	f892 20b2 	ldrb.w	r2, [r2, #178]	@ 0xb2
 8006cbc:	4611      	mov	r1, r2
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7fe f968 	bl	8004f94 <lowerDR>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	4b19      	ldr	r3, [pc, #100]	@ (8006d30 <processJoinAccept+0x26c>)
 8006cca:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
	}
	LMIC.opmode &= ~(OP_JOINING | OP_TRACK | OP_REJOIN | OP_TXRXPEND
 8006cce:	4b18      	ldr	r3, [pc, #96]	@ (8006d30 <processJoinAccept+0x26c>)
 8006cd0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006cd4:	f423 7329 	bic.w	r3, r3, #676	@ 0x2a4
 8006cd8:	f023 0302 	bic.w	r3, r3, #2
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	4b14      	ldr	r3, [pc, #80]	@ (8006d30 <processJoinAccept+0x26c>)
 8006ce0:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			| OP_PINGINI) | OP_NEXTCHNL;
	LMIC.txCnt = 0;
 8006ce4:	4b12      	ldr	r3, [pc, #72]	@ (8006d30 <processJoinAccept+0x26c>)
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	stateJustJoined();
 8006cec:	f7ff f9f2 	bl	80060d4 <stateJustJoined>
	LMIC.dn2Dr = LMIC.frame[OFF_JA_DLSET] & 0x0F;
 8006cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8006d30 <processJoinAccept+0x26c>)
 8006cf2:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 8006cf6:	f003 030f 	and.w	r3, r3, #15
 8006cfa:	b2da      	uxtb	r2, r3
 8006cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8006d30 <processJoinAccept+0x26c>)
 8006cfe:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
	LMIC.rxDelay = LMIC.frame[OFF_JA_RXDLY];
 8006d02:	4b0b      	ldr	r3, [pc, #44]	@ (8006d30 <processJoinAccept+0x26c>)
 8006d04:	f893 2154 	ldrb.w	r2, [r3, #340]	@ 0x154
 8006d08:	4b09      	ldr	r3, [pc, #36]	@ (8006d30 <processJoinAccept+0x26c>)
 8006d0a:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
	if (LMIC.rxDelay == 0)
 8006d0e:	4b08      	ldr	r3, [pc, #32]	@ (8006d30 <processJoinAccept+0x26c>)
 8006d10:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d103      	bne.n	8006d20 <processJoinAccept+0x25c>
		LMIC.rxDelay = 1;
 8006d18:	4b05      	ldr	r3, [pc, #20]	@ (8006d30 <processJoinAccept+0x26c>)
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
	reportEvent(EV_JOINED);
 8006d20:	2006      	movs	r0, #6
 8006d22:	f7ff f9b9 	bl	8006098 <reportEvent>
	return 1;
 8006d26:	2301      	movs	r3, #1
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3718      	adds	r7, #24
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	2000033c 	.word	0x2000033c
 8006d34:	08006aad 	.word	0x08006aad
 8006d38:	08006085 	.word	0x08006085
 8006d3c:	20000350 	.word	0x20000350
 8006d40:	20000485 	.word	0x20000485
 8006d44:	20000484 	.word	0x20000484
 8006d48:	2000048b 	.word	0x2000048b
 8006d4c:	20000488 	.word	0x20000488
 8006d50:	20000440 	.word	0x20000440
 8006d54:	20000430 	.word	0x20000430

08006d58 <processRx2Jacc>:

static void processRx2Jacc(xref2osjob_t osjob)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
	if (LMIC.dataLen == 0)
 8006d60:	4b07      	ldr	r3, [pc, #28]	@ (8006d80 <processRx2Jacc+0x28>)
 8006d62:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d103      	bne.n	8006d72 <processRx2Jacc+0x1a>
		LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 8006d6a:	4b05      	ldr	r3, [pc, #20]	@ (8006d80 <processRx2Jacc+0x28>)
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	processJoinAccept();
 8006d72:	f7ff fea7 	bl	8006ac4 <processJoinAccept>
}
 8006d76:	bf00      	nop
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	2000033c 	.word	0x2000033c

08006d84 <setupRx2Jacc>:

static void setupRx2Jacc(xref2osjob_t osjob)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
	LMIC.osjob.func = FUNC_ADDR(processRx2Jacc);
 8006d8c:	4b04      	ldr	r3, [pc, #16]	@ (8006da0 <setupRx2Jacc+0x1c>)
 8006d8e:	4a05      	ldr	r2, [pc, #20]	@ (8006da4 <setupRx2Jacc+0x20>)
 8006d90:	61da      	str	r2, [r3, #28]
	setupRx2();
 8006d92:	f7ff fdcf 	bl	8006934 <setupRx2>
}
 8006d96:	bf00      	nop
 8006d98:	3708      	adds	r7, #8
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	2000033c 	.word	0x2000033c
 8006da4:	08006d59 	.word	0x08006d59

08006da8 <processRx1Jacc>:

static void processRx1Jacc(xref2osjob_t osjob)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
	if (LMIC.dataLen == 0 || !processJoinAccept())
 8006db0:	4b08      	ldr	r3, [pc, #32]	@ (8006dd4 <processRx1Jacc+0x2c>)
 8006db2:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d004      	beq.n	8006dc4 <processRx1Jacc+0x1c>
 8006dba:	f7ff fe83 	bl	8006ac4 <processJoinAccept>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d103      	bne.n	8006dcc <processRx1Jacc+0x24>
		schedRx2(DELAY_JACC2_osticks, FUNC_ADDR(setupRx2Jacc));
 8006dc4:	4904      	ldr	r1, [pc, #16]	@ (8006dd8 <processRx1Jacc+0x30>)
 8006dc6:	4805      	ldr	r0, [pc, #20]	@ (8006ddc <processRx1Jacc+0x34>)
 8006dc8:	f7ff fdd4 	bl	8006974 <schedRx2>
}
 8006dcc:	bf00      	nop
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	2000033c 	.word	0x2000033c
 8006dd8:	08006d85 	.word	0x08006d85
 8006ddc:	0002ee00 	.word	0x0002ee00

08006de0 <setupRx1Jacc>:

static void setupRx1Jacc(xref2osjob_t osjob)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
	setupRx1(FUNC_ADDR(processRx1Jacc));
 8006de8:	4803      	ldr	r0, [pc, #12]	@ (8006df8 <setupRx1Jacc+0x18>)
 8006dea:	f7ff fdeb 	bl	80069c4 <setupRx1>
}
 8006dee:	bf00      	nop
 8006df0:	3708      	adds	r7, #8
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	08006da9 	.word	0x08006da9

08006dfc <jreqDone>:

static void jreqDone(xref2osjob_t osjob)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
	txDone(DELAY_JACC1_osticks, FUNC_ADDR(setupRx1Jacc));
 8006e04:	4903      	ldr	r1, [pc, #12]	@ (8006e14 <jreqDone+0x18>)
 8006e06:	4804      	ldr	r0, [pc, #16]	@ (8006e18 <jreqDone+0x1c>)
 8006e08:	f7ff fdfe 	bl	8006a08 <txDone>
}
 8006e0c:	bf00      	nop
 8006e0e:	3708      	adds	r7, #8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	08006de1 	.word	0x08006de1
 8006e18:	00027100 	.word	0x00027100

08006e1c <processRx2DnDataDelay>:

// Fwd decl.
static bit_t processDnData(void);

static void processRx2DnDataDelay(xref2osjob_t osjob)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
	processDnData();
 8006e24:	f000 fbc6 	bl	80075b4 <processDnData>
}
 8006e28:	bf00      	nop
 8006e2a:	3708      	adds	r7, #8
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <processRx2DnData>:

static void processRx2DnData(xref2osjob_t osjob)
{
 8006e30:	b590      	push	{r4, r7, lr}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
	if (LMIC.dataLen == 0) {
 8006e38:	4b0f      	ldr	r3, [pc, #60]	@ (8006e78 <processRx2DnData+0x48>)
 8006e3a:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d115      	bne.n	8006e6e <processRx2DnData+0x3e>
		LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 8006e42:	4b0d      	ldr	r3, [pc, #52]	@ (8006e78 <processRx2DnData+0x48>)
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		// Delay callback processing to avoid up TX while gateway is txing our missed frame! 
		// Since DNW2 uses SF12 by default we wait 3 secs.
		os_setTimedCallback(&LMIC.osjob,
				(os_getTime() + DNW2_SAFETY_ZONE + rndDelay(2)),
 8006e4a:	f001 fb13 	bl	8008474 <os_getTime>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	f503 34bb 	add.w	r4, r3, #95744	@ 0x17600
 8006e54:	f504 7480 	add.w	r4, r4, #256	@ 0x100
 8006e58:	2002      	movs	r0, #2
 8006e5a:	f7fe fd4f 	bl	80058fc <rndDelay>
 8006e5e:	4603      	mov	r3, r0
		os_setTimedCallback(&LMIC.osjob,
 8006e60:	4423      	add	r3, r4
 8006e62:	4a06      	ldr	r2, [pc, #24]	@ (8006e7c <processRx2DnData+0x4c>)
 8006e64:	4619      	mov	r1, r3
 8006e66:	4806      	ldr	r0, [pc, #24]	@ (8006e80 <processRx2DnData+0x50>)
 8006e68:	f001 fb6e 	bl	8008548 <os_setTimedCallback>
				FUNC_ADDR(processRx2DnDataDelay));
		return;
 8006e6c:	e001      	b.n	8006e72 <processRx2DnData+0x42>
	}
	processDnData();
 8006e6e:	f000 fba1 	bl	80075b4 <processDnData>
}
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd90      	pop	{r4, r7, pc}
 8006e78:	2000033c 	.word	0x2000033c
 8006e7c:	08006e1d 	.word	0x08006e1d
 8006e80:	20000350 	.word	0x20000350

08006e84 <setupRx2DnData>:

static void setupRx2DnData(xref2osjob_t osjob)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
	LMIC.osjob.func = FUNC_ADDR(processRx2DnData);
 8006e8c:	4b04      	ldr	r3, [pc, #16]	@ (8006ea0 <setupRx2DnData+0x1c>)
 8006e8e:	4a05      	ldr	r2, [pc, #20]	@ (8006ea4 <setupRx2DnData+0x20>)
 8006e90:	61da      	str	r2, [r3, #28]
	setupRx2();
 8006e92:	f7ff fd4f 	bl	8006934 <setupRx2>
}
 8006e96:	bf00      	nop
 8006e98:	3708      	adds	r7, #8
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	2000033c 	.word	0x2000033c
 8006ea4:	08006e31 	.word	0x08006e31

08006ea8 <processRx1DnData>:

static void processRx1DnData(xref2osjob_t osjob)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
	if (LMIC.dataLen == 0 || !processDnData())
 8006eb0:	4b0d      	ldr	r3, [pc, #52]	@ (8006ee8 <processRx1DnData+0x40>)
 8006eb2:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d004      	beq.n	8006ec4 <processRx1DnData+0x1c>
 8006eba:	f000 fb7b 	bl	80075b4 <processDnData>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d10c      	bne.n	8006ede <processRx1DnData+0x36>
		schedRx2(sec2osticks(LMIC.rxDelay + (int )DELAY_EXTDNW2),
 8006ec4:	4b08      	ldr	r3, [pc, #32]	@ (8006ee8 <processRx1DnData+0x40>)
 8006ec6:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 8006eca:	3301      	adds	r3, #1
 8006ecc:	461a      	mov	r2, r3
 8006ece:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006ed2:	fb02 f303 	mul.w	r3, r2, r3
 8006ed6:	4905      	ldr	r1, [pc, #20]	@ (8006eec <processRx1DnData+0x44>)
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7ff fd4b 	bl	8006974 <schedRx2>
				FUNC_ADDR(setupRx2DnData));
}
 8006ede:	bf00      	nop
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	2000033c 	.word	0x2000033c
 8006eec:	08006e85 	.word	0x08006e85

08006ef0 <setupRx1DnData>:

static void setupRx1DnData(xref2osjob_t osjob)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
	setupRx1(FUNC_ADDR(processRx1DnData));
 8006ef8:	4803      	ldr	r0, [pc, #12]	@ (8006f08 <setupRx1DnData+0x18>)
 8006efa:	f7ff fd63 	bl	80069c4 <setupRx1>
}
 8006efe:	bf00      	nop
 8006f00:	3708      	adds	r7, #8
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	08006ea9 	.word	0x08006ea9

08006f0c <updataDone>:

static void updataDone(xref2osjob_t osjob)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
	txDone(sec2osticks(LMIC.rxDelay), FUNC_ADDR(setupRx1DnData));
 8006f14:	4b07      	ldr	r3, [pc, #28]	@ (8006f34 <updataDone+0x28>)
 8006f16:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006f20:	fb02 f303 	mul.w	r3, r2, r3
 8006f24:	4904      	ldr	r1, [pc, #16]	@ (8006f38 <updataDone+0x2c>)
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7ff fd6e 	bl	8006a08 <txDone>
}
 8006f2c:	bf00      	nop
 8006f2e:	3708      	adds	r7, #8
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	2000033c 	.word	0x2000033c
 8006f38:	08006ef1 	.word	0x08006ef1

08006f3c <buildDataFrame>:

// ======================================== 

static void buildDataFrame(void)
{
 8006f3c:	b590      	push	{r4, r7, lr}
 8006f3e:	b087      	sub	sp, #28
 8006f40:	af02      	add	r7, sp, #8
	bit_t txdata = ((LMIC.opmode & (OP_TXDATA | OP_POLL)) != OP_POLL);
 8006f42:	4ba3      	ldr	r3, [pc, #652]	@ (80071d0 <buildDataFrame+0x294>)
 8006f44:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006f48:	f003 0318 	and.w	r3, r3, #24
 8006f4c:	2b10      	cmp	r3, #16
 8006f4e:	bf14      	ite	ne
 8006f50:	2301      	movne	r3, #1
 8006f52:	2300      	moveq	r3, #0
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	73fb      	strb	r3, [r7, #15]
	u1_t dlen = txdata ? LMIC.pendTxLen : 0;
 8006f58:	7bfb      	ldrb	r3, [r7, #15]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d003      	beq.n	8006f66 <buildDataFrame+0x2a>
 8006f5e:	4b9c      	ldr	r3, [pc, #624]	@ (80071d0 <buildDataFrame+0x294>)
 8006f60:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 8006f64:	e000      	b.n	8006f68 <buildDataFrame+0x2c>
 8006f66:	2300      	movs	r3, #0
 8006f68:	71bb      	strb	r3, [r7, #6]

	// Piggyback MAC options
	// Prioritize by importance
	int end = OFF_DAT_OPTS;
 8006f6a:	2308      	movs	r3, #8
 8006f6c:	60bb      	str	r3, [r7, #8]
	if ((LMIC.opmode & (OP_TRACK | OP_PINGABLE)) == (OP_TRACK | OP_PINGABLE)) {
 8006f6e:	4b98      	ldr	r3, [pc, #608]	@ (80071d0 <buildDataFrame+0x294>)
 8006f70:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006f74:	461a      	mov	r2, r3
 8006f76:	f240 4302 	movw	r3, #1026	@ 0x402
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	f240 4202 	movw	r2, #1026	@ 0x402
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d11c      	bne.n	8006fbe <buildDataFrame+0x82>
		// Indicate pingability in every UP frame
		LMIC.frame[end] = MCMD_PING_IND;
 8006f84:	4a92      	ldr	r2, [pc, #584]	@ (80071d0 <buildDataFrame+0x294>)
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	4413      	add	r3, r2
 8006f8a:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006f8e:	2210      	movs	r2, #16
 8006f90:	701a      	strb	r2, [r3, #0]
		LMIC.frame[end + 1] = LMIC.ping.dr | (LMIC.ping.intvExp << 4);
 8006f92:	4b8f      	ldr	r3, [pc, #572]	@ (80071d0 <buildDataFrame+0x294>)
 8006f94:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8006f98:	b25a      	sxtb	r2, r3
 8006f9a:	4b8d      	ldr	r3, [pc, #564]	@ (80071d0 <buildDataFrame+0x294>)
 8006f9c:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8006fa0:	011b      	lsls	r3, r3, #4
 8006fa2:	b25b      	sxtb	r3, r3
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	b25a      	sxtb	r2, r3
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	3301      	adds	r3, #1
 8006fac:	b2d1      	uxtb	r1, r2
 8006fae:	4a88      	ldr	r2, [pc, #544]	@ (80071d0 <buildDataFrame+0x294>)
 8006fb0:	4413      	add	r3, r2
 8006fb2:	460a      	mov	r2, r1
 8006fb4:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		end += 2;
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	3302      	adds	r3, #2
 8006fbc:	60bb      	str	r3, [r7, #8]
	}
	if (LMIC.dutyCapAns) {
 8006fbe:	4b84      	ldr	r3, [pc, #528]	@ (80071d0 <buildDataFrame+0x294>)
 8006fc0:	f893 3129 	ldrb.w	r3, [r3, #297]	@ 0x129
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00d      	beq.n	8006fe4 <buildDataFrame+0xa8>
		LMIC.frame[end] = MCMD_DCAP_ANS;
 8006fc8:	4a81      	ldr	r2, [pc, #516]	@ (80071d0 <buildDataFrame+0x294>)
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	4413      	add	r3, r2
 8006fce:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006fd2:	2204      	movs	r2, #4
 8006fd4:	701a      	strb	r2, [r3, #0]
		end += 1;
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	60bb      	str	r3, [r7, #8]
		LMIC.dutyCapAns = 0;
 8006fdc:	4b7c      	ldr	r3, [pc, #496]	@ (80071d0 <buildDataFrame+0x294>)
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
	}
	if (LMIC.dn2Ans) {
 8006fe4:	4b7a      	ldr	r3, [pc, #488]	@ (80071d0 <buildDataFrame+0x294>)
 8006fe6:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d01a      	beq.n	8007024 <buildDataFrame+0xe8>
		LMIC.frame[end + 0] = MCMD_DN2P_ANS;
 8006fee:	4a78      	ldr	r2, [pc, #480]	@ (80071d0 <buildDataFrame+0x294>)
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006ff8:	2205      	movs	r2, #5
 8006ffa:	701a      	strb	r2, [r3, #0]
		LMIC.frame[end + 1] = LMIC.dn2Ans & ~MCMD_DN2P_ANS_RFU;
 8006ffc:	4b74      	ldr	r3, [pc, #464]	@ (80071d0 <buildDataFrame+0x294>)
 8006ffe:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	3301      	adds	r3, #1
 8007006:	f002 0203 	and.w	r2, r2, #3
 800700a:	b2d1      	uxtb	r1, r2
 800700c:	4a70      	ldr	r2, [pc, #448]	@ (80071d0 <buildDataFrame+0x294>)
 800700e:	4413      	add	r3, r2
 8007010:	460a      	mov	r2, r1
 8007012:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		end += 2;
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	3302      	adds	r3, #2
 800701a:	60bb      	str	r3, [r7, #8]
		LMIC.dn2Ans = 0;
 800701c:	4b6c      	ldr	r3, [pc, #432]	@ (80071d0 <buildDataFrame+0x294>)
 800701e:	2200      	movs	r2, #0
 8007020:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
	}
	if (LMIC.devsAns) {  // answer to device status
 8007024:	4b6a      	ldr	r3, [pc, #424]	@ (80071d0 <buildDataFrame+0x294>)
 8007026:	f893 3126 	ldrb.w	r3, [r3, #294]	@ 0x126
 800702a:	2b00      	cmp	r3, #0
 800702c:	d021      	beq.n	8007072 <buildDataFrame+0x136>
		LMIC.frame[end + 0] = MCMD_DEVS_ANS;
 800702e:	4a68      	ldr	r2, [pc, #416]	@ (80071d0 <buildDataFrame+0x294>)
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	4413      	add	r3, r2
 8007034:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8007038:	2206      	movs	r2, #6
 800703a:	701a      	strb	r2, [r3, #0]
		LMIC.frame[end + 1] = os_getBattLevel();
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	1c5c      	adds	r4, r3, #1
 8007040:	f7fe f869 	bl	8005116 <os_getBattLevel>
 8007044:	4603      	mov	r3, r0
 8007046:	461a      	mov	r2, r3
 8007048:	4b61      	ldr	r3, [pc, #388]	@ (80071d0 <buildDataFrame+0x294>)
 800704a:	4423      	add	r3, r4
 800704c:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		LMIC.frame[end + 2] = LMIC.margin;
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	3302      	adds	r3, #2
 8007054:	4a5e      	ldr	r2, [pc, #376]	@ (80071d0 <buildDataFrame+0x294>)
 8007056:	f892 1124 	ldrb.w	r1, [r2, #292]	@ 0x124
 800705a:	4a5d      	ldr	r2, [pc, #372]	@ (80071d0 <buildDataFrame+0x294>)
 800705c:	4413      	add	r3, r2
 800705e:	460a      	mov	r2, r1
 8007060:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		end += 3;
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	3303      	adds	r3, #3
 8007068:	60bb      	str	r3, [r7, #8]
		LMIC.devsAns = 0;
 800706a:	4b59      	ldr	r3, [pc, #356]	@ (80071d0 <buildDataFrame+0x294>)
 800706c:	2200      	movs	r2, #0
 800706e:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
	}
	if (LMIC.ladrAns) {  // answer to ADR change
 8007072:	4b57      	ldr	r3, [pc, #348]	@ (80071d0 <buildDataFrame+0x294>)
 8007074:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8007078:	2b00      	cmp	r3, #0
 800707a:	d01a      	beq.n	80070b2 <buildDataFrame+0x176>
		LMIC.frame[end + 0] = MCMD_LADR_ANS;
 800707c:	4a54      	ldr	r2, [pc, #336]	@ (80071d0 <buildDataFrame+0x294>)
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	4413      	add	r3, r2
 8007082:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8007086:	2203      	movs	r2, #3
 8007088:	701a      	strb	r2, [r3, #0]
		LMIC.frame[end + 1] = LMIC.ladrAns & ~MCMD_LADR_ANS_RFU;
 800708a:	4b51      	ldr	r3, [pc, #324]	@ (80071d0 <buildDataFrame+0x294>)
 800708c:	f893 2125 	ldrb.w	r2, [r3, #293]	@ 0x125
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	3301      	adds	r3, #1
 8007094:	f002 0207 	and.w	r2, r2, #7
 8007098:	b2d1      	uxtb	r1, r2
 800709a:	4a4d      	ldr	r2, [pc, #308]	@ (80071d0 <buildDataFrame+0x294>)
 800709c:	4413      	add	r3, r2
 800709e:	460a      	mov	r2, r1
 80070a0:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		end += 2;
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	3302      	adds	r3, #2
 80070a8:	60bb      	str	r3, [r7, #8]
		LMIC.ladrAns = 0;
 80070aa:	4b49      	ldr	r3, [pc, #292]	@ (80071d0 <buildDataFrame+0x294>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
	}
	if (LMIC.bcninfoTries > 0) {
 80070b2:	4b47      	ldr	r3, [pc, #284]	@ (80071d0 <buildDataFrame+0x294>)
 80070b4:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d009      	beq.n	80070d0 <buildDataFrame+0x194>
		LMIC.frame[end] = MCMD_BCNI_REQ;
 80070bc:	4a44      	ldr	r2, [pc, #272]	@ (80071d0 <buildDataFrame+0x294>)
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	4413      	add	r3, r2
 80070c2:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80070c6:	2212      	movs	r2, #18
 80070c8:	701a      	strb	r2, [r3, #0]
		end += 1;
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	3301      	adds	r3, #1
 80070ce:	60bb      	str	r3, [r7, #8]
	}
	if (LMIC.adrChanged) {
 80070d0:	4b3f      	ldr	r3, [pc, #252]	@ (80071d0 <buildDataFrame+0x294>)
 80070d2:	f893 3122 	ldrb.w	r3, [r3, #290]	@ 0x122
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00c      	beq.n	80070f4 <buildDataFrame+0x1b8>
		if (LMIC.adrAckReq < 0)
 80070da:	4b3d      	ldr	r3, [pc, #244]	@ (80071d0 <buildDataFrame+0x294>)
 80070dc:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	da03      	bge.n	80070ec <buildDataFrame+0x1b0>
			LMIC.adrAckReq = 0;
 80070e4:	4b3a      	ldr	r3, [pc, #232]	@ (80071d0 <buildDataFrame+0x294>)
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
		LMIC.adrChanged = 0;
 80070ec:	4b38      	ldr	r3, [pc, #224]	@ (80071d0 <buildDataFrame+0x294>)
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
	}
	if (LMIC.pingSetAns != 0) {
 80070f4:	4b36      	ldr	r3, [pc, #216]	@ (80071d0 <buildDataFrame+0x294>)
 80070f6:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d01a      	beq.n	8007134 <buildDataFrame+0x1f8>
		LMIC.frame[end + 0] = MCMD_PING_ANS;
 80070fe:	4a34      	ldr	r2, [pc, #208]	@ (80071d0 <buildDataFrame+0x294>)
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	4413      	add	r3, r2
 8007104:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8007108:	2211      	movs	r2, #17
 800710a:	701a      	strb	r2, [r3, #0]
		LMIC.frame[end + 1] = LMIC.pingSetAns & ~MCMD_PING_ANS_RFU;
 800710c:	4b30      	ldr	r3, [pc, #192]	@ (80071d0 <buildDataFrame+0x294>)
 800710e:	f893 2133 	ldrb.w	r2, [r3, #307]	@ 0x133
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	3301      	adds	r3, #1
 8007116:	f002 0201 	and.w	r2, r2, #1
 800711a:	b2d1      	uxtb	r1, r2
 800711c:	4a2c      	ldr	r2, [pc, #176]	@ (80071d0 <buildDataFrame+0x294>)
 800711e:	4413      	add	r3, r2
 8007120:	460a      	mov	r2, r1
 8007122:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		end += 2;
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	3302      	adds	r3, #2
 800712a:	60bb      	str	r3, [r7, #8]
		LMIC.pingSetAns = 0;
 800712c:	4b28      	ldr	r3, [pc, #160]	@ (80071d0 <buildDataFrame+0x294>)
 800712e:	2200      	movs	r2, #0
 8007130:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
	}
	if (LMIC.snchAns) {
 8007134:	4b26      	ldr	r3, [pc, #152]	@ (80071d0 <buildDataFrame+0x294>)
 8007136:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 800713a:	2b00      	cmp	r3, #0
 800713c:	d01a      	beq.n	8007174 <buildDataFrame+0x238>
		LMIC.frame[end + 0] = MCMD_SNCH_ANS;
 800713e:	4a24      	ldr	r2, [pc, #144]	@ (80071d0 <buildDataFrame+0x294>)
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	4413      	add	r3, r2
 8007144:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8007148:	2207      	movs	r2, #7
 800714a:	701a      	strb	r2, [r3, #0]
		LMIC.frame[end + 1] = LMIC.snchAns & ~MCMD_SNCH_ANS_RFU;
 800714c:	4b20      	ldr	r3, [pc, #128]	@ (80071d0 <buildDataFrame+0x294>)
 800714e:	f893 212a 	ldrb.w	r2, [r3, #298]	@ 0x12a
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	3301      	adds	r3, #1
 8007156:	f002 0203 	and.w	r2, r2, #3
 800715a:	b2d1      	uxtb	r1, r2
 800715c:	4a1c      	ldr	r2, [pc, #112]	@ (80071d0 <buildDataFrame+0x294>)
 800715e:	4413      	add	r3, r2
 8007160:	460a      	mov	r2, r1
 8007162:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		end += 2;
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	3302      	adds	r3, #2
 800716a:	60bb      	str	r3, [r7, #8]
		LMIC.snchAns = 0;
 800716c:	4b18      	ldr	r3, [pc, #96]	@ (80071d0 <buildDataFrame+0x294>)
 800716e:	2200      	movs	r2, #0
 8007170:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
	}
	ASSERT(end <= OFF_DAT_OPTS + 16);
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	2b18      	cmp	r3, #24
 8007178:	dd01      	ble.n	800717e <buildDataFrame+0x242>
 800717a:	f7fd fd7d 	bl	8004c78 <hal_failed>

	u1_t flen = end + (txdata ? 5 + dlen : 4);
 800717e:	7bfb      	ldrb	r3, [r7, #15]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d003      	beq.n	800718c <buildDataFrame+0x250>
 8007184:	79bb      	ldrb	r3, [r7, #6]
 8007186:	3305      	adds	r3, #5
 8007188:	b2db      	uxtb	r3, r3
 800718a:	e000      	b.n	800718e <buildDataFrame+0x252>
 800718c:	2304      	movs	r3, #4
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	b2d2      	uxtb	r2, r2
 8007192:	4413      	add	r3, r2
 8007194:	71fb      	strb	r3, [r7, #7]
	if (flen > MAX_LEN_FRAME) {
 8007196:	79fb      	ldrb	r3, [r7, #7]
 8007198:	2b40      	cmp	r3, #64	@ 0x40
 800719a:	d905      	bls.n	80071a8 <buildDataFrame+0x26c>
		// Options and payload too big - delay payload
		txdata = 0;
 800719c:	2300      	movs	r3, #0
 800719e:	73fb      	strb	r3, [r7, #15]
		flen = end + 4;
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	3304      	adds	r3, #4
 80071a6:	71fb      	strb	r3, [r7, #7]
	}
	LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DAUP | HDR_MAJOR_V1;
 80071a8:	4b09      	ldr	r3, [pc, #36]	@ (80071d0 <buildDataFrame+0x294>)
 80071aa:	2240      	movs	r2, #64	@ 0x40
 80071ac:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
	LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 80071b0:	4b07      	ldr	r3, [pc, #28]	@ (80071d0 <buildDataFrame+0x294>)
 80071b2:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 80071b6:	4b06      	ldr	r3, [pc, #24]	@ (80071d0 <buildDataFrame+0x294>)
 80071b8:	f893 3127 	ldrb.w	r3, [r3, #295]	@ 0x127
			| (LMIC.adrAckReq >= 0 ? FCT_ADRARQ : 0) | (end - OFF_DAT_OPTS));
 80071bc:	4313      	orrs	r3, r2
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	b25b      	sxtb	r3, r3
 80071c2:	4a03      	ldr	r2, [pc, #12]	@ (80071d0 <buildDataFrame+0x294>)
 80071c4:	f992 2121 	ldrsb.w	r2, [r2, #289]	@ 0x121
 80071c8:	2a00      	cmp	r2, #0
 80071ca:	db03      	blt.n	80071d4 <buildDataFrame+0x298>
 80071cc:	2240      	movs	r2, #64	@ 0x40
 80071ce:	e002      	b.n	80071d6 <buildDataFrame+0x29a>
 80071d0:	2000033c 	.word	0x2000033c
 80071d4:	2200      	movs	r2, #0
 80071d6:	4313      	orrs	r3, r2
 80071d8:	b25a      	sxtb	r2, r3
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	3b08      	subs	r3, #8
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	b25b      	sxtb	r3, r3
 80071e4:	4313      	orrs	r3, r2
 80071e6:	b25b      	sxtb	r3, r3
 80071e8:	b2da      	uxtb	r2, r3
	LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 80071ea:	4b40      	ldr	r3, [pc, #256]	@ (80072ec <buildDataFrame+0x3b0>)
 80071ec:	f883 214d 	strb.w	r2, [r3, #333]	@ 0x14d
	os_wlsbf4(LMIC.frame + OFF_DAT_ADDR, LMIC.devaddr);
 80071f0:	4a3f      	ldr	r2, [pc, #252]	@ (80072f0 <buildDataFrame+0x3b4>)
 80071f2:	4b3e      	ldr	r3, [pc, #248]	@ (80072ec <buildDataFrame+0x3b0>)
 80071f4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80071f8:	4619      	mov	r1, r3
 80071fa:	4610      	mov	r0, r2
 80071fc:	f7fd ff49 	bl	8005092 <os_wlsbf4>

	if (LMIC.txCnt == 0) {
 8007200:	4b3a      	ldr	r3, [pc, #232]	@ (80072ec <buildDataFrame+0x3b0>)
 8007202:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8007206:	2b00      	cmp	r3, #0
 8007208:	d106      	bne.n	8007218 <buildDataFrame+0x2dc>
		LMIC.seqnoUp += 1;
 800720a:	4b38      	ldr	r3, [pc, #224]	@ (80072ec <buildDataFrame+0x3b0>)
 800720c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8007210:	3301      	adds	r3, #1
 8007212:	4a36      	ldr	r2, [pc, #216]	@ (80072ec <buildDataFrame+0x3b0>)
 8007214:	f8c2 311c 	str.w	r3, [r2, #284]	@ 0x11c
						e_.info = LMIC.seqnoUp-1,
						e_.info2 = ((LMIC.txCnt+1) |
								(DRADJUST[LMIC.txCnt+1] << 8) |
								((LMIC.datarate|DR_PAGE)<<16))));
	}
	os_wlsbf2(LMIC.frame + OFF_DAT_SEQNO, LMIC.seqnoUp - 1);
 8007218:	4a36      	ldr	r2, [pc, #216]	@ (80072f4 <buildDataFrame+0x3b8>)
 800721a:	4b34      	ldr	r3, [pc, #208]	@ (80072ec <buildDataFrame+0x3b0>)
 800721c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8007220:	b29b      	uxth	r3, r3
 8007222:	3b01      	subs	r3, #1
 8007224:	b29b      	uxth	r3, r3
 8007226:	4619      	mov	r1, r3
 8007228:	4610      	mov	r0, r2
 800722a:	f7fd ff1b 	bl	8005064 <os_wlsbf2>

	// Clear pending DN confirmation
	LMIC.dnConf = 0;
 800722e:	4b2f      	ldr	r3, [pc, #188]	@ (80072ec <buildDataFrame+0x3b0>)
 8007230:	2200      	movs	r2, #0
 8007232:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120

	if (txdata) {
 8007236:	7bfb      	ldrb	r3, [r7, #15]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d03e      	beq.n	80072ba <buildDataFrame+0x37e>
		if (LMIC.pendTxConf) {
 800723c:	4b2b      	ldr	r3, [pc, #172]	@ (80072ec <buildDataFrame+0x3b0>)
 800723e:	f893 30bb 	ldrb.w	r3, [r3, #187]	@ 0xbb
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00c      	beq.n	8007260 <buildDataFrame+0x324>
			// Confirmed only makes sense if we have a payload (or at least a port)
			LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DCUP | HDR_MAJOR_V1;
 8007246:	4b29      	ldr	r3, [pc, #164]	@ (80072ec <buildDataFrame+0x3b0>)
 8007248:	2280      	movs	r2, #128	@ 0x80
 800724a:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
			if (LMIC.txCnt == 0)
 800724e:	4b27      	ldr	r3, [pc, #156]	@ (80072ec <buildDataFrame+0x3b0>)
 8007250:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8007254:	2b00      	cmp	r3, #0
 8007256:	d103      	bne.n	8007260 <buildDataFrame+0x324>
				LMIC.txCnt = 1;
 8007258:	4b24      	ldr	r3, [pc, #144]	@ (80072ec <buildDataFrame+0x3b0>)
 800725a:	2201      	movs	r2, #1
 800725c:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		}
		LMIC.frame[end] = LMIC.pendTxPort;
 8007260:	4b22      	ldr	r3, [pc, #136]	@ (80072ec <buildDataFrame+0x3b0>)
 8007262:	f893 10ba 	ldrb.w	r1, [r3, #186]	@ 0xba
 8007266:	4a21      	ldr	r2, [pc, #132]	@ (80072ec <buildDataFrame+0x3b0>)
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	4413      	add	r3, r2
 800726c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8007270:	460a      	mov	r2, r1
 8007272:	701a      	strb	r2, [r3, #0]
		os_copyMem(LMIC.frame + end + 1, LMIC.pendTxData, dlen);
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	3301      	adds	r3, #1
 8007278:	4a1f      	ldr	r2, [pc, #124]	@ (80072f8 <buildDataFrame+0x3bc>)
 800727a:	4413      	add	r3, r2
 800727c:	79ba      	ldrb	r2, [r7, #6]
 800727e:	491f      	ldr	r1, [pc, #124]	@ (80072fc <buildDataFrame+0x3c0>)
 8007280:	4618      	mov	r0, r3
 8007282:	f007 ff17 	bl	800f0b4 <memcpy>
		aes_cipher(LMIC.pendTxPort == 0 ? LMIC.nwkKey : LMIC.artKey,
 8007286:	4b19      	ldr	r3, [pc, #100]	@ (80072ec <buildDataFrame+0x3b0>)
 8007288:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 800728c:	2b00      	cmp	r3, #0
 800728e:	d101      	bne.n	8007294 <buildDataFrame+0x358>
 8007290:	481b      	ldr	r0, [pc, #108]	@ (8007300 <buildDataFrame+0x3c4>)
 8007292:	e000      	b.n	8007296 <buildDataFrame+0x35a>
 8007294:	481b      	ldr	r0, [pc, #108]	@ (8007304 <buildDataFrame+0x3c8>)
 8007296:	4b15      	ldr	r3, [pc, #84]	@ (80072ec <buildDataFrame+0x3b0>)
 8007298:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
				LMIC.devaddr, LMIC.seqnoUp - 1,
 800729c:	4b13      	ldr	r3, [pc, #76]	@ (80072ec <buildDataFrame+0x3b0>)
 800729e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
		aes_cipher(LMIC.pendTxPort == 0 ? LMIC.nwkKey : LMIC.artKey,
 80072a2:	1e5c      	subs	r4, r3, #1
				/*up*/0, LMIC.frame + end + 1, dlen);
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	3301      	adds	r3, #1
		aes_cipher(LMIC.pendTxPort == 0 ? LMIC.nwkKey : LMIC.artKey,
 80072a8:	4a13      	ldr	r2, [pc, #76]	@ (80072f8 <buildDataFrame+0x3bc>)
 80072aa:	4413      	add	r3, r2
 80072ac:	79ba      	ldrb	r2, [r7, #6]
 80072ae:	9201      	str	r2, [sp, #4]
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	2300      	movs	r3, #0
 80072b4:	4622      	mov	r2, r4
 80072b6:	f7fe f853 	bl	8005360 <aes_cipher>
	}
	aes_appendMic(LMIC.nwkKey, LMIC.devaddr, LMIC.seqnoUp - 1, /*up*/0,
 80072ba:	4b0c      	ldr	r3, [pc, #48]	@ (80072ec <buildDataFrame+0x3b0>)
 80072bc:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 80072c0:	4b0a      	ldr	r3, [pc, #40]	@ (80072ec <buildDataFrame+0x3b0>)
 80072c2:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80072c6:	1e5a      	subs	r2, r3, #1
 80072c8:	79fb      	ldrb	r3, [r7, #7]
 80072ca:	3b04      	subs	r3, #4
 80072cc:	9301      	str	r3, [sp, #4]
 80072ce:	4b0a      	ldr	r3, [pc, #40]	@ (80072f8 <buildDataFrame+0x3bc>)
 80072d0:	9300      	str	r3, [sp, #0]
 80072d2:	2300      	movs	r3, #0
 80072d4:	480a      	ldr	r0, [pc, #40]	@ (8007300 <buildDataFrame+0x3c4>)
 80072d6:	f7fd ffc5 	bl	8005264 <aes_appendMic>
					e_.fct = LMIC.frame[LORA::OFF_DAT_FCT],
					e_.port = LMIC.pendTxPort,
					e_.plen = txdata ? dlen : 0,
					e_.opts.length = end-LORA::OFF_DAT_OPTS,
					memcpy(&e_.opts[0], LMIC.frame+LORA::OFF_DAT_OPTS, end-LORA::OFF_DAT_OPTS)));
	LMIC.dataLen = flen;
 80072da:	4a04      	ldr	r2, [pc, #16]	@ (80072ec <buildDataFrame+0x3b0>)
 80072dc:	79fb      	ldrb	r3, [r7, #7]
 80072de:	f882 3147 	strb.w	r3, [r2, #327]	@ 0x147
}
 80072e2:	bf00      	nop
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd90      	pop	{r4, r7, pc}
 80072ea:	bf00      	nop
 80072ec:	2000033c 	.word	0x2000033c
 80072f0:	20000485 	.word	0x20000485
 80072f4:	2000048a 	.word	0x2000048a
 80072f8:	20000484 	.word	0x20000484
 80072fc:	200003f9 	.word	0x200003f9
 8007300:	20000430 	.word	0x20000430
 8007304:	20000440 	.word	0x20000440

08007308 <onBcnRx>:

// Callback from HAL during scan mode or when job timer expires.
static void onBcnRx(xref2osjob_t job)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
	// If we arrive via job timer make sure to put radio to rest.
	os_radio(RADIO_RST);
 8007310:	2000      	movs	r0, #0
 8007312:	f001 fed5 	bl	80090c0 <os_radio>
	os_clearCallback(&LMIC.osjob);
 8007316:	4823      	ldr	r0, [pc, #140]	@ (80073a4 <onBcnRx+0x9c>)
 8007318:	f001 f8d2 	bl	80084c0 <os_clearCallback>
	if (LMIC.dataLen == 0) {
 800731c:	4b22      	ldr	r3, [pc, #136]	@ (80073a8 <onBcnRx+0xa0>)
 800731e:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10c      	bne.n	8007340 <onBcnRx+0x38>
		// Nothing received - timeout
		LMIC.opmode &= ~(OP_SCAN | OP_TRACK);
 8007326:	4b20      	ldr	r3, [pc, #128]	@ (80073a8 <onBcnRx+0xa0>)
 8007328:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800732c:	f023 0303 	bic.w	r3, r3, #3
 8007330:	b29a      	uxth	r2, r3
 8007332:	4b1d      	ldr	r3, [pc, #116]	@ (80073a8 <onBcnRx+0xa0>)
 8007334:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		reportEvent(EV_SCAN_TIMEOUT);
 8007338:	2001      	movs	r0, #1
 800733a:	f7fe fead 	bl	8006098 <reportEvent>
		return;
 800733e:	e02d      	b.n	800739c <onBcnRx+0x94>
	}
	if (decodeBeacon() <= 0) {
 8007340:	f7fe ff2e 	bl	80061a0 <decodeBeacon>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	dc0f      	bgt.n	800736a <onBcnRx+0x62>
		// Something is wrong with the beacon - continue scan
		LMIC.dataLen = 0;
 800734a:	4b17      	ldr	r3, [pc, #92]	@ (80073a8 <onBcnRx+0xa0>)
 800734c:	2200      	movs	r2, #0
 800734e:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
		os_radio(RADIO_RXON);
 8007352:	2003      	movs	r0, #3
 8007354:	f001 feb4 	bl	80090c0 <os_radio>
		os_setTimedCallback(&LMIC.osjob, LMIC.bcninfo.txtime,
 8007358:	4b13      	ldr	r3, [pc, #76]	@ (80073a8 <onBcnRx+0xa0>)
 800735a:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 800735e:	4a13      	ldr	r2, [pc, #76]	@ (80073ac <onBcnRx+0xa4>)
 8007360:	4619      	mov	r1, r3
 8007362:	4810      	ldr	r0, [pc, #64]	@ (80073a4 <onBcnRx+0x9c>)
 8007364:	f001 f8f0 	bl	8008548 <os_setTimedCallback>
				FUNC_ADDR(onBcnRx));
		return;
 8007368:	e018      	b.n	800739c <onBcnRx+0x94>
	}
	// Found our 1st beacon
	// We don't have a previous beacon to calc some drift - assume
	// an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
	calcBcnRxWindowFromMillis(13, 1);
 800736a:	2101      	movs	r1, #1
 800736c:	200d      	movs	r0, #13
 800736e:	f7fe f983 	bl	8005678 <calcBcnRxWindowFromMillis>
	LMIC.opmode &= ~OP_SCAN;          // turn SCAN off
 8007372:	4b0d      	ldr	r3, [pc, #52]	@ (80073a8 <onBcnRx+0xa0>)
 8007374:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007378:	f023 0301 	bic.w	r3, r3, #1
 800737c:	b29a      	uxth	r2, r3
 800737e:	4b0a      	ldr	r3, [pc, #40]	@ (80073a8 <onBcnRx+0xa0>)
 8007380:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	LMIC.opmode |= OP_TRACK;         // auto enable tracking
 8007384:	4b08      	ldr	r3, [pc, #32]	@ (80073a8 <onBcnRx+0xa0>)
 8007386:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800738a:	f043 0302 	orr.w	r3, r3, #2
 800738e:	b29a      	uxth	r2, r3
 8007390:	4b05      	ldr	r3, [pc, #20]	@ (80073a8 <onBcnRx+0xa0>)
 8007392:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	reportEvent(EV_BEACON_FOUND);    // can be disabled in callback
 8007396:	2002      	movs	r0, #2
 8007398:	f7fe fe7e 	bl	8006098 <reportEvent>
}
 800739c:	3708      	adds	r7, #8
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	20000350 	.word	0x20000350
 80073a8:	2000033c 	.word	0x2000033c
 80073ac:	08007309 	.word	0x08007309

080073b0 <startScan>:
// netid defines when scan stops (any or specific beacon)
// This mode ends with events: EV_SCAN_TIMEOUT/EV_SCAN_BEACON
// Implicitely cancels any pending TX/RX transaction.
// Also cancels an onpoing joining procedure.
static void startScan(void)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	af00      	add	r7, sp, #0
	ASSERT(LMIC.devaddr != 0 && (LMIC.opmode & OP_JOINING) == 0);
 80073b4:	4b27      	ldr	r3, [pc, #156]	@ (8007454 <startScan+0xa4>)
 80073b6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d006      	beq.n	80073cc <startScan+0x1c>
 80073be:	4b25      	ldr	r3, [pc, #148]	@ (8007454 <startScan+0xa4>)
 80073c0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80073c4:	f003 0304 	and.w	r3, r3, #4
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d001      	beq.n	80073d0 <startScan+0x20>
 80073cc:	f7fd fc54 	bl	8004c78 <hal_failed>
	if ((LMIC.opmode & OP_SHUTDOWN) != 0)
 80073d0:	4b20      	ldr	r3, [pc, #128]	@ (8007454 <startScan+0xa4>)
 80073d2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80073d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d137      	bne.n	800744e <startScan+0x9e>
		return;
	// Cancel onging TX/RX transaction
	LMIC.txCnt = LMIC.dnConf = LMIC.bcninfo.flags = 0;
 80073de:	4b1d      	ldr	r3, [pc, #116]	@ (8007454 <startScan+0xa4>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
 80073e6:	4b1b      	ldr	r3, [pc, #108]	@ (8007454 <startScan+0xa4>)
 80073e8:	f893 2196 	ldrb.w	r2, [r3, #406]	@ 0x196
 80073ec:	4b19      	ldr	r3, [pc, #100]	@ (8007454 <startScan+0xa4>)
 80073ee:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
 80073f2:	4b18      	ldr	r3, [pc, #96]	@ (8007454 <startScan+0xa4>)
 80073f4:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 80073f8:	4b16      	ldr	r3, [pc, #88]	@ (8007454 <startScan+0xa4>)
 80073fa:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	LMIC.opmode = (LMIC.opmode | OP_SCAN) & ~(OP_TXRXPEND);
 80073fe:	4b15      	ldr	r3, [pc, #84]	@ (8007454 <startScan+0xa4>)
 8007400:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007404:	f043 0301 	orr.w	r3, r3, #1
 8007408:	b29b      	uxth	r3, r3
 800740a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800740e:	b29a      	uxth	r2, r3
 8007410:	4b10      	ldr	r3, [pc, #64]	@ (8007454 <startScan+0xa4>)
 8007412:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	setBcnRxParams();
 8007416:	f7fe fd71 	bl	8005efc <setBcnRxParams>
	LMIC.rxtime = LMIC.bcninfo.txtime =
			os_getTime() + sec2osticks(BCN_INTV_sec + 1);
 800741a:	f001 f82b 	bl	8008474 <os_getTime>
 800741e:	4603      	mov	r3, r0
 8007420:	f503 137b 	add.w	r3, r3, #4112384	@ 0x3ec000
 8007424:	f503 5374 	add.w	r3, r3, #15616	@ 0x3d00
	LMIC.rxtime = LMIC.bcninfo.txtime =
 8007428:	4a0a      	ldr	r2, [pc, #40]	@ (8007454 <startScan+0xa4>)
 800742a:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
 800742e:	4b09      	ldr	r3, [pc, #36]	@ (8007454 <startScan+0xa4>)
 8007430:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8007434:	4a07      	ldr	r2, [pc, #28]	@ (8007454 <startScan+0xa4>)
 8007436:	6053      	str	r3, [r2, #4]
	os_setTimedCallback(&LMIC.osjob, LMIC.rxtime, FUNC_ADDR(onBcnRx));
 8007438:	4b06      	ldr	r3, [pc, #24]	@ (8007454 <startScan+0xa4>)
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	4a06      	ldr	r2, [pc, #24]	@ (8007458 <startScan+0xa8>)
 800743e:	4619      	mov	r1, r3
 8007440:	4806      	ldr	r0, [pc, #24]	@ (800745c <startScan+0xac>)
 8007442:	f001 f881 	bl	8008548 <os_setTimedCallback>
	os_radio(RADIO_RXON);
 8007446:	2003      	movs	r0, #3
 8007448:	f001 fe3a 	bl	80090c0 <os_radio>
 800744c:	e000      	b.n	8007450 <startScan+0xa0>
		return;
 800744e:	bf00      	nop
}
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	2000033c 	.word	0x2000033c
 8007458:	08007309 	.word	0x08007309
 800745c:	20000350 	.word	0x20000350

08007460 <buildJoinRequest>:
// Join stuff
//
// ================================================================================

static void buildJoinRequest(u1_t ftype)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	4603      	mov	r3, r0
 8007468:	71fb      	strb	r3, [r7, #7]
	// Do not use pendTxData since we might have a pending
	// user level frame in there. Use RX holding area instead.
	xref2u1_t d = LMIC.frame;
 800746a:	4b16      	ldr	r3, [pc, #88]	@ (80074c4 <buildJoinRequest+0x64>)
 800746c:	60fb      	str	r3, [r7, #12]
	d[OFF_JR_HDR] = ftype;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	79fa      	ldrb	r2, [r7, #7]
 8007472:	701a      	strb	r2, [r3, #0]
	os_getArtEui(d + OFF_JR_ARTEUI);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	3301      	adds	r3, #1
 8007478:	4618      	mov	r0, r3
 800747a:	f000 fd33 	bl	8007ee4 <os_getArtEui>
	os_getDevEui(d + OFF_JR_DEVEUI);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	3309      	adds	r3, #9
 8007482:	4618      	mov	r0, r3
 8007484:	f000 fd42 	bl	8007f0c <os_getDevEui>
	os_wlsbf2(d + OFF_JR_DEVNONCE, LMIC.devNonce);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	3311      	adds	r3, #17
 800748c:	4a0e      	ldr	r2, [pc, #56]	@ (80074c8 <buildJoinRequest+0x68>)
 800748e:	f8b2 20f2 	ldrh.w	r2, [r2, #242]	@ 0xf2
 8007492:	4611      	mov	r1, r2
 8007494:	4618      	mov	r0, r3
 8007496:	f7fd fde5 	bl	8005064 <os_wlsbf2>
	aes_appendMic0(d, OFF_JR_MIC);
 800749a:	2113      	movs	r1, #19
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f7fd ff09 	bl	80052b4 <aes_appendMic0>
					e_.oldaddr = LMIC.devaddr,
					e_.mic = Base::lsbf4(&d[LORA::OFF_JR_MIC]),
					e_.reason = ((LMIC.opmode & OP_REJOIN) != 0
							? EV::joininfo_t::REJOIN_REQUEST
							: EV::joininfo_t::REQUEST)));
	LMIC.dataLen = LEN_JR;
 80074a2:	4b09      	ldr	r3, [pc, #36]	@ (80074c8 <buildJoinRequest+0x68>)
 80074a4:	2217      	movs	r2, #23
 80074a6:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
	LMIC.devNonce++;
 80074aa:	4b07      	ldr	r3, [pc, #28]	@ (80074c8 <buildJoinRequest+0x68>)
 80074ac:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 80074b0:	3301      	adds	r3, #1
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	4b04      	ldr	r3, [pc, #16]	@ (80074c8 <buildJoinRequest+0x68>)
 80074b6:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
	DO_DEVDB(LMIC.devNonce,devNonce);
}
 80074ba:	bf00      	nop
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	20000484 	.word	0x20000484
 80074c8:	2000033c 	.word	0x2000033c

080074cc <startJoining>:

static void startJoining(xref2osjob_t osjob)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
	reportEvent(EV_JOINING);
 80074d4:	2005      	movs	r0, #5
 80074d6:	f7fe fddf 	bl	8006098 <reportEvent>
}
 80074da:	bf00      	nop
 80074dc:	3708      	adds	r7, #8
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
	...

080074e4 <LMIC_startJoining>:

// Start join procedure if not already joined.
bit_t LMIC_startJoining(void)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	af00      	add	r7, sp, #0
	if (LMIC.devaddr == 0) {
 80074e8:	4b20      	ldr	r3, [pc, #128]	@ (800756c <LMIC_startJoining+0x88>)
 80074ea:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d138      	bne.n	8007564 <LMIC_startJoining+0x80>
		// There should be no TX/RX going on
		ASSERT((LMIC.opmode & (OP_POLL | OP_TXRXPEND)) == 0);
 80074f2:	4b1e      	ldr	r3, [pc, #120]	@ (800756c <LMIC_startJoining+0x88>)
 80074f4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80074f8:	f003 0390 	and.w	r3, r3, #144	@ 0x90
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d001      	beq.n	8007504 <LMIC_startJoining+0x20>
 8007500:	f7fd fbba 	bl	8004c78 <hal_failed>
		// Lift any previous duty limitation
		LMIC.globalDutyRate = 0;
 8007504:	4b19      	ldr	r3, [pc, #100]	@ (800756c <LMIC_startJoining+0x88>)
 8007506:	2200      	movs	r2, #0
 8007508:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
		// Cancel scanning
		LMIC.opmode &= ~(OP_SCAN | OP_REJOIN | OP_LINKDEAD | OP_NEXTCHNL);
 800750c:	4b17      	ldr	r3, [pc, #92]	@ (800756c <LMIC_startJoining+0x88>)
 800750e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007512:	f423 53c1 	bic.w	r3, r3, #6176	@ 0x1820
 8007516:	f023 0301 	bic.w	r3, r3, #1
 800751a:	b29a      	uxth	r2, r3
 800751c:	4b13      	ldr	r3, [pc, #76]	@ (800756c <LMIC_startJoining+0x88>)
 800751e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		// Setup state
		LMIC.rejoinCnt = LMIC.txCnt = LMIC.pendTxConf = 0;
 8007522:	4b12      	ldr	r3, [pc, #72]	@ (800756c <LMIC_startJoining+0x88>)
 8007524:	2200      	movs	r2, #0
 8007526:	f883 20bb 	strb.w	r2, [r3, #187]	@ 0xbb
 800752a:	4b10      	ldr	r3, [pc, #64]	@ (800756c <LMIC_startJoining+0x88>)
 800752c:	f893 20bb 	ldrb.w	r2, [r3, #187]	@ 0xbb
 8007530:	4b0e      	ldr	r3, [pc, #56]	@ (800756c <LMIC_startJoining+0x88>)
 8007532:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
 8007536:	4b0d      	ldr	r3, [pc, #52]	@ (800756c <LMIC_startJoining+0x88>)
 8007538:	f893 2144 	ldrb.w	r2, [r3, #324]	@ 0x144
 800753c:	4b0b      	ldr	r3, [pc, #44]	@ (800756c <LMIC_startJoining+0x88>)
 800753e:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
		initJoinLoop();
 8007542:	f7fe fd01 	bl	8005f48 <initJoinLoop>
		LMIC.opmode |= OP_JOINING;
 8007546:	4b09      	ldr	r3, [pc, #36]	@ (800756c <LMIC_startJoining+0x88>)
 8007548:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800754c:	f043 0304 	orr.w	r3, r3, #4
 8007550:	b29a      	uxth	r2, r3
 8007552:	4b06      	ldr	r3, [pc, #24]	@ (800756c <LMIC_startJoining+0x88>)
 8007554:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		// reportEvent will call engineUpdate which then starts sending JOIN REQUESTS
		os_setCallback(&LMIC.osjob, FUNC_ADDR(startJoining));
 8007558:	4905      	ldr	r1, [pc, #20]	@ (8007570 <LMIC_startJoining+0x8c>)
 800755a:	4806      	ldr	r0, [pc, #24]	@ (8007574 <LMIC_startJoining+0x90>)
 800755c:	f000 ffce 	bl	80084fc <os_setCallback>
		return 1;
 8007560:	2301      	movs	r3, #1
 8007562:	e000      	b.n	8007566 <LMIC_startJoining+0x82>
	}
	return 0; // already joined
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	2000033c 	.word	0x2000033c
 8007570:	080074cd 	.word	0x080074cd
 8007574:	20000350 	.word	0x20000350

08007578 <processPingRx>:
//
//
// ================================================================================

static void processPingRx(xref2osjob_t osjob)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
	if (LMIC.dataLen != 0) {
 8007580:	4b0b      	ldr	r3, [pc, #44]	@ (80075b0 <processPingRx+0x38>)
 8007582:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00c      	beq.n	80075a4 <processPingRx+0x2c>
		LMIC.txrxFlags = TXRX_PING;
 800758a:	4b09      	ldr	r3, [pc, #36]	@ (80075b0 <processPingRx+0x38>)
 800758c:	2204      	movs	r2, #4
 800758e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		if (decodeFrame()) {
 8007592:	f7fe fe99 	bl	80062c8 <decodeFrame>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d003      	beq.n	80075a4 <processPingRx+0x2c>
			reportEvent(EV_RXCOMPLETE);
 800759c:	200d      	movs	r0, #13
 800759e:	f7fe fd7b 	bl	8006098 <reportEvent>
			return;
 80075a2:	e001      	b.n	80075a8 <processPingRx+0x30>
		}
	}
	// Pick next ping slot
	engineUpdate();
 80075a4:	f000 fa2a 	bl	80079fc <engineUpdate>
}
 80075a8:	3708      	adds	r7, #8
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	2000033c 	.word	0x2000033c

080075b4 <processDnData>:

static bit_t processDnData(void)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	af00      	add	r7, sp, #0
	ASSERT((LMIC.opmode & OP_TXRXPEND) != 0);
 80075b8:	4b76      	ldr	r3, [pc, #472]	@ (8007794 <processDnData+0x1e0>)
 80075ba:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80075be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d101      	bne.n	80075ca <processDnData+0x16>
 80075c6:	f7fd fb57 	bl	8004c78 <hal_failed>

	if (LMIC.dataLen == 0) {
 80075ca:	4b72      	ldr	r3, [pc, #456]	@ (8007794 <processDnData+0x1e0>)
 80075cc:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f040 80ce 	bne.w	8007772 <processDnData+0x1be>
		norx: if (LMIC.txCnt != 0) {
 80075d6:	bf00      	nop
 80075d8:	e000      	b.n	80075dc <processDnData+0x28>
		return 1;
	}
	if (!decodeFrame()) {
		if ((LMIC.txrxFlags & TXRX_DNW1) != 0)
			return 0;
		goto norx;
 80075da:	bf00      	nop
		norx: if (LMIC.txCnt != 0) {
 80075dc:	4b6d      	ldr	r3, [pc, #436]	@ (8007794 <processDnData+0x1e0>)
 80075de:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d038      	beq.n	8007658 <processDnData+0xa4>
			if (LMIC.txCnt < TXCONF_ATTEMPTS) {
 80075e6:	4b6b      	ldr	r3, [pc, #428]	@ (8007794 <processDnData+0x1e0>)
 80075e8:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80075ec:	2b07      	cmp	r3, #7
 80075ee:	d82e      	bhi.n	800764e <processDnData+0x9a>
				LMIC.txCnt += 1;
 80075f0:	4b68      	ldr	r3, [pc, #416]	@ (8007794 <processDnData+0x1e0>)
 80075f2:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80075f6:	3301      	adds	r3, #1
 80075f8:	b2da      	uxtb	r2, r3
 80075fa:	4b66      	ldr	r3, [pc, #408]	@ (8007794 <processDnData+0x1e0>)
 80075fc:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
				setDrTxpow(DRCHG_NOACK,
 8007600:	4b64      	ldr	r3, [pc, #400]	@ (8007794 <processDnData+0x1e0>)
 8007602:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
						lowerDR(LMIC.datarate, DRADJUST[LMIC.txCnt]),
 8007606:	4a63      	ldr	r2, [pc, #396]	@ (8007794 <processDnData+0x1e0>)
 8007608:	f892 2144 	ldrb.w	r2, [r2, #324]	@ 0x144
 800760c:	4611      	mov	r1, r2
 800760e:	4a62      	ldr	r2, [pc, #392]	@ (8007798 <processDnData+0x1e4>)
 8007610:	5c52      	ldrb	r2, [r2, r1]
				setDrTxpow(DRCHG_NOACK,
 8007612:	4611      	mov	r1, r2
 8007614:	4618      	mov	r0, r3
 8007616:	f7fd fcbd 	bl	8004f94 <lowerDR>
 800761a:	4603      	mov	r3, r0
 800761c:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 8007620:	4619      	mov	r1, r3
 8007622:	2002      	movs	r0, #2
 8007624:	f7fe f9ea 	bl	80059fc <setDrTxpow>
				txDelay(LMIC.rxtime, RETRY_PERIOD_secs);
 8007628:	4b5a      	ldr	r3, [pc, #360]	@ (8007794 <processDnData+0x1e0>)
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	2103      	movs	r1, #3
 800762e:	4618      	mov	r0, r3
 8007630:	f7fe f9a2 	bl	8005978 <txDelay>
				LMIC.opmode &= ~OP_TXRXPEND;
 8007634:	4b57      	ldr	r3, [pc, #348]	@ (8007794 <processDnData+0x1e0>)
 8007636:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800763a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800763e:	b29a      	uxth	r2, r3
 8007640:	4b54      	ldr	r3, [pc, #336]	@ (8007794 <processDnData+0x1e0>)
 8007642:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
				engineUpdate();
 8007646:	f000 f9d9 	bl	80079fc <engineUpdate>
				return 1;
 800764a:	2301      	movs	r3, #1
 800764c:	e09f      	b.n	800778e <processDnData+0x1da>
			LMIC.txrxFlags = TXRX_NACK | TXRX_NOPORT;
 800764e:	4b51      	ldr	r3, [pc, #324]	@ (8007794 <processDnData+0x1e0>)
 8007650:	2260      	movs	r2, #96	@ 0x60
 8007652:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
 8007656:	e003      	b.n	8007660 <processDnData+0xac>
			LMIC.txrxFlags = TXRX_NOPORT;
 8007658:	4b4e      	ldr	r3, [pc, #312]	@ (8007794 <processDnData+0x1e0>)
 800765a:	2220      	movs	r2, #32
 800765c:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		if (LMIC.adrAckReq != LINK_CHECK_OFF)
 8007660:	4b4c      	ldr	r3, [pc, #304]	@ (8007794 <processDnData+0x1e0>)
 8007662:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 8007666:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 800766a:	d009      	beq.n	8007680 <processDnData+0xcc>
			LMIC.adrAckReq += 1;
 800766c:	4b49      	ldr	r3, [pc, #292]	@ (8007794 <processDnData+0x1e0>)
 800766e:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 8007672:	b2db      	uxtb	r3, r3
 8007674:	3301      	adds	r3, #1
 8007676:	b2db      	uxtb	r3, r3
 8007678:	b25a      	sxtb	r2, r3
 800767a:	4b46      	ldr	r3, [pc, #280]	@ (8007794 <processDnData+0x1e0>)
 800767c:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
		LMIC.dataBeg = LMIC.dataLen = 0;
 8007680:	4b44      	ldr	r3, [pc, #272]	@ (8007794 <processDnData+0x1e0>)
 8007682:	2200      	movs	r2, #0
 8007684:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 8007688:	4b42      	ldr	r3, [pc, #264]	@ (8007794 <processDnData+0x1e0>)
 800768a:	f893 2147 	ldrb.w	r2, [r3, #327]	@ 0x147
 800768e:	4b41      	ldr	r3, [pc, #260]	@ (8007794 <processDnData+0x1e0>)
 8007690:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
 8007694:	e000      	b.n	8007698 <processDnData+0xe4>
	}
	goto txcomplete;
 8007696:	bf00      	nop
		txcomplete: LMIC.opmode &= ~(OP_TXDATA | OP_TXRXPEND);
 8007698:	4b3e      	ldr	r3, [pc, #248]	@ (8007794 <processDnData+0x1e0>)
 800769a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800769e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	4b3b      	ldr	r3, [pc, #236]	@ (8007794 <processDnData+0x1e0>)
 80076a6:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		if ((LMIC.txrxFlags & (TXRX_DNW1 | TXRX_DNW2 | TXRX_PING)) != 0
 80076aa:	4b3a      	ldr	r3, [pc, #232]	@ (8007794 <processDnData+0x1e0>)
 80076ac:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 80076b0:	f003 0307 	and.w	r3, r3, #7
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d012      	beq.n	80076de <processDnData+0x12a>
				&& (LMIC.opmode & OP_LINKDEAD) != 0) {
 80076b8:	4b36      	ldr	r3, [pc, #216]	@ (8007794 <processDnData+0x1e0>)
 80076ba:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80076be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00b      	beq.n	80076de <processDnData+0x12a>
			LMIC.opmode &= ~OP_LINKDEAD;
 80076c6:	4b33      	ldr	r3, [pc, #204]	@ (8007794 <processDnData+0x1e0>)
 80076c8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80076cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	4b30      	ldr	r3, [pc, #192]	@ (8007794 <processDnData+0x1e0>)
 80076d4:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			reportEvent(EV_LINK_ALIVE);
 80076d8:	200f      	movs	r0, #15
 80076da:	f7fe fcdd 	bl	8006098 <reportEvent>
		reportEvent(EV_TXCOMPLETE);
 80076de:	200a      	movs	r0, #10
 80076e0:	f7fe fcda 	bl	8006098 <reportEvent>
		if (LMIC.adrAckReq > LINK_CHECK_DEAD) {
 80076e4:	4b2b      	ldr	r3, [pc, #172]	@ (8007794 <processDnData+0x1e0>)
 80076e6:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 80076ea:	2b18      	cmp	r3, #24
 80076ec:	dd1c      	ble.n	8007728 <processDnData+0x174>
			setDrTxpow(DRCHG_NOADRACK, decDR((dr_t) LMIC.datarate), KEEP_TXPOW);
 80076ee:	4b29      	ldr	r3, [pc, #164]	@ (8007794 <processDnData+0x1e0>)
 80076f0:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80076f4:	4618      	mov	r0, r3
 80076f6:	f7fd fc1f 	bl	8004f38 <decDR>
 80076fa:	4603      	mov	r3, r0
 80076fc:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 8007700:	4619      	mov	r1, r3
 8007702:	2003      	movs	r0, #3
 8007704:	f7fe f97a 	bl	80059fc <setDrTxpow>
			LMIC.adrAckReq = LINK_CHECK_CONT;
 8007708:	4b22      	ldr	r3, [pc, #136]	@ (8007794 <processDnData+0x1e0>)
 800770a:	220c      	movs	r2, #12
 800770c:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
			LMIC.opmode |= OP_REJOIN | OP_LINKDEAD;
 8007710:	4b20      	ldr	r3, [pc, #128]	@ (8007794 <processDnData+0x1e0>)
 8007712:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007716:	f443 5381 	orr.w	r3, r3, #4128	@ 0x1020
 800771a:	b29a      	uxth	r2, r3
 800771c:	4b1d      	ldr	r3, [pc, #116]	@ (8007794 <processDnData+0x1e0>)
 800771e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			reportEvent(EV_LINK_DEAD);
 8007722:	200e      	movs	r0, #14
 8007724:	f7fe fcb8 	bl	8006098 <reportEvent>
		if (LMIC.bcninfoTries > 0) {
 8007728:	4b1a      	ldr	r3, [pc, #104]	@ (8007794 <processDnData+0x1e0>)
 800772a:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 800772e:	2b00      	cmp	r3, #0
 8007730:	d01d      	beq.n	800776e <processDnData+0x1ba>
			if ((LMIC.opmode & OP_TRACK) != 0) {
 8007732:	4b18      	ldr	r3, [pc, #96]	@ (8007794 <processDnData+0x1e0>)
 8007734:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007738:	f003 0302 	and.w	r3, r3, #2
 800773c:	2b00      	cmp	r3, #0
 800773e:	d007      	beq.n	8007750 <processDnData+0x19c>
				reportEvent(EV_BEACON_FOUND);
 8007740:	2002      	movs	r0, #2
 8007742:	f7fe fca9 	bl	8006098 <reportEvent>
				LMIC.bcninfoTries = 0;
 8007746:	4b13      	ldr	r3, [pc, #76]	@ (8007794 <processDnData+0x1e0>)
 8007748:	2200      	movs	r2, #0
 800774a:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
 800774e:	e00e      	b.n	800776e <processDnData+0x1ba>
			} else if (--LMIC.bcninfoTries == 0) {
 8007750:	4b10      	ldr	r3, [pc, #64]	@ (8007794 <processDnData+0x1e0>)
 8007752:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8007756:	3b01      	subs	r3, #1
 8007758:	b2da      	uxtb	r2, r3
 800775a:	4b0e      	ldr	r3, [pc, #56]	@ (8007794 <processDnData+0x1e0>)
 800775c:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
 8007760:	4b0c      	ldr	r3, [pc, #48]	@ (8007794 <processDnData+0x1e0>)
 8007762:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8007766:	2b00      	cmp	r3, #0
 8007768:	d101      	bne.n	800776e <processDnData+0x1ba>
				startScan();   // NWK did not answer - try scan
 800776a:	f7ff fe21 	bl	80073b0 <startScan>
		return 1;
 800776e:	2301      	movs	r3, #1
 8007770:	e00d      	b.n	800778e <processDnData+0x1da>
	if (!decodeFrame()) {
 8007772:	f7fe fda9 	bl	80062c8 <decodeFrame>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d18c      	bne.n	8007696 <processDnData+0xe2>
		if ((LMIC.txrxFlags & TXRX_DNW1) != 0)
 800777c:	4b05      	ldr	r3, [pc, #20]	@ (8007794 <processDnData+0x1e0>)
 800777e:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8007782:	f003 0301 	and.w	r3, r3, #1
 8007786:	2b00      	cmp	r3, #0
 8007788:	f43f af27 	beq.w	80075da <processDnData+0x26>
			return 0;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	2000033c 	.word	0x2000033c
 8007798:	08012d24 	.word	0x08012d24

0800779c <processBeacon>:

static void processBeacon(xref2osjob_t osjob)
{
 800779c:	b590      	push	{r4, r7, lr}
 800779e:	b087      	sub	sp, #28
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
	ostime_t lasttx = LMIC.bcninfo.txtime; // save here - decodeBeacon might overwrite
 80077a4:	4b81      	ldr	r3, [pc, #516]	@ (80079ac <processBeacon+0x210>)
 80077a6:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80077aa:	60fb      	str	r3, [r7, #12]
	u1_t flags = LMIC.bcninfo.flags;
 80077ac:	4b7f      	ldr	r3, [pc, #508]	@ (80079ac <processBeacon+0x210>)
 80077ae:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 80077b2:	72fb      	strb	r3, [r7, #11]
	ev_t ev;

	if (LMIC.dataLen != 0 && decodeBeacon() >= 1) {
 80077b4:	4b7d      	ldr	r3, [pc, #500]	@ (80079ac <processBeacon+0x210>)
 80077b6:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	f000 8087 	beq.w	80078ce <processBeacon+0x132>
 80077c0:	f7fe fcee 	bl	80061a0 <decodeBeacon>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	f340 8081 	ble.w	80078ce <processBeacon+0x132>
		ev = EV_BEACON_TRACKED;
 80077cc:	2304      	movs	r3, #4
 80077ce:	75fb      	strb	r3, [r7, #23]
		if ((flags & (BCN_PARTIAL | BCN_FULL)) == 0) {
 80077d0:	7afb      	ldrb	r3, [r7, #11]
 80077d2:	f003 0303 	and.w	r3, r3, #3
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d104      	bne.n	80077e4 <processBeacon+0x48>
			// We don't have a previous beacon to calc some drift - assume
			// an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
			calcBcnRxWindowFromMillis(13, 0);
 80077da:	2100      	movs	r1, #0
 80077dc:	200d      	movs	r0, #13
 80077de:	f7fd ff4b 	bl	8005678 <calcBcnRxWindowFromMillis>
			goto rev;
 80077e2:	e0d2      	b.n	800798a <processBeacon+0x1ee>
		}
		// We have a previous BEACON to calculate some drift
		s2_t drift = BCN_INTV_osticks - (LMIC.bcninfo.txtime - lasttx);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	4b70      	ldr	r3, [pc, #448]	@ (80079ac <processBeacon+0x210>)
 80077ea:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	1ad3      	subs	r3, r2, r3
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	82bb      	strh	r3, [r7, #20]
		if (LMIC.missedBcns > 0) {
 80077fc:	4b6b      	ldr	r3, [pc, #428]	@ (80079ac <processBeacon+0x210>)
 80077fe:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8007802:	2b00      	cmp	r3, #0
 8007804:	d013      	beq.n	800782e <processBeacon+0x92>
			drift = LMIC.drift + (drift - LMIC.drift) / (LMIC.missedBcns + 1);
 8007806:	4b69      	ldr	r3, [pc, #420]	@ (80079ac <processBeacon+0x210>)
 8007808:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 800780c:	b29a      	uxth	r2, r3
 800780e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007812:	4966      	ldr	r1, [pc, #408]	@ (80079ac <processBeacon+0x210>)
 8007814:	f9b1 10b4 	ldrsh.w	r1, [r1, #180]	@ 0xb4
 8007818:	1a59      	subs	r1, r3, r1
 800781a:	4b64      	ldr	r3, [pc, #400]	@ (80079ac <processBeacon+0x210>)
 800781c:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8007820:	3301      	adds	r3, #1
 8007822:	fb91 f3f3 	sdiv	r3, r1, r3
 8007826:	b29b      	uxth	r3, r3
 8007828:	4413      	add	r3, r2
 800782a:	b29b      	uxth	r3, r3
 800782c:	82bb      	strh	r3, [r7, #20]
		}
		if ((LMIC.bcninfo.flags & BCN_NODRIFT) == 0) {
 800782e:	4b5f      	ldr	r3, [pc, #380]	@ (80079ac <processBeacon+0x210>)
 8007830:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8007834:	f003 0304 	and.w	r3, r3, #4
 8007838:	2b00      	cmp	r3, #0
 800783a:	d127      	bne.n	800788c <processBeacon+0xf0>
			s2_t diff = LMIC.drift - drift;
 800783c:	4b5b      	ldr	r3, [pc, #364]	@ (80079ac <processBeacon+0x210>)
 800783e:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 8007842:	b29a      	uxth	r2, r3
 8007844:	8abb      	ldrh	r3, [r7, #20]
 8007846:	1ad3      	subs	r3, r2, r3
 8007848:	b29b      	uxth	r3, r3
 800784a:	827b      	strh	r3, [r7, #18]
			if (diff < 0)
 800784c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007850:	2b00      	cmp	r3, #0
 8007852:	da03      	bge.n	800785c <processBeacon+0xc0>
				diff = -diff;
 8007854:	8a7b      	ldrh	r3, [r7, #18]
 8007856:	425b      	negs	r3, r3
 8007858:	b29b      	uxth	r3, r3
 800785a:	827b      	strh	r3, [r7, #18]
			LMIC.lastDriftDiff = diff;
 800785c:	4a53      	ldr	r2, [pc, #332]	@ (80079ac <processBeacon+0x210>)
 800785e:	8a7b      	ldrh	r3, [r7, #18]
 8007860:	f8a2 30b6 	strh.w	r3, [r2, #182]	@ 0xb6
			if (LMIC.maxDriftDiff < diff)
 8007864:	4b51      	ldr	r3, [pc, #324]	@ (80079ac <processBeacon+0x210>)
 8007866:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 800786a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800786e:	429a      	cmp	r2, r3
 8007870:	dd03      	ble.n	800787a <processBeacon+0xde>
				LMIC.maxDriftDiff = diff;
 8007872:	4a4e      	ldr	r2, [pc, #312]	@ (80079ac <processBeacon+0x210>)
 8007874:	8a7b      	ldrh	r3, [r7, #18]
 8007876:	f8a2 30b8 	strh.w	r3, [r2, #184]	@ 0xb8
			LMIC.bcninfo.flags &= ~BCN_NODDIFF;
 800787a:	4b4c      	ldr	r3, [pc, #304]	@ (80079ac <processBeacon+0x210>)
 800787c:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8007880:	f023 0308 	bic.w	r3, r3, #8
 8007884:	b2da      	uxtb	r2, r3
 8007886:	4b49      	ldr	r3, [pc, #292]	@ (80079ac <processBeacon+0x210>)
 8007888:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
		}
		LMIC.drift = drift;
 800788c:	4a47      	ldr	r2, [pc, #284]	@ (80079ac <processBeacon+0x210>)
 800788e:	8abb      	ldrh	r3, [r7, #20]
 8007890:	f8a2 30b4 	strh.w	r3, [r2, #180]	@ 0xb4
		LMIC.missedBcns = LMIC.rejoinCnt = 0;
 8007894:	4b45      	ldr	r3, [pc, #276]	@ (80079ac <processBeacon+0x210>)
 8007896:	2200      	movs	r2, #0
 8007898:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
 800789c:	4b43      	ldr	r3, [pc, #268]	@ (80079ac <processBeacon+0x210>)
 800789e:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 80078a2:	4b42      	ldr	r3, [pc, #264]	@ (80079ac <processBeacon+0x210>)
 80078a4:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
		LMIC.bcninfo.flags &= ~BCN_NODRIFT;
 80078a8:	4b40      	ldr	r3, [pc, #256]	@ (80079ac <processBeacon+0x210>)
 80078aa:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 80078ae:	f023 0304 	bic.w	r3, r3, #4
 80078b2:	b2da      	uxtb	r2, r3
 80078b4:	4b3d      	ldr	r3, [pc, #244]	@ (80079ac <processBeacon+0x210>)
 80078b6:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
		EV(devCond,INFO,(e_.reason = EV::devCond_t::CLOCK_DRIFT,
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = drift,
						e_.info2 = /*occasion BEACON*/0));
		ASSERT((LMIC.bcninfo.flags & (BCN_PARTIAL | BCN_FULL)) != 0);
 80078ba:	4b3c      	ldr	r3, [pc, #240]	@ (80079ac <processBeacon+0x210>)
 80078bc:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 80078c0:	f003 0303 	and.w	r3, r3, #3
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d14c      	bne.n	8007962 <processBeacon+0x1c6>
 80078c8:	f7fd f9d6 	bl	8004c78 <hal_failed>
	if (LMIC.dataLen != 0 && decodeBeacon() >= 1) {
 80078cc:	e049      	b.n	8007962 <processBeacon+0x1c6>
	} else {
		ev = EV_BEACON_MISSED;
 80078ce:	2303      	movs	r3, #3
 80078d0:	75fb      	strb	r3, [r7, #23]
		LMIC.bcninfo.txtime += BCN_INTV_osticks - LMIC.drift;
 80078d2:	4b36      	ldr	r3, [pc, #216]	@ (80079ac <processBeacon+0x210>)
 80078d4:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 80078d8:	4b34      	ldr	r3, [pc, #208]	@ (80079ac <processBeacon+0x210>)
 80078da:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 80078de:	f5c3 137a 	rsb	r3, r3, #4096000	@ 0x3e8000
 80078e2:	4413      	add	r3, r2
 80078e4:	4a31      	ldr	r2, [pc, #196]	@ (80079ac <processBeacon+0x210>)
 80078e6:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
		LMIC.bcninfo.time += BCN_INTV_sec;
 80078ea:	4b30      	ldr	r3, [pc, #192]	@ (80079ac <processBeacon+0x210>)
 80078ec:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 80078f0:	3380      	adds	r3, #128	@ 0x80
 80078f2:	4a2e      	ldr	r2, [pc, #184]	@ (80079ac <processBeacon+0x210>)
 80078f4:	f8c2 3198 	str.w	r3, [r2, #408]	@ 0x198
		LMIC.missedBcns++;
 80078f8:	4b2c      	ldr	r3, [pc, #176]	@ (80079ac <processBeacon+0x210>)
 80078fa:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 80078fe:	3301      	adds	r3, #1
 8007900:	b2da      	uxtb	r2, r3
 8007902:	4b2a      	ldr	r3, [pc, #168]	@ (80079ac <processBeacon+0x210>)
 8007904:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
		// Delay any possible TX after surmised beacon - it's there although we missed it
		txDelay(LMIC.bcninfo.txtime + BCN_RESERVE_osticks, 4);
 8007908:	4b28      	ldr	r3, [pc, #160]	@ (80079ac <processBeacon+0x210>)
 800790a:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 800790e:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 8007912:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8007916:	2104      	movs	r1, #4
 8007918:	4618      	mov	r0, r3
 800791a:	f7fe f82d 	bl	8005978 <txDelay>
		if (LMIC.missedBcns > MAX_MISSED_BCNS)
 800791e:	4b23      	ldr	r3, [pc, #140]	@ (80079ac <processBeacon+0x210>)
 8007920:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8007924:	2b14      	cmp	r3, #20
 8007926:	d908      	bls.n	800793a <processBeacon+0x19e>
			LMIC.opmode |= OP_REJOIN;  // try if we can roam to another network
 8007928:	4b20      	ldr	r3, [pc, #128]	@ (80079ac <processBeacon+0x210>)
 800792a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800792e:	f043 0320 	orr.w	r3, r3, #32
 8007932:	b29a      	uxth	r2, r3
 8007934:	4b1d      	ldr	r3, [pc, #116]	@ (80079ac <processBeacon+0x210>)
 8007936:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		if (LMIC.bcnRxsyms > MAX_RXSYMS) {
 800793a:	4b1c      	ldr	r3, [pc, #112]	@ (80079ac <processBeacon+0x210>)
 800793c:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 8007940:	2b64      	cmp	r3, #100	@ 0x64
 8007942:	d90f      	bls.n	8007964 <processBeacon+0x1c8>
			LMIC.opmode &= ~(OP_TRACK | OP_PINGABLE | OP_PINGINI | OP_REJOIN);
 8007944:	4b19      	ldr	r3, [pc, #100]	@ (80079ac <processBeacon+0x210>)
 8007946:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800794a:	f423 63c4 	bic.w	r3, r3, #1568	@ 0x620
 800794e:	f023 0302 	bic.w	r3, r3, #2
 8007952:	b29a      	uxth	r2, r3
 8007954:	4b15      	ldr	r3, [pc, #84]	@ (80079ac <processBeacon+0x210>)
 8007956:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			reportEvent(EV_LOST_TSYNC);
 800795a:	200b      	movs	r0, #11
 800795c:	f7fe fb9c 	bl	8006098 <reportEvent>
			return;
 8007960:	e021      	b.n	80079a6 <processBeacon+0x20a>
	if (LMIC.dataLen != 0 && decodeBeacon() >= 1) {
 8007962:	bf00      	nop
		}
	}
	LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks
 8007964:	4b11      	ldr	r3, [pc, #68]	@ (80079ac <processBeacon+0x210>)
 8007966:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 800796a:	f503 147a 	add.w	r4, r3, #4096000	@ 0x3e8000
			- calcRxWindow(0, DR_BCN);
 800796e:	2103      	movs	r1, #3
 8007970:	2000      	movs	r0, #0
 8007972:	f7fd fe2d 	bl	80055d0 <calcRxWindow>
 8007976:	4603      	mov	r3, r0
 8007978:	1ae3      	subs	r3, r4, r3
	LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks
 800797a:	4a0c      	ldr	r2, [pc, #48]	@ (80079ac <processBeacon+0x210>)
 800797c:	f8c2 318c 	str.w	r3, [r2, #396]	@ 0x18c
	LMIC.bcnRxsyms = LMIC.rxsyms;
 8007980:	4b0a      	ldr	r3, [pc, #40]	@ (80079ac <processBeacon+0x210>)
 8007982:	7c1a      	ldrb	r2, [r3, #16]
 8007984:	4b09      	ldr	r3, [pc, #36]	@ (80079ac <processBeacon+0x210>)
 8007986:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
	rev:
#if CFG_us915
    LMIC.bcnChnl = (LMIC.bcnChnl+1) & 7;
#endif
	if ((LMIC.opmode & OP_PINGINI) != 0)
 800798a:	4b08      	ldr	r3, [pc, #32]	@ (80079ac <processBeacon+0x210>)
 800798c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007990:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007994:	2b00      	cmp	r3, #0
 8007996:	d002      	beq.n	800799e <processBeacon+0x202>
		rxschedInit(&LMIC.ping);  // note: reuses LMIC.frame buffer!
 8007998:	4805      	ldr	r0, [pc, #20]	@ (80079b0 <processBeacon+0x214>)
 800799a:	f7fd fef3 	bl	8005784 <rxschedInit>
	reportEvent(ev);
 800799e:	7dfb      	ldrb	r3, [r7, #23]
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7fe fb79 	bl	8006098 <reportEvent>
}
 80079a6:	371c      	adds	r7, #28
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd90      	pop	{r4, r7, pc}
 80079ac:	2000033c 	.word	0x2000033c
 80079b0:	20000470 	.word	0x20000470

080079b4 <startRxBcn>:

static void startRxBcn(xref2osjob_t osjob)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
	LMIC.osjob.func = FUNC_ADDR(processBeacon);
 80079bc:	4b04      	ldr	r3, [pc, #16]	@ (80079d0 <startRxBcn+0x1c>)
 80079be:	4a05      	ldr	r2, [pc, #20]	@ (80079d4 <startRxBcn+0x20>)
 80079c0:	61da      	str	r2, [r3, #28]
	os_radio(RADIO_RX);
 80079c2:	2002      	movs	r0, #2
 80079c4:	f001 fb7c 	bl	80090c0 <os_radio>
}
 80079c8:	bf00      	nop
 80079ca:	3708      	adds	r7, #8
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	2000033c 	.word	0x2000033c
 80079d4:	0800779d 	.word	0x0800779d

080079d8 <startRxPing>:

static void startRxPing(xref2osjob_t osjob)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
	LMIC.osjob.func = FUNC_ADDR(processPingRx);
 80079e0:	4b04      	ldr	r3, [pc, #16]	@ (80079f4 <startRxPing+0x1c>)
 80079e2:	4a05      	ldr	r2, [pc, #20]	@ (80079f8 <startRxPing+0x20>)
 80079e4:	61da      	str	r2, [r3, #28]
	os_radio(RADIO_RX);
 80079e6:	2002      	movs	r0, #2
 80079e8:	f001 fb6a 	bl	80090c0 <os_radio>
}
 80079ec:	bf00      	nop
 80079ee:	3708      	adds	r7, #8
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	2000033c 	.word	0x2000033c
 80079f8:	08007579 	.word	0x08007579

080079fc <engineUpdate>:

// Decide what to do next for the MAC layer of a device
static void engineUpdate(void)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b086      	sub	sp, #24
 8007a00:	af00      	add	r7, sp, #0
	// Check for ongoing state: scan or TX/RX transaction
	if ((LMIC.opmode & (OP_SCAN | OP_TXRXPEND | OP_SHUTDOWN)) != 0)
 8007a02:	4b90      	ldr	r3, [pc, #576]	@ (8007c44 <engineUpdate+0x248>)
 8007a04:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007a08:	f003 03c1 	and.w	r3, r3, #193	@ 0xc1
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f040 81ab 	bne.w	8007d68 <engineUpdate+0x36c>
		return;

	if (LMIC.devaddr == 0 && (LMIC.opmode & OP_JOINING) == 0) {
 8007a12:	4b8c      	ldr	r3, [pc, #560]	@ (8007c44 <engineUpdate+0x248>)
 8007a14:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d109      	bne.n	8007a30 <engineUpdate+0x34>
 8007a1c:	4b89      	ldr	r3, [pc, #548]	@ (8007c44 <engineUpdate+0x248>)
 8007a1e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007a22:	f003 0304 	and.w	r3, r3, #4
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d102      	bne.n	8007a30 <engineUpdate+0x34>
		LMIC_startJoining();
 8007a2a:	f7ff fd5b 	bl	80074e4 <LMIC_startJoining>
		return;
 8007a2e:	e19e      	b.n	8007d6e <engineUpdate+0x372>
	}

	ostime_t now = os_getTime();
 8007a30:	f000 fd20 	bl	8008474 <os_getTime>
 8007a34:	60b8      	str	r0, [r7, #8]
	ostime_t rxtime = 0;
 8007a36:	2300      	movs	r3, #0
 8007a38:	617b      	str	r3, [r7, #20]
	ostime_t txbeg = 0;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	613b      	str	r3, [r7, #16]

	if ((LMIC.opmode & OP_TRACK) != 0) {
 8007a3e:	4b81      	ldr	r3, [pc, #516]	@ (8007c44 <engineUpdate+0x248>)
 8007a40:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007a44:	f003 0302 	and.w	r3, r3, #2
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00f      	beq.n	8007a6c <engineUpdate+0x70>
		// We are tracking a beacon
		ASSERT(now + RX_RAMPUP - LMIC.bcnRxtime <= 0);
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8007a52:	4b7c      	ldr	r3, [pc, #496]	@ (8007c44 <engineUpdate+0x248>)
 8007a54:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8007a58:	1ad3      	subs	r3, r2, r3
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	dd01      	ble.n	8007a62 <engineUpdate+0x66>
 8007a5e:	f7fd f90b 	bl	8004c78 <hal_failed>
		rxtime = LMIC.bcnRxtime - RX_RAMPUP;
 8007a62:	4b78      	ldr	r3, [pc, #480]	@ (8007c44 <engineUpdate+0x248>)
 8007a64:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8007a68:	3b40      	subs	r3, #64	@ 0x40
 8007a6a:	617b      	str	r3, [r7, #20]
	}

	if ((LMIC.opmode & (OP_JOINING | OP_REJOIN | OP_TXDATA | OP_POLL)) != 0) {
 8007a6c:	4b75      	ldr	r3, [pc, #468]	@ (8007c44 <engineUpdate+0x248>)
 8007a6e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007a72:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f000 80f2 	beq.w	8007c60 <engineUpdate+0x264>
		// Need to TX some data...
		// Assuming txChnl points to channel which first becomes available again.
		bit_t jacc = ((LMIC.opmode & (OP_JOINING | OP_REJOIN)) != 0 ? 1 : 0);
 8007a7c:	4b71      	ldr	r3, [pc, #452]	@ (8007c44 <engineUpdate+0x248>)
 8007a7e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007a82:	f003 0324 	and.w	r3, r3, #36	@ 0x24
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	bf14      	ite	ne
 8007a8a:	2301      	movne	r3, #1
 8007a8c:	2300      	moveq	r3, #0
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	71fb      	strb	r3, [r7, #7]
		// Find next suitable channel and return availability time
		if ((LMIC.opmode & OP_NEXTCHNL) != 0) {
 8007a92:	4b6c      	ldr	r3, [pc, #432]	@ (8007c44 <engineUpdate+0x248>)
 8007a94:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007a98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d012      	beq.n	8007ac6 <engineUpdate+0xca>
			txbeg = LMIC.txend = nextTx(now);
 8007aa0:	68b8      	ldr	r0, [r7, #8]
 8007aa2:	f7fe f98f 	bl	8005dc4 <nextTx>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	4a66      	ldr	r2, [pc, #408]	@ (8007c44 <engineUpdate+0x248>)
 8007aaa:	6013      	str	r3, [r2, #0]
 8007aac:	4b65      	ldr	r3, [pc, #404]	@ (8007c44 <engineUpdate+0x248>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	613b      	str	r3, [r7, #16]
			LMIC.opmode &= ~OP_NEXTCHNL;
 8007ab2:	4b64      	ldr	r3, [pc, #400]	@ (8007c44 <engineUpdate+0x248>)
 8007ab4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007ab8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007abc:	b29a      	uxth	r2, r3
 8007abe:	4b61      	ldr	r3, [pc, #388]	@ (8007c44 <engineUpdate+0x248>)
 8007ac0:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8007ac4:	e002      	b.n	8007acc <engineUpdate+0xd0>
		} else {
			txbeg = LMIC.txend;
 8007ac6:	4b5f      	ldr	r3, [pc, #380]	@ (8007c44 <engineUpdate+0x248>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	613b      	str	r3, [r7, #16]
		}
		// Delayed TX or waiting for duty cycle?
		if ((LMIC.globalDutyRate != 0 || (LMIC.opmode & OP_RNDTX) != 0)
 8007acc:	4b5d      	ldr	r3, [pc, #372]	@ (8007c44 <engineUpdate+0x248>)
 8007ace:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d106      	bne.n	8007ae4 <engineUpdate+0xe8>
 8007ad6:	4b5b      	ldr	r3, [pc, #364]	@ (8007c44 <engineUpdate+0x248>)
 8007ad8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00a      	beq.n	8007afa <engineUpdate+0xfe>
				&& (txbeg - LMIC.globalDutyAvail) < 0)
 8007ae4:	4b57      	ldr	r3, [pc, #348]	@ (8007c44 <engineUpdate+0x248>)
 8007ae6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007aea:	693a      	ldr	r2, [r7, #16]
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	da03      	bge.n	8007afa <engineUpdate+0xfe>
			txbeg = LMIC.globalDutyAvail;
 8007af2:	4b54      	ldr	r3, [pc, #336]	@ (8007c44 <engineUpdate+0x248>)
 8007af4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007af8:	613b      	str	r3, [r7, #16]
		// If we're tracking a beacon...
		// then make sure TX-RX transaction is complete before beacon
		if ((LMIC.opmode & OP_TRACK) != 0
 8007afa:	4b52      	ldr	r3, [pc, #328]	@ (8007c44 <engineUpdate+0x248>)
 8007afc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007b00:	f003 0302 	and.w	r3, r3, #2
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d017      	beq.n	8007b38 <engineUpdate+0x13c>
				&& txbeg + (jacc ? JOIN_GUARD_osticks : TXRX_GUARD_osticks)
 8007b08:	79fb      	ldrb	r3, [r7, #7]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d001      	beq.n	8007b12 <engineUpdate+0x116>
 8007b0e:	4a4e      	ldr	r2, [pc, #312]	@ (8007c48 <engineUpdate+0x24c>)
 8007b10:	e000      	b.n	8007b14 <engineUpdate+0x118>
 8007b12:	4a4e      	ldr	r2, [pc, #312]	@ (8007c4c <engineUpdate+0x250>)
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	441a      	add	r2, r3
						- rxtime > 0) {
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	1ad3      	subs	r3, r2, r3
				&& txbeg + (jacc ? JOIN_GUARD_osticks : TXRX_GUARD_osticks)
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	dd0b      	ble.n	8007b38 <engineUpdate+0x13c>
			// Not enough time to complete TX-RX before beacon - postpone after beacon.
			// In order to avoid clustering of postponed TX right after beacon randomize start!
			txDelay(rxtime + BCN_RESERVE_osticks, 16);
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 8007b26:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8007b2a:	2110      	movs	r1, #16
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7fd ff23 	bl	8005978 <txDelay>
			txbeg = 0;
 8007b32:	2300      	movs	r3, #0
 8007b34:	613b      	str	r3, [r7, #16]
			goto checkrx;
 8007b36:	e09b      	b.n	8007c70 <engineUpdate+0x274>
		}
		// Earliest possible time vs overhead to setup radio
		if (txbeg - (now + TX_RAMPUP) < 0) {
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	3340      	adds	r3, #64	@ 0x40
 8007b3c:	693a      	ldr	r2, [r7, #16]
 8007b3e:	1ad3      	subs	r3, r2, r3
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	da70      	bge.n	8007c26 <engineUpdate+0x22a>
			// We could send right now!
			txbeg = now;
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	613b      	str	r3, [r7, #16]
			dr_t txdr = (dr_t) LMIC.datarate;
 8007b48:	4b3e      	ldr	r3, [pc, #248]	@ (8007c44 <engineUpdate+0x248>)
 8007b4a:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8007b4e:	73fb      	strb	r3, [r7, #15]
			if (jacc) {
 8007b50:	79fb      	ldrb	r3, [r7, #7]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d01d      	beq.n	8007b92 <engineUpdate+0x196>
				u1_t ftype;
				if ((LMIC.opmode & OP_REJOIN) != 0) {
 8007b56:	4b3b      	ldr	r3, [pc, #236]	@ (8007c44 <engineUpdate+0x248>)
 8007b58:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007b5c:	f003 0320 	and.w	r3, r3, #32
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d00c      	beq.n	8007b7e <engineUpdate+0x182>
					txdr = lowerDR(txdr, LMIC.rejoinCnt);
 8007b64:	4b37      	ldr	r3, [pc, #220]	@ (8007c44 <engineUpdate+0x248>)
 8007b66:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 8007b6a:	7bfb      	ldrb	r3, [r7, #15]
 8007b6c:	4611      	mov	r1, r2
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7fd fa10 	bl	8004f94 <lowerDR>
 8007b74:	4603      	mov	r3, r0
 8007b76:	73fb      	strb	r3, [r7, #15]
					ftype = HDR_FTYPE_REJOIN;
 8007b78:	23c0      	movs	r3, #192	@ 0xc0
 8007b7a:	73bb      	strb	r3, [r7, #14]
 8007b7c:	e001      	b.n	8007b82 <engineUpdate+0x186>
				} else {
					ftype = HDR_FTYPE_JREQ;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	73bb      	strb	r3, [r7, #14]
				}
				buildJoinRequest(ftype);
 8007b82:	7bbb      	ldrb	r3, [r7, #14]
 8007b84:	4618      	mov	r0, r3
 8007b86:	f7ff fc6b 	bl	8007460 <buildJoinRequest>
				LMIC.osjob.func = FUNC_ADDR(jreqDone);
 8007b8a:	4b2e      	ldr	r3, [pc, #184]	@ (8007c44 <engineUpdate+0x248>)
 8007b8c:	4a30      	ldr	r2, [pc, #192]	@ (8007c50 <engineUpdate+0x254>)
 8007b8e:	61da      	str	r2, [r3, #28]
 8007b90:	e01d      	b.n	8007bce <engineUpdate+0x1d2>
			} else {
				if (LMIC.seqnoDn >= 0xFFFFFF80) {
 8007b92:	4b2c      	ldr	r3, [pc, #176]	@ (8007c44 <engineUpdate+0x248>)
 8007b94:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8007b98:	f113 0f81 	cmn.w	r3, #129	@ 0x81
 8007b9c:	d907      	bls.n	8007bae <engineUpdate+0x1b2>
									e_.eui = MAIN::CDEV->getEui(),
									e_.info = LMIC.seqnoDn,
									e_.info2 = 0));
					// Device has to react! NWK will not roll over and just stop sending.
					// Thus, we have N frames to detect a possible lock up.
					reset: os_setCallback(&LMIC.osjob, FUNC_ADDR(runReset));
 8007b9e:	bf00      	nop
 8007ba0:	e000      	b.n	8007ba4 <engineUpdate+0x1a8>
					EV(specCond, ERR, (e_.reason = EV::specCond_t::UPSEQNO_ROLL_OVER,
									e_.eui = MAIN::CDEV->getEui(),
									e_.info2 = LMIC.seqnoUp));
					// Do not run RESET event callback from here!
					// App code might do some stuff after send unaware of RESET.
					goto reset;
 8007ba2:	bf00      	nop
					reset: os_setCallback(&LMIC.osjob, FUNC_ADDR(runReset));
 8007ba4:	492b      	ldr	r1, [pc, #172]	@ (8007c54 <engineUpdate+0x258>)
 8007ba6:	482c      	ldr	r0, [pc, #176]	@ (8007c58 <engineUpdate+0x25c>)
 8007ba8:	f000 fca8 	bl	80084fc <os_setCallback>
					return;
 8007bac:	e0df      	b.n	8007d6e <engineUpdate+0x372>
				if ((LMIC.txCnt == 0 && LMIC.seqnoUp == 0xFFFFFFFF)) {
 8007bae:	4b25      	ldr	r3, [pc, #148]	@ (8007c44 <engineUpdate+0x248>)
 8007bb0:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d105      	bne.n	8007bc4 <engineUpdate+0x1c8>
 8007bb8:	4b22      	ldr	r3, [pc, #136]	@ (8007c44 <engineUpdate+0x248>)
 8007bba:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8007bbe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007bc2:	d0ee      	beq.n	8007ba2 <engineUpdate+0x1a6>
				}
				buildDataFrame();
 8007bc4:	f7ff f9ba 	bl	8006f3c <buildDataFrame>
				LMIC.osjob.func = FUNC_ADDR(updataDone);
 8007bc8:	4b1e      	ldr	r3, [pc, #120]	@ (8007c44 <engineUpdate+0x248>)
 8007bca:	4a24      	ldr	r2, [pc, #144]	@ (8007c5c <engineUpdate+0x260>)
 8007bcc:	61da      	str	r2, [r3, #28]
			}
			LMIC.rps = setCr(updr2rps(txdr), (cr_t) LMIC.errcr);
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7fd f98b 	bl	8004eec <updr2rps>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	461a      	mov	r2, r3
 8007bda:	4b1a      	ldr	r3, [pc, #104]	@ (8007c44 <engineUpdate+0x248>)
 8007bdc:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8007be0:	4619      	mov	r1, r3
 8007be2:	4610      	mov	r0, r2
 8007be4:	f7fd f91c 	bl	8004e20 <setCr>
 8007be8:	4603      	mov	r3, r0
 8007bea:	461a      	mov	r2, r3
 8007bec:	4b15      	ldr	r3, [pc, #84]	@ (8007c44 <engineUpdate+0x248>)
 8007bee:	81da      	strh	r2, [r3, #14]
			LMIC.dndr = txdr; // carry TX datarate (can be != LMIC.datarate) over to txDone/setupRx1
 8007bf0:	4a14      	ldr	r2, [pc, #80]	@ (8007c44 <engineUpdate+0x248>)
 8007bf2:	7bfb      	ldrb	r3, [r7, #15]
 8007bf4:	7453      	strb	r3, [r2, #17]
			LMIC.opmode = (LMIC.opmode & ~(OP_POLL | OP_RNDTX)) | OP_TXRXPEND
 8007bf6:	4b13      	ldr	r3, [pc, #76]	@ (8007c44 <engineUpdate+0x248>)
 8007bf8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007bfc:	b21b      	sxth	r3, r3
					| OP_NEXTCHNL;
 8007bfe:	f423 6319 	bic.w	r3, r3, #2448	@ 0x990
 8007c02:	b21b      	sxth	r3, r3
 8007c04:	f443 6308 	orr.w	r3, r3, #2176	@ 0x880
 8007c08:	b21b      	sxth	r3, r3
 8007c0a:	b29a      	uxth	r2, r3
			LMIC.opmode = (LMIC.opmode & ~(OP_POLL | OP_RNDTX)) | OP_TXRXPEND
 8007c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8007c44 <engineUpdate+0x248>)
 8007c0e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			updateTx(txbeg);
 8007c12:	6938      	ldr	r0, [r7, #16]
 8007c14:	f7fe f88c 	bl	8005d30 <updateTx>
			reportEvent(EV_TXSTART);
 8007c18:	2011      	movs	r0, #17
 8007c1a:	f7fe fa3d 	bl	8006098 <reportEvent>
			os_radio(RADIO_TX);
 8007c1e:	2001      	movs	r0, #1
 8007c20:	f001 fa4e 	bl	80090c0 <os_radio>
			return;
 8007c24:	e0a3      	b.n	8007d6e <engineUpdate+0x372>
		}
		// Cannot yet TX
		if ((LMIC.opmode & OP_TRACK) == 0)
 8007c26:	4b07      	ldr	r3, [pc, #28]	@ (8007c44 <engineUpdate+0x248>)
 8007c28:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007c2c:	f003 0302 	and.w	r3, r3, #2
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f000 808c 	beq.w	8007d4e <engineUpdate+0x352>
			goto txdelay;
		// We don't track the beacon - nothing else to do - so wait for the time to TX
		// Consider RX tasks
		if (txbeg == 0) // zero indicates no TX pending
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d119      	bne.n	8007c70 <engineUpdate+0x274>
			txbeg += 1; // TX delayed by one tick (insignificant amount of time)
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	613b      	str	r3, [r7, #16]
 8007c42:	e015      	b.n	8007c70 <engineUpdate+0x274>
 8007c44:	2000033c 	.word	0x2000033c
 8007c48:	00046500 	.word	0x00046500
 8007c4c:	0002ee00 	.word	0x0002ee00
 8007c50:	08006dfd 	.word	0x08006dfd
 8007c54:	080060b7 	.word	0x080060b7
 8007c58:	20000350 	.word	0x20000350
 8007c5c:	08006f0d 	.word	0x08006f0d
	} else {
		// No TX pending - no scheduled RX
		if ((LMIC.opmode & OP_TRACK) == 0)
 8007c60:	4b44      	ldr	r3, [pc, #272]	@ (8007d74 <engineUpdate+0x378>)
 8007c62:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007c66:	f003 0302 	and.w	r3, r3, #2
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d07e      	beq.n	8007d6c <engineUpdate+0x370>
			return;
	}

	// Are we pingable?
	checkrx: if ((LMIC.opmode & OP_PINGINI) != 0) {
 8007c6e:	bf00      	nop
 8007c70:	4b40      	ldr	r3, [pc, #256]	@ (8007d74 <engineUpdate+0x378>)
 8007c72:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007c76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d041      	beq.n	8007d02 <engineUpdate+0x306>
		// One more RX slot in this beacon period?
		if (rxschedNext(&LMIC.ping, now + RX_RAMPUP)) {
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	3340      	adds	r3, #64	@ 0x40
 8007c82:	4619      	mov	r1, r3
 8007c84:	483c      	ldr	r0, [pc, #240]	@ (8007d78 <engineUpdate+0x37c>)
 8007c86:	f7fd fdeb 	bl	8005860 <rxschedNext>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d038      	beq.n	8007d02 <engineUpdate+0x306>
			if (txbeg != 0 && (txbeg - LMIC.ping.rxtime) < 0)
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d006      	beq.n	8007ca4 <engineUpdate+0x2a8>
 8007c96:	4b37      	ldr	r3, [pc, #220]	@ (8007d74 <engineUpdate+0x378>)
 8007c98:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	db56      	blt.n	8007d52 <engineUpdate+0x356>
				goto txdelay;
			LMIC.rxsyms = LMIC.ping.rxsyms;
 8007ca4:	4b33      	ldr	r3, [pc, #204]	@ (8007d74 <engineUpdate+0x378>)
 8007ca6:	f893 2137 	ldrb.w	r2, [r3, #311]	@ 0x137
 8007caa:	4b32      	ldr	r3, [pc, #200]	@ (8007d74 <engineUpdate+0x378>)
 8007cac:	741a      	strb	r2, [r3, #16]
			LMIC.rxtime = LMIC.ping.rxtime;
 8007cae:	4b31      	ldr	r3, [pc, #196]	@ (8007d74 <engineUpdate+0x378>)
 8007cb0:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8007cb4:	4a2f      	ldr	r2, [pc, #188]	@ (8007d74 <engineUpdate+0x378>)
 8007cb6:	6053      	str	r3, [r2, #4]
			LMIC.freq = LMIC.ping.freq;
 8007cb8:	4b2e      	ldr	r3, [pc, #184]	@ (8007d74 <engineUpdate+0x378>)
 8007cba:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8007cbe:	4a2d      	ldr	r2, [pc, #180]	@ (8007d74 <engineUpdate+0x378>)
 8007cc0:	6093      	str	r3, [r2, #8]
			LMIC.rps = dndr2rps(LMIC.ping.dr);
 8007cc2:	4b2c      	ldr	r3, [pc, #176]	@ (8007d74 <engineUpdate+0x378>)
 8007cc4:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f7fd f921 	bl	8004f10 <dndr2rps>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	4b28      	ldr	r3, [pc, #160]	@ (8007d74 <engineUpdate+0x378>)
 8007cd4:	81da      	strh	r2, [r3, #14]
			LMIC.dataLen = 0;
 8007cd6:	4b27      	ldr	r3, [pc, #156]	@ (8007d74 <engineUpdate+0x378>)
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
			ASSERT(LMIC.rxtime - now+RX_RAMPUP >= 0);
 8007cde:	4b25      	ldr	r3, [pc, #148]	@ (8007d74 <engineUpdate+0x378>)
 8007ce0:	685a      	ldr	r2, [r3, #4]
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	f113 0f40 	cmn.w	r3, #64	@ 0x40
 8007cea:	da01      	bge.n	8007cf0 <engineUpdate+0x2f4>
 8007cec:	f7fc ffc4 	bl	8004c78 <hal_failed>
			os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP,
 8007cf0:	4b20      	ldr	r3, [pc, #128]	@ (8007d74 <engineUpdate+0x378>)
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	3b40      	subs	r3, #64	@ 0x40
 8007cf6:	4a21      	ldr	r2, [pc, #132]	@ (8007d7c <engineUpdate+0x380>)
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	4821      	ldr	r0, [pc, #132]	@ (8007d80 <engineUpdate+0x384>)
 8007cfc:	f000 fc24 	bl	8008548 <os_setTimedCallback>
					FUNC_ADDR(startRxPing));
			return;
 8007d00:	e035      	b.n	8007d6e <engineUpdate+0x372>
		}
		// no - just wait for the beacon
	}

	if (txbeg != 0 && (txbeg - rxtime) < 0)
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d004      	beq.n	8007d12 <engineUpdate+0x316>
 8007d08:	693a      	ldr	r2, [r7, #16]
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	1ad3      	subs	r3, r2, r3
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	db21      	blt.n	8007d56 <engineUpdate+0x35a>
		goto txdelay;

	setBcnRxParams();
 8007d12:	f7fe f8f3 	bl	8005efc <setBcnRxParams>
	LMIC.rxsyms = LMIC.bcnRxsyms;
 8007d16:	4b17      	ldr	r3, [pc, #92]	@ (8007d74 <engineUpdate+0x378>)
 8007d18:	f893 2189 	ldrb.w	r2, [r3, #393]	@ 0x189
 8007d1c:	4b15      	ldr	r3, [pc, #84]	@ (8007d74 <engineUpdate+0x378>)
 8007d1e:	741a      	strb	r2, [r3, #16]
	LMIC.rxtime = LMIC.bcnRxtime;
 8007d20:	4b14      	ldr	r3, [pc, #80]	@ (8007d74 <engineUpdate+0x378>)
 8007d22:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8007d26:	4a13      	ldr	r2, [pc, #76]	@ (8007d74 <engineUpdate+0x378>)
 8007d28:	6053      	str	r3, [r2, #4]
	if (now - rxtime >= 0) {
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	db06      	blt.n	8007d42 <engineUpdate+0x346>
		LMIC.osjob.func = FUNC_ADDR(processBeacon);
 8007d34:	4b0f      	ldr	r3, [pc, #60]	@ (8007d74 <engineUpdate+0x378>)
 8007d36:	4a13      	ldr	r2, [pc, #76]	@ (8007d84 <engineUpdate+0x388>)
 8007d38:	61da      	str	r2, [r3, #28]
		os_radio(RADIO_RX);
 8007d3a:	2002      	movs	r0, #2
 8007d3c:	f001 f9c0 	bl	80090c0 <os_radio>
		return;
 8007d40:	e015      	b.n	8007d6e <engineUpdate+0x372>
	}
	os_setTimedCallback(&LMIC.osjob, rxtime, FUNC_ADDR(startRxBcn));
 8007d42:	4a11      	ldr	r2, [pc, #68]	@ (8007d88 <engineUpdate+0x38c>)
 8007d44:	6979      	ldr	r1, [r7, #20]
 8007d46:	480e      	ldr	r0, [pc, #56]	@ (8007d80 <engineUpdate+0x384>)
 8007d48:	f000 fbfe 	bl	8008548 <os_setTimedCallback>
	return;
 8007d4c:	e00f      	b.n	8007d6e <engineUpdate+0x372>
			goto txdelay;
 8007d4e:	bf00      	nop
 8007d50:	e002      	b.n	8007d58 <engineUpdate+0x35c>
				goto txdelay;
 8007d52:	bf00      	nop
 8007d54:	e000      	b.n	8007d58 <engineUpdate+0x35c>
		goto txdelay;
 8007d56:	bf00      	nop

	txdelay: EV(devCond, INFO, (e_.reason = EV::devCond_t::TX_DELAY,
					e_.eui = MAIN::CDEV->getEui(),
					e_.info = osticks2ms(txbeg-now),
					e_.info2 = LMIC.seqnoUp-1));
	os_setTimedCallback(&LMIC.osjob, txbeg - TX_RAMPUP,
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	3b40      	subs	r3, #64	@ 0x40
 8007d5c:	4a0b      	ldr	r2, [pc, #44]	@ (8007d8c <engineUpdate+0x390>)
 8007d5e:	4619      	mov	r1, r3
 8007d60:	4807      	ldr	r0, [pc, #28]	@ (8007d80 <engineUpdate+0x384>)
 8007d62:	f000 fbf1 	bl	8008548 <os_setTimedCallback>
 8007d66:	e002      	b.n	8007d6e <engineUpdate+0x372>
		return;
 8007d68:	bf00      	nop
 8007d6a:	e000      	b.n	8007d6e <engineUpdate+0x372>
			return;
 8007d6c:	bf00      	nop
			FUNC_ADDR(runEngineUpdate));
}
 8007d6e:	3718      	adds	r7, #24
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	2000033c 	.word	0x2000033c
 8007d78:	20000470 	.word	0x20000470
 8007d7c:	080079d9 	.word	0x080079d9
 8007d80:	20000350 	.word	0x20000350
 8007d84:	0800779d 	.word	0x0800779d
 8007d88:	080079b5 	.word	0x080079b5
 8007d8c:	08006085 	.word	0x08006085

08007d90 <LMIC_reset>:
	os_radio(RADIO_RST);
	LMIC.opmode |= OP_SHUTDOWN;
}

void LMIC_reset(void)
{
 8007d90:	b598      	push	{r3, r4, r7, lr}
 8007d92:	af00      	add	r7, sp, #0
	EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
					e_.eui = MAIN::CDEV->getEui(),
					e_.info = EV_RESET));
	os_radio(RADIO_RST);
 8007d94:	2000      	movs	r0, #0
 8007d96:	f001 f993 	bl	80090c0 <os_radio>
	os_clearCallback(&LMIC.osjob);
 8007d9a:	4821      	ldr	r0, [pc, #132]	@ (8007e20 <LMIC_reset+0x90>)
 8007d9c:	f000 fb90 	bl	80084c0 <os_clearCallback>

	os_clearMem((xref2u1_t )&LMIC, SIZEOFEXPR(LMIC));
 8007da0:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 8007da4:	2100      	movs	r1, #0
 8007da6:	481f      	ldr	r0, [pc, #124]	@ (8007e24 <LMIC_reset+0x94>)
 8007da8:	f007 f922 	bl	800eff0 <memset>
	LMIC.devaddr = 0;
 8007dac:	4b1d      	ldr	r3, [pc, #116]	@ (8007e24 <LMIC_reset+0x94>)
 8007dae:	2200      	movs	r2, #0
 8007db0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
	LMIC.devNonce = os_getRndU2();
 8007db4:	f001 f888 	bl	8008ec8 <radio_rand1>
 8007db8:	4603      	mov	r3, r0
 8007dba:	021b      	lsls	r3, r3, #8
 8007dbc:	b21c      	sxth	r4, r3
 8007dbe:	f001 f883 	bl	8008ec8 <radio_rand1>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	b21b      	sxth	r3, r3
 8007dc6:	4323      	orrs	r3, r4
 8007dc8:	b21b      	sxth	r3, r3
 8007dca:	b29a      	uxth	r2, r3
 8007dcc:	4b15      	ldr	r3, [pc, #84]	@ (8007e24 <LMIC_reset+0x94>)
 8007dce:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
	LMIC.opmode = OP_NONE;
 8007dd2:	4b14      	ldr	r3, [pc, #80]	@ (8007e24 <LMIC_reset+0x94>)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	LMIC.errcr = CR_4_5;
 8007dda:	4b12      	ldr	r3, [pc, #72]	@ (8007e24 <LMIC_reset+0x94>)
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
	LMIC.adrEnabled = FCT_ADREN;
 8007de2:	4b10      	ldr	r3, [pc, #64]	@ (8007e24 <LMIC_reset+0x94>)
 8007de4:	2280      	movs	r2, #128	@ 0x80
 8007de6:	f883 2127 	strb.w	r2, [r3, #295]	@ 0x127
	LMIC.dn2Dr = DR_DNW2;   // we need this for 2nd DN window of join accept
 8007dea:	4b0e      	ldr	r3, [pc, #56]	@ (8007e24 <LMIC_reset+0x94>)
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
	LMIC.dn2Freq = FREQ_DNW2; // ditto
 8007df2:	4b0c      	ldr	r3, [pc, #48]	@ (8007e24 <LMIC_reset+0x94>)
 8007df4:	4a0c      	ldr	r2, [pc, #48]	@ (8007e28 <LMIC_reset+0x98>)
 8007df6:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
	LMIC.rxDelay = DELAY_DNW1;
 8007dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8007e24 <LMIC_reset+0x94>)
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
	LMIC.ping.freq = FREQ_PING; // defaults for ping
 8007e02:	4b08      	ldr	r3, [pc, #32]	@ (8007e24 <LMIC_reset+0x94>)
 8007e04:	4a08      	ldr	r2, [pc, #32]	@ (8007e28 <LMIC_reset+0x98>)
 8007e06:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
	LMIC.ping.dr = DR_PING;   // ditto
 8007e0a:	4b06      	ldr	r3, [pc, #24]	@ (8007e24 <LMIC_reset+0x94>)
 8007e0c:	2203      	movs	r2, #3
 8007e0e:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
	LMIC.ping.intvExp = 0xFF;
 8007e12:	4b04      	ldr	r3, [pc, #16]	@ (8007e24 <LMIC_reset+0x94>)
 8007e14:	22ff      	movs	r2, #255	@ 0xff
 8007e16:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
#if defined(CFG_us915)
    initDefaultChannels();
#endif
	DO_DEVDB(LMIC.devaddr, devaddr);DO_DEVDB(LMIC.devNonce, devNonce);DO_DEVDB(LMIC.dn2Dr, dn2Dr);DO_DEVDB(LMIC.dn2Freq, dn2Freq);DO_DEVDB(LMIC.ping.freq, pingFreq);DO_DEVDB(LMIC.ping.dr, pingDr);DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
}
 8007e1a:	bf00      	nop
 8007e1c:	bd98      	pop	{r3, r4, r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	20000350 	.word	0x20000350
 8007e24:	2000033c 	.word	0x2000033c
 8007e28:	33d3e608 	.word	0x33d3e608

08007e2c <LMIC_init>:

void LMIC_init(void)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	af00      	add	r7, sp, #0
	LMIC.opmode = OP_SHUTDOWN;
 8007e30:	4b04      	ldr	r3, [pc, #16]	@ (8007e44 <LMIC_init+0x18>)
 8007e32:	2240      	movs	r2, #64	@ 0x40
 8007e34:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
}
 8007e38:	bf00      	nop
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	2000033c 	.word	0x2000033c

08007e48 <LMIC_setTxData>:
	os_radio(RADIO_RST);
	engineUpdate();
}

void LMIC_setTxData(void)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	af00      	add	r7, sp, #0
	LMIC.opmode |= OP_TXDATA;
 8007e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8007e7c <LMIC_setTxData+0x34>)
 8007e4e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007e52:	f043 0308 	orr.w	r3, r3, #8
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	4b08      	ldr	r3, [pc, #32]	@ (8007e7c <LMIC_setTxData+0x34>)
 8007e5a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	if ((LMIC.opmode & OP_JOINING) == 0)
 8007e5e:	4b07      	ldr	r3, [pc, #28]	@ (8007e7c <LMIC_setTxData+0x34>)
 8007e60:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007e64:	f003 0304 	and.w	r3, r3, #4
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d103      	bne.n	8007e74 <LMIC_setTxData+0x2c>
		LMIC.txCnt = 0;             // cancel any ongoing TX/RX retries
 8007e6c:	4b03      	ldr	r3, [pc, #12]	@ (8007e7c <LMIC_setTxData+0x34>)
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	engineUpdate();
 8007e74:	f7ff fdc2 	bl	80079fc <engineUpdate>
}
 8007e78:	bf00      	nop
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	2000033c 	.word	0x2000033c

08007e80 <LMIC_setTxData2>:

//
int LMIC_setTxData2(u1_t port, xref2u1_t data, u1_t dlen, u1_t confirmed)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6039      	str	r1, [r7, #0]
 8007e88:	4611      	mov	r1, r2
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	71fb      	strb	r3, [r7, #7]
 8007e90:	460b      	mov	r3, r1
 8007e92:	71bb      	strb	r3, [r7, #6]
 8007e94:	4613      	mov	r3, r2
 8007e96:	717b      	strb	r3, [r7, #5]
	if (dlen > SIZEOFEXPR(LMIC.pendTxData))
 8007e98:	79bb      	ldrb	r3, [r7, #6]
 8007e9a:	2b34      	cmp	r3, #52	@ 0x34
 8007e9c:	d902      	bls.n	8007ea4 <LMIC_setTxData2+0x24>
		return -2;
 8007e9e:	f06f 0301 	mvn.w	r3, #1
 8007ea2:	e017      	b.n	8007ed4 <LMIC_setTxData2+0x54>
	if (data != (xref2u1_t) 0)
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d005      	beq.n	8007eb6 <LMIC_setTxData2+0x36>
		os_copyMem(LMIC.pendTxData, data, dlen);
 8007eaa:	79bb      	ldrb	r3, [r7, #6]
 8007eac:	461a      	mov	r2, r3
 8007eae:	6839      	ldr	r1, [r7, #0]
 8007eb0:	480a      	ldr	r0, [pc, #40]	@ (8007edc <LMIC_setTxData2+0x5c>)
 8007eb2:	f007 f8ff 	bl	800f0b4 <memcpy>
	LMIC.pendTxConf = confirmed;
 8007eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8007ee0 <LMIC_setTxData2+0x60>)
 8007eb8:	797b      	ldrb	r3, [r7, #5]
 8007eba:	f882 30bb 	strb.w	r3, [r2, #187]	@ 0xbb
	LMIC.pendTxPort = port;
 8007ebe:	4a08      	ldr	r2, [pc, #32]	@ (8007ee0 <LMIC_setTxData2+0x60>)
 8007ec0:	79fb      	ldrb	r3, [r7, #7]
 8007ec2:	f882 30ba 	strb.w	r3, [r2, #186]	@ 0xba
	LMIC.pendTxLen = dlen;
 8007ec6:	4a06      	ldr	r2, [pc, #24]	@ (8007ee0 <LMIC_setTxData2+0x60>)
 8007ec8:	79bb      	ldrb	r3, [r7, #6]
 8007eca:	f882 30bc 	strb.w	r3, [r2, #188]	@ 0xbc
	LMIC_setTxData();
 8007ece:	f7ff ffbb 	bl	8007e48 <LMIC_setTxData>
	return 0;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3708      	adds	r7, #8
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	200003f9 	.word	0x200003f9
 8007ee0:	2000033c 	.word	0x2000033c

08007ee4 <os_getArtEui>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// provide application router ID (8 bytes, LSBF)
void os_getArtEui(u1_t *buf)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
	memcpy(buf, APPEUI, 8);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4906      	ldr	r1, [pc, #24]	@ (8007f08 <os_getArtEui+0x24>)
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	cb03      	ldmia	r3!, {r0, r1}
 8007ef6:	6010      	str	r0, [r2, #0]
 8007ef8:	6051      	str	r1, [r2, #4]
}
 8007efa:	bf00      	nop
 8007efc:	370c      	adds	r7, #12
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	08012d80 	.word	0x08012d80

08007f0c <os_getDevEui>:

// provide device ID (8 bytes, LSBF)
void os_getDevEui(u1_t *buf)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
	memcpy(buf, DEVEUI, 8);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4906      	ldr	r1, [pc, #24]	@ (8007f30 <os_getDevEui+0x24>)
 8007f18:	461a      	mov	r2, r3
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	cb03      	ldmia	r3!, {r0, r1}
 8007f1e:	6010      	str	r0, [r2, #0]
 8007f20:	6051      	str	r1, [r2, #4]
}
 8007f22:	bf00      	nop
 8007f24:	370c      	adds	r7, #12
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	08012d88 	.word	0x08012d88

08007f34 <os_getDevKey>:

// provide device key (16 bytes)
void os_getDevKey(u1_t *buf)
{
 8007f34:	b4b0      	push	{r4, r5, r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
	memcpy(buf, DEVKEY, 16);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a06      	ldr	r2, [pc, #24]	@ (8007f58 <os_getDevKey+0x24>)
 8007f40:	461c      	mov	r4, r3
 8007f42:	4615      	mov	r5, r2
 8007f44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f46:	6020      	str	r0, [r4, #0]
 8007f48:	6061      	str	r1, [r4, #4]
 8007f4a:	60a2      	str	r2, [r4, #8]
 8007f4c:	60e3      	str	r3, [r4, #12]
}
 8007f4e:	bf00      	nop
 8007f50:	370c      	adds	r7, #12
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bcb0      	pop	{r4, r5, r7}
 8007f56:	4770      	bx	lr
 8007f58:	08012d90 	.word	0x08012d90

08007f5c <initsensor>:

void initsensor()
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	af00      	add	r7, sp, #0
	// Here you init your sensors
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8007f60:	217f      	movs	r1, #127	@ 0x7f
 8007f62:	4802      	ldr	r0, [pc, #8]	@ (8007f6c <initsensor+0x10>)
 8007f64:	f002 ff6a 	bl	800ae3c <HAL_ADCEx_Calibration_Start>
}
 8007f68:	bf00      	nop
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	200000e0 	.word	0x200000e0

08007f70 <initsensor_bme>:

void initsensor_bme()
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	af00      	add	r7, sp, #0
	// Here you init your sensors
	bme68x_start(&data, &hi2c1);
 8007f74:	4902      	ldr	r1, [pc, #8]	@ (8007f80 <initsensor_bme+0x10>)
 8007f76:	4803      	ldr	r0, [pc, #12]	@ (8007f84 <initsensor_bme+0x14>)
 8007f78:	f7fb feac 	bl	8003cd4 <bme68x_start>
}
 8007f7c:	bf00      	nop
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	200002e8 	.word	0x200002e8
 8007f84:	200004f0 	.word	0x200004f0

08007f88 <initfunc>:

void initfunc(osjob_t *j)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
	// initialize sensor hardware
	initsensor();
 8007f90:	f7ff ffe4 	bl	8007f5c <initsensor>
	initsensor_bme();
 8007f94:	f7ff ffec 	bl	8007f70 <initsensor_bme>
	// reset MAC state
	LMIC_reset();
 8007f98:	f7ff fefa 	bl	8007d90 <LMIC_reset>
	// start joining
	LMIC_startJoining();
 8007f9c:	f7ff faa2 	bl	80074e4 <LMIC_startJoining>
	// init done - onEvent() callback will be invoked...
}
 8007fa0:	bf00      	nop
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <readsensor_bme>:
	u2_t value = temp; /// read from everything ...make your own sensor
	return value;
}

void readsensor_bme()
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	af00      	add	r7, sp, #0
	if (bme68x_single_measure(&data) == 0) {
 8007fac:	4807      	ldr	r0, [pc, #28]	@ (8007fcc <readsensor_bme+0x24>)
 8007fae:	f7fb fee1 	bl	8003d74 <bme68x_single_measure>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d106      	bne.n	8007fc6 <readsensor_bme+0x1e>
		// Measurement is successful, so continue with IAQ
		data.iaq_score = bme68x_iaq(); // Calculate IAQ
 8007fb8:	f7fc f95c 	bl	8004274 <bme68x_iaq>
 8007fbc:	eef0 7a40 	vmov.f32	s15, s0
 8007fc0:	4b02      	ldr	r3, [pc, #8]	@ (8007fcc <readsensor_bme+0x24>)
 8007fc2:	edc3 7a02 	vstr	s15, [r3, #8]
	} /// read from everything ...make your own sensor
}
 8007fc6:	bf00      	nop
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	200004f0 	.word	0x200004f0

08007fd0 <reportfunc_bme>:
}

static osjob_t reportjob_bme;
// report bme sensor value every minute
static void reportfunc_bme(osjob_t *j)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
	// read sensor
	readsensor_bme();
 8007fd8:	f7ff ffe6 	bl	8007fa8 <readsensor_bme>

	debug_valfloat("T = ", data.temperature, 7);
 8007fdc:	4b2b      	ldr	r3, [pc, #172]	@ (800808c <reportfunc_bme+0xbc>)
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7f8 faa9 	bl	8000538 <__aeabi_f2d>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	460b      	mov	r3, r1
 8007fea:	2107      	movs	r1, #7
 8007fec:	ec43 2b10 	vmov	d0, r2, r3
 8007ff0:	4827      	ldr	r0, [pc, #156]	@ (8008090 <reportfunc_bme+0xc0>)
 8007ff2:	f7fc fb6b 	bl	80046cc <debug_valfloat>
	debug_valdec("IAQ = ", data.iaq_score);
 8007ff6:	4b25      	ldr	r3, [pc, #148]	@ (800808c <reportfunc_bme+0xbc>)
 8007ff8:	edd3 7a02 	vldr	s15, [r3, #8]
 8007ffc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008000:	ee17 1a90 	vmov	r1, s15
 8008004:	4823      	ldr	r0, [pc, #140]	@ (8008094 <reportfunc_bme+0xc4>)
 8008006:	f7fc fb8f 	bl	8004728 <debug_valdec>
	debug_valfloat("h = ", data.humidity, 7);
 800800a:	4b20      	ldr	r3, [pc, #128]	@ (800808c <reportfunc_bme+0xbc>)
 800800c:	695b      	ldr	r3, [r3, #20]
 800800e:	4618      	mov	r0, r3
 8008010:	f7f8 fa92 	bl	8000538 <__aeabi_f2d>
 8008014:	4602      	mov	r2, r0
 8008016:	460b      	mov	r3, r1
 8008018:	2107      	movs	r1, #7
 800801a:	ec43 2b10 	vmov	d0, r2, r3
 800801e:	481e      	ldr	r0, [pc, #120]	@ (8008098 <reportfunc_bme+0xc8>)
 8008020:	f7fc fb54 	bl	80046cc <debug_valfloat>
	// prepare and schedule data for transmission
	cayenne_lpp_reset(&lpp_desc);
 8008024:	481d      	ldr	r0, [pc, #116]	@ (800809c <reportfunc_bme+0xcc>)
 8008026:	f7fc f96b 	bl	8004300 <cayenne_lpp_reset>
	cayenne_lpp_add_temperature(&lpp_desc, 0, data.temperature);
 800802a:	4b18      	ldr	r3, [pc, #96]	@ (800808c <reportfunc_bme+0xbc>)
 800802c:	edd3 7a03 	vldr	s15, [r3, #12]
 8008030:	eeb0 0a67 	vmov.f32	s0, s15
 8008034:	2100      	movs	r1, #0
 8008036:	4819      	ldr	r0, [pc, #100]	@ (800809c <reportfunc_bme+0xcc>)
 8008038:	f7fc f9d4 	bl	80043e4 <cayenne_lpp_add_temperature>
	cayenne_lpp_add_analog_output(&lpp_desc, 0, data.iaq_score);
 800803c:	4b13      	ldr	r3, [pc, #76]	@ (800808c <reportfunc_bme+0xbc>)
 800803e:	edd3 7a02 	vldr	s15, [r3, #8]
 8008042:	eeb0 0a67 	vmov.f32	s0, s15
 8008046:	2100      	movs	r1, #0
 8008048:	4814      	ldr	r0, [pc, #80]	@ (800809c <reportfunc_bme+0xcc>)
 800804a:	f7fc f96b 	bl	8004324 <cayenne_lpp_add_analog_output>
	cayenne_lpp_add_relative_humidity(&lpp_desc, 0, data.humidity);
 800804e:	4b0f      	ldr	r3, [pc, #60]	@ (800808c <reportfunc_bme+0xbc>)
 8008050:	edd3 7a05 	vldr	s15, [r3, #20]
 8008054:	eeb0 0a67 	vmov.f32	s0, s15
 8008058:	2100      	movs	r1, #0
 800805a:	4810      	ldr	r0, [pc, #64]	@ (800809c <reportfunc_bme+0xcc>)
 800805c:	f7fc fa20 	bl	80044a0 <cayenne_lpp_add_relative_humidity>
	// La fonction LMIC_setTxData2 envoie
	LMIC_setTxData2(1, &lpp_desc, 4 * 3, 0);
 8008060:	2300      	movs	r3, #0
 8008062:	220c      	movs	r2, #12
 8008064:	490d      	ldr	r1, [pc, #52]	@ (800809c <reportfunc_bme+0xcc>)
 8008066:	2001      	movs	r0, #1
 8008068:	f7ff ff0a 	bl	8007e80 <LMIC_setTxData2>
	// la trame Lora : lpp_desc
	// (port 1, 2 bytes, unconfirmed)
	// reschedule job in 15 seconds
	os_setTimedCallback(j, os_getTime() + sec2osticks(15), reportfunc_bme);
 800806c:	f000 fa02 	bl	8008474 <os_getTime>
 8008070:	4603      	mov	r3, r0
 8008072:	f503 23ea 	add.w	r3, r3, #479232	@ 0x75000
 8008076:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800807a:	4a09      	ldr	r2, [pc, #36]	@ (80080a0 <reportfunc_bme+0xd0>)
 800807c:	4619      	mov	r1, r3
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 fa62 	bl	8008548 <os_setTimedCallback>
}
 8008084:	bf00      	nop
 8008086:	3708      	adds	r7, #8
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	200004f0 	.word	0x200004f0
 8008090:	080119dc 	.word	0x080119dc
 8008094:	080119e4 	.word	0x080119e4
 8008098:	080119ec 	.word	0x080119ec
 800809c:	2000050c 	.word	0x2000050c
 80080a0:	08007fd1 	.word	0x08007fd1

080080a4 <blinkfunc>:
}

static osjob_t blinkjob;
static u1_t ledstate = 0;
static void blinkfunc(osjob_t *j)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
	// toggle LED
	ledstate = !ledstate;
 80080ac:	4b0e      	ldr	r3, [pc, #56]	@ (80080e8 <blinkfunc+0x44>)
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	bf0c      	ite	eq
 80080b4:	2301      	moveq	r3, #1
 80080b6:	2300      	movne	r3, #0
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	461a      	mov	r2, r3
 80080bc:	4b0a      	ldr	r3, [pc, #40]	@ (80080e8 <blinkfunc+0x44>)
 80080be:	701a      	strb	r2, [r3, #0]
	debug_led(ledstate);
 80080c0:	4b09      	ldr	r3, [pc, #36]	@ (80080e8 <blinkfunc+0x44>)
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7fc fa41 	bl	800454c <debug_led>
	// reschedule blink job
	os_setTimedCallback(j, os_getTime() + ms2osticks(100), blinkfunc);
 80080ca:	f000 f9d3 	bl	8008474 <os_getTime>
 80080ce:	4603      	mov	r3, r0
 80080d0:	f503 6348 	add.w	r3, r3, #3200	@ 0xc80
 80080d4:	4a05      	ldr	r2, [pc, #20]	@ (80080ec <blinkfunc+0x48>)
 80080d6:	4619      	mov	r1, r3
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 fa35 	bl	8008548 <os_setTimedCallback>
}
 80080de:	bf00      	nop
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	20000550 	.word	0x20000550
 80080ec:	080080a5 	.word	0x080080a5

080080f0 <onEvent>:

//////////////////////////////////////////////////
// LMIC EVENT CALLBACK
//////////////////////////////////////////////////
void onEvent(ev_t ev)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	4603      	mov	r3, r0
 80080f8:	71fb      	strb	r3, [r7, #7]
	debug_event(ev);
 80080fa:	79fb      	ldrb	r3, [r7, #7]
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7fc fba1 	bl	8004844 <debug_event>
	switch (ev) {
 8008102:	79fb      	ldrb	r3, [r7, #7]
 8008104:	3b01      	subs	r3, #1
 8008106:	2b0e      	cmp	r3, #14
 8008108:	f200 8093 	bhi.w	8008232 <onEvent+0x142>
 800810c:	a201      	add	r2, pc, #4	@ (adr r2, 8008114 <onEvent+0x24>)
 800810e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008112:	bf00      	nop
 8008114:	0800817b 	.word	0x0800817b
 8008118:	08008183 	.word	0x08008183
 800811c:	0800818b 	.word	0x0800818b
 8008120:	08008193 	.word	0x08008193
 8008124:	08008151 	.word	0x08008151
 8008128:	0800815f 	.word	0x0800815f
 800812c:	0800819b 	.word	0x0800819b
 8008130:	08008173 	.word	0x08008173
 8008134:	080081a3 	.word	0x080081a3
 8008138:	080081ab 	.word	0x080081ab
 800813c:	0800820b 	.word	0x0800820b
 8008140:	08008213 	.word	0x08008213
 8008144:	0800821b 	.word	0x0800821b
 8008148:	08008223 	.word	0x08008223
 800814c:	0800822b 	.word	0x0800822b
	// network joined, session established
	case EV_JOINING:
		debug_str("try joining\r\n");
 8008150:	483c      	ldr	r0, [pc, #240]	@ (8008244 <onEvent+0x154>)
 8008152:	f7fc fa83 	bl	800465c <debug_str>
		blinkfunc(&blinkjob);
 8008156:	483c      	ldr	r0, [pc, #240]	@ (8008248 <onEvent+0x158>)
 8008158:	f7ff ffa4 	bl	80080a4 <blinkfunc>
		break;
 800815c:	e06e      	b.n	800823c <onEvent+0x14c>
	case EV_JOINED:
		// kick-off periodic sensor job
		os_clearCallback(&blinkjob);
 800815e:	483a      	ldr	r0, [pc, #232]	@ (8008248 <onEvent+0x158>)
 8008160:	f000 f9ae 	bl	80084c0 <os_clearCallback>
		debug_led(1);
 8008164:	2001      	movs	r0, #1
 8008166:	f7fc f9f1 	bl	800454c <debug_led>
		// reportfunc(&reportjob);
		reportfunc_bme(&reportjob_bme);
 800816a:	4838      	ldr	r0, [pc, #224]	@ (800824c <onEvent+0x15c>)
 800816c:	f7ff ff30 	bl	8007fd0 <reportfunc_bme>
		break;
 8008170:	e064      	b.n	800823c <onEvent+0x14c>
	case EV_JOIN_FAILED:
		debug_str("join failed\r\n");
 8008172:	4837      	ldr	r0, [pc, #220]	@ (8008250 <onEvent+0x160>)
 8008174:	f7fc fa72 	bl	800465c <debug_str>
		break;
 8008178:	e060      	b.n	800823c <onEvent+0x14c>
	case EV_SCAN_TIMEOUT:
		debug_str("EV_SCAN_TIMEOUT\r\n");
 800817a:	4836      	ldr	r0, [pc, #216]	@ (8008254 <onEvent+0x164>)
 800817c:	f7fc fa6e 	bl	800465c <debug_str>
		break;
 8008180:	e05c      	b.n	800823c <onEvent+0x14c>
	case EV_BEACON_FOUND:
		debug_str("EV_BEACON_FOUND\r\n");
 8008182:	4835      	ldr	r0, [pc, #212]	@ (8008258 <onEvent+0x168>)
 8008184:	f7fc fa6a 	bl	800465c <debug_str>
		break;
 8008188:	e058      	b.n	800823c <onEvent+0x14c>
	case EV_BEACON_MISSED:
		debug_str("EV_BEACON_MISSED\r\n");
 800818a:	4834      	ldr	r0, [pc, #208]	@ (800825c <onEvent+0x16c>)
 800818c:	f7fc fa66 	bl	800465c <debug_str>
		break;
 8008190:	e054      	b.n	800823c <onEvent+0x14c>
	case EV_BEACON_TRACKED:
		debug_str("EV_BEACON_TRACKED\r\n");
 8008192:	4833      	ldr	r0, [pc, #204]	@ (8008260 <onEvent+0x170>)
 8008194:	f7fc fa62 	bl	800465c <debug_str>
		break;
 8008198:	e050      	b.n	800823c <onEvent+0x14c>
	case EV_RFU1:
		debug_str("EV_RFU1\r\n");
 800819a:	4832      	ldr	r0, [pc, #200]	@ (8008264 <onEvent+0x174>)
 800819c:	f7fc fa5e 	bl	800465c <debug_str>
		break;
 80081a0:	e04c      	b.n	800823c <onEvent+0x14c>
	case EV_REJOIN_FAILED:
		debug_str("EV_REJOIN_FAILED\r\n");
 80081a2:	4831      	ldr	r0, [pc, #196]	@ (8008268 <onEvent+0x178>)
 80081a4:	f7fc fa5a 	bl	800465c <debug_str>
		break;
 80081a8:	e048      	b.n	800823c <onEvent+0x14c>
	case EV_TXCOMPLETE:
		debug_str("EV_TXCOMPLETE (includes waiting for RX windows)\r\n");
 80081aa:	4830      	ldr	r0, [pc, #192]	@ (800826c <onEvent+0x17c>)
 80081ac:	f7fc fa56 	bl	800465c <debug_str>
		if (LMIC.txrxFlags & TXRX_ACK)
 80081b0:	4b2f      	ldr	r3, [pc, #188]	@ (8008270 <onEvent+0x180>)
 80081b2:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 80081b6:	b25b      	sxtb	r3, r3
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	da02      	bge.n	80081c2 <onEvent+0xd2>
			debug_str("Received ack\r\n");
 80081bc:	482d      	ldr	r0, [pc, #180]	@ (8008274 <onEvent+0x184>)
 80081be:	f7fc fa4d 	bl	800465c <debug_str>
		if (LMIC.dataLen) {
 80081c2:	4b2b      	ldr	r3, [pc, #172]	@ (8008270 <onEvent+0x180>)
 80081c4:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d036      	beq.n	800823a <onEvent+0x14a>
			debug_valdec("Received bytes of payload\r\n:", LMIC.dataLen);
 80081cc:	4b28      	ldr	r3, [pc, #160]	@ (8008270 <onEvent+0x180>)
 80081ce:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80081d2:	4619      	mov	r1, r3
 80081d4:	4828      	ldr	r0, [pc, #160]	@ (8008278 <onEvent+0x188>)
 80081d6:	f7fc faa7 	bl	8004728 <debug_valdec>
			debug_val("Data = :", LMIC.frame[LMIC.dataBeg]);
 80081da:	4b25      	ldr	r3, [pc, #148]	@ (8008270 <onEvent+0x180>)
 80081dc:	f893 3146 	ldrb.w	r3, [r3, #326]	@ 0x146
 80081e0:	461a      	mov	r2, r3
 80081e2:	4b23      	ldr	r3, [pc, #140]	@ (8008270 <onEvent+0x180>)
 80081e4:	4413      	add	r3, r2
 80081e6:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 80081ea:	4619      	mov	r1, r3
 80081ec:	4823      	ldr	r0, [pc, #140]	@ (800827c <onEvent+0x18c>)
 80081ee:	f7fc fa86 	bl	80046fe <debug_val>
			debug_led(LMIC.frame[LMIC.dataBeg]);
 80081f2:	4b1f      	ldr	r3, [pc, #124]	@ (8008270 <onEvent+0x180>)
 80081f4:	f893 3146 	ldrb.w	r3, [r3, #326]	@ 0x146
 80081f8:	461a      	mov	r2, r3
 80081fa:	4b1d      	ldr	r3, [pc, #116]	@ (8008270 <onEvent+0x180>)
 80081fc:	4413      	add	r3, r2
 80081fe:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8008202:	4618      	mov	r0, r3
 8008204:	f7fc f9a2 	bl	800454c <debug_led>
		}
		break;
 8008208:	e017      	b.n	800823a <onEvent+0x14a>
	case EV_LOST_TSYNC:
		debug_str("EV_LOST_TSYNC\r\n");
 800820a:	481d      	ldr	r0, [pc, #116]	@ (8008280 <onEvent+0x190>)
 800820c:	f7fc fa26 	bl	800465c <debug_str>
		break;
 8008210:	e014      	b.n	800823c <onEvent+0x14c>
	case EV_RESET:
		debug_str("EV_RESET\r\n");
 8008212:	481c      	ldr	r0, [pc, #112]	@ (8008284 <onEvent+0x194>)
 8008214:	f7fc fa22 	bl	800465c <debug_str>
		break;
 8008218:	e010      	b.n	800823c <onEvent+0x14c>
	case EV_RXCOMPLETE:
		// data received in ping slot
		debug_str("EV_RXCOMPLETE\r\n");
 800821a:	481b      	ldr	r0, [pc, #108]	@ (8008288 <onEvent+0x198>)
 800821c:	f7fc fa1e 	bl	800465c <debug_str>
		break;
 8008220:	e00c      	b.n	800823c <onEvent+0x14c>
	case EV_LINK_DEAD:
		debug_str("EV_LINK_DEAD\r\n");
 8008222:	481a      	ldr	r0, [pc, #104]	@ (800828c <onEvent+0x19c>)
 8008224:	f7fc fa1a 	bl	800465c <debug_str>
		break;
 8008228:	e008      	b.n	800823c <onEvent+0x14c>
	case EV_LINK_ALIVE:
		debug_str("EV_LINK_ALIVE\r\n");
 800822a:	4819      	ldr	r0, [pc, #100]	@ (8008290 <onEvent+0x1a0>)
 800822c:	f7fc fa16 	bl	800465c <debug_str>
		break;
 8008230:	e004      	b.n	800823c <onEvent+0x14c>
	default:
		debug_str("Unknown event\r\n");
 8008232:	4818      	ldr	r0, [pc, #96]	@ (8008294 <onEvent+0x1a4>)
 8008234:	f7fc fa12 	bl	800465c <debug_str>
		break;
 8008238:	e000      	b.n	800823c <onEvent+0x14c>
		break;
 800823a:	bf00      	nop
	}
}
 800823c:	bf00      	nop
 800823e:	3708      	adds	r7, #8
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	08011a0c 	.word	0x08011a0c
 8008248:	20000544 	.word	0x20000544
 800824c:	20000538 	.word	0x20000538
 8008250:	08011a1c 	.word	0x08011a1c
 8008254:	08011a2c 	.word	0x08011a2c
 8008258:	08011a40 	.word	0x08011a40
 800825c:	08011a54 	.word	0x08011a54
 8008260:	08011a68 	.word	0x08011a68
 8008264:	08011a7c 	.word	0x08011a7c
 8008268:	08011a88 	.word	0x08011a88
 800826c:	08011a9c 	.word	0x08011a9c
 8008270:	2000033c 	.word	0x2000033c
 8008274:	08011ad0 	.word	0x08011ad0
 8008278:	08011ae0 	.word	0x08011ae0
 800827c:	08011b00 	.word	0x08011b00
 8008280:	08011b0c 	.word	0x08011b0c
 8008284:	08011b1c 	.word	0x08011b1c
 8008288:	08011b28 	.word	0x08011b28
 800828c:	08011b38 	.word	0x08011b38
 8008290:	08011b48 	.word	0x08011b48
 8008294:	08011b58 	.word	0x08011b58

08008298 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800829e:	f001 fa74 	bl	800978a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80082a2:	f000 f83b 	bl	800831c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80082a6:	f7fc faeb 	bl	8004880 <MX_GPIO_Init>
	MX_SPI3_Init();
 80082aa:	f000 ff35 	bl	8009118 <MX_SPI3_Init>
	MX_TIM7_Init();
 80082ae:	f001 f941 	bl	8009534 <MX_TIM7_Init>
	MX_ADC1_Init();
 80082b2:	f7f8 fe73 	bl	8000f9c <MX_ADC1_Init>
	MX_TIM6_Init();
 80082b6:	f001 f905 	bl	80094c4 <MX_TIM6_Init>
	MX_I2C1_Init();
 80082ba:	f7fc fce5 	bl	8004c88 <MX_I2C1_Init>
	MX_USART2_UART_Init();
 80082be:	f001 f9b3 	bl	8009628 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim6);
 80082c2:	4812      	ldr	r0, [pc, #72]	@ (800830c <main+0x74>)
 80082c4:	f005 fe0a 	bl	800dedc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);   // <----------- change to your setup
 80082c8:	4811      	ldr	r0, [pc, #68]	@ (8008310 <main+0x78>)
 80082ca:	f005 fe07 	bl	800dedc <HAL_TIM_Base_Start_IT>
	__HAL_SPI_ENABLE(&hspi3);        // <----------- change to your setup
 80082ce:	4b11      	ldr	r3, [pc, #68]	@ (8008314 <main+0x7c>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	4b0f      	ldr	r3, [pc, #60]	@ (8008314 <main+0x7c>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80082dc:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(Alim_temp_GPIO_Port, Alim_temp_Pin, GPIO_PIN_SET);
 80082de:	2201      	movs	r2, #1
 80082e0:	2180      	movs	r1, #128	@ 0x80
 80082e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80082e6:	f003 f8b7 	bl	800b458 <HAL_GPIO_WritePin>
	osjob_t initjob;
	// initialize runtime env
	os_init();
 80082ea:	f000 f8b1 	bl	8008450 <os_init>
	// initialize debug library
	debug_init();
 80082ee:	f7fc f923 	bl	8004538 <debug_init>
	// setup initial job
	os_setCallback(&initjob, initfunc);
 80082f2:	1d3b      	adds	r3, r7, #4
 80082f4:	4908      	ldr	r1, [pc, #32]	@ (8008318 <main+0x80>)
 80082f6:	4618      	mov	r0, r3
 80082f8:	f000 f900 	bl	80084fc <os_setCallback>
	// execute scheduled jobs and events
	os_runloop();
 80082fc:	f000 f95a 	bl	80085b4 <os_runloop>
	// (not reached)
	return 0;
 8008300:	2300      	movs	r3, #0

		}
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
}
 8008302:	4618      	mov	r0, r3
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	200005d4 	.word	0x200005d4
 8008310:	20000620 	.word	0x20000620
 8008314:	2000056c 	.word	0x2000056c
 8008318:	08007f89 	.word	0x08007f89

0800831c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b096      	sub	sp, #88	@ 0x58
 8008320:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8008322:	f107 0314 	add.w	r3, r7, #20
 8008326:	2244      	movs	r2, #68	@ 0x44
 8008328:	2100      	movs	r1, #0
 800832a:	4618      	mov	r0, r3
 800832c:	f006 fe60 	bl	800eff0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8008330:	463b      	mov	r3, r7
 8008332:	2200      	movs	r2, #0
 8008334:	601a      	str	r2, [r3, #0]
 8008336:	605a      	str	r2, [r3, #4]
 8008338:	609a      	str	r2, [r3, #8]
 800833a:	60da      	str	r2, [r3, #12]
 800833c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 800833e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008342:	f003 ffd7 	bl	800c2f4 <HAL_PWREx_ControlVoltageScaling>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d001      	beq.n	8008350 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 800834c:	f000 f87a 	bl	8008444 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008350:	2302      	movs	r3, #2
 8008352:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008354:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008358:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800835a:	2310      	movs	r3, #16
 800835c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800835e:	2302      	movs	r3, #2
 8008360:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008362:	2302      	movs	r3, #2
 8008364:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8008366:	2301      	movs	r3, #1
 8008368:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 800836a:	230a      	movs	r3, #10
 800836c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800836e:	2307      	movs	r3, #7
 8008370:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8008372:	2302      	movs	r3, #2
 8008374:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8008376:	2302      	movs	r3, #2
 8008378:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800837a:	f107 0314 	add.w	r3, r7, #20
 800837e:	4618      	mov	r0, r3
 8008380:	f004 f80e 	bl	800c3a0 <HAL_RCC_OscConfig>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d001      	beq.n	800838e <SystemClock_Config+0x72>
		Error_Handler();
 800838a:	f000 f85b 	bl	8008444 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800838e:	230f      	movs	r3, #15
 8008390:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008392:	2303      	movs	r3, #3
 8008394:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008396:	2300      	movs	r3, #0
 8008398:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800839a:	2300      	movs	r3, #0
 800839c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800839e:	2300      	movs	r3, #0
 80083a0:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80083a2:	463b      	mov	r3, r7
 80083a4:	2104      	movs	r1, #4
 80083a6:	4618      	mov	r0, r3
 80083a8:	f004 fc0e 	bl	800cbc8 <HAL_RCC_ClockConfig>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d001      	beq.n	80083b6 <SystemClock_Config+0x9a>
		Error_Handler();
 80083b2:	f000 f847 	bl	8008444 <Error_Handler>
	}
}
 80083b6:	bf00      	nop
 80083b8:	3758      	adds	r7, #88	@ 0x58
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
	...

080083c0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
	if (htim == &htim6) {
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a09      	ldr	r2, [pc, #36]	@ (80083f0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d102      	bne.n	80083d6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_ADC_Start_IT(&hadc1);
 80083d0:	4808      	ldr	r0, [pc, #32]	@ (80083f4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80083d2:	f001 fdb5 	bl	8009f40 <HAL_ADC_Start_IT>
	}
	if (htim->Instance == htim7.Instance) {
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	4b07      	ldr	r3, [pc, #28]	@ (80083f8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d101      	bne.n	80083e6 <HAL_TIM_PeriodElapsedCallback+0x26>
		hal_ticksplusplus();
 80083e2:	f7fc fb8d 	bl	8004b00 <hal_ticksplusplus>
	}
}
 80083e6:	bf00      	nop
 80083e8:	3708      	adds	r7, #8
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	200005d4 	.word	0x200005d4
 80083f4:	200000e0 	.word	0x200000e0
 80083f8:	20000620 	.word	0x20000620

080083fc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a0c      	ldr	r2, [pc, #48]	@ (8008438 <HAL_ADC_ConvCpltCallback+0x3c>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d110      	bne.n	800842e <HAL_ADC_ConvCpltCallback+0x32>
		n_temp = HAL_ADC_GetValue(&hadc1);
 800840c:	480a      	ldr	r0, [pc, #40]	@ (8008438 <HAL_ADC_ConvCpltCallback+0x3c>)
 800840e:	f001 fe4b 	bl	800a0a8 <HAL_ADC_GetValue>
 8008412:	4603      	mov	r3, r0
 8008414:	4a09      	ldr	r2, [pc, #36]	@ (800843c <HAL_ADC_ConvCpltCallback+0x40>)
 8008416:	6013      	str	r3, [r2, #0]
		temp = 188686 - 147 * n_temp;
 8008418:	4b08      	ldr	r3, [pc, #32]	@ (800843c <HAL_ADC_ConvCpltCallback+0x40>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2293      	movs	r2, #147	@ 0x93
 800841e:	fb02 f303 	mul.w	r3, r2, r3
 8008422:	f5c3 3338 	rsb	r3, r3, #188416	@ 0x2e000
 8008426:	f503 7387 	add.w	r3, r3, #270	@ 0x10e
 800842a:	4a05      	ldr	r2, [pc, #20]	@ (8008440 <HAL_ADC_ConvCpltCallback+0x44>)
 800842c:	6013      	str	r3, [r2, #0]
	}
}
 800842e:	bf00      	nop
 8008430:	3708      	adds	r7, #8
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	200000e0 	.word	0x200000e0
 800843c:	200004e8 	.word	0x200004e8
 8008440:	200004ec 	.word	0x200004ec

08008444 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8008444:	b480      	push	{r7}
 8008446:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8008448:	b672      	cpsid	i
}
 800844a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800844c:	bf00      	nop
 800844e:	e7fd      	b.n	800844c <Error_Handler+0x8>

08008450 <os_init>:
	osjob_t *scheduledjobs;
	osjob_t *runnablejobs;
} OS;

void os_init()
{
 8008450:	b580      	push	{r7, lr}
 8008452:	af00      	add	r7, sp, #0
	memset(&OS, 0x00, sizeof(OS));
 8008454:	2208      	movs	r2, #8
 8008456:	2100      	movs	r1, #0
 8008458:	4805      	ldr	r0, [pc, #20]	@ (8008470 <os_init+0x20>)
 800845a:	f006 fdc9 	bl	800eff0 <memset>
	hal_init();
 800845e:	f7fc fbf5 	bl	8004c4c <hal_init>
	radio_init();
 8008462:	f000 fcbd 	bl	8008de0 <radio_init>
	LMIC_init();
 8008466:	f7ff fce1 	bl	8007e2c <LMIC_init>
}
 800846a:	bf00      	nop
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	20000554 	.word	0x20000554

08008474 <os_getTime>:

ostime_t os_getTime()
{
 8008474:	b580      	push	{r7, lr}
 8008476:	af00      	add	r7, sp, #0
	return hal_ticks();
 8008478:	f7fc fb12 	bl	8004aa0 <hal_ticks>
 800847c:	4603      	mov	r3, r0
}
 800847e:	4618      	mov	r0, r3
 8008480:	bd80      	pop	{r7, pc}

08008482 <unlinkjob>:

// unlink job from queue, return if removed
static int unlinkjob(osjob_t **pnext, osjob_t *job)
{
 8008482:	b480      	push	{r7}
 8008484:	b083      	sub	sp, #12
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	6039      	str	r1, [r7, #0]
	for (; *pnext; pnext = &((*pnext)->next)) {
 800848c:	e00d      	b.n	80084aa <unlinkjob+0x28>
		if (*pnext == job) { // unlink
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	683a      	ldr	r2, [r7, #0]
 8008494:	429a      	cmp	r2, r3
 8008496:	d105      	bne.n	80084a4 <unlinkjob+0x22>
			*pnext = job->next;
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	601a      	str	r2, [r3, #0]
			return 1;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e007      	b.n	80084b4 <unlinkjob+0x32>
	for (; *pnext; pnext = &((*pnext)->next)) {
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	607b      	str	r3, [r7, #4]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1ed      	bne.n	800848e <unlinkjob+0xc>
		}
	}
	return 0;
 80084b2:	2300      	movs	r3, #0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <os_clearCallback>:

// clear scheduled job
void os_clearCallback(osjob_t *job)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
	hal_disableIRQs();
 80084c8:	f7fc fb94 	bl	8004bf4 <hal_disableIRQs>
	unlinkjob(&OS.scheduledjobs, job) || unlinkjob(&OS.runnablejobs, job);
 80084cc:	6879      	ldr	r1, [r7, #4]
 80084ce:	4809      	ldr	r0, [pc, #36]	@ (80084f4 <os_clearCallback+0x34>)
 80084d0:	f7ff ffd7 	bl	8008482 <unlinkjob>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d105      	bne.n	80084e6 <os_clearCallback+0x26>
 80084da:	6879      	ldr	r1, [r7, #4]
 80084dc:	4806      	ldr	r0, [pc, #24]	@ (80084f8 <os_clearCallback+0x38>)
 80084de:	f7ff ffd0 	bl	8008482 <unlinkjob>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
	hal_enableIRQs();
 80084e6:	f7fc fb95 	bl	8004c14 <hal_enableIRQs>
}
 80084ea:	bf00      	nop
 80084ec:	3708      	adds	r7, #8
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	20000554 	.word	0x20000554
 80084f8:	20000558 	.word	0x20000558

080084fc <os_setCallback>:

// schedule immediately runnable job
void os_setCallback(osjob_t *job, osjobcb_t cb)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
	osjob_t **pnext;
	hal_disableIRQs();
 8008506:	f7fc fb75 	bl	8004bf4 <hal_disableIRQs>
	// remove if job was already queued
	unlinkjob(&OS.runnablejobs, job);
 800850a:	6879      	ldr	r1, [r7, #4]
 800850c:	480d      	ldr	r0, [pc, #52]	@ (8008544 <os_setCallback+0x48>)
 800850e:	f7ff ffb8 	bl	8008482 <unlinkjob>
	// fill-in job
	job->func = cb;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	683a      	ldr	r2, [r7, #0]
 8008516:	609a      	str	r2, [r3, #8]
	job->next = NULL;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	601a      	str	r2, [r3, #0]
	// add to end of run queue
	for (pnext = &OS.runnablejobs; *pnext; pnext = &((*pnext)->next))
 800851e:	4b09      	ldr	r3, [pc, #36]	@ (8008544 <os_setCallback+0x48>)
 8008520:	60fb      	str	r3, [r7, #12]
 8008522:	e002      	b.n	800852a <os_setCallback+0x2e>
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	60fb      	str	r3, [r7, #12]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1f8      	bne.n	8008524 <os_setCallback+0x28>
		;
	*pnext = job;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	601a      	str	r2, [r3, #0]
	hal_enableIRQs();
 8008538:	f7fc fb6c 	bl	8004c14 <hal_enableIRQs>
}
 800853c:	bf00      	nop
 800853e:	3710      	adds	r7, #16
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	20000558 	.word	0x20000558

08008548 <os_setTimedCallback>:

// schedule timed job
void os_setTimedCallback(osjob_t *job, ostime_t time, osjobcb_t cb)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b086      	sub	sp, #24
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	607a      	str	r2, [r7, #4]
	osjob_t **pnext;
	hal_disableIRQs();
 8008554:	f7fc fb4e 	bl	8004bf4 <hal_disableIRQs>
	// remove if job was already queued
	unlinkjob(&OS.scheduledjobs, job);
 8008558:	68f9      	ldr	r1, [r7, #12]
 800855a:	4815      	ldr	r0, [pc, #84]	@ (80085b0 <os_setTimedCallback+0x68>)
 800855c:	f7ff ff91 	bl	8008482 <unlinkjob>
	// fill-in job
	job->deadline = time;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	68ba      	ldr	r2, [r7, #8]
 8008564:	605a      	str	r2, [r3, #4]
	job->func = cb;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	609a      	str	r2, [r3, #8]
	job->next = NULL;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2200      	movs	r2, #0
 8008570:	601a      	str	r2, [r3, #0]
	// insert into schedule
	for (pnext = &OS.scheduledjobs; *pnext; pnext = &((*pnext)->next)) {
 8008572:	4b0f      	ldr	r3, [pc, #60]	@ (80085b0 <os_setTimedCallback+0x68>)
 8008574:	617b      	str	r3, [r7, #20]
 8008576:	e00e      	b.n	8008596 <os_setTimedCallback+0x4e>
		if ((*pnext)->deadline - time > 0) { // (cmp diff, not abs!)
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	685a      	ldr	r2, [r3, #4]
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	2b00      	cmp	r3, #0
 8008584:	dd04      	ble.n	8008590 <os_setTimedCallback+0x48>
			// enqueue before next element and stop
			job->next = *pnext;
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	601a      	str	r2, [r3, #0]
			break;
 800858e:	e006      	b.n	800859e <os_setTimedCallback+0x56>
	for (pnext = &OS.scheduledjobs; *pnext; pnext = &((*pnext)->next)) {
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	617b      	str	r3, [r7, #20]
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1ec      	bne.n	8008578 <os_setTimedCallback+0x30>
		}
	}
	*pnext = job;
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	601a      	str	r2, [r3, #0]
	hal_enableIRQs();
 80085a4:	f7fc fb36 	bl	8004c14 <hal_enableIRQs>
}
 80085a8:	bf00      	nop
 80085aa:	3718      	adds	r7, #24
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}
 80085b0:	20000554 	.word	0x20000554

080085b4 <os_runloop>:

// execute jobs from timer and from run queue
void os_runloop()
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
	while (1) {
		osjob_t *j = NULL;
 80085ba:	2300      	movs	r3, #0
 80085bc:	607b      	str	r3, [r7, #4]
		hal_disableIRQs();
 80085be:	f7fc fb19 	bl	8004bf4 <hal_disableIRQs>
		// check for runnable jobs
		if (OS.runnablejobs) {
 80085c2:	4b16      	ldr	r3, [pc, #88]	@ (800861c <os_runloop+0x68>)
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d007      	beq.n	80085da <os_runloop+0x26>
			j = OS.runnablejobs;
 80085ca:	4b14      	ldr	r3, [pc, #80]	@ (800861c <os_runloop+0x68>)
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	607b      	str	r3, [r7, #4]
			OS.runnablejobs = j->next;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a11      	ldr	r2, [pc, #68]	@ (800861c <os_runloop+0x68>)
 80085d6:	6053      	str	r3, [r2, #4]
 80085d8:	e016      	b.n	8008608 <os_runloop+0x54>
		} else if (OS.scheduledjobs
 80085da:	4b10      	ldr	r3, [pc, #64]	@ (800861c <os_runloop+0x68>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d010      	beq.n	8008604 <os_runloop+0x50>
				&& hal_checkTimer(OS.scheduledjobs->deadline)) { // check for expired timed jobs
 80085e2:	4b0e      	ldr	r3, [pc, #56]	@ (800861c <os_runloop+0x68>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7fc fac5 	bl	8004b78 <hal_checkTimer>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d007      	beq.n	8008604 <os_runloop+0x50>
			j = OS.scheduledjobs;
 80085f4:	4b09      	ldr	r3, [pc, #36]	@ (800861c <os_runloop+0x68>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	607b      	str	r3, [r7, #4]
			OS.scheduledjobs = j->next;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a07      	ldr	r2, [pc, #28]	@ (800861c <os_runloop+0x68>)
 8008600:	6013      	str	r3, [r2, #0]
 8008602:	e001      	b.n	8008608 <os_runloop+0x54>
		} else { // nothing pending
			hal_sleep(); // wake by irq (timer already restarted)
 8008604:	f7fc fb1a 	bl	8004c3c <hal_sleep>
		}
		hal_enableIRQs();
 8008608:	f7fc fb04 	bl	8004c14 <hal_enableIRQs>
		if (j) { // run job callback
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d0d3      	beq.n	80085ba <os_runloop+0x6>
			j->func(j);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	4798      	blx	r3
	while (1) {
 800861a:	e7ce      	b.n	80085ba <os_runloop+0x6>
 800861c:	20000554 	.word	0x20000554

08008620 <writeReg>:
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif

static void writeReg(u1_t addr, u1_t data)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	4603      	mov	r3, r0
 8008628:	460a      	mov	r2, r1
 800862a:	71fb      	strb	r3, [r7, #7]
 800862c:	4613      	mov	r3, r2
 800862e:	71bb      	strb	r3, [r7, #6]
	hal_pin_nss(0);
 8008630:	2000      	movs	r0, #0
 8008632:	f7fc f9ad 	bl	8004990 <hal_pin_nss>
	hal_spi(addr | 0x80);
 8008636:	79fb      	ldrb	r3, [r7, #7]
 8008638:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800863c:	b2db      	uxtb	r3, r3
 800863e:	4618      	mov	r0, r3
 8008640:	f7fc fa08 	bl	8004a54 <hal_spi>
	hal_spi(data);
 8008644:	79bb      	ldrb	r3, [r7, #6]
 8008646:	4618      	mov	r0, r3
 8008648:	f7fc fa04 	bl	8004a54 <hal_spi>
	hal_pin_nss(1);
 800864c:	2001      	movs	r0, #1
 800864e:	f7fc f99f 	bl	8004990 <hal_pin_nss>
}
 8008652:	bf00      	nop
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <readReg>:

static u1_t readReg(u1_t addr)
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b084      	sub	sp, #16
 800865e:	af00      	add	r7, sp, #0
 8008660:	4603      	mov	r3, r0
 8008662:	71fb      	strb	r3, [r7, #7]
	hal_pin_nss(0);
 8008664:	2000      	movs	r0, #0
 8008666:	f7fc f993 	bl	8004990 <hal_pin_nss>
	hal_spi(addr & 0x7F);
 800866a:	79fb      	ldrb	r3, [r7, #7]
 800866c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008670:	b2db      	uxtb	r3, r3
 8008672:	4618      	mov	r0, r3
 8008674:	f7fc f9ee 	bl	8004a54 <hal_spi>
	u1_t val = hal_spi(0x00);
 8008678:	2000      	movs	r0, #0
 800867a:	f7fc f9eb 	bl	8004a54 <hal_spi>
 800867e:	4603      	mov	r3, r0
 8008680:	73fb      	strb	r3, [r7, #15]
	hal_pin_nss(1);
 8008682:	2001      	movs	r0, #1
 8008684:	f7fc f984 	bl	8004990 <hal_pin_nss>
	return val;
 8008688:	7bfb      	ldrb	r3, [r7, #15]
}
 800868a:	4618      	mov	r0, r3
 800868c:	3710      	adds	r7, #16
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <writeBuf>:

static void writeBuf(u1_t addr, xref2u1_t buf, u1_t len)
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b084      	sub	sp, #16
 8008696:	af00      	add	r7, sp, #0
 8008698:	4603      	mov	r3, r0
 800869a:	6039      	str	r1, [r7, #0]
 800869c:	71fb      	strb	r3, [r7, #7]
 800869e:	4613      	mov	r3, r2
 80086a0:	71bb      	strb	r3, [r7, #6]
	hal_pin_nss(0);
 80086a2:	2000      	movs	r0, #0
 80086a4:	f7fc f974 	bl	8004990 <hal_pin_nss>
	hal_spi(addr | 0x80);
 80086a8:	79fb      	ldrb	r3, [r7, #7]
 80086aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7fc f9cf 	bl	8004a54 <hal_spi>
	for (u1_t i = 0; i < len; i++) {
 80086b6:	2300      	movs	r3, #0
 80086b8:	73fb      	strb	r3, [r7, #15]
 80086ba:	e009      	b.n	80086d0 <writeBuf+0x3e>
		hal_spi(buf[i]);
 80086bc:	7bfb      	ldrb	r3, [r7, #15]
 80086be:	683a      	ldr	r2, [r7, #0]
 80086c0:	4413      	add	r3, r2
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7fc f9c5 	bl	8004a54 <hal_spi>
	for (u1_t i = 0; i < len; i++) {
 80086ca:	7bfb      	ldrb	r3, [r7, #15]
 80086cc:	3301      	adds	r3, #1
 80086ce:	73fb      	strb	r3, [r7, #15]
 80086d0:	7bfa      	ldrb	r2, [r7, #15]
 80086d2:	79bb      	ldrb	r3, [r7, #6]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d3f1      	bcc.n	80086bc <writeBuf+0x2a>
	}
	hal_pin_nss(1);
 80086d8:	2001      	movs	r0, #1
 80086da:	f7fc f959 	bl	8004990 <hal_pin_nss>
}
 80086de:	bf00      	nop
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <readBuf>:

static void readBuf(u1_t addr, xref2u1_t buf, u1_t len)
{
 80086e6:	b590      	push	{r4, r7, lr}
 80086e8:	b085      	sub	sp, #20
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	4603      	mov	r3, r0
 80086ee:	6039      	str	r1, [r7, #0]
 80086f0:	71fb      	strb	r3, [r7, #7]
 80086f2:	4613      	mov	r3, r2
 80086f4:	71bb      	strb	r3, [r7, #6]
	hal_pin_nss(0);
 80086f6:	2000      	movs	r0, #0
 80086f8:	f7fc f94a 	bl	8004990 <hal_pin_nss>
	hal_spi(addr & 0x7F);
 80086fc:	79fb      	ldrb	r3, [r7, #7]
 80086fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008702:	b2db      	uxtb	r3, r3
 8008704:	4618      	mov	r0, r3
 8008706:	f7fc f9a5 	bl	8004a54 <hal_spi>
	for (u1_t i = 0; i < len; i++) {
 800870a:	2300      	movs	r3, #0
 800870c:	73fb      	strb	r3, [r7, #15]
 800870e:	e00a      	b.n	8008726 <readBuf+0x40>
		buf[i] = hal_spi(0x00);
 8008710:	7bfb      	ldrb	r3, [r7, #15]
 8008712:	683a      	ldr	r2, [r7, #0]
 8008714:	18d4      	adds	r4, r2, r3
 8008716:	2000      	movs	r0, #0
 8008718:	f7fc f99c 	bl	8004a54 <hal_spi>
 800871c:	4603      	mov	r3, r0
 800871e:	7023      	strb	r3, [r4, #0]
	for (u1_t i = 0; i < len; i++) {
 8008720:	7bfb      	ldrb	r3, [r7, #15]
 8008722:	3301      	adds	r3, #1
 8008724:	73fb      	strb	r3, [r7, #15]
 8008726:	7bfa      	ldrb	r2, [r7, #15]
 8008728:	79bb      	ldrb	r3, [r7, #6]
 800872a:	429a      	cmp	r2, r3
 800872c:	d3f0      	bcc.n	8008710 <readBuf+0x2a>
	}
	hal_pin_nss(1);
 800872e:	2001      	movs	r0, #1
 8008730:	f7fc f92e 	bl	8004990 <hal_pin_nss>
}
 8008734:	bf00      	nop
 8008736:	3714      	adds	r7, #20
 8008738:	46bd      	mov	sp, r7
 800873a:	bd90      	pop	{r4, r7, pc}

0800873c <opmode>:

static void opmode(u1_t mode)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	4603      	mov	r3, r0
 8008744:	71fb      	strb	r3, [r7, #7]
	writeReg(RegOpMode, (readReg(RegOpMode) & ~OPMODE_MASK) | mode);
 8008746:	2001      	movs	r0, #1
 8008748:	f7ff ff87 	bl	800865a <readReg>
 800874c:	4603      	mov	r3, r0
 800874e:	b25b      	sxtb	r3, r3
 8008750:	f023 0307 	bic.w	r3, r3, #7
 8008754:	b25a      	sxtb	r2, r3
 8008756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800875a:	4313      	orrs	r3, r2
 800875c:	b25b      	sxtb	r3, r3
 800875e:	b2db      	uxtb	r3, r3
 8008760:	4619      	mov	r1, r3
 8008762:	2001      	movs	r0, #1
 8008764:	f7ff ff5c 	bl	8008620 <writeReg>
}
 8008768:	bf00      	nop
 800876a:	3708      	adds	r7, #8
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <opmodeLora>:

static void opmodeLora()
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
	u1_t u = OPMODE_LORA;
 8008776:	2380      	movs	r3, #128	@ 0x80
 8008778:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
	u |= 0x8;   // TBD: sx1276 high freq
 800877a:	79fb      	ldrb	r3, [r7, #7]
 800877c:	f043 0308 	orr.w	r3, r3, #8
 8008780:	71fb      	strb	r3, [r7, #7]
#endif
	writeReg(RegOpMode, u);
 8008782:	79fb      	ldrb	r3, [r7, #7]
 8008784:	4619      	mov	r1, r3
 8008786:	2001      	movs	r0, #1
 8008788:	f7ff ff4a 	bl	8008620 <writeReg>
}
 800878c:	bf00      	nop
 800878e:	3708      	adds	r7, #8
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <opmodeFSK>:

static void opmodeFSK()
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
	u1_t u = 0;
 800879a:	2300      	movs	r3, #0
 800879c:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
	u |= 0x8;   // TBD: sx1276 high freq
 800879e:	79fb      	ldrb	r3, [r7, #7]
 80087a0:	f043 0308 	orr.w	r3, r3, #8
 80087a4:	71fb      	strb	r3, [r7, #7]
#endif
	writeReg(RegOpMode, u);
 80087a6:	79fb      	ldrb	r3, [r7, #7]
 80087a8:	4619      	mov	r1, r3
 80087aa:	2001      	movs	r0, #1
 80087ac:	f7ff ff38 	bl	8008620 <writeReg>
}
 80087b0:	bf00      	nop
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <configLoraModem>:

// configure LoRa modem (cfg1, cfg2)
static void configLoraModem()
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
	sf_t sf = getSf(LMIC.rps);
 80087be:	4b54      	ldr	r3, [pc, #336]	@ (8008910 <configLoraModem+0x158>)
 80087c0:	89db      	ldrh	r3, [r3, #14]
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7fc faf8 	bl	8004db8 <getSf>
 80087c8:	4603      	mov	r3, r0
 80087ca:	713b      	strb	r3, [r7, #4]

#ifdef CFG_sx1276_radio
	u1_t mc1 = 0, mc2 = 0, mc3 = 0;
 80087cc:	2300      	movs	r3, #0
 80087ce:	71fb      	strb	r3, [r7, #7]
 80087d0:	2300      	movs	r3, #0
 80087d2:	71bb      	strb	r3, [r7, #6]
 80087d4:	2300      	movs	r3, #0
 80087d6:	717b      	strb	r3, [r7, #5]

	switch (getBw(LMIC.rps)) {
 80087d8:	4b4d      	ldr	r3, [pc, #308]	@ (8008910 <configLoraModem+0x158>)
 80087da:	89db      	ldrh	r3, [r3, #14]
 80087dc:	4618      	mov	r0, r3
 80087de:	f7fc fafb 	bl	8004dd8 <getBw>
 80087e2:	4603      	mov	r3, r0
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	d010      	beq.n	800880a <configLoraModem+0x52>
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	dc13      	bgt.n	8008814 <configLoraModem+0x5c>
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d002      	beq.n	80087f6 <configLoraModem+0x3e>
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d005      	beq.n	8008800 <configLoraModem+0x48>
 80087f4:	e00e      	b.n	8008814 <configLoraModem+0x5c>
	case BW125:
		mc1 |= SX1276_MC1_BW_125;
 80087f6:	79fb      	ldrb	r3, [r7, #7]
 80087f8:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80087fc:	71fb      	strb	r3, [r7, #7]
		break;
 80087fe:	e00b      	b.n	8008818 <configLoraModem+0x60>
	case BW250:
		mc1 |= SX1276_MC1_BW_250;
 8008800:	79fb      	ldrb	r3, [r7, #7]
 8008802:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008806:	71fb      	strb	r3, [r7, #7]
		break;
 8008808:	e006      	b.n	8008818 <configLoraModem+0x60>
	case BW500:
		mc1 |= SX1276_MC1_BW_500;
 800880a:	79fb      	ldrb	r3, [r7, #7]
 800880c:	f063 036f 	orn	r3, r3, #111	@ 0x6f
 8008810:	71fb      	strb	r3, [r7, #7]
		break;
 8008812:	e001      	b.n	8008818 <configLoraModem+0x60>
	default:
		ASSERT(0);
 8008814:	f7fc fa30 	bl	8004c78 <hal_failed>
	}
	switch (getCr(LMIC.rps)) {
 8008818:	4b3d      	ldr	r3, [pc, #244]	@ (8008910 <configLoraModem+0x158>)
 800881a:	89db      	ldrh	r3, [r3, #14]
 800881c:	4618      	mov	r0, r3
 800881e:	f7fc faed 	bl	8004dfc <getCr>
 8008822:	4603      	mov	r3, r0
 8008824:	2b03      	cmp	r3, #3
 8008826:	d81f      	bhi.n	8008868 <configLoraModem+0xb0>
 8008828:	a201      	add	r2, pc, #4	@ (adr r2, 8008830 <configLoraModem+0x78>)
 800882a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800882e:	bf00      	nop
 8008830:	08008841 	.word	0x08008841
 8008834:	0800884b 	.word	0x0800884b
 8008838:	08008855 	.word	0x08008855
 800883c:	0800885f 	.word	0x0800885f
	case CR_4_5:
		mc1 |= SX1276_MC1_CR_4_5;
 8008840:	79fb      	ldrb	r3, [r7, #7]
 8008842:	f043 0302 	orr.w	r3, r3, #2
 8008846:	71fb      	strb	r3, [r7, #7]
		break;
 8008848:	e010      	b.n	800886c <configLoraModem+0xb4>
	case CR_4_6:
		mc1 |= SX1276_MC1_CR_4_6;
 800884a:	79fb      	ldrb	r3, [r7, #7]
 800884c:	f043 0304 	orr.w	r3, r3, #4
 8008850:	71fb      	strb	r3, [r7, #7]
		break;
 8008852:	e00b      	b.n	800886c <configLoraModem+0xb4>
	case CR_4_7:
		mc1 |= SX1276_MC1_CR_4_7;
 8008854:	79fb      	ldrb	r3, [r7, #7]
 8008856:	f043 0306 	orr.w	r3, r3, #6
 800885a:	71fb      	strb	r3, [r7, #7]
		break;
 800885c:	e006      	b.n	800886c <configLoraModem+0xb4>
	case CR_4_8:
		mc1 |= SX1276_MC1_CR_4_8;
 800885e:	79fb      	ldrb	r3, [r7, #7]
 8008860:	f043 0308 	orr.w	r3, r3, #8
 8008864:	71fb      	strb	r3, [r7, #7]
		break;
 8008866:	e001      	b.n	800886c <configLoraModem+0xb4>
	default:
		ASSERT(0);
 8008868:	f7fc fa06 	bl	8004c78 <hal_failed>
	}

	if (getIh(LMIC.rps)) {
 800886c:	4b28      	ldr	r3, [pc, #160]	@ (8008910 <configLoraModem+0x158>)
 800886e:	89db      	ldrh	r3, [r3, #14]
 8008870:	4618      	mov	r0, r3
 8008872:	f7fc fb15 	bl	8004ea0 <getIh>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d00e      	beq.n	800889a <configLoraModem+0xe2>
		mc1 |= SX1276_MC1_IMPLICIT_HEADER_MODE_ON;
 800887c:	79fb      	ldrb	r3, [r7, #7]
 800887e:	f043 0301 	orr.w	r3, r3, #1
 8008882:	71fb      	strb	r3, [r7, #7]
		writeReg(LORARegPayloadLength, getIh(LMIC.rps)); // required length
 8008884:	4b22      	ldr	r3, [pc, #136]	@ (8008910 <configLoraModem+0x158>)
 8008886:	89db      	ldrh	r3, [r3, #14]
 8008888:	4618      	mov	r0, r3
 800888a:	f7fc fb09 	bl	8004ea0 <getIh>
 800888e:	4603      	mov	r3, r0
 8008890:	b2db      	uxtb	r3, r3
 8008892:	4619      	mov	r1, r3
 8008894:	2022      	movs	r0, #34	@ 0x22
 8008896:	f7ff fec3 	bl	8008620 <writeReg>
	}
	// set ModemConfig1
	writeReg(LORARegModemConfig1, mc1);
 800889a:	79fb      	ldrb	r3, [r7, #7]
 800889c:	4619      	mov	r1, r3
 800889e:	201d      	movs	r0, #29
 80088a0:	f7ff febe 	bl	8008620 <writeReg>

	mc2 = (SX1272_MC2_SF7 + ((sf - 1) << 4));
 80088a4:	793b      	ldrb	r3, [r7, #4]
 80088a6:	3b01      	subs	r3, #1
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	011b      	lsls	r3, r3, #4
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	3370      	adds	r3, #112	@ 0x70
 80088b0:	71bb      	strb	r3, [r7, #6]
	if (getNocrc(LMIC.rps) == 0) {
 80088b2:	4b17      	ldr	r3, [pc, #92]	@ (8008910 <configLoraModem+0x158>)
 80088b4:	89db      	ldrh	r3, [r3, #14]
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7fc facb 	bl	8004e52 <getNocrc>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d103      	bne.n	80088ca <configLoraModem+0x112>
		mc2 |= SX1276_MC2_RX_PAYLOAD_CRCON;
 80088c2:	79bb      	ldrb	r3, [r7, #6]
 80088c4:	f043 0304 	orr.w	r3, r3, #4
 80088c8:	71bb      	strb	r3, [r7, #6]
	}
	writeReg(LORARegModemConfig2, mc2);
 80088ca:	79bb      	ldrb	r3, [r7, #6]
 80088cc:	4619      	mov	r1, r3
 80088ce:	201e      	movs	r0, #30
 80088d0:	f7ff fea6 	bl	8008620 <writeReg>

	mc3 = SX1276_MC3_AGCAUTO;
 80088d4:	2304      	movs	r3, #4
 80088d6:	717b      	strb	r3, [r7, #5]
	if ((sf == SF11 || sf == SF12) && getBw(LMIC.rps) == BW125) {
 80088d8:	793b      	ldrb	r3, [r7, #4]
 80088da:	2b05      	cmp	r3, #5
 80088dc:	d002      	beq.n	80088e4 <configLoraModem+0x12c>
 80088de:	793b      	ldrb	r3, [r7, #4]
 80088e0:	2b06      	cmp	r3, #6
 80088e2:	d10b      	bne.n	80088fc <configLoraModem+0x144>
 80088e4:	4b0a      	ldr	r3, [pc, #40]	@ (8008910 <configLoraModem+0x158>)
 80088e6:	89db      	ldrh	r3, [r3, #14]
 80088e8:	4618      	mov	r0, r3
 80088ea:	f7fc fa75 	bl	8004dd8 <getBw>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d103      	bne.n	80088fc <configLoraModem+0x144>
		mc3 |= SX1276_MC3_LOW_DATA_RATE_OPTIMIZE;
 80088f4:	797b      	ldrb	r3, [r7, #5]
 80088f6:	f043 0308 	orr.w	r3, r3, #8
 80088fa:	717b      	strb	r3, [r7, #5]
	}
	writeReg(LORARegModemConfig3, mc3);
 80088fc:	797b      	ldrb	r3, [r7, #5]
 80088fe:	4619      	mov	r1, r3
 8008900:	2026      	movs	r0, #38	@ 0x26
 8008902:	f7ff fe8d 	bl	8008620 <writeReg>
#endif

#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 8008906:	bf00      	nop
 8008908:	3708      	adds	r7, #8
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	2000033c 	.word	0x2000033c

08008914 <configChannel>:

static void configChannel()
{
 8008914:	b5b0      	push	{r4, r5, r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
	// set frequency: FQ = (FRF * 32 Mhz) / (2 ^ 19)
	u8_t frf = ((u8_t) LMIC.freq << 19) / 32000000;
 800891a:	4c1b      	ldr	r4, [pc, #108]	@ (8008988 <configChannel+0x74>)
 800891c:	68a4      	ldr	r4, [r4, #8]
 800891e:	2500      	movs	r5, #0
 8008920:	4622      	mov	r2, r4
 8008922:	462b      	mov	r3, r5
 8008924:	0b51      	lsrs	r1, r2, #13
 8008926:	04d0      	lsls	r0, r2, #19
 8008928:	4a18      	ldr	r2, [pc, #96]	@ (800898c <configChannel+0x78>)
 800892a:	f04f 0300 	mov.w	r3, #0
 800892e:	f7f8 f9bd 	bl	8000cac <__aeabi_uldivmod>
 8008932:	4602      	mov	r2, r0
 8008934:	460b      	mov	r3, r1
 8008936:	e9c7 2300 	strd	r2, r3, [r7]
	writeReg(RegFrfMsb, (u1_t) (frf >> 16));
 800893a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800893e:	f04f 0200 	mov.w	r2, #0
 8008942:	f04f 0300 	mov.w	r3, #0
 8008946:	0c02      	lsrs	r2, r0, #16
 8008948:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800894c:	0c0b      	lsrs	r3, r1, #16
 800894e:	b2d3      	uxtb	r3, r2
 8008950:	4619      	mov	r1, r3
 8008952:	2006      	movs	r0, #6
 8008954:	f7ff fe64 	bl	8008620 <writeReg>
	writeReg(RegFrfMid, (u1_t) (frf >> 8));
 8008958:	e9d7 0100 	ldrd	r0, r1, [r7]
 800895c:	f04f 0200 	mov.w	r2, #0
 8008960:	f04f 0300 	mov.w	r3, #0
 8008964:	0a02      	lsrs	r2, r0, #8
 8008966:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800896a:	0a0b      	lsrs	r3, r1, #8
 800896c:	b2d3      	uxtb	r3, r2
 800896e:	4619      	mov	r1, r3
 8008970:	2007      	movs	r0, #7
 8008972:	f7ff fe55 	bl	8008620 <writeReg>
	writeReg(RegFrfLsb, (u1_t) (frf >> 0));
 8008976:	783b      	ldrb	r3, [r7, #0]
 8008978:	4619      	mov	r1, r3
 800897a:	2008      	movs	r0, #8
 800897c:	f7ff fe50 	bl	8008620 <writeReg>
}
 8008980:	bf00      	nop
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bdb0      	pop	{r4, r5, r7, pc}
 8008988:	2000033c 	.word	0x2000033c
 800898c:	01e84800 	.word	0x01e84800

08008990 <configPower>:

static void configPower()
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
#ifdef CFG_sx1276_radio
	// no boost used for now
	s1_t pw = (s1_t) LMIC.txpow;
 8008996:	4b15      	ldr	r3, [pc, #84]	@ (80089ec <configPower+0x5c>)
 8008998:	7c9b      	ldrb	r3, [r3, #18]
 800899a:	71fb      	strb	r3, [r7, #7]
	if (pw >= 17) {
 800899c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089a0:	2b10      	cmp	r3, #16
 80089a2:	dd02      	ble.n	80089aa <configPower+0x1a>
		pw = 15;
 80089a4:	230f      	movs	r3, #15
 80089a6:	71fb      	strb	r3, [r7, #7]
 80089a8:	e005      	b.n	80089b6 <configPower+0x26>
	} else if (pw < 2) {
 80089aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	dc01      	bgt.n	80089b6 <configPower+0x26>
		pw = 2;
 80089b2:	2302      	movs	r3, #2
 80089b4:	71fb      	strb	r3, [r7, #7]
	}
	// check board type for BOOST pin
	writeReg(RegPaConfig, (u1_t) (0x80 | (pw & 0xf)));
 80089b6:	79fb      	ldrb	r3, [r7, #7]
 80089b8:	f003 030f 	and.w	r3, r3, #15
 80089bc:	b25b      	sxtb	r3, r3
 80089be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80089c2:	b25b      	sxtb	r3, r3
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	4619      	mov	r1, r3
 80089c8:	2009      	movs	r0, #9
 80089ca:	f7ff fe29 	bl	8008620 <writeReg>
	writeReg(RegPaDac, readReg(RegPaDac) | 0x4);
 80089ce:	205a      	movs	r0, #90	@ 0x5a
 80089d0:	f7ff fe43 	bl	800865a <readReg>
 80089d4:	4603      	mov	r3, r0
 80089d6:	f043 0304 	orr.w	r3, r3, #4
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	4619      	mov	r1, r3
 80089de:	205a      	movs	r0, #90	@ 0x5a
 80089e0:	f7ff fe1e 	bl	8008620 <writeReg>
    }
    writeReg(RegPaConfig, (u1_t)(0x80|(pw-2)));
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 80089e4:	bf00      	nop
 80089e6:	3708      	adds	r7, #8
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	2000033c 	.word	0x2000033c

080089f0 <txfsk>:

static void txfsk()
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	af00      	add	r7, sp, #0
	// select FSK modem (from sleep mode)
	writeReg(RegOpMode, 0x10); // FSK, BT=0.5
 80089f4:	2110      	movs	r1, #16
 80089f6:	2001      	movs	r0, #1
 80089f8:	f7ff fe12 	bl	8008620 <writeReg>
	ASSERT(readReg(RegOpMode) == 0x10);
 80089fc:	2001      	movs	r0, #1
 80089fe:	f7ff fe2c 	bl	800865a <readReg>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b10      	cmp	r3, #16
 8008a06:	d001      	beq.n	8008a0c <txfsk+0x1c>
 8008a08:	f7fc f936 	bl	8004c78 <hal_failed>
	// enter standby mode (required for FIFO loading))
	opmode(OPMODE_STANDBY);
 8008a0c:	2001      	movs	r0, #1
 8008a0e:	f7ff fe95 	bl	800873c <opmode>
	// set bitrate
	writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 8008a12:	2102      	movs	r1, #2
 8008a14:	2002      	movs	r0, #2
 8008a16:	f7ff fe03 	bl	8008620 <writeReg>
	writeReg(FSKRegBitrateLsb, 0x80);
 8008a1a:	2180      	movs	r1, #128	@ 0x80
 8008a1c:	2003      	movs	r0, #3
 8008a1e:	f7ff fdff 	bl	8008620 <writeReg>
	// set frequency deviation
	writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 8008a22:	2101      	movs	r1, #1
 8008a24:	2004      	movs	r0, #4
 8008a26:	f7ff fdfb 	bl	8008620 <writeReg>
	writeReg(FSKRegFdevLsb, 0x99);
 8008a2a:	2199      	movs	r1, #153	@ 0x99
 8008a2c:	2005      	movs	r0, #5
 8008a2e:	f7ff fdf7 	bl	8008620 <writeReg>
	// frame and packet handler settings
	writeReg(FSKRegPreambleMsb, 0x00);
 8008a32:	2100      	movs	r1, #0
 8008a34:	2025      	movs	r0, #37	@ 0x25
 8008a36:	f7ff fdf3 	bl	8008620 <writeReg>
	writeReg(FSKRegPreambleLsb, 0x05);
 8008a3a:	2105      	movs	r1, #5
 8008a3c:	2026      	movs	r0, #38	@ 0x26
 8008a3e:	f7ff fdef 	bl	8008620 <writeReg>
	writeReg(FSKRegSyncConfig, 0x12);
 8008a42:	2112      	movs	r1, #18
 8008a44:	2027      	movs	r0, #39	@ 0x27
 8008a46:	f7ff fdeb 	bl	8008620 <writeReg>
	writeReg(FSKRegPacketConfig1, 0xD0);
 8008a4a:	21d0      	movs	r1, #208	@ 0xd0
 8008a4c:	2030      	movs	r0, #48	@ 0x30
 8008a4e:	f7ff fde7 	bl	8008620 <writeReg>
	writeReg(FSKRegPacketConfig2, 0x40);
 8008a52:	2140      	movs	r1, #64	@ 0x40
 8008a54:	2031      	movs	r0, #49	@ 0x31
 8008a56:	f7ff fde3 	bl	8008620 <writeReg>
	writeReg(FSKRegSyncValue1, 0xC1);
 8008a5a:	21c1      	movs	r1, #193	@ 0xc1
 8008a5c:	2028      	movs	r0, #40	@ 0x28
 8008a5e:	f7ff fddf 	bl	8008620 <writeReg>
	writeReg(FSKRegSyncValue2, 0x94);
 8008a62:	2194      	movs	r1, #148	@ 0x94
 8008a64:	2029      	movs	r0, #41	@ 0x29
 8008a66:	f7ff fddb 	bl	8008620 <writeReg>
	writeReg(FSKRegSyncValue3, 0xC1);
 8008a6a:	21c1      	movs	r1, #193	@ 0xc1
 8008a6c:	202a      	movs	r0, #42	@ 0x2a
 8008a6e:	f7ff fdd7 	bl	8008620 <writeReg>
	// configure frequency
	configChannel();
 8008a72:	f7ff ff4f 	bl	8008914 <configChannel>
	// configure output power
	configPower();
 8008a76:	f7ff ff8b 	bl	8008990 <configPower>

	// set the IRQ mapping DIO0=PacketSent DIO1=NOP DIO2=NOP
	writeReg(RegDioMapping1,
 8008a7a:	2134      	movs	r1, #52	@ 0x34
 8008a7c:	2040      	movs	r0, #64	@ 0x40
 8008a7e:	f7ff fdcf 	bl	8008620 <writeReg>
			MAP_DIO0_FSK_READY | MAP_DIO1_FSK_NOP | MAP_DIO2_FSK_TXNOP);

	// initialize the payload size and address pointers    
	writeReg(FSKRegPayloadLength, LMIC.dataLen + 1); // (insert length byte into payload))
 8008a82:	4b10      	ldr	r3, [pc, #64]	@ (8008ac4 <txfsk+0xd4>)
 8008a84:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8008a88:	3301      	adds	r3, #1
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	2032      	movs	r0, #50	@ 0x32
 8008a90:	f7ff fdc6 	bl	8008620 <writeReg>

	// download length byte and buffer to the radio FIFO
	writeReg(RegFifo, LMIC.dataLen);
 8008a94:	4b0b      	ldr	r3, [pc, #44]	@ (8008ac4 <txfsk+0xd4>)
 8008a96:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	2000      	movs	r0, #0
 8008a9e:	f7ff fdbf 	bl	8008620 <writeReg>
	writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8008aa2:	4b08      	ldr	r3, [pc, #32]	@ (8008ac4 <txfsk+0xd4>)
 8008aa4:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	4907      	ldr	r1, [pc, #28]	@ (8008ac8 <txfsk+0xd8>)
 8008aac:	2000      	movs	r0, #0
 8008aae:	f7ff fdf0 	bl	8008692 <writeBuf>

	// enable antenna switch for TX
	hal_pin_rxtx(1);
 8008ab2:	2001      	movs	r0, #1
 8008ab4:	f7fb ff61 	bl	800497a <hal_pin_rxtx>

	// now we actually start the transmission
	opmode(OPMODE_TX);
 8008ab8:	2003      	movs	r0, #3
 8008aba:	f7ff fe3f 	bl	800873c <opmode>
}
 8008abe:	bf00      	nop
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	2000033c 	.word	0x2000033c
 8008ac8:	20000484 	.word	0x20000484

08008acc <txlora>:

static void txlora()
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	af00      	add	r7, sp, #0
	// select LoRa modem (from sleep mode)
	//writeReg(RegOpMode, OPMODE_LORA);
	opmodeLora();
 8008ad0:	f7ff fe4e 	bl	8008770 <opmodeLora>
	ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 8008ad4:	2001      	movs	r0, #1
 8008ad6:	f7ff fdc0 	bl	800865a <readReg>
 8008ada:	4603      	mov	r3, r0
 8008adc:	b25b      	sxtb	r3, r3
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	db01      	blt.n	8008ae6 <txlora+0x1a>
 8008ae2:	f7fc f8c9 	bl	8004c78 <hal_failed>

	// enter standby mode (required for FIFO loading))
	opmode(OPMODE_STANDBY);
 8008ae6:	2001      	movs	r0, #1
 8008ae8:	f7ff fe28 	bl	800873c <opmode>
	// configure LoRa modem (cfg1, cfg2)
	configLoraModem();
 8008aec:	f7ff fe64 	bl	80087b8 <configLoraModem>
	// configure frequency
	configChannel();
 8008af0:	f7ff ff10 	bl	8008914 <configChannel>
	// configure output power
	writeReg(RegPaRamp, (readReg(RegPaRamp) & 0xF0) | 0x08); // set PA ramp-up time 50 uSec
 8008af4:	200a      	movs	r0, #10
 8008af6:	f7ff fdb0 	bl	800865a <readReg>
 8008afa:	4603      	mov	r3, r0
 8008afc:	b25b      	sxtb	r3, r3
 8008afe:	f023 030f 	bic.w	r3, r3, #15
 8008b02:	b25b      	sxtb	r3, r3
 8008b04:	f043 0308 	orr.w	r3, r3, #8
 8008b08:	b25b      	sxtb	r3, r3
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	200a      	movs	r0, #10
 8008b10:	f7ff fd86 	bl	8008620 <writeReg>
	configPower();
 8008b14:	f7ff ff3c 	bl	8008990 <configPower>
	// set sync word
	writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 8008b18:	2134      	movs	r1, #52	@ 0x34
 8008b1a:	2039      	movs	r0, #57	@ 0x39
 8008b1c:	f7ff fd80 	bl	8008620 <writeReg>

	// set the IRQ mapping DIO0=TxDone DIO1=NOP DIO2=NOP
	writeReg(RegDioMapping1,
 8008b20:	21f0      	movs	r1, #240	@ 0xf0
 8008b22:	2040      	movs	r0, #64	@ 0x40
 8008b24:	f7ff fd7c 	bl	8008620 <writeReg>
			MAP_DIO0_LORA_TXDONE | MAP_DIO1_LORA_NOP | MAP_DIO2_LORA_NOP);
	// clear all radio IRQ flags
	writeReg(LORARegIrqFlags, 0xFF);
 8008b28:	21ff      	movs	r1, #255	@ 0xff
 8008b2a:	2012      	movs	r0, #18
 8008b2c:	f7ff fd78 	bl	8008620 <writeReg>
	// mask all IRQs but TxDone
	writeReg(LORARegIrqFlagsMask, ~IRQ_LORA_TXDONE_MASK);
 8008b30:	21f7      	movs	r1, #247	@ 0xf7
 8008b32:	2011      	movs	r0, #17
 8008b34:	f7ff fd74 	bl	8008620 <writeReg>

	// initialize the payload size and address pointers    
	writeReg(LORARegFifoTxBaseAddr, 0x00);
 8008b38:	2100      	movs	r1, #0
 8008b3a:	200e      	movs	r0, #14
 8008b3c:	f7ff fd70 	bl	8008620 <writeReg>
	writeReg(LORARegFifoAddrPtr, 0x00);
 8008b40:	2100      	movs	r1, #0
 8008b42:	200d      	movs	r0, #13
 8008b44:	f7ff fd6c 	bl	8008620 <writeReg>
	writeReg(LORARegPayloadLength, LMIC.dataLen);
 8008b48:	4b0b      	ldr	r3, [pc, #44]	@ (8008b78 <txlora+0xac>)
 8008b4a:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8008b4e:	4619      	mov	r1, r3
 8008b50:	2022      	movs	r0, #34	@ 0x22
 8008b52:	f7ff fd65 	bl	8008620 <writeReg>

	// download buffer to the radio FIFO
	writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8008b56:	4b08      	ldr	r3, [pc, #32]	@ (8008b78 <txlora+0xac>)
 8008b58:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	4907      	ldr	r1, [pc, #28]	@ (8008b7c <txlora+0xb0>)
 8008b60:	2000      	movs	r0, #0
 8008b62:	f7ff fd96 	bl	8008692 <writeBuf>

	// enable antenna switch for TX
	hal_pin_rxtx(1);
 8008b66:	2001      	movs	r0, #1
 8008b68:	f7fb ff07 	bl	800497a <hal_pin_rxtx>

	// now we actually start the transmission
	opmode(OPMODE_TX);
 8008b6c:	2003      	movs	r0, #3
 8008b6e:	f7ff fde5 	bl	800873c <opmode>
}
 8008b72:	bf00      	nop
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	2000033c 	.word	0x2000033c
 8008b7c:	20000484 	.word	0x20000484

08008b80 <starttx>:

// start transmitter (buf=LMIC.frame, len=LMIC.dataLen)
static void starttx()
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	af00      	add	r7, sp, #0
	ASSERT((readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP);
 8008b84:	2001      	movs	r0, #1
 8008b86:	f7ff fd68 	bl	800865a <readReg>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	f003 0307 	and.w	r3, r3, #7
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d001      	beq.n	8008b98 <starttx+0x18>
 8008b94:	f7fc f870 	bl	8004c78 <hal_failed>
	if (getSf(LMIC.rps) == FSK) { // FSK modem
 8008b98:	4b07      	ldr	r3, [pc, #28]	@ (8008bb8 <starttx+0x38>)
 8008b9a:	89db      	ldrh	r3, [r3, #14]
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7fc f90b 	bl	8004db8 <getSf>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d102      	bne.n	8008bae <starttx+0x2e>
		txfsk();
 8008ba8:	f7ff ff22 	bl	80089f0 <txfsk>
	} else { // LoRa modem
		txlora();
	}
	// the radio will go back to STANDBY mode as soon as the TX is finished
	// the corresponding IRQ will inform us about completion.
}
 8008bac:	e001      	b.n	8008bb2 <starttx+0x32>
		txlora();
 8008bae:	f7ff ff8d 	bl	8008acc <txlora>
}
 8008bb2:	bf00      	nop
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	2000033c 	.word	0x2000033c

08008bbc <rxlora>:
		| IRQ_LORA_RXTOUT_MASK, [RXMODE_SCAN] = IRQ_LORA_RXDONE_MASK,
		[RXMODE_RSSI] = 0x00, };

// start LoRa receiver (time=LMIC.rxtime, timeout=LMIC.rxsyms, result=LMIC.frame[LMIC.dataLen])
static void rxlora(u1_t rxmode)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	71fb      	strb	r3, [r7, #7]
	// select LoRa modem (from sleep mode)
	opmodeLora();
 8008bc6:	f7ff fdd3 	bl	8008770 <opmodeLora>
	ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 8008bca:	2001      	movs	r0, #1
 8008bcc:	f7ff fd45 	bl	800865a <readReg>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	b25b      	sxtb	r3, r3
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	db01      	blt.n	8008bdc <rxlora+0x20>
 8008bd8:	f7fc f84e 	bl	8004c78 <hal_failed>
	// enter standby mode (warm up))
	opmode(OPMODE_STANDBY);
 8008bdc:	2001      	movs	r0, #1
 8008bde:	f7ff fdad 	bl	800873c <opmode>
	// don't use MAC settings at startup
	if (rxmode == RXMODE_RSSI) { // use fixed settings for rssi scan
 8008be2:	79fb      	ldrb	r3, [r7, #7]
 8008be4:	2b02      	cmp	r3, #2
 8008be6:	d108      	bne.n	8008bfa <rxlora+0x3e>
		writeReg(LORARegModemConfig1, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG1);
 8008be8:	210a      	movs	r1, #10
 8008bea:	201d      	movs	r0, #29
 8008bec:	f7ff fd18 	bl	8008620 <writeReg>
		writeReg(LORARegModemConfig2, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG2);
 8008bf0:	2170      	movs	r1, #112	@ 0x70
 8008bf2:	201e      	movs	r0, #30
 8008bf4:	f7ff fd14 	bl	8008620 <writeReg>
 8008bf8:	e003      	b.n	8008c02 <rxlora+0x46>
	} else { // single or continuous rx mode
		// configure LoRa modem (cfg1, cfg2)
		configLoraModem();
 8008bfa:	f7ff fddd 	bl	80087b8 <configLoraModem>
		// configure frequency
		configChannel();
 8008bfe:	f7ff fe89 	bl	8008914 <configChannel>
	}
	// set LNA gain
	writeReg(RegLna, LNA_RX_GAIN);
 8008c02:	2121      	movs	r1, #33	@ 0x21
 8008c04:	200c      	movs	r0, #12
 8008c06:	f7ff fd0b 	bl	8008620 <writeReg>
	// set max payload size
	writeReg(LORARegPayloadMaxLength, 64);
 8008c0a:	2140      	movs	r1, #64	@ 0x40
 8008c0c:	2023      	movs	r0, #35	@ 0x23
 8008c0e:	f7ff fd07 	bl	8008620 <writeReg>
	// use inverted I/Q signal (prevent mote-to-mote communication)

	// XXX: use flag to switch on/off inversion
	if (LMIC.noRXIQinversion) {
 8008c12:	4b26      	ldr	r3, [pc, #152]	@ (8008cac <rxlora+0xf0>)
 8008c14:	f893 31a8 	ldrb.w	r3, [r3, #424]	@ 0x1a8
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d00b      	beq.n	8008c34 <rxlora+0x78>
		writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ) & ~(1 << 6));
 8008c1c:	2033      	movs	r0, #51	@ 0x33
 8008c1e:	f7ff fd1c 	bl	800865a <readReg>
 8008c22:	4603      	mov	r3, r0
 8008c24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	2033      	movs	r0, #51	@ 0x33
 8008c2e:	f7ff fcf7 	bl	8008620 <writeReg>
 8008c32:	e00a      	b.n	8008c4a <rxlora+0x8e>
	} else {
		writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ) | (1 << 6));
 8008c34:	2033      	movs	r0, #51	@ 0x33
 8008c36:	f7ff fd10 	bl	800865a <readReg>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	4619      	mov	r1, r3
 8008c44:	2033      	movs	r0, #51	@ 0x33
 8008c46:	f7ff fceb 	bl	8008620 <writeReg>
	}

	// set symbol timeout (for single rx)
	writeReg(LORARegSymbTimeoutLsb, LMIC.rxsyms);
 8008c4a:	4b18      	ldr	r3, [pc, #96]	@ (8008cac <rxlora+0xf0>)
 8008c4c:	7c1b      	ldrb	r3, [r3, #16]
 8008c4e:	4619      	mov	r1, r3
 8008c50:	201f      	movs	r0, #31
 8008c52:	f7ff fce5 	bl	8008620 <writeReg>
	// set sync word
	writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 8008c56:	2134      	movs	r1, #52	@ 0x34
 8008c58:	2039      	movs	r0, #57	@ 0x39
 8008c5a:	f7ff fce1 	bl	8008620 <writeReg>

	// configure DIO mapping DIO0=RxDone DIO1=RxTout DIO2=NOP
	writeReg(RegDioMapping1,
 8008c5e:	21c0      	movs	r1, #192	@ 0xc0
 8008c60:	2040      	movs	r0, #64	@ 0x40
 8008c62:	f7ff fcdd 	bl	8008620 <writeReg>
			MAP_DIO0_LORA_RXDONE | MAP_DIO1_LORA_RXTOUT | MAP_DIO2_LORA_NOP);
	// clear all radio IRQ flags
	writeReg(LORARegIrqFlags, 0xFF);
 8008c66:	21ff      	movs	r1, #255	@ 0xff
 8008c68:	2012      	movs	r0, #18
 8008c6a:	f7ff fcd9 	bl	8008620 <writeReg>
	// enable required radio IRQs
	writeReg(LORARegIrqFlagsMask, ~rxlorairqmask[rxmode]);
 8008c6e:	79fb      	ldrb	r3, [r7, #7]
 8008c70:	4a0f      	ldr	r2, [pc, #60]	@ (8008cb0 <rxlora+0xf4>)
 8008c72:	5cd3      	ldrb	r3, [r2, r3]
 8008c74:	43db      	mvns	r3, r3
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	4619      	mov	r1, r3
 8008c7a:	2011      	movs	r0, #17
 8008c7c:	f7ff fcd0 	bl	8008620 <writeReg>

	// enable antenna switch for RX
	hal_pin_rxtx(0);
 8008c80:	2000      	movs	r0, #0
 8008c82:	f7fb fe7a 	bl	800497a <hal_pin_rxtx>

	// now instruct the radio to receive
	if (rxmode == RXMODE_SINGLE) { // single rx
 8008c86:	79fb      	ldrb	r3, [r7, #7]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d108      	bne.n	8008c9e <rxlora+0xe2>
		hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 8008c8c:	4b07      	ldr	r3, [pc, #28]	@ (8008cac <rxlora+0xf0>)
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7fb ff60 	bl	8004b56 <hal_waitUntil>
		opmode(OPMODE_RX_SINGLE);
 8008c96:	2006      	movs	r0, #6
 8008c98:	f7ff fd50 	bl	800873c <opmode>
	} else { // continous rx (scan or rssi)
		opmode(OPMODE_RX);
	}
}
 8008c9c:	e002      	b.n	8008ca4 <rxlora+0xe8>
		opmode(OPMODE_RX);
 8008c9e:	2005      	movs	r0, #5
 8008ca0:	f7ff fd4c 	bl	800873c <opmode>
}
 8008ca4:	bf00      	nop
 8008ca6:	3708      	adds	r7, #8
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	2000033c 	.word	0x2000033c
 8008cb0:	08012da0 	.word	0x08012da0

08008cb4 <rxfsk>:

static void rxfsk(u1_t rxmode)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	4603      	mov	r3, r0
 8008cbc:	71fb      	strb	r3, [r7, #7]
	// only single rx (no continuous scanning, no noise sampling)
	ASSERT(rxmode == RXMODE_SINGLE);
 8008cbe:	79fb      	ldrb	r3, [r7, #7]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d001      	beq.n	8008cc8 <rxfsk+0x14>
 8008cc4:	f7fb ffd8 	bl	8004c78 <hal_failed>
	// select FSK modem (from sleep mode)
	//writeReg(RegOpMode, 0x00); // (not LoRa)
	opmodeFSK();
 8008cc8:	f7ff fd64 	bl	8008794 <opmodeFSK>
	ASSERT((readReg(RegOpMode) & OPMODE_LORA) == 0);
 8008ccc:	2001      	movs	r0, #1
 8008cce:	f7ff fcc4 	bl	800865a <readReg>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	b25b      	sxtb	r3, r3
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	da01      	bge.n	8008cde <rxfsk+0x2a>
 8008cda:	f7fb ffcd 	bl	8004c78 <hal_failed>
	// enter standby mode (warm up))
	opmode(OPMODE_STANDBY);
 8008cde:	2001      	movs	r0, #1
 8008ce0:	f7ff fd2c 	bl	800873c <opmode>
	// configure frequency
	configChannel();
 8008ce4:	f7ff fe16 	bl	8008914 <configChannel>
	// set LNA gain
	//writeReg(RegLna, 0x20|0x03); // max gain, boost enable
	writeReg(RegLna, LNA_RX_GAIN);
 8008ce8:	2121      	movs	r1, #33	@ 0x21
 8008cea:	200c      	movs	r0, #12
 8008cec:	f7ff fc98 	bl	8008620 <writeReg>
	// configure receiver
	writeReg(FSKRegRxConfig, 0x1E); // AFC auto, AGC, trigger on preamble?!?
 8008cf0:	211e      	movs	r1, #30
 8008cf2:	200d      	movs	r0, #13
 8008cf4:	f7ff fc94 	bl	8008620 <writeReg>
	// set receiver bandwidth
	writeReg(FSKRegRxBw, 0x0B); // 50kHz SSb
 8008cf8:	210b      	movs	r1, #11
 8008cfa:	2012      	movs	r0, #18
 8008cfc:	f7ff fc90 	bl	8008620 <writeReg>
	// set AFC bandwidth
	writeReg(FSKRegAfcBw, 0x12); // 83.3kHz SSB
 8008d00:	2112      	movs	r1, #18
 8008d02:	2013      	movs	r0, #19
 8008d04:	f7ff fc8c 	bl	8008620 <writeReg>
	// set preamble detection
	writeReg(FSKRegPreambleDetect, 0xAA); // enable, 2 bytes, 10 chip errors
 8008d08:	21aa      	movs	r1, #170	@ 0xaa
 8008d0a:	201f      	movs	r0, #31
 8008d0c:	f7ff fc88 	bl	8008620 <writeReg>
	// set sync config
	writeReg(FSKRegSyncConfig, 0x12); // no auto restart, preamble 0xAA, enable, fill FIFO, 3 bytes sync
 8008d10:	2112      	movs	r1, #18
 8008d12:	2027      	movs	r0, #39	@ 0x27
 8008d14:	f7ff fc84 	bl	8008620 <writeReg>
	// set packet config
	writeReg(FSKRegPacketConfig1, 0xD8); // var-length, whitening, crc, no auto-clear, no adr filter
 8008d18:	21d8      	movs	r1, #216	@ 0xd8
 8008d1a:	2030      	movs	r0, #48	@ 0x30
 8008d1c:	f7ff fc80 	bl	8008620 <writeReg>
	writeReg(FSKRegPacketConfig2, 0x40); // packet mode
 8008d20:	2140      	movs	r1, #64	@ 0x40
 8008d22:	2031      	movs	r0, #49	@ 0x31
 8008d24:	f7ff fc7c 	bl	8008620 <writeReg>
	// set sync value
	writeReg(FSKRegSyncValue1, 0xC1);
 8008d28:	21c1      	movs	r1, #193	@ 0xc1
 8008d2a:	2028      	movs	r0, #40	@ 0x28
 8008d2c:	f7ff fc78 	bl	8008620 <writeReg>
	writeReg(FSKRegSyncValue2, 0x94);
 8008d30:	2194      	movs	r1, #148	@ 0x94
 8008d32:	2029      	movs	r0, #41	@ 0x29
 8008d34:	f7ff fc74 	bl	8008620 <writeReg>
	writeReg(FSKRegSyncValue3, 0xC1);
 8008d38:	21c1      	movs	r1, #193	@ 0xc1
 8008d3a:	202a      	movs	r0, #42	@ 0x2a
 8008d3c:	f7ff fc70 	bl	8008620 <writeReg>
	// set preamble timeout
	writeReg(FSKRegRxTimeout2, 0xFF);    //(LMIC.rxsyms+1)/2);
 8008d40:	21ff      	movs	r1, #255	@ 0xff
 8008d42:	2021      	movs	r0, #33	@ 0x21
 8008d44:	f7ff fc6c 	bl	8008620 <writeReg>
	// set bitrate
	writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 8008d48:	2102      	movs	r1, #2
 8008d4a:	2002      	movs	r0, #2
 8008d4c:	f7ff fc68 	bl	8008620 <writeReg>
	writeReg(FSKRegBitrateLsb, 0x80);
 8008d50:	2180      	movs	r1, #128	@ 0x80
 8008d52:	2003      	movs	r0, #3
 8008d54:	f7ff fc64 	bl	8008620 <writeReg>
	// set frequency deviation
	writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 8008d58:	2101      	movs	r1, #1
 8008d5a:	2004      	movs	r0, #4
 8008d5c:	f7ff fc60 	bl	8008620 <writeReg>
	writeReg(FSKRegFdevLsb, 0x99);
 8008d60:	2199      	movs	r1, #153	@ 0x99
 8008d62:	2005      	movs	r0, #5
 8008d64:	f7ff fc5c 	bl	8008620 <writeReg>

	// configure DIO mapping DIO0=PayloadReady DIO1=NOP DIO2=TimeOut
	writeReg(RegDioMapping1,
 8008d68:	2138      	movs	r1, #56	@ 0x38
 8008d6a:	2040      	movs	r0, #64	@ 0x40
 8008d6c:	f7ff fc58 	bl	8008620 <writeReg>
			MAP_DIO0_FSK_READY | MAP_DIO1_FSK_NOP | MAP_DIO2_FSK_TIMEOUT);

	// enable antenna switch for RX
	hal_pin_rxtx(0);
 8008d70:	2000      	movs	r0, #0
 8008d72:	f7fb fe02 	bl	800497a <hal_pin_rxtx>

	// now instruct the radio to receive
	hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 8008d76:	4b06      	ldr	r3, [pc, #24]	@ (8008d90 <rxfsk+0xdc>)
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7fb feeb 	bl	8004b56 <hal_waitUntil>
	opmode(OPMODE_RX); // no single rx mode available in FSK
 8008d80:	2005      	movs	r0, #5
 8008d82:	f7ff fcdb 	bl	800873c <opmode>
}
 8008d86:	bf00      	nop
 8008d88:	3708      	adds	r7, #8
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	bf00      	nop
 8008d90:	2000033c 	.word	0x2000033c

08008d94 <startrx>:

static void startrx(u1_t rxmode)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	71fb      	strb	r3, [r7, #7]
	ASSERT((readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP);
 8008d9e:	2001      	movs	r0, #1
 8008da0:	f7ff fc5b 	bl	800865a <readReg>
 8008da4:	4603      	mov	r3, r0
 8008da6:	f003 0307 	and.w	r3, r3, #7
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d001      	beq.n	8008db2 <startrx+0x1e>
 8008dae:	f7fb ff63 	bl	8004c78 <hal_failed>
	if (getSf(LMIC.rps) == FSK) { // FSK modem
 8008db2:	4b0a      	ldr	r3, [pc, #40]	@ (8008ddc <startrx+0x48>)
 8008db4:	89db      	ldrh	r3, [r3, #14]
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7fb fffe 	bl	8004db8 <getSf>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d104      	bne.n	8008dcc <startrx+0x38>
		rxfsk(rxmode);
 8008dc2:	79fb      	ldrb	r3, [r7, #7]
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7ff ff75 	bl	8008cb4 <rxfsk>
	} else { // LoRa modem
		rxlora(rxmode);
	}
	// the radio will go back to STANDBY mode as soon as the RX is finished
	// or timed out, and the corresponding IRQ will inform us about completion.
}
 8008dca:	e003      	b.n	8008dd4 <startrx+0x40>
		rxlora(rxmode);
 8008dcc:	79fb      	ldrb	r3, [r7, #7]
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7ff fef4 	bl	8008bbc <rxlora>
}
 8008dd4:	bf00      	nop
 8008dd6:	3708      	adds	r7, #8
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}
 8008ddc:	2000033c 	.word	0x2000033c

08008de0 <radio_init>:

// get random seed from wideband noise rssi
void radio_init()
{
 8008de0:	b590      	push	{r4, r7, lr}
 8008de2:	b085      	sub	sp, #20
 8008de4:	af00      	add	r7, sp, #0
	hal_disableIRQs();
 8008de6:	f7fb ff05 	bl	8004bf4 <hal_disableIRQs>

	// manually reset radio
#ifdef CFG_sx1276_radio
	hal_pin_rst(0); // drive RST pin low
 8008dea:	2000      	movs	r0, #0
 8008dec:	f7fb fde1 	bl	80049b2 <hal_pin_rst>
#else
    hal_pin_rst(1); // drive RST pin high
#endif
	hal_waitUntil(os_getTime() + ms2osticks(1)); // wait >100us
 8008df0:	f7ff fb40 	bl	8008474 <os_getTime>
 8008df4:	4603      	mov	r3, r0
 8008df6:	3320      	adds	r3, #32
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7fb feac 	bl	8004b56 <hal_waitUntil>
	hal_pin_rst(2); // configure RST pin floating!
 8008dfe:	2002      	movs	r0, #2
 8008e00:	f7fb fdd7 	bl	80049b2 <hal_pin_rst>
	hal_waitUntil(os_getTime() + ms2osticks(5)); // wait 5ms
 8008e04:	f7ff fb36 	bl	8008474 <os_getTime>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	33a0      	adds	r3, #160	@ 0xa0
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7fb fea2 	bl	8004b56 <hal_waitUntil>

	opmode(OPMODE_SLEEP);
 8008e12:	2000      	movs	r0, #0
 8008e14:	f7ff fc92 	bl	800873c <opmode>

	// some sanity checks, e.g., read version number
	u1_t v = readReg(RegVersion);
 8008e18:	2042      	movs	r0, #66	@ 0x42
 8008e1a:	f7ff fc1e 	bl	800865a <readReg>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
	ASSERT(v == 0x12);
 8008e22:	79fb      	ldrb	r3, [r7, #7]
 8008e24:	2b12      	cmp	r3, #18
 8008e26:	d001      	beq.n	8008e2c <radio_init+0x4c>
 8008e28:	f7fb ff26 	bl	8004c78 <hal_failed>
    ASSERT(v == 0x22);
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif
	// seed 15-byte randomness via noise rssi
	rxlora(RXMODE_RSSI);
 8008e2c:	2002      	movs	r0, #2
 8008e2e:	f7ff fec5 	bl	8008bbc <rxlora>
	while ((readReg(RegOpMode) & OPMODE_MASK) != OPMODE_RX)
 8008e32:	bf00      	nop
 8008e34:	2001      	movs	r0, #1
 8008e36:	f7ff fc10 	bl	800865a <readReg>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	f003 0307 	and.w	r3, r3, #7
 8008e40:	2b05      	cmp	r3, #5
 8008e42:	d1f7      	bne.n	8008e34 <radio_init+0x54>
		; // continuous rx
	for (int i = 1; i < 16; i++) {
 8008e44:	2301      	movs	r3, #1
 8008e46:	60fb      	str	r3, [r7, #12]
 8008e48:	e02c      	b.n	8008ea4 <radio_init+0xc4>
		for (int j = 0; j < 8; j++) {
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	60bb      	str	r3, [r7, #8]
 8008e4e:	e023      	b.n	8008e98 <radio_init+0xb8>
			u1_t b; // wait for two non-identical subsequent least-significant bits
			while ((b = readReg(LORARegRssiWideband) & 0x01)
 8008e50:	bf00      	nop
 8008e52:	202c      	movs	r0, #44	@ 0x2c
 8008e54:	f7ff fc01 	bl	800865a <readReg>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	f003 0301 	and.w	r3, r3, #1
 8008e5e:	71bb      	strb	r3, [r7, #6]
 8008e60:	79bc      	ldrb	r4, [r7, #6]
					== (readReg(LORARegRssiWideband) & 0x01))
 8008e62:	202c      	movs	r0, #44	@ 0x2c
 8008e64:	f7ff fbf9 	bl	800865a <readReg>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	f003 0301 	and.w	r3, r3, #1
 8008e6e:	429c      	cmp	r4, r3
 8008e70:	d0ef      	beq.n	8008e52 <radio_init+0x72>
				;
			randbuf[i] = (randbuf[i] << 1) | b;
 8008e72:	4a14      	ldr	r2, [pc, #80]	@ (8008ec4 <radio_init+0xe4>)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	4413      	add	r3, r2
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	005b      	lsls	r3, r3, #1
 8008e7c:	b25a      	sxtb	r2, r3
 8008e7e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008e82:	4313      	orrs	r3, r2
 8008e84:	b25b      	sxtb	r3, r3
 8008e86:	b2d9      	uxtb	r1, r3
 8008e88:	4a0e      	ldr	r2, [pc, #56]	@ (8008ec4 <radio_init+0xe4>)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	460a      	mov	r2, r1
 8008e90:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++) {
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	3301      	adds	r3, #1
 8008e96:	60bb      	str	r3, [r7, #8]
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	2b07      	cmp	r3, #7
 8008e9c:	ddd8      	ble.n	8008e50 <radio_init+0x70>
	for (int i = 1; i < 16; i++) {
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	60fb      	str	r3, [r7, #12]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2b0f      	cmp	r3, #15
 8008ea8:	ddcf      	ble.n	8008e4a <radio_init+0x6a>
		}
	}
	randbuf[0] = 16; // set initial index
 8008eaa:	4b06      	ldr	r3, [pc, #24]	@ (8008ec4 <radio_init+0xe4>)
 8008eac:	2210      	movs	r2, #16
 8008eae:	701a      	strb	r2, [r3, #0]
    // Launch Rx chain calibration for HF band 
    writeReg(FSKRegImageCal, (readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_MASK)|RF_IMAGECAL_IMAGECAL_START);
    while((readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_RUNNING) == RF_IMAGECAL_IMAGECAL_RUNNING) { ; }
#endif /* CFG_sx1276mb1_board */

	opmode(OPMODE_SLEEP);
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	f7ff fc43 	bl	800873c <opmode>

	hal_enableIRQs();
 8008eb6:	f7fb fead 	bl	8004c14 <hal_enableIRQs>
}
 8008eba:	bf00      	nop
 8008ebc:	3714      	adds	r7, #20
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd90      	pop	{r4, r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	2000055c 	.word	0x2000055c

08008ec8 <radio_rand1>:

// return next random byte derived from seed buffer
// (buf[0] holds index of next byte to be returned)
u1_t radio_rand1()
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
	u1_t i = randbuf[0];
 8008ece:	4b10      	ldr	r3, [pc, #64]	@ (8008f10 <radio_rand1+0x48>)
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	71fb      	strb	r3, [r7, #7]
	ASSERT(i != 0);
 8008ed4:	79fb      	ldrb	r3, [r7, #7]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d101      	bne.n	8008ede <radio_rand1+0x16>
 8008eda:	f7fb fecd 	bl	8004c78 <hal_failed>
	if (i == 16) {
 8008ede:	79fb      	ldrb	r3, [r7, #7]
 8008ee0:	2b10      	cmp	r3, #16
 8008ee2:	d106      	bne.n	8008ef2 <radio_rand1+0x2a>
		os_aes(AES_ENC, randbuf, 16); // encrypt seed with any key
 8008ee4:	2210      	movs	r2, #16
 8008ee6:	490a      	ldr	r1, [pc, #40]	@ (8008f10 <radio_rand1+0x48>)
 8008ee8:	2000      	movs	r0, #0
 8008eea:	f7f8 f9a5 	bl	8001238 <os_aes>
		i = 0;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	71fb      	strb	r3, [r7, #7]
	}
	u1_t v = randbuf[i++];
 8008ef2:	79fb      	ldrb	r3, [r7, #7]
 8008ef4:	1c5a      	adds	r2, r3, #1
 8008ef6:	71fa      	strb	r2, [r7, #7]
 8008ef8:	461a      	mov	r2, r3
 8008efa:	4b05      	ldr	r3, [pc, #20]	@ (8008f10 <radio_rand1+0x48>)
 8008efc:	5c9b      	ldrb	r3, [r3, r2]
 8008efe:	71bb      	strb	r3, [r7, #6]
	randbuf[0] = i;
 8008f00:	4a03      	ldr	r2, [pc, #12]	@ (8008f10 <radio_rand1+0x48>)
 8008f02:	79fb      	ldrb	r3, [r7, #7]
 8008f04:	7013      	strb	r3, [r2, #0]
	return v;
 8008f06:	79bb      	ldrb	r3, [r7, #6]
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3708      	adds	r7, #8
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	2000055c 	.word	0x2000055c

08008f14 <radio_irq_handler>:
		};

// called by hal ext IRQ handler
// (radio goes to stanby mode after tx/rx operations)
void radio_irq_handler(u1_t dio)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	71fb      	strb	r3, [r7, #7]
    u1_t s = readReg(RegOpMode);
    u1_t c = readReg(LORARegModemConfig2);
    opmode(OPMODE_TX);
    return;
#else /* ! CFG_TxContinuousMode */
	ostime_t now = os_getTime();
 8008f1e:	f7ff faa9 	bl	8008474 <os_getTime>
 8008f22:	60f8      	str	r0, [r7, #12]
	if ((readReg(RegOpMode) & OPMODE_LORA) != 0) { // LORA modem
 8008f24:	2001      	movs	r0, #1
 8008f26:	f7ff fb98 	bl	800865a <readReg>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	b25b      	sxtb	r3, r3
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	da74      	bge.n	800901c <radio_irq_handler+0x108>
		u1_t flags = readReg(LORARegIrqFlags);
 8008f32:	2012      	movs	r0, #18
 8008f34:	f7ff fb91 	bl	800865a <readReg>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	727b      	strb	r3, [r7, #9]
		if (flags & IRQ_LORA_TXDONE_MASK) {
 8008f3c:	7a7b      	ldrb	r3, [r7, #9]
 8008f3e:	f003 0308 	and.w	r3, r3, #8
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d004      	beq.n	8008f50 <radio_irq_handler+0x3c>
			// save exact tx time
			LMIC.txend = now - us2osticks(43); // TXDONE FIXUP
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	4a59      	ldr	r2, [pc, #356]	@ (80090b0 <radio_irq_handler+0x19c>)
 8008f4c:	6013      	str	r3, [r2, #0]
 8008f4e:	e05c      	b.n	800900a <radio_irq_handler+0xf6>
		} else if (flags & IRQ_LORA_RXDONE_MASK) {
 8008f50:	7a7b      	ldrb	r3, [r7, #9]
 8008f52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d04f      	beq.n	8008ffa <radio_irq_handler+0xe6>
			// save exact rx time
			if (getBw(LMIC.rps) == BW125) {
 8008f5a:	4b55      	ldr	r3, [pc, #340]	@ (80090b0 <radio_irq_handler+0x19c>)
 8008f5c:	89db      	ldrh	r3, [r3, #14]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7fb ff3a 	bl	8004dd8 <getBw>
 8008f64:	4603      	mov	r3, r0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d10d      	bne.n	8008f86 <radio_irq_handler+0x72>
				now -= LORA_RXDONE_FIXUP[getSf(LMIC.rps)];
 8008f6a:	4b51      	ldr	r3, [pc, #324]	@ (80090b0 <radio_irq_handler+0x19c>)
 8008f6c:	89db      	ldrh	r3, [r3, #14]
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7fb ff22 	bl	8004db8 <getSf>
 8008f74:	4603      	mov	r3, r0
 8008f76:	461a      	mov	r2, r3
 8008f78:	4b4e      	ldr	r3, [pc, #312]	@ (80090b4 <radio_irq_handler+0x1a0>)
 8008f7a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008f7e:	461a      	mov	r2, r3
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	1a9b      	subs	r3, r3, r2
 8008f84:	60fb      	str	r3, [r7, #12]
			}
			LMIC.rxtime = now;
 8008f86:	4a4a      	ldr	r2, [pc, #296]	@ (80090b0 <radio_irq_handler+0x19c>)
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6053      	str	r3, [r2, #4]
			// read the PDU and inform the MAC that we received something
			LMIC.dataLen =
					(readReg(LORARegModemConfig1)
 8008f8c:	201d      	movs	r0, #29
 8008f8e:	f7ff fb64 	bl	800865a <readReg>
 8008f92:	4603      	mov	r3, r0
							& SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
 8008f94:	f003 0304 	and.w	r3, r3, #4
			LMIC.dataLen =
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d005      	beq.n	8008fa8 <radio_irq_handler+0x94>
							readReg(LORARegPayloadLength) :
 8008f9c:	2022      	movs	r0, #34	@ 0x22
 8008f9e:	f7ff fb5c 	bl	800865a <readReg>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	e004      	b.n	8008fb2 <radio_irq_handler+0x9e>
							readReg(LORARegRxNbBytes);
 8008fa8:	2013      	movs	r0, #19
 8008faa:	f7ff fb56 	bl	800865a <readReg>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	461a      	mov	r2, r3
			LMIC.dataLen =
 8008fb2:	4b3f      	ldr	r3, [pc, #252]	@ (80090b0 <radio_irq_handler+0x19c>)
 8008fb4:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
			// set FIFO read address pointer
			writeReg(LORARegFifoAddrPtr, readReg(LORARegFifoRxCurrentAddr));
 8008fb8:	2010      	movs	r0, #16
 8008fba:	f7ff fb4e 	bl	800865a <readReg>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	200d      	movs	r0, #13
 8008fc4:	f7ff fb2c 	bl	8008620 <writeReg>
			// now read the FIFO
			readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8008fc8:	4b39      	ldr	r3, [pc, #228]	@ (80090b0 <radio_irq_handler+0x19c>)
 8008fca:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8008fce:	461a      	mov	r2, r3
 8008fd0:	4939      	ldr	r1, [pc, #228]	@ (80090b8 <radio_irq_handler+0x1a4>)
 8008fd2:	2000      	movs	r0, #0
 8008fd4:	f7ff fb87 	bl	80086e6 <readBuf>
			// read rx quality parameters
			LMIC.snr = readReg(LORARegPktSnrValue); // SNR [dB] * 4
 8008fd8:	2019      	movs	r0, #25
 8008fda:	f7ff fb3e 	bl	800865a <readReg>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	b25a      	sxtb	r2, r3
 8008fe2:	4b33      	ldr	r3, [pc, #204]	@ (80090b0 <radio_irq_handler+0x19c>)
 8008fe4:	735a      	strb	r2, [r3, #13]
			LMIC.rssi = readReg(LORARegPktRssiValue) - 125 + 64; // RSSI [dBm] (-196...+63)
 8008fe6:	201a      	movs	r0, #26
 8008fe8:	f7ff fb37 	bl	800865a <readReg>
 8008fec:	4603      	mov	r3, r0
 8008fee:	3b3d      	subs	r3, #61	@ 0x3d
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	b25a      	sxtb	r2, r3
 8008ff4:	4b2e      	ldr	r3, [pc, #184]	@ (80090b0 <radio_irq_handler+0x19c>)
 8008ff6:	731a      	strb	r2, [r3, #12]
 8008ff8:	e007      	b.n	800900a <radio_irq_handler+0xf6>
		} else if (flags & IRQ_LORA_RXTOUT_MASK) {
 8008ffa:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	da03      	bge.n	800900a <radio_irq_handler+0xf6>
			// indicate timeout
			LMIC.dataLen = 0;
 8009002:	4b2b      	ldr	r3, [pc, #172]	@ (80090b0 <radio_irq_handler+0x19c>)
 8009004:	2200      	movs	r2, #0
 8009006:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
		}
		// mask all radio IRQs
		writeReg(LORARegIrqFlagsMask, 0xFF);
 800900a:	21ff      	movs	r1, #255	@ 0xff
 800900c:	2011      	movs	r0, #17
 800900e:	f7ff fb07 	bl	8008620 <writeReg>
		// clear radio IRQ flags
		writeReg(LORARegIrqFlags, 0xFF);
 8009012:	21ff      	movs	r1, #255	@ 0xff
 8009014:	2012      	movs	r0, #18
 8009016:	f7ff fb03 	bl	8008620 <writeReg>
 800901a:	e03c      	b.n	8009096 <radio_irq_handler+0x182>
	} else { // FSK modem
		u1_t flags1 = readReg(FSKRegIrqFlags1);
 800901c:	203e      	movs	r0, #62	@ 0x3e
 800901e:	f7ff fb1c 	bl	800865a <readReg>
 8009022:	4603      	mov	r3, r0
 8009024:	72fb      	strb	r3, [r7, #11]
		u1_t flags2 = readReg(FSKRegIrqFlags2);
 8009026:	203f      	movs	r0, #63	@ 0x3f
 8009028:	f7ff fb17 	bl	800865a <readReg>
 800902c:	4603      	mov	r3, r0
 800902e:	72bb      	strb	r3, [r7, #10]
		if (flags2 & IRQ_FSK2_PACKETSENT_MASK) {
 8009030:	7abb      	ldrb	r3, [r7, #10]
 8009032:	f003 0308 	and.w	r3, r3, #8
 8009036:	2b00      	cmp	r3, #0
 8009038:	d003      	beq.n	8009042 <radio_irq_handler+0x12e>
			// save exact tx time
			LMIC.txend = now;
 800903a:	4a1d      	ldr	r2, [pc, #116]	@ (80090b0 <radio_irq_handler+0x19c>)
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	6013      	str	r3, [r2, #0]
 8009040:	e029      	b.n	8009096 <radio_irq_handler+0x182>
		} else if (flags2 & IRQ_FSK2_PAYLOADREADY_MASK) {
 8009042:	7abb      	ldrb	r3, [r7, #10]
 8009044:	f003 0304 	and.w	r3, r3, #4
 8009048:	2b00      	cmp	r3, #0
 800904a:	d019      	beq.n	8009080 <radio_irq_handler+0x16c>
			// save exact rx time
			LMIC.rxtime = now;
 800904c:	4a18      	ldr	r2, [pc, #96]	@ (80090b0 <radio_irq_handler+0x19c>)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6053      	str	r3, [r2, #4]
			// read the PDU and inform the MAC that we received something
			LMIC.dataLen = readReg(FSKRegPayloadLength);
 8009052:	2032      	movs	r0, #50	@ 0x32
 8009054:	f7ff fb01 	bl	800865a <readReg>
 8009058:	4603      	mov	r3, r0
 800905a:	461a      	mov	r2, r3
 800905c:	4b14      	ldr	r3, [pc, #80]	@ (80090b0 <radio_irq_handler+0x19c>)
 800905e:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
			// now read the FIFO
			readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8009062:	4b13      	ldr	r3, [pc, #76]	@ (80090b0 <radio_irq_handler+0x19c>)
 8009064:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8009068:	461a      	mov	r2, r3
 800906a:	4913      	ldr	r1, [pc, #76]	@ (80090b8 <radio_irq_handler+0x1a4>)
 800906c:	2000      	movs	r0, #0
 800906e:	f7ff fb3a 	bl	80086e6 <readBuf>
			// read rx quality parameters
			LMIC.snr = 0; // determine snr
 8009072:	4b0f      	ldr	r3, [pc, #60]	@ (80090b0 <radio_irq_handler+0x19c>)
 8009074:	2200      	movs	r2, #0
 8009076:	735a      	strb	r2, [r3, #13]
			LMIC.rssi = 0; // determine rssi
 8009078:	4b0d      	ldr	r3, [pc, #52]	@ (80090b0 <radio_irq_handler+0x19c>)
 800907a:	2200      	movs	r2, #0
 800907c:	731a      	strb	r2, [r3, #12]
 800907e:	e00a      	b.n	8009096 <radio_irq_handler+0x182>
		} else if (flags1 & IRQ_FSK1_TIMEOUT_MASK) {
 8009080:	7afb      	ldrb	r3, [r7, #11]
 8009082:	f003 0304 	and.w	r3, r3, #4
 8009086:	2b00      	cmp	r3, #0
 8009088:	d004      	beq.n	8009094 <radio_irq_handler+0x180>
			// indicate timeout
			LMIC.dataLen = 0;
 800908a:	4b09      	ldr	r3, [pc, #36]	@ (80090b0 <radio_irq_handler+0x19c>)
 800908c:	2200      	movs	r2, #0
 800908e:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 8009092:	e000      	b.n	8009096 <radio_irq_handler+0x182>
		} else {
			while (1)
 8009094:	e7fe      	b.n	8009094 <radio_irq_handler+0x180>
				;
		}
	}
	// go from stanby to sleep
	opmode(OPMODE_SLEEP);
 8009096:	2000      	movs	r0, #0
 8009098:	f7ff fb50 	bl	800873c <opmode>
	// run os job (use preset func ptr)
	os_setCallback(&LMIC.osjob, LMIC.osjob.func);
 800909c:	4b04      	ldr	r3, [pc, #16]	@ (80090b0 <radio_irq_handler+0x19c>)
 800909e:	69db      	ldr	r3, [r3, #28]
 80090a0:	4619      	mov	r1, r3
 80090a2:	4806      	ldr	r0, [pc, #24]	@ (80090bc <radio_irq_handler+0x1a8>)
 80090a4:	f7ff fa2a 	bl	80084fc <os_setCallback>
#endif /* ! CFG_TxContinuousMode */
}
 80090a8:	bf00      	nop
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	2000033c 	.word	0x2000033c
 80090b4:	08012da4 	.word	0x08012da4
 80090b8:	20000484 	.word	0x20000484
 80090bc:	20000350 	.word	0x20000350

080090c0 <os_radio>:

void os_radio(u1_t mode)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	4603      	mov	r3, r0
 80090c8:	71fb      	strb	r3, [r7, #7]
	hal_disableIRQs();
 80090ca:	f7fb fd93 	bl	8004bf4 <hal_disableIRQs>
	switch (mode) {
 80090ce:	79fb      	ldrb	r3, [r7, #7]
 80090d0:	2b03      	cmp	r3, #3
 80090d2:	d81a      	bhi.n	800910a <os_radio+0x4a>
 80090d4:	a201      	add	r2, pc, #4	@ (adr r2, 80090dc <os_radio+0x1c>)
 80090d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090da:	bf00      	nop
 80090dc:	080090ed 	.word	0x080090ed
 80090e0:	080090f5 	.word	0x080090f5
 80090e4:	080090fb 	.word	0x080090fb
 80090e8:	08009103 	.word	0x08009103
	case RADIO_RST:
		// put radio to sleep
		opmode(OPMODE_SLEEP);
 80090ec:	2000      	movs	r0, #0
 80090ee:	f7ff fb25 	bl	800873c <opmode>
		break;
 80090f2:	e00a      	b.n	800910a <os_radio+0x4a>

	case RADIO_TX:
		// transmit frame now
		starttx(); // buf=LMIC.frame, len=LMIC.dataLen
 80090f4:	f7ff fd44 	bl	8008b80 <starttx>
		break;
 80090f8:	e007      	b.n	800910a <os_radio+0x4a>

	case RADIO_RX:
		// receive frame now (exactly at rxtime)
		startrx(RXMODE_SINGLE); // buf=LMIC.frame, time=LMIC.rxtime, timeout=LMIC.rxsyms
 80090fa:	2000      	movs	r0, #0
 80090fc:	f7ff fe4a 	bl	8008d94 <startrx>
		break;
 8009100:	e003      	b.n	800910a <os_radio+0x4a>

	case RADIO_RXON:
		// start scanning for beacon now
		startrx(RXMODE_SCAN); // buf=LMIC.frame
 8009102:	2001      	movs	r0, #1
 8009104:	f7ff fe46 	bl	8008d94 <startrx>
		break;
 8009108:	bf00      	nop
	}
	hal_enableIRQs();
 800910a:	f7fb fd83 	bl	8004c14 <hal_enableIRQs>
}
 800910e:	bf00      	nop
 8009110:	3708      	adds	r7, #8
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop

08009118 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800911c:	4b1b      	ldr	r3, [pc, #108]	@ (800918c <MX_SPI3_Init+0x74>)
 800911e:	4a1c      	ldr	r2, [pc, #112]	@ (8009190 <MX_SPI3_Init+0x78>)
 8009120:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8009122:	4b1a      	ldr	r3, [pc, #104]	@ (800918c <MX_SPI3_Init+0x74>)
 8009124:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8009128:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800912a:	4b18      	ldr	r3, [pc, #96]	@ (800918c <MX_SPI3_Init+0x74>)
 800912c:	2200      	movs	r2, #0
 800912e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8009130:	4b16      	ldr	r3, [pc, #88]	@ (800918c <MX_SPI3_Init+0x74>)
 8009132:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8009136:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009138:	4b14      	ldr	r3, [pc, #80]	@ (800918c <MX_SPI3_Init+0x74>)
 800913a:	2200      	movs	r2, #0
 800913c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800913e:	4b13      	ldr	r3, [pc, #76]	@ (800918c <MX_SPI3_Init+0x74>)
 8009140:	2200      	movs	r2, #0
 8009142:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8009144:	4b11      	ldr	r3, [pc, #68]	@ (800918c <MX_SPI3_Init+0x74>)
 8009146:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800914a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800914c:	4b0f      	ldr	r3, [pc, #60]	@ (800918c <MX_SPI3_Init+0x74>)
 800914e:	2228      	movs	r2, #40	@ 0x28
 8009150:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009152:	4b0e      	ldr	r3, [pc, #56]	@ (800918c <MX_SPI3_Init+0x74>)
 8009154:	2200      	movs	r2, #0
 8009156:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8009158:	4b0c      	ldr	r3, [pc, #48]	@ (800918c <MX_SPI3_Init+0x74>)
 800915a:	2200      	movs	r2, #0
 800915c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800915e:	4b0b      	ldr	r3, [pc, #44]	@ (800918c <MX_SPI3_Init+0x74>)
 8009160:	2200      	movs	r2, #0
 8009162:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8009164:	4b09      	ldr	r3, [pc, #36]	@ (800918c <MX_SPI3_Init+0x74>)
 8009166:	2207      	movs	r2, #7
 8009168:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800916a:	4b08      	ldr	r3, [pc, #32]	@ (800918c <MX_SPI3_Init+0x74>)
 800916c:	2200      	movs	r2, #0
 800916e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8009170:	4b06      	ldr	r3, [pc, #24]	@ (800918c <MX_SPI3_Init+0x74>)
 8009172:	2208      	movs	r2, #8
 8009174:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8009176:	4805      	ldr	r0, [pc, #20]	@ (800918c <MX_SPI3_Init+0x74>)
 8009178:	f004 fa32 	bl	800d5e0 <HAL_SPI_Init>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d001      	beq.n	8009186 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8009182:	f7ff f95f 	bl	8008444 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8009186:	bf00      	nop
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	2000056c 	.word	0x2000056c
 8009190:	40003c00 	.word	0x40003c00

08009194 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b08a      	sub	sp, #40	@ 0x28
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800919c:	f107 0314 	add.w	r3, r7, #20
 80091a0:	2200      	movs	r2, #0
 80091a2:	601a      	str	r2, [r3, #0]
 80091a4:	605a      	str	r2, [r3, #4]
 80091a6:	609a      	str	r2, [r3, #8]
 80091a8:	60da      	str	r2, [r3, #12]
 80091aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a17      	ldr	r2, [pc, #92]	@ (8009210 <HAL_SPI_MspInit+0x7c>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d127      	bne.n	8009206 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80091b6:	4b17      	ldr	r3, [pc, #92]	@ (8009214 <HAL_SPI_MspInit+0x80>)
 80091b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091ba:	4a16      	ldr	r2, [pc, #88]	@ (8009214 <HAL_SPI_MspInit+0x80>)
 80091bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80091c2:	4b14      	ldr	r3, [pc, #80]	@ (8009214 <HAL_SPI_MspInit+0x80>)
 80091c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80091ca:	613b      	str	r3, [r7, #16]
 80091cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80091ce:	4b11      	ldr	r3, [pc, #68]	@ (8009214 <HAL_SPI_MspInit+0x80>)
 80091d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091d2:	4a10      	ldr	r2, [pc, #64]	@ (8009214 <HAL_SPI_MspInit+0x80>)
 80091d4:	f043 0302 	orr.w	r3, r3, #2
 80091d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80091da:	4b0e      	ldr	r3, [pc, #56]	@ (8009214 <HAL_SPI_MspInit+0x80>)
 80091dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091de:	f003 0302 	and.w	r3, r3, #2
 80091e2:	60fb      	str	r3, [r7, #12]
 80091e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80091e6:	2338      	movs	r3, #56	@ 0x38
 80091e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091ea:	2302      	movs	r3, #2
 80091ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091ee:	2300      	movs	r3, #0
 80091f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091f2:	2303      	movs	r3, #3
 80091f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80091f6:	2306      	movs	r3, #6
 80091f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80091fa:	f107 0314 	add.w	r3, r7, #20
 80091fe:	4619      	mov	r1, r3
 8009200:	4805      	ldr	r0, [pc, #20]	@ (8009218 <HAL_SPI_MspInit+0x84>)
 8009202:	f001 ffbf 	bl	800b184 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8009206:	bf00      	nop
 8009208:	3728      	adds	r7, #40	@ 0x28
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	40003c00 	.word	0x40003c00
 8009214:	40021000 	.word	0x40021000
 8009218:	48000400 	.word	0x48000400

0800921c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009222:	4b0f      	ldr	r3, [pc, #60]	@ (8009260 <HAL_MspInit+0x44>)
 8009224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009226:	4a0e      	ldr	r2, [pc, #56]	@ (8009260 <HAL_MspInit+0x44>)
 8009228:	f043 0301 	orr.w	r3, r3, #1
 800922c:	6613      	str	r3, [r2, #96]	@ 0x60
 800922e:	4b0c      	ldr	r3, [pc, #48]	@ (8009260 <HAL_MspInit+0x44>)
 8009230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009232:	f003 0301 	and.w	r3, r3, #1
 8009236:	607b      	str	r3, [r7, #4]
 8009238:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800923a:	4b09      	ldr	r3, [pc, #36]	@ (8009260 <HAL_MspInit+0x44>)
 800923c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800923e:	4a08      	ldr	r2, [pc, #32]	@ (8009260 <HAL_MspInit+0x44>)
 8009240:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009244:	6593      	str	r3, [r2, #88]	@ 0x58
 8009246:	4b06      	ldr	r3, [pc, #24]	@ (8009260 <HAL_MspInit+0x44>)
 8009248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800924a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800924e:	603b      	str	r3, [r7, #0]
 8009250:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009252:	bf00      	nop
 8009254:	370c      	adds	r7, #12
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	40021000 	.word	0x40021000

08009264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009264:	b480      	push	{r7}
 8009266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8009268:	bf00      	nop
 800926a:	e7fd      	b.n	8009268 <NMI_Handler+0x4>

0800926c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800926c:	b480      	push	{r7}
 800926e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009270:	bf00      	nop
 8009272:	e7fd      	b.n	8009270 <HardFault_Handler+0x4>

08009274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009274:	b480      	push	{r7}
 8009276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009278:	bf00      	nop
 800927a:	e7fd      	b.n	8009278 <MemManage_Handler+0x4>

0800927c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800927c:	b480      	push	{r7}
 800927e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009280:	bf00      	nop
 8009282:	e7fd      	b.n	8009280 <BusFault_Handler+0x4>

08009284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009284:	b480      	push	{r7}
 8009286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009288:	bf00      	nop
 800928a:	e7fd      	b.n	8009288 <UsageFault_Handler+0x4>

0800928c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800928c:	b480      	push	{r7}
 800928e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009290:	bf00      	nop
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr

0800929a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800929a:	b480      	push	{r7}
 800929c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800929e:	bf00      	nop
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr

080092a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80092a8:	b480      	push	{r7}
 80092aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80092ac:	bf00      	nop
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr

080092b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80092ba:	f000 fabb 	bl	8009834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80092be:	bf00      	nop
 80092c0:	bd80      	pop	{r7, pc}
	...

080092c4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80092c8:	4802      	ldr	r0, [pc, #8]	@ (80092d4 <ADC1_IRQHandler+0x10>)
 80092ca:	f000 fefa 	bl	800a0c2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80092ce:	bf00      	nop
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	200000e0 	.word	0x200000e0

080092d8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 80092dc:	2040      	movs	r0, #64	@ 0x40
 80092de:	f002 f8d3 	bl	800b488 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIO1_Pin);
 80092e2:	2080      	movs	r0, #128	@ 0x80
 80092e4:	f002 f8d0 	bl	800b488 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80092e8:	bf00      	nop
 80092ea:	bd80      	pop	{r7, pc}

080092ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80092f0:	4802      	ldr	r0, [pc, #8]	@ (80092fc <TIM6_DAC_IRQHandler+0x10>)
 80092f2:	f004 fe47 	bl	800df84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80092f6:	bf00      	nop
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	200005d4 	.word	0x200005d4

08009300 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8009304:	4802      	ldr	r0, [pc, #8]	@ (8009310 <TIM7_IRQHandler+0x10>)
 8009306:	f004 fe3d 	bl	800df84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800930a:	bf00      	nop
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	20000620 	.word	0x20000620

08009314 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009314:	b480      	push	{r7}
 8009316:	af00      	add	r7, sp, #0
	return 1;
 8009318:	2301      	movs	r3, #1
}
 800931a:	4618      	mov	r0, r3
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <_kill>:

int _kill(int pid, int sig)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 800932e:	f005 fe67 	bl	800f000 <__errno>
 8009332:	4603      	mov	r3, r0
 8009334:	2216      	movs	r2, #22
 8009336:	601a      	str	r2, [r3, #0]
	return -1;
 8009338:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800933c:	4618      	mov	r0, r3
 800933e:	3708      	adds	r7, #8
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <_exit>:

void _exit(int status)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800934c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f7ff ffe7 	bl	8009324 <_kill>
	while (1) {
 8009356:	bf00      	nop
 8009358:	e7fd      	b.n	8009356 <_exit+0x12>

0800935a <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b086      	sub	sp, #24
 800935e:	af00      	add	r7, sp, #0
 8009360:	60f8      	str	r0, [r7, #12]
 8009362:	60b9      	str	r1, [r7, #8]
 8009364:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8009366:	2300      	movs	r3, #0
 8009368:	617b      	str	r3, [r7, #20]
 800936a:	e00a      	b.n	8009382 <_read+0x28>
		*ptr++ = __io_getchar();
 800936c:	f3af 8000 	nop.w
 8009370:	4601      	mov	r1, r0
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	1c5a      	adds	r2, r3, #1
 8009376:	60ba      	str	r2, [r7, #8]
 8009378:	b2ca      	uxtb	r2, r1
 800937a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	3301      	adds	r3, #1
 8009380:	617b      	str	r3, [r7, #20]
 8009382:	697a      	ldr	r2, [r7, #20]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	429a      	cmp	r2, r3
 8009388:	dbf0      	blt.n	800936c <_read+0x12>
	}

	return len;
 800938a:	687b      	ldr	r3, [r7, #4]
}
 800938c:	4618      	mov	r0, r3
 800938e:	3718      	adds	r7, #24
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b086      	sub	sp, #24
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80093a0:	2300      	movs	r3, #0
 80093a2:	617b      	str	r3, [r7, #20]
 80093a4:	e009      	b.n	80093ba <_write+0x26>
		__io_putchar(*ptr++);
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	1c5a      	adds	r2, r3, #1
 80093aa:	60ba      	str	r2, [r7, #8]
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	4618      	mov	r0, r3
 80093b0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	3301      	adds	r3, #1
 80093b8:	617b      	str	r3, [r7, #20]
 80093ba:	697a      	ldr	r2, [r7, #20]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	429a      	cmp	r2, r3
 80093c0:	dbf1      	blt.n	80093a6 <_write+0x12>
	}
	return len;
 80093c2:	687b      	ldr	r3, [r7, #4]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3718      	adds	r7, #24
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <_close>:

int _close(int file)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80093d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80093d8:	4618      	mov	r0, r3
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <_fstat>:

int _fstat(int file, struct stat *st)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80093f4:	605a      	str	r2, [r3, #4]
	return 0;
 80093f6:	2300      	movs	r3, #0
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	370c      	adds	r7, #12
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr

08009404 <_isatty>:

int _isatty(int file)
{
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 800940c:	2301      	movs	r3, #1
}
 800940e:	4618      	mov	r0, r3
 8009410:	370c      	adds	r7, #12
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr

0800941a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800941a:	b480      	push	{r7}
 800941c:	b085      	sub	sp, #20
 800941e:	af00      	add	r7, sp, #0
 8009420:	60f8      	str	r0, [r7, #12]
 8009422:	60b9      	str	r1, [r7, #8]
 8009424:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8009426:	2300      	movs	r3, #0
}
 8009428:	4618      	mov	r0, r3
 800942a:	3714      	adds	r7, #20
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b086      	sub	sp, #24
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 800943c:	4a14      	ldr	r2, [pc, #80]	@ (8009490 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800943e:	4b15      	ldr	r3, [pc, #84]	@ (8009494 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8009448:	4b13      	ldr	r3, [pc, #76]	@ (8009498 <_sbrk+0x64>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d102      	bne.n	8009456 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8009450:	4b11      	ldr	r3, [pc, #68]	@ (8009498 <_sbrk+0x64>)
 8009452:	4a12      	ldr	r2, [pc, #72]	@ (800949c <_sbrk+0x68>)
 8009454:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8009456:	4b10      	ldr	r3, [pc, #64]	@ (8009498 <_sbrk+0x64>)
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4413      	add	r3, r2
 800945e:	693a      	ldr	r2, [r7, #16]
 8009460:	429a      	cmp	r2, r3
 8009462:	d207      	bcs.n	8009474 <_sbrk+0x40>
		errno = ENOMEM;
 8009464:	f005 fdcc 	bl	800f000 <__errno>
 8009468:	4603      	mov	r3, r0
 800946a:	220c      	movs	r2, #12
 800946c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800946e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009472:	e009      	b.n	8009488 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8009474:	4b08      	ldr	r3, [pc, #32]	@ (8009498 <_sbrk+0x64>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800947a:	4b07      	ldr	r3, [pc, #28]	@ (8009498 <_sbrk+0x64>)
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	4413      	add	r3, r2
 8009482:	4a05      	ldr	r2, [pc, #20]	@ (8009498 <_sbrk+0x64>)
 8009484:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8009486:	68fb      	ldr	r3, [r7, #12]
}
 8009488:	4618      	mov	r0, r3
 800948a:	3718      	adds	r7, #24
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}
 8009490:	2000c000 	.word	0x2000c000
 8009494:	00000400 	.word	0x00000400
 8009498:	200005d0 	.word	0x200005d0
 800949c:	20000848 	.word	0x20000848

080094a0 <SystemInit>:
 * @brief  Setup the microcontroller system.
 * @retval None
 */

void SystemInit(void)
{
 80094a0:	b480      	push	{r7}
 80094a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 80094a4:	4b06      	ldr	r3, [pc, #24]	@ (80094c0 <SystemInit+0x20>)
 80094a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094aa:	4a05      	ldr	r2, [pc, #20]	@ (80094c0 <SystemInit+0x20>)
 80094ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80094b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80094b4:	bf00      	nop
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr
 80094be:	bf00      	nop
 80094c0:	e000ed00 	.word	0xe000ed00

080094c4 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80094ca:	1d3b      	adds	r3, r7, #4
 80094cc:	2200      	movs	r2, #0
 80094ce:	601a      	str	r2, [r3, #0]
 80094d0:	605a      	str	r2, [r3, #4]
 80094d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80094d4:	4b15      	ldr	r3, [pc, #84]	@ (800952c <MX_TIM6_Init+0x68>)
 80094d6:	4a16      	ldr	r2, [pc, #88]	@ (8009530 <MX_TIM6_Init+0x6c>)
 80094d8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1222-1;
 80094da:	4b14      	ldr	r3, [pc, #80]	@ (800952c <MX_TIM6_Init+0x68>)
 80094dc:	f240 42c5 	movw	r2, #1221	@ 0x4c5
 80094e0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80094e2:	4b12      	ldr	r3, [pc, #72]	@ (800952c <MX_TIM6_Init+0x68>)
 80094e4:	2200      	movs	r2, #0
 80094e6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65521-1;
 80094e8:	4b10      	ldr	r3, [pc, #64]	@ (800952c <MX_TIM6_Init+0x68>)
 80094ea:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 80094ee:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80094f0:	4b0e      	ldr	r3, [pc, #56]	@ (800952c <MX_TIM6_Init+0x68>)
 80094f2:	2200      	movs	r2, #0
 80094f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80094f6:	480d      	ldr	r0, [pc, #52]	@ (800952c <MX_TIM6_Init+0x68>)
 80094f8:	f004 fc98 	bl	800de2c <HAL_TIM_Base_Init>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d001      	beq.n	8009506 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8009502:	f7fe ff9f 	bl	8008444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009506:	2300      	movs	r3, #0
 8009508:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800950a:	2300      	movs	r3, #0
 800950c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800950e:	1d3b      	adds	r3, r7, #4
 8009510:	4619      	mov	r1, r3
 8009512:	4806      	ldr	r0, [pc, #24]	@ (800952c <MX_TIM6_Init+0x68>)
 8009514:	f004 fed6 	bl	800e2c4 <HAL_TIMEx_MasterConfigSynchronization>
 8009518:	4603      	mov	r3, r0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d001      	beq.n	8009522 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800951e:	f7fe ff91 	bl	8008444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8009522:	bf00      	nop
 8009524:	3710      	adds	r7, #16
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	200005d4 	.word	0x200005d4
 8009530:	40001000 	.word	0x40001000

08009534 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800953a:	1d3b      	adds	r3, r7, #4
 800953c:	2200      	movs	r2, #0
 800953e:	601a      	str	r2, [r3, #0]
 8009540:	605a      	str	r2, [r3, #4]
 8009542:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8009544:	4b15      	ldr	r3, [pc, #84]	@ (800959c <MX_TIM7_Init+0x68>)
 8009546:	4a16      	ldr	r2, [pc, #88]	@ (80095a0 <MX_TIM7_Init+0x6c>)
 8009548:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2500-1;
 800954a:	4b14      	ldr	r3, [pc, #80]	@ (800959c <MX_TIM7_Init+0x68>)
 800954c:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8009550:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009552:	4b12      	ldr	r3, [pc, #72]	@ (800959c <MX_TIM7_Init+0x68>)
 8009554:	2200      	movs	r2, #0
 8009556:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8009558:	4b10      	ldr	r3, [pc, #64]	@ (800959c <MX_TIM7_Init+0x68>)
 800955a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800955e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009560:	4b0e      	ldr	r3, [pc, #56]	@ (800959c <MX_TIM7_Init+0x68>)
 8009562:	2200      	movs	r2, #0
 8009564:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8009566:	480d      	ldr	r0, [pc, #52]	@ (800959c <MX_TIM7_Init+0x68>)
 8009568:	f004 fc60 	bl	800de2c <HAL_TIM_Base_Init>
 800956c:	4603      	mov	r3, r0
 800956e:	2b00      	cmp	r3, #0
 8009570:	d001      	beq.n	8009576 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8009572:	f7fe ff67 	bl	8008444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009576:	2300      	movs	r3, #0
 8009578:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800957a:	2300      	movs	r3, #0
 800957c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800957e:	1d3b      	adds	r3, r7, #4
 8009580:	4619      	mov	r1, r3
 8009582:	4806      	ldr	r0, [pc, #24]	@ (800959c <MX_TIM7_Init+0x68>)
 8009584:	f004 fe9e 	bl	800e2c4 <HAL_TIMEx_MasterConfigSynchronization>
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	d001      	beq.n	8009592 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800958e:	f7fe ff59 	bl	8008444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8009592:	bf00      	nop
 8009594:	3710      	adds	r7, #16
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	20000620 	.word	0x20000620
 80095a0:	40001400 	.word	0x40001400

080095a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a1a      	ldr	r2, [pc, #104]	@ (800961c <HAL_TIM_Base_MspInit+0x78>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d114      	bne.n	80095e0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80095b6:	4b1a      	ldr	r3, [pc, #104]	@ (8009620 <HAL_TIM_Base_MspInit+0x7c>)
 80095b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095ba:	4a19      	ldr	r2, [pc, #100]	@ (8009620 <HAL_TIM_Base_MspInit+0x7c>)
 80095bc:	f043 0310 	orr.w	r3, r3, #16
 80095c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80095c2:	4b17      	ldr	r3, [pc, #92]	@ (8009620 <HAL_TIM_Base_MspInit+0x7c>)
 80095c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095c6:	f003 0310 	and.w	r3, r3, #16
 80095ca:	60fb      	str	r3, [r7, #12]
 80095cc:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80095ce:	2200      	movs	r2, #0
 80095d0:	2100      	movs	r1, #0
 80095d2:	2036      	movs	r0, #54	@ 0x36
 80095d4:	f001 fd9f 	bl	800b116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80095d8:	2036      	movs	r0, #54	@ 0x36
 80095da:	f001 fdb8 	bl	800b14e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80095de:	e018      	b.n	8009612 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a0f      	ldr	r2, [pc, #60]	@ (8009624 <HAL_TIM_Base_MspInit+0x80>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d113      	bne.n	8009612 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80095ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009620 <HAL_TIM_Base_MspInit+0x7c>)
 80095ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095ee:	4a0c      	ldr	r2, [pc, #48]	@ (8009620 <HAL_TIM_Base_MspInit+0x7c>)
 80095f0:	f043 0320 	orr.w	r3, r3, #32
 80095f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80095f6:	4b0a      	ldr	r3, [pc, #40]	@ (8009620 <HAL_TIM_Base_MspInit+0x7c>)
 80095f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095fa:	f003 0320 	and.w	r3, r3, #32
 80095fe:	60bb      	str	r3, [r7, #8]
 8009600:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8009602:	2200      	movs	r2, #0
 8009604:	2100      	movs	r1, #0
 8009606:	2037      	movs	r0, #55	@ 0x37
 8009608:	f001 fd85 	bl	800b116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800960c:	2037      	movs	r0, #55	@ 0x37
 800960e:	f001 fd9e 	bl	800b14e <HAL_NVIC_EnableIRQ>
}
 8009612:	bf00      	nop
 8009614:	3710      	adds	r7, #16
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	40001000 	.word	0x40001000
 8009620:	40021000 	.word	0x40021000
 8009624:	40001400 	.word	0x40001400

08009628 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800962c:	4b14      	ldr	r3, [pc, #80]	@ (8009680 <MX_USART2_UART_Init+0x58>)
 800962e:	4a15      	ldr	r2, [pc, #84]	@ (8009684 <MX_USART2_UART_Init+0x5c>)
 8009630:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8009632:	4b13      	ldr	r3, [pc, #76]	@ (8009680 <MX_USART2_UART_Init+0x58>)
 8009634:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8009638:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800963a:	4b11      	ldr	r3, [pc, #68]	@ (8009680 <MX_USART2_UART_Init+0x58>)
 800963c:	2200      	movs	r2, #0
 800963e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009640:	4b0f      	ldr	r3, [pc, #60]	@ (8009680 <MX_USART2_UART_Init+0x58>)
 8009642:	2200      	movs	r2, #0
 8009644:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009646:	4b0e      	ldr	r3, [pc, #56]	@ (8009680 <MX_USART2_UART_Init+0x58>)
 8009648:	2200      	movs	r2, #0
 800964a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800964c:	4b0c      	ldr	r3, [pc, #48]	@ (8009680 <MX_USART2_UART_Init+0x58>)
 800964e:	220c      	movs	r2, #12
 8009650:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009652:	4b0b      	ldr	r3, [pc, #44]	@ (8009680 <MX_USART2_UART_Init+0x58>)
 8009654:	2200      	movs	r2, #0
 8009656:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009658:	4b09      	ldr	r3, [pc, #36]	@ (8009680 <MX_USART2_UART_Init+0x58>)
 800965a:	2200      	movs	r2, #0
 800965c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800965e:	4b08      	ldr	r3, [pc, #32]	@ (8009680 <MX_USART2_UART_Init+0x58>)
 8009660:	2200      	movs	r2, #0
 8009662:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009664:	4b06      	ldr	r3, [pc, #24]	@ (8009680 <MX_USART2_UART_Init+0x58>)
 8009666:	2200      	movs	r2, #0
 8009668:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800966a:	4805      	ldr	r0, [pc, #20]	@ (8009680 <MX_USART2_UART_Init+0x58>)
 800966c:	f004 feae 	bl	800e3cc <HAL_UART_Init>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d001      	beq.n	800967a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8009676:	f7fe fee5 	bl	8008444 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800967a:	bf00      	nop
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	2000066c 	.word	0x2000066c
 8009684:	40004400 	.word	0x40004400

08009688 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b09e      	sub	sp, #120	@ 0x78
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009690:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8009694:	2200      	movs	r2, #0
 8009696:	601a      	str	r2, [r3, #0]
 8009698:	605a      	str	r2, [r3, #4]
 800969a:	609a      	str	r2, [r3, #8]
 800969c:	60da      	str	r2, [r3, #12]
 800969e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80096a0:	f107 0310 	add.w	r3, r7, #16
 80096a4:	2254      	movs	r2, #84	@ 0x54
 80096a6:	2100      	movs	r1, #0
 80096a8:	4618      	mov	r0, r3
 80096aa:	f005 fca1 	bl	800eff0 <memset>
  if(uartHandle->Instance==USART2)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a1f      	ldr	r2, [pc, #124]	@ (8009730 <HAL_UART_MspInit+0xa8>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d136      	bne.n	8009726 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80096b8:	2302      	movs	r3, #2
 80096ba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80096bc:	2300      	movs	r3, #0
 80096be:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80096c0:	f107 0310 	add.w	r3, r7, #16
 80096c4:	4618      	mov	r0, r3
 80096c6:	f003 fca3 	bl	800d010 <HAL_RCCEx_PeriphCLKConfig>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d001      	beq.n	80096d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80096d0:	f7fe feb8 	bl	8008444 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80096d4:	4b17      	ldr	r3, [pc, #92]	@ (8009734 <HAL_UART_MspInit+0xac>)
 80096d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096d8:	4a16      	ldr	r2, [pc, #88]	@ (8009734 <HAL_UART_MspInit+0xac>)
 80096da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80096de:	6593      	str	r3, [r2, #88]	@ 0x58
 80096e0:	4b14      	ldr	r3, [pc, #80]	@ (8009734 <HAL_UART_MspInit+0xac>)
 80096e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096e8:	60fb      	str	r3, [r7, #12]
 80096ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80096ec:	4b11      	ldr	r3, [pc, #68]	@ (8009734 <HAL_UART_MspInit+0xac>)
 80096ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096f0:	4a10      	ldr	r2, [pc, #64]	@ (8009734 <HAL_UART_MspInit+0xac>)
 80096f2:	f043 0301 	orr.w	r3, r3, #1
 80096f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80096f8:	4b0e      	ldr	r3, [pc, #56]	@ (8009734 <HAL_UART_MspInit+0xac>)
 80096fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096fc:	f003 0301 	and.w	r3, r3, #1
 8009700:	60bb      	str	r3, [r7, #8]
 8009702:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009704:	230c      	movs	r3, #12
 8009706:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009708:	2302      	movs	r3, #2
 800970a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800970c:	2300      	movs	r3, #0
 800970e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009710:	2303      	movs	r3, #3
 8009712:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009714:	2307      	movs	r3, #7
 8009716:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009718:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800971c:	4619      	mov	r1, r3
 800971e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009722:	f001 fd2f 	bl	800b184 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8009726:	bf00      	nop
 8009728:	3778      	adds	r7, #120	@ 0x78
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	40004400 	.word	0x40004400
 8009734:	40021000 	.word	0x40021000

08009738 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8009738:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8009770 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800973c:	f7ff feb0 	bl	80094a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009740:	480c      	ldr	r0, [pc, #48]	@ (8009774 <LoopForever+0x6>)
  ldr r1, =_edata
 8009742:	490d      	ldr	r1, [pc, #52]	@ (8009778 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009744:	4a0d      	ldr	r2, [pc, #52]	@ (800977c <LoopForever+0xe>)
  movs r3, #0
 8009746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009748:	e002      	b.n	8009750 <LoopCopyDataInit>

0800974a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800974a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800974c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800974e:	3304      	adds	r3, #4

08009750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009754:	d3f9      	bcc.n	800974a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009756:	4a0a      	ldr	r2, [pc, #40]	@ (8009780 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009758:	4c0a      	ldr	r4, [pc, #40]	@ (8009784 <LoopForever+0x16>)
  movs r3, #0
 800975a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800975c:	e001      	b.n	8009762 <LoopFillZerobss>

0800975e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800975e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009760:	3204      	adds	r2, #4

08009762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009764:	d3fb      	bcc.n	800975e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009766:	f005 fc51 	bl	800f00c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800976a:	f7fe fd95 	bl	8008298 <main>

0800976e <LoopForever>:

LoopForever:
    b LoopForever
 800976e:	e7fe      	b.n	800976e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8009770:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8009774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009778:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 800977c:	08013060 	.word	0x08013060
  ldr r2, =_sbss
 8009780:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8009784:	20000844 	.word	0x20000844

08009788 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009788:	e7fe      	b.n	8009788 <CAN1_RX0_IRQHandler>

0800978a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b082      	sub	sp, #8
 800978e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009790:	2300      	movs	r3, #0
 8009792:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009794:	2003      	movs	r0, #3
 8009796:	f001 fcb3 	bl	800b100 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800979a:	200f      	movs	r0, #15
 800979c:	f000 f80e 	bl	80097bc <HAL_InitTick>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d002      	beq.n	80097ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80097a6:	2301      	movs	r3, #1
 80097a8:	71fb      	strb	r3, [r7, #7]
 80097aa:	e001      	b.n	80097b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80097ac:	f7ff fd36 	bl	800921c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80097b0:	79fb      	ldrb	r3, [r7, #7]
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3708      	adds	r7, #8
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
	...

080097bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80097c4:	2300      	movs	r3, #0
 80097c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80097c8:	4b17      	ldr	r3, [pc, #92]	@ (8009828 <HAL_InitTick+0x6c>)
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d023      	beq.n	8009818 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80097d0:	4b16      	ldr	r3, [pc, #88]	@ (800982c <HAL_InitTick+0x70>)
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	4b14      	ldr	r3, [pc, #80]	@ (8009828 <HAL_InitTick+0x6c>)
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	4619      	mov	r1, r3
 80097da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80097de:	fbb3 f3f1 	udiv	r3, r3, r1
 80097e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80097e6:	4618      	mov	r0, r3
 80097e8:	f001 fcbf 	bl	800b16a <HAL_SYSTICK_Config>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d10f      	bne.n	8009812 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2b0f      	cmp	r3, #15
 80097f6:	d809      	bhi.n	800980c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80097f8:	2200      	movs	r2, #0
 80097fa:	6879      	ldr	r1, [r7, #4]
 80097fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009800:	f001 fc89 	bl	800b116 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009804:	4a0a      	ldr	r2, [pc, #40]	@ (8009830 <HAL_InitTick+0x74>)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6013      	str	r3, [r2, #0]
 800980a:	e007      	b.n	800981c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800980c:	2301      	movs	r3, #1
 800980e:	73fb      	strb	r3, [r7, #15]
 8009810:	e004      	b.n	800981c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	73fb      	strb	r3, [r7, #15]
 8009816:	e001      	b.n	800981c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8009818:	2301      	movs	r3, #1
 800981a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800981c:	7bfb      	ldrb	r3, [r7, #15]
}
 800981e:	4618      	mov	r0, r3
 8009820:	3710      	adds	r7, #16
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	20000064 	.word	0x20000064
 800982c:	2000005c 	.word	0x2000005c
 8009830:	20000060 	.word	0x20000060

08009834 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009834:	b480      	push	{r7}
 8009836:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009838:	4b06      	ldr	r3, [pc, #24]	@ (8009854 <HAL_IncTick+0x20>)
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	461a      	mov	r2, r3
 800983e:	4b06      	ldr	r3, [pc, #24]	@ (8009858 <HAL_IncTick+0x24>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4413      	add	r3, r2
 8009844:	4a04      	ldr	r2, [pc, #16]	@ (8009858 <HAL_IncTick+0x24>)
 8009846:	6013      	str	r3, [r2, #0]
}
 8009848:	bf00      	nop
 800984a:	46bd      	mov	sp, r7
 800984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009850:	4770      	bx	lr
 8009852:	bf00      	nop
 8009854:	20000064 	.word	0x20000064
 8009858:	200006f4 	.word	0x200006f4

0800985c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800985c:	b480      	push	{r7}
 800985e:	af00      	add	r7, sp, #0
  return uwTick;
 8009860:	4b03      	ldr	r3, [pc, #12]	@ (8009870 <HAL_GetTick+0x14>)
 8009862:	681b      	ldr	r3, [r3, #0]
}
 8009864:	4618      	mov	r0, r3
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr
 800986e:	bf00      	nop
 8009870:	200006f4 	.word	0x200006f4

08009874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800987c:	f7ff ffee 	bl	800985c <HAL_GetTick>
 8009880:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800988c:	d005      	beq.n	800989a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800988e:	4b0a      	ldr	r3, [pc, #40]	@ (80098b8 <HAL_Delay+0x44>)
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	461a      	mov	r2, r3
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	4413      	add	r3, r2
 8009898:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800989a:	bf00      	nop
 800989c:	f7ff ffde 	bl	800985c <HAL_GetTick>
 80098a0:	4602      	mov	r2, r0
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	1ad3      	subs	r3, r2, r3
 80098a6:	68fa      	ldr	r2, [r7, #12]
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d8f7      	bhi.n	800989c <HAL_Delay+0x28>
  {
  }
}
 80098ac:	bf00      	nop
 80098ae:	bf00      	nop
 80098b0:	3710      	adds	r7, #16
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	20000064 	.word	0x20000064

080098bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	431a      	orrs	r2, r3
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	609a      	str	r2, [r3, #8]
}
 80098d6:	bf00      	nop
 80098d8:	370c      	adds	r7, #12
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr

080098e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80098e2:	b480      	push	{r7}
 80098e4:	b083      	sub	sp, #12
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
 80098ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	689b      	ldr	r3, [r3, #8]
 80098f0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	431a      	orrs	r2, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	609a      	str	r2, [r3, #8]
}
 80098fc:	bf00      	nop
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8009918:	4618      	mov	r0, r3
 800991a:	370c      	adds	r7, #12
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8009924:	b480      	push	{r7}
 8009926:	b087      	sub	sp, #28
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	607a      	str	r2, [r7, #4]
 8009930:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	3360      	adds	r3, #96	@ 0x60
 8009936:	461a      	mov	r2, r3
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	009b      	lsls	r3, r3, #2
 800993c:	4413      	add	r3, r2
 800993e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	4b08      	ldr	r3, [pc, #32]	@ (8009968 <LL_ADC_SetOffset+0x44>)
 8009946:	4013      	ands	r3, r2
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800994e:	683a      	ldr	r2, [r7, #0]
 8009950:	430a      	orrs	r2, r1
 8009952:	4313      	orrs	r3, r2
 8009954:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800995c:	bf00      	nop
 800995e:	371c      	adds	r7, #28
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr
 8009968:	03fff000 	.word	0x03fff000

0800996c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800996c:	b480      	push	{r7}
 800996e:	b085      	sub	sp, #20
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	3360      	adds	r3, #96	@ 0x60
 800997a:	461a      	mov	r2, r3
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	4413      	add	r3, r2
 8009982:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800998c:	4618      	mov	r0, r3
 800998e:	3714      	adds	r7, #20
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8009998:	b480      	push	{r7}
 800999a:	b087      	sub	sp, #28
 800999c:	af00      	add	r7, sp, #0
 800999e:	60f8      	str	r0, [r7, #12]
 80099a0:	60b9      	str	r1, [r7, #8]
 80099a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	3360      	adds	r3, #96	@ 0x60
 80099a8:	461a      	mov	r2, r3
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	4413      	add	r3, r2
 80099b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	431a      	orrs	r2, r3
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80099c2:	bf00      	nop
 80099c4:	371c      	adds	r7, #28
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr

080099ce <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80099ce:	b480      	push	{r7}
 80099d0:	b083      	sub	sp, #12
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d101      	bne.n	80099e6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80099e2:	2301      	movs	r3, #1
 80099e4:	e000      	b.n	80099e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	370c      	adds	r7, #12
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b087      	sub	sp, #28
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	3330      	adds	r3, #48	@ 0x30
 8009a04:	461a      	mov	r2, r3
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	0a1b      	lsrs	r3, r3, #8
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	f003 030c 	and.w	r3, r3, #12
 8009a10:	4413      	add	r3, r2
 8009a12:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	f003 031f 	and.w	r3, r3, #31
 8009a1e:	211f      	movs	r1, #31
 8009a20:	fa01 f303 	lsl.w	r3, r1, r3
 8009a24:	43db      	mvns	r3, r3
 8009a26:	401a      	ands	r2, r3
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	0e9b      	lsrs	r3, r3, #26
 8009a2c:	f003 011f 	and.w	r1, r3, #31
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	f003 031f 	and.w	r3, r3, #31
 8009a36:	fa01 f303 	lsl.w	r3, r1, r3
 8009a3a:	431a      	orrs	r2, r3
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8009a40:	bf00      	nop
 8009a42:	371c      	adds	r7, #28
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a58:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d101      	bne.n	8009a64 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8009a60:	2301      	movs	r3, #1
 8009a62:	e000      	b.n	8009a66 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	370c      	adds	r7, #12
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr

08009a72 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8009a72:	b480      	push	{r7}
 8009a74:	b087      	sub	sp, #28
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	60f8      	str	r0, [r7, #12]
 8009a7a:	60b9      	str	r1, [r7, #8]
 8009a7c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	3314      	adds	r3, #20
 8009a82:	461a      	mov	r2, r3
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	0e5b      	lsrs	r3, r3, #25
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	f003 0304 	and.w	r3, r3, #4
 8009a8e:	4413      	add	r3, r2
 8009a90:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	0d1b      	lsrs	r3, r3, #20
 8009a9a:	f003 031f 	and.w	r3, r3, #31
 8009a9e:	2107      	movs	r1, #7
 8009aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8009aa4:	43db      	mvns	r3, r3
 8009aa6:	401a      	ands	r2, r3
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	0d1b      	lsrs	r3, r3, #20
 8009aac:	f003 031f 	and.w	r3, r3, #31
 8009ab0:	6879      	ldr	r1, [r7, #4]
 8009ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ab6:	431a      	orrs	r2, r3
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8009abc:	bf00      	nop
 8009abe:	371c      	adds	r7, #28
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr

08009ac8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ae0:	43db      	mvns	r3, r3
 8009ae2:	401a      	ands	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f003 0318 	and.w	r3, r3, #24
 8009aea:	4908      	ldr	r1, [pc, #32]	@ (8009b0c <LL_ADC_SetChannelSingleDiff+0x44>)
 8009aec:	40d9      	lsrs	r1, r3
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	400b      	ands	r3, r1
 8009af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009af6:	431a      	orrs	r2, r3
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8009afe:	bf00      	nop
 8009b00:	3714      	adds	r7, #20
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop
 8009b0c:	0007ffff 	.word	0x0007ffff

08009b10 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b083      	sub	sp, #12
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8009b20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	6093      	str	r3, [r2, #8]
}
 8009b28:	bf00      	nop
 8009b2a:	370c      	adds	r7, #12
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr

08009b34 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	689b      	ldr	r3, [r3, #8]
 8009b40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b48:	d101      	bne.n	8009b4e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e000      	b.n	8009b50 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8009b4e:	2300      	movs	r3, #0
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	370c      	adds	r7, #12
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b083      	sub	sp, #12
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8009b6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009b70:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8009b78:	bf00      	nop
 8009b7a:	370c      	adds	r7, #12
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b98:	d101      	bne.n	8009b9e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e000      	b.n	8009ba0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8009b9e:	2300      	movs	r3, #0
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	370c      	adds	r7, #12
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr

08009bac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009bbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009bc0:	f043 0201 	orr.w	r2, r3, #1
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8009bc8:	bf00      	nop
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009be4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009be8:	f043 0202 	orr.w	r2, r3, #2
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8009bf0:	bf00      	nop
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	689b      	ldr	r3, [r3, #8]
 8009c08:	f003 0301 	and.w	r3, r3, #1
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d101      	bne.n	8009c14 <LL_ADC_IsEnabled+0x18>
 8009c10:	2301      	movs	r3, #1
 8009c12:	e000      	b.n	8009c16 <LL_ADC_IsEnabled+0x1a>
 8009c14:	2300      	movs	r3, #0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	370c      	adds	r7, #12
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr

08009c22 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8009c22:	b480      	push	{r7}
 8009c24:	b083      	sub	sp, #12
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	f003 0302 	and.w	r3, r3, #2
 8009c32:	2b02      	cmp	r3, #2
 8009c34:	d101      	bne.n	8009c3a <LL_ADC_IsDisableOngoing+0x18>
 8009c36:	2301      	movs	r3, #1
 8009c38:	e000      	b.n	8009c3c <LL_ADC_IsDisableOngoing+0x1a>
 8009c3a:	2300      	movs	r3, #0
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	370c      	adds	r7, #12
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b083      	sub	sp, #12
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009c58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009c5c:	f043 0204 	orr.w	r2, r3, #4
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8009c64:	bf00      	nop
 8009c66:	370c      	adds	r7, #12
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr

08009c70 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b083      	sub	sp, #12
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	f003 0304 	and.w	r3, r3, #4
 8009c80:	2b04      	cmp	r3, #4
 8009c82:	d101      	bne.n	8009c88 <LL_ADC_REG_IsConversionOngoing+0x18>
 8009c84:	2301      	movs	r3, #1
 8009c86:	e000      	b.n	8009c8a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	370c      	adds	r7, #12
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr

08009c96 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009c96:	b480      	push	{r7}
 8009c98:	b083      	sub	sp, #12
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	f003 0308 	and.w	r3, r3, #8
 8009ca6:	2b08      	cmp	r3, #8
 8009ca8:	d101      	bne.n	8009cae <LL_ADC_INJ_IsConversionOngoing+0x18>
 8009caa:	2301      	movs	r3, #1
 8009cac:	e000      	b.n	8009cb0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8009cae:	2300      	movs	r3, #0
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	370c      	adds	r7, #12
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b088      	sub	sp, #32
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d101      	bne.n	8009cd6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	e126      	b.n	8009f24 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	691b      	ldr	r3, [r3, #16]
 8009cda:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d109      	bne.n	8009cf8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f7f7 f9bd 	bl	8001064 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2200      	movs	r2, #0
 8009cee:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f7ff ff19 	bl	8009b34 <LL_ADC_IsDeepPowerDownEnabled>
 8009d02:	4603      	mov	r3, r0
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d004      	beq.n	8009d12 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f7ff feff 	bl	8009b10 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7ff ff34 	bl	8009b84 <LL_ADC_IsInternalRegulatorEnabled>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d115      	bne.n	8009d4e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4618      	mov	r0, r3
 8009d28:	f7ff ff18 	bl	8009b5c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009d2c:	4b7f      	ldr	r3, [pc, #508]	@ (8009f2c <HAL_ADC_Init+0x270>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	099b      	lsrs	r3, r3, #6
 8009d32:	4a7f      	ldr	r2, [pc, #508]	@ (8009f30 <HAL_ADC_Init+0x274>)
 8009d34:	fba2 2303 	umull	r2, r3, r2, r3
 8009d38:	099b      	lsrs	r3, r3, #6
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	005b      	lsls	r3, r3, #1
 8009d3e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8009d40:	e002      	b.n	8009d48 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	3b01      	subs	r3, #1
 8009d46:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d1f9      	bne.n	8009d42 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4618      	mov	r0, r3
 8009d54:	f7ff ff16 	bl	8009b84 <LL_ADC_IsInternalRegulatorEnabled>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d10d      	bne.n	8009d7a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d62:	f043 0210 	orr.w	r2, r3, #16
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d6e:	f043 0201 	orr.w	r2, r3, #1
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f7ff ff76 	bl	8009c70 <LL_ADC_REG_IsConversionOngoing>
 8009d84:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d8a:	f003 0310 	and.w	r3, r3, #16
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	f040 80bf 	bne.w	8009f12 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	f040 80bb 	bne.w	8009f12 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009da0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8009da4:	f043 0202 	orr.w	r2, r3, #2
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7ff ff23 	bl	8009bfc <LL_ADC_IsEnabled>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d10b      	bne.n	8009dd4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009dbc:	485d      	ldr	r0, [pc, #372]	@ (8009f34 <HAL_ADC_Init+0x278>)
 8009dbe:	f7ff ff1d 	bl	8009bfc <LL_ADC_IsEnabled>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d105      	bne.n	8009dd4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	4619      	mov	r1, r3
 8009dce:	485a      	ldr	r0, [pc, #360]	@ (8009f38 <HAL_ADC_Init+0x27c>)
 8009dd0:	f7ff fd74 	bl	80098bc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	7e5b      	ldrb	r3, [r3, #25]
 8009dd8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009dde:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8009de4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8009dea:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009df2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009df4:	4313      	orrs	r3, r2
 8009df6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	d106      	bne.n	8009e10 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e06:	3b01      	subs	r3, #1
 8009e08:	045b      	lsls	r3, r3, #17
 8009e0a:	69ba      	ldr	r2, [r7, #24]
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d009      	beq.n	8009e2c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e1c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e24:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009e26:	69ba      	ldr	r2, [r7, #24]
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	68da      	ldr	r2, [r3, #12]
 8009e32:	4b42      	ldr	r3, [pc, #264]	@ (8009f3c <HAL_ADC_Init+0x280>)
 8009e34:	4013      	ands	r3, r2
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	6812      	ldr	r2, [r2, #0]
 8009e3a:	69b9      	ldr	r1, [r7, #24]
 8009e3c:	430b      	orrs	r3, r1
 8009e3e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7ff ff26 	bl	8009c96 <LL_ADC_INJ_IsConversionOngoing>
 8009e4a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d13d      	bne.n	8009ece <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d13a      	bne.n	8009ece <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8009e5c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009e64:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8009e66:	4313      	orrs	r3, r2
 8009e68:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	68db      	ldr	r3, [r3, #12]
 8009e70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009e74:	f023 0302 	bic.w	r3, r3, #2
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	6812      	ldr	r2, [r2, #0]
 8009e7c:	69b9      	ldr	r1, [r7, #24]
 8009e7e:	430b      	orrs	r3, r1
 8009e80:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d118      	bne.n	8009ebe <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	691b      	ldr	r3, [r3, #16]
 8009e92:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009e96:	f023 0304 	bic.w	r3, r3, #4
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8009ea2:	4311      	orrs	r1, r2
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8009ea8:	4311      	orrs	r1, r2
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009eae:	430a      	orrs	r2, r1
 8009eb0:	431a      	orrs	r2, r3
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f042 0201 	orr.w	r2, r2, #1
 8009eba:	611a      	str	r2, [r3, #16]
 8009ebc:	e007      	b.n	8009ece <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	691a      	ldr	r2, [r3, #16]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f022 0201 	bic.w	r2, r2, #1
 8009ecc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d10c      	bne.n	8009ef0 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009edc:	f023 010f 	bic.w	r1, r3, #15
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	69db      	ldr	r3, [r3, #28]
 8009ee4:	1e5a      	subs	r2, r3, #1
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	430a      	orrs	r2, r1
 8009eec:	631a      	str	r2, [r3, #48]	@ 0x30
 8009eee:	e007      	b.n	8009f00 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f022 020f 	bic.w	r2, r2, #15
 8009efe:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f04:	f023 0303 	bic.w	r3, r3, #3
 8009f08:	f043 0201 	orr.w	r2, r3, #1
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	655a      	str	r2, [r3, #84]	@ 0x54
 8009f10:	e007      	b.n	8009f22 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f16:	f043 0210 	orr.w	r2, r3, #16
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8009f22:	7ffb      	ldrb	r3, [r7, #31]
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3720      	adds	r7, #32
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}
 8009f2c:	2000005c 	.word	0x2000005c
 8009f30:	053e2d63 	.word	0x053e2d63
 8009f34:	50040000 	.word	0x50040000
 8009f38:	50040300 	.word	0x50040300
 8009f3c:	fff0c007 	.word	0xfff0c007

08009f40 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f7ff fe8f 	bl	8009c70 <LL_ADC_REG_IsConversionOngoing>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	f040 80a0 	bne.w	800a09a <HAL_ADC_Start_IT+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d101      	bne.n	8009f68 <HAL_ADC_Start_IT+0x28>
 8009f64:	2302      	movs	r3, #2
 8009f66:	e09b      	b.n	800a0a0 <HAL_ADC_Start_IT+0x160>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 fe51 	bl	800ac18 <ADC_Enable>
 8009f76:	4603      	mov	r3, r0
 8009f78:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8009f7a:	7bfb      	ldrb	r3, [r7, #15]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	f040 8087 	bne.w	800a090 <HAL_ADC_Start_IT+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f86:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009f8a:	f023 0301 	bic.w	r3, r3, #1
 8009f8e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d006      	beq.n	8009fb0 <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fa6:	f023 0206 	bic.w	r2, r3, #6
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	659a      	str	r2, [r3, #88]	@ 0x58
 8009fae:	e002      	b.n	8009fb6 <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	221c      	movs	r2, #28
 8009fbc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	685a      	ldr	r2, [r3, #4]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f022 021c 	bic.w	r2, r2, #28
 8009fd4:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	695b      	ldr	r3, [r3, #20]
 8009fda:	2b08      	cmp	r3, #8
 8009fdc:	d108      	bne.n	8009ff0 <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	685a      	ldr	r2, [r3, #4]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f042 0208 	orr.w	r2, r2, #8
 8009fec:	605a      	str	r2, [r3, #4]
          break;
 8009fee:	e008      	b.n	800a002 <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	685a      	ldr	r2, [r3, #4]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f042 0204 	orr.w	r2, r2, #4
 8009ffe:	605a      	str	r2, [r3, #4]
          break;
 800a000:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a006:	2b00      	cmp	r3, #0
 800a008:	d107      	bne.n	800a01a <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	685a      	ldr	r2, [r3, #4]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f042 0210 	orr.w	r2, r2, #16
 800a018:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a024:	2b00      	cmp	r3, #0
 800a026:	d02d      	beq.n	800a084 <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a02c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800a030:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	695b      	ldr	r3, [r3, #20]
 800a03c:	2b08      	cmp	r3, #8
 800a03e:	d110      	bne.n	800a062 <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	685a      	ldr	r2, [r3, #4]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f022 0220 	bic.w	r2, r2, #32
 800a04e:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	685a      	ldr	r2, [r3, #4]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a05e:	605a      	str	r2, [r3, #4]
            break;
 800a060:	e010      	b.n	800a084 <HAL_ADC_Start_IT+0x144>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	685a      	ldr	r2, [r3, #4]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a070:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	685a      	ldr	r2, [r3, #4]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f042 0220 	orr.w	r2, r2, #32
 800a080:	605a      	str	r2, [r3, #4]
            break;
 800a082:	bf00      	nop
        }
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4618      	mov	r0, r3
 800a08a:	f7ff fddd 	bl	8009c48 <LL_ADC_REG_StartConversion>
 800a08e:	e006      	b.n	800a09e <HAL_ADC_Start_IT+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2200      	movs	r2, #0
 800a094:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800a098:	e001      	b.n	800a09e <HAL_ADC_Start_IT+0x15e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800a09a:	2302      	movs	r3, #2
 800a09c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800a09e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3710      	adds	r7, #16
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b083      	sub	sp, #12
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	370c      	adds	r7, #12
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr

0800a0c2 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b088      	sub	sp, #32
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800a0de:	69bb      	ldr	r3, [r7, #24]
 800a0e0:	f003 0302 	and.w	r3, r3, #2
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d017      	beq.n	800a118 <HAL_ADC_IRQHandler+0x56>
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	f003 0302 	and.w	r3, r3, #2
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d012      	beq.n	800a118 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0f6:	f003 0310 	and.w	r3, r3, #16
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d105      	bne.n	800a10a <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a102:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 ff1e 	bl	800af4c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	2202      	movs	r2, #2
 800a116:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	f003 0304 	and.w	r3, r3, #4
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d004      	beq.n	800a12c <HAL_ADC_IRQHandler+0x6a>
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	f003 0304 	and.w	r3, r3, #4
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d109      	bne.n	800a140 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800a12c:	69bb      	ldr	r3, [r7, #24]
 800a12e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800a132:	2b00      	cmp	r3, #0
 800a134:	d05e      	beq.n	800a1f4 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	f003 0308 	and.w	r3, r3, #8
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d059      	beq.n	800a1f4 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a144:	f003 0310 	and.w	r3, r3, #16
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d105      	bne.n	800a158 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a150:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4618      	mov	r0, r3
 800a15e:	f7ff fc36 	bl	80099ce <LL_ADC_REG_IsTriggerSourceSWStart>
 800a162:	4603      	mov	r3, r0
 800a164:	2b00      	cmp	r3, #0
 800a166:	d03e      	beq.n	800a1e6 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a176:	2b00      	cmp	r3, #0
 800a178:	d135      	bne.n	800a1e6 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f003 0308 	and.w	r3, r3, #8
 800a184:	2b08      	cmp	r3, #8
 800a186:	d12e      	bne.n	800a1e6 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4618      	mov	r0, r3
 800a18e:	f7ff fd6f 	bl	8009c70 <LL_ADC_REG_IsConversionOngoing>
 800a192:	4603      	mov	r3, r0
 800a194:	2b00      	cmp	r3, #0
 800a196:	d11a      	bne.n	800a1ce <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	685a      	ldr	r2, [r3, #4]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f022 020c 	bic.w	r2, r2, #12
 800a1a6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d112      	bne.n	800a1e6 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1c4:	f043 0201 	orr.w	r2, r3, #1
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	655a      	str	r2, [r3, #84]	@ 0x54
 800a1cc:	e00b      	b.n	800a1e6 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1d2:	f043 0210 	orr.w	r2, r3, #16
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1de:	f043 0201 	orr.w	r2, r3, #1
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f7fe f908 	bl	80083fc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	220c      	movs	r2, #12
 800a1f2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800a1f4:	69bb      	ldr	r3, [r7, #24]
 800a1f6:	f003 0320 	and.w	r3, r3, #32
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d004      	beq.n	800a208 <HAL_ADC_IRQHandler+0x146>
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	f003 0320 	and.w	r3, r3, #32
 800a204:	2b00      	cmp	r3, #0
 800a206:	d109      	bne.n	800a21c <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800a208:	69bb      	ldr	r3, [r7, #24]
 800a20a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d072      	beq.n	800a2f8 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d06d      	beq.n	800a2f8 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a220:	f003 0310 	and.w	r3, r3, #16
 800a224:	2b00      	cmp	r3, #0
 800a226:	d105      	bne.n	800a234 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a22c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4618      	mov	r0, r3
 800a23a:	f7ff fc07 	bl	8009a4c <LL_ADC_INJ_IsTriggerSourceSWStart>
 800a23e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4618      	mov	r0, r3
 800a246:	f7ff fbc2 	bl	80099ce <LL_ADC_REG_IsTriggerSourceSWStart>
 800a24a:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d047      	beq.n	800a2ea <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a260:	2b00      	cmp	r3, #0
 800a262:	d007      	beq.n	800a274 <HAL_ADC_IRQHandler+0x1b2>
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d03f      	beq.n	800a2ea <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800a270:	2b00      	cmp	r3, #0
 800a272:	d13a      	bne.n	800a2ea <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a27e:	2b40      	cmp	r3, #64	@ 0x40
 800a280:	d133      	bne.n	800a2ea <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d12e      	bne.n	800a2ea <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4618      	mov	r0, r3
 800a292:	f7ff fd00 	bl	8009c96 <LL_ADC_INJ_IsConversionOngoing>
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d11a      	bne.n	800a2d2 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	685a      	ldr	r2, [r3, #4]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800a2aa:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d112      	bne.n	800a2ea <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2c8:	f043 0201 	orr.w	r2, r3, #1
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	655a      	str	r2, [r3, #84]	@ 0x54
 800a2d0:	e00b      	b.n	800a2ea <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2d6:	f043 0210 	orr.w	r2, r3, #16
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2e2:	f043 0201 	orr.w	r2, r3, #1
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 fe06 	bl	800aefc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	2260      	movs	r2, #96	@ 0x60
 800a2f6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d011      	beq.n	800a326 <HAL_ADC_IRQHandler+0x264>
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d00c      	beq.n	800a326 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a310:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 f886 	bl	800a42a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	2280      	movs	r2, #128	@ 0x80
 800a324:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800a326:	69bb      	ldr	r3, [r7, #24]
 800a328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d012      	beq.n	800a356 <HAL_ADC_IRQHandler+0x294>
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a336:	2b00      	cmp	r3, #0
 800a338:	d00d      	beq.n	800a356 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a33e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f000 fdec 	bl	800af24 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a354:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d012      	beq.n	800a386 <HAL_ADC_IRQHandler+0x2c4>
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a366:	2b00      	cmp	r3, #0
 800a368:	d00d      	beq.n	800a386 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a36e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 fdde 	bl	800af38 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a384:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800a386:	69bb      	ldr	r3, [r7, #24]
 800a388:	f003 0310 	and.w	r3, r3, #16
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d02a      	beq.n	800a3e6 <HAL_ADC_IRQHandler+0x324>
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	f003 0310 	and.w	r3, r3, #16
 800a396:	2b00      	cmp	r3, #0
 800a398:	d025      	beq.n	800a3e6 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d102      	bne.n	800a3a8 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	61fb      	str	r3, [r7, #28]
 800a3a6:	e008      	b.n	800a3ba <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	68db      	ldr	r3, [r3, #12]
 800a3ae:	f003 0301 	and.w	r3, r3, #1
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d001      	beq.n	800a3ba <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 800a3ba:	69fb      	ldr	r3, [r7, #28]
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d10e      	bne.n	800a3de <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3c4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3d0:	f043 0202 	orr.w	r2, r3, #2
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 f830 	bl	800a43e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2210      	movs	r2, #16
 800a3e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800a3e6:	69bb      	ldr	r3, [r7, #24]
 800a3e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d018      	beq.n	800a422 <HAL_ADC_IRQHandler+0x360>
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d013      	beq.n	800a422 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3fe:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a40a:	f043 0208 	orr.w	r2, r3, #8
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a41a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f000 fd77 	bl	800af10 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800a422:	bf00      	nop
 800a424:	3720      	adds	r7, #32
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}

0800a42a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800a42a:	b480      	push	{r7}
 800a42c:	b083      	sub	sp, #12
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800a432:	bf00      	nop
 800a434:	370c      	adds	r7, #12
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr

0800a43e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a43e:	b480      	push	{r7}
 800a440:	b083      	sub	sp, #12
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800a446:	bf00      	nop
 800a448:	370c      	adds	r7, #12
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
	...

0800a454 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b0b6      	sub	sp, #216	@ 0xd8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a45e:	2300      	movs	r3, #0
 800a460:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800a464:	2300      	movs	r3, #0
 800a466:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d101      	bne.n	800a476 <HAL_ADC_ConfigChannel+0x22>
 800a472:	2302      	movs	r3, #2
 800a474:	e3bb      	b.n	800abee <HAL_ADC_ConfigChannel+0x79a>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2201      	movs	r2, #1
 800a47a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4618      	mov	r0, r3
 800a484:	f7ff fbf4 	bl	8009c70 <LL_ADC_REG_IsConversionOngoing>
 800a488:	4603      	mov	r3, r0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	f040 83a0 	bne.w	800abd0 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	2b05      	cmp	r3, #5
 800a49e:	d824      	bhi.n	800a4ea <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	3b02      	subs	r3, #2
 800a4a6:	2b03      	cmp	r3, #3
 800a4a8:	d81b      	bhi.n	800a4e2 <HAL_ADC_ConfigChannel+0x8e>
 800a4aa:	a201      	add	r2, pc, #4	@ (adr r2, 800a4b0 <HAL_ADC_ConfigChannel+0x5c>)
 800a4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b0:	0800a4c1 	.word	0x0800a4c1
 800a4b4:	0800a4c9 	.word	0x0800a4c9
 800a4b8:	0800a4d1 	.word	0x0800a4d1
 800a4bc:	0800a4d9 	.word	0x0800a4d9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800a4c0:	230c      	movs	r3, #12
 800a4c2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800a4c6:	e010      	b.n	800a4ea <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800a4c8:	2312      	movs	r3, #18
 800a4ca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800a4ce:	e00c      	b.n	800a4ea <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800a4d0:	2318      	movs	r3, #24
 800a4d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800a4d6:	e008      	b.n	800a4ea <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800a4d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a4dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800a4e0:	e003      	b.n	800a4ea <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800a4e2:	2306      	movs	r3, #6
 800a4e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800a4e8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6818      	ldr	r0, [r3, #0]
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800a4f8:	f7ff fa7c 	bl	80099f4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4618      	mov	r0, r3
 800a502:	f7ff fbb5 	bl	8009c70 <LL_ADC_REG_IsConversionOngoing>
 800a506:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4618      	mov	r0, r3
 800a510:	f7ff fbc1 	bl	8009c96 <LL_ADC_INJ_IsConversionOngoing>
 800a514:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a518:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f040 81a4 	bne.w	800a86a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a522:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a526:	2b00      	cmp	r3, #0
 800a528:	f040 819f 	bne.w	800a86a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6818      	ldr	r0, [r3, #0]
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	6819      	ldr	r1, [r3, #0]
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	461a      	mov	r2, r3
 800a53a:	f7ff fa9a 	bl	8009a72 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	695a      	ldr	r2, [r3, #20]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	68db      	ldr	r3, [r3, #12]
 800a548:	08db      	lsrs	r3, r3, #3
 800a54a:	f003 0303 	and.w	r3, r3, #3
 800a54e:	005b      	lsls	r3, r3, #1
 800a550:	fa02 f303 	lsl.w	r3, r2, r3
 800a554:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	691b      	ldr	r3, [r3, #16]
 800a55c:	2b04      	cmp	r3, #4
 800a55e:	d00a      	beq.n	800a576 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6818      	ldr	r0, [r3, #0]
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	6919      	ldr	r1, [r3, #16]
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a570:	f7ff f9d8 	bl	8009924 <LL_ADC_SetOffset>
 800a574:	e179      	b.n	800a86a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	2100      	movs	r1, #0
 800a57c:	4618      	mov	r0, r3
 800a57e:	f7ff f9f5 	bl	800996c <LL_ADC_GetOffsetChannel>
 800a582:	4603      	mov	r3, r0
 800a584:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d10a      	bne.n	800a5a2 <HAL_ADC_ConfigChannel+0x14e>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2100      	movs	r1, #0
 800a592:	4618      	mov	r0, r3
 800a594:	f7ff f9ea 	bl	800996c <LL_ADC_GetOffsetChannel>
 800a598:	4603      	mov	r3, r0
 800a59a:	0e9b      	lsrs	r3, r3, #26
 800a59c:	f003 021f 	and.w	r2, r3, #31
 800a5a0:	e01e      	b.n	800a5e0 <HAL_ADC_ConfigChannel+0x18c>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2100      	movs	r1, #0
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f7ff f9df 	bl	800996c <LL_ADC_GetOffsetChannel>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a5b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a5b8:	fa93 f3a3 	rbit	r3, r3
 800a5bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800a5c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a5c4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800a5c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d101      	bne.n	800a5d4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800a5d0:	2320      	movs	r3, #32
 800a5d2:	e004      	b.n	800a5de <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800a5d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a5d8:	fab3 f383 	clz	r3, r3
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d105      	bne.n	800a5f8 <HAL_ADC_ConfigChannel+0x1a4>
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	0e9b      	lsrs	r3, r3, #26
 800a5f2:	f003 031f 	and.w	r3, r3, #31
 800a5f6:	e018      	b.n	800a62a <HAL_ADC_ConfigChannel+0x1d6>
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a600:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a604:	fa93 f3a3 	rbit	r3, r3
 800a608:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800a60c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a610:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800a614:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d101      	bne.n	800a620 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800a61c:	2320      	movs	r3, #32
 800a61e:	e004      	b.n	800a62a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800a620:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a624:	fab3 f383 	clz	r3, r3
 800a628:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d106      	bne.n	800a63c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	2200      	movs	r2, #0
 800a634:	2100      	movs	r1, #0
 800a636:	4618      	mov	r0, r3
 800a638:	f7ff f9ae 	bl	8009998 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	2101      	movs	r1, #1
 800a642:	4618      	mov	r0, r3
 800a644:	f7ff f992 	bl	800996c <LL_ADC_GetOffsetChannel>
 800a648:	4603      	mov	r3, r0
 800a64a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d10a      	bne.n	800a668 <HAL_ADC_ConfigChannel+0x214>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	2101      	movs	r1, #1
 800a658:	4618      	mov	r0, r3
 800a65a:	f7ff f987 	bl	800996c <LL_ADC_GetOffsetChannel>
 800a65e:	4603      	mov	r3, r0
 800a660:	0e9b      	lsrs	r3, r3, #26
 800a662:	f003 021f 	and.w	r2, r3, #31
 800a666:	e01e      	b.n	800a6a6 <HAL_ADC_ConfigChannel+0x252>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	2101      	movs	r1, #1
 800a66e:	4618      	mov	r0, r3
 800a670:	f7ff f97c 	bl	800996c <LL_ADC_GetOffsetChannel>
 800a674:	4603      	mov	r3, r0
 800a676:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a67a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a67e:	fa93 f3a3 	rbit	r3, r3
 800a682:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800a686:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a68a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800a68e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a692:	2b00      	cmp	r3, #0
 800a694:	d101      	bne.n	800a69a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800a696:	2320      	movs	r3, #32
 800a698:	e004      	b.n	800a6a4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800a69a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a69e:	fab3 f383 	clz	r3, r3
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d105      	bne.n	800a6be <HAL_ADC_ConfigChannel+0x26a>
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	0e9b      	lsrs	r3, r3, #26
 800a6b8:	f003 031f 	and.w	r3, r3, #31
 800a6bc:	e018      	b.n	800a6f0 <HAL_ADC_ConfigChannel+0x29c>
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a6c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a6ca:	fa93 f3a3 	rbit	r3, r3
 800a6ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800a6d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a6d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800a6da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d101      	bne.n	800a6e6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800a6e2:	2320      	movs	r3, #32
 800a6e4:	e004      	b.n	800a6f0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800a6e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a6ea:	fab3 f383 	clz	r3, r3
 800a6ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d106      	bne.n	800a702 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	2101      	movs	r1, #1
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f7ff f94b 	bl	8009998 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	2102      	movs	r1, #2
 800a708:	4618      	mov	r0, r3
 800a70a:	f7ff f92f 	bl	800996c <LL_ADC_GetOffsetChannel>
 800a70e:	4603      	mov	r3, r0
 800a710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a714:	2b00      	cmp	r3, #0
 800a716:	d10a      	bne.n	800a72e <HAL_ADC_ConfigChannel+0x2da>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	2102      	movs	r1, #2
 800a71e:	4618      	mov	r0, r3
 800a720:	f7ff f924 	bl	800996c <LL_ADC_GetOffsetChannel>
 800a724:	4603      	mov	r3, r0
 800a726:	0e9b      	lsrs	r3, r3, #26
 800a728:	f003 021f 	and.w	r2, r3, #31
 800a72c:	e01e      	b.n	800a76c <HAL_ADC_ConfigChannel+0x318>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	2102      	movs	r1, #2
 800a734:	4618      	mov	r0, r3
 800a736:	f7ff f919 	bl	800996c <LL_ADC_GetOffsetChannel>
 800a73a:	4603      	mov	r3, r0
 800a73c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a740:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a744:	fa93 f3a3 	rbit	r3, r3
 800a748:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800a74c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a750:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800a754:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d101      	bne.n	800a760 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800a75c:	2320      	movs	r3, #32
 800a75e:	e004      	b.n	800a76a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800a760:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a764:	fab3 f383 	clz	r3, r3
 800a768:	b2db      	uxtb	r3, r3
 800a76a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a774:	2b00      	cmp	r3, #0
 800a776:	d105      	bne.n	800a784 <HAL_ADC_ConfigChannel+0x330>
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	0e9b      	lsrs	r3, r3, #26
 800a77e:	f003 031f 	and.w	r3, r3, #31
 800a782:	e014      	b.n	800a7ae <HAL_ADC_ConfigChannel+0x35a>
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a78a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a78c:	fa93 f3a3 	rbit	r3, r3
 800a790:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800a792:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a794:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800a798:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d101      	bne.n	800a7a4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800a7a0:	2320      	movs	r3, #32
 800a7a2:	e004      	b.n	800a7ae <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800a7a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a7a8:	fab3 f383 	clz	r3, r3
 800a7ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d106      	bne.n	800a7c0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	2102      	movs	r1, #2
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f7ff f8ec 	bl	8009998 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	2103      	movs	r1, #3
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7ff f8d0 	bl	800996c <LL_ADC_GetOffsetChannel>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d10a      	bne.n	800a7ec <HAL_ADC_ConfigChannel+0x398>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	2103      	movs	r1, #3
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f7ff f8c5 	bl	800996c <LL_ADC_GetOffsetChannel>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	0e9b      	lsrs	r3, r3, #26
 800a7e6:	f003 021f 	and.w	r2, r3, #31
 800a7ea:	e017      	b.n	800a81c <HAL_ADC_ConfigChannel+0x3c8>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	2103      	movs	r1, #3
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7ff f8ba 	bl	800996c <LL_ADC_GetOffsetChannel>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a7fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a7fe:	fa93 f3a3 	rbit	r3, r3
 800a802:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800a804:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a806:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800a808:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d101      	bne.n	800a812 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800a80e:	2320      	movs	r3, #32
 800a810:	e003      	b.n	800a81a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800a812:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a814:	fab3 f383 	clz	r3, r3
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a824:	2b00      	cmp	r3, #0
 800a826:	d105      	bne.n	800a834 <HAL_ADC_ConfigChannel+0x3e0>
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	0e9b      	lsrs	r3, r3, #26
 800a82e:	f003 031f 	and.w	r3, r3, #31
 800a832:	e011      	b.n	800a858 <HAL_ADC_ConfigChannel+0x404>
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a83a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a83c:	fa93 f3a3 	rbit	r3, r3
 800a840:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800a842:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a844:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800a846:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d101      	bne.n	800a850 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800a84c:	2320      	movs	r3, #32
 800a84e:	e003      	b.n	800a858 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800a850:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a852:	fab3 f383 	clz	r3, r3
 800a856:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800a858:	429a      	cmp	r2, r3
 800a85a:	d106      	bne.n	800a86a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2200      	movs	r2, #0
 800a862:	2103      	movs	r1, #3
 800a864:	4618      	mov	r0, r3
 800a866:	f7ff f897 	bl	8009998 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4618      	mov	r0, r3
 800a870:	f7ff f9c4 	bl	8009bfc <LL_ADC_IsEnabled>
 800a874:	4603      	mov	r3, r0
 800a876:	2b00      	cmp	r3, #0
 800a878:	f040 8140 	bne.w	800aafc <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6818      	ldr	r0, [r3, #0]
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	6819      	ldr	r1, [r3, #0]
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	461a      	mov	r2, r3
 800a88a:	f7ff f91d 	bl	8009ac8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	68db      	ldr	r3, [r3, #12]
 800a892:	4a8f      	ldr	r2, [pc, #572]	@ (800aad0 <HAL_ADC_ConfigChannel+0x67c>)
 800a894:	4293      	cmp	r3, r2
 800a896:	f040 8131 	bne.w	800aafc <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d10b      	bne.n	800a8c2 <HAL_ADC_ConfigChannel+0x46e>
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	0e9b      	lsrs	r3, r3, #26
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	f003 031f 	and.w	r3, r3, #31
 800a8b6:	2b09      	cmp	r3, #9
 800a8b8:	bf94      	ite	ls
 800a8ba:	2301      	movls	r3, #1
 800a8bc:	2300      	movhi	r3, #0
 800a8be:	b2db      	uxtb	r3, r3
 800a8c0:	e019      	b.n	800a8f6 <HAL_ADC_ConfigChannel+0x4a2>
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a8c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a8ca:	fa93 f3a3 	rbit	r3, r3
 800a8ce:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800a8d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a8d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800a8d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d101      	bne.n	800a8de <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800a8da:	2320      	movs	r3, #32
 800a8dc:	e003      	b.n	800a8e6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800a8de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a8e0:	fab3 f383 	clz	r3, r3
 800a8e4:	b2db      	uxtb	r3, r3
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	f003 031f 	and.w	r3, r3, #31
 800a8ec:	2b09      	cmp	r3, #9
 800a8ee:	bf94      	ite	ls
 800a8f0:	2301      	movls	r3, #1
 800a8f2:	2300      	movhi	r3, #0
 800a8f4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d079      	beq.n	800a9ee <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a902:	2b00      	cmp	r3, #0
 800a904:	d107      	bne.n	800a916 <HAL_ADC_ConfigChannel+0x4c2>
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	0e9b      	lsrs	r3, r3, #26
 800a90c:	3301      	adds	r3, #1
 800a90e:	069b      	lsls	r3, r3, #26
 800a910:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a914:	e015      	b.n	800a942 <HAL_ADC_ConfigChannel+0x4ee>
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a91c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a91e:	fa93 f3a3 	rbit	r3, r3
 800a922:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800a924:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a926:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800a928:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d101      	bne.n	800a932 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800a92e:	2320      	movs	r3, #32
 800a930:	e003      	b.n	800a93a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800a932:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a934:	fab3 f383 	clz	r3, r3
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	3301      	adds	r3, #1
 800a93c:	069b      	lsls	r3, r3, #26
 800a93e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d109      	bne.n	800a962 <HAL_ADC_ConfigChannel+0x50e>
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	0e9b      	lsrs	r3, r3, #26
 800a954:	3301      	adds	r3, #1
 800a956:	f003 031f 	and.w	r3, r3, #31
 800a95a:	2101      	movs	r1, #1
 800a95c:	fa01 f303 	lsl.w	r3, r1, r3
 800a960:	e017      	b.n	800a992 <HAL_ADC_ConfigChannel+0x53e>
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a968:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a96a:	fa93 f3a3 	rbit	r3, r3
 800a96e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800a970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a972:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800a974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a976:	2b00      	cmp	r3, #0
 800a978:	d101      	bne.n	800a97e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800a97a:	2320      	movs	r3, #32
 800a97c:	e003      	b.n	800a986 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800a97e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a980:	fab3 f383 	clz	r3, r3
 800a984:	b2db      	uxtb	r3, r3
 800a986:	3301      	adds	r3, #1
 800a988:	f003 031f 	and.w	r3, r3, #31
 800a98c:	2101      	movs	r1, #1
 800a98e:	fa01 f303 	lsl.w	r3, r1, r3
 800a992:	ea42 0103 	orr.w	r1, r2, r3
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d10a      	bne.n	800a9b8 <HAL_ADC_ConfigChannel+0x564>
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	0e9b      	lsrs	r3, r3, #26
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	f003 021f 	and.w	r2, r3, #31
 800a9ae:	4613      	mov	r3, r2
 800a9b0:	005b      	lsls	r3, r3, #1
 800a9b2:	4413      	add	r3, r2
 800a9b4:	051b      	lsls	r3, r3, #20
 800a9b6:	e018      	b.n	800a9ea <HAL_ADC_ConfigChannel+0x596>
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a9be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9c0:	fa93 f3a3 	rbit	r3, r3
 800a9c4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800a9c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800a9ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d101      	bne.n	800a9d4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800a9d0:	2320      	movs	r3, #32
 800a9d2:	e003      	b.n	800a9dc <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800a9d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9d6:	fab3 f383 	clz	r3, r3
 800a9da:	b2db      	uxtb	r3, r3
 800a9dc:	3301      	adds	r3, #1
 800a9de:	f003 021f 	and.w	r2, r3, #31
 800a9e2:	4613      	mov	r3, r2
 800a9e4:	005b      	lsls	r3, r3, #1
 800a9e6:	4413      	add	r3, r2
 800a9e8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a9ea:	430b      	orrs	r3, r1
 800a9ec:	e081      	b.n	800aaf2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d107      	bne.n	800aa0a <HAL_ADC_ConfigChannel+0x5b6>
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	0e9b      	lsrs	r3, r3, #26
 800aa00:	3301      	adds	r3, #1
 800aa02:	069b      	lsls	r3, r3, #26
 800aa04:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800aa08:	e015      	b.n	800aa36 <HAL_ADC_ConfigChannel+0x5e2>
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa12:	fa93 f3a3 	rbit	r3, r3
 800aa16:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800aa18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800aa1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d101      	bne.n	800aa26 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800aa22:	2320      	movs	r3, #32
 800aa24:	e003      	b.n	800aa2e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800aa26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa28:	fab3 f383 	clz	r3, r3
 800aa2c:	b2db      	uxtb	r3, r3
 800aa2e:	3301      	adds	r3, #1
 800aa30:	069b      	lsls	r3, r3, #26
 800aa32:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d109      	bne.n	800aa56 <HAL_ADC_ConfigChannel+0x602>
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	0e9b      	lsrs	r3, r3, #26
 800aa48:	3301      	adds	r3, #1
 800aa4a:	f003 031f 	and.w	r3, r3, #31
 800aa4e:	2101      	movs	r1, #1
 800aa50:	fa01 f303 	lsl.w	r3, r1, r3
 800aa54:	e017      	b.n	800aa86 <HAL_ADC_ConfigChannel+0x632>
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa5c:	69fb      	ldr	r3, [r7, #28]
 800aa5e:	fa93 f3a3 	rbit	r3, r3
 800aa62:	61bb      	str	r3, [r7, #24]
  return result;
 800aa64:	69bb      	ldr	r3, [r7, #24]
 800aa66:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800aa68:	6a3b      	ldr	r3, [r7, #32]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d101      	bne.n	800aa72 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800aa6e:	2320      	movs	r3, #32
 800aa70:	e003      	b.n	800aa7a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800aa72:	6a3b      	ldr	r3, [r7, #32]
 800aa74:	fab3 f383 	clz	r3, r3
 800aa78:	b2db      	uxtb	r3, r3
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	f003 031f 	and.w	r3, r3, #31
 800aa80:	2101      	movs	r1, #1
 800aa82:	fa01 f303 	lsl.w	r3, r1, r3
 800aa86:	ea42 0103 	orr.w	r1, r2, r3
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d10d      	bne.n	800aab2 <HAL_ADC_ConfigChannel+0x65e>
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	0e9b      	lsrs	r3, r3, #26
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	f003 021f 	and.w	r2, r3, #31
 800aaa2:	4613      	mov	r3, r2
 800aaa4:	005b      	lsls	r3, r3, #1
 800aaa6:	4413      	add	r3, r2
 800aaa8:	3b1e      	subs	r3, #30
 800aaaa:	051b      	lsls	r3, r3, #20
 800aaac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800aab0:	e01e      	b.n	800aaf0 <HAL_ADC_ConfigChannel+0x69c>
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	fa93 f3a3 	rbit	r3, r3
 800aabe:	60fb      	str	r3, [r7, #12]
  return result;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d104      	bne.n	800aad4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800aaca:	2320      	movs	r3, #32
 800aacc:	e006      	b.n	800aadc <HAL_ADC_ConfigChannel+0x688>
 800aace:	bf00      	nop
 800aad0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	fab3 f383 	clz	r3, r3
 800aada:	b2db      	uxtb	r3, r3
 800aadc:	3301      	adds	r3, #1
 800aade:	f003 021f 	and.w	r2, r3, #31
 800aae2:	4613      	mov	r3, r2
 800aae4:	005b      	lsls	r3, r3, #1
 800aae6:	4413      	add	r3, r2
 800aae8:	3b1e      	subs	r3, #30
 800aaea:	051b      	lsls	r3, r3, #20
 800aaec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800aaf0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800aaf2:	683a      	ldr	r2, [r7, #0]
 800aaf4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	f7fe ffbb 	bl	8009a72 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	4b3d      	ldr	r3, [pc, #244]	@ (800abf8 <HAL_ADC_ConfigChannel+0x7a4>)
 800ab02:	4013      	ands	r3, r2
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d06c      	beq.n	800abe2 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800ab08:	483c      	ldr	r0, [pc, #240]	@ (800abfc <HAL_ADC_ConfigChannel+0x7a8>)
 800ab0a:	f7fe fefd 	bl	8009908 <LL_ADC_GetCommonPathInternalCh>
 800ab0e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4a3a      	ldr	r2, [pc, #232]	@ (800ac00 <HAL_ADC_ConfigChannel+0x7ac>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d127      	bne.n	800ab6c <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800ab1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ab20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d121      	bne.n	800ab6c <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a35      	ldr	r2, [pc, #212]	@ (800ac04 <HAL_ADC_ConfigChannel+0x7b0>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d157      	bne.n	800abe2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800ab32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ab36:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	482f      	ldr	r0, [pc, #188]	@ (800abfc <HAL_ADC_ConfigChannel+0x7a8>)
 800ab3e:	f7fe fed0 	bl	80098e2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800ab42:	4b31      	ldr	r3, [pc, #196]	@ (800ac08 <HAL_ADC_ConfigChannel+0x7b4>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	099b      	lsrs	r3, r3, #6
 800ab48:	4a30      	ldr	r2, [pc, #192]	@ (800ac0c <HAL_ADC_ConfigChannel+0x7b8>)
 800ab4a:	fba2 2303 	umull	r2, r3, r2, r3
 800ab4e:	099b      	lsrs	r3, r3, #6
 800ab50:	1c5a      	adds	r2, r3, #1
 800ab52:	4613      	mov	r3, r2
 800ab54:	005b      	lsls	r3, r3, #1
 800ab56:	4413      	add	r3, r2
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800ab5c:	e002      	b.n	800ab64 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	3b01      	subs	r3, #1
 800ab62:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d1f9      	bne.n	800ab5e <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800ab6a:	e03a      	b.n	800abe2 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4a27      	ldr	r2, [pc, #156]	@ (800ac10 <HAL_ADC_ConfigChannel+0x7bc>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d113      	bne.n	800ab9e <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800ab76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ab7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d10d      	bne.n	800ab9e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4a1f      	ldr	r2, [pc, #124]	@ (800ac04 <HAL_ADC_ConfigChannel+0x7b0>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d12a      	bne.n	800abe2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800ab8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ab90:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ab94:	4619      	mov	r1, r3
 800ab96:	4819      	ldr	r0, [pc, #100]	@ (800abfc <HAL_ADC_ConfigChannel+0x7a8>)
 800ab98:	f7fe fea3 	bl	80098e2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800ab9c:	e021      	b.n	800abe2 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4a1c      	ldr	r2, [pc, #112]	@ (800ac14 <HAL_ADC_ConfigChannel+0x7c0>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d11c      	bne.n	800abe2 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800aba8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800abac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d116      	bne.n	800abe2 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a12      	ldr	r2, [pc, #72]	@ (800ac04 <HAL_ADC_ConfigChannel+0x7b0>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d111      	bne.n	800abe2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800abbe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800abc2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800abc6:	4619      	mov	r1, r3
 800abc8:	480c      	ldr	r0, [pc, #48]	@ (800abfc <HAL_ADC_ConfigChannel+0x7a8>)
 800abca:	f7fe fe8a 	bl	80098e2 <LL_ADC_SetCommonPathInternalCh>
 800abce:	e008      	b.n	800abe2 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abd4:	f043 0220 	orr.w	r2, r3, #32
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800abdc:	2301      	movs	r3, #1
 800abde:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2200      	movs	r2, #0
 800abe6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800abea:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800abee:	4618      	mov	r0, r3
 800abf0:	37d8      	adds	r7, #216	@ 0xd8
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}
 800abf6:	bf00      	nop
 800abf8:	80080000 	.word	0x80080000
 800abfc:	50040300 	.word	0x50040300
 800ac00:	c7520000 	.word	0xc7520000
 800ac04:	50040000 	.word	0x50040000
 800ac08:	2000005c 	.word	0x2000005c
 800ac0c:	053e2d63 	.word	0x053e2d63
 800ac10:	cb840000 	.word	0xcb840000
 800ac14:	80000001 	.word	0x80000001

0800ac18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800ac20:	2300      	movs	r3, #0
 800ac22:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7fe ffe7 	bl	8009bfc <LL_ADC_IsEnabled>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d169      	bne.n	800ad08 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	689a      	ldr	r2, [r3, #8]
 800ac3a:	4b36      	ldr	r3, [pc, #216]	@ (800ad14 <ADC_Enable+0xfc>)
 800ac3c:	4013      	ands	r3, r2
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d00d      	beq.n	800ac5e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac46:	f043 0210 	orr.w	r2, r3, #16
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac52:	f043 0201 	orr.w	r2, r3, #1
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	e055      	b.n	800ad0a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	4618      	mov	r0, r3
 800ac64:	f7fe ffa2 	bl	8009bac <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800ac68:	482b      	ldr	r0, [pc, #172]	@ (800ad18 <ADC_Enable+0x100>)
 800ac6a:	f7fe fe4d 	bl	8009908 <LL_ADC_GetCommonPathInternalCh>
 800ac6e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800ac70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d013      	beq.n	800aca0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800ac78:	4b28      	ldr	r3, [pc, #160]	@ (800ad1c <ADC_Enable+0x104>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	099b      	lsrs	r3, r3, #6
 800ac7e:	4a28      	ldr	r2, [pc, #160]	@ (800ad20 <ADC_Enable+0x108>)
 800ac80:	fba2 2303 	umull	r2, r3, r2, r3
 800ac84:	099b      	lsrs	r3, r3, #6
 800ac86:	1c5a      	adds	r2, r3, #1
 800ac88:	4613      	mov	r3, r2
 800ac8a:	005b      	lsls	r3, r3, #1
 800ac8c:	4413      	add	r3, r2
 800ac8e:	009b      	lsls	r3, r3, #2
 800ac90:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800ac92:	e002      	b.n	800ac9a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	3b01      	subs	r3, #1
 800ac98:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d1f9      	bne.n	800ac94 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800aca0:	f7fe fddc 	bl	800985c <HAL_GetTick>
 800aca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800aca6:	e028      	b.n	800acfa <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4618      	mov	r0, r3
 800acae:	f7fe ffa5 	bl	8009bfc <LL_ADC_IsEnabled>
 800acb2:	4603      	mov	r3, r0
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d104      	bne.n	800acc2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7fe ff75 	bl	8009bac <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800acc2:	f7fe fdcb 	bl	800985c <HAL_GetTick>
 800acc6:	4602      	mov	r2, r0
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	1ad3      	subs	r3, r2, r3
 800accc:	2b02      	cmp	r3, #2
 800acce:	d914      	bls.n	800acfa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f003 0301 	and.w	r3, r3, #1
 800acda:	2b01      	cmp	r3, #1
 800acdc:	d00d      	beq.n	800acfa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ace2:	f043 0210 	orr.w	r2, r3, #16
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800acee:	f043 0201 	orr.w	r2, r3, #1
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800acf6:	2301      	movs	r3, #1
 800acf8:	e007      	b.n	800ad0a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f003 0301 	and.w	r3, r3, #1
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d1cf      	bne.n	800aca8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800ad08:	2300      	movs	r3, #0
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3710      	adds	r7, #16
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
 800ad12:	bf00      	nop
 800ad14:	8000003f 	.word	0x8000003f
 800ad18:	50040300 	.word	0x50040300
 800ad1c:	2000005c 	.word	0x2000005c
 800ad20:	053e2d63 	.word	0x053e2d63

0800ad24 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b084      	sub	sp, #16
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7fe ff76 	bl	8009c22 <LL_ADC_IsDisableOngoing>
 800ad36:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f7fe ff5d 	bl	8009bfc <LL_ADC_IsEnabled>
 800ad42:	4603      	mov	r3, r0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d047      	beq.n	800add8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d144      	bne.n	800add8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	689b      	ldr	r3, [r3, #8]
 800ad54:	f003 030d 	and.w	r3, r3, #13
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d10c      	bne.n	800ad76 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4618      	mov	r0, r3
 800ad62:	f7fe ff37 	bl	8009bd4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	2203      	movs	r2, #3
 800ad6c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800ad6e:	f7fe fd75 	bl	800985c <HAL_GetTick>
 800ad72:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800ad74:	e029      	b.n	800adca <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad7a:	f043 0210 	orr.w	r2, r3, #16
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad86:	f043 0201 	orr.w	r2, r3, #1
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	e023      	b.n	800adda <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800ad92:	f7fe fd63 	bl	800985c <HAL_GetTick>
 800ad96:	4602      	mov	r2, r0
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	1ad3      	subs	r3, r2, r3
 800ad9c:	2b02      	cmp	r3, #2
 800ad9e:	d914      	bls.n	800adca <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	689b      	ldr	r3, [r3, #8]
 800ada6:	f003 0301 	and.w	r3, r3, #1
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d00d      	beq.n	800adca <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adb2:	f043 0210 	orr.w	r2, r3, #16
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800adbe:	f043 0201 	orr.w	r2, r3, #1
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800adc6:	2301      	movs	r3, #1
 800adc8:	e007      	b.n	800adda <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	689b      	ldr	r3, [r3, #8]
 800add0:	f003 0301 	and.w	r3, r3, #1
 800add4:	2b00      	cmp	r3, #0
 800add6:	d1dc      	bne.n	800ad92 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800add8:	2300      	movs	r3, #0
}
 800adda:	4618      	mov	r0, r3
 800addc:	3710      	adds	r7, #16
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <LL_ADC_StartCalibration>:
{
 800ade2:	b480      	push	{r7}
 800ade4:	b083      	sub	sp, #12
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
 800adea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800adf4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800adf8:	683a      	ldr	r2, [r7, #0]
 800adfa:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800adfe:	4313      	orrs	r3, r2
 800ae00:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	609a      	str	r2, [r3, #8]
}
 800ae08:	bf00      	nop
 800ae0a:	370c      	adds	r7, #12
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <LL_ADC_IsCalibrationOnGoing>:
{
 800ae14:	b480      	push	{r7}
 800ae16:	b083      	sub	sp, #12
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ae24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ae28:	d101      	bne.n	800ae2e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	e000      	b.n	800ae30 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800ae2e:	2300      	movs	r3, #0
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	370c      	adds	r7, #12
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr

0800ae3c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b084      	sub	sp, #16
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800ae46:	2300      	movs	r3, #0
 800ae48:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ae50:	2b01      	cmp	r3, #1
 800ae52:	d101      	bne.n	800ae58 <HAL_ADCEx_Calibration_Start+0x1c>
 800ae54:	2302      	movs	r3, #2
 800ae56:	e04d      	b.n	800aef4 <HAL_ADCEx_Calibration_Start+0xb8>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f7ff ff5f 	bl	800ad24 <ADC_Disable>
 800ae66:	4603      	mov	r3, r0
 800ae68:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800ae6a:	7bfb      	ldrb	r3, [r7, #15]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d136      	bne.n	800aede <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae74:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800ae78:	f023 0302 	bic.w	r3, r3, #2
 800ae7c:	f043 0202 	orr.w	r2, r3, #2
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	6839      	ldr	r1, [r7, #0]
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f7ff ffa9 	bl	800ade2 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800ae90:	e014      	b.n	800aebc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	3301      	adds	r3, #1
 800ae96:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 800ae9e:	d30d      	bcc.n	800aebc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aea4:	f023 0312 	bic.w	r3, r3, #18
 800aea8:	f043 0210 	orr.w	r2, r3, #16
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 800aeb8:	2301      	movs	r3, #1
 800aeba:	e01b      	b.n	800aef4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	4618      	mov	r0, r3
 800aec2:	f7ff ffa7 	bl	800ae14 <LL_ADC_IsCalibrationOnGoing>
 800aec6:	4603      	mov	r3, r0
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d1e2      	bne.n	800ae92 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aed0:	f023 0303 	bic.w	r3, r3, #3
 800aed4:	f043 0201 	orr.w	r2, r3, #1
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	655a      	str	r2, [r3, #84]	@ 0x54
 800aedc:	e005      	b.n	800aeea <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aee2:	f043 0210 	orr.w	r2, r3, #16
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2200      	movs	r2, #0
 800aeee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800aef2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3710      	adds	r7, #16
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b083      	sub	sp, #12
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800af04:	bf00      	nop
 800af06:	370c      	adds	r7, #12
 800af08:	46bd      	mov	sp, r7
 800af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0e:	4770      	bx	lr

0800af10 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800af10:	b480      	push	{r7}
 800af12:	b083      	sub	sp, #12
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800af18:	bf00      	nop
 800af1a:	370c      	adds	r7, #12
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	4770      	bx	lr

0800af24 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800af24:	b480      	push	{r7}
 800af26:	b083      	sub	sp, #12
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800af2c:	bf00      	nop
 800af2e:	370c      	adds	r7, #12
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr

0800af38 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800af38:	b480      	push	{r7}
 800af3a:	b083      	sub	sp, #12
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800af40:	bf00      	nop
 800af42:	370c      	adds	r7, #12
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr

0800af4c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800af54:	bf00      	nop
 800af56:	370c      	adds	r7, #12
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr

0800af60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800af60:	b480      	push	{r7}
 800af62:	b085      	sub	sp, #20
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f003 0307 	and.w	r3, r3, #7
 800af6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800af70:	4b0c      	ldr	r3, [pc, #48]	@ (800afa4 <__NVIC_SetPriorityGrouping+0x44>)
 800af72:	68db      	ldr	r3, [r3, #12]
 800af74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800af76:	68ba      	ldr	r2, [r7, #8]
 800af78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800af7c:	4013      	ands	r3, r2
 800af7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800af88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800af8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800af90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800af92:	4a04      	ldr	r2, [pc, #16]	@ (800afa4 <__NVIC_SetPriorityGrouping+0x44>)
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	60d3      	str	r3, [r2, #12]
}
 800af98:	bf00      	nop
 800af9a:	3714      	adds	r7, #20
 800af9c:	46bd      	mov	sp, r7
 800af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa2:	4770      	bx	lr
 800afa4:	e000ed00 	.word	0xe000ed00

0800afa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800afa8:	b480      	push	{r7}
 800afaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800afac:	4b04      	ldr	r3, [pc, #16]	@ (800afc0 <__NVIC_GetPriorityGrouping+0x18>)
 800afae:	68db      	ldr	r3, [r3, #12]
 800afb0:	0a1b      	lsrs	r3, r3, #8
 800afb2:	f003 0307 	and.w	r3, r3, #7
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr
 800afc0:	e000ed00 	.word	0xe000ed00

0800afc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b083      	sub	sp, #12
 800afc8:	af00      	add	r7, sp, #0
 800afca:	4603      	mov	r3, r0
 800afcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800afce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	db0b      	blt.n	800afee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800afd6:	79fb      	ldrb	r3, [r7, #7]
 800afd8:	f003 021f 	and.w	r2, r3, #31
 800afdc:	4907      	ldr	r1, [pc, #28]	@ (800affc <__NVIC_EnableIRQ+0x38>)
 800afde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800afe2:	095b      	lsrs	r3, r3, #5
 800afe4:	2001      	movs	r0, #1
 800afe6:	fa00 f202 	lsl.w	r2, r0, r2
 800afea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800afee:	bf00      	nop
 800aff0:	370c      	adds	r7, #12
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr
 800affa:	bf00      	nop
 800affc:	e000e100 	.word	0xe000e100

0800b000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b000:	b480      	push	{r7}
 800b002:	b083      	sub	sp, #12
 800b004:	af00      	add	r7, sp, #0
 800b006:	4603      	mov	r3, r0
 800b008:	6039      	str	r1, [r7, #0]
 800b00a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b00c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b010:	2b00      	cmp	r3, #0
 800b012:	db0a      	blt.n	800b02a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	b2da      	uxtb	r2, r3
 800b018:	490c      	ldr	r1, [pc, #48]	@ (800b04c <__NVIC_SetPriority+0x4c>)
 800b01a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b01e:	0112      	lsls	r2, r2, #4
 800b020:	b2d2      	uxtb	r2, r2
 800b022:	440b      	add	r3, r1
 800b024:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b028:	e00a      	b.n	800b040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	b2da      	uxtb	r2, r3
 800b02e:	4908      	ldr	r1, [pc, #32]	@ (800b050 <__NVIC_SetPriority+0x50>)
 800b030:	79fb      	ldrb	r3, [r7, #7]
 800b032:	f003 030f 	and.w	r3, r3, #15
 800b036:	3b04      	subs	r3, #4
 800b038:	0112      	lsls	r2, r2, #4
 800b03a:	b2d2      	uxtb	r2, r2
 800b03c:	440b      	add	r3, r1
 800b03e:	761a      	strb	r2, [r3, #24]
}
 800b040:	bf00      	nop
 800b042:	370c      	adds	r7, #12
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr
 800b04c:	e000e100 	.word	0xe000e100
 800b050:	e000ed00 	.word	0xe000ed00

0800b054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b054:	b480      	push	{r7}
 800b056:	b089      	sub	sp, #36	@ 0x24
 800b058:	af00      	add	r7, sp, #0
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	60b9      	str	r1, [r7, #8]
 800b05e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f003 0307 	and.w	r3, r3, #7
 800b066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b068:	69fb      	ldr	r3, [r7, #28]
 800b06a:	f1c3 0307 	rsb	r3, r3, #7
 800b06e:	2b04      	cmp	r3, #4
 800b070:	bf28      	it	cs
 800b072:	2304      	movcs	r3, #4
 800b074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b076:	69fb      	ldr	r3, [r7, #28]
 800b078:	3304      	adds	r3, #4
 800b07a:	2b06      	cmp	r3, #6
 800b07c:	d902      	bls.n	800b084 <NVIC_EncodePriority+0x30>
 800b07e:	69fb      	ldr	r3, [r7, #28]
 800b080:	3b03      	subs	r3, #3
 800b082:	e000      	b.n	800b086 <NVIC_EncodePriority+0x32>
 800b084:	2300      	movs	r3, #0
 800b086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b088:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b08c:	69bb      	ldr	r3, [r7, #24]
 800b08e:	fa02 f303 	lsl.w	r3, r2, r3
 800b092:	43da      	mvns	r2, r3
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	401a      	ands	r2, r3
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b09c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	fa01 f303 	lsl.w	r3, r1, r3
 800b0a6:	43d9      	mvns	r1, r3
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b0ac:	4313      	orrs	r3, r2
         );
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3724      	adds	r7, #36	@ 0x24
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr
	...

0800b0bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b082      	sub	sp, #8
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	3b01      	subs	r3, #1
 800b0c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b0cc:	d301      	bcc.n	800b0d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	e00f      	b.n	800b0f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b0d2:	4a0a      	ldr	r2, [pc, #40]	@ (800b0fc <SysTick_Config+0x40>)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	3b01      	subs	r3, #1
 800b0d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b0da:	210f      	movs	r1, #15
 800b0dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b0e0:	f7ff ff8e 	bl	800b000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b0e4:	4b05      	ldr	r3, [pc, #20]	@ (800b0fc <SysTick_Config+0x40>)
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b0ea:	4b04      	ldr	r3, [pc, #16]	@ (800b0fc <SysTick_Config+0x40>)
 800b0ec:	2207      	movs	r2, #7
 800b0ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b0f0:	2300      	movs	r3, #0
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3708      	adds	r7, #8
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	e000e010 	.word	0xe000e010

0800b100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b082      	sub	sp, #8
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f7ff ff29 	bl	800af60 <__NVIC_SetPriorityGrouping>
}
 800b10e:	bf00      	nop
 800b110:	3708      	adds	r7, #8
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}

0800b116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b116:	b580      	push	{r7, lr}
 800b118:	b086      	sub	sp, #24
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	4603      	mov	r3, r0
 800b11e:	60b9      	str	r1, [r7, #8]
 800b120:	607a      	str	r2, [r7, #4]
 800b122:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800b124:	2300      	movs	r3, #0
 800b126:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b128:	f7ff ff3e 	bl	800afa8 <__NVIC_GetPriorityGrouping>
 800b12c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b12e:	687a      	ldr	r2, [r7, #4]
 800b130:	68b9      	ldr	r1, [r7, #8]
 800b132:	6978      	ldr	r0, [r7, #20]
 800b134:	f7ff ff8e 	bl	800b054 <NVIC_EncodePriority>
 800b138:	4602      	mov	r2, r0
 800b13a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b13e:	4611      	mov	r1, r2
 800b140:	4618      	mov	r0, r3
 800b142:	f7ff ff5d 	bl	800b000 <__NVIC_SetPriority>
}
 800b146:	bf00      	nop
 800b148:	3718      	adds	r7, #24
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}

0800b14e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b14e:	b580      	push	{r7, lr}
 800b150:	b082      	sub	sp, #8
 800b152:	af00      	add	r7, sp, #0
 800b154:	4603      	mov	r3, r0
 800b156:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7ff ff31 	bl	800afc4 <__NVIC_EnableIRQ>
}
 800b162:	bf00      	nop
 800b164:	3708      	adds	r7, #8
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}

0800b16a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b16a:	b580      	push	{r7, lr}
 800b16c:	b082      	sub	sp, #8
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f7ff ffa2 	bl	800b0bc <SysTick_Config>
 800b178:	4603      	mov	r3, r0
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3708      	adds	r7, #8
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}
	...

0800b184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b184:	b480      	push	{r7}
 800b186:	b087      	sub	sp, #28
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800b18e:	2300      	movs	r3, #0
 800b190:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b192:	e148      	b.n	800b426 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	2101      	movs	r1, #1
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	fa01 f303 	lsl.w	r3, r1, r3
 800b1a0:	4013      	ands	r3, r2
 800b1a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	f000 813a 	beq.w	800b420 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	f003 0303 	and.w	r3, r3, #3
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d005      	beq.n	800b1c4 <HAL_GPIO_Init+0x40>
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	f003 0303 	and.w	r3, r3, #3
 800b1c0:	2b02      	cmp	r3, #2
 800b1c2:	d130      	bne.n	800b226 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	689b      	ldr	r3, [r3, #8]
 800b1c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	005b      	lsls	r3, r3, #1
 800b1ce:	2203      	movs	r2, #3
 800b1d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b1d4:	43db      	mvns	r3, r3
 800b1d6:	693a      	ldr	r2, [r7, #16]
 800b1d8:	4013      	ands	r3, r2
 800b1da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	68da      	ldr	r2, [r3, #12]
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	005b      	lsls	r3, r3, #1
 800b1e4:	fa02 f303 	lsl.w	r3, r2, r3
 800b1e8:	693a      	ldr	r2, [r7, #16]
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	693a      	ldr	r2, [r7, #16]
 800b1f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	685b      	ldr	r3, [r3, #4]
 800b1f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b1fa:	2201      	movs	r2, #1
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	fa02 f303 	lsl.w	r3, r2, r3
 800b202:	43db      	mvns	r3, r3
 800b204:	693a      	ldr	r2, [r7, #16]
 800b206:	4013      	ands	r3, r2
 800b208:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	685b      	ldr	r3, [r3, #4]
 800b20e:	091b      	lsrs	r3, r3, #4
 800b210:	f003 0201 	and.w	r2, r3, #1
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	fa02 f303 	lsl.w	r3, r2, r3
 800b21a:	693a      	ldr	r2, [r7, #16]
 800b21c:	4313      	orrs	r3, r2
 800b21e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	693a      	ldr	r2, [r7, #16]
 800b224:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	f003 0303 	and.w	r3, r3, #3
 800b22e:	2b03      	cmp	r3, #3
 800b230:	d017      	beq.n	800b262 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	68db      	ldr	r3, [r3, #12]
 800b236:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	005b      	lsls	r3, r3, #1
 800b23c:	2203      	movs	r2, #3
 800b23e:	fa02 f303 	lsl.w	r3, r2, r3
 800b242:	43db      	mvns	r3, r3
 800b244:	693a      	ldr	r2, [r7, #16]
 800b246:	4013      	ands	r3, r2
 800b248:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	689a      	ldr	r2, [r3, #8]
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	005b      	lsls	r3, r3, #1
 800b252:	fa02 f303 	lsl.w	r3, r2, r3
 800b256:	693a      	ldr	r2, [r7, #16]
 800b258:	4313      	orrs	r3, r2
 800b25a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	693a      	ldr	r2, [r7, #16]
 800b260:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	f003 0303 	and.w	r3, r3, #3
 800b26a:	2b02      	cmp	r3, #2
 800b26c:	d123      	bne.n	800b2b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	08da      	lsrs	r2, r3, #3
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	3208      	adds	r2, #8
 800b276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b27a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	f003 0307 	and.w	r3, r3, #7
 800b282:	009b      	lsls	r3, r3, #2
 800b284:	220f      	movs	r2, #15
 800b286:	fa02 f303 	lsl.w	r3, r2, r3
 800b28a:	43db      	mvns	r3, r3
 800b28c:	693a      	ldr	r2, [r7, #16]
 800b28e:	4013      	ands	r3, r2
 800b290:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	691a      	ldr	r2, [r3, #16]
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	f003 0307 	and.w	r3, r3, #7
 800b29c:	009b      	lsls	r3, r3, #2
 800b29e:	fa02 f303 	lsl.w	r3, r2, r3
 800b2a2:	693a      	ldr	r2, [r7, #16]
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	08da      	lsrs	r2, r3, #3
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	3208      	adds	r2, #8
 800b2b0:	6939      	ldr	r1, [r7, #16]
 800b2b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	005b      	lsls	r3, r3, #1
 800b2c0:	2203      	movs	r2, #3
 800b2c2:	fa02 f303 	lsl.w	r3, r2, r3
 800b2c6:	43db      	mvns	r3, r3
 800b2c8:	693a      	ldr	r2, [r7, #16]
 800b2ca:	4013      	ands	r3, r2
 800b2cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	685b      	ldr	r3, [r3, #4]
 800b2d2:	f003 0203 	and.w	r2, r3, #3
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	005b      	lsls	r3, r3, #1
 800b2da:	fa02 f303 	lsl.w	r3, r2, r3
 800b2de:	693a      	ldr	r2, [r7, #16]
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	693a      	ldr	r2, [r7, #16]
 800b2e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	685b      	ldr	r3, [r3, #4]
 800b2ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	f000 8094 	beq.w	800b420 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b2f8:	4b52      	ldr	r3, [pc, #328]	@ (800b444 <HAL_GPIO_Init+0x2c0>)
 800b2fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b2fc:	4a51      	ldr	r2, [pc, #324]	@ (800b444 <HAL_GPIO_Init+0x2c0>)
 800b2fe:	f043 0301 	orr.w	r3, r3, #1
 800b302:	6613      	str	r3, [r2, #96]	@ 0x60
 800b304:	4b4f      	ldr	r3, [pc, #316]	@ (800b444 <HAL_GPIO_Init+0x2c0>)
 800b306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b308:	f003 0301 	and.w	r3, r3, #1
 800b30c:	60bb      	str	r3, [r7, #8]
 800b30e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800b310:	4a4d      	ldr	r2, [pc, #308]	@ (800b448 <HAL_GPIO_Init+0x2c4>)
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	089b      	lsrs	r3, r3, #2
 800b316:	3302      	adds	r3, #2
 800b318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b31c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	f003 0303 	and.w	r3, r3, #3
 800b324:	009b      	lsls	r3, r3, #2
 800b326:	220f      	movs	r2, #15
 800b328:	fa02 f303 	lsl.w	r3, r2, r3
 800b32c:	43db      	mvns	r3, r3
 800b32e:	693a      	ldr	r2, [r7, #16]
 800b330:	4013      	ands	r3, r2
 800b332:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800b33a:	d00d      	beq.n	800b358 <HAL_GPIO_Init+0x1d4>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	4a43      	ldr	r2, [pc, #268]	@ (800b44c <HAL_GPIO_Init+0x2c8>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d007      	beq.n	800b354 <HAL_GPIO_Init+0x1d0>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	4a42      	ldr	r2, [pc, #264]	@ (800b450 <HAL_GPIO_Init+0x2cc>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d101      	bne.n	800b350 <HAL_GPIO_Init+0x1cc>
 800b34c:	2302      	movs	r3, #2
 800b34e:	e004      	b.n	800b35a <HAL_GPIO_Init+0x1d6>
 800b350:	2307      	movs	r3, #7
 800b352:	e002      	b.n	800b35a <HAL_GPIO_Init+0x1d6>
 800b354:	2301      	movs	r3, #1
 800b356:	e000      	b.n	800b35a <HAL_GPIO_Init+0x1d6>
 800b358:	2300      	movs	r3, #0
 800b35a:	697a      	ldr	r2, [r7, #20]
 800b35c:	f002 0203 	and.w	r2, r2, #3
 800b360:	0092      	lsls	r2, r2, #2
 800b362:	4093      	lsls	r3, r2
 800b364:	693a      	ldr	r2, [r7, #16]
 800b366:	4313      	orrs	r3, r2
 800b368:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800b36a:	4937      	ldr	r1, [pc, #220]	@ (800b448 <HAL_GPIO_Init+0x2c4>)
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	089b      	lsrs	r3, r3, #2
 800b370:	3302      	adds	r3, #2
 800b372:	693a      	ldr	r2, [r7, #16]
 800b374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b378:	4b36      	ldr	r3, [pc, #216]	@ (800b454 <HAL_GPIO_Init+0x2d0>)
 800b37a:	689b      	ldr	r3, [r3, #8]
 800b37c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	43db      	mvns	r3, r3
 800b382:	693a      	ldr	r2, [r7, #16]
 800b384:	4013      	ands	r3, r2
 800b386:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b390:	2b00      	cmp	r3, #0
 800b392:	d003      	beq.n	800b39c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800b394:	693a      	ldr	r2, [r7, #16]
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	4313      	orrs	r3, r2
 800b39a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800b39c:	4a2d      	ldr	r2, [pc, #180]	@ (800b454 <HAL_GPIO_Init+0x2d0>)
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800b3a2:	4b2c      	ldr	r3, [pc, #176]	@ (800b454 <HAL_GPIO_Init+0x2d0>)
 800b3a4:	68db      	ldr	r3, [r3, #12]
 800b3a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	43db      	mvns	r3, r3
 800b3ac:	693a      	ldr	r2, [r7, #16]
 800b3ae:	4013      	ands	r3, r2
 800b3b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d003      	beq.n	800b3c6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800b3be:	693a      	ldr	r2, [r7, #16]
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800b3c6:	4a23      	ldr	r2, [pc, #140]	@ (800b454 <HAL_GPIO_Init+0x2d0>)
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800b3cc:	4b21      	ldr	r3, [pc, #132]	@ (800b454 <HAL_GPIO_Init+0x2d0>)
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	43db      	mvns	r3, r3
 800b3d6:	693a      	ldr	r2, [r7, #16]
 800b3d8:	4013      	ands	r3, r2
 800b3da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d003      	beq.n	800b3f0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800b3e8:	693a      	ldr	r2, [r7, #16]
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	4313      	orrs	r3, r2
 800b3ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800b3f0:	4a18      	ldr	r2, [pc, #96]	@ (800b454 <HAL_GPIO_Init+0x2d0>)
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800b3f6:	4b17      	ldr	r3, [pc, #92]	@ (800b454 <HAL_GPIO_Init+0x2d0>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	43db      	mvns	r3, r3
 800b400:	693a      	ldr	r2, [r7, #16]
 800b402:	4013      	ands	r3, r2
 800b404:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	685b      	ldr	r3, [r3, #4]
 800b40a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d003      	beq.n	800b41a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800b412:	693a      	ldr	r2, [r7, #16]
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	4313      	orrs	r3, r2
 800b418:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800b41a:	4a0e      	ldr	r2, [pc, #56]	@ (800b454 <HAL_GPIO_Init+0x2d0>)
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	3301      	adds	r3, #1
 800b424:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	681a      	ldr	r2, [r3, #0]
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	fa22 f303 	lsr.w	r3, r2, r3
 800b430:	2b00      	cmp	r3, #0
 800b432:	f47f aeaf 	bne.w	800b194 <HAL_GPIO_Init+0x10>
  }
}
 800b436:	bf00      	nop
 800b438:	bf00      	nop
 800b43a:	371c      	adds	r7, #28
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr
 800b444:	40021000 	.word	0x40021000
 800b448:	40010000 	.word	0x40010000
 800b44c:	48000400 	.word	0x48000400
 800b450:	48000800 	.word	0x48000800
 800b454:	40010400 	.word	0x40010400

0800b458 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b458:	b480      	push	{r7}
 800b45a:	b083      	sub	sp, #12
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	460b      	mov	r3, r1
 800b462:	807b      	strh	r3, [r7, #2]
 800b464:	4613      	mov	r3, r2
 800b466:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b468:	787b      	ldrb	r3, [r7, #1]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d003      	beq.n	800b476 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b46e:	887a      	ldrh	r2, [r7, #2]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b474:	e002      	b.n	800b47c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b476:	887a      	ldrh	r2, [r7, #2]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800b47c:	bf00      	nop
 800b47e:	370c      	adds	r7, #12
 800b480:	46bd      	mov	sp, r7
 800b482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b486:	4770      	bx	lr

0800b488 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	4603      	mov	r3, r0
 800b490:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800b492:	4b08      	ldr	r3, [pc, #32]	@ (800b4b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b494:	695a      	ldr	r2, [r3, #20]
 800b496:	88fb      	ldrh	r3, [r7, #6]
 800b498:	4013      	ands	r3, r2
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d006      	beq.n	800b4ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b49e:	4a05      	ldr	r2, [pc, #20]	@ (800b4b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b4a0:	88fb      	ldrh	r3, [r7, #6]
 800b4a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b4a4:	88fb      	ldrh	r3, [r7, #6]
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f7f9 fab8 	bl	8004a1c <HAL_GPIO_EXTI_Callback>
  }
}
 800b4ac:	bf00      	nop
 800b4ae:	3708      	adds	r7, #8
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}
 800b4b4:	40010400 	.word	0x40010400

0800b4b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d101      	bne.n	800b4ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	e08d      	b.n	800b5e6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b4d0:	b2db      	uxtb	r3, r3
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d106      	bne.n	800b4e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f7f9 fc12 	bl	8004d08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2224      	movs	r2, #36	@ 0x24
 800b4e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	681a      	ldr	r2, [r3, #0]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f022 0201 	bic.w	r2, r2, #1
 800b4fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	685a      	ldr	r2, [r3, #4]
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800b508:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	689a      	ldr	r2, [r3, #8]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b518:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	68db      	ldr	r3, [r3, #12]
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d107      	bne.n	800b532 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	689a      	ldr	r2, [r3, #8]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b52e:	609a      	str	r2, [r3, #8]
 800b530:	e006      	b.n	800b540 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	689a      	ldr	r2, [r3, #8]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800b53e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	68db      	ldr	r3, [r3, #12]
 800b544:	2b02      	cmp	r3, #2
 800b546:	d108      	bne.n	800b55a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	685a      	ldr	r2, [r3, #4]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b556:	605a      	str	r2, [r3, #4]
 800b558:	e007      	b.n	800b56a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	685a      	ldr	r2, [r3, #4]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b568:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	685b      	ldr	r3, [r3, #4]
 800b570:	687a      	ldr	r2, [r7, #4]
 800b572:	6812      	ldr	r2, [r2, #0]
 800b574:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b578:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b57c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	68da      	ldr	r2, [r3, #12]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b58c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	691a      	ldr	r2, [r3, #16]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	695b      	ldr	r3, [r3, #20]
 800b596:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	699b      	ldr	r3, [r3, #24]
 800b59e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	430a      	orrs	r2, r1
 800b5a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	69d9      	ldr	r1, [r3, #28]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6a1a      	ldr	r2, [r3, #32]
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	430a      	orrs	r2, r1
 800b5b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	681a      	ldr	r2, [r3, #0]
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f042 0201 	orr.w	r2, r2, #1
 800b5c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2220      	movs	r2, #32
 800b5d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800b5e4:	2300      	movs	r3, #0
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3708      	adds	r7, #8
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}
	...

0800b5f0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b088      	sub	sp, #32
 800b5f4:	af02      	add	r7, sp, #8
 800b5f6:	60f8      	str	r0, [r7, #12]
 800b5f8:	4608      	mov	r0, r1
 800b5fa:	4611      	mov	r1, r2
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	4603      	mov	r3, r0
 800b600:	817b      	strh	r3, [r7, #10]
 800b602:	460b      	mov	r3, r1
 800b604:	813b      	strh	r3, [r7, #8]
 800b606:	4613      	mov	r3, r2
 800b608:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b610:	b2db      	uxtb	r3, r3
 800b612:	2b20      	cmp	r3, #32
 800b614:	f040 80f9 	bne.w	800b80a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b618:	6a3b      	ldr	r3, [r7, #32]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d002      	beq.n	800b624 <HAL_I2C_Mem_Write+0x34>
 800b61e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b620:	2b00      	cmp	r3, #0
 800b622:	d105      	bne.n	800b630 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b62a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800b62c:	2301      	movs	r3, #1
 800b62e:	e0ed      	b.n	800b80c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b636:	2b01      	cmp	r3, #1
 800b638:	d101      	bne.n	800b63e <HAL_I2C_Mem_Write+0x4e>
 800b63a:	2302      	movs	r3, #2
 800b63c:	e0e6      	b.n	800b80c <HAL_I2C_Mem_Write+0x21c>
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	2201      	movs	r2, #1
 800b642:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b646:	f7fe f909 	bl	800985c <HAL_GetTick>
 800b64a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	9300      	str	r3, [sp, #0]
 800b650:	2319      	movs	r3, #25
 800b652:	2201      	movs	r2, #1
 800b654:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b658:	68f8      	ldr	r0, [r7, #12]
 800b65a:	f000 fbaf 	bl	800bdbc <I2C_WaitOnFlagUntilTimeout>
 800b65e:	4603      	mov	r3, r0
 800b660:	2b00      	cmp	r3, #0
 800b662:	d001      	beq.n	800b668 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800b664:	2301      	movs	r3, #1
 800b666:	e0d1      	b.n	800b80c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2221      	movs	r2, #33	@ 0x21
 800b66c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	2240      	movs	r2, #64	@ 0x40
 800b674:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2200      	movs	r2, #0
 800b67c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	6a3a      	ldr	r2, [r7, #32]
 800b682:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b688:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2200      	movs	r2, #0
 800b68e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b690:	88f8      	ldrh	r0, [r7, #6]
 800b692:	893a      	ldrh	r2, [r7, #8]
 800b694:	8979      	ldrh	r1, [r7, #10]
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	9301      	str	r3, [sp, #4]
 800b69a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b69c:	9300      	str	r3, [sp, #0]
 800b69e:	4603      	mov	r3, r0
 800b6a0:	68f8      	ldr	r0, [r7, #12]
 800b6a2:	f000 fabf 	bl	800bc24 <I2C_RequestMemoryWrite>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d005      	beq.n	800b6b8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	e0a9      	b.n	800b80c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	2bff      	cmp	r3, #255	@ 0xff
 800b6c0:	d90e      	bls.n	800b6e0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	22ff      	movs	r2, #255	@ 0xff
 800b6c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b6cc:	b2da      	uxtb	r2, r3
 800b6ce:	8979      	ldrh	r1, [r7, #10]
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	9300      	str	r3, [sp, #0]
 800b6d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b6d8:	68f8      	ldr	r0, [r7, #12]
 800b6da:	f000 fd33 	bl	800c144 <I2C_TransferConfig>
 800b6de:	e00f      	b.n	800b700 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b6e4:	b29a      	uxth	r2, r3
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b6ee:	b2da      	uxtb	r2, r3
 800b6f0:	8979      	ldrh	r1, [r7, #10]
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	9300      	str	r3, [sp, #0]
 800b6f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b6fa:	68f8      	ldr	r0, [r7, #12]
 800b6fc:	f000 fd22 	bl	800c144 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b700:	697a      	ldr	r2, [r7, #20]
 800b702:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b704:	68f8      	ldr	r0, [r7, #12]
 800b706:	f000 fbb2 	bl	800be6e <I2C_WaitOnTXISFlagUntilTimeout>
 800b70a:	4603      	mov	r3, r0
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d001      	beq.n	800b714 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800b710:	2301      	movs	r3, #1
 800b712:	e07b      	b.n	800b80c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b718:	781a      	ldrb	r2, [r3, #0]
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b724:	1c5a      	adds	r2, r3, #1
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b72e:	b29b      	uxth	r3, r3
 800b730:	3b01      	subs	r3, #1
 800b732:	b29a      	uxth	r2, r3
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b73c:	3b01      	subs	r3, #1
 800b73e:	b29a      	uxth	r2, r3
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b748:	b29b      	uxth	r3, r3
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d034      	beq.n	800b7b8 <HAL_I2C_Mem_Write+0x1c8>
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b752:	2b00      	cmp	r3, #0
 800b754:	d130      	bne.n	800b7b8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	9300      	str	r3, [sp, #0]
 800b75a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b75c:	2200      	movs	r2, #0
 800b75e:	2180      	movs	r1, #128	@ 0x80
 800b760:	68f8      	ldr	r0, [r7, #12]
 800b762:	f000 fb2b 	bl	800bdbc <I2C_WaitOnFlagUntilTimeout>
 800b766:	4603      	mov	r3, r0
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d001      	beq.n	800b770 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800b76c:	2301      	movs	r3, #1
 800b76e:	e04d      	b.n	800b80c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b774:	b29b      	uxth	r3, r3
 800b776:	2bff      	cmp	r3, #255	@ 0xff
 800b778:	d90e      	bls.n	800b798 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	22ff      	movs	r2, #255	@ 0xff
 800b77e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b784:	b2da      	uxtb	r2, r3
 800b786:	8979      	ldrh	r1, [r7, #10]
 800b788:	2300      	movs	r3, #0
 800b78a:	9300      	str	r3, [sp, #0]
 800b78c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b790:	68f8      	ldr	r0, [r7, #12]
 800b792:	f000 fcd7 	bl	800c144 <I2C_TransferConfig>
 800b796:	e00f      	b.n	800b7b8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b79c:	b29a      	uxth	r2, r3
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b7a6:	b2da      	uxtb	r2, r3
 800b7a8:	8979      	ldrh	r1, [r7, #10]
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	9300      	str	r3, [sp, #0]
 800b7ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b7b2:	68f8      	ldr	r0, [r7, #12]
 800b7b4:	f000 fcc6 	bl	800c144 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d19e      	bne.n	800b700 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b7c2:	697a      	ldr	r2, [r7, #20]
 800b7c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b7c6:	68f8      	ldr	r0, [r7, #12]
 800b7c8:	f000 fb98 	bl	800befc <I2C_WaitOnSTOPFlagUntilTimeout>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d001      	beq.n	800b7d6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	e01a      	b.n	800b80c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	2220      	movs	r2, #32
 800b7dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	6859      	ldr	r1, [r3, #4]
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681a      	ldr	r2, [r3, #0]
 800b7e8:	4b0a      	ldr	r3, [pc, #40]	@ (800b814 <HAL_I2C_Mem_Write+0x224>)
 800b7ea:	400b      	ands	r3, r1
 800b7ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2220      	movs	r2, #32
 800b7f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2200      	movs	r2, #0
 800b802:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b806:	2300      	movs	r3, #0
 800b808:	e000      	b.n	800b80c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800b80a:	2302      	movs	r3, #2
  }
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3718      	adds	r7, #24
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}
 800b814:	fe00e800 	.word	0xfe00e800

0800b818 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b088      	sub	sp, #32
 800b81c:	af02      	add	r7, sp, #8
 800b81e:	60f8      	str	r0, [r7, #12]
 800b820:	4608      	mov	r0, r1
 800b822:	4611      	mov	r1, r2
 800b824:	461a      	mov	r2, r3
 800b826:	4603      	mov	r3, r0
 800b828:	817b      	strh	r3, [r7, #10]
 800b82a:	460b      	mov	r3, r1
 800b82c:	813b      	strh	r3, [r7, #8]
 800b82e:	4613      	mov	r3, r2
 800b830:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b838:	b2db      	uxtb	r3, r3
 800b83a:	2b20      	cmp	r3, #32
 800b83c:	f040 80fd 	bne.w	800ba3a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800b840:	6a3b      	ldr	r3, [r7, #32]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d002      	beq.n	800b84c <HAL_I2C_Mem_Read+0x34>
 800b846:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d105      	bne.n	800b858 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b852:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800b854:	2301      	movs	r3, #1
 800b856:	e0f1      	b.n	800ba3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b85e:	2b01      	cmp	r3, #1
 800b860:	d101      	bne.n	800b866 <HAL_I2C_Mem_Read+0x4e>
 800b862:	2302      	movs	r3, #2
 800b864:	e0ea      	b.n	800ba3c <HAL_I2C_Mem_Read+0x224>
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	2201      	movs	r2, #1
 800b86a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b86e:	f7fd fff5 	bl	800985c <HAL_GetTick>
 800b872:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	9300      	str	r3, [sp, #0]
 800b878:	2319      	movs	r3, #25
 800b87a:	2201      	movs	r2, #1
 800b87c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b880:	68f8      	ldr	r0, [r7, #12]
 800b882:	f000 fa9b 	bl	800bdbc <I2C_WaitOnFlagUntilTimeout>
 800b886:	4603      	mov	r3, r0
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d001      	beq.n	800b890 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800b88c:	2301      	movs	r3, #1
 800b88e:	e0d5      	b.n	800ba3c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2222      	movs	r2, #34	@ 0x22
 800b894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2240      	movs	r2, #64	@ 0x40
 800b89c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	6a3a      	ldr	r2, [r7, #32]
 800b8aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b8b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b8b8:	88f8      	ldrh	r0, [r7, #6]
 800b8ba:	893a      	ldrh	r2, [r7, #8]
 800b8bc:	8979      	ldrh	r1, [r7, #10]
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	9301      	str	r3, [sp, #4]
 800b8c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8c4:	9300      	str	r3, [sp, #0]
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	68f8      	ldr	r0, [r7, #12]
 800b8ca:	f000 f9ff 	bl	800bccc <I2C_RequestMemoryRead>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d005      	beq.n	800b8e0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800b8dc:	2301      	movs	r3, #1
 800b8de:	e0ad      	b.n	800ba3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b8e4:	b29b      	uxth	r3, r3
 800b8e6:	2bff      	cmp	r3, #255	@ 0xff
 800b8e8:	d90e      	bls.n	800b908 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b8f4:	b2da      	uxtb	r2, r3
 800b8f6:	8979      	ldrh	r1, [r7, #10]
 800b8f8:	4b52      	ldr	r3, [pc, #328]	@ (800ba44 <HAL_I2C_Mem_Read+0x22c>)
 800b8fa:	9300      	str	r3, [sp, #0]
 800b8fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b900:	68f8      	ldr	r0, [r7, #12]
 800b902:	f000 fc1f 	bl	800c144 <I2C_TransferConfig>
 800b906:	e00f      	b.n	800b928 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b90c:	b29a      	uxth	r2, r3
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b916:	b2da      	uxtb	r2, r3
 800b918:	8979      	ldrh	r1, [r7, #10]
 800b91a:	4b4a      	ldr	r3, [pc, #296]	@ (800ba44 <HAL_I2C_Mem_Read+0x22c>)
 800b91c:	9300      	str	r3, [sp, #0]
 800b91e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b922:	68f8      	ldr	r0, [r7, #12]
 800b924:	f000 fc0e 	bl	800c144 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	9300      	str	r3, [sp, #0]
 800b92c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b92e:	2200      	movs	r2, #0
 800b930:	2104      	movs	r1, #4
 800b932:	68f8      	ldr	r0, [r7, #12]
 800b934:	f000 fa42 	bl	800bdbc <I2C_WaitOnFlagUntilTimeout>
 800b938:	4603      	mov	r3, r0
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d001      	beq.n	800b942 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800b93e:	2301      	movs	r3, #1
 800b940:	e07c      	b.n	800ba3c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b94c:	b2d2      	uxtb	r2, r2
 800b94e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b954:	1c5a      	adds	r2, r3, #1
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b95e:	3b01      	subs	r3, #1
 800b960:	b29a      	uxth	r2, r3
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b96a:	b29b      	uxth	r3, r3
 800b96c:	3b01      	subs	r3, #1
 800b96e:	b29a      	uxth	r2, r3
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b978:	b29b      	uxth	r3, r3
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d034      	beq.n	800b9e8 <HAL_I2C_Mem_Read+0x1d0>
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b982:	2b00      	cmp	r3, #0
 800b984:	d130      	bne.n	800b9e8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	9300      	str	r3, [sp, #0]
 800b98a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b98c:	2200      	movs	r2, #0
 800b98e:	2180      	movs	r1, #128	@ 0x80
 800b990:	68f8      	ldr	r0, [r7, #12]
 800b992:	f000 fa13 	bl	800bdbc <I2C_WaitOnFlagUntilTimeout>
 800b996:	4603      	mov	r3, r0
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d001      	beq.n	800b9a0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800b99c:	2301      	movs	r3, #1
 800b99e:	e04d      	b.n	800ba3c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b9a4:	b29b      	uxth	r3, r3
 800b9a6:	2bff      	cmp	r3, #255	@ 0xff
 800b9a8:	d90e      	bls.n	800b9c8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b9b4:	b2da      	uxtb	r2, r3
 800b9b6:	8979      	ldrh	r1, [r7, #10]
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	9300      	str	r3, [sp, #0]
 800b9bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b9c0:	68f8      	ldr	r0, [r7, #12]
 800b9c2:	f000 fbbf 	bl	800c144 <I2C_TransferConfig>
 800b9c6:	e00f      	b.n	800b9e8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b9cc:	b29a      	uxth	r2, r3
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b9d6:	b2da      	uxtb	r2, r3
 800b9d8:	8979      	ldrh	r1, [r7, #10]
 800b9da:	2300      	movs	r3, #0
 800b9dc:	9300      	str	r3, [sp, #0]
 800b9de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b9e2:	68f8      	ldr	r0, [r7, #12]
 800b9e4:	f000 fbae 	bl	800c144 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b9ec:	b29b      	uxth	r3, r3
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d19a      	bne.n	800b928 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b9f2:	697a      	ldr	r2, [r7, #20]
 800b9f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b9f6:	68f8      	ldr	r0, [r7, #12]
 800b9f8:	f000 fa80 	bl	800befc <I2C_WaitOnSTOPFlagUntilTimeout>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d001      	beq.n	800ba06 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800ba02:	2301      	movs	r3, #1
 800ba04:	e01a      	b.n	800ba3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	2220      	movs	r2, #32
 800ba0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	6859      	ldr	r1, [r3, #4]
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681a      	ldr	r2, [r3, #0]
 800ba18:	4b0b      	ldr	r3, [pc, #44]	@ (800ba48 <HAL_I2C_Mem_Read+0x230>)
 800ba1a:	400b      	ands	r3, r1
 800ba1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2220      	movs	r2, #32
 800ba22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2200      	movs	r2, #0
 800ba32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ba36:	2300      	movs	r3, #0
 800ba38:	e000      	b.n	800ba3c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800ba3a:	2302      	movs	r3, #2
  }
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3718      	adds	r7, #24
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}
 800ba44:	80002400 	.word	0x80002400
 800ba48:	fe00e800 	.word	0xfe00e800

0800ba4c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b08a      	sub	sp, #40	@ 0x28
 800ba50:	af02      	add	r7, sp, #8
 800ba52:	60f8      	str	r0, [r7, #12]
 800ba54:	607a      	str	r2, [r7, #4]
 800ba56:	603b      	str	r3, [r7, #0]
 800ba58:	460b      	mov	r3, r1
 800ba5a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ba66:	b2db      	uxtb	r3, r3
 800ba68:	2b20      	cmp	r3, #32
 800ba6a:	f040 80d6 	bne.w	800bc1a <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	699b      	ldr	r3, [r3, #24]
 800ba74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ba78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ba7c:	d101      	bne.n	800ba82 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800ba7e:	2302      	movs	r3, #2
 800ba80:	e0cc      	b.n	800bc1c <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	d101      	bne.n	800ba90 <HAL_I2C_IsDeviceReady+0x44>
 800ba8c:	2302      	movs	r3, #2
 800ba8e:	e0c5      	b.n	800bc1c <HAL_I2C_IsDeviceReady+0x1d0>
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2201      	movs	r2, #1
 800ba94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2224      	movs	r2, #36	@ 0x24
 800ba9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2200      	movs	r2, #0
 800baa4:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	68db      	ldr	r3, [r3, #12]
 800baaa:	2b01      	cmp	r3, #1
 800baac:	d107      	bne.n	800babe <HAL_I2C_IsDeviceReady+0x72>
 800baae:	897b      	ldrh	r3, [r7, #10]
 800bab0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bab4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800bab8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800babc:	e006      	b.n	800bacc <HAL_I2C_IsDeviceReady+0x80>
 800babe:	897b      	ldrh	r3, [r7, #10]
 800bac0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bac4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800bac8:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 800bacc:	68fa      	ldr	r2, [r7, #12]
 800bace:	6812      	ldr	r2, [r2, #0]
 800bad0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800bad2:	f7fd fec3 	bl	800985c <HAL_GetTick>
 800bad6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	699b      	ldr	r3, [r3, #24]
 800bade:	f003 0320 	and.w	r3, r3, #32
 800bae2:	2b20      	cmp	r3, #32
 800bae4:	bf0c      	ite	eq
 800bae6:	2301      	moveq	r3, #1
 800bae8:	2300      	movne	r3, #0
 800baea:	b2db      	uxtb	r3, r3
 800baec:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	699b      	ldr	r3, [r3, #24]
 800baf4:	f003 0310 	and.w	r3, r3, #16
 800baf8:	2b10      	cmp	r3, #16
 800bafa:	bf0c      	ite	eq
 800bafc:	2301      	moveq	r3, #1
 800bafe:	2300      	movne	r3, #0
 800bb00:	b2db      	uxtb	r3, r3
 800bb02:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800bb04:	e034      	b.n	800bb70 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bb0c:	d01a      	beq.n	800bb44 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bb0e:	f7fd fea5 	bl	800985c <HAL_GetTick>
 800bb12:	4602      	mov	r2, r0
 800bb14:	69bb      	ldr	r3, [r7, #24]
 800bb16:	1ad3      	subs	r3, r2, r3
 800bb18:	683a      	ldr	r2, [r7, #0]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d302      	bcc.n	800bb24 <HAL_I2C_IsDeviceReady+0xd8>
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d10f      	bne.n	800bb44 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2220      	movs	r2, #32
 800bb28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb30:	f043 0220 	orr.w	r2, r3, #32
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800bb40:	2301      	movs	r3, #1
 800bb42:	e06b      	b.n	800bc1c <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	699b      	ldr	r3, [r3, #24]
 800bb4a:	f003 0320 	and.w	r3, r3, #32
 800bb4e:	2b20      	cmp	r3, #32
 800bb50:	bf0c      	ite	eq
 800bb52:	2301      	moveq	r3, #1
 800bb54:	2300      	movne	r3, #0
 800bb56:	b2db      	uxtb	r3, r3
 800bb58:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	699b      	ldr	r3, [r3, #24]
 800bb60:	f003 0310 	and.w	r3, r3, #16
 800bb64:	2b10      	cmp	r3, #16
 800bb66:	bf0c      	ite	eq
 800bb68:	2301      	moveq	r3, #1
 800bb6a:	2300      	movne	r3, #0
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800bb70:	7ffb      	ldrb	r3, [r7, #31]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d102      	bne.n	800bb7c <HAL_I2C_IsDeviceReady+0x130>
 800bb76:	7fbb      	ldrb	r3, [r7, #30]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d0c4      	beq.n	800bb06 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	699b      	ldr	r3, [r3, #24]
 800bb82:	f003 0310 	and.w	r3, r3, #16
 800bb86:	2b10      	cmp	r3, #16
 800bb88:	d01a      	beq.n	800bbc0 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800bb8a:	69bb      	ldr	r3, [r7, #24]
 800bb8c:	9300      	str	r3, [sp, #0]
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	2200      	movs	r2, #0
 800bb92:	2120      	movs	r1, #32
 800bb94:	68f8      	ldr	r0, [r7, #12]
 800bb96:	f000 f911 	bl	800bdbc <I2C_WaitOnFlagUntilTimeout>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d001      	beq.n	800bba4 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800bba0:	2301      	movs	r3, #1
 800bba2:	e03b      	b.n	800bc1c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	2220      	movs	r2, #32
 800bbaa:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	2220      	movs	r2, #32
 800bbb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	e02d      	b.n	800bc1c <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800bbc0:	69bb      	ldr	r3, [r7, #24]
 800bbc2:	9300      	str	r3, [sp, #0]
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	2120      	movs	r1, #32
 800bbca:	68f8      	ldr	r0, [r7, #12]
 800bbcc:	f000 f8f6 	bl	800bdbc <I2C_WaitOnFlagUntilTimeout>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d001      	beq.n	800bbda <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	e020      	b.n	800bc1c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	2210      	movs	r2, #16
 800bbe0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	2220      	movs	r2, #32
 800bbe8:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	3301      	adds	r3, #1
 800bbee:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800bbf0:	697b      	ldr	r3, [r7, #20]
 800bbf2:	687a      	ldr	r2, [r7, #4]
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	f63f af56 	bhi.w	800baa6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2220      	movs	r2, #32
 800bbfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc06:	f043 0220 	orr.w	r2, r3, #32
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2200      	movs	r2, #0
 800bc12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800bc16:	2301      	movs	r3, #1
 800bc18:	e000      	b.n	800bc1c <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800bc1a:	2302      	movs	r3, #2
  }
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3720      	adds	r7, #32
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b086      	sub	sp, #24
 800bc28:	af02      	add	r7, sp, #8
 800bc2a:	60f8      	str	r0, [r7, #12]
 800bc2c:	4608      	mov	r0, r1
 800bc2e:	4611      	mov	r1, r2
 800bc30:	461a      	mov	r2, r3
 800bc32:	4603      	mov	r3, r0
 800bc34:	817b      	strh	r3, [r7, #10]
 800bc36:	460b      	mov	r3, r1
 800bc38:	813b      	strh	r3, [r7, #8]
 800bc3a:	4613      	mov	r3, r2
 800bc3c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800bc3e:	88fb      	ldrh	r3, [r7, #6]
 800bc40:	b2da      	uxtb	r2, r3
 800bc42:	8979      	ldrh	r1, [r7, #10]
 800bc44:	4b20      	ldr	r3, [pc, #128]	@ (800bcc8 <I2C_RequestMemoryWrite+0xa4>)
 800bc46:	9300      	str	r3, [sp, #0]
 800bc48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800bc4c:	68f8      	ldr	r0, [r7, #12]
 800bc4e:	f000 fa79 	bl	800c144 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bc52:	69fa      	ldr	r2, [r7, #28]
 800bc54:	69b9      	ldr	r1, [r7, #24]
 800bc56:	68f8      	ldr	r0, [r7, #12]
 800bc58:	f000 f909 	bl	800be6e <I2C_WaitOnTXISFlagUntilTimeout>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d001      	beq.n	800bc66 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800bc62:	2301      	movs	r3, #1
 800bc64:	e02c      	b.n	800bcc0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bc66:	88fb      	ldrh	r3, [r7, #6]
 800bc68:	2b01      	cmp	r3, #1
 800bc6a:	d105      	bne.n	800bc78 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bc6c:	893b      	ldrh	r3, [r7, #8]
 800bc6e:	b2da      	uxtb	r2, r3
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	629a      	str	r2, [r3, #40]	@ 0x28
 800bc76:	e015      	b.n	800bca4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bc78:	893b      	ldrh	r3, [r7, #8]
 800bc7a:	0a1b      	lsrs	r3, r3, #8
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	b2da      	uxtb	r2, r3
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bc86:	69fa      	ldr	r2, [r7, #28]
 800bc88:	69b9      	ldr	r1, [r7, #24]
 800bc8a:	68f8      	ldr	r0, [r7, #12]
 800bc8c:	f000 f8ef 	bl	800be6e <I2C_WaitOnTXISFlagUntilTimeout>
 800bc90:	4603      	mov	r3, r0
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d001      	beq.n	800bc9a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800bc96:	2301      	movs	r3, #1
 800bc98:	e012      	b.n	800bcc0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bc9a:	893b      	ldrh	r3, [r7, #8]
 800bc9c:	b2da      	uxtb	r2, r3
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800bca4:	69fb      	ldr	r3, [r7, #28]
 800bca6:	9300      	str	r3, [sp, #0]
 800bca8:	69bb      	ldr	r3, [r7, #24]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	2180      	movs	r1, #128	@ 0x80
 800bcae:	68f8      	ldr	r0, [r7, #12]
 800bcb0:	f000 f884 	bl	800bdbc <I2C_WaitOnFlagUntilTimeout>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d001      	beq.n	800bcbe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800bcba:	2301      	movs	r3, #1
 800bcbc:	e000      	b.n	800bcc0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800bcbe:	2300      	movs	r3, #0
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3710      	adds	r7, #16
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}
 800bcc8:	80002000 	.word	0x80002000

0800bccc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b086      	sub	sp, #24
 800bcd0:	af02      	add	r7, sp, #8
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	4608      	mov	r0, r1
 800bcd6:	4611      	mov	r1, r2
 800bcd8:	461a      	mov	r2, r3
 800bcda:	4603      	mov	r3, r0
 800bcdc:	817b      	strh	r3, [r7, #10]
 800bcde:	460b      	mov	r3, r1
 800bce0:	813b      	strh	r3, [r7, #8]
 800bce2:	4613      	mov	r3, r2
 800bce4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800bce6:	88fb      	ldrh	r3, [r7, #6]
 800bce8:	b2da      	uxtb	r2, r3
 800bcea:	8979      	ldrh	r1, [r7, #10]
 800bcec:	4b20      	ldr	r3, [pc, #128]	@ (800bd70 <I2C_RequestMemoryRead+0xa4>)
 800bcee:	9300      	str	r3, [sp, #0]
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	68f8      	ldr	r0, [r7, #12]
 800bcf4:	f000 fa26 	bl	800c144 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bcf8:	69fa      	ldr	r2, [r7, #28]
 800bcfa:	69b9      	ldr	r1, [r7, #24]
 800bcfc:	68f8      	ldr	r0, [r7, #12]
 800bcfe:	f000 f8b6 	bl	800be6e <I2C_WaitOnTXISFlagUntilTimeout>
 800bd02:	4603      	mov	r3, r0
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d001      	beq.n	800bd0c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800bd08:	2301      	movs	r3, #1
 800bd0a:	e02c      	b.n	800bd66 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bd0c:	88fb      	ldrh	r3, [r7, #6]
 800bd0e:	2b01      	cmp	r3, #1
 800bd10:	d105      	bne.n	800bd1e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bd12:	893b      	ldrh	r3, [r7, #8]
 800bd14:	b2da      	uxtb	r2, r3
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	629a      	str	r2, [r3, #40]	@ 0x28
 800bd1c:	e015      	b.n	800bd4a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bd1e:	893b      	ldrh	r3, [r7, #8]
 800bd20:	0a1b      	lsrs	r3, r3, #8
 800bd22:	b29b      	uxth	r3, r3
 800bd24:	b2da      	uxtb	r2, r3
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bd2c:	69fa      	ldr	r2, [r7, #28]
 800bd2e:	69b9      	ldr	r1, [r7, #24]
 800bd30:	68f8      	ldr	r0, [r7, #12]
 800bd32:	f000 f89c 	bl	800be6e <I2C_WaitOnTXISFlagUntilTimeout>
 800bd36:	4603      	mov	r3, r0
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d001      	beq.n	800bd40 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	e012      	b.n	800bd66 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bd40:	893b      	ldrh	r3, [r7, #8]
 800bd42:	b2da      	uxtb	r2, r3
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800bd4a:	69fb      	ldr	r3, [r7, #28]
 800bd4c:	9300      	str	r3, [sp, #0]
 800bd4e:	69bb      	ldr	r3, [r7, #24]
 800bd50:	2200      	movs	r2, #0
 800bd52:	2140      	movs	r1, #64	@ 0x40
 800bd54:	68f8      	ldr	r0, [r7, #12]
 800bd56:	f000 f831 	bl	800bdbc <I2C_WaitOnFlagUntilTimeout>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d001      	beq.n	800bd64 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800bd60:	2301      	movs	r3, #1
 800bd62:	e000      	b.n	800bd66 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800bd64:	2300      	movs	r3, #0
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3710      	adds	r7, #16
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	80002000 	.word	0x80002000

0800bd74 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800bd74:	b480      	push	{r7}
 800bd76:	b083      	sub	sp, #12
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	699b      	ldr	r3, [r3, #24]
 800bd82:	f003 0302 	and.w	r3, r3, #2
 800bd86:	2b02      	cmp	r3, #2
 800bd88:	d103      	bne.n	800bd92 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	699b      	ldr	r3, [r3, #24]
 800bd98:	f003 0301 	and.w	r3, r3, #1
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d007      	beq.n	800bdb0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	699a      	ldr	r2, [r3, #24]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f042 0201 	orr.w	r2, r2, #1
 800bdae:	619a      	str	r2, [r3, #24]
  }
}
 800bdb0:	bf00      	nop
 800bdb2:	370c      	adds	r7, #12
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr

0800bdbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b084      	sub	sp, #16
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	60f8      	str	r0, [r7, #12]
 800bdc4:	60b9      	str	r1, [r7, #8]
 800bdc6:	603b      	str	r3, [r7, #0]
 800bdc8:	4613      	mov	r3, r2
 800bdca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bdcc:	e03b      	b.n	800be46 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bdce:	69ba      	ldr	r2, [r7, #24]
 800bdd0:	6839      	ldr	r1, [r7, #0]
 800bdd2:	68f8      	ldr	r0, [r7, #12]
 800bdd4:	f000 f8d6 	bl	800bf84 <I2C_IsErrorOccurred>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d001      	beq.n	800bde2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800bdde:	2301      	movs	r3, #1
 800bde0:	e041      	b.n	800be66 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bde8:	d02d      	beq.n	800be46 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bdea:	f7fd fd37 	bl	800985c <HAL_GetTick>
 800bdee:	4602      	mov	r2, r0
 800bdf0:	69bb      	ldr	r3, [r7, #24]
 800bdf2:	1ad3      	subs	r3, r2, r3
 800bdf4:	683a      	ldr	r2, [r7, #0]
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d302      	bcc.n	800be00 <I2C_WaitOnFlagUntilTimeout+0x44>
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d122      	bne.n	800be46 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	699a      	ldr	r2, [r3, #24]
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	4013      	ands	r3, r2
 800be0a:	68ba      	ldr	r2, [r7, #8]
 800be0c:	429a      	cmp	r2, r3
 800be0e:	bf0c      	ite	eq
 800be10:	2301      	moveq	r3, #1
 800be12:	2300      	movne	r3, #0
 800be14:	b2db      	uxtb	r3, r3
 800be16:	461a      	mov	r2, r3
 800be18:	79fb      	ldrb	r3, [r7, #7]
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d113      	bne.n	800be46 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be22:	f043 0220 	orr.w	r2, r3, #32
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2220      	movs	r2, #32
 800be2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2200      	movs	r2, #0
 800be36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	2200      	movs	r2, #0
 800be3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800be42:	2301      	movs	r3, #1
 800be44:	e00f      	b.n	800be66 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	699a      	ldr	r2, [r3, #24]
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	4013      	ands	r3, r2
 800be50:	68ba      	ldr	r2, [r7, #8]
 800be52:	429a      	cmp	r2, r3
 800be54:	bf0c      	ite	eq
 800be56:	2301      	moveq	r3, #1
 800be58:	2300      	movne	r3, #0
 800be5a:	b2db      	uxtb	r3, r3
 800be5c:	461a      	mov	r2, r3
 800be5e:	79fb      	ldrb	r3, [r7, #7]
 800be60:	429a      	cmp	r2, r3
 800be62:	d0b4      	beq.n	800bdce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800be64:	2300      	movs	r3, #0
}
 800be66:	4618      	mov	r0, r3
 800be68:	3710      	adds	r7, #16
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}

0800be6e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800be6e:	b580      	push	{r7, lr}
 800be70:	b084      	sub	sp, #16
 800be72:	af00      	add	r7, sp, #0
 800be74:	60f8      	str	r0, [r7, #12]
 800be76:	60b9      	str	r1, [r7, #8]
 800be78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800be7a:	e033      	b.n	800bee4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	68b9      	ldr	r1, [r7, #8]
 800be80:	68f8      	ldr	r0, [r7, #12]
 800be82:	f000 f87f 	bl	800bf84 <I2C_IsErrorOccurred>
 800be86:	4603      	mov	r3, r0
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d001      	beq.n	800be90 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800be8c:	2301      	movs	r3, #1
 800be8e:	e031      	b.n	800bef4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800be96:	d025      	beq.n	800bee4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be98:	f7fd fce0 	bl	800985c <HAL_GetTick>
 800be9c:	4602      	mov	r2, r0
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	1ad3      	subs	r3, r2, r3
 800bea2:	68ba      	ldr	r2, [r7, #8]
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d302      	bcc.n	800beae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d11a      	bne.n	800bee4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	699b      	ldr	r3, [r3, #24]
 800beb4:	f003 0302 	and.w	r3, r3, #2
 800beb8:	2b02      	cmp	r3, #2
 800beba:	d013      	beq.n	800bee4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bec0:	f043 0220 	orr.w	r2, r3, #32
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2220      	movs	r2, #32
 800becc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2200      	movs	r2, #0
 800bed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2200      	movs	r2, #0
 800bedc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800bee0:	2301      	movs	r3, #1
 800bee2:	e007      	b.n	800bef4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	699b      	ldr	r3, [r3, #24]
 800beea:	f003 0302 	and.w	r3, r3, #2
 800beee:	2b02      	cmp	r3, #2
 800bef0:	d1c4      	bne.n	800be7c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bef2:	2300      	movs	r3, #0
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3710      	adds	r7, #16
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}

0800befc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b084      	sub	sp, #16
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	60f8      	str	r0, [r7, #12]
 800bf04:	60b9      	str	r1, [r7, #8]
 800bf06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bf08:	e02f      	b.n	800bf6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	68b9      	ldr	r1, [r7, #8]
 800bf0e:	68f8      	ldr	r0, [r7, #12]
 800bf10:	f000 f838 	bl	800bf84 <I2C_IsErrorOccurred>
 800bf14:	4603      	mov	r3, r0
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d001      	beq.n	800bf1e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	e02d      	b.n	800bf7a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf1e:	f7fd fc9d 	bl	800985c <HAL_GetTick>
 800bf22:	4602      	mov	r2, r0
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	1ad3      	subs	r3, r2, r3
 800bf28:	68ba      	ldr	r2, [r7, #8]
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	d302      	bcc.n	800bf34 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d11a      	bne.n	800bf6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	699b      	ldr	r3, [r3, #24]
 800bf3a:	f003 0320 	and.w	r3, r3, #32
 800bf3e:	2b20      	cmp	r3, #32
 800bf40:	d013      	beq.n	800bf6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf46:	f043 0220 	orr.w	r2, r3, #32
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	2220      	movs	r2, #32
 800bf52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2200      	movs	r2, #0
 800bf62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800bf66:	2301      	movs	r3, #1
 800bf68:	e007      	b.n	800bf7a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	699b      	ldr	r3, [r3, #24]
 800bf70:	f003 0320 	and.w	r3, r3, #32
 800bf74:	2b20      	cmp	r3, #32
 800bf76:	d1c8      	bne.n	800bf0a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bf78:	2300      	movs	r3, #0
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3710      	adds	r7, #16
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}
	...

0800bf84 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b08a      	sub	sp, #40	@ 0x28
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	60f8      	str	r0, [r7, #12]
 800bf8c:	60b9      	str	r1, [r7, #8]
 800bf8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bf90:	2300      	movs	r3, #0
 800bf92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	699b      	ldr	r3, [r3, #24]
 800bf9c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800bfa6:	69bb      	ldr	r3, [r7, #24]
 800bfa8:	f003 0310 	and.w	r3, r3, #16
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d068      	beq.n	800c082 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	2210      	movs	r2, #16
 800bfb6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bfb8:	e049      	b.n	800c04e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bfc0:	d045      	beq.n	800c04e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bfc2:	f7fd fc4b 	bl	800985c <HAL_GetTick>
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	69fb      	ldr	r3, [r7, #28]
 800bfca:	1ad3      	subs	r3, r2, r3
 800bfcc:	68ba      	ldr	r2, [r7, #8]
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d302      	bcc.n	800bfd8 <I2C_IsErrorOccurred+0x54>
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d13a      	bne.n	800c04e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bfe2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bfea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	699b      	ldr	r3, [r3, #24]
 800bff2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bff6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bffa:	d121      	bne.n	800c040 <I2C_IsErrorOccurred+0xbc>
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c002:	d01d      	beq.n	800c040 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800c004:	7cfb      	ldrb	r3, [r7, #19]
 800c006:	2b20      	cmp	r3, #32
 800c008:	d01a      	beq.n	800c040 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	685a      	ldr	r2, [r3, #4]
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c018:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800c01a:	f7fd fc1f 	bl	800985c <HAL_GetTick>
 800c01e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c020:	e00e      	b.n	800c040 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800c022:	f7fd fc1b 	bl	800985c <HAL_GetTick>
 800c026:	4602      	mov	r2, r0
 800c028:	69fb      	ldr	r3, [r7, #28]
 800c02a:	1ad3      	subs	r3, r2, r3
 800c02c:	2b19      	cmp	r3, #25
 800c02e:	d907      	bls.n	800c040 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800c030:	6a3b      	ldr	r3, [r7, #32]
 800c032:	f043 0320 	orr.w	r3, r3, #32
 800c036:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800c038:	2301      	movs	r3, #1
 800c03a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800c03e:	e006      	b.n	800c04e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	699b      	ldr	r3, [r3, #24]
 800c046:	f003 0320 	and.w	r3, r3, #32
 800c04a:	2b20      	cmp	r3, #32
 800c04c:	d1e9      	bne.n	800c022 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	699b      	ldr	r3, [r3, #24]
 800c054:	f003 0320 	and.w	r3, r3, #32
 800c058:	2b20      	cmp	r3, #32
 800c05a:	d003      	beq.n	800c064 <I2C_IsErrorOccurred+0xe0>
 800c05c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c060:	2b00      	cmp	r3, #0
 800c062:	d0aa      	beq.n	800bfba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800c064:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d103      	bne.n	800c074 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2220      	movs	r2, #32
 800c072:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800c074:	6a3b      	ldr	r3, [r7, #32]
 800c076:	f043 0304 	orr.w	r3, r3, #4
 800c07a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800c07c:	2301      	movs	r3, #1
 800c07e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	699b      	ldr	r3, [r3, #24]
 800c088:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800c08a:	69bb      	ldr	r3, [r7, #24]
 800c08c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c090:	2b00      	cmp	r3, #0
 800c092:	d00b      	beq.n	800c0ac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800c094:	6a3b      	ldr	r3, [r7, #32]
 800c096:	f043 0301 	orr.w	r3, r3, #1
 800c09a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c0a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800c0ac:	69bb      	ldr	r3, [r7, #24]
 800c0ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d00b      	beq.n	800c0ce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800c0b6:	6a3b      	ldr	r3, [r7, #32]
 800c0b8:	f043 0308 	orr.w	r3, r3, #8
 800c0bc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c0c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800c0ce:	69bb      	ldr	r3, [r7, #24]
 800c0d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d00b      	beq.n	800c0f0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800c0d8:	6a3b      	ldr	r3, [r7, #32]
 800c0da:	f043 0302 	orr.w	r3, r3, #2
 800c0de:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c0e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800c0f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d01c      	beq.n	800c132 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c0f8:	68f8      	ldr	r0, [r7, #12]
 800c0fa:	f7ff fe3b 	bl	800bd74 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	6859      	ldr	r1, [r3, #4]
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681a      	ldr	r2, [r3, #0]
 800c108:	4b0d      	ldr	r3, [pc, #52]	@ (800c140 <I2C_IsErrorOccurred+0x1bc>)
 800c10a:	400b      	ands	r3, r1
 800c10c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c112:	6a3b      	ldr	r3, [r7, #32]
 800c114:	431a      	orrs	r2, r3
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	2220      	movs	r2, #32
 800c11e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	2200      	movs	r2, #0
 800c126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2200      	movs	r2, #0
 800c12e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800c132:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c136:	4618      	mov	r0, r3
 800c138:	3728      	adds	r7, #40	@ 0x28
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}
 800c13e:	bf00      	nop
 800c140:	fe00e800 	.word	0xfe00e800

0800c144 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c144:	b480      	push	{r7}
 800c146:	b087      	sub	sp, #28
 800c148:	af00      	add	r7, sp, #0
 800c14a:	60f8      	str	r0, [r7, #12]
 800c14c:	607b      	str	r3, [r7, #4]
 800c14e:	460b      	mov	r3, r1
 800c150:	817b      	strh	r3, [r7, #10]
 800c152:	4613      	mov	r3, r2
 800c154:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c156:	897b      	ldrh	r3, [r7, #10]
 800c158:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c15c:	7a7b      	ldrb	r3, [r7, #9]
 800c15e:	041b      	lsls	r3, r3, #16
 800c160:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c164:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c16a:	6a3b      	ldr	r3, [r7, #32]
 800c16c:	4313      	orrs	r3, r2
 800c16e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c172:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	685a      	ldr	r2, [r3, #4]
 800c17a:	6a3b      	ldr	r3, [r7, #32]
 800c17c:	0d5b      	lsrs	r3, r3, #21
 800c17e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800c182:	4b08      	ldr	r3, [pc, #32]	@ (800c1a4 <I2C_TransferConfig+0x60>)
 800c184:	430b      	orrs	r3, r1
 800c186:	43db      	mvns	r3, r3
 800c188:	ea02 0103 	and.w	r1, r2, r3
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	697a      	ldr	r2, [r7, #20]
 800c192:	430a      	orrs	r2, r1
 800c194:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800c196:	bf00      	nop
 800c198:	371c      	adds	r7, #28
 800c19a:	46bd      	mov	sp, r7
 800c19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a0:	4770      	bx	lr
 800c1a2:	bf00      	nop
 800c1a4:	03ff63ff 	.word	0x03ff63ff

0800c1a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b083      	sub	sp, #12
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	2b20      	cmp	r3, #32
 800c1bc:	d138      	bne.n	800c230 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	d101      	bne.n	800c1cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c1c8:	2302      	movs	r3, #2
 800c1ca:	e032      	b.n	800c232 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2224      	movs	r2, #36	@ 0x24
 800c1d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	681a      	ldr	r2, [r3, #0]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f022 0201 	bic.w	r2, r2, #1
 800c1ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	681a      	ldr	r2, [r3, #0]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c1fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	6819      	ldr	r1, [r3, #0]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	683a      	ldr	r2, [r7, #0]
 800c208:	430a      	orrs	r2, r1
 800c20a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	681a      	ldr	r2, [r3, #0]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f042 0201 	orr.w	r2, r2, #1
 800c21a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2220      	movs	r2, #32
 800c220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2200      	movs	r2, #0
 800c228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800c22c:	2300      	movs	r3, #0
 800c22e:	e000      	b.n	800c232 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c230:	2302      	movs	r3, #2
  }
}
 800c232:	4618      	mov	r0, r3
 800c234:	370c      	adds	r7, #12
 800c236:	46bd      	mov	sp, r7
 800c238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23c:	4770      	bx	lr

0800c23e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c23e:	b480      	push	{r7}
 800c240:	b085      	sub	sp, #20
 800c242:	af00      	add	r7, sp, #0
 800c244:	6078      	str	r0, [r7, #4]
 800c246:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c24e:	b2db      	uxtb	r3, r3
 800c250:	2b20      	cmp	r3, #32
 800c252:	d139      	bne.n	800c2c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c25a:	2b01      	cmp	r3, #1
 800c25c:	d101      	bne.n	800c262 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c25e:	2302      	movs	r3, #2
 800c260:	e033      	b.n	800c2ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2201      	movs	r2, #1
 800c266:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2224      	movs	r2, #36	@ 0x24
 800c26e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	681a      	ldr	r2, [r3, #0]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f022 0201 	bic.w	r2, r2, #1
 800c280:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800c290:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	021b      	lsls	r3, r3, #8
 800c296:	68fa      	ldr	r2, [r7, #12]
 800c298:	4313      	orrs	r3, r2
 800c29a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	68fa      	ldr	r2, [r7, #12]
 800c2a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	681a      	ldr	r2, [r3, #0]
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f042 0201 	orr.w	r2, r2, #1
 800c2b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2220      	movs	r2, #32
 800c2b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	e000      	b.n	800c2ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c2c8:	2302      	movs	r3, #2
  }
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3714      	adds	r7, #20
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d4:	4770      	bx	lr
	...

0800c2d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800c2dc:	4b04      	ldr	r3, [pc, #16]	@ (800c2f0 <HAL_PWREx_GetVoltageRange+0x18>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr
 800c2ee:	bf00      	nop
 800c2f0:	40007000 	.word	0x40007000

0800c2f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b085      	sub	sp, #20
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c302:	d130      	bne.n	800c366 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800c304:	4b23      	ldr	r3, [pc, #140]	@ (800c394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c30c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c310:	d038      	beq.n	800c384 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c312:	4b20      	ldr	r3, [pc, #128]	@ (800c394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800c31a:	4a1e      	ldr	r2, [pc, #120]	@ (800c394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c31c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c320:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c322:	4b1d      	ldr	r3, [pc, #116]	@ (800c398 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	2232      	movs	r2, #50	@ 0x32
 800c328:	fb02 f303 	mul.w	r3, r2, r3
 800c32c:	4a1b      	ldr	r2, [pc, #108]	@ (800c39c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800c32e:	fba2 2303 	umull	r2, r3, r2, r3
 800c332:	0c9b      	lsrs	r3, r3, #18
 800c334:	3301      	adds	r3, #1
 800c336:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c338:	e002      	b.n	800c340 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	3b01      	subs	r3, #1
 800c33e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c340:	4b14      	ldr	r3, [pc, #80]	@ (800c394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c342:	695b      	ldr	r3, [r3, #20]
 800c344:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c348:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c34c:	d102      	bne.n	800c354 <HAL_PWREx_ControlVoltageScaling+0x60>
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d1f2      	bne.n	800c33a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c354:	4b0f      	ldr	r3, [pc, #60]	@ (800c394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c356:	695b      	ldr	r3, [r3, #20]
 800c358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c35c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c360:	d110      	bne.n	800c384 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800c362:	2303      	movs	r3, #3
 800c364:	e00f      	b.n	800c386 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800c366:	4b0b      	ldr	r3, [pc, #44]	@ (800c394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c36e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c372:	d007      	beq.n	800c384 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c374:	4b07      	ldr	r3, [pc, #28]	@ (800c394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800c37c:	4a05      	ldr	r2, [pc, #20]	@ (800c394 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c37e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c382:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800c384:	2300      	movs	r3, #0
}
 800c386:	4618      	mov	r0, r3
 800c388:	3714      	adds	r7, #20
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr
 800c392:	bf00      	nop
 800c394:	40007000 	.word	0x40007000
 800c398:	2000005c 	.word	0x2000005c
 800c39c:	431bde83 	.word	0x431bde83

0800c3a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b088      	sub	sp, #32
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d102      	bne.n	800c3b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	f000 bc02 	b.w	800cbb8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c3b4:	4b96      	ldr	r3, [pc, #600]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c3b6:	689b      	ldr	r3, [r3, #8]
 800c3b8:	f003 030c 	and.w	r3, r3, #12
 800c3bc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c3be:	4b94      	ldr	r3, [pc, #592]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c3c0:	68db      	ldr	r3, [r3, #12]
 800c3c2:	f003 0303 	and.w	r3, r3, #3
 800c3c6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f003 0310 	and.w	r3, r3, #16
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	f000 80e4 	beq.w	800c59e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c3d6:	69bb      	ldr	r3, [r7, #24]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d007      	beq.n	800c3ec <HAL_RCC_OscConfig+0x4c>
 800c3dc:	69bb      	ldr	r3, [r7, #24]
 800c3de:	2b0c      	cmp	r3, #12
 800c3e0:	f040 808b 	bne.w	800c4fa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	2b01      	cmp	r3, #1
 800c3e8:	f040 8087 	bne.w	800c4fa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c3ec:	4b88      	ldr	r3, [pc, #544]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	f003 0302 	and.w	r3, r3, #2
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d005      	beq.n	800c404 <HAL_RCC_OscConfig+0x64>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	699b      	ldr	r3, [r3, #24]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d101      	bne.n	800c404 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800c400:	2301      	movs	r3, #1
 800c402:	e3d9      	b.n	800cbb8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6a1a      	ldr	r2, [r3, #32]
 800c408:	4b81      	ldr	r3, [pc, #516]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f003 0308 	and.w	r3, r3, #8
 800c410:	2b00      	cmp	r3, #0
 800c412:	d004      	beq.n	800c41e <HAL_RCC_OscConfig+0x7e>
 800c414:	4b7e      	ldr	r3, [pc, #504]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c41c:	e005      	b.n	800c42a <HAL_RCC_OscConfig+0x8a>
 800c41e:	4b7c      	ldr	r3, [pc, #496]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c420:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c424:	091b      	lsrs	r3, r3, #4
 800c426:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d223      	bcs.n	800c476 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6a1b      	ldr	r3, [r3, #32]
 800c432:	4618      	mov	r0, r3
 800c434:	f000 fd8c 	bl	800cf50 <RCC_SetFlashLatencyFromMSIRange>
 800c438:	4603      	mov	r3, r0
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d001      	beq.n	800c442 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800c43e:	2301      	movs	r3, #1
 800c440:	e3ba      	b.n	800cbb8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c442:	4b73      	ldr	r3, [pc, #460]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4a72      	ldr	r2, [pc, #456]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c448:	f043 0308 	orr.w	r3, r3, #8
 800c44c:	6013      	str	r3, [r2, #0]
 800c44e:	4b70      	ldr	r3, [pc, #448]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6a1b      	ldr	r3, [r3, #32]
 800c45a:	496d      	ldr	r1, [pc, #436]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c45c:	4313      	orrs	r3, r2
 800c45e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c460:	4b6b      	ldr	r3, [pc, #428]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c462:	685b      	ldr	r3, [r3, #4]
 800c464:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	69db      	ldr	r3, [r3, #28]
 800c46c:	021b      	lsls	r3, r3, #8
 800c46e:	4968      	ldr	r1, [pc, #416]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c470:	4313      	orrs	r3, r2
 800c472:	604b      	str	r3, [r1, #4]
 800c474:	e025      	b.n	800c4c2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c476:	4b66      	ldr	r3, [pc, #408]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	4a65      	ldr	r2, [pc, #404]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c47c:	f043 0308 	orr.w	r3, r3, #8
 800c480:	6013      	str	r3, [r2, #0]
 800c482:	4b63      	ldr	r3, [pc, #396]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6a1b      	ldr	r3, [r3, #32]
 800c48e:	4960      	ldr	r1, [pc, #384]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c490:	4313      	orrs	r3, r2
 800c492:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c494:	4b5e      	ldr	r3, [pc, #376]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c496:	685b      	ldr	r3, [r3, #4]
 800c498:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	69db      	ldr	r3, [r3, #28]
 800c4a0:	021b      	lsls	r3, r3, #8
 800c4a2:	495b      	ldr	r1, [pc, #364]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c4a4:	4313      	orrs	r3, r2
 800c4a6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c4a8:	69bb      	ldr	r3, [r7, #24]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d109      	bne.n	800c4c2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6a1b      	ldr	r3, [r3, #32]
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f000 fd4c 	bl	800cf50 <RCC_SetFlashLatencyFromMSIRange>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d001      	beq.n	800c4c2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800c4be:	2301      	movs	r3, #1
 800c4c0:	e37a      	b.n	800cbb8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c4c2:	f000 fc81 	bl	800cdc8 <HAL_RCC_GetSysClockFreq>
 800c4c6:	4602      	mov	r2, r0
 800c4c8:	4b51      	ldr	r3, [pc, #324]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c4ca:	689b      	ldr	r3, [r3, #8]
 800c4cc:	091b      	lsrs	r3, r3, #4
 800c4ce:	f003 030f 	and.w	r3, r3, #15
 800c4d2:	4950      	ldr	r1, [pc, #320]	@ (800c614 <HAL_RCC_OscConfig+0x274>)
 800c4d4:	5ccb      	ldrb	r3, [r1, r3]
 800c4d6:	f003 031f 	and.w	r3, r3, #31
 800c4da:	fa22 f303 	lsr.w	r3, r2, r3
 800c4de:	4a4e      	ldr	r2, [pc, #312]	@ (800c618 <HAL_RCC_OscConfig+0x278>)
 800c4e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800c4e2:	4b4e      	ldr	r3, [pc, #312]	@ (800c61c <HAL_RCC_OscConfig+0x27c>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f7fd f968 	bl	80097bc <HAL_InitTick>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800c4f0:	7bfb      	ldrb	r3, [r7, #15]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d052      	beq.n	800c59c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800c4f6:	7bfb      	ldrb	r3, [r7, #15]
 800c4f8:	e35e      	b.n	800cbb8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	699b      	ldr	r3, [r3, #24]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d032      	beq.n	800c568 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c502:	4b43      	ldr	r3, [pc, #268]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	4a42      	ldr	r2, [pc, #264]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c508:	f043 0301 	orr.w	r3, r3, #1
 800c50c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c50e:	f7fd f9a5 	bl	800985c <HAL_GetTick>
 800c512:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c514:	e008      	b.n	800c528 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c516:	f7fd f9a1 	bl	800985c <HAL_GetTick>
 800c51a:	4602      	mov	r2, r0
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	1ad3      	subs	r3, r2, r3
 800c520:	2b02      	cmp	r3, #2
 800c522:	d901      	bls.n	800c528 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800c524:	2303      	movs	r3, #3
 800c526:	e347      	b.n	800cbb8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c528:	4b39      	ldr	r3, [pc, #228]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f003 0302 	and.w	r3, r3, #2
 800c530:	2b00      	cmp	r3, #0
 800c532:	d0f0      	beq.n	800c516 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c534:	4b36      	ldr	r3, [pc, #216]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	4a35      	ldr	r2, [pc, #212]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c53a:	f043 0308 	orr.w	r3, r3, #8
 800c53e:	6013      	str	r3, [r2, #0]
 800c540:	4b33      	ldr	r3, [pc, #204]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6a1b      	ldr	r3, [r3, #32]
 800c54c:	4930      	ldr	r1, [pc, #192]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c54e:	4313      	orrs	r3, r2
 800c550:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c552:	4b2f      	ldr	r3, [pc, #188]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c554:	685b      	ldr	r3, [r3, #4]
 800c556:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	69db      	ldr	r3, [r3, #28]
 800c55e:	021b      	lsls	r3, r3, #8
 800c560:	492b      	ldr	r1, [pc, #172]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c562:	4313      	orrs	r3, r2
 800c564:	604b      	str	r3, [r1, #4]
 800c566:	e01a      	b.n	800c59e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c568:	4b29      	ldr	r3, [pc, #164]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	4a28      	ldr	r2, [pc, #160]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c56e:	f023 0301 	bic.w	r3, r3, #1
 800c572:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c574:	f7fd f972 	bl	800985c <HAL_GetTick>
 800c578:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c57a:	e008      	b.n	800c58e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c57c:	f7fd f96e 	bl	800985c <HAL_GetTick>
 800c580:	4602      	mov	r2, r0
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	1ad3      	subs	r3, r2, r3
 800c586:	2b02      	cmp	r3, #2
 800c588:	d901      	bls.n	800c58e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800c58a:	2303      	movs	r3, #3
 800c58c:	e314      	b.n	800cbb8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c58e:	4b20      	ldr	r3, [pc, #128]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f003 0302 	and.w	r3, r3, #2
 800c596:	2b00      	cmp	r3, #0
 800c598:	d1f0      	bne.n	800c57c <HAL_RCC_OscConfig+0x1dc>
 800c59a:	e000      	b.n	800c59e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c59c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f003 0301 	and.w	r3, r3, #1
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d073      	beq.n	800c692 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800c5aa:	69bb      	ldr	r3, [r7, #24]
 800c5ac:	2b08      	cmp	r3, #8
 800c5ae:	d005      	beq.n	800c5bc <HAL_RCC_OscConfig+0x21c>
 800c5b0:	69bb      	ldr	r3, [r7, #24]
 800c5b2:	2b0c      	cmp	r3, #12
 800c5b4:	d10e      	bne.n	800c5d4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	2b03      	cmp	r3, #3
 800c5ba:	d10b      	bne.n	800c5d4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c5bc:	4b14      	ldr	r3, [pc, #80]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d063      	beq.n	800c690 <HAL_RCC_OscConfig+0x2f0>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	685b      	ldr	r3, [r3, #4]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d15f      	bne.n	800c690 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	e2f1      	b.n	800cbb8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	685b      	ldr	r3, [r3, #4]
 800c5d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c5dc:	d106      	bne.n	800c5ec <HAL_RCC_OscConfig+0x24c>
 800c5de:	4b0c      	ldr	r3, [pc, #48]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	4a0b      	ldr	r2, [pc, #44]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c5e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c5e8:	6013      	str	r3, [r2, #0]
 800c5ea:	e025      	b.n	800c638 <HAL_RCC_OscConfig+0x298>
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	685b      	ldr	r3, [r3, #4]
 800c5f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c5f4:	d114      	bne.n	800c620 <HAL_RCC_OscConfig+0x280>
 800c5f6:	4b06      	ldr	r3, [pc, #24]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	4a05      	ldr	r2, [pc, #20]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c5fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c600:	6013      	str	r3, [r2, #0]
 800c602:	4b03      	ldr	r3, [pc, #12]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	4a02      	ldr	r2, [pc, #8]	@ (800c610 <HAL_RCC_OscConfig+0x270>)
 800c608:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c60c:	6013      	str	r3, [r2, #0]
 800c60e:	e013      	b.n	800c638 <HAL_RCC_OscConfig+0x298>
 800c610:	40021000 	.word	0x40021000
 800c614:	08012db4 	.word	0x08012db4
 800c618:	2000005c 	.word	0x2000005c
 800c61c:	20000060 	.word	0x20000060
 800c620:	4ba0      	ldr	r3, [pc, #640]	@ (800c8a4 <HAL_RCC_OscConfig+0x504>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	4a9f      	ldr	r2, [pc, #636]	@ (800c8a4 <HAL_RCC_OscConfig+0x504>)
 800c626:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c62a:	6013      	str	r3, [r2, #0]
 800c62c:	4b9d      	ldr	r3, [pc, #628]	@ (800c8a4 <HAL_RCC_OscConfig+0x504>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	4a9c      	ldr	r2, [pc, #624]	@ (800c8a4 <HAL_RCC_OscConfig+0x504>)
 800c632:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c636:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	685b      	ldr	r3, [r3, #4]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d013      	beq.n	800c668 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c640:	f7fd f90c 	bl	800985c <HAL_GetTick>
 800c644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c646:	e008      	b.n	800c65a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c648:	f7fd f908 	bl	800985c <HAL_GetTick>
 800c64c:	4602      	mov	r2, r0
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	1ad3      	subs	r3, r2, r3
 800c652:	2b64      	cmp	r3, #100	@ 0x64
 800c654:	d901      	bls.n	800c65a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800c656:	2303      	movs	r3, #3
 800c658:	e2ae      	b.n	800cbb8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c65a:	4b92      	ldr	r3, [pc, #584]	@ (800c8a4 <HAL_RCC_OscConfig+0x504>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c662:	2b00      	cmp	r3, #0
 800c664:	d0f0      	beq.n	800c648 <HAL_RCC_OscConfig+0x2a8>
 800c666:	e014      	b.n	800c692 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c668:	f7fd f8f8 	bl	800985c <HAL_GetTick>
 800c66c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c66e:	e008      	b.n	800c682 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c670:	f7fd f8f4 	bl	800985c <HAL_GetTick>
 800c674:	4602      	mov	r2, r0
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	1ad3      	subs	r3, r2, r3
 800c67a:	2b64      	cmp	r3, #100	@ 0x64
 800c67c:	d901      	bls.n	800c682 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800c67e:	2303      	movs	r3, #3
 800c680:	e29a      	b.n	800cbb8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c682:	4b88      	ldr	r3, [pc, #544]	@ (800c8a4 <HAL_RCC_OscConfig+0x504>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d1f0      	bne.n	800c670 <HAL_RCC_OscConfig+0x2d0>
 800c68e:	e000      	b.n	800c692 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f003 0302 	and.w	r3, r3, #2
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d060      	beq.n	800c760 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800c69e:	69bb      	ldr	r3, [r7, #24]
 800c6a0:	2b04      	cmp	r3, #4
 800c6a2:	d005      	beq.n	800c6b0 <HAL_RCC_OscConfig+0x310>
 800c6a4:	69bb      	ldr	r3, [r7, #24]
 800c6a6:	2b0c      	cmp	r3, #12
 800c6a8:	d119      	bne.n	800c6de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	2b02      	cmp	r3, #2
 800c6ae:	d116      	bne.n	800c6de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c6b0:	4b7c      	ldr	r3, [pc, #496]	@ (800c8a4 <HAL_RCC_OscConfig+0x504>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d005      	beq.n	800c6c8 <HAL_RCC_OscConfig+0x328>
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	68db      	ldr	r3, [r3, #12]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d101      	bne.n	800c6c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	e277      	b.n	800cbb8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c6c8:	4b76      	ldr	r3, [pc, #472]	@ (800c8a4 <HAL_RCC_OscConfig+0x504>)
 800c6ca:	685b      	ldr	r3, [r3, #4]
 800c6cc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	691b      	ldr	r3, [r3, #16]
 800c6d4:	061b      	lsls	r3, r3, #24
 800c6d6:	4973      	ldr	r1, [pc, #460]	@ (800c8a4 <HAL_RCC_OscConfig+0x504>)
 800c6d8:	4313      	orrs	r3, r2
 800c6da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c6dc:	e040      	b.n	800c760 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	68db      	ldr	r3, [r3, #12]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d023      	beq.n	800c72e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c6e6:	4b6f      	ldr	r3, [pc, #444]	@ (800c8a4 <HAL_RCC_OscConfig+0x504>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4a6e      	ldr	r2, [pc, #440]	@ (800c8a4 <HAL_RCC_OscConfig+0x504>)
 800c6ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c6f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6f2:	f7fd f8b3 	bl	800985c <HAL_GetTick>
 800c6f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c6f8:	e008      	b.n	800c70c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c6fa:	f7fd f8af 	bl	800985c <HAL_GetTick>
 800c6fe:	4602      	mov	r2, r0
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	1ad3      	subs	r3, r2, r3
 800c704:	2b02      	cmp	r3, #2
 800c706:	d901      	bls.n	800c70c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800c708:	2303      	movs	r3, #3
 800c70a:	e255      	b.n	800cbb8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c70c:	4b65      	ldr	r3, [pc, #404]	@ (800c8a4 <HAL_RCC_OscConfig+0x504>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c714:	2b00      	cmp	r3, #0
 800c716:	d0f0      	beq.n	800c6fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c718:	4b62      	ldr	r3, [pc, #392]	@ (800c8a4 <HAL_RCC_OscConfig+0x504>)
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	691b      	ldr	r3, [r3, #16]
 800c724:	061b      	lsls	r3, r3, #24
 800c726:	495f      	ldr	r1, [pc, #380]	@ (800c8a4 <HAL_RCC_OscConfig+0x504>)
 800c728:	4313      	orrs	r3, r2
 800c72a:	604b      	str	r3, [r1, #4]
 800c72c:	e018      	b.n	800c760 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c72e:	4b5d      	ldr	r3, [pc, #372]	@ (800c8a4 <HAL_RCC_OscConfig+0x504>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	4a5c      	ldr	r2, [pc, #368]	@ (800c8a4 <HAL_RCC_OscConfig+0x504>)
 800c734:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c73a:	f7fd f88f 	bl	800985c <HAL_GetTick>
 800c73e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c740:	e008      	b.n	800c754 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c742:	f7fd f88b 	bl	800985c <HAL_GetTick>
 800c746:	4602      	mov	r2, r0
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	1ad3      	subs	r3, r2, r3
 800c74c:	2b02      	cmp	r3, #2
 800c74e:	d901      	bls.n	800c754 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800c750:	2303      	movs	r3, #3
 800c752:	e231      	b.n	800cbb8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c754:	4b53      	ldr	r3, [pc, #332]	@ (800c8a4 <HAL_RCC_OscConfig+0x504>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d1f0      	bne.n	800c742 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f003 0308 	and.w	r3, r3, #8
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d03c      	beq.n	800c7e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	695b      	ldr	r3, [r3, #20]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d01c      	beq.n	800c7ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c774:	4b4b      	ldr	r3, [pc, #300]	@ (800c8a4 <HAL_RCC_OscConfig+0x504>)
 800c776:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c77a:	4a4a      	ldr	r2, [pc, #296]	@ (800c8a4 <HAL_RCC_OscConfig+0x504>)
 800c77c:	f043 0301 	orr.w	r3, r3, #1
 800c780:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c784:	f7fd f86a 	bl	800985c <HAL_GetTick>
 800c788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c78a:	e008      	b.n	800c79e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c78c:	f7fd f866 	bl	800985c <HAL_GetTick>
 800c790:	4602      	mov	r2, r0
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	1ad3      	subs	r3, r2, r3
 800c796:	2b02      	cmp	r3, #2
 800c798:	d901      	bls.n	800c79e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800c79a:	2303      	movs	r3, #3
 800c79c:	e20c      	b.n	800cbb8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c79e:	4b41      	ldr	r3, [pc, #260]	@ (800c8a4 <HAL_RCC_OscConfig+0x504>)
 800c7a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c7a4:	f003 0302 	and.w	r3, r3, #2
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d0ef      	beq.n	800c78c <HAL_RCC_OscConfig+0x3ec>
 800c7ac:	e01b      	b.n	800c7e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c7ae:	4b3d      	ldr	r3, [pc, #244]	@ (800c8a4 <HAL_RCC_OscConfig+0x504>)
 800c7b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c7b4:	4a3b      	ldr	r2, [pc, #236]	@ (800c8a4 <HAL_RCC_OscConfig+0x504>)
 800c7b6:	f023 0301 	bic.w	r3, r3, #1
 800c7ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7be:	f7fd f84d 	bl	800985c <HAL_GetTick>
 800c7c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c7c4:	e008      	b.n	800c7d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c7c6:	f7fd f849 	bl	800985c <HAL_GetTick>
 800c7ca:	4602      	mov	r2, r0
 800c7cc:	693b      	ldr	r3, [r7, #16]
 800c7ce:	1ad3      	subs	r3, r2, r3
 800c7d0:	2b02      	cmp	r3, #2
 800c7d2:	d901      	bls.n	800c7d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800c7d4:	2303      	movs	r3, #3
 800c7d6:	e1ef      	b.n	800cbb8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c7d8:	4b32      	ldr	r3, [pc, #200]	@ (800c8a4 <HAL_RCC_OscConfig+0x504>)
 800c7da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c7de:	f003 0302 	and.w	r3, r3, #2
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d1ef      	bne.n	800c7c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f003 0304 	and.w	r3, r3, #4
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	f000 80a6 	beq.w	800c940 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800c7f8:	4b2a      	ldr	r3, [pc, #168]	@ (800c8a4 <HAL_RCC_OscConfig+0x504>)
 800c7fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c800:	2b00      	cmp	r3, #0
 800c802:	d10d      	bne.n	800c820 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c804:	4b27      	ldr	r3, [pc, #156]	@ (800c8a4 <HAL_RCC_OscConfig+0x504>)
 800c806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c808:	4a26      	ldr	r2, [pc, #152]	@ (800c8a4 <HAL_RCC_OscConfig+0x504>)
 800c80a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c80e:	6593      	str	r3, [r2, #88]	@ 0x58
 800c810:	4b24      	ldr	r3, [pc, #144]	@ (800c8a4 <HAL_RCC_OscConfig+0x504>)
 800c812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c818:	60bb      	str	r3, [r7, #8]
 800c81a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c81c:	2301      	movs	r3, #1
 800c81e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c820:	4b21      	ldr	r3, [pc, #132]	@ (800c8a8 <HAL_RCC_OscConfig+0x508>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d118      	bne.n	800c85e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c82c:	4b1e      	ldr	r3, [pc, #120]	@ (800c8a8 <HAL_RCC_OscConfig+0x508>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4a1d      	ldr	r2, [pc, #116]	@ (800c8a8 <HAL_RCC_OscConfig+0x508>)
 800c832:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c836:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c838:	f7fd f810 	bl	800985c <HAL_GetTick>
 800c83c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c83e:	e008      	b.n	800c852 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c840:	f7fd f80c 	bl	800985c <HAL_GetTick>
 800c844:	4602      	mov	r2, r0
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	1ad3      	subs	r3, r2, r3
 800c84a:	2b02      	cmp	r3, #2
 800c84c:	d901      	bls.n	800c852 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800c84e:	2303      	movs	r3, #3
 800c850:	e1b2      	b.n	800cbb8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c852:	4b15      	ldr	r3, [pc, #84]	@ (800c8a8 <HAL_RCC_OscConfig+0x508>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d0f0      	beq.n	800c840 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	689b      	ldr	r3, [r3, #8]
 800c862:	2b01      	cmp	r3, #1
 800c864:	d108      	bne.n	800c878 <HAL_RCC_OscConfig+0x4d8>
 800c866:	4b0f      	ldr	r3, [pc, #60]	@ (800c8a4 <HAL_RCC_OscConfig+0x504>)
 800c868:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c86c:	4a0d      	ldr	r2, [pc, #52]	@ (800c8a4 <HAL_RCC_OscConfig+0x504>)
 800c86e:	f043 0301 	orr.w	r3, r3, #1
 800c872:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c876:	e029      	b.n	800c8cc <HAL_RCC_OscConfig+0x52c>
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	689b      	ldr	r3, [r3, #8]
 800c87c:	2b05      	cmp	r3, #5
 800c87e:	d115      	bne.n	800c8ac <HAL_RCC_OscConfig+0x50c>
 800c880:	4b08      	ldr	r3, [pc, #32]	@ (800c8a4 <HAL_RCC_OscConfig+0x504>)
 800c882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c886:	4a07      	ldr	r2, [pc, #28]	@ (800c8a4 <HAL_RCC_OscConfig+0x504>)
 800c888:	f043 0304 	orr.w	r3, r3, #4
 800c88c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c890:	4b04      	ldr	r3, [pc, #16]	@ (800c8a4 <HAL_RCC_OscConfig+0x504>)
 800c892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c896:	4a03      	ldr	r2, [pc, #12]	@ (800c8a4 <HAL_RCC_OscConfig+0x504>)
 800c898:	f043 0301 	orr.w	r3, r3, #1
 800c89c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c8a0:	e014      	b.n	800c8cc <HAL_RCC_OscConfig+0x52c>
 800c8a2:	bf00      	nop
 800c8a4:	40021000 	.word	0x40021000
 800c8a8:	40007000 	.word	0x40007000
 800c8ac:	4b9a      	ldr	r3, [pc, #616]	@ (800cb18 <HAL_RCC_OscConfig+0x778>)
 800c8ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c8b2:	4a99      	ldr	r2, [pc, #612]	@ (800cb18 <HAL_RCC_OscConfig+0x778>)
 800c8b4:	f023 0301 	bic.w	r3, r3, #1
 800c8b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c8bc:	4b96      	ldr	r3, [pc, #600]	@ (800cb18 <HAL_RCC_OscConfig+0x778>)
 800c8be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c8c2:	4a95      	ldr	r2, [pc, #596]	@ (800cb18 <HAL_RCC_OscConfig+0x778>)
 800c8c4:	f023 0304 	bic.w	r3, r3, #4
 800c8c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	689b      	ldr	r3, [r3, #8]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d016      	beq.n	800c902 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c8d4:	f7fc ffc2 	bl	800985c <HAL_GetTick>
 800c8d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c8da:	e00a      	b.n	800c8f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c8dc:	f7fc ffbe 	bl	800985c <HAL_GetTick>
 800c8e0:	4602      	mov	r2, r0
 800c8e2:	693b      	ldr	r3, [r7, #16]
 800c8e4:	1ad3      	subs	r3, r2, r3
 800c8e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d901      	bls.n	800c8f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800c8ee:	2303      	movs	r3, #3
 800c8f0:	e162      	b.n	800cbb8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c8f2:	4b89      	ldr	r3, [pc, #548]	@ (800cb18 <HAL_RCC_OscConfig+0x778>)
 800c8f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c8f8:	f003 0302 	and.w	r3, r3, #2
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d0ed      	beq.n	800c8dc <HAL_RCC_OscConfig+0x53c>
 800c900:	e015      	b.n	800c92e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c902:	f7fc ffab 	bl	800985c <HAL_GetTick>
 800c906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c908:	e00a      	b.n	800c920 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c90a:	f7fc ffa7 	bl	800985c <HAL_GetTick>
 800c90e:	4602      	mov	r2, r0
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	1ad3      	subs	r3, r2, r3
 800c914:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c918:	4293      	cmp	r3, r2
 800c91a:	d901      	bls.n	800c920 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800c91c:	2303      	movs	r3, #3
 800c91e:	e14b      	b.n	800cbb8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c920:	4b7d      	ldr	r3, [pc, #500]	@ (800cb18 <HAL_RCC_OscConfig+0x778>)
 800c922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c926:	f003 0302 	and.w	r3, r3, #2
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d1ed      	bne.n	800c90a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c92e:	7ffb      	ldrb	r3, [r7, #31]
 800c930:	2b01      	cmp	r3, #1
 800c932:	d105      	bne.n	800c940 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c934:	4b78      	ldr	r3, [pc, #480]	@ (800cb18 <HAL_RCC_OscConfig+0x778>)
 800c936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c938:	4a77      	ldr	r2, [pc, #476]	@ (800cb18 <HAL_RCC_OscConfig+0x778>)
 800c93a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c93e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	f003 0320 	and.w	r3, r3, #32
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d03c      	beq.n	800c9c6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c950:	2b00      	cmp	r3, #0
 800c952:	d01c      	beq.n	800c98e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c954:	4b70      	ldr	r3, [pc, #448]	@ (800cb18 <HAL_RCC_OscConfig+0x778>)
 800c956:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c95a:	4a6f      	ldr	r2, [pc, #444]	@ (800cb18 <HAL_RCC_OscConfig+0x778>)
 800c95c:	f043 0301 	orr.w	r3, r3, #1
 800c960:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c964:	f7fc ff7a 	bl	800985c <HAL_GetTick>
 800c968:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c96a:	e008      	b.n	800c97e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c96c:	f7fc ff76 	bl	800985c <HAL_GetTick>
 800c970:	4602      	mov	r2, r0
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	1ad3      	subs	r3, r2, r3
 800c976:	2b02      	cmp	r3, #2
 800c978:	d901      	bls.n	800c97e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800c97a:	2303      	movs	r3, #3
 800c97c:	e11c      	b.n	800cbb8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c97e:	4b66      	ldr	r3, [pc, #408]	@ (800cb18 <HAL_RCC_OscConfig+0x778>)
 800c980:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c984:	f003 0302 	and.w	r3, r3, #2
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d0ef      	beq.n	800c96c <HAL_RCC_OscConfig+0x5cc>
 800c98c:	e01b      	b.n	800c9c6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c98e:	4b62      	ldr	r3, [pc, #392]	@ (800cb18 <HAL_RCC_OscConfig+0x778>)
 800c990:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c994:	4a60      	ldr	r2, [pc, #384]	@ (800cb18 <HAL_RCC_OscConfig+0x778>)
 800c996:	f023 0301 	bic.w	r3, r3, #1
 800c99a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c99e:	f7fc ff5d 	bl	800985c <HAL_GetTick>
 800c9a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c9a4:	e008      	b.n	800c9b8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c9a6:	f7fc ff59 	bl	800985c <HAL_GetTick>
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	1ad3      	subs	r3, r2, r3
 800c9b0:	2b02      	cmp	r3, #2
 800c9b2:	d901      	bls.n	800c9b8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800c9b4:	2303      	movs	r3, #3
 800c9b6:	e0ff      	b.n	800cbb8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c9b8:	4b57      	ldr	r3, [pc, #348]	@ (800cb18 <HAL_RCC_OscConfig+0x778>)
 800c9ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c9be:	f003 0302 	and.w	r3, r3, #2
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d1ef      	bne.n	800c9a6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	f000 80f3 	beq.w	800cbb6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9d4:	2b02      	cmp	r3, #2
 800c9d6:	f040 80c9 	bne.w	800cb6c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800c9da:	4b4f      	ldr	r3, [pc, #316]	@ (800cb18 <HAL_RCC_OscConfig+0x778>)
 800c9dc:	68db      	ldr	r3, [r3, #12]
 800c9de:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	f003 0203 	and.w	r2, r3, #3
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d12c      	bne.n	800ca48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9f8:	3b01      	subs	r3, #1
 800c9fa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	d123      	bne.n	800ca48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca0a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	d11b      	bne.n	800ca48 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ca10:	697b      	ldr	r3, [r7, #20]
 800ca12:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca1a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	d113      	bne.n	800ca48 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca2a:	085b      	lsrs	r3, r3, #1
 800ca2c:	3b01      	subs	r3, #1
 800ca2e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ca30:	429a      	cmp	r2, r3
 800ca32:	d109      	bne.n	800ca48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca3e:	085b      	lsrs	r3, r3, #1
 800ca40:	3b01      	subs	r3, #1
 800ca42:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ca44:	429a      	cmp	r2, r3
 800ca46:	d06b      	beq.n	800cb20 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ca48:	69bb      	ldr	r3, [r7, #24]
 800ca4a:	2b0c      	cmp	r3, #12
 800ca4c:	d062      	beq.n	800cb14 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800ca4e:	4b32      	ldr	r3, [pc, #200]	@ (800cb18 <HAL_RCC_OscConfig+0x778>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d001      	beq.n	800ca5e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	e0ac      	b.n	800cbb8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800ca5e:	4b2e      	ldr	r3, [pc, #184]	@ (800cb18 <HAL_RCC_OscConfig+0x778>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	4a2d      	ldr	r2, [pc, #180]	@ (800cb18 <HAL_RCC_OscConfig+0x778>)
 800ca64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ca68:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ca6a:	f7fc fef7 	bl	800985c <HAL_GetTick>
 800ca6e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ca70:	e008      	b.n	800ca84 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ca72:	f7fc fef3 	bl	800985c <HAL_GetTick>
 800ca76:	4602      	mov	r2, r0
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	1ad3      	subs	r3, r2, r3
 800ca7c:	2b02      	cmp	r3, #2
 800ca7e:	d901      	bls.n	800ca84 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800ca80:	2303      	movs	r3, #3
 800ca82:	e099      	b.n	800cbb8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ca84:	4b24      	ldr	r3, [pc, #144]	@ (800cb18 <HAL_RCC_OscConfig+0x778>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d1f0      	bne.n	800ca72 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ca90:	4b21      	ldr	r3, [pc, #132]	@ (800cb18 <HAL_RCC_OscConfig+0x778>)
 800ca92:	68da      	ldr	r2, [r3, #12]
 800ca94:	4b21      	ldr	r3, [pc, #132]	@ (800cb1c <HAL_RCC_OscConfig+0x77c>)
 800ca96:	4013      	ands	r3, r2
 800ca98:	687a      	ldr	r2, [r7, #4]
 800ca9a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800ca9c:	687a      	ldr	r2, [r7, #4]
 800ca9e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800caa0:	3a01      	subs	r2, #1
 800caa2:	0112      	lsls	r2, r2, #4
 800caa4:	4311      	orrs	r1, r2
 800caa6:	687a      	ldr	r2, [r7, #4]
 800caa8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800caaa:	0212      	lsls	r2, r2, #8
 800caac:	4311      	orrs	r1, r2
 800caae:	687a      	ldr	r2, [r7, #4]
 800cab0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800cab2:	0852      	lsrs	r2, r2, #1
 800cab4:	3a01      	subs	r2, #1
 800cab6:	0552      	lsls	r2, r2, #21
 800cab8:	4311      	orrs	r1, r2
 800caba:	687a      	ldr	r2, [r7, #4]
 800cabc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800cabe:	0852      	lsrs	r2, r2, #1
 800cac0:	3a01      	subs	r2, #1
 800cac2:	0652      	lsls	r2, r2, #25
 800cac4:	4311      	orrs	r1, r2
 800cac6:	687a      	ldr	r2, [r7, #4]
 800cac8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800caca:	06d2      	lsls	r2, r2, #27
 800cacc:	430a      	orrs	r2, r1
 800cace:	4912      	ldr	r1, [pc, #72]	@ (800cb18 <HAL_RCC_OscConfig+0x778>)
 800cad0:	4313      	orrs	r3, r2
 800cad2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800cad4:	4b10      	ldr	r3, [pc, #64]	@ (800cb18 <HAL_RCC_OscConfig+0x778>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	4a0f      	ldr	r2, [pc, #60]	@ (800cb18 <HAL_RCC_OscConfig+0x778>)
 800cada:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cade:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800cae0:	4b0d      	ldr	r3, [pc, #52]	@ (800cb18 <HAL_RCC_OscConfig+0x778>)
 800cae2:	68db      	ldr	r3, [r3, #12]
 800cae4:	4a0c      	ldr	r2, [pc, #48]	@ (800cb18 <HAL_RCC_OscConfig+0x778>)
 800cae6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800caea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800caec:	f7fc feb6 	bl	800985c <HAL_GetTick>
 800caf0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800caf2:	e008      	b.n	800cb06 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800caf4:	f7fc feb2 	bl	800985c <HAL_GetTick>
 800caf8:	4602      	mov	r2, r0
 800cafa:	693b      	ldr	r3, [r7, #16]
 800cafc:	1ad3      	subs	r3, r2, r3
 800cafe:	2b02      	cmp	r3, #2
 800cb00:	d901      	bls.n	800cb06 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800cb02:	2303      	movs	r3, #3
 800cb04:	e058      	b.n	800cbb8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cb06:	4b04      	ldr	r3, [pc, #16]	@ (800cb18 <HAL_RCC_OscConfig+0x778>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d0f0      	beq.n	800caf4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800cb12:	e050      	b.n	800cbb6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800cb14:	2301      	movs	r3, #1
 800cb16:	e04f      	b.n	800cbb8 <HAL_RCC_OscConfig+0x818>
 800cb18:	40021000 	.word	0x40021000
 800cb1c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cb20:	4b27      	ldr	r3, [pc, #156]	@ (800cbc0 <HAL_RCC_OscConfig+0x820>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d144      	bne.n	800cbb6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800cb2c:	4b24      	ldr	r3, [pc, #144]	@ (800cbc0 <HAL_RCC_OscConfig+0x820>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	4a23      	ldr	r2, [pc, #140]	@ (800cbc0 <HAL_RCC_OscConfig+0x820>)
 800cb32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cb36:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800cb38:	4b21      	ldr	r3, [pc, #132]	@ (800cbc0 <HAL_RCC_OscConfig+0x820>)
 800cb3a:	68db      	ldr	r3, [r3, #12]
 800cb3c:	4a20      	ldr	r2, [pc, #128]	@ (800cbc0 <HAL_RCC_OscConfig+0x820>)
 800cb3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cb42:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800cb44:	f7fc fe8a 	bl	800985c <HAL_GetTick>
 800cb48:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cb4a:	e008      	b.n	800cb5e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cb4c:	f7fc fe86 	bl	800985c <HAL_GetTick>
 800cb50:	4602      	mov	r2, r0
 800cb52:	693b      	ldr	r3, [r7, #16]
 800cb54:	1ad3      	subs	r3, r2, r3
 800cb56:	2b02      	cmp	r3, #2
 800cb58:	d901      	bls.n	800cb5e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800cb5a:	2303      	movs	r3, #3
 800cb5c:	e02c      	b.n	800cbb8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cb5e:	4b18      	ldr	r3, [pc, #96]	@ (800cbc0 <HAL_RCC_OscConfig+0x820>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d0f0      	beq.n	800cb4c <HAL_RCC_OscConfig+0x7ac>
 800cb6a:	e024      	b.n	800cbb6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800cb6c:	69bb      	ldr	r3, [r7, #24]
 800cb6e:	2b0c      	cmp	r3, #12
 800cb70:	d01f      	beq.n	800cbb2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cb72:	4b13      	ldr	r3, [pc, #76]	@ (800cbc0 <HAL_RCC_OscConfig+0x820>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	4a12      	ldr	r2, [pc, #72]	@ (800cbc0 <HAL_RCC_OscConfig+0x820>)
 800cb78:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cb7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb7e:	f7fc fe6d 	bl	800985c <HAL_GetTick>
 800cb82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cb84:	e008      	b.n	800cb98 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cb86:	f7fc fe69 	bl	800985c <HAL_GetTick>
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	693b      	ldr	r3, [r7, #16]
 800cb8e:	1ad3      	subs	r3, r2, r3
 800cb90:	2b02      	cmp	r3, #2
 800cb92:	d901      	bls.n	800cb98 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800cb94:	2303      	movs	r3, #3
 800cb96:	e00f      	b.n	800cbb8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cb98:	4b09      	ldr	r3, [pc, #36]	@ (800cbc0 <HAL_RCC_OscConfig+0x820>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d1f0      	bne.n	800cb86 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800cba4:	4b06      	ldr	r3, [pc, #24]	@ (800cbc0 <HAL_RCC_OscConfig+0x820>)
 800cba6:	68da      	ldr	r2, [r3, #12]
 800cba8:	4905      	ldr	r1, [pc, #20]	@ (800cbc0 <HAL_RCC_OscConfig+0x820>)
 800cbaa:	4b06      	ldr	r3, [pc, #24]	@ (800cbc4 <HAL_RCC_OscConfig+0x824>)
 800cbac:	4013      	ands	r3, r2
 800cbae:	60cb      	str	r3, [r1, #12]
 800cbb0:	e001      	b.n	800cbb6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	e000      	b.n	800cbb8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800cbb6:	2300      	movs	r3, #0
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3720      	adds	r7, #32
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}
 800cbc0:	40021000 	.word	0x40021000
 800cbc4:	feeefffc 	.word	0xfeeefffc

0800cbc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b084      	sub	sp, #16
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
 800cbd0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d101      	bne.n	800cbdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cbd8:	2301      	movs	r3, #1
 800cbda:	e0e7      	b.n	800cdac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800cbdc:	4b75      	ldr	r3, [pc, #468]	@ (800cdb4 <HAL_RCC_ClockConfig+0x1ec>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f003 0307 	and.w	r3, r3, #7
 800cbe4:	683a      	ldr	r2, [r7, #0]
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	d910      	bls.n	800cc0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cbea:	4b72      	ldr	r3, [pc, #456]	@ (800cdb4 <HAL_RCC_ClockConfig+0x1ec>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f023 0207 	bic.w	r2, r3, #7
 800cbf2:	4970      	ldr	r1, [pc, #448]	@ (800cdb4 <HAL_RCC_ClockConfig+0x1ec>)
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	4313      	orrs	r3, r2
 800cbf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cbfa:	4b6e      	ldr	r3, [pc, #440]	@ (800cdb4 <HAL_RCC_ClockConfig+0x1ec>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	f003 0307 	and.w	r3, r3, #7
 800cc02:	683a      	ldr	r2, [r7, #0]
 800cc04:	429a      	cmp	r2, r3
 800cc06:	d001      	beq.n	800cc0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800cc08:	2301      	movs	r3, #1
 800cc0a:	e0cf      	b.n	800cdac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	f003 0302 	and.w	r3, r3, #2
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d010      	beq.n	800cc3a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	689a      	ldr	r2, [r3, #8]
 800cc1c:	4b66      	ldr	r3, [pc, #408]	@ (800cdb8 <HAL_RCC_ClockConfig+0x1f0>)
 800cc1e:	689b      	ldr	r3, [r3, #8]
 800cc20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cc24:	429a      	cmp	r2, r3
 800cc26:	d908      	bls.n	800cc3a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cc28:	4b63      	ldr	r3, [pc, #396]	@ (800cdb8 <HAL_RCC_ClockConfig+0x1f0>)
 800cc2a:	689b      	ldr	r3, [r3, #8]
 800cc2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	689b      	ldr	r3, [r3, #8]
 800cc34:	4960      	ldr	r1, [pc, #384]	@ (800cdb8 <HAL_RCC_ClockConfig+0x1f0>)
 800cc36:	4313      	orrs	r3, r2
 800cc38:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f003 0301 	and.w	r3, r3, #1
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d04c      	beq.n	800cce0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	685b      	ldr	r3, [r3, #4]
 800cc4a:	2b03      	cmp	r3, #3
 800cc4c:	d107      	bne.n	800cc5e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cc4e:	4b5a      	ldr	r3, [pc, #360]	@ (800cdb8 <HAL_RCC_ClockConfig+0x1f0>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d121      	bne.n	800cc9e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	e0a6      	b.n	800cdac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	685b      	ldr	r3, [r3, #4]
 800cc62:	2b02      	cmp	r3, #2
 800cc64:	d107      	bne.n	800cc76 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cc66:	4b54      	ldr	r3, [pc, #336]	@ (800cdb8 <HAL_RCC_ClockConfig+0x1f0>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d115      	bne.n	800cc9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800cc72:	2301      	movs	r3, #1
 800cc74:	e09a      	b.n	800cdac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	685b      	ldr	r3, [r3, #4]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d107      	bne.n	800cc8e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800cc7e:	4b4e      	ldr	r3, [pc, #312]	@ (800cdb8 <HAL_RCC_ClockConfig+0x1f0>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	f003 0302 	and.w	r3, r3, #2
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d109      	bne.n	800cc9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	e08e      	b.n	800cdac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cc8e:	4b4a      	ldr	r3, [pc, #296]	@ (800cdb8 <HAL_RCC_ClockConfig+0x1f0>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d101      	bne.n	800cc9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	e086      	b.n	800cdac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800cc9e:	4b46      	ldr	r3, [pc, #280]	@ (800cdb8 <HAL_RCC_ClockConfig+0x1f0>)
 800cca0:	689b      	ldr	r3, [r3, #8]
 800cca2:	f023 0203 	bic.w	r2, r3, #3
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	685b      	ldr	r3, [r3, #4]
 800ccaa:	4943      	ldr	r1, [pc, #268]	@ (800cdb8 <HAL_RCC_ClockConfig+0x1f0>)
 800ccac:	4313      	orrs	r3, r2
 800ccae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ccb0:	f7fc fdd4 	bl	800985c <HAL_GetTick>
 800ccb4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ccb6:	e00a      	b.n	800ccce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ccb8:	f7fc fdd0 	bl	800985c <HAL_GetTick>
 800ccbc:	4602      	mov	r2, r0
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	1ad3      	subs	r3, r2, r3
 800ccc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d901      	bls.n	800ccce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800ccca:	2303      	movs	r3, #3
 800cccc:	e06e      	b.n	800cdac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ccce:	4b3a      	ldr	r3, [pc, #232]	@ (800cdb8 <HAL_RCC_ClockConfig+0x1f0>)
 800ccd0:	689b      	ldr	r3, [r3, #8]
 800ccd2:	f003 020c 	and.w	r2, r3, #12
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	685b      	ldr	r3, [r3, #4]
 800ccda:	009b      	lsls	r3, r3, #2
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d1eb      	bne.n	800ccb8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	f003 0302 	and.w	r3, r3, #2
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d010      	beq.n	800cd0e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	689a      	ldr	r2, [r3, #8]
 800ccf0:	4b31      	ldr	r3, [pc, #196]	@ (800cdb8 <HAL_RCC_ClockConfig+0x1f0>)
 800ccf2:	689b      	ldr	r3, [r3, #8]
 800ccf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d208      	bcs.n	800cd0e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ccfc:	4b2e      	ldr	r3, [pc, #184]	@ (800cdb8 <HAL_RCC_ClockConfig+0x1f0>)
 800ccfe:	689b      	ldr	r3, [r3, #8]
 800cd00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	689b      	ldr	r3, [r3, #8]
 800cd08:	492b      	ldr	r1, [pc, #172]	@ (800cdb8 <HAL_RCC_ClockConfig+0x1f0>)
 800cd0a:	4313      	orrs	r3, r2
 800cd0c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800cd0e:	4b29      	ldr	r3, [pc, #164]	@ (800cdb4 <HAL_RCC_ClockConfig+0x1ec>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	f003 0307 	and.w	r3, r3, #7
 800cd16:	683a      	ldr	r2, [r7, #0]
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d210      	bcs.n	800cd3e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cd1c:	4b25      	ldr	r3, [pc, #148]	@ (800cdb4 <HAL_RCC_ClockConfig+0x1ec>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	f023 0207 	bic.w	r2, r3, #7
 800cd24:	4923      	ldr	r1, [pc, #140]	@ (800cdb4 <HAL_RCC_ClockConfig+0x1ec>)
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cd2c:	4b21      	ldr	r3, [pc, #132]	@ (800cdb4 <HAL_RCC_ClockConfig+0x1ec>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f003 0307 	and.w	r3, r3, #7
 800cd34:	683a      	ldr	r2, [r7, #0]
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d001      	beq.n	800cd3e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	e036      	b.n	800cdac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f003 0304 	and.w	r3, r3, #4
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d008      	beq.n	800cd5c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cd4a:	4b1b      	ldr	r3, [pc, #108]	@ (800cdb8 <HAL_RCC_ClockConfig+0x1f0>)
 800cd4c:	689b      	ldr	r3, [r3, #8]
 800cd4e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	68db      	ldr	r3, [r3, #12]
 800cd56:	4918      	ldr	r1, [pc, #96]	@ (800cdb8 <HAL_RCC_ClockConfig+0x1f0>)
 800cd58:	4313      	orrs	r3, r2
 800cd5a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f003 0308 	and.w	r3, r3, #8
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d009      	beq.n	800cd7c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cd68:	4b13      	ldr	r3, [pc, #76]	@ (800cdb8 <HAL_RCC_ClockConfig+0x1f0>)
 800cd6a:	689b      	ldr	r3, [r3, #8]
 800cd6c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	691b      	ldr	r3, [r3, #16]
 800cd74:	00db      	lsls	r3, r3, #3
 800cd76:	4910      	ldr	r1, [pc, #64]	@ (800cdb8 <HAL_RCC_ClockConfig+0x1f0>)
 800cd78:	4313      	orrs	r3, r2
 800cd7a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800cd7c:	f000 f824 	bl	800cdc8 <HAL_RCC_GetSysClockFreq>
 800cd80:	4602      	mov	r2, r0
 800cd82:	4b0d      	ldr	r3, [pc, #52]	@ (800cdb8 <HAL_RCC_ClockConfig+0x1f0>)
 800cd84:	689b      	ldr	r3, [r3, #8]
 800cd86:	091b      	lsrs	r3, r3, #4
 800cd88:	f003 030f 	and.w	r3, r3, #15
 800cd8c:	490b      	ldr	r1, [pc, #44]	@ (800cdbc <HAL_RCC_ClockConfig+0x1f4>)
 800cd8e:	5ccb      	ldrb	r3, [r1, r3]
 800cd90:	f003 031f 	and.w	r3, r3, #31
 800cd94:	fa22 f303 	lsr.w	r3, r2, r3
 800cd98:	4a09      	ldr	r2, [pc, #36]	@ (800cdc0 <HAL_RCC_ClockConfig+0x1f8>)
 800cd9a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800cd9c:	4b09      	ldr	r3, [pc, #36]	@ (800cdc4 <HAL_RCC_ClockConfig+0x1fc>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	4618      	mov	r0, r3
 800cda2:	f7fc fd0b 	bl	80097bc <HAL_InitTick>
 800cda6:	4603      	mov	r3, r0
 800cda8:	72fb      	strb	r3, [r7, #11]

  return status;
 800cdaa:	7afb      	ldrb	r3, [r7, #11]
}
 800cdac:	4618      	mov	r0, r3
 800cdae:	3710      	adds	r7, #16
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}
 800cdb4:	40022000 	.word	0x40022000
 800cdb8:	40021000 	.word	0x40021000
 800cdbc:	08012db4 	.word	0x08012db4
 800cdc0:	2000005c 	.word	0x2000005c
 800cdc4:	20000060 	.word	0x20000060

0800cdc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cdc8:	b480      	push	{r7}
 800cdca:	b089      	sub	sp, #36	@ 0x24
 800cdcc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	61fb      	str	r3, [r7, #28]
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cdd6:	4b3e      	ldr	r3, [pc, #248]	@ (800ced0 <HAL_RCC_GetSysClockFreq+0x108>)
 800cdd8:	689b      	ldr	r3, [r3, #8]
 800cdda:	f003 030c 	and.w	r3, r3, #12
 800cdde:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cde0:	4b3b      	ldr	r3, [pc, #236]	@ (800ced0 <HAL_RCC_GetSysClockFreq+0x108>)
 800cde2:	68db      	ldr	r3, [r3, #12]
 800cde4:	f003 0303 	and.w	r3, r3, #3
 800cde8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d005      	beq.n	800cdfc <HAL_RCC_GetSysClockFreq+0x34>
 800cdf0:	693b      	ldr	r3, [r7, #16]
 800cdf2:	2b0c      	cmp	r3, #12
 800cdf4:	d121      	bne.n	800ce3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	2b01      	cmp	r3, #1
 800cdfa:	d11e      	bne.n	800ce3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800cdfc:	4b34      	ldr	r3, [pc, #208]	@ (800ced0 <HAL_RCC_GetSysClockFreq+0x108>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f003 0308 	and.w	r3, r3, #8
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d107      	bne.n	800ce18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800ce08:	4b31      	ldr	r3, [pc, #196]	@ (800ced0 <HAL_RCC_GetSysClockFreq+0x108>)
 800ce0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ce0e:	0a1b      	lsrs	r3, r3, #8
 800ce10:	f003 030f 	and.w	r3, r3, #15
 800ce14:	61fb      	str	r3, [r7, #28]
 800ce16:	e005      	b.n	800ce24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800ce18:	4b2d      	ldr	r3, [pc, #180]	@ (800ced0 <HAL_RCC_GetSysClockFreq+0x108>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	091b      	lsrs	r3, r3, #4
 800ce1e:	f003 030f 	and.w	r3, r3, #15
 800ce22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800ce24:	4a2b      	ldr	r2, [pc, #172]	@ (800ced4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800ce26:	69fb      	ldr	r3, [r7, #28]
 800ce28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ce2e:	693b      	ldr	r3, [r7, #16]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d10d      	bne.n	800ce50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800ce34:	69fb      	ldr	r3, [r7, #28]
 800ce36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ce38:	e00a      	b.n	800ce50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	2b04      	cmp	r3, #4
 800ce3e:	d102      	bne.n	800ce46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ce40:	4b25      	ldr	r3, [pc, #148]	@ (800ced8 <HAL_RCC_GetSysClockFreq+0x110>)
 800ce42:	61bb      	str	r3, [r7, #24]
 800ce44:	e004      	b.n	800ce50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800ce46:	693b      	ldr	r3, [r7, #16]
 800ce48:	2b08      	cmp	r3, #8
 800ce4a:	d101      	bne.n	800ce50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ce4c:	4b23      	ldr	r3, [pc, #140]	@ (800cedc <HAL_RCC_GetSysClockFreq+0x114>)
 800ce4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800ce50:	693b      	ldr	r3, [r7, #16]
 800ce52:	2b0c      	cmp	r3, #12
 800ce54:	d134      	bne.n	800cec0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ce56:	4b1e      	ldr	r3, [pc, #120]	@ (800ced0 <HAL_RCC_GetSysClockFreq+0x108>)
 800ce58:	68db      	ldr	r3, [r3, #12]
 800ce5a:	f003 0303 	and.w	r3, r3, #3
 800ce5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	2b02      	cmp	r3, #2
 800ce64:	d003      	beq.n	800ce6e <HAL_RCC_GetSysClockFreq+0xa6>
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	2b03      	cmp	r3, #3
 800ce6a:	d003      	beq.n	800ce74 <HAL_RCC_GetSysClockFreq+0xac>
 800ce6c:	e005      	b.n	800ce7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800ce6e:	4b1a      	ldr	r3, [pc, #104]	@ (800ced8 <HAL_RCC_GetSysClockFreq+0x110>)
 800ce70:	617b      	str	r3, [r7, #20]
      break;
 800ce72:	e005      	b.n	800ce80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800ce74:	4b19      	ldr	r3, [pc, #100]	@ (800cedc <HAL_RCC_GetSysClockFreq+0x114>)
 800ce76:	617b      	str	r3, [r7, #20]
      break;
 800ce78:	e002      	b.n	800ce80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800ce7a:	69fb      	ldr	r3, [r7, #28]
 800ce7c:	617b      	str	r3, [r7, #20]
      break;
 800ce7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ce80:	4b13      	ldr	r3, [pc, #76]	@ (800ced0 <HAL_RCC_GetSysClockFreq+0x108>)
 800ce82:	68db      	ldr	r3, [r3, #12]
 800ce84:	091b      	lsrs	r3, r3, #4
 800ce86:	f003 0307 	and.w	r3, r3, #7
 800ce8a:	3301      	adds	r3, #1
 800ce8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800ce8e:	4b10      	ldr	r3, [pc, #64]	@ (800ced0 <HAL_RCC_GetSysClockFreq+0x108>)
 800ce90:	68db      	ldr	r3, [r3, #12]
 800ce92:	0a1b      	lsrs	r3, r3, #8
 800ce94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce98:	697a      	ldr	r2, [r7, #20]
 800ce9a:	fb03 f202 	mul.w	r2, r3, r2
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cea4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800cea6:	4b0a      	ldr	r3, [pc, #40]	@ (800ced0 <HAL_RCC_GetSysClockFreq+0x108>)
 800cea8:	68db      	ldr	r3, [r3, #12]
 800ceaa:	0e5b      	lsrs	r3, r3, #25
 800ceac:	f003 0303 	and.w	r3, r3, #3
 800ceb0:	3301      	adds	r3, #1
 800ceb2:	005b      	lsls	r3, r3, #1
 800ceb4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800ceb6:	697a      	ldr	r2, [r7, #20]
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	fbb2 f3f3 	udiv	r3, r2, r3
 800cebe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800cec0:	69bb      	ldr	r3, [r7, #24]
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	3724      	adds	r7, #36	@ 0x24
 800cec6:	46bd      	mov	sp, r7
 800cec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cecc:	4770      	bx	lr
 800cece:	bf00      	nop
 800ced0:	40021000 	.word	0x40021000
 800ced4:	08012dcc 	.word	0x08012dcc
 800ced8:	00f42400 	.word	0x00f42400
 800cedc:	007a1200 	.word	0x007a1200

0800cee0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cee0:	b480      	push	{r7}
 800cee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cee4:	4b03      	ldr	r3, [pc, #12]	@ (800cef4 <HAL_RCC_GetHCLKFreq+0x14>)
 800cee6:	681b      	ldr	r3, [r3, #0]
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	46bd      	mov	sp, r7
 800ceec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef0:	4770      	bx	lr
 800cef2:	bf00      	nop
 800cef4:	2000005c 	.word	0x2000005c

0800cef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800cefc:	f7ff fff0 	bl	800cee0 <HAL_RCC_GetHCLKFreq>
 800cf00:	4602      	mov	r2, r0
 800cf02:	4b06      	ldr	r3, [pc, #24]	@ (800cf1c <HAL_RCC_GetPCLK1Freq+0x24>)
 800cf04:	689b      	ldr	r3, [r3, #8]
 800cf06:	0a1b      	lsrs	r3, r3, #8
 800cf08:	f003 0307 	and.w	r3, r3, #7
 800cf0c:	4904      	ldr	r1, [pc, #16]	@ (800cf20 <HAL_RCC_GetPCLK1Freq+0x28>)
 800cf0e:	5ccb      	ldrb	r3, [r1, r3]
 800cf10:	f003 031f 	and.w	r3, r3, #31
 800cf14:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	bd80      	pop	{r7, pc}
 800cf1c:	40021000 	.word	0x40021000
 800cf20:	08012dc4 	.word	0x08012dc4

0800cf24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800cf28:	f7ff ffda 	bl	800cee0 <HAL_RCC_GetHCLKFreq>
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	4b06      	ldr	r3, [pc, #24]	@ (800cf48 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cf30:	689b      	ldr	r3, [r3, #8]
 800cf32:	0adb      	lsrs	r3, r3, #11
 800cf34:	f003 0307 	and.w	r3, r3, #7
 800cf38:	4904      	ldr	r1, [pc, #16]	@ (800cf4c <HAL_RCC_GetPCLK2Freq+0x28>)
 800cf3a:	5ccb      	ldrb	r3, [r1, r3]
 800cf3c:	f003 031f 	and.w	r3, r3, #31
 800cf40:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	bd80      	pop	{r7, pc}
 800cf48:	40021000 	.word	0x40021000
 800cf4c:	08012dc4 	.word	0x08012dc4

0800cf50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b086      	sub	sp, #24
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800cf58:	2300      	movs	r3, #0
 800cf5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800cf5c:	4b2a      	ldr	r3, [pc, #168]	@ (800d008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cf5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d003      	beq.n	800cf70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800cf68:	f7ff f9b6 	bl	800c2d8 <HAL_PWREx_GetVoltageRange>
 800cf6c:	6178      	str	r0, [r7, #20]
 800cf6e:	e014      	b.n	800cf9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800cf70:	4b25      	ldr	r3, [pc, #148]	@ (800d008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cf72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf74:	4a24      	ldr	r2, [pc, #144]	@ (800d008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cf76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cf7a:	6593      	str	r3, [r2, #88]	@ 0x58
 800cf7c:	4b22      	ldr	r3, [pc, #136]	@ (800d008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cf7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cf84:	60fb      	str	r3, [r7, #12]
 800cf86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800cf88:	f7ff f9a6 	bl	800c2d8 <HAL_PWREx_GetVoltageRange>
 800cf8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800cf8e:	4b1e      	ldr	r3, [pc, #120]	@ (800d008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cf90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf92:	4a1d      	ldr	r2, [pc, #116]	@ (800d008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cf94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cf98:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cfa0:	d10b      	bne.n	800cfba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2b80      	cmp	r3, #128	@ 0x80
 800cfa6:	d919      	bls.n	800cfdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2ba0      	cmp	r3, #160	@ 0xa0
 800cfac:	d902      	bls.n	800cfb4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800cfae:	2302      	movs	r3, #2
 800cfb0:	613b      	str	r3, [r7, #16]
 800cfb2:	e013      	b.n	800cfdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	613b      	str	r3, [r7, #16]
 800cfb8:	e010      	b.n	800cfdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2b80      	cmp	r3, #128	@ 0x80
 800cfbe:	d902      	bls.n	800cfc6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800cfc0:	2303      	movs	r3, #3
 800cfc2:	613b      	str	r3, [r7, #16]
 800cfc4:	e00a      	b.n	800cfdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2b80      	cmp	r3, #128	@ 0x80
 800cfca:	d102      	bne.n	800cfd2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800cfcc:	2302      	movs	r3, #2
 800cfce:	613b      	str	r3, [r7, #16]
 800cfd0:	e004      	b.n	800cfdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2b70      	cmp	r3, #112	@ 0x70
 800cfd6:	d101      	bne.n	800cfdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800cfd8:	2301      	movs	r3, #1
 800cfda:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800cfdc:	4b0b      	ldr	r3, [pc, #44]	@ (800d00c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	f023 0207 	bic.w	r2, r3, #7
 800cfe4:	4909      	ldr	r1, [pc, #36]	@ (800d00c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800cfe6:	693b      	ldr	r3, [r7, #16]
 800cfe8:	4313      	orrs	r3, r2
 800cfea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800cfec:	4b07      	ldr	r3, [pc, #28]	@ (800d00c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	f003 0307 	and.w	r3, r3, #7
 800cff4:	693a      	ldr	r2, [r7, #16]
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d001      	beq.n	800cffe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800cffa:	2301      	movs	r3, #1
 800cffc:	e000      	b.n	800d000 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800cffe:	2300      	movs	r3, #0
}
 800d000:	4618      	mov	r0, r3
 800d002:	3718      	adds	r7, #24
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}
 800d008:	40021000 	.word	0x40021000
 800d00c:	40022000 	.word	0x40022000

0800d010 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b086      	sub	sp, #24
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d018:	2300      	movs	r3, #0
 800d01a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d01c:	2300      	movs	r3, #0
 800d01e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d031      	beq.n	800d090 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d030:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d034:	d01a      	beq.n	800d06c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800d036:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d03a:	d814      	bhi.n	800d066 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d009      	beq.n	800d054 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800d040:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d044:	d10f      	bne.n	800d066 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800d046:	4b5d      	ldr	r3, [pc, #372]	@ (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d048:	68db      	ldr	r3, [r3, #12]
 800d04a:	4a5c      	ldr	r2, [pc, #368]	@ (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d04c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d050:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800d052:	e00c      	b.n	800d06e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	3304      	adds	r3, #4
 800d058:	2100      	movs	r1, #0
 800d05a:	4618      	mov	r0, r3
 800d05c:	f000 f9ce 	bl	800d3fc <RCCEx_PLLSAI1_Config>
 800d060:	4603      	mov	r3, r0
 800d062:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800d064:	e003      	b.n	800d06e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d066:	2301      	movs	r3, #1
 800d068:	74fb      	strb	r3, [r7, #19]
      break;
 800d06a:	e000      	b.n	800d06e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800d06c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d06e:	7cfb      	ldrb	r3, [r7, #19]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d10b      	bne.n	800d08c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d074:	4b51      	ldr	r3, [pc, #324]	@ (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d07a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d082:	494e      	ldr	r1, [pc, #312]	@ (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d084:	4313      	orrs	r3, r2
 800d086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800d08a:	e001      	b.n	800d090 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d08c:	7cfb      	ldrb	r3, [r7, #19]
 800d08e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d098:	2b00      	cmp	r3, #0
 800d09a:	f000 809e 	beq.w	800d1da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800d0a2:	4b46      	ldr	r3, [pc, #280]	@ (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d0a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d101      	bne.n	800d0b2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	e000      	b.n	800d0b4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d00d      	beq.n	800d0d4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d0b8:	4b40      	ldr	r3, [pc, #256]	@ (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d0ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0bc:	4a3f      	ldr	r2, [pc, #252]	@ (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d0be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d0c2:	6593      	str	r3, [r2, #88]	@ 0x58
 800d0c4:	4b3d      	ldr	r3, [pc, #244]	@ (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d0c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d0cc:	60bb      	str	r3, [r7, #8]
 800d0ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d0d4:	4b3a      	ldr	r3, [pc, #232]	@ (800d1c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	4a39      	ldr	r2, [pc, #228]	@ (800d1c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800d0da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d0de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d0e0:	f7fc fbbc 	bl	800985c <HAL_GetTick>
 800d0e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800d0e6:	e009      	b.n	800d0fc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d0e8:	f7fc fbb8 	bl	800985c <HAL_GetTick>
 800d0ec:	4602      	mov	r2, r0
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	1ad3      	subs	r3, r2, r3
 800d0f2:	2b02      	cmp	r3, #2
 800d0f4:	d902      	bls.n	800d0fc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800d0f6:	2303      	movs	r3, #3
 800d0f8:	74fb      	strb	r3, [r7, #19]
        break;
 800d0fa:	e005      	b.n	800d108 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800d0fc:	4b30      	ldr	r3, [pc, #192]	@ (800d1c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d104:	2b00      	cmp	r3, #0
 800d106:	d0ef      	beq.n	800d0e8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800d108:	7cfb      	ldrb	r3, [r7, #19]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d15a      	bne.n	800d1c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d10e:	4b2b      	ldr	r3, [pc, #172]	@ (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d114:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d118:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d11a:	697b      	ldr	r3, [r7, #20]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d01e      	beq.n	800d15e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d124:	697a      	ldr	r2, [r7, #20]
 800d126:	429a      	cmp	r2, r3
 800d128:	d019      	beq.n	800d15e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d12a:	4b24      	ldr	r3, [pc, #144]	@ (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d12c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d130:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d134:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d136:	4b21      	ldr	r3, [pc, #132]	@ (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d13c:	4a1f      	ldr	r2, [pc, #124]	@ (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d13e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d142:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d146:	4b1d      	ldr	r3, [pc, #116]	@ (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d14c:	4a1b      	ldr	r2, [pc, #108]	@ (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d14e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d152:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d156:	4a19      	ldr	r2, [pc, #100]	@ (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d158:	697b      	ldr	r3, [r7, #20]
 800d15a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	f003 0301 	and.w	r3, r3, #1
 800d164:	2b00      	cmp	r3, #0
 800d166:	d016      	beq.n	800d196 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d168:	f7fc fb78 	bl	800985c <HAL_GetTick>
 800d16c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d16e:	e00b      	b.n	800d188 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d170:	f7fc fb74 	bl	800985c <HAL_GetTick>
 800d174:	4602      	mov	r2, r0
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	1ad3      	subs	r3, r2, r3
 800d17a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d17e:	4293      	cmp	r3, r2
 800d180:	d902      	bls.n	800d188 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800d182:	2303      	movs	r3, #3
 800d184:	74fb      	strb	r3, [r7, #19]
            break;
 800d186:	e006      	b.n	800d196 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d188:	4b0c      	ldr	r3, [pc, #48]	@ (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d18a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d18e:	f003 0302 	and.w	r3, r3, #2
 800d192:	2b00      	cmp	r3, #0
 800d194:	d0ec      	beq.n	800d170 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800d196:	7cfb      	ldrb	r3, [r7, #19]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d10b      	bne.n	800d1b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d19c:	4b07      	ldr	r3, [pc, #28]	@ (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d19e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1a2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d1aa:	4904      	ldr	r1, [pc, #16]	@ (800d1bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d1ac:	4313      	orrs	r3, r2
 800d1ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800d1b2:	e009      	b.n	800d1c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d1b4:	7cfb      	ldrb	r3, [r7, #19]
 800d1b6:	74bb      	strb	r3, [r7, #18]
 800d1b8:	e006      	b.n	800d1c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800d1ba:	bf00      	nop
 800d1bc:	40021000 	.word	0x40021000
 800d1c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d1c4:	7cfb      	ldrb	r3, [r7, #19]
 800d1c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d1c8:	7c7b      	ldrb	r3, [r7, #17]
 800d1ca:	2b01      	cmp	r3, #1
 800d1cc:	d105      	bne.n	800d1da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d1ce:	4b8a      	ldr	r3, [pc, #552]	@ (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d1d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d1d2:	4a89      	ldr	r2, [pc, #548]	@ (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d1d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d1d8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	f003 0301 	and.w	r3, r3, #1
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d00a      	beq.n	800d1fc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d1e6:	4b84      	ldr	r3, [pc, #528]	@ (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d1e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d1ec:	f023 0203 	bic.w	r2, r3, #3
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	6a1b      	ldr	r3, [r3, #32]
 800d1f4:	4980      	ldr	r1, [pc, #512]	@ (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d1f6:	4313      	orrs	r3, r2
 800d1f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	f003 0302 	and.w	r3, r3, #2
 800d204:	2b00      	cmp	r3, #0
 800d206:	d00a      	beq.n	800d21e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d208:	4b7b      	ldr	r3, [pc, #492]	@ (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d20a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d20e:	f023 020c 	bic.w	r2, r3, #12
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d216:	4978      	ldr	r1, [pc, #480]	@ (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d218:	4313      	orrs	r3, r2
 800d21a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f003 0320 	and.w	r3, r3, #32
 800d226:	2b00      	cmp	r3, #0
 800d228:	d00a      	beq.n	800d240 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d22a:	4b73      	ldr	r3, [pc, #460]	@ (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d22c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d230:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d238:	496f      	ldr	r1, [pc, #444]	@ (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d23a:	4313      	orrs	r3, r2
 800d23c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d00a      	beq.n	800d262 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d24c:	4b6a      	ldr	r3, [pc, #424]	@ (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d24e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d252:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d25a:	4967      	ldr	r1, [pc, #412]	@ (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d25c:	4313      	orrs	r3, r2
 800d25e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d00a      	beq.n	800d284 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d26e:	4b62      	ldr	r3, [pc, #392]	@ (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d274:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d27c:	495e      	ldr	r1, [pc, #376]	@ (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d27e:	4313      	orrs	r3, r2
 800d280:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d00a      	beq.n	800d2a6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d290:	4b59      	ldr	r3, [pc, #356]	@ (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d296:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d29e:	4956      	ldr	r1, [pc, #344]	@ (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d2a0:	4313      	orrs	r3, r2
 800d2a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d00a      	beq.n	800d2c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d2b2:	4b51      	ldr	r3, [pc, #324]	@ (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d2b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d2b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2c0:	494d      	ldr	r1, [pc, #308]	@ (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d2c2:	4313      	orrs	r3, r2
 800d2c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d028      	beq.n	800d326 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d2d4:	4b48      	ldr	r3, [pc, #288]	@ (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d2d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d2da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2e2:	4945      	ldr	r1, [pc, #276]	@ (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d2e4:	4313      	orrs	r3, r2
 800d2e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d2f2:	d106      	bne.n	800d302 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d2f4:	4b40      	ldr	r3, [pc, #256]	@ (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d2f6:	68db      	ldr	r3, [r3, #12]
 800d2f8:	4a3f      	ldr	r2, [pc, #252]	@ (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d2fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d2fe:	60d3      	str	r3, [r2, #12]
 800d300:	e011      	b.n	800d326 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d306:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d30a:	d10c      	bne.n	800d326 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	3304      	adds	r3, #4
 800d310:	2101      	movs	r1, #1
 800d312:	4618      	mov	r0, r3
 800d314:	f000 f872 	bl	800d3fc <RCCEx_PLLSAI1_Config>
 800d318:	4603      	mov	r3, r0
 800d31a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800d31c:	7cfb      	ldrb	r3, [r7, #19]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d001      	beq.n	800d326 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800d322:	7cfb      	ldrb	r3, [r7, #19]
 800d324:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d028      	beq.n	800d384 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d332:	4b31      	ldr	r3, [pc, #196]	@ (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d338:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d340:	492d      	ldr	r1, [pc, #180]	@ (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d342:	4313      	orrs	r3, r2
 800d344:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d34c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d350:	d106      	bne.n	800d360 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d352:	4b29      	ldr	r3, [pc, #164]	@ (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d354:	68db      	ldr	r3, [r3, #12]
 800d356:	4a28      	ldr	r2, [pc, #160]	@ (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d358:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d35c:	60d3      	str	r3, [r2, #12]
 800d35e:	e011      	b.n	800d384 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d364:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d368:	d10c      	bne.n	800d384 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	3304      	adds	r3, #4
 800d36e:	2101      	movs	r1, #1
 800d370:	4618      	mov	r0, r3
 800d372:	f000 f843 	bl	800d3fc <RCCEx_PLLSAI1_Config>
 800d376:	4603      	mov	r3, r0
 800d378:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d37a:	7cfb      	ldrb	r3, [r7, #19]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d001      	beq.n	800d384 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800d380:	7cfb      	ldrb	r3, [r7, #19]
 800d382:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d01c      	beq.n	800d3ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d390:	4b19      	ldr	r3, [pc, #100]	@ (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d396:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d39e:	4916      	ldr	r1, [pc, #88]	@ (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d3a0:	4313      	orrs	r3, r2
 800d3a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d3aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d3ae:	d10c      	bne.n	800d3ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	3304      	adds	r3, #4
 800d3b4:	2102      	movs	r1, #2
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f000 f820 	bl	800d3fc <RCCEx_PLLSAI1_Config>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d3c0:	7cfb      	ldrb	r3, [r7, #19]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d001      	beq.n	800d3ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800d3c6:	7cfb      	ldrb	r3, [r7, #19]
 800d3c8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d00a      	beq.n	800d3ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d3d6:	4b08      	ldr	r3, [pc, #32]	@ (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d3d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d3dc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d3e4:	4904      	ldr	r1, [pc, #16]	@ (800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d3e6:	4313      	orrs	r3, r2
 800d3e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800d3ec:	7cbb      	ldrb	r3, [r7, #18]
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3718      	adds	r7, #24
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}
 800d3f6:	bf00      	nop
 800d3f8:	40021000 	.word	0x40021000

0800d3fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b084      	sub	sp, #16
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
 800d404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d406:	2300      	movs	r3, #0
 800d408:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800d40a:	4b74      	ldr	r3, [pc, #464]	@ (800d5dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800d40c:	68db      	ldr	r3, [r3, #12]
 800d40e:	f003 0303 	and.w	r3, r3, #3
 800d412:	2b00      	cmp	r3, #0
 800d414:	d018      	beq.n	800d448 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800d416:	4b71      	ldr	r3, [pc, #452]	@ (800d5dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800d418:	68db      	ldr	r3, [r3, #12]
 800d41a:	f003 0203 	and.w	r2, r3, #3
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	429a      	cmp	r2, r3
 800d424:	d10d      	bne.n	800d442 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
       ||
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d009      	beq.n	800d442 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800d42e:	4b6b      	ldr	r3, [pc, #428]	@ (800d5dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800d430:	68db      	ldr	r3, [r3, #12]
 800d432:	091b      	lsrs	r3, r3, #4
 800d434:	f003 0307 	and.w	r3, r3, #7
 800d438:	1c5a      	adds	r2, r3, #1
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	685b      	ldr	r3, [r3, #4]
       ||
 800d43e:	429a      	cmp	r2, r3
 800d440:	d047      	beq.n	800d4d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800d442:	2301      	movs	r3, #1
 800d444:	73fb      	strb	r3, [r7, #15]
 800d446:	e044      	b.n	800d4d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	2b03      	cmp	r3, #3
 800d44e:	d018      	beq.n	800d482 <RCCEx_PLLSAI1_Config+0x86>
 800d450:	2b03      	cmp	r3, #3
 800d452:	d825      	bhi.n	800d4a0 <RCCEx_PLLSAI1_Config+0xa4>
 800d454:	2b01      	cmp	r3, #1
 800d456:	d002      	beq.n	800d45e <RCCEx_PLLSAI1_Config+0x62>
 800d458:	2b02      	cmp	r3, #2
 800d45a:	d009      	beq.n	800d470 <RCCEx_PLLSAI1_Config+0x74>
 800d45c:	e020      	b.n	800d4a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800d45e:	4b5f      	ldr	r3, [pc, #380]	@ (800d5dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	f003 0302 	and.w	r3, r3, #2
 800d466:	2b00      	cmp	r3, #0
 800d468:	d11d      	bne.n	800d4a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800d46a:	2301      	movs	r3, #1
 800d46c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d46e:	e01a      	b.n	800d4a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800d470:	4b5a      	ldr	r3, [pc, #360]	@ (800d5dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d116      	bne.n	800d4aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800d47c:	2301      	movs	r3, #1
 800d47e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d480:	e013      	b.n	800d4aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800d482:	4b56      	ldr	r3, [pc, #344]	@ (800d5dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d10f      	bne.n	800d4ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800d48e:	4b53      	ldr	r3, [pc, #332]	@ (800d5dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d496:	2b00      	cmp	r3, #0
 800d498:	d109      	bne.n	800d4ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800d49a:	2301      	movs	r3, #1
 800d49c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d49e:	e006      	b.n	800d4ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800d4a0:	2301      	movs	r3, #1
 800d4a2:	73fb      	strb	r3, [r7, #15]
      break;
 800d4a4:	e004      	b.n	800d4b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d4a6:	bf00      	nop
 800d4a8:	e002      	b.n	800d4b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d4aa:	bf00      	nop
 800d4ac:	e000      	b.n	800d4b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d4ae:	bf00      	nop
    }

    if(status == HAL_OK)
 800d4b0:	7bfb      	ldrb	r3, [r7, #15]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d10d      	bne.n	800d4d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800d4b6:	4b49      	ldr	r3, [pc, #292]	@ (800d5dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800d4b8:	68db      	ldr	r3, [r3, #12]
 800d4ba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6819      	ldr	r1, [r3, #0]
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	685b      	ldr	r3, [r3, #4]
 800d4c6:	3b01      	subs	r3, #1
 800d4c8:	011b      	lsls	r3, r3, #4
 800d4ca:	430b      	orrs	r3, r1
 800d4cc:	4943      	ldr	r1, [pc, #268]	@ (800d5dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800d4ce:	4313      	orrs	r3, r2
 800d4d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800d4d2:	7bfb      	ldrb	r3, [r7, #15]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d17c      	bne.n	800d5d2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800d4d8:	4b40      	ldr	r3, [pc, #256]	@ (800d5dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	4a3f      	ldr	r2, [pc, #252]	@ (800d5dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800d4de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d4e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d4e4:	f7fc f9ba 	bl	800985c <HAL_GetTick>
 800d4e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800d4ea:	e009      	b.n	800d500 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d4ec:	f7fc f9b6 	bl	800985c <HAL_GetTick>
 800d4f0:	4602      	mov	r2, r0
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	1ad3      	subs	r3, r2, r3
 800d4f6:	2b02      	cmp	r3, #2
 800d4f8:	d902      	bls.n	800d500 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800d4fa:	2303      	movs	r3, #3
 800d4fc:	73fb      	strb	r3, [r7, #15]
        break;
 800d4fe:	e005      	b.n	800d50c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800d500:	4b36      	ldr	r3, [pc, #216]	@ (800d5dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d1ef      	bne.n	800d4ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800d50c:	7bfb      	ldrb	r3, [r7, #15]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d15f      	bne.n	800d5d2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d110      	bne.n	800d53a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d518:	4b30      	ldr	r3, [pc, #192]	@ (800d5dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800d51a:	691b      	ldr	r3, [r3, #16]
 800d51c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800d520:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800d524:	687a      	ldr	r2, [r7, #4]
 800d526:	6892      	ldr	r2, [r2, #8]
 800d528:	0211      	lsls	r1, r2, #8
 800d52a:	687a      	ldr	r2, [r7, #4]
 800d52c:	68d2      	ldr	r2, [r2, #12]
 800d52e:	06d2      	lsls	r2, r2, #27
 800d530:	430a      	orrs	r2, r1
 800d532:	492a      	ldr	r1, [pc, #168]	@ (800d5dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800d534:	4313      	orrs	r3, r2
 800d536:	610b      	str	r3, [r1, #16]
 800d538:	e027      	b.n	800d58a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	2b01      	cmp	r3, #1
 800d53e:	d112      	bne.n	800d566 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d540:	4b26      	ldr	r3, [pc, #152]	@ (800d5dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800d542:	691b      	ldr	r3, [r3, #16]
 800d544:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800d548:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800d54c:	687a      	ldr	r2, [r7, #4]
 800d54e:	6892      	ldr	r2, [r2, #8]
 800d550:	0211      	lsls	r1, r2, #8
 800d552:	687a      	ldr	r2, [r7, #4]
 800d554:	6912      	ldr	r2, [r2, #16]
 800d556:	0852      	lsrs	r2, r2, #1
 800d558:	3a01      	subs	r2, #1
 800d55a:	0552      	lsls	r2, r2, #21
 800d55c:	430a      	orrs	r2, r1
 800d55e:	491f      	ldr	r1, [pc, #124]	@ (800d5dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800d560:	4313      	orrs	r3, r2
 800d562:	610b      	str	r3, [r1, #16]
 800d564:	e011      	b.n	800d58a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d566:	4b1d      	ldr	r3, [pc, #116]	@ (800d5dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800d568:	691b      	ldr	r3, [r3, #16]
 800d56a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800d56e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800d572:	687a      	ldr	r2, [r7, #4]
 800d574:	6892      	ldr	r2, [r2, #8]
 800d576:	0211      	lsls	r1, r2, #8
 800d578:	687a      	ldr	r2, [r7, #4]
 800d57a:	6952      	ldr	r2, [r2, #20]
 800d57c:	0852      	lsrs	r2, r2, #1
 800d57e:	3a01      	subs	r2, #1
 800d580:	0652      	lsls	r2, r2, #25
 800d582:	430a      	orrs	r2, r1
 800d584:	4915      	ldr	r1, [pc, #84]	@ (800d5dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800d586:	4313      	orrs	r3, r2
 800d588:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800d58a:	4b14      	ldr	r3, [pc, #80]	@ (800d5dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	4a13      	ldr	r2, [pc, #76]	@ (800d5dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800d590:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d594:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d596:	f7fc f961 	bl	800985c <HAL_GetTick>
 800d59a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d59c:	e009      	b.n	800d5b2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d59e:	f7fc f95d 	bl	800985c <HAL_GetTick>
 800d5a2:	4602      	mov	r2, r0
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	1ad3      	subs	r3, r2, r3
 800d5a8:	2b02      	cmp	r3, #2
 800d5aa:	d902      	bls.n	800d5b2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800d5ac:	2303      	movs	r3, #3
 800d5ae:	73fb      	strb	r3, [r7, #15]
          break;
 800d5b0:	e005      	b.n	800d5be <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d5b2:	4b0a      	ldr	r3, [pc, #40]	@ (800d5dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d0ef      	beq.n	800d59e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800d5be:	7bfb      	ldrb	r3, [r7, #15]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d106      	bne.n	800d5d2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800d5c4:	4b05      	ldr	r3, [pc, #20]	@ (800d5dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800d5c6:	691a      	ldr	r2, [r3, #16]
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	699b      	ldr	r3, [r3, #24]
 800d5cc:	4903      	ldr	r1, [pc, #12]	@ (800d5dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800d5ce:	4313      	orrs	r3, r2
 800d5d0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800d5d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	3710      	adds	r7, #16
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	bd80      	pop	{r7, pc}
 800d5dc:	40021000 	.word	0x40021000

0800d5e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b084      	sub	sp, #16
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d101      	bne.n	800d5f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	e095      	b.n	800d71e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d108      	bne.n	800d60c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	685b      	ldr	r3, [r3, #4]
 800d5fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d602:	d009      	beq.n	800d618 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2200      	movs	r2, #0
 800d608:	61da      	str	r2, [r3, #28]
 800d60a:	e005      	b.n	800d618 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2200      	movs	r2, #0
 800d610:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2200      	movs	r2, #0
 800d616:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	2200      	movs	r2, #0
 800d61c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d624:	b2db      	uxtb	r3, r3
 800d626:	2b00      	cmp	r3, #0
 800d628:	d106      	bne.n	800d638 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2200      	movs	r2, #0
 800d62e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	f7fb fdae 	bl	8009194 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2202      	movs	r2, #2
 800d63c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	681a      	ldr	r2, [r3, #0]
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d64e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	68db      	ldr	r3, [r3, #12]
 800d654:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d658:	d902      	bls.n	800d660 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d65a:	2300      	movs	r3, #0
 800d65c:	60fb      	str	r3, [r7, #12]
 800d65e:	e002      	b.n	800d666 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d660:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d664:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	68db      	ldr	r3, [r3, #12]
 800d66a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800d66e:	d007      	beq.n	800d680 <HAL_SPI_Init+0xa0>
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	68db      	ldr	r3, [r3, #12]
 800d674:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d678:	d002      	beq.n	800d680 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2200      	movs	r2, #0
 800d67e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	685b      	ldr	r3, [r3, #4]
 800d684:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	689b      	ldr	r3, [r3, #8]
 800d68c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800d690:	431a      	orrs	r2, r3
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	691b      	ldr	r3, [r3, #16]
 800d696:	f003 0302 	and.w	r3, r3, #2
 800d69a:	431a      	orrs	r2, r3
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	695b      	ldr	r3, [r3, #20]
 800d6a0:	f003 0301 	and.w	r3, r3, #1
 800d6a4:	431a      	orrs	r2, r3
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	699b      	ldr	r3, [r3, #24]
 800d6aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d6ae:	431a      	orrs	r2, r3
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	69db      	ldr	r3, [r3, #28]
 800d6b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d6b8:	431a      	orrs	r2, r3
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6a1b      	ldr	r3, [r3, #32]
 800d6be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d6c2:	ea42 0103 	orr.w	r1, r2, r3
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6ca:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	430a      	orrs	r2, r1
 800d6d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	699b      	ldr	r3, [r3, #24]
 800d6da:	0c1b      	lsrs	r3, r3, #16
 800d6dc:	f003 0204 	and.w	r2, r3, #4
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6e4:	f003 0310 	and.w	r3, r3, #16
 800d6e8:	431a      	orrs	r2, r3
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6ee:	f003 0308 	and.w	r3, r3, #8
 800d6f2:	431a      	orrs	r2, r3
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	68db      	ldr	r3, [r3, #12]
 800d6f8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800d6fc:	ea42 0103 	orr.w	r1, r2, r3
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	430a      	orrs	r2, r1
 800d70c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2200      	movs	r2, #0
 800d712:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2201      	movs	r2, #1
 800d718:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800d71c:	2300      	movs	r3, #0
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3710      	adds	r7, #16
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}

0800d726 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800d726:	b580      	push	{r7, lr}
 800d728:	b08a      	sub	sp, #40	@ 0x28
 800d72a:	af00      	add	r7, sp, #0
 800d72c:	60f8      	str	r0, [r7, #12]
 800d72e:	60b9      	str	r1, [r7, #8]
 800d730:	607a      	str	r2, [r7, #4]
 800d732:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d734:	2301      	movs	r3, #1
 800d736:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d738:	f7fc f890 	bl	800985c <HAL_GetTick>
 800d73c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d744:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	685b      	ldr	r3, [r3, #4]
 800d74a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800d74c:	887b      	ldrh	r3, [r7, #2]
 800d74e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800d750:	887b      	ldrh	r3, [r7, #2]
 800d752:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d754:	7ffb      	ldrb	r3, [r7, #31]
 800d756:	2b01      	cmp	r3, #1
 800d758:	d00c      	beq.n	800d774 <HAL_SPI_TransmitReceive+0x4e>
 800d75a:	69bb      	ldr	r3, [r7, #24]
 800d75c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d760:	d106      	bne.n	800d770 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	689b      	ldr	r3, [r3, #8]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d102      	bne.n	800d770 <HAL_SPI_TransmitReceive+0x4a>
 800d76a:	7ffb      	ldrb	r3, [r7, #31]
 800d76c:	2b04      	cmp	r3, #4
 800d76e:	d001      	beq.n	800d774 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800d770:	2302      	movs	r3, #2
 800d772:	e1f3      	b.n	800db5c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d005      	beq.n	800d786 <HAL_SPI_TransmitReceive+0x60>
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d002      	beq.n	800d786 <HAL_SPI_TransmitReceive+0x60>
 800d780:	887b      	ldrh	r3, [r7, #2]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d101      	bne.n	800d78a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800d786:	2301      	movs	r3, #1
 800d788:	e1e8      	b.n	800db5c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800d790:	2b01      	cmp	r3, #1
 800d792:	d101      	bne.n	800d798 <HAL_SPI_TransmitReceive+0x72>
 800d794:	2302      	movs	r3, #2
 800d796:	e1e1      	b.n	800db5c <HAL_SPI_TransmitReceive+0x436>
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	2201      	movs	r2, #1
 800d79c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d7a6:	b2db      	uxtb	r3, r3
 800d7a8:	2b04      	cmp	r3, #4
 800d7aa:	d003      	beq.n	800d7b4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	2205      	movs	r2, #5
 800d7b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	687a      	ldr	r2, [r7, #4]
 800d7be:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	887a      	ldrh	r2, [r7, #2]
 800d7c4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	887a      	ldrh	r2, [r7, #2]
 800d7cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	68ba      	ldr	r2, [r7, #8]
 800d7d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	887a      	ldrh	r2, [r7, #2]
 800d7da:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	887a      	ldrh	r2, [r7, #2]
 800d7e0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	68db      	ldr	r3, [r3, #12]
 800d7f2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d7f6:	d802      	bhi.n	800d7fe <HAL_SPI_TransmitReceive+0xd8>
 800d7f8:	8abb      	ldrh	r3, [r7, #20]
 800d7fa:	2b01      	cmp	r3, #1
 800d7fc:	d908      	bls.n	800d810 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	685a      	ldr	r2, [r3, #4]
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d80c:	605a      	str	r2, [r3, #4]
 800d80e:	e007      	b.n	800d820 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	685a      	ldr	r2, [r3, #4]
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d81e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d82a:	2b40      	cmp	r3, #64	@ 0x40
 800d82c:	d007      	beq.n	800d83e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	681a      	ldr	r2, [r3, #0]
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d83c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	68db      	ldr	r3, [r3, #12]
 800d842:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d846:	f240 8083 	bls.w	800d950 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	685b      	ldr	r3, [r3, #4]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d002      	beq.n	800d858 <HAL_SPI_TransmitReceive+0x132>
 800d852:	8afb      	ldrh	r3, [r7, #22]
 800d854:	2b01      	cmp	r3, #1
 800d856:	d16f      	bne.n	800d938 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d85c:	881a      	ldrh	r2, [r3, #0]
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d868:	1c9a      	adds	r2, r3, #2
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d872:	b29b      	uxth	r3, r3
 800d874:	3b01      	subs	r3, #1
 800d876:	b29a      	uxth	r2, r3
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d87c:	e05c      	b.n	800d938 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	689b      	ldr	r3, [r3, #8]
 800d884:	f003 0302 	and.w	r3, r3, #2
 800d888:	2b02      	cmp	r3, #2
 800d88a:	d11b      	bne.n	800d8c4 <HAL_SPI_TransmitReceive+0x19e>
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d890:	b29b      	uxth	r3, r3
 800d892:	2b00      	cmp	r3, #0
 800d894:	d016      	beq.n	800d8c4 <HAL_SPI_TransmitReceive+0x19e>
 800d896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d898:	2b01      	cmp	r3, #1
 800d89a:	d113      	bne.n	800d8c4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8a0:	881a      	ldrh	r2, [r3, #0]
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8ac:	1c9a      	adds	r2, r3, #2
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d8b6:	b29b      	uxth	r3, r3
 800d8b8:	3b01      	subs	r3, #1
 800d8ba:	b29a      	uxth	r2, r3
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	689b      	ldr	r3, [r3, #8]
 800d8ca:	f003 0301 	and.w	r3, r3, #1
 800d8ce:	2b01      	cmp	r3, #1
 800d8d0:	d11c      	bne.n	800d90c <HAL_SPI_TransmitReceive+0x1e6>
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d8d8:	b29b      	uxth	r3, r3
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d016      	beq.n	800d90c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	68da      	ldr	r2, [r3, #12]
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8e8:	b292      	uxth	r2, r2
 800d8ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8f0:	1c9a      	adds	r2, r3, #2
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d8fc:	b29b      	uxth	r3, r3
 800d8fe:	3b01      	subs	r3, #1
 800d900:	b29a      	uxth	r2, r3
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d908:	2301      	movs	r3, #1
 800d90a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d90c:	f7fb ffa6 	bl	800985c <HAL_GetTick>
 800d910:	4602      	mov	r2, r0
 800d912:	6a3b      	ldr	r3, [r7, #32]
 800d914:	1ad3      	subs	r3, r2, r3
 800d916:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d918:	429a      	cmp	r2, r3
 800d91a:	d80d      	bhi.n	800d938 <HAL_SPI_TransmitReceive+0x212>
 800d91c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d91e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d922:	d009      	beq.n	800d938 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	2201      	movs	r2, #1
 800d928:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	2200      	movs	r2, #0
 800d930:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800d934:	2303      	movs	r3, #3
 800d936:	e111      	b.n	800db5c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d93c:	b29b      	uxth	r3, r3
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d19d      	bne.n	800d87e <HAL_SPI_TransmitReceive+0x158>
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d948:	b29b      	uxth	r3, r3
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d197      	bne.n	800d87e <HAL_SPI_TransmitReceive+0x158>
 800d94e:	e0e5      	b.n	800db1c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	685b      	ldr	r3, [r3, #4]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d003      	beq.n	800d960 <HAL_SPI_TransmitReceive+0x23a>
 800d958:	8afb      	ldrh	r3, [r7, #22]
 800d95a:	2b01      	cmp	r3, #1
 800d95c:	f040 80d1 	bne.w	800db02 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d964:	b29b      	uxth	r3, r3
 800d966:	2b01      	cmp	r3, #1
 800d968:	d912      	bls.n	800d990 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d96e:	881a      	ldrh	r2, [r3, #0]
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d97a:	1c9a      	adds	r2, r3, #2
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d984:	b29b      	uxth	r3, r3
 800d986:	3b02      	subs	r3, #2
 800d988:	b29a      	uxth	r2, r3
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d98e:	e0b8      	b.n	800db02 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	330c      	adds	r3, #12
 800d99a:	7812      	ldrb	r2, [r2, #0]
 800d99c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9a2:	1c5a      	adds	r2, r3, #1
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d9ac:	b29b      	uxth	r3, r3
 800d9ae:	3b01      	subs	r3, #1
 800d9b0:	b29a      	uxth	r2, r3
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d9b6:	e0a4      	b.n	800db02 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	689b      	ldr	r3, [r3, #8]
 800d9be:	f003 0302 	and.w	r3, r3, #2
 800d9c2:	2b02      	cmp	r3, #2
 800d9c4:	d134      	bne.n	800da30 <HAL_SPI_TransmitReceive+0x30a>
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d9ca:	b29b      	uxth	r3, r3
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d02f      	beq.n	800da30 <HAL_SPI_TransmitReceive+0x30a>
 800d9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9d2:	2b01      	cmp	r3, #1
 800d9d4:	d12c      	bne.n	800da30 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d9da:	b29b      	uxth	r3, r3
 800d9dc:	2b01      	cmp	r3, #1
 800d9de:	d912      	bls.n	800da06 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9e4:	881a      	ldrh	r2, [r3, #0]
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9f0:	1c9a      	adds	r2, r3, #2
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d9fa:	b29b      	uxth	r3, r3
 800d9fc:	3b02      	subs	r3, #2
 800d9fe:	b29a      	uxth	r2, r3
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800da04:	e012      	b.n	800da2c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	330c      	adds	r3, #12
 800da10:	7812      	ldrb	r2, [r2, #0]
 800da12:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da18:	1c5a      	adds	r2, r3, #1
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800da22:	b29b      	uxth	r3, r3
 800da24:	3b01      	subs	r3, #1
 800da26:	b29a      	uxth	r2, r3
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800da2c:	2300      	movs	r3, #0
 800da2e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	689b      	ldr	r3, [r3, #8]
 800da36:	f003 0301 	and.w	r3, r3, #1
 800da3a:	2b01      	cmp	r3, #1
 800da3c:	d148      	bne.n	800dad0 <HAL_SPI_TransmitReceive+0x3aa>
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800da44:	b29b      	uxth	r3, r3
 800da46:	2b00      	cmp	r3, #0
 800da48:	d042      	beq.n	800dad0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800da50:	b29b      	uxth	r3, r3
 800da52:	2b01      	cmp	r3, #1
 800da54:	d923      	bls.n	800da9e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	68da      	ldr	r2, [r3, #12]
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da60:	b292      	uxth	r2, r2
 800da62:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da68:	1c9a      	adds	r2, r3, #2
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800da74:	b29b      	uxth	r3, r3
 800da76:	3b02      	subs	r3, #2
 800da78:	b29a      	uxth	r2, r3
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800da86:	b29b      	uxth	r3, r3
 800da88:	2b01      	cmp	r3, #1
 800da8a:	d81f      	bhi.n	800dacc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	685a      	ldr	r2, [r3, #4]
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800da9a:	605a      	str	r2, [r3, #4]
 800da9c:	e016      	b.n	800dacc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	f103 020c 	add.w	r2, r3, #12
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800daaa:	7812      	ldrb	r2, [r2, #0]
 800daac:	b2d2      	uxtb	r2, r2
 800daae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dab4:	1c5a      	adds	r2, r3, #1
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800dac0:	b29b      	uxth	r3, r3
 800dac2:	3b01      	subs	r3, #1
 800dac4:	b29a      	uxth	r2, r3
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800dacc:	2301      	movs	r3, #1
 800dace:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800dad0:	f7fb fec4 	bl	800985c <HAL_GetTick>
 800dad4:	4602      	mov	r2, r0
 800dad6:	6a3b      	ldr	r3, [r7, #32]
 800dad8:	1ad3      	subs	r3, r2, r3
 800dada:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dadc:	429a      	cmp	r2, r3
 800dade:	d803      	bhi.n	800dae8 <HAL_SPI_TransmitReceive+0x3c2>
 800dae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dae2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dae6:	d102      	bne.n	800daee <HAL_SPI_TransmitReceive+0x3c8>
 800dae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daea:	2b00      	cmp	r3, #0
 800daec:	d109      	bne.n	800db02 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	2201      	movs	r2, #1
 800daf2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	2200      	movs	r2, #0
 800dafa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800dafe:	2303      	movs	r3, #3
 800db00:	e02c      	b.n	800db5c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800db06:	b29b      	uxth	r3, r3
 800db08:	2b00      	cmp	r3, #0
 800db0a:	f47f af55 	bne.w	800d9b8 <HAL_SPI_TransmitReceive+0x292>
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800db14:	b29b      	uxth	r3, r3
 800db16:	2b00      	cmp	r3, #0
 800db18:	f47f af4e 	bne.w	800d9b8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800db1c:	6a3a      	ldr	r2, [r7, #32]
 800db1e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800db20:	68f8      	ldr	r0, [r7, #12]
 800db22:	f000 f93d 	bl	800dda0 <SPI_EndRxTxTransaction>
 800db26:	4603      	mov	r3, r0
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d008      	beq.n	800db3e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	2220      	movs	r2, #32
 800db30:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	2200      	movs	r2, #0
 800db36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800db3a:	2301      	movs	r3, #1
 800db3c:	e00e      	b.n	800db5c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	2201      	movs	r2, #1
 800db42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	2200      	movs	r2, #0
 800db4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800db52:	2b00      	cmp	r3, #0
 800db54:	d001      	beq.n	800db5a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800db56:	2301      	movs	r3, #1
 800db58:	e000      	b.n	800db5c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800db5a:	2300      	movs	r3, #0
  }
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	3728      	adds	r7, #40	@ 0x28
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}

0800db64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b088      	sub	sp, #32
 800db68:	af00      	add	r7, sp, #0
 800db6a:	60f8      	str	r0, [r7, #12]
 800db6c:	60b9      	str	r1, [r7, #8]
 800db6e:	603b      	str	r3, [r7, #0]
 800db70:	4613      	mov	r3, r2
 800db72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800db74:	f7fb fe72 	bl	800985c <HAL_GetTick>
 800db78:	4602      	mov	r2, r0
 800db7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db7c:	1a9b      	subs	r3, r3, r2
 800db7e:	683a      	ldr	r2, [r7, #0]
 800db80:	4413      	add	r3, r2
 800db82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800db84:	f7fb fe6a 	bl	800985c <HAL_GetTick>
 800db88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800db8a:	4b39      	ldr	r3, [pc, #228]	@ (800dc70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	015b      	lsls	r3, r3, #5
 800db90:	0d1b      	lsrs	r3, r3, #20
 800db92:	69fa      	ldr	r2, [r7, #28]
 800db94:	fb02 f303 	mul.w	r3, r2, r3
 800db98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800db9a:	e054      	b.n	800dc46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dba2:	d050      	beq.n	800dc46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800dba4:	f7fb fe5a 	bl	800985c <HAL_GetTick>
 800dba8:	4602      	mov	r2, r0
 800dbaa:	69bb      	ldr	r3, [r7, #24]
 800dbac:	1ad3      	subs	r3, r2, r3
 800dbae:	69fa      	ldr	r2, [r7, #28]
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d902      	bls.n	800dbba <SPI_WaitFlagStateUntilTimeout+0x56>
 800dbb4:	69fb      	ldr	r3, [r7, #28]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d13d      	bne.n	800dc36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	685a      	ldr	r2, [r3, #4]
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800dbc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	685b      	ldr	r3, [r3, #4]
 800dbce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800dbd2:	d111      	bne.n	800dbf8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	689b      	ldr	r3, [r3, #8]
 800dbd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dbdc:	d004      	beq.n	800dbe8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	689b      	ldr	r3, [r3, #8]
 800dbe2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dbe6:	d107      	bne.n	800dbf8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	681a      	ldr	r2, [r3, #0]
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dbf6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dc00:	d10f      	bne.n	800dc22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	681a      	ldr	r2, [r3, #0]
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800dc10:	601a      	str	r2, [r3, #0]
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	681a      	ldr	r2, [r3, #0]
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800dc20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2201      	movs	r2, #1
 800dc26:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800dc32:	2303      	movs	r3, #3
 800dc34:	e017      	b.n	800dc66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d101      	bne.n	800dc40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800dc40:	697b      	ldr	r3, [r7, #20]
 800dc42:	3b01      	subs	r3, #1
 800dc44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	689a      	ldr	r2, [r3, #8]
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	4013      	ands	r3, r2
 800dc50:	68ba      	ldr	r2, [r7, #8]
 800dc52:	429a      	cmp	r2, r3
 800dc54:	bf0c      	ite	eq
 800dc56:	2301      	moveq	r3, #1
 800dc58:	2300      	movne	r3, #0
 800dc5a:	b2db      	uxtb	r3, r3
 800dc5c:	461a      	mov	r2, r3
 800dc5e:	79fb      	ldrb	r3, [r7, #7]
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d19b      	bne.n	800db9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800dc64:	2300      	movs	r3, #0
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3720      	adds	r7, #32
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}
 800dc6e:	bf00      	nop
 800dc70:	2000005c 	.word	0x2000005c

0800dc74 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b08a      	sub	sp, #40	@ 0x28
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	60f8      	str	r0, [r7, #12]
 800dc7c:	60b9      	str	r1, [r7, #8]
 800dc7e:	607a      	str	r2, [r7, #4]
 800dc80:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800dc82:	2300      	movs	r3, #0
 800dc84:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800dc86:	f7fb fde9 	bl	800985c <HAL_GetTick>
 800dc8a:	4602      	mov	r2, r0
 800dc8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc8e:	1a9b      	subs	r3, r3, r2
 800dc90:	683a      	ldr	r2, [r7, #0]
 800dc92:	4413      	add	r3, r2
 800dc94:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800dc96:	f7fb fde1 	bl	800985c <HAL_GetTick>
 800dc9a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	330c      	adds	r3, #12
 800dca2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800dca4:	4b3d      	ldr	r3, [pc, #244]	@ (800dd9c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800dca6:	681a      	ldr	r2, [r3, #0]
 800dca8:	4613      	mov	r3, r2
 800dcaa:	009b      	lsls	r3, r3, #2
 800dcac:	4413      	add	r3, r2
 800dcae:	00da      	lsls	r2, r3, #3
 800dcb0:	1ad3      	subs	r3, r2, r3
 800dcb2:	0d1b      	lsrs	r3, r3, #20
 800dcb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dcb6:	fb02 f303 	mul.w	r3, r2, r3
 800dcba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800dcbc:	e060      	b.n	800dd80 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800dcbe:	68bb      	ldr	r3, [r7, #8]
 800dcc0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800dcc4:	d107      	bne.n	800dcd6 <SPI_WaitFifoStateUntilTimeout+0x62>
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d104      	bne.n	800dcd6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800dccc:	69fb      	ldr	r3, [r7, #28]
 800dcce:	781b      	ldrb	r3, [r3, #0]
 800dcd0:	b2db      	uxtb	r3, r3
 800dcd2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800dcd4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800dcd6:	683b      	ldr	r3, [r7, #0]
 800dcd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dcdc:	d050      	beq.n	800dd80 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800dcde:	f7fb fdbd 	bl	800985c <HAL_GetTick>
 800dce2:	4602      	mov	r2, r0
 800dce4:	6a3b      	ldr	r3, [r7, #32]
 800dce6:	1ad3      	subs	r3, r2, r3
 800dce8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dcea:	429a      	cmp	r2, r3
 800dcec:	d902      	bls.n	800dcf4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800dcee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d13d      	bne.n	800dd70 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	685a      	ldr	r2, [r3, #4]
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800dd02:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800dd0c:	d111      	bne.n	800dd32 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	689b      	ldr	r3, [r3, #8]
 800dd12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dd16:	d004      	beq.n	800dd22 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	689b      	ldr	r3, [r3, #8]
 800dd1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dd20:	d107      	bne.n	800dd32 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	681a      	ldr	r2, [r3, #0]
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dd30:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dd3a:	d10f      	bne.n	800dd5c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	681a      	ldr	r2, [r3, #0]
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800dd4a:	601a      	str	r2, [r3, #0]
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	681a      	ldr	r2, [r3, #0]
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800dd5a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	2201      	movs	r2, #1
 800dd60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	2200      	movs	r2, #0
 800dd68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800dd6c:	2303      	movs	r3, #3
 800dd6e:	e010      	b.n	800dd92 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800dd70:	69bb      	ldr	r3, [r7, #24]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d101      	bne.n	800dd7a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800dd76:	2300      	movs	r3, #0
 800dd78:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800dd7a:	69bb      	ldr	r3, [r7, #24]
 800dd7c:	3b01      	subs	r3, #1
 800dd7e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	689a      	ldr	r2, [r3, #8]
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	4013      	ands	r3, r2
 800dd8a:	687a      	ldr	r2, [r7, #4]
 800dd8c:	429a      	cmp	r2, r3
 800dd8e:	d196      	bne.n	800dcbe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800dd90:	2300      	movs	r3, #0
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3728      	adds	r7, #40	@ 0x28
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}
 800dd9a:	bf00      	nop
 800dd9c:	2000005c 	.word	0x2000005c

0800dda0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b086      	sub	sp, #24
 800dda4:	af02      	add	r7, sp, #8
 800dda6:	60f8      	str	r0, [r7, #12]
 800dda8:	60b9      	str	r1, [r7, #8]
 800ddaa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	9300      	str	r3, [sp, #0]
 800ddb0:	68bb      	ldr	r3, [r7, #8]
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800ddb8:	68f8      	ldr	r0, [r7, #12]
 800ddba:	f7ff ff5b 	bl	800dc74 <SPI_WaitFifoStateUntilTimeout>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d007      	beq.n	800ddd4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ddc8:	f043 0220 	orr.w	r2, r3, #32
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ddd0:	2303      	movs	r3, #3
 800ddd2:	e027      	b.n	800de24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	9300      	str	r3, [sp, #0]
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	2200      	movs	r2, #0
 800dddc:	2180      	movs	r1, #128	@ 0x80
 800ddde:	68f8      	ldr	r0, [r7, #12]
 800dde0:	f7ff fec0 	bl	800db64 <SPI_WaitFlagStateUntilTimeout>
 800dde4:	4603      	mov	r3, r0
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d007      	beq.n	800ddfa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ddee:	f043 0220 	orr.w	r2, r3, #32
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ddf6:	2303      	movs	r3, #3
 800ddf8:	e014      	b.n	800de24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	9300      	str	r3, [sp, #0]
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	2200      	movs	r2, #0
 800de02:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800de06:	68f8      	ldr	r0, [r7, #12]
 800de08:	f7ff ff34 	bl	800dc74 <SPI_WaitFifoStateUntilTimeout>
 800de0c:	4603      	mov	r3, r0
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d007      	beq.n	800de22 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de16:	f043 0220 	orr.w	r2, r3, #32
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800de1e:	2303      	movs	r3, #3
 800de20:	e000      	b.n	800de24 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800de22:	2300      	movs	r3, #0
}
 800de24:	4618      	mov	r0, r3
 800de26:	3710      	adds	r7, #16
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}

0800de2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b082      	sub	sp, #8
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d101      	bne.n	800de3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800de3a:	2301      	movs	r3, #1
 800de3c:	e049      	b.n	800ded2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800de44:	b2db      	uxtb	r3, r3
 800de46:	2b00      	cmp	r3, #0
 800de48:	d106      	bne.n	800de58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2200      	movs	r2, #0
 800de4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	f7fb fba6 	bl	80095a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2202      	movs	r2, #2
 800de5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681a      	ldr	r2, [r3, #0]
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	3304      	adds	r3, #4
 800de68:	4619      	mov	r1, r3
 800de6a:	4610      	mov	r0, r2
 800de6c:	f000 f9ba 	bl	800e1e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2201      	movs	r2, #1
 800de74:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2201      	movs	r2, #1
 800de7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	2201      	movs	r2, #1
 800de84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2201      	movs	r2, #1
 800de8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2201      	movs	r2, #1
 800de94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2201      	movs	r2, #1
 800de9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2201      	movs	r2, #1
 800dea4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2201      	movs	r2, #1
 800deac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2201      	movs	r2, #1
 800deb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2201      	movs	r2, #1
 800debc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2201      	movs	r2, #1
 800dec4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2201      	movs	r2, #1
 800decc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ded0:	2300      	movs	r3, #0
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	3708      	adds	r7, #8
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}
	...

0800dedc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dedc:	b480      	push	{r7}
 800dede:	b085      	sub	sp, #20
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800deea:	b2db      	uxtb	r3, r3
 800deec:	2b01      	cmp	r3, #1
 800deee:	d001      	beq.n	800def4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800def0:	2301      	movs	r3, #1
 800def2:	e03b      	b.n	800df6c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2202      	movs	r2, #2
 800def8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	68da      	ldr	r2, [r3, #12]
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	f042 0201 	orr.w	r2, r2, #1
 800df0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	4a19      	ldr	r2, [pc, #100]	@ (800df78 <HAL_TIM_Base_Start_IT+0x9c>)
 800df12:	4293      	cmp	r3, r2
 800df14:	d009      	beq.n	800df2a <HAL_TIM_Base_Start_IT+0x4e>
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df1e:	d004      	beq.n	800df2a <HAL_TIM_Base_Start_IT+0x4e>
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	4a15      	ldr	r2, [pc, #84]	@ (800df7c <HAL_TIM_Base_Start_IT+0xa0>)
 800df26:	4293      	cmp	r3, r2
 800df28:	d115      	bne.n	800df56 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	689a      	ldr	r2, [r3, #8]
 800df30:	4b13      	ldr	r3, [pc, #76]	@ (800df80 <HAL_TIM_Base_Start_IT+0xa4>)
 800df32:	4013      	ands	r3, r2
 800df34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	2b06      	cmp	r3, #6
 800df3a:	d015      	beq.n	800df68 <HAL_TIM_Base_Start_IT+0x8c>
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df42:	d011      	beq.n	800df68 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	681a      	ldr	r2, [r3, #0]
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	f042 0201 	orr.w	r2, r2, #1
 800df52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df54:	e008      	b.n	800df68 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	681a      	ldr	r2, [r3, #0]
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	f042 0201 	orr.w	r2, r2, #1
 800df64:	601a      	str	r2, [r3, #0]
 800df66:	e000      	b.n	800df6a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df68:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800df6a:	2300      	movs	r3, #0
}
 800df6c:	4618      	mov	r0, r3
 800df6e:	3714      	adds	r7, #20
 800df70:	46bd      	mov	sp, r7
 800df72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df76:	4770      	bx	lr
 800df78:	40012c00 	.word	0x40012c00
 800df7c:	40014000 	.word	0x40014000
 800df80:	00010007 	.word	0x00010007

0800df84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b084      	sub	sp, #16
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	68db      	ldr	r3, [r3, #12]
 800df92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	691b      	ldr	r3, [r3, #16]
 800df9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	f003 0302 	and.w	r3, r3, #2
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d020      	beq.n	800dfe8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	f003 0302 	and.w	r3, r3, #2
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d01b      	beq.n	800dfe8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	f06f 0202 	mvn.w	r2, #2
 800dfb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	2201      	movs	r2, #1
 800dfbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	699b      	ldr	r3, [r3, #24]
 800dfc6:	f003 0303 	and.w	r3, r3, #3
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d003      	beq.n	800dfd6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f000 f8e9 	bl	800e1a6 <HAL_TIM_IC_CaptureCallback>
 800dfd4:	e005      	b.n	800dfe2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	f000 f8db 	bl	800e192 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f000 f8ec 	bl	800e1ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	f003 0304 	and.w	r3, r3, #4
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d020      	beq.n	800e034 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	f003 0304 	and.w	r3, r3, #4
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d01b      	beq.n	800e034 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	f06f 0204 	mvn.w	r2, #4
 800e004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	2202      	movs	r2, #2
 800e00a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	699b      	ldr	r3, [r3, #24]
 800e012:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e016:	2b00      	cmp	r3, #0
 800e018:	d003      	beq.n	800e022 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f000 f8c3 	bl	800e1a6 <HAL_TIM_IC_CaptureCallback>
 800e020:	e005      	b.n	800e02e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	f000 f8b5 	bl	800e192 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	f000 f8c6 	bl	800e1ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	2200      	movs	r2, #0
 800e032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	f003 0308 	and.w	r3, r3, #8
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d020      	beq.n	800e080 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	f003 0308 	and.w	r3, r3, #8
 800e044:	2b00      	cmp	r3, #0
 800e046:	d01b      	beq.n	800e080 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	f06f 0208 	mvn.w	r2, #8
 800e050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2204      	movs	r2, #4
 800e056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	69db      	ldr	r3, [r3, #28]
 800e05e:	f003 0303 	and.w	r3, r3, #3
 800e062:	2b00      	cmp	r3, #0
 800e064:	d003      	beq.n	800e06e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f000 f89d 	bl	800e1a6 <HAL_TIM_IC_CaptureCallback>
 800e06c:	e005      	b.n	800e07a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	f000 f88f 	bl	800e192 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f000 f8a0 	bl	800e1ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2200      	movs	r2, #0
 800e07e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	f003 0310 	and.w	r3, r3, #16
 800e086:	2b00      	cmp	r3, #0
 800e088:	d020      	beq.n	800e0cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	f003 0310 	and.w	r3, r3, #16
 800e090:	2b00      	cmp	r3, #0
 800e092:	d01b      	beq.n	800e0cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	f06f 0210 	mvn.w	r2, #16
 800e09c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	2208      	movs	r2, #8
 800e0a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	69db      	ldr	r3, [r3, #28]
 800e0aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d003      	beq.n	800e0ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	f000 f877 	bl	800e1a6 <HAL_TIM_IC_CaptureCallback>
 800e0b8:	e005      	b.n	800e0c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f000 f869 	bl	800e192 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f000 f87a 	bl	800e1ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	f003 0301 	and.w	r3, r3, #1
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d00c      	beq.n	800e0f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	f003 0301 	and.w	r3, r3, #1
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d007      	beq.n	800e0f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	f06f 0201 	mvn.w	r2, #1
 800e0e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f7fa f968 	bl	80083c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d104      	bne.n	800e104 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e100:	2b00      	cmp	r3, #0
 800e102:	d00c      	beq.n	800e11e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d007      	beq.n	800e11e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e118:	6878      	ldr	r0, [r7, #4]
 800e11a:	f000 f943 	bl	800e3a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e11e:	68bb      	ldr	r3, [r7, #8]
 800e120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e124:	2b00      	cmp	r3, #0
 800e126:	d00c      	beq.n	800e142 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d007      	beq.n	800e142 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e13a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f000 f93b 	bl	800e3b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d00c      	beq.n	800e166 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e152:	2b00      	cmp	r3, #0
 800e154:	d007      	beq.n	800e166 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e15e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e160:	6878      	ldr	r0, [r7, #4]
 800e162:	f000 f834 	bl	800e1ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	f003 0320 	and.w	r3, r3, #32
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d00c      	beq.n	800e18a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	f003 0320 	and.w	r3, r3, #32
 800e176:	2b00      	cmp	r3, #0
 800e178:	d007      	beq.n	800e18a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	f06f 0220 	mvn.w	r2, #32
 800e182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f000 f903 	bl	800e390 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e18a:	bf00      	nop
 800e18c:	3710      	adds	r7, #16
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}

0800e192 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e192:	b480      	push	{r7}
 800e194:	b083      	sub	sp, #12
 800e196:	af00      	add	r7, sp, #0
 800e198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e19a:	bf00      	nop
 800e19c:	370c      	adds	r7, #12
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a4:	4770      	bx	lr

0800e1a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e1a6:	b480      	push	{r7}
 800e1a8:	b083      	sub	sp, #12
 800e1aa:	af00      	add	r7, sp, #0
 800e1ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e1ae:	bf00      	nop
 800e1b0:	370c      	adds	r7, #12
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b8:	4770      	bx	lr

0800e1ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e1ba:	b480      	push	{r7}
 800e1bc:	b083      	sub	sp, #12
 800e1be:	af00      	add	r7, sp, #0
 800e1c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e1c2:	bf00      	nop
 800e1c4:	370c      	adds	r7, #12
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1cc:	4770      	bx	lr

0800e1ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e1ce:	b480      	push	{r7}
 800e1d0:	b083      	sub	sp, #12
 800e1d2:	af00      	add	r7, sp, #0
 800e1d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e1d6:	bf00      	nop
 800e1d8:	370c      	adds	r7, #12
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e0:	4770      	bx	lr
	...

0800e1e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b085      	sub	sp, #20
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
 800e1ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	4a30      	ldr	r2, [pc, #192]	@ (800e2b8 <TIM_Base_SetConfig+0xd4>)
 800e1f8:	4293      	cmp	r3, r2
 800e1fa:	d003      	beq.n	800e204 <TIM_Base_SetConfig+0x20>
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e202:	d108      	bne.n	800e216 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e20a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	685b      	ldr	r3, [r3, #4]
 800e210:	68fa      	ldr	r2, [r7, #12]
 800e212:	4313      	orrs	r3, r2
 800e214:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	4a27      	ldr	r2, [pc, #156]	@ (800e2b8 <TIM_Base_SetConfig+0xd4>)
 800e21a:	4293      	cmp	r3, r2
 800e21c:	d00b      	beq.n	800e236 <TIM_Base_SetConfig+0x52>
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e224:	d007      	beq.n	800e236 <TIM_Base_SetConfig+0x52>
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	4a24      	ldr	r2, [pc, #144]	@ (800e2bc <TIM_Base_SetConfig+0xd8>)
 800e22a:	4293      	cmp	r3, r2
 800e22c:	d003      	beq.n	800e236 <TIM_Base_SetConfig+0x52>
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	4a23      	ldr	r2, [pc, #140]	@ (800e2c0 <TIM_Base_SetConfig+0xdc>)
 800e232:	4293      	cmp	r3, r2
 800e234:	d108      	bne.n	800e248 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e23c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e23e:	683b      	ldr	r3, [r7, #0]
 800e240:	68db      	ldr	r3, [r3, #12]
 800e242:	68fa      	ldr	r2, [r7, #12]
 800e244:	4313      	orrs	r3, r2
 800e246:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	695b      	ldr	r3, [r3, #20]
 800e252:	4313      	orrs	r3, r2
 800e254:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	68fa      	ldr	r2, [r7, #12]
 800e25a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	689a      	ldr	r2, [r3, #8]
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	681a      	ldr	r2, [r3, #0]
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	4a12      	ldr	r2, [pc, #72]	@ (800e2b8 <TIM_Base_SetConfig+0xd4>)
 800e270:	4293      	cmp	r3, r2
 800e272:	d007      	beq.n	800e284 <TIM_Base_SetConfig+0xa0>
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	4a11      	ldr	r2, [pc, #68]	@ (800e2bc <TIM_Base_SetConfig+0xd8>)
 800e278:	4293      	cmp	r3, r2
 800e27a:	d003      	beq.n	800e284 <TIM_Base_SetConfig+0xa0>
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	4a10      	ldr	r2, [pc, #64]	@ (800e2c0 <TIM_Base_SetConfig+0xdc>)
 800e280:	4293      	cmp	r3, r2
 800e282:	d103      	bne.n	800e28c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	691a      	ldr	r2, [r3, #16]
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2201      	movs	r2, #1
 800e290:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	691b      	ldr	r3, [r3, #16]
 800e296:	f003 0301 	and.w	r3, r3, #1
 800e29a:	2b01      	cmp	r3, #1
 800e29c:	d105      	bne.n	800e2aa <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	691b      	ldr	r3, [r3, #16]
 800e2a2:	f023 0201 	bic.w	r2, r3, #1
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	611a      	str	r2, [r3, #16]
  }
}
 800e2aa:	bf00      	nop
 800e2ac:	3714      	adds	r7, #20
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b4:	4770      	bx	lr
 800e2b6:	bf00      	nop
 800e2b8:	40012c00 	.word	0x40012c00
 800e2bc:	40014000 	.word	0x40014000
 800e2c0:	40014400 	.word	0x40014400

0800e2c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e2c4:	b480      	push	{r7}
 800e2c6:	b085      	sub	sp, #20
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
 800e2cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e2d4:	2b01      	cmp	r3, #1
 800e2d6:	d101      	bne.n	800e2dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e2d8:	2302      	movs	r3, #2
 800e2da:	e04f      	b.n	800e37c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2201      	movs	r2, #1
 800e2e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2202      	movs	r2, #2
 800e2e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	685b      	ldr	r3, [r3, #4]
 800e2f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	689b      	ldr	r3, [r3, #8]
 800e2fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	4a21      	ldr	r2, [pc, #132]	@ (800e388 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800e302:	4293      	cmp	r3, r2
 800e304:	d108      	bne.n	800e318 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e30c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	685b      	ldr	r3, [r3, #4]
 800e312:	68fa      	ldr	r2, [r7, #12]
 800e314:	4313      	orrs	r3, r2
 800e316:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e31e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	68fa      	ldr	r2, [r7, #12]
 800e326:	4313      	orrs	r3, r2
 800e328:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	68fa      	ldr	r2, [r7, #12]
 800e330:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	4a14      	ldr	r2, [pc, #80]	@ (800e388 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800e338:	4293      	cmp	r3, r2
 800e33a:	d009      	beq.n	800e350 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e344:	d004      	beq.n	800e350 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	4a10      	ldr	r2, [pc, #64]	@ (800e38c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800e34c:	4293      	cmp	r3, r2
 800e34e:	d10c      	bne.n	800e36a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e356:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e358:	683b      	ldr	r3, [r7, #0]
 800e35a:	689b      	ldr	r3, [r3, #8]
 800e35c:	68ba      	ldr	r2, [r7, #8]
 800e35e:	4313      	orrs	r3, r2
 800e360:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	68ba      	ldr	r2, [r7, #8]
 800e368:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2201      	movs	r2, #1
 800e36e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2200      	movs	r2, #0
 800e376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e37a:	2300      	movs	r3, #0
}
 800e37c:	4618      	mov	r0, r3
 800e37e:	3714      	adds	r7, #20
 800e380:	46bd      	mov	sp, r7
 800e382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e386:	4770      	bx	lr
 800e388:	40012c00 	.word	0x40012c00
 800e38c:	40014000 	.word	0x40014000

0800e390 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e390:	b480      	push	{r7}
 800e392:	b083      	sub	sp, #12
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e398:	bf00      	nop
 800e39a:	370c      	adds	r7, #12
 800e39c:	46bd      	mov	sp, r7
 800e39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a2:	4770      	bx	lr

0800e3a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e3a4:	b480      	push	{r7}
 800e3a6:	b083      	sub	sp, #12
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e3ac:	bf00      	nop
 800e3ae:	370c      	adds	r7, #12
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b6:	4770      	bx	lr

0800e3b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e3b8:	b480      	push	{r7}
 800e3ba:	b083      	sub	sp, #12
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e3c0:	bf00      	nop
 800e3c2:	370c      	adds	r7, #12
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ca:	4770      	bx	lr

0800e3cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b082      	sub	sp, #8
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d101      	bne.n	800e3de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e3da:	2301      	movs	r3, #1
 800e3dc:	e040      	b.n	800e460 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d106      	bne.n	800e3f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f7fb f94a 	bl	8009688 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2224      	movs	r2, #36	@ 0x24
 800e3f8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	681a      	ldr	r2, [r3, #0]
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	f022 0201 	bic.w	r2, r2, #1
 800e408:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d002      	beq.n	800e418 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	f000 fade 	bl	800e9d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f000 f8af 	bl	800e57c <UART_SetConfig>
 800e41e:	4603      	mov	r3, r0
 800e420:	2b01      	cmp	r3, #1
 800e422:	d101      	bne.n	800e428 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800e424:	2301      	movs	r3, #1
 800e426:	e01b      	b.n	800e460 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	685a      	ldr	r2, [r3, #4]
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e436:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	689a      	ldr	r2, [r3, #8]
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e446:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	681a      	ldr	r2, [r3, #0]
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	f042 0201 	orr.w	r2, r2, #1
 800e456:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f000 fb5d 	bl	800eb18 <UART_CheckIdleState>
 800e45e:	4603      	mov	r3, r0
}
 800e460:	4618      	mov	r0, r3
 800e462:	3708      	adds	r7, #8
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}

0800e468 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b08a      	sub	sp, #40	@ 0x28
 800e46c:	af02      	add	r7, sp, #8
 800e46e:	60f8      	str	r0, [r7, #12]
 800e470:	60b9      	str	r1, [r7, #8]
 800e472:	603b      	str	r3, [r7, #0]
 800e474:	4613      	mov	r3, r2
 800e476:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e47c:	2b20      	cmp	r3, #32
 800e47e:	d177      	bne.n	800e570 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800e480:	68bb      	ldr	r3, [r7, #8]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d002      	beq.n	800e48c <HAL_UART_Transmit+0x24>
 800e486:	88fb      	ldrh	r3, [r7, #6]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d101      	bne.n	800e490 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800e48c:	2301      	movs	r3, #1
 800e48e:	e070      	b.n	800e572 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	2200      	movs	r2, #0
 800e494:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	2221      	movs	r2, #33	@ 0x21
 800e49c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e49e:	f7fb f9dd 	bl	800985c <HAL_GetTick>
 800e4a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	88fa      	ldrh	r2, [r7, #6]
 800e4a8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	88fa      	ldrh	r2, [r7, #6]
 800e4b0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	689b      	ldr	r3, [r3, #8]
 800e4b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e4bc:	d108      	bne.n	800e4d0 <HAL_UART_Transmit+0x68>
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	691b      	ldr	r3, [r3, #16]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d104      	bne.n	800e4d0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e4ca:	68bb      	ldr	r3, [r7, #8]
 800e4cc:	61bb      	str	r3, [r7, #24]
 800e4ce:	e003      	b.n	800e4d8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800e4d0:	68bb      	ldr	r3, [r7, #8]
 800e4d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e4d8:	e02f      	b.n	800e53a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	9300      	str	r3, [sp, #0]
 800e4de:	697b      	ldr	r3, [r7, #20]
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	2180      	movs	r1, #128	@ 0x80
 800e4e4:	68f8      	ldr	r0, [r7, #12]
 800e4e6:	f000 fbbf 	bl	800ec68 <UART_WaitOnFlagUntilTimeout>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d004      	beq.n	800e4fa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	2220      	movs	r2, #32
 800e4f4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800e4f6:	2303      	movs	r3, #3
 800e4f8:	e03b      	b.n	800e572 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800e4fa:	69fb      	ldr	r3, [r7, #28]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d10b      	bne.n	800e518 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e500:	69bb      	ldr	r3, [r7, #24]
 800e502:	881a      	ldrh	r2, [r3, #0]
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e50c:	b292      	uxth	r2, r2
 800e50e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e510:	69bb      	ldr	r3, [r7, #24]
 800e512:	3302      	adds	r3, #2
 800e514:	61bb      	str	r3, [r7, #24]
 800e516:	e007      	b.n	800e528 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e518:	69fb      	ldr	r3, [r7, #28]
 800e51a:	781a      	ldrb	r2, [r3, #0]
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e522:	69fb      	ldr	r3, [r7, #28]
 800e524:	3301      	adds	r3, #1
 800e526:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800e52e:	b29b      	uxth	r3, r3
 800e530:	3b01      	subs	r3, #1
 800e532:	b29a      	uxth	r2, r3
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800e540:	b29b      	uxth	r3, r3
 800e542:	2b00      	cmp	r3, #0
 800e544:	d1c9      	bne.n	800e4da <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	9300      	str	r3, [sp, #0]
 800e54a:	697b      	ldr	r3, [r7, #20]
 800e54c:	2200      	movs	r2, #0
 800e54e:	2140      	movs	r1, #64	@ 0x40
 800e550:	68f8      	ldr	r0, [r7, #12]
 800e552:	f000 fb89 	bl	800ec68 <UART_WaitOnFlagUntilTimeout>
 800e556:	4603      	mov	r3, r0
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d004      	beq.n	800e566 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	2220      	movs	r2, #32
 800e560:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800e562:	2303      	movs	r3, #3
 800e564:	e005      	b.n	800e572 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	2220      	movs	r2, #32
 800e56a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800e56c:	2300      	movs	r3, #0
 800e56e:	e000      	b.n	800e572 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800e570:	2302      	movs	r3, #2
  }
}
 800e572:	4618      	mov	r0, r3
 800e574:	3720      	adds	r7, #32
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}
	...

0800e57c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e57c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e580:	b08a      	sub	sp, #40	@ 0x28
 800e582:	af00      	add	r7, sp, #0
 800e584:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e586:	2300      	movs	r3, #0
 800e588:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	689a      	ldr	r2, [r3, #8]
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	691b      	ldr	r3, [r3, #16]
 800e594:	431a      	orrs	r2, r3
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	695b      	ldr	r3, [r3, #20]
 800e59a:	431a      	orrs	r2, r3
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	69db      	ldr	r3, [r3, #28]
 800e5a0:	4313      	orrs	r3, r2
 800e5a2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	681a      	ldr	r2, [r3, #0]
 800e5aa:	4bb4      	ldr	r3, [pc, #720]	@ (800e87c <UART_SetConfig+0x300>)
 800e5ac:	4013      	ands	r3, r2
 800e5ae:	68fa      	ldr	r2, [r7, #12]
 800e5b0:	6812      	ldr	r2, [r2, #0]
 800e5b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e5b4:	430b      	orrs	r3, r1
 800e5b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	685b      	ldr	r3, [r3, #4]
 800e5be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	68da      	ldr	r2, [r3, #12]
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	430a      	orrs	r2, r1
 800e5cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	699b      	ldr	r3, [r3, #24]
 800e5d2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	4aa9      	ldr	r2, [pc, #676]	@ (800e880 <UART_SetConfig+0x304>)
 800e5da:	4293      	cmp	r3, r2
 800e5dc:	d004      	beq.n	800e5e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	6a1b      	ldr	r3, [r3, #32]
 800e5e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e5e4:	4313      	orrs	r3, r2
 800e5e6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	689b      	ldr	r3, [r3, #8]
 800e5ee:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e5f8:	430a      	orrs	r2, r1
 800e5fa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	4aa0      	ldr	r2, [pc, #640]	@ (800e884 <UART_SetConfig+0x308>)
 800e602:	4293      	cmp	r3, r2
 800e604:	d126      	bne.n	800e654 <UART_SetConfig+0xd8>
 800e606:	4ba0      	ldr	r3, [pc, #640]	@ (800e888 <UART_SetConfig+0x30c>)
 800e608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e60c:	f003 0303 	and.w	r3, r3, #3
 800e610:	2b03      	cmp	r3, #3
 800e612:	d81b      	bhi.n	800e64c <UART_SetConfig+0xd0>
 800e614:	a201      	add	r2, pc, #4	@ (adr r2, 800e61c <UART_SetConfig+0xa0>)
 800e616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e61a:	bf00      	nop
 800e61c:	0800e62d 	.word	0x0800e62d
 800e620:	0800e63d 	.word	0x0800e63d
 800e624:	0800e635 	.word	0x0800e635
 800e628:	0800e645 	.word	0x0800e645
 800e62c:	2301      	movs	r3, #1
 800e62e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e632:	e080      	b.n	800e736 <UART_SetConfig+0x1ba>
 800e634:	2302      	movs	r3, #2
 800e636:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e63a:	e07c      	b.n	800e736 <UART_SetConfig+0x1ba>
 800e63c:	2304      	movs	r3, #4
 800e63e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e642:	e078      	b.n	800e736 <UART_SetConfig+0x1ba>
 800e644:	2308      	movs	r3, #8
 800e646:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e64a:	e074      	b.n	800e736 <UART_SetConfig+0x1ba>
 800e64c:	2310      	movs	r3, #16
 800e64e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e652:	e070      	b.n	800e736 <UART_SetConfig+0x1ba>
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	4a8c      	ldr	r2, [pc, #560]	@ (800e88c <UART_SetConfig+0x310>)
 800e65a:	4293      	cmp	r3, r2
 800e65c:	d138      	bne.n	800e6d0 <UART_SetConfig+0x154>
 800e65e:	4b8a      	ldr	r3, [pc, #552]	@ (800e888 <UART_SetConfig+0x30c>)
 800e660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e664:	f003 030c 	and.w	r3, r3, #12
 800e668:	2b0c      	cmp	r3, #12
 800e66a:	d82d      	bhi.n	800e6c8 <UART_SetConfig+0x14c>
 800e66c:	a201      	add	r2, pc, #4	@ (adr r2, 800e674 <UART_SetConfig+0xf8>)
 800e66e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e672:	bf00      	nop
 800e674:	0800e6a9 	.word	0x0800e6a9
 800e678:	0800e6c9 	.word	0x0800e6c9
 800e67c:	0800e6c9 	.word	0x0800e6c9
 800e680:	0800e6c9 	.word	0x0800e6c9
 800e684:	0800e6b9 	.word	0x0800e6b9
 800e688:	0800e6c9 	.word	0x0800e6c9
 800e68c:	0800e6c9 	.word	0x0800e6c9
 800e690:	0800e6c9 	.word	0x0800e6c9
 800e694:	0800e6b1 	.word	0x0800e6b1
 800e698:	0800e6c9 	.word	0x0800e6c9
 800e69c:	0800e6c9 	.word	0x0800e6c9
 800e6a0:	0800e6c9 	.word	0x0800e6c9
 800e6a4:	0800e6c1 	.word	0x0800e6c1
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e6ae:	e042      	b.n	800e736 <UART_SetConfig+0x1ba>
 800e6b0:	2302      	movs	r3, #2
 800e6b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e6b6:	e03e      	b.n	800e736 <UART_SetConfig+0x1ba>
 800e6b8:	2304      	movs	r3, #4
 800e6ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e6be:	e03a      	b.n	800e736 <UART_SetConfig+0x1ba>
 800e6c0:	2308      	movs	r3, #8
 800e6c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e6c6:	e036      	b.n	800e736 <UART_SetConfig+0x1ba>
 800e6c8:	2310      	movs	r3, #16
 800e6ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e6ce:	e032      	b.n	800e736 <UART_SetConfig+0x1ba>
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	4a6a      	ldr	r2, [pc, #424]	@ (800e880 <UART_SetConfig+0x304>)
 800e6d6:	4293      	cmp	r3, r2
 800e6d8:	d12a      	bne.n	800e730 <UART_SetConfig+0x1b4>
 800e6da:	4b6b      	ldr	r3, [pc, #428]	@ (800e888 <UART_SetConfig+0x30c>)
 800e6dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e6e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800e6e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e6e8:	d01a      	beq.n	800e720 <UART_SetConfig+0x1a4>
 800e6ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e6ee:	d81b      	bhi.n	800e728 <UART_SetConfig+0x1ac>
 800e6f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e6f4:	d00c      	beq.n	800e710 <UART_SetConfig+0x194>
 800e6f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e6fa:	d815      	bhi.n	800e728 <UART_SetConfig+0x1ac>
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d003      	beq.n	800e708 <UART_SetConfig+0x18c>
 800e700:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e704:	d008      	beq.n	800e718 <UART_SetConfig+0x19c>
 800e706:	e00f      	b.n	800e728 <UART_SetConfig+0x1ac>
 800e708:	2300      	movs	r3, #0
 800e70a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e70e:	e012      	b.n	800e736 <UART_SetConfig+0x1ba>
 800e710:	2302      	movs	r3, #2
 800e712:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e716:	e00e      	b.n	800e736 <UART_SetConfig+0x1ba>
 800e718:	2304      	movs	r3, #4
 800e71a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e71e:	e00a      	b.n	800e736 <UART_SetConfig+0x1ba>
 800e720:	2308      	movs	r3, #8
 800e722:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e726:	e006      	b.n	800e736 <UART_SetConfig+0x1ba>
 800e728:	2310      	movs	r3, #16
 800e72a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e72e:	e002      	b.n	800e736 <UART_SetConfig+0x1ba>
 800e730:	2310      	movs	r3, #16
 800e732:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	4a51      	ldr	r2, [pc, #324]	@ (800e880 <UART_SetConfig+0x304>)
 800e73c:	4293      	cmp	r3, r2
 800e73e:	d17a      	bne.n	800e836 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e740:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e744:	2b08      	cmp	r3, #8
 800e746:	d824      	bhi.n	800e792 <UART_SetConfig+0x216>
 800e748:	a201      	add	r2, pc, #4	@ (adr r2, 800e750 <UART_SetConfig+0x1d4>)
 800e74a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e74e:	bf00      	nop
 800e750:	0800e775 	.word	0x0800e775
 800e754:	0800e793 	.word	0x0800e793
 800e758:	0800e77d 	.word	0x0800e77d
 800e75c:	0800e793 	.word	0x0800e793
 800e760:	0800e783 	.word	0x0800e783
 800e764:	0800e793 	.word	0x0800e793
 800e768:	0800e793 	.word	0x0800e793
 800e76c:	0800e793 	.word	0x0800e793
 800e770:	0800e78b 	.word	0x0800e78b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e774:	f7fe fbc0 	bl	800cef8 <HAL_RCC_GetPCLK1Freq>
 800e778:	61f8      	str	r0, [r7, #28]
        break;
 800e77a:	e010      	b.n	800e79e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e77c:	4b44      	ldr	r3, [pc, #272]	@ (800e890 <UART_SetConfig+0x314>)
 800e77e:	61fb      	str	r3, [r7, #28]
        break;
 800e780:	e00d      	b.n	800e79e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e782:	f7fe fb21 	bl	800cdc8 <HAL_RCC_GetSysClockFreq>
 800e786:	61f8      	str	r0, [r7, #28]
        break;
 800e788:	e009      	b.n	800e79e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e78a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e78e:	61fb      	str	r3, [r7, #28]
        break;
 800e790:	e005      	b.n	800e79e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800e792:	2300      	movs	r3, #0
 800e794:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e796:	2301      	movs	r3, #1
 800e798:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800e79c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e79e:	69fb      	ldr	r3, [r7, #28]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	f000 8107 	beq.w	800e9b4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	685a      	ldr	r2, [r3, #4]
 800e7aa:	4613      	mov	r3, r2
 800e7ac:	005b      	lsls	r3, r3, #1
 800e7ae:	4413      	add	r3, r2
 800e7b0:	69fa      	ldr	r2, [r7, #28]
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	d305      	bcc.n	800e7c2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	685b      	ldr	r3, [r3, #4]
 800e7ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e7bc:	69fa      	ldr	r2, [r7, #28]
 800e7be:	429a      	cmp	r2, r3
 800e7c0:	d903      	bls.n	800e7ca <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800e7c2:	2301      	movs	r3, #1
 800e7c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800e7c8:	e0f4      	b.n	800e9b4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800e7ca:	69fb      	ldr	r3, [r7, #28]
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	461c      	mov	r4, r3
 800e7d0:	4615      	mov	r5, r2
 800e7d2:	f04f 0200 	mov.w	r2, #0
 800e7d6:	f04f 0300 	mov.w	r3, #0
 800e7da:	022b      	lsls	r3, r5, #8
 800e7dc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800e7e0:	0222      	lsls	r2, r4, #8
 800e7e2:	68f9      	ldr	r1, [r7, #12]
 800e7e4:	6849      	ldr	r1, [r1, #4]
 800e7e6:	0849      	lsrs	r1, r1, #1
 800e7e8:	2000      	movs	r0, #0
 800e7ea:	4688      	mov	r8, r1
 800e7ec:	4681      	mov	r9, r0
 800e7ee:	eb12 0a08 	adds.w	sl, r2, r8
 800e7f2:	eb43 0b09 	adc.w	fp, r3, r9
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	685b      	ldr	r3, [r3, #4]
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	603b      	str	r3, [r7, #0]
 800e7fe:	607a      	str	r2, [r7, #4]
 800e800:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e804:	4650      	mov	r0, sl
 800e806:	4659      	mov	r1, fp
 800e808:	f7f2 fa50 	bl	8000cac <__aeabi_uldivmod>
 800e80c:	4602      	mov	r2, r0
 800e80e:	460b      	mov	r3, r1
 800e810:	4613      	mov	r3, r2
 800e812:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e814:	69bb      	ldr	r3, [r7, #24]
 800e816:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e81a:	d308      	bcc.n	800e82e <UART_SetConfig+0x2b2>
 800e81c:	69bb      	ldr	r3, [r7, #24]
 800e81e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e822:	d204      	bcs.n	800e82e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	69ba      	ldr	r2, [r7, #24]
 800e82a:	60da      	str	r2, [r3, #12]
 800e82c:	e0c2      	b.n	800e9b4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800e82e:	2301      	movs	r3, #1
 800e830:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800e834:	e0be      	b.n	800e9b4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	69db      	ldr	r3, [r3, #28]
 800e83a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e83e:	d16a      	bne.n	800e916 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800e840:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e844:	2b08      	cmp	r3, #8
 800e846:	d834      	bhi.n	800e8b2 <UART_SetConfig+0x336>
 800e848:	a201      	add	r2, pc, #4	@ (adr r2, 800e850 <UART_SetConfig+0x2d4>)
 800e84a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e84e:	bf00      	nop
 800e850:	0800e875 	.word	0x0800e875
 800e854:	0800e895 	.word	0x0800e895
 800e858:	0800e89d 	.word	0x0800e89d
 800e85c:	0800e8b3 	.word	0x0800e8b3
 800e860:	0800e8a3 	.word	0x0800e8a3
 800e864:	0800e8b3 	.word	0x0800e8b3
 800e868:	0800e8b3 	.word	0x0800e8b3
 800e86c:	0800e8b3 	.word	0x0800e8b3
 800e870:	0800e8ab 	.word	0x0800e8ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e874:	f7fe fb40 	bl	800cef8 <HAL_RCC_GetPCLK1Freq>
 800e878:	61f8      	str	r0, [r7, #28]
        break;
 800e87a:	e020      	b.n	800e8be <UART_SetConfig+0x342>
 800e87c:	efff69f3 	.word	0xefff69f3
 800e880:	40008000 	.word	0x40008000
 800e884:	40013800 	.word	0x40013800
 800e888:	40021000 	.word	0x40021000
 800e88c:	40004400 	.word	0x40004400
 800e890:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e894:	f7fe fb46 	bl	800cf24 <HAL_RCC_GetPCLK2Freq>
 800e898:	61f8      	str	r0, [r7, #28]
        break;
 800e89a:	e010      	b.n	800e8be <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e89c:	4b4c      	ldr	r3, [pc, #304]	@ (800e9d0 <UART_SetConfig+0x454>)
 800e89e:	61fb      	str	r3, [r7, #28]
        break;
 800e8a0:	e00d      	b.n	800e8be <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e8a2:	f7fe fa91 	bl	800cdc8 <HAL_RCC_GetSysClockFreq>
 800e8a6:	61f8      	str	r0, [r7, #28]
        break;
 800e8a8:	e009      	b.n	800e8be <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e8aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e8ae:	61fb      	str	r3, [r7, #28]
        break;
 800e8b0:	e005      	b.n	800e8be <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e8b6:	2301      	movs	r3, #1
 800e8b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800e8bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e8be:	69fb      	ldr	r3, [r7, #28]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d077      	beq.n	800e9b4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e8c4:	69fb      	ldr	r3, [r7, #28]
 800e8c6:	005a      	lsls	r2, r3, #1
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	685b      	ldr	r3, [r3, #4]
 800e8cc:	085b      	lsrs	r3, r3, #1
 800e8ce:	441a      	add	r2, r3
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	685b      	ldr	r3, [r3, #4]
 800e8d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8d8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e8da:	69bb      	ldr	r3, [r7, #24]
 800e8dc:	2b0f      	cmp	r3, #15
 800e8de:	d916      	bls.n	800e90e <UART_SetConfig+0x392>
 800e8e0:	69bb      	ldr	r3, [r7, #24]
 800e8e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e8e6:	d212      	bcs.n	800e90e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e8e8:	69bb      	ldr	r3, [r7, #24]
 800e8ea:	b29b      	uxth	r3, r3
 800e8ec:	f023 030f 	bic.w	r3, r3, #15
 800e8f0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e8f2:	69bb      	ldr	r3, [r7, #24]
 800e8f4:	085b      	lsrs	r3, r3, #1
 800e8f6:	b29b      	uxth	r3, r3
 800e8f8:	f003 0307 	and.w	r3, r3, #7
 800e8fc:	b29a      	uxth	r2, r3
 800e8fe:	8afb      	ldrh	r3, [r7, #22]
 800e900:	4313      	orrs	r3, r2
 800e902:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	8afa      	ldrh	r2, [r7, #22]
 800e90a:	60da      	str	r2, [r3, #12]
 800e90c:	e052      	b.n	800e9b4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800e90e:	2301      	movs	r3, #1
 800e910:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800e914:	e04e      	b.n	800e9b4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e916:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e91a:	2b08      	cmp	r3, #8
 800e91c:	d827      	bhi.n	800e96e <UART_SetConfig+0x3f2>
 800e91e:	a201      	add	r2, pc, #4	@ (adr r2, 800e924 <UART_SetConfig+0x3a8>)
 800e920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e924:	0800e949 	.word	0x0800e949
 800e928:	0800e951 	.word	0x0800e951
 800e92c:	0800e959 	.word	0x0800e959
 800e930:	0800e96f 	.word	0x0800e96f
 800e934:	0800e95f 	.word	0x0800e95f
 800e938:	0800e96f 	.word	0x0800e96f
 800e93c:	0800e96f 	.word	0x0800e96f
 800e940:	0800e96f 	.word	0x0800e96f
 800e944:	0800e967 	.word	0x0800e967
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e948:	f7fe fad6 	bl	800cef8 <HAL_RCC_GetPCLK1Freq>
 800e94c:	61f8      	str	r0, [r7, #28]
        break;
 800e94e:	e014      	b.n	800e97a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e950:	f7fe fae8 	bl	800cf24 <HAL_RCC_GetPCLK2Freq>
 800e954:	61f8      	str	r0, [r7, #28]
        break;
 800e956:	e010      	b.n	800e97a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e958:	4b1d      	ldr	r3, [pc, #116]	@ (800e9d0 <UART_SetConfig+0x454>)
 800e95a:	61fb      	str	r3, [r7, #28]
        break;
 800e95c:	e00d      	b.n	800e97a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e95e:	f7fe fa33 	bl	800cdc8 <HAL_RCC_GetSysClockFreq>
 800e962:	61f8      	str	r0, [r7, #28]
        break;
 800e964:	e009      	b.n	800e97a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e966:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e96a:	61fb      	str	r3, [r7, #28]
        break;
 800e96c:	e005      	b.n	800e97a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800e96e:	2300      	movs	r3, #0
 800e970:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e972:	2301      	movs	r3, #1
 800e974:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800e978:	bf00      	nop
    }

    if (pclk != 0U)
 800e97a:	69fb      	ldr	r3, [r7, #28]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d019      	beq.n	800e9b4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	685b      	ldr	r3, [r3, #4]
 800e984:	085a      	lsrs	r2, r3, #1
 800e986:	69fb      	ldr	r3, [r7, #28]
 800e988:	441a      	add	r2, r3
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	685b      	ldr	r3, [r3, #4]
 800e98e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e992:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e994:	69bb      	ldr	r3, [r7, #24]
 800e996:	2b0f      	cmp	r3, #15
 800e998:	d909      	bls.n	800e9ae <UART_SetConfig+0x432>
 800e99a:	69bb      	ldr	r3, [r7, #24]
 800e99c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e9a0:	d205      	bcs.n	800e9ae <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e9a2:	69bb      	ldr	r3, [r7, #24]
 800e9a4:	b29a      	uxth	r2, r3
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	60da      	str	r2, [r3, #12]
 800e9ac:	e002      	b.n	800e9b4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	2200      	movs	r2, #0
 800e9be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800e9c0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	3728      	adds	r7, #40	@ 0x28
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e9ce:	bf00      	nop
 800e9d0:	00f42400 	.word	0x00f42400

0800e9d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b083      	sub	sp, #12
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9e0:	f003 0308 	and.w	r3, r3, #8
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d00a      	beq.n	800e9fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	685b      	ldr	r3, [r3, #4]
 800e9ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	430a      	orrs	r2, r1
 800e9fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea02:	f003 0301 	and.w	r3, r3, #1
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d00a      	beq.n	800ea20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	685b      	ldr	r3, [r3, #4]
 800ea10:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	430a      	orrs	r2, r1
 800ea1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea24:	f003 0302 	and.w	r3, r3, #2
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d00a      	beq.n	800ea42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	685b      	ldr	r3, [r3, #4]
 800ea32:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	430a      	orrs	r2, r1
 800ea40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea46:	f003 0304 	and.w	r3, r3, #4
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d00a      	beq.n	800ea64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	685b      	ldr	r3, [r3, #4]
 800ea54:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	430a      	orrs	r2, r1
 800ea62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea68:	f003 0310 	and.w	r3, r3, #16
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d00a      	beq.n	800ea86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	689b      	ldr	r3, [r3, #8]
 800ea76:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	430a      	orrs	r2, r1
 800ea84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea8a:	f003 0320 	and.w	r3, r3, #32
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d00a      	beq.n	800eaa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	689b      	ldr	r3, [r3, #8]
 800ea98:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	430a      	orrs	r2, r1
 800eaa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eaac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d01a      	beq.n	800eaea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	685b      	ldr	r3, [r3, #4]
 800eaba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	430a      	orrs	r2, r1
 800eac8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eace:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ead2:	d10a      	bne.n	800eaea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	685b      	ldr	r3, [r3, #4]
 800eada:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	430a      	orrs	r2, r1
 800eae8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eaee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d00a      	beq.n	800eb0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	685b      	ldr	r3, [r3, #4]
 800eafc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	430a      	orrs	r2, r1
 800eb0a:	605a      	str	r2, [r3, #4]
  }
}
 800eb0c:	bf00      	nop
 800eb0e:	370c      	adds	r7, #12
 800eb10:	46bd      	mov	sp, r7
 800eb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb16:	4770      	bx	lr

0800eb18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b098      	sub	sp, #96	@ 0x60
 800eb1c:	af02      	add	r7, sp, #8
 800eb1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2200      	movs	r2, #0
 800eb24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800eb28:	f7fa fe98 	bl	800985c <HAL_GetTick>
 800eb2c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	f003 0308 	and.w	r3, r3, #8
 800eb38:	2b08      	cmp	r3, #8
 800eb3a:	d12e      	bne.n	800eb9a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eb3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800eb40:	9300      	str	r3, [sp, #0]
 800eb42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb44:	2200      	movs	r2, #0
 800eb46:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800eb4a:	6878      	ldr	r0, [r7, #4]
 800eb4c:	f000 f88c 	bl	800ec68 <UART_WaitOnFlagUntilTimeout>
 800eb50:	4603      	mov	r3, r0
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d021      	beq.n	800eb9a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb5e:	e853 3f00 	ldrex	r3, [r3]
 800eb62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800eb64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eb6a:	653b      	str	r3, [r7, #80]	@ 0x50
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	461a      	mov	r2, r3
 800eb72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eb74:	647b      	str	r3, [r7, #68]	@ 0x44
 800eb76:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800eb7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eb7c:	e841 2300 	strex	r3, r2, [r1]
 800eb80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800eb82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d1e6      	bne.n	800eb56 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2220      	movs	r2, #32
 800eb8c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	2200      	movs	r2, #0
 800eb92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eb96:	2303      	movs	r3, #3
 800eb98:	e062      	b.n	800ec60 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	f003 0304 	and.w	r3, r3, #4
 800eba4:	2b04      	cmp	r3, #4
 800eba6:	d149      	bne.n	800ec3c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eba8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ebac:	9300      	str	r3, [sp, #0]
 800ebae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ebb6:	6878      	ldr	r0, [r7, #4]
 800ebb8:	f000 f856 	bl	800ec68 <UART_WaitOnFlagUntilTimeout>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d03c      	beq.n	800ec3c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebca:	e853 3f00 	ldrex	r3, [r3]
 800ebce:	623b      	str	r3, [r7, #32]
   return(result);
 800ebd0:	6a3b      	ldr	r3, [r7, #32]
 800ebd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ebd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	461a      	mov	r2, r3
 800ebde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ebe0:	633b      	str	r3, [r7, #48]	@ 0x30
 800ebe2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebe4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ebe6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ebe8:	e841 2300 	strex	r3, r2, [r1]
 800ebec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ebee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d1e6      	bne.n	800ebc2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	3308      	adds	r3, #8
 800ebfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebfc:	693b      	ldr	r3, [r7, #16]
 800ebfe:	e853 3f00 	ldrex	r3, [r3]
 800ec02:	60fb      	str	r3, [r7, #12]
   return(result);
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	f023 0301 	bic.w	r3, r3, #1
 800ec0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	3308      	adds	r3, #8
 800ec12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ec14:	61fa      	str	r2, [r7, #28]
 800ec16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec18:	69b9      	ldr	r1, [r7, #24]
 800ec1a:	69fa      	ldr	r2, [r7, #28]
 800ec1c:	e841 2300 	strex	r3, r2, [r1]
 800ec20:	617b      	str	r3, [r7, #20]
   return(result);
 800ec22:	697b      	ldr	r3, [r7, #20]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d1e5      	bne.n	800ebf4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2220      	movs	r2, #32
 800ec2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2200      	movs	r2, #0
 800ec34:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ec38:	2303      	movs	r3, #3
 800ec3a:	e011      	b.n	800ec60 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2220      	movs	r2, #32
 800ec40:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	2220      	movs	r2, #32
 800ec46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2200      	movs	r2, #0
 800ec54:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2200      	movs	r2, #0
 800ec5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800ec5e:	2300      	movs	r3, #0
}
 800ec60:	4618      	mov	r0, r3
 800ec62:	3758      	adds	r7, #88	@ 0x58
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}

0800ec68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b084      	sub	sp, #16
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	60f8      	str	r0, [r7, #12]
 800ec70:	60b9      	str	r1, [r7, #8]
 800ec72:	603b      	str	r3, [r7, #0]
 800ec74:	4613      	mov	r3, r2
 800ec76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ec78:	e04f      	b.n	800ed1a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ec7a:	69bb      	ldr	r3, [r7, #24]
 800ec7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ec80:	d04b      	beq.n	800ed1a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ec82:	f7fa fdeb 	bl	800985c <HAL_GetTick>
 800ec86:	4602      	mov	r2, r0
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	1ad3      	subs	r3, r2, r3
 800ec8c:	69ba      	ldr	r2, [r7, #24]
 800ec8e:	429a      	cmp	r2, r3
 800ec90:	d302      	bcc.n	800ec98 <UART_WaitOnFlagUntilTimeout+0x30>
 800ec92:	69bb      	ldr	r3, [r7, #24]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d101      	bne.n	800ec9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ec98:	2303      	movs	r3, #3
 800ec9a:	e04e      	b.n	800ed3a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	f003 0304 	and.w	r3, r3, #4
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d037      	beq.n	800ed1a <UART_WaitOnFlagUntilTimeout+0xb2>
 800ecaa:	68bb      	ldr	r3, [r7, #8]
 800ecac:	2b80      	cmp	r3, #128	@ 0x80
 800ecae:	d034      	beq.n	800ed1a <UART_WaitOnFlagUntilTimeout+0xb2>
 800ecb0:	68bb      	ldr	r3, [r7, #8]
 800ecb2:	2b40      	cmp	r3, #64	@ 0x40
 800ecb4:	d031      	beq.n	800ed1a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	69db      	ldr	r3, [r3, #28]
 800ecbc:	f003 0308 	and.w	r3, r3, #8
 800ecc0:	2b08      	cmp	r3, #8
 800ecc2:	d110      	bne.n	800ece6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	2208      	movs	r2, #8
 800ecca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800eccc:	68f8      	ldr	r0, [r7, #12]
 800ecce:	f000 f838 	bl	800ed42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	2208      	movs	r2, #8
 800ecd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	2200      	movs	r2, #0
 800ecde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800ece2:	2301      	movs	r3, #1
 800ece4:	e029      	b.n	800ed3a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	69db      	ldr	r3, [r3, #28]
 800ecec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ecf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ecf4:	d111      	bne.n	800ed1a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ecfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ed00:	68f8      	ldr	r0, [r7, #12]
 800ed02:	f000 f81e 	bl	800ed42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	2220      	movs	r2, #32
 800ed0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	2200      	movs	r2, #0
 800ed12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800ed16:	2303      	movs	r3, #3
 800ed18:	e00f      	b.n	800ed3a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	69da      	ldr	r2, [r3, #28]
 800ed20:	68bb      	ldr	r3, [r7, #8]
 800ed22:	4013      	ands	r3, r2
 800ed24:	68ba      	ldr	r2, [r7, #8]
 800ed26:	429a      	cmp	r2, r3
 800ed28:	bf0c      	ite	eq
 800ed2a:	2301      	moveq	r3, #1
 800ed2c:	2300      	movne	r3, #0
 800ed2e:	b2db      	uxtb	r3, r3
 800ed30:	461a      	mov	r2, r3
 800ed32:	79fb      	ldrb	r3, [r7, #7]
 800ed34:	429a      	cmp	r2, r3
 800ed36:	d0a0      	beq.n	800ec7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ed38:	2300      	movs	r3, #0
}
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	3710      	adds	r7, #16
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}

0800ed42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ed42:	b480      	push	{r7}
 800ed44:	b095      	sub	sp, #84	@ 0x54
 800ed46:	af00      	add	r7, sp, #0
 800ed48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed52:	e853 3f00 	ldrex	r3, [r3]
 800ed56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ed58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ed5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	461a      	mov	r2, r3
 800ed66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed68:	643b      	str	r3, [r7, #64]	@ 0x40
 800ed6a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ed6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ed70:	e841 2300 	strex	r3, r2, [r1]
 800ed74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ed76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d1e6      	bne.n	800ed4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	3308      	adds	r3, #8
 800ed82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed84:	6a3b      	ldr	r3, [r7, #32]
 800ed86:	e853 3f00 	ldrex	r3, [r3]
 800ed8a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ed8c:	69fb      	ldr	r3, [r7, #28]
 800ed8e:	f023 0301 	bic.w	r3, r3, #1
 800ed92:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	3308      	adds	r3, #8
 800ed9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ed9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ed9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eda0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eda2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eda4:	e841 2300 	strex	r3, r2, [r1]
 800eda8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800edaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edac:	2b00      	cmp	r3, #0
 800edae:	d1e5      	bne.n	800ed7c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800edb4:	2b01      	cmp	r3, #1
 800edb6:	d118      	bne.n	800edea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	e853 3f00 	ldrex	r3, [r3]
 800edc4:	60bb      	str	r3, [r7, #8]
   return(result);
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	f023 0310 	bic.w	r3, r3, #16
 800edcc:	647b      	str	r3, [r7, #68]	@ 0x44
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	461a      	mov	r2, r3
 800edd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800edd6:	61bb      	str	r3, [r7, #24]
 800edd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edda:	6979      	ldr	r1, [r7, #20]
 800eddc:	69ba      	ldr	r2, [r7, #24]
 800edde:	e841 2300 	strex	r3, r2, [r1]
 800ede2:	613b      	str	r3, [r7, #16]
   return(result);
 800ede4:	693b      	ldr	r3, [r7, #16]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d1e6      	bne.n	800edb8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2220      	movs	r2, #32
 800edee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	2200      	movs	r2, #0
 800edf6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	2200      	movs	r2, #0
 800edfc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800edfe:	bf00      	nop
 800ee00:	3754      	adds	r7, #84	@ 0x54
 800ee02:	46bd      	mov	sp, r7
 800ee04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee08:	4770      	bx	lr
	...

0800ee0c <__assert_func>:
 800ee0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ee0e:	4614      	mov	r4, r2
 800ee10:	461a      	mov	r2, r3
 800ee12:	4b09      	ldr	r3, [pc, #36]	@ (800ee38 <__assert_func+0x2c>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	4605      	mov	r5, r0
 800ee18:	68d8      	ldr	r0, [r3, #12]
 800ee1a:	b954      	cbnz	r4, 800ee32 <__assert_func+0x26>
 800ee1c:	4b07      	ldr	r3, [pc, #28]	@ (800ee3c <__assert_func+0x30>)
 800ee1e:	461c      	mov	r4, r3
 800ee20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ee24:	9100      	str	r1, [sp, #0]
 800ee26:	462b      	mov	r3, r5
 800ee28:	4905      	ldr	r1, [pc, #20]	@ (800ee40 <__assert_func+0x34>)
 800ee2a:	f000 f8b1 	bl	800ef90 <fiprintf>
 800ee2e:	f000 f94f 	bl	800f0d0 <abort>
 800ee32:	4b04      	ldr	r3, [pc, #16]	@ (800ee44 <__assert_func+0x38>)
 800ee34:	e7f4      	b.n	800ee20 <__assert_func+0x14>
 800ee36:	bf00      	nop
 800ee38:	20000074 	.word	0x20000074
 800ee3c:	08012e37 	.word	0x08012e37
 800ee40:	08012e09 	.word	0x08012e09
 800ee44:	08012dfc 	.word	0x08012dfc

0800ee48 <std>:
 800ee48:	2300      	movs	r3, #0
 800ee4a:	b510      	push	{r4, lr}
 800ee4c:	4604      	mov	r4, r0
 800ee4e:	e9c0 3300 	strd	r3, r3, [r0]
 800ee52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ee56:	6083      	str	r3, [r0, #8]
 800ee58:	8181      	strh	r1, [r0, #12]
 800ee5a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ee5c:	81c2      	strh	r2, [r0, #14]
 800ee5e:	6183      	str	r3, [r0, #24]
 800ee60:	4619      	mov	r1, r3
 800ee62:	2208      	movs	r2, #8
 800ee64:	305c      	adds	r0, #92	@ 0x5c
 800ee66:	f000 f8c3 	bl	800eff0 <memset>
 800ee6a:	4b0d      	ldr	r3, [pc, #52]	@ (800eea0 <std+0x58>)
 800ee6c:	6263      	str	r3, [r4, #36]	@ 0x24
 800ee6e:	4b0d      	ldr	r3, [pc, #52]	@ (800eea4 <std+0x5c>)
 800ee70:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ee72:	4b0d      	ldr	r3, [pc, #52]	@ (800eea8 <std+0x60>)
 800ee74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ee76:	4b0d      	ldr	r3, [pc, #52]	@ (800eeac <std+0x64>)
 800ee78:	6323      	str	r3, [r4, #48]	@ 0x30
 800ee7a:	4b0d      	ldr	r3, [pc, #52]	@ (800eeb0 <std+0x68>)
 800ee7c:	6224      	str	r4, [r4, #32]
 800ee7e:	429c      	cmp	r4, r3
 800ee80:	d006      	beq.n	800ee90 <std+0x48>
 800ee82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ee86:	4294      	cmp	r4, r2
 800ee88:	d002      	beq.n	800ee90 <std+0x48>
 800ee8a:	33d0      	adds	r3, #208	@ 0xd0
 800ee8c:	429c      	cmp	r4, r3
 800ee8e:	d105      	bne.n	800ee9c <std+0x54>
 800ee90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ee94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee98:	f000 b8dc 	b.w	800f054 <__retarget_lock_init_recursive>
 800ee9c:	bd10      	pop	{r4, pc}
 800ee9e:	bf00      	nop
 800eea0:	0800f931 	.word	0x0800f931
 800eea4:	0800f953 	.word	0x0800f953
 800eea8:	0800f98b 	.word	0x0800f98b
 800eeac:	0800f9af 	.word	0x0800f9af
 800eeb0:	200006f8 	.word	0x200006f8

0800eeb4 <stdio_exit_handler>:
 800eeb4:	4a02      	ldr	r2, [pc, #8]	@ (800eec0 <stdio_exit_handler+0xc>)
 800eeb6:	4903      	ldr	r1, [pc, #12]	@ (800eec4 <stdio_exit_handler+0x10>)
 800eeb8:	4803      	ldr	r0, [pc, #12]	@ (800eec8 <stdio_exit_handler+0x14>)
 800eeba:	f000 b87b 	b.w	800efb4 <_fwalk_sglue>
 800eebe:	bf00      	nop
 800eec0:	20000068 	.word	0x20000068
 800eec4:	0800f8c9 	.word	0x0800f8c9
 800eec8:	20000078 	.word	0x20000078

0800eecc <cleanup_stdio>:
 800eecc:	6841      	ldr	r1, [r0, #4]
 800eece:	4b0c      	ldr	r3, [pc, #48]	@ (800ef00 <cleanup_stdio+0x34>)
 800eed0:	4299      	cmp	r1, r3
 800eed2:	b510      	push	{r4, lr}
 800eed4:	4604      	mov	r4, r0
 800eed6:	d001      	beq.n	800eedc <cleanup_stdio+0x10>
 800eed8:	f000 fcf6 	bl	800f8c8 <_fflush_r>
 800eedc:	68a1      	ldr	r1, [r4, #8]
 800eede:	4b09      	ldr	r3, [pc, #36]	@ (800ef04 <cleanup_stdio+0x38>)
 800eee0:	4299      	cmp	r1, r3
 800eee2:	d002      	beq.n	800eeea <cleanup_stdio+0x1e>
 800eee4:	4620      	mov	r0, r4
 800eee6:	f000 fcef 	bl	800f8c8 <_fflush_r>
 800eeea:	68e1      	ldr	r1, [r4, #12]
 800eeec:	4b06      	ldr	r3, [pc, #24]	@ (800ef08 <cleanup_stdio+0x3c>)
 800eeee:	4299      	cmp	r1, r3
 800eef0:	d004      	beq.n	800eefc <cleanup_stdio+0x30>
 800eef2:	4620      	mov	r0, r4
 800eef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eef8:	f000 bce6 	b.w	800f8c8 <_fflush_r>
 800eefc:	bd10      	pop	{r4, pc}
 800eefe:	bf00      	nop
 800ef00:	200006f8 	.word	0x200006f8
 800ef04:	20000760 	.word	0x20000760
 800ef08:	200007c8 	.word	0x200007c8

0800ef0c <global_stdio_init.part.0>:
 800ef0c:	b510      	push	{r4, lr}
 800ef0e:	4b0b      	ldr	r3, [pc, #44]	@ (800ef3c <global_stdio_init.part.0+0x30>)
 800ef10:	4c0b      	ldr	r4, [pc, #44]	@ (800ef40 <global_stdio_init.part.0+0x34>)
 800ef12:	4a0c      	ldr	r2, [pc, #48]	@ (800ef44 <global_stdio_init.part.0+0x38>)
 800ef14:	601a      	str	r2, [r3, #0]
 800ef16:	4620      	mov	r0, r4
 800ef18:	2200      	movs	r2, #0
 800ef1a:	2104      	movs	r1, #4
 800ef1c:	f7ff ff94 	bl	800ee48 <std>
 800ef20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ef24:	2201      	movs	r2, #1
 800ef26:	2109      	movs	r1, #9
 800ef28:	f7ff ff8e 	bl	800ee48 <std>
 800ef2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ef30:	2202      	movs	r2, #2
 800ef32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef36:	2112      	movs	r1, #18
 800ef38:	f7ff bf86 	b.w	800ee48 <std>
 800ef3c:	20000830 	.word	0x20000830
 800ef40:	200006f8 	.word	0x200006f8
 800ef44:	0800eeb5 	.word	0x0800eeb5

0800ef48 <__sfp_lock_acquire>:
 800ef48:	4801      	ldr	r0, [pc, #4]	@ (800ef50 <__sfp_lock_acquire+0x8>)
 800ef4a:	f000 b884 	b.w	800f056 <__retarget_lock_acquire_recursive>
 800ef4e:	bf00      	nop
 800ef50:	20000835 	.word	0x20000835

0800ef54 <__sfp_lock_release>:
 800ef54:	4801      	ldr	r0, [pc, #4]	@ (800ef5c <__sfp_lock_release+0x8>)
 800ef56:	f000 b87f 	b.w	800f058 <__retarget_lock_release_recursive>
 800ef5a:	bf00      	nop
 800ef5c:	20000835 	.word	0x20000835

0800ef60 <__sinit>:
 800ef60:	b510      	push	{r4, lr}
 800ef62:	4604      	mov	r4, r0
 800ef64:	f7ff fff0 	bl	800ef48 <__sfp_lock_acquire>
 800ef68:	6a23      	ldr	r3, [r4, #32]
 800ef6a:	b11b      	cbz	r3, 800ef74 <__sinit+0x14>
 800ef6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef70:	f7ff bff0 	b.w	800ef54 <__sfp_lock_release>
 800ef74:	4b04      	ldr	r3, [pc, #16]	@ (800ef88 <__sinit+0x28>)
 800ef76:	6223      	str	r3, [r4, #32]
 800ef78:	4b04      	ldr	r3, [pc, #16]	@ (800ef8c <__sinit+0x2c>)
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d1f5      	bne.n	800ef6c <__sinit+0xc>
 800ef80:	f7ff ffc4 	bl	800ef0c <global_stdio_init.part.0>
 800ef84:	e7f2      	b.n	800ef6c <__sinit+0xc>
 800ef86:	bf00      	nop
 800ef88:	0800eecd 	.word	0x0800eecd
 800ef8c:	20000830 	.word	0x20000830

0800ef90 <fiprintf>:
 800ef90:	b40e      	push	{r1, r2, r3}
 800ef92:	b503      	push	{r0, r1, lr}
 800ef94:	4601      	mov	r1, r0
 800ef96:	ab03      	add	r3, sp, #12
 800ef98:	4805      	ldr	r0, [pc, #20]	@ (800efb0 <fiprintf+0x20>)
 800ef9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef9e:	6800      	ldr	r0, [r0, #0]
 800efa0:	9301      	str	r3, [sp, #4]
 800efa2:	f000 f8c5 	bl	800f130 <_vfiprintf_r>
 800efa6:	b002      	add	sp, #8
 800efa8:	f85d eb04 	ldr.w	lr, [sp], #4
 800efac:	b003      	add	sp, #12
 800efae:	4770      	bx	lr
 800efb0:	20000074 	.word	0x20000074

0800efb4 <_fwalk_sglue>:
 800efb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efb8:	4607      	mov	r7, r0
 800efba:	4688      	mov	r8, r1
 800efbc:	4614      	mov	r4, r2
 800efbe:	2600      	movs	r6, #0
 800efc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800efc4:	f1b9 0901 	subs.w	r9, r9, #1
 800efc8:	d505      	bpl.n	800efd6 <_fwalk_sglue+0x22>
 800efca:	6824      	ldr	r4, [r4, #0]
 800efcc:	2c00      	cmp	r4, #0
 800efce:	d1f7      	bne.n	800efc0 <_fwalk_sglue+0xc>
 800efd0:	4630      	mov	r0, r6
 800efd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efd6:	89ab      	ldrh	r3, [r5, #12]
 800efd8:	2b01      	cmp	r3, #1
 800efda:	d907      	bls.n	800efec <_fwalk_sglue+0x38>
 800efdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800efe0:	3301      	adds	r3, #1
 800efe2:	d003      	beq.n	800efec <_fwalk_sglue+0x38>
 800efe4:	4629      	mov	r1, r5
 800efe6:	4638      	mov	r0, r7
 800efe8:	47c0      	blx	r8
 800efea:	4306      	orrs	r6, r0
 800efec:	3568      	adds	r5, #104	@ 0x68
 800efee:	e7e9      	b.n	800efc4 <_fwalk_sglue+0x10>

0800eff0 <memset>:
 800eff0:	4402      	add	r2, r0
 800eff2:	4603      	mov	r3, r0
 800eff4:	4293      	cmp	r3, r2
 800eff6:	d100      	bne.n	800effa <memset+0xa>
 800eff8:	4770      	bx	lr
 800effa:	f803 1b01 	strb.w	r1, [r3], #1
 800effe:	e7f9      	b.n	800eff4 <memset+0x4>

0800f000 <__errno>:
 800f000:	4b01      	ldr	r3, [pc, #4]	@ (800f008 <__errno+0x8>)
 800f002:	6818      	ldr	r0, [r3, #0]
 800f004:	4770      	bx	lr
 800f006:	bf00      	nop
 800f008:	20000074 	.word	0x20000074

0800f00c <__libc_init_array>:
 800f00c:	b570      	push	{r4, r5, r6, lr}
 800f00e:	4d0d      	ldr	r5, [pc, #52]	@ (800f044 <__libc_init_array+0x38>)
 800f010:	4c0d      	ldr	r4, [pc, #52]	@ (800f048 <__libc_init_array+0x3c>)
 800f012:	1b64      	subs	r4, r4, r5
 800f014:	10a4      	asrs	r4, r4, #2
 800f016:	2600      	movs	r6, #0
 800f018:	42a6      	cmp	r6, r4
 800f01a:	d109      	bne.n	800f030 <__libc_init_array+0x24>
 800f01c:	4d0b      	ldr	r5, [pc, #44]	@ (800f04c <__libc_init_array+0x40>)
 800f01e:	4c0c      	ldr	r4, [pc, #48]	@ (800f050 <__libc_init_array+0x44>)
 800f020:	f002 fa0c 	bl	801143c <_init>
 800f024:	1b64      	subs	r4, r4, r5
 800f026:	10a4      	asrs	r4, r4, #2
 800f028:	2600      	movs	r6, #0
 800f02a:	42a6      	cmp	r6, r4
 800f02c:	d105      	bne.n	800f03a <__libc_init_array+0x2e>
 800f02e:	bd70      	pop	{r4, r5, r6, pc}
 800f030:	f855 3b04 	ldr.w	r3, [r5], #4
 800f034:	4798      	blx	r3
 800f036:	3601      	adds	r6, #1
 800f038:	e7ee      	b.n	800f018 <__libc_init_array+0xc>
 800f03a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f03e:	4798      	blx	r3
 800f040:	3601      	adds	r6, #1
 800f042:	e7f2      	b.n	800f02a <__libc_init_array+0x1e>
 800f044:	08013058 	.word	0x08013058
 800f048:	08013058 	.word	0x08013058
 800f04c:	08013058 	.word	0x08013058
 800f050:	0801305c 	.word	0x0801305c

0800f054 <__retarget_lock_init_recursive>:
 800f054:	4770      	bx	lr

0800f056 <__retarget_lock_acquire_recursive>:
 800f056:	4770      	bx	lr

0800f058 <__retarget_lock_release_recursive>:
 800f058:	4770      	bx	lr
	...

0800f05c <gcvt>:
 800f05c:	b530      	push	{r4, r5, lr}
 800f05e:	ed2d 8b02 	vpush	{d8}
 800f062:	eeb0 8a40 	vmov.f32	s16, s0
 800f066:	eef0 8a60 	vmov.f32	s17, s1
 800f06a:	460c      	mov	r4, r1
 800f06c:	2200      	movs	r2, #0
 800f06e:	b083      	sub	sp, #12
 800f070:	4605      	mov	r5, r0
 800f072:	2300      	movs	r3, #0
 800f074:	ec51 0b10 	vmov	r0, r1, d0
 800f078:	f7f1 fd28 	bl	8000acc <__aeabi_dcmplt>
 800f07c:	4622      	mov	r2, r4
 800f07e:	b118      	cbz	r0, 800f088 <gcvt+0x2c>
 800f080:	232d      	movs	r3, #45	@ 0x2d
 800f082:	f802 3b01 	strb.w	r3, [r2], #1
 800f086:	3d01      	subs	r5, #1
 800f088:	2300      	movs	r3, #0
 800f08a:	4809      	ldr	r0, [pc, #36]	@ (800f0b0 <gcvt+0x54>)
 800f08c:	9300      	str	r3, [sp, #0]
 800f08e:	4629      	mov	r1, r5
 800f090:	2367      	movs	r3, #103	@ 0x67
 800f092:	eeb0 0a48 	vmov.f32	s0, s16
 800f096:	eef0 0a68 	vmov.f32	s1, s17
 800f09a:	6800      	ldr	r0, [r0, #0]
 800f09c:	f000 feb0 	bl	800fe00 <_gcvt>
 800f0a0:	2800      	cmp	r0, #0
 800f0a2:	bf18      	it	ne
 800f0a4:	4620      	movne	r0, r4
 800f0a6:	b003      	add	sp, #12
 800f0a8:	ecbd 8b02 	vpop	{d8}
 800f0ac:	bd30      	pop	{r4, r5, pc}
 800f0ae:	bf00      	nop
 800f0b0:	20000074 	.word	0x20000074

0800f0b4 <memcpy>:
 800f0b4:	440a      	add	r2, r1
 800f0b6:	4291      	cmp	r1, r2
 800f0b8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800f0bc:	d100      	bne.n	800f0c0 <memcpy+0xc>
 800f0be:	4770      	bx	lr
 800f0c0:	b510      	push	{r4, lr}
 800f0c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f0c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f0ca:	4291      	cmp	r1, r2
 800f0cc:	d1f9      	bne.n	800f0c2 <memcpy+0xe>
 800f0ce:	bd10      	pop	{r4, pc}

0800f0d0 <abort>:
 800f0d0:	b508      	push	{r3, lr}
 800f0d2:	2006      	movs	r0, #6
 800f0d4:	f000 fdd2 	bl	800fc7c <raise>
 800f0d8:	2001      	movs	r0, #1
 800f0da:	f7fa f933 	bl	8009344 <_exit>

0800f0de <__sfputc_r>:
 800f0de:	6893      	ldr	r3, [r2, #8]
 800f0e0:	3b01      	subs	r3, #1
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	b410      	push	{r4}
 800f0e6:	6093      	str	r3, [r2, #8]
 800f0e8:	da08      	bge.n	800f0fc <__sfputc_r+0x1e>
 800f0ea:	6994      	ldr	r4, [r2, #24]
 800f0ec:	42a3      	cmp	r3, r4
 800f0ee:	db01      	blt.n	800f0f4 <__sfputc_r+0x16>
 800f0f0:	290a      	cmp	r1, #10
 800f0f2:	d103      	bne.n	800f0fc <__sfputc_r+0x1e>
 800f0f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f0f8:	f000 bc5d 	b.w	800f9b6 <__swbuf_r>
 800f0fc:	6813      	ldr	r3, [r2, #0]
 800f0fe:	1c58      	adds	r0, r3, #1
 800f100:	6010      	str	r0, [r2, #0]
 800f102:	7019      	strb	r1, [r3, #0]
 800f104:	4608      	mov	r0, r1
 800f106:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f10a:	4770      	bx	lr

0800f10c <__sfputs_r>:
 800f10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f10e:	4606      	mov	r6, r0
 800f110:	460f      	mov	r7, r1
 800f112:	4614      	mov	r4, r2
 800f114:	18d5      	adds	r5, r2, r3
 800f116:	42ac      	cmp	r4, r5
 800f118:	d101      	bne.n	800f11e <__sfputs_r+0x12>
 800f11a:	2000      	movs	r0, #0
 800f11c:	e007      	b.n	800f12e <__sfputs_r+0x22>
 800f11e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f122:	463a      	mov	r2, r7
 800f124:	4630      	mov	r0, r6
 800f126:	f7ff ffda 	bl	800f0de <__sfputc_r>
 800f12a:	1c43      	adds	r3, r0, #1
 800f12c:	d1f3      	bne.n	800f116 <__sfputs_r+0xa>
 800f12e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f130 <_vfiprintf_r>:
 800f130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f134:	460d      	mov	r5, r1
 800f136:	b09d      	sub	sp, #116	@ 0x74
 800f138:	4614      	mov	r4, r2
 800f13a:	4698      	mov	r8, r3
 800f13c:	4606      	mov	r6, r0
 800f13e:	b118      	cbz	r0, 800f148 <_vfiprintf_r+0x18>
 800f140:	6a03      	ldr	r3, [r0, #32]
 800f142:	b90b      	cbnz	r3, 800f148 <_vfiprintf_r+0x18>
 800f144:	f7ff ff0c 	bl	800ef60 <__sinit>
 800f148:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f14a:	07d9      	lsls	r1, r3, #31
 800f14c:	d405      	bmi.n	800f15a <_vfiprintf_r+0x2a>
 800f14e:	89ab      	ldrh	r3, [r5, #12]
 800f150:	059a      	lsls	r2, r3, #22
 800f152:	d402      	bmi.n	800f15a <_vfiprintf_r+0x2a>
 800f154:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f156:	f7ff ff7e 	bl	800f056 <__retarget_lock_acquire_recursive>
 800f15a:	89ab      	ldrh	r3, [r5, #12]
 800f15c:	071b      	lsls	r3, r3, #28
 800f15e:	d501      	bpl.n	800f164 <_vfiprintf_r+0x34>
 800f160:	692b      	ldr	r3, [r5, #16]
 800f162:	b99b      	cbnz	r3, 800f18c <_vfiprintf_r+0x5c>
 800f164:	4629      	mov	r1, r5
 800f166:	4630      	mov	r0, r6
 800f168:	f000 fc64 	bl	800fa34 <__swsetup_r>
 800f16c:	b170      	cbz	r0, 800f18c <_vfiprintf_r+0x5c>
 800f16e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f170:	07dc      	lsls	r4, r3, #31
 800f172:	d504      	bpl.n	800f17e <_vfiprintf_r+0x4e>
 800f174:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f178:	b01d      	add	sp, #116	@ 0x74
 800f17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f17e:	89ab      	ldrh	r3, [r5, #12]
 800f180:	0598      	lsls	r0, r3, #22
 800f182:	d4f7      	bmi.n	800f174 <_vfiprintf_r+0x44>
 800f184:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f186:	f7ff ff67 	bl	800f058 <__retarget_lock_release_recursive>
 800f18a:	e7f3      	b.n	800f174 <_vfiprintf_r+0x44>
 800f18c:	2300      	movs	r3, #0
 800f18e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f190:	2320      	movs	r3, #32
 800f192:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f196:	f8cd 800c 	str.w	r8, [sp, #12]
 800f19a:	2330      	movs	r3, #48	@ 0x30
 800f19c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f34c <_vfiprintf_r+0x21c>
 800f1a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f1a4:	f04f 0901 	mov.w	r9, #1
 800f1a8:	4623      	mov	r3, r4
 800f1aa:	469a      	mov	sl, r3
 800f1ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1b0:	b10a      	cbz	r2, 800f1b6 <_vfiprintf_r+0x86>
 800f1b2:	2a25      	cmp	r2, #37	@ 0x25
 800f1b4:	d1f9      	bne.n	800f1aa <_vfiprintf_r+0x7a>
 800f1b6:	ebba 0b04 	subs.w	fp, sl, r4
 800f1ba:	d00b      	beq.n	800f1d4 <_vfiprintf_r+0xa4>
 800f1bc:	465b      	mov	r3, fp
 800f1be:	4622      	mov	r2, r4
 800f1c0:	4629      	mov	r1, r5
 800f1c2:	4630      	mov	r0, r6
 800f1c4:	f7ff ffa2 	bl	800f10c <__sfputs_r>
 800f1c8:	3001      	adds	r0, #1
 800f1ca:	f000 80a7 	beq.w	800f31c <_vfiprintf_r+0x1ec>
 800f1ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f1d0:	445a      	add	r2, fp
 800f1d2:	9209      	str	r2, [sp, #36]	@ 0x24
 800f1d4:	f89a 3000 	ldrb.w	r3, [sl]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	f000 809f 	beq.w	800f31c <_vfiprintf_r+0x1ec>
 800f1de:	2300      	movs	r3, #0
 800f1e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f1e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f1e8:	f10a 0a01 	add.w	sl, sl, #1
 800f1ec:	9304      	str	r3, [sp, #16]
 800f1ee:	9307      	str	r3, [sp, #28]
 800f1f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f1f4:	931a      	str	r3, [sp, #104]	@ 0x68
 800f1f6:	4654      	mov	r4, sl
 800f1f8:	2205      	movs	r2, #5
 800f1fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1fe:	4853      	ldr	r0, [pc, #332]	@ (800f34c <_vfiprintf_r+0x21c>)
 800f200:	f7f0 ffe6 	bl	80001d0 <memchr>
 800f204:	9a04      	ldr	r2, [sp, #16]
 800f206:	b9d8      	cbnz	r0, 800f240 <_vfiprintf_r+0x110>
 800f208:	06d1      	lsls	r1, r2, #27
 800f20a:	bf44      	itt	mi
 800f20c:	2320      	movmi	r3, #32
 800f20e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f212:	0713      	lsls	r3, r2, #28
 800f214:	bf44      	itt	mi
 800f216:	232b      	movmi	r3, #43	@ 0x2b
 800f218:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f21c:	f89a 3000 	ldrb.w	r3, [sl]
 800f220:	2b2a      	cmp	r3, #42	@ 0x2a
 800f222:	d015      	beq.n	800f250 <_vfiprintf_r+0x120>
 800f224:	9a07      	ldr	r2, [sp, #28]
 800f226:	4654      	mov	r4, sl
 800f228:	2000      	movs	r0, #0
 800f22a:	f04f 0c0a 	mov.w	ip, #10
 800f22e:	4621      	mov	r1, r4
 800f230:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f234:	3b30      	subs	r3, #48	@ 0x30
 800f236:	2b09      	cmp	r3, #9
 800f238:	d94b      	bls.n	800f2d2 <_vfiprintf_r+0x1a2>
 800f23a:	b1b0      	cbz	r0, 800f26a <_vfiprintf_r+0x13a>
 800f23c:	9207      	str	r2, [sp, #28]
 800f23e:	e014      	b.n	800f26a <_vfiprintf_r+0x13a>
 800f240:	eba0 0308 	sub.w	r3, r0, r8
 800f244:	fa09 f303 	lsl.w	r3, r9, r3
 800f248:	4313      	orrs	r3, r2
 800f24a:	9304      	str	r3, [sp, #16]
 800f24c:	46a2      	mov	sl, r4
 800f24e:	e7d2      	b.n	800f1f6 <_vfiprintf_r+0xc6>
 800f250:	9b03      	ldr	r3, [sp, #12]
 800f252:	1d19      	adds	r1, r3, #4
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	9103      	str	r1, [sp, #12]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	bfbb      	ittet	lt
 800f25c:	425b      	neglt	r3, r3
 800f25e:	f042 0202 	orrlt.w	r2, r2, #2
 800f262:	9307      	strge	r3, [sp, #28]
 800f264:	9307      	strlt	r3, [sp, #28]
 800f266:	bfb8      	it	lt
 800f268:	9204      	strlt	r2, [sp, #16]
 800f26a:	7823      	ldrb	r3, [r4, #0]
 800f26c:	2b2e      	cmp	r3, #46	@ 0x2e
 800f26e:	d10a      	bne.n	800f286 <_vfiprintf_r+0x156>
 800f270:	7863      	ldrb	r3, [r4, #1]
 800f272:	2b2a      	cmp	r3, #42	@ 0x2a
 800f274:	d132      	bne.n	800f2dc <_vfiprintf_r+0x1ac>
 800f276:	9b03      	ldr	r3, [sp, #12]
 800f278:	1d1a      	adds	r2, r3, #4
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	9203      	str	r2, [sp, #12]
 800f27e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f282:	3402      	adds	r4, #2
 800f284:	9305      	str	r3, [sp, #20]
 800f286:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f35c <_vfiprintf_r+0x22c>
 800f28a:	7821      	ldrb	r1, [r4, #0]
 800f28c:	2203      	movs	r2, #3
 800f28e:	4650      	mov	r0, sl
 800f290:	f7f0 ff9e 	bl	80001d0 <memchr>
 800f294:	b138      	cbz	r0, 800f2a6 <_vfiprintf_r+0x176>
 800f296:	9b04      	ldr	r3, [sp, #16]
 800f298:	eba0 000a 	sub.w	r0, r0, sl
 800f29c:	2240      	movs	r2, #64	@ 0x40
 800f29e:	4082      	lsls	r2, r0
 800f2a0:	4313      	orrs	r3, r2
 800f2a2:	3401      	adds	r4, #1
 800f2a4:	9304      	str	r3, [sp, #16]
 800f2a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2aa:	4829      	ldr	r0, [pc, #164]	@ (800f350 <_vfiprintf_r+0x220>)
 800f2ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f2b0:	2206      	movs	r2, #6
 800f2b2:	f7f0 ff8d 	bl	80001d0 <memchr>
 800f2b6:	2800      	cmp	r0, #0
 800f2b8:	d03f      	beq.n	800f33a <_vfiprintf_r+0x20a>
 800f2ba:	4b26      	ldr	r3, [pc, #152]	@ (800f354 <_vfiprintf_r+0x224>)
 800f2bc:	bb1b      	cbnz	r3, 800f306 <_vfiprintf_r+0x1d6>
 800f2be:	9b03      	ldr	r3, [sp, #12]
 800f2c0:	3307      	adds	r3, #7
 800f2c2:	f023 0307 	bic.w	r3, r3, #7
 800f2c6:	3308      	adds	r3, #8
 800f2c8:	9303      	str	r3, [sp, #12]
 800f2ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2cc:	443b      	add	r3, r7
 800f2ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800f2d0:	e76a      	b.n	800f1a8 <_vfiprintf_r+0x78>
 800f2d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f2d6:	460c      	mov	r4, r1
 800f2d8:	2001      	movs	r0, #1
 800f2da:	e7a8      	b.n	800f22e <_vfiprintf_r+0xfe>
 800f2dc:	2300      	movs	r3, #0
 800f2de:	3401      	adds	r4, #1
 800f2e0:	9305      	str	r3, [sp, #20]
 800f2e2:	4619      	mov	r1, r3
 800f2e4:	f04f 0c0a 	mov.w	ip, #10
 800f2e8:	4620      	mov	r0, r4
 800f2ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2ee:	3a30      	subs	r2, #48	@ 0x30
 800f2f0:	2a09      	cmp	r2, #9
 800f2f2:	d903      	bls.n	800f2fc <_vfiprintf_r+0x1cc>
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d0c6      	beq.n	800f286 <_vfiprintf_r+0x156>
 800f2f8:	9105      	str	r1, [sp, #20]
 800f2fa:	e7c4      	b.n	800f286 <_vfiprintf_r+0x156>
 800f2fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800f300:	4604      	mov	r4, r0
 800f302:	2301      	movs	r3, #1
 800f304:	e7f0      	b.n	800f2e8 <_vfiprintf_r+0x1b8>
 800f306:	ab03      	add	r3, sp, #12
 800f308:	9300      	str	r3, [sp, #0]
 800f30a:	462a      	mov	r2, r5
 800f30c:	4b12      	ldr	r3, [pc, #72]	@ (800f358 <_vfiprintf_r+0x228>)
 800f30e:	a904      	add	r1, sp, #16
 800f310:	4630      	mov	r0, r6
 800f312:	f3af 8000 	nop.w
 800f316:	4607      	mov	r7, r0
 800f318:	1c78      	adds	r0, r7, #1
 800f31a:	d1d6      	bne.n	800f2ca <_vfiprintf_r+0x19a>
 800f31c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f31e:	07d9      	lsls	r1, r3, #31
 800f320:	d405      	bmi.n	800f32e <_vfiprintf_r+0x1fe>
 800f322:	89ab      	ldrh	r3, [r5, #12]
 800f324:	059a      	lsls	r2, r3, #22
 800f326:	d402      	bmi.n	800f32e <_vfiprintf_r+0x1fe>
 800f328:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f32a:	f7ff fe95 	bl	800f058 <__retarget_lock_release_recursive>
 800f32e:	89ab      	ldrh	r3, [r5, #12]
 800f330:	065b      	lsls	r3, r3, #25
 800f332:	f53f af1f 	bmi.w	800f174 <_vfiprintf_r+0x44>
 800f336:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f338:	e71e      	b.n	800f178 <_vfiprintf_r+0x48>
 800f33a:	ab03      	add	r3, sp, #12
 800f33c:	9300      	str	r3, [sp, #0]
 800f33e:	462a      	mov	r2, r5
 800f340:	4b05      	ldr	r3, [pc, #20]	@ (800f358 <_vfiprintf_r+0x228>)
 800f342:	a904      	add	r1, sp, #16
 800f344:	4630      	mov	r0, r6
 800f346:	f000 f91b 	bl	800f580 <_printf_i>
 800f34a:	e7e4      	b.n	800f316 <_vfiprintf_r+0x1e6>
 800f34c:	08012e38 	.word	0x08012e38
 800f350:	08012e42 	.word	0x08012e42
 800f354:	00000000 	.word	0x00000000
 800f358:	0800f10d 	.word	0x0800f10d
 800f35c:	08012e3e 	.word	0x08012e3e

0800f360 <sbrk_aligned>:
 800f360:	b570      	push	{r4, r5, r6, lr}
 800f362:	4e0f      	ldr	r6, [pc, #60]	@ (800f3a0 <sbrk_aligned+0x40>)
 800f364:	460c      	mov	r4, r1
 800f366:	6831      	ldr	r1, [r6, #0]
 800f368:	4605      	mov	r5, r0
 800f36a:	b911      	cbnz	r1, 800f372 <sbrk_aligned+0x12>
 800f36c:	f000 fcb4 	bl	800fcd8 <_sbrk_r>
 800f370:	6030      	str	r0, [r6, #0]
 800f372:	4621      	mov	r1, r4
 800f374:	4628      	mov	r0, r5
 800f376:	f000 fcaf 	bl	800fcd8 <_sbrk_r>
 800f37a:	1c43      	adds	r3, r0, #1
 800f37c:	d103      	bne.n	800f386 <sbrk_aligned+0x26>
 800f37e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800f382:	4620      	mov	r0, r4
 800f384:	bd70      	pop	{r4, r5, r6, pc}
 800f386:	1cc4      	adds	r4, r0, #3
 800f388:	f024 0403 	bic.w	r4, r4, #3
 800f38c:	42a0      	cmp	r0, r4
 800f38e:	d0f8      	beq.n	800f382 <sbrk_aligned+0x22>
 800f390:	1a21      	subs	r1, r4, r0
 800f392:	4628      	mov	r0, r5
 800f394:	f000 fca0 	bl	800fcd8 <_sbrk_r>
 800f398:	3001      	adds	r0, #1
 800f39a:	d1f2      	bne.n	800f382 <sbrk_aligned+0x22>
 800f39c:	e7ef      	b.n	800f37e <sbrk_aligned+0x1e>
 800f39e:	bf00      	nop
 800f3a0:	20000838 	.word	0x20000838

0800f3a4 <_malloc_r>:
 800f3a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3a8:	1ccd      	adds	r5, r1, #3
 800f3aa:	f025 0503 	bic.w	r5, r5, #3
 800f3ae:	3508      	adds	r5, #8
 800f3b0:	2d0c      	cmp	r5, #12
 800f3b2:	bf38      	it	cc
 800f3b4:	250c      	movcc	r5, #12
 800f3b6:	2d00      	cmp	r5, #0
 800f3b8:	4606      	mov	r6, r0
 800f3ba:	db01      	blt.n	800f3c0 <_malloc_r+0x1c>
 800f3bc:	42a9      	cmp	r1, r5
 800f3be:	d904      	bls.n	800f3ca <_malloc_r+0x26>
 800f3c0:	230c      	movs	r3, #12
 800f3c2:	6033      	str	r3, [r6, #0]
 800f3c4:	2000      	movs	r0, #0
 800f3c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f4a0 <_malloc_r+0xfc>
 800f3ce:	f000 faa3 	bl	800f918 <__malloc_lock>
 800f3d2:	f8d8 3000 	ldr.w	r3, [r8]
 800f3d6:	461c      	mov	r4, r3
 800f3d8:	bb44      	cbnz	r4, 800f42c <_malloc_r+0x88>
 800f3da:	4629      	mov	r1, r5
 800f3dc:	4630      	mov	r0, r6
 800f3de:	f7ff ffbf 	bl	800f360 <sbrk_aligned>
 800f3e2:	1c43      	adds	r3, r0, #1
 800f3e4:	4604      	mov	r4, r0
 800f3e6:	d158      	bne.n	800f49a <_malloc_r+0xf6>
 800f3e8:	f8d8 4000 	ldr.w	r4, [r8]
 800f3ec:	4627      	mov	r7, r4
 800f3ee:	2f00      	cmp	r7, #0
 800f3f0:	d143      	bne.n	800f47a <_malloc_r+0xd6>
 800f3f2:	2c00      	cmp	r4, #0
 800f3f4:	d04b      	beq.n	800f48e <_malloc_r+0xea>
 800f3f6:	6823      	ldr	r3, [r4, #0]
 800f3f8:	4639      	mov	r1, r7
 800f3fa:	4630      	mov	r0, r6
 800f3fc:	eb04 0903 	add.w	r9, r4, r3
 800f400:	f000 fc6a 	bl	800fcd8 <_sbrk_r>
 800f404:	4581      	cmp	r9, r0
 800f406:	d142      	bne.n	800f48e <_malloc_r+0xea>
 800f408:	6821      	ldr	r1, [r4, #0]
 800f40a:	1a6d      	subs	r5, r5, r1
 800f40c:	4629      	mov	r1, r5
 800f40e:	4630      	mov	r0, r6
 800f410:	f7ff ffa6 	bl	800f360 <sbrk_aligned>
 800f414:	3001      	adds	r0, #1
 800f416:	d03a      	beq.n	800f48e <_malloc_r+0xea>
 800f418:	6823      	ldr	r3, [r4, #0]
 800f41a:	442b      	add	r3, r5
 800f41c:	6023      	str	r3, [r4, #0]
 800f41e:	f8d8 3000 	ldr.w	r3, [r8]
 800f422:	685a      	ldr	r2, [r3, #4]
 800f424:	bb62      	cbnz	r2, 800f480 <_malloc_r+0xdc>
 800f426:	f8c8 7000 	str.w	r7, [r8]
 800f42a:	e00f      	b.n	800f44c <_malloc_r+0xa8>
 800f42c:	6822      	ldr	r2, [r4, #0]
 800f42e:	1b52      	subs	r2, r2, r5
 800f430:	d420      	bmi.n	800f474 <_malloc_r+0xd0>
 800f432:	2a0b      	cmp	r2, #11
 800f434:	d917      	bls.n	800f466 <_malloc_r+0xc2>
 800f436:	1961      	adds	r1, r4, r5
 800f438:	42a3      	cmp	r3, r4
 800f43a:	6025      	str	r5, [r4, #0]
 800f43c:	bf18      	it	ne
 800f43e:	6059      	strne	r1, [r3, #4]
 800f440:	6863      	ldr	r3, [r4, #4]
 800f442:	bf08      	it	eq
 800f444:	f8c8 1000 	streq.w	r1, [r8]
 800f448:	5162      	str	r2, [r4, r5]
 800f44a:	604b      	str	r3, [r1, #4]
 800f44c:	4630      	mov	r0, r6
 800f44e:	f000 fa69 	bl	800f924 <__malloc_unlock>
 800f452:	f104 000b 	add.w	r0, r4, #11
 800f456:	1d23      	adds	r3, r4, #4
 800f458:	f020 0007 	bic.w	r0, r0, #7
 800f45c:	1ac2      	subs	r2, r0, r3
 800f45e:	bf1c      	itt	ne
 800f460:	1a1b      	subne	r3, r3, r0
 800f462:	50a3      	strne	r3, [r4, r2]
 800f464:	e7af      	b.n	800f3c6 <_malloc_r+0x22>
 800f466:	6862      	ldr	r2, [r4, #4]
 800f468:	42a3      	cmp	r3, r4
 800f46a:	bf0c      	ite	eq
 800f46c:	f8c8 2000 	streq.w	r2, [r8]
 800f470:	605a      	strne	r2, [r3, #4]
 800f472:	e7eb      	b.n	800f44c <_malloc_r+0xa8>
 800f474:	4623      	mov	r3, r4
 800f476:	6864      	ldr	r4, [r4, #4]
 800f478:	e7ae      	b.n	800f3d8 <_malloc_r+0x34>
 800f47a:	463c      	mov	r4, r7
 800f47c:	687f      	ldr	r7, [r7, #4]
 800f47e:	e7b6      	b.n	800f3ee <_malloc_r+0x4a>
 800f480:	461a      	mov	r2, r3
 800f482:	685b      	ldr	r3, [r3, #4]
 800f484:	42a3      	cmp	r3, r4
 800f486:	d1fb      	bne.n	800f480 <_malloc_r+0xdc>
 800f488:	2300      	movs	r3, #0
 800f48a:	6053      	str	r3, [r2, #4]
 800f48c:	e7de      	b.n	800f44c <_malloc_r+0xa8>
 800f48e:	230c      	movs	r3, #12
 800f490:	6033      	str	r3, [r6, #0]
 800f492:	4630      	mov	r0, r6
 800f494:	f000 fa46 	bl	800f924 <__malloc_unlock>
 800f498:	e794      	b.n	800f3c4 <_malloc_r+0x20>
 800f49a:	6005      	str	r5, [r0, #0]
 800f49c:	e7d6      	b.n	800f44c <_malloc_r+0xa8>
 800f49e:	bf00      	nop
 800f4a0:	2000083c 	.word	0x2000083c

0800f4a4 <_printf_common>:
 800f4a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4a8:	4616      	mov	r6, r2
 800f4aa:	4698      	mov	r8, r3
 800f4ac:	688a      	ldr	r2, [r1, #8]
 800f4ae:	690b      	ldr	r3, [r1, #16]
 800f4b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f4b4:	4293      	cmp	r3, r2
 800f4b6:	bfb8      	it	lt
 800f4b8:	4613      	movlt	r3, r2
 800f4ba:	6033      	str	r3, [r6, #0]
 800f4bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f4c0:	4607      	mov	r7, r0
 800f4c2:	460c      	mov	r4, r1
 800f4c4:	b10a      	cbz	r2, 800f4ca <_printf_common+0x26>
 800f4c6:	3301      	adds	r3, #1
 800f4c8:	6033      	str	r3, [r6, #0]
 800f4ca:	6823      	ldr	r3, [r4, #0]
 800f4cc:	0699      	lsls	r1, r3, #26
 800f4ce:	bf42      	ittt	mi
 800f4d0:	6833      	ldrmi	r3, [r6, #0]
 800f4d2:	3302      	addmi	r3, #2
 800f4d4:	6033      	strmi	r3, [r6, #0]
 800f4d6:	6825      	ldr	r5, [r4, #0]
 800f4d8:	f015 0506 	ands.w	r5, r5, #6
 800f4dc:	d106      	bne.n	800f4ec <_printf_common+0x48>
 800f4de:	f104 0a19 	add.w	sl, r4, #25
 800f4e2:	68e3      	ldr	r3, [r4, #12]
 800f4e4:	6832      	ldr	r2, [r6, #0]
 800f4e6:	1a9b      	subs	r3, r3, r2
 800f4e8:	42ab      	cmp	r3, r5
 800f4ea:	dc26      	bgt.n	800f53a <_printf_common+0x96>
 800f4ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f4f0:	6822      	ldr	r2, [r4, #0]
 800f4f2:	3b00      	subs	r3, #0
 800f4f4:	bf18      	it	ne
 800f4f6:	2301      	movne	r3, #1
 800f4f8:	0692      	lsls	r2, r2, #26
 800f4fa:	d42b      	bmi.n	800f554 <_printf_common+0xb0>
 800f4fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f500:	4641      	mov	r1, r8
 800f502:	4638      	mov	r0, r7
 800f504:	47c8      	blx	r9
 800f506:	3001      	adds	r0, #1
 800f508:	d01e      	beq.n	800f548 <_printf_common+0xa4>
 800f50a:	6823      	ldr	r3, [r4, #0]
 800f50c:	6922      	ldr	r2, [r4, #16]
 800f50e:	f003 0306 	and.w	r3, r3, #6
 800f512:	2b04      	cmp	r3, #4
 800f514:	bf02      	ittt	eq
 800f516:	68e5      	ldreq	r5, [r4, #12]
 800f518:	6833      	ldreq	r3, [r6, #0]
 800f51a:	1aed      	subeq	r5, r5, r3
 800f51c:	68a3      	ldr	r3, [r4, #8]
 800f51e:	bf0c      	ite	eq
 800f520:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f524:	2500      	movne	r5, #0
 800f526:	4293      	cmp	r3, r2
 800f528:	bfc4      	itt	gt
 800f52a:	1a9b      	subgt	r3, r3, r2
 800f52c:	18ed      	addgt	r5, r5, r3
 800f52e:	2600      	movs	r6, #0
 800f530:	341a      	adds	r4, #26
 800f532:	42b5      	cmp	r5, r6
 800f534:	d11a      	bne.n	800f56c <_printf_common+0xc8>
 800f536:	2000      	movs	r0, #0
 800f538:	e008      	b.n	800f54c <_printf_common+0xa8>
 800f53a:	2301      	movs	r3, #1
 800f53c:	4652      	mov	r2, sl
 800f53e:	4641      	mov	r1, r8
 800f540:	4638      	mov	r0, r7
 800f542:	47c8      	blx	r9
 800f544:	3001      	adds	r0, #1
 800f546:	d103      	bne.n	800f550 <_printf_common+0xac>
 800f548:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f54c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f550:	3501      	adds	r5, #1
 800f552:	e7c6      	b.n	800f4e2 <_printf_common+0x3e>
 800f554:	18e1      	adds	r1, r4, r3
 800f556:	1c5a      	adds	r2, r3, #1
 800f558:	2030      	movs	r0, #48	@ 0x30
 800f55a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f55e:	4422      	add	r2, r4
 800f560:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f564:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f568:	3302      	adds	r3, #2
 800f56a:	e7c7      	b.n	800f4fc <_printf_common+0x58>
 800f56c:	2301      	movs	r3, #1
 800f56e:	4622      	mov	r2, r4
 800f570:	4641      	mov	r1, r8
 800f572:	4638      	mov	r0, r7
 800f574:	47c8      	blx	r9
 800f576:	3001      	adds	r0, #1
 800f578:	d0e6      	beq.n	800f548 <_printf_common+0xa4>
 800f57a:	3601      	adds	r6, #1
 800f57c:	e7d9      	b.n	800f532 <_printf_common+0x8e>
	...

0800f580 <_printf_i>:
 800f580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f584:	7e0f      	ldrb	r7, [r1, #24]
 800f586:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f588:	2f78      	cmp	r7, #120	@ 0x78
 800f58a:	4691      	mov	r9, r2
 800f58c:	4680      	mov	r8, r0
 800f58e:	460c      	mov	r4, r1
 800f590:	469a      	mov	sl, r3
 800f592:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f596:	d807      	bhi.n	800f5a8 <_printf_i+0x28>
 800f598:	2f62      	cmp	r7, #98	@ 0x62
 800f59a:	d80a      	bhi.n	800f5b2 <_printf_i+0x32>
 800f59c:	2f00      	cmp	r7, #0
 800f59e:	f000 80d2 	beq.w	800f746 <_printf_i+0x1c6>
 800f5a2:	2f58      	cmp	r7, #88	@ 0x58
 800f5a4:	f000 80b9 	beq.w	800f71a <_printf_i+0x19a>
 800f5a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f5ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f5b0:	e03a      	b.n	800f628 <_printf_i+0xa8>
 800f5b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f5b6:	2b15      	cmp	r3, #21
 800f5b8:	d8f6      	bhi.n	800f5a8 <_printf_i+0x28>
 800f5ba:	a101      	add	r1, pc, #4	@ (adr r1, 800f5c0 <_printf_i+0x40>)
 800f5bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f5c0:	0800f619 	.word	0x0800f619
 800f5c4:	0800f62d 	.word	0x0800f62d
 800f5c8:	0800f5a9 	.word	0x0800f5a9
 800f5cc:	0800f5a9 	.word	0x0800f5a9
 800f5d0:	0800f5a9 	.word	0x0800f5a9
 800f5d4:	0800f5a9 	.word	0x0800f5a9
 800f5d8:	0800f62d 	.word	0x0800f62d
 800f5dc:	0800f5a9 	.word	0x0800f5a9
 800f5e0:	0800f5a9 	.word	0x0800f5a9
 800f5e4:	0800f5a9 	.word	0x0800f5a9
 800f5e8:	0800f5a9 	.word	0x0800f5a9
 800f5ec:	0800f72d 	.word	0x0800f72d
 800f5f0:	0800f657 	.word	0x0800f657
 800f5f4:	0800f6e7 	.word	0x0800f6e7
 800f5f8:	0800f5a9 	.word	0x0800f5a9
 800f5fc:	0800f5a9 	.word	0x0800f5a9
 800f600:	0800f74f 	.word	0x0800f74f
 800f604:	0800f5a9 	.word	0x0800f5a9
 800f608:	0800f657 	.word	0x0800f657
 800f60c:	0800f5a9 	.word	0x0800f5a9
 800f610:	0800f5a9 	.word	0x0800f5a9
 800f614:	0800f6ef 	.word	0x0800f6ef
 800f618:	6833      	ldr	r3, [r6, #0]
 800f61a:	1d1a      	adds	r2, r3, #4
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	6032      	str	r2, [r6, #0]
 800f620:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f624:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f628:	2301      	movs	r3, #1
 800f62a:	e09d      	b.n	800f768 <_printf_i+0x1e8>
 800f62c:	6833      	ldr	r3, [r6, #0]
 800f62e:	6820      	ldr	r0, [r4, #0]
 800f630:	1d19      	adds	r1, r3, #4
 800f632:	6031      	str	r1, [r6, #0]
 800f634:	0606      	lsls	r6, r0, #24
 800f636:	d501      	bpl.n	800f63c <_printf_i+0xbc>
 800f638:	681d      	ldr	r5, [r3, #0]
 800f63a:	e003      	b.n	800f644 <_printf_i+0xc4>
 800f63c:	0645      	lsls	r5, r0, #25
 800f63e:	d5fb      	bpl.n	800f638 <_printf_i+0xb8>
 800f640:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f644:	2d00      	cmp	r5, #0
 800f646:	da03      	bge.n	800f650 <_printf_i+0xd0>
 800f648:	232d      	movs	r3, #45	@ 0x2d
 800f64a:	426d      	negs	r5, r5
 800f64c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f650:	4859      	ldr	r0, [pc, #356]	@ (800f7b8 <_printf_i+0x238>)
 800f652:	230a      	movs	r3, #10
 800f654:	e011      	b.n	800f67a <_printf_i+0xfa>
 800f656:	6821      	ldr	r1, [r4, #0]
 800f658:	6833      	ldr	r3, [r6, #0]
 800f65a:	0608      	lsls	r0, r1, #24
 800f65c:	f853 5b04 	ldr.w	r5, [r3], #4
 800f660:	d402      	bmi.n	800f668 <_printf_i+0xe8>
 800f662:	0649      	lsls	r1, r1, #25
 800f664:	bf48      	it	mi
 800f666:	b2ad      	uxthmi	r5, r5
 800f668:	2f6f      	cmp	r7, #111	@ 0x6f
 800f66a:	4853      	ldr	r0, [pc, #332]	@ (800f7b8 <_printf_i+0x238>)
 800f66c:	6033      	str	r3, [r6, #0]
 800f66e:	bf14      	ite	ne
 800f670:	230a      	movne	r3, #10
 800f672:	2308      	moveq	r3, #8
 800f674:	2100      	movs	r1, #0
 800f676:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f67a:	6866      	ldr	r6, [r4, #4]
 800f67c:	60a6      	str	r6, [r4, #8]
 800f67e:	2e00      	cmp	r6, #0
 800f680:	bfa2      	ittt	ge
 800f682:	6821      	ldrge	r1, [r4, #0]
 800f684:	f021 0104 	bicge.w	r1, r1, #4
 800f688:	6021      	strge	r1, [r4, #0]
 800f68a:	b90d      	cbnz	r5, 800f690 <_printf_i+0x110>
 800f68c:	2e00      	cmp	r6, #0
 800f68e:	d04b      	beq.n	800f728 <_printf_i+0x1a8>
 800f690:	4616      	mov	r6, r2
 800f692:	fbb5 f1f3 	udiv	r1, r5, r3
 800f696:	fb03 5711 	mls	r7, r3, r1, r5
 800f69a:	5dc7      	ldrb	r7, [r0, r7]
 800f69c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f6a0:	462f      	mov	r7, r5
 800f6a2:	42bb      	cmp	r3, r7
 800f6a4:	460d      	mov	r5, r1
 800f6a6:	d9f4      	bls.n	800f692 <_printf_i+0x112>
 800f6a8:	2b08      	cmp	r3, #8
 800f6aa:	d10b      	bne.n	800f6c4 <_printf_i+0x144>
 800f6ac:	6823      	ldr	r3, [r4, #0]
 800f6ae:	07df      	lsls	r7, r3, #31
 800f6b0:	d508      	bpl.n	800f6c4 <_printf_i+0x144>
 800f6b2:	6923      	ldr	r3, [r4, #16]
 800f6b4:	6861      	ldr	r1, [r4, #4]
 800f6b6:	4299      	cmp	r1, r3
 800f6b8:	bfde      	ittt	le
 800f6ba:	2330      	movle	r3, #48	@ 0x30
 800f6bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f6c0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800f6c4:	1b92      	subs	r2, r2, r6
 800f6c6:	6122      	str	r2, [r4, #16]
 800f6c8:	f8cd a000 	str.w	sl, [sp]
 800f6cc:	464b      	mov	r3, r9
 800f6ce:	aa03      	add	r2, sp, #12
 800f6d0:	4621      	mov	r1, r4
 800f6d2:	4640      	mov	r0, r8
 800f6d4:	f7ff fee6 	bl	800f4a4 <_printf_common>
 800f6d8:	3001      	adds	r0, #1
 800f6da:	d14a      	bne.n	800f772 <_printf_i+0x1f2>
 800f6dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f6e0:	b004      	add	sp, #16
 800f6e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6e6:	6823      	ldr	r3, [r4, #0]
 800f6e8:	f043 0320 	orr.w	r3, r3, #32
 800f6ec:	6023      	str	r3, [r4, #0]
 800f6ee:	4833      	ldr	r0, [pc, #204]	@ (800f7bc <_printf_i+0x23c>)
 800f6f0:	2778      	movs	r7, #120	@ 0x78
 800f6f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f6f6:	6823      	ldr	r3, [r4, #0]
 800f6f8:	6831      	ldr	r1, [r6, #0]
 800f6fa:	061f      	lsls	r7, r3, #24
 800f6fc:	f851 5b04 	ldr.w	r5, [r1], #4
 800f700:	d402      	bmi.n	800f708 <_printf_i+0x188>
 800f702:	065f      	lsls	r7, r3, #25
 800f704:	bf48      	it	mi
 800f706:	b2ad      	uxthmi	r5, r5
 800f708:	6031      	str	r1, [r6, #0]
 800f70a:	07d9      	lsls	r1, r3, #31
 800f70c:	bf44      	itt	mi
 800f70e:	f043 0320 	orrmi.w	r3, r3, #32
 800f712:	6023      	strmi	r3, [r4, #0]
 800f714:	b11d      	cbz	r5, 800f71e <_printf_i+0x19e>
 800f716:	2310      	movs	r3, #16
 800f718:	e7ac      	b.n	800f674 <_printf_i+0xf4>
 800f71a:	4827      	ldr	r0, [pc, #156]	@ (800f7b8 <_printf_i+0x238>)
 800f71c:	e7e9      	b.n	800f6f2 <_printf_i+0x172>
 800f71e:	6823      	ldr	r3, [r4, #0]
 800f720:	f023 0320 	bic.w	r3, r3, #32
 800f724:	6023      	str	r3, [r4, #0]
 800f726:	e7f6      	b.n	800f716 <_printf_i+0x196>
 800f728:	4616      	mov	r6, r2
 800f72a:	e7bd      	b.n	800f6a8 <_printf_i+0x128>
 800f72c:	6833      	ldr	r3, [r6, #0]
 800f72e:	6825      	ldr	r5, [r4, #0]
 800f730:	6961      	ldr	r1, [r4, #20]
 800f732:	1d18      	adds	r0, r3, #4
 800f734:	6030      	str	r0, [r6, #0]
 800f736:	062e      	lsls	r6, r5, #24
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	d501      	bpl.n	800f740 <_printf_i+0x1c0>
 800f73c:	6019      	str	r1, [r3, #0]
 800f73e:	e002      	b.n	800f746 <_printf_i+0x1c6>
 800f740:	0668      	lsls	r0, r5, #25
 800f742:	d5fb      	bpl.n	800f73c <_printf_i+0x1bc>
 800f744:	8019      	strh	r1, [r3, #0]
 800f746:	2300      	movs	r3, #0
 800f748:	6123      	str	r3, [r4, #16]
 800f74a:	4616      	mov	r6, r2
 800f74c:	e7bc      	b.n	800f6c8 <_printf_i+0x148>
 800f74e:	6833      	ldr	r3, [r6, #0]
 800f750:	1d1a      	adds	r2, r3, #4
 800f752:	6032      	str	r2, [r6, #0]
 800f754:	681e      	ldr	r6, [r3, #0]
 800f756:	6862      	ldr	r2, [r4, #4]
 800f758:	2100      	movs	r1, #0
 800f75a:	4630      	mov	r0, r6
 800f75c:	f7f0 fd38 	bl	80001d0 <memchr>
 800f760:	b108      	cbz	r0, 800f766 <_printf_i+0x1e6>
 800f762:	1b80      	subs	r0, r0, r6
 800f764:	6060      	str	r0, [r4, #4]
 800f766:	6863      	ldr	r3, [r4, #4]
 800f768:	6123      	str	r3, [r4, #16]
 800f76a:	2300      	movs	r3, #0
 800f76c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f770:	e7aa      	b.n	800f6c8 <_printf_i+0x148>
 800f772:	6923      	ldr	r3, [r4, #16]
 800f774:	4632      	mov	r2, r6
 800f776:	4649      	mov	r1, r9
 800f778:	4640      	mov	r0, r8
 800f77a:	47d0      	blx	sl
 800f77c:	3001      	adds	r0, #1
 800f77e:	d0ad      	beq.n	800f6dc <_printf_i+0x15c>
 800f780:	6823      	ldr	r3, [r4, #0]
 800f782:	079b      	lsls	r3, r3, #30
 800f784:	d413      	bmi.n	800f7ae <_printf_i+0x22e>
 800f786:	68e0      	ldr	r0, [r4, #12]
 800f788:	9b03      	ldr	r3, [sp, #12]
 800f78a:	4298      	cmp	r0, r3
 800f78c:	bfb8      	it	lt
 800f78e:	4618      	movlt	r0, r3
 800f790:	e7a6      	b.n	800f6e0 <_printf_i+0x160>
 800f792:	2301      	movs	r3, #1
 800f794:	4632      	mov	r2, r6
 800f796:	4649      	mov	r1, r9
 800f798:	4640      	mov	r0, r8
 800f79a:	47d0      	blx	sl
 800f79c:	3001      	adds	r0, #1
 800f79e:	d09d      	beq.n	800f6dc <_printf_i+0x15c>
 800f7a0:	3501      	adds	r5, #1
 800f7a2:	68e3      	ldr	r3, [r4, #12]
 800f7a4:	9903      	ldr	r1, [sp, #12]
 800f7a6:	1a5b      	subs	r3, r3, r1
 800f7a8:	42ab      	cmp	r3, r5
 800f7aa:	dcf2      	bgt.n	800f792 <_printf_i+0x212>
 800f7ac:	e7eb      	b.n	800f786 <_printf_i+0x206>
 800f7ae:	2500      	movs	r5, #0
 800f7b0:	f104 0619 	add.w	r6, r4, #25
 800f7b4:	e7f5      	b.n	800f7a2 <_printf_i+0x222>
 800f7b6:	bf00      	nop
 800f7b8:	08012e49 	.word	0x08012e49
 800f7bc:	08012e5a 	.word	0x08012e5a

0800f7c0 <__sflush_r>:
 800f7c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7c8:	0716      	lsls	r6, r2, #28
 800f7ca:	4605      	mov	r5, r0
 800f7cc:	460c      	mov	r4, r1
 800f7ce:	d454      	bmi.n	800f87a <__sflush_r+0xba>
 800f7d0:	684b      	ldr	r3, [r1, #4]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	dc02      	bgt.n	800f7dc <__sflush_r+0x1c>
 800f7d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	dd48      	ble.n	800f86e <__sflush_r+0xae>
 800f7dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f7de:	2e00      	cmp	r6, #0
 800f7e0:	d045      	beq.n	800f86e <__sflush_r+0xae>
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f7e8:	682f      	ldr	r7, [r5, #0]
 800f7ea:	6a21      	ldr	r1, [r4, #32]
 800f7ec:	602b      	str	r3, [r5, #0]
 800f7ee:	d030      	beq.n	800f852 <__sflush_r+0x92>
 800f7f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f7f2:	89a3      	ldrh	r3, [r4, #12]
 800f7f4:	0759      	lsls	r1, r3, #29
 800f7f6:	d505      	bpl.n	800f804 <__sflush_r+0x44>
 800f7f8:	6863      	ldr	r3, [r4, #4]
 800f7fa:	1ad2      	subs	r2, r2, r3
 800f7fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f7fe:	b10b      	cbz	r3, 800f804 <__sflush_r+0x44>
 800f800:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f802:	1ad2      	subs	r2, r2, r3
 800f804:	2300      	movs	r3, #0
 800f806:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f808:	6a21      	ldr	r1, [r4, #32]
 800f80a:	4628      	mov	r0, r5
 800f80c:	47b0      	blx	r6
 800f80e:	1c43      	adds	r3, r0, #1
 800f810:	89a3      	ldrh	r3, [r4, #12]
 800f812:	d106      	bne.n	800f822 <__sflush_r+0x62>
 800f814:	6829      	ldr	r1, [r5, #0]
 800f816:	291d      	cmp	r1, #29
 800f818:	d82b      	bhi.n	800f872 <__sflush_r+0xb2>
 800f81a:	4a2a      	ldr	r2, [pc, #168]	@ (800f8c4 <__sflush_r+0x104>)
 800f81c:	410a      	asrs	r2, r1
 800f81e:	07d6      	lsls	r6, r2, #31
 800f820:	d427      	bmi.n	800f872 <__sflush_r+0xb2>
 800f822:	2200      	movs	r2, #0
 800f824:	6062      	str	r2, [r4, #4]
 800f826:	04d9      	lsls	r1, r3, #19
 800f828:	6922      	ldr	r2, [r4, #16]
 800f82a:	6022      	str	r2, [r4, #0]
 800f82c:	d504      	bpl.n	800f838 <__sflush_r+0x78>
 800f82e:	1c42      	adds	r2, r0, #1
 800f830:	d101      	bne.n	800f836 <__sflush_r+0x76>
 800f832:	682b      	ldr	r3, [r5, #0]
 800f834:	b903      	cbnz	r3, 800f838 <__sflush_r+0x78>
 800f836:	6560      	str	r0, [r4, #84]	@ 0x54
 800f838:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f83a:	602f      	str	r7, [r5, #0]
 800f83c:	b1b9      	cbz	r1, 800f86e <__sflush_r+0xae>
 800f83e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f842:	4299      	cmp	r1, r3
 800f844:	d002      	beq.n	800f84c <__sflush_r+0x8c>
 800f846:	4628      	mov	r0, r5
 800f848:	f001 f9f2 	bl	8010c30 <_free_r>
 800f84c:	2300      	movs	r3, #0
 800f84e:	6363      	str	r3, [r4, #52]	@ 0x34
 800f850:	e00d      	b.n	800f86e <__sflush_r+0xae>
 800f852:	2301      	movs	r3, #1
 800f854:	4628      	mov	r0, r5
 800f856:	47b0      	blx	r6
 800f858:	4602      	mov	r2, r0
 800f85a:	1c50      	adds	r0, r2, #1
 800f85c:	d1c9      	bne.n	800f7f2 <__sflush_r+0x32>
 800f85e:	682b      	ldr	r3, [r5, #0]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d0c6      	beq.n	800f7f2 <__sflush_r+0x32>
 800f864:	2b1d      	cmp	r3, #29
 800f866:	d001      	beq.n	800f86c <__sflush_r+0xac>
 800f868:	2b16      	cmp	r3, #22
 800f86a:	d11e      	bne.n	800f8aa <__sflush_r+0xea>
 800f86c:	602f      	str	r7, [r5, #0]
 800f86e:	2000      	movs	r0, #0
 800f870:	e022      	b.n	800f8b8 <__sflush_r+0xf8>
 800f872:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f876:	b21b      	sxth	r3, r3
 800f878:	e01b      	b.n	800f8b2 <__sflush_r+0xf2>
 800f87a:	690f      	ldr	r7, [r1, #16]
 800f87c:	2f00      	cmp	r7, #0
 800f87e:	d0f6      	beq.n	800f86e <__sflush_r+0xae>
 800f880:	0793      	lsls	r3, r2, #30
 800f882:	680e      	ldr	r6, [r1, #0]
 800f884:	bf08      	it	eq
 800f886:	694b      	ldreq	r3, [r1, #20]
 800f888:	600f      	str	r7, [r1, #0]
 800f88a:	bf18      	it	ne
 800f88c:	2300      	movne	r3, #0
 800f88e:	eba6 0807 	sub.w	r8, r6, r7
 800f892:	608b      	str	r3, [r1, #8]
 800f894:	f1b8 0f00 	cmp.w	r8, #0
 800f898:	dde9      	ble.n	800f86e <__sflush_r+0xae>
 800f89a:	6a21      	ldr	r1, [r4, #32]
 800f89c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f89e:	4643      	mov	r3, r8
 800f8a0:	463a      	mov	r2, r7
 800f8a2:	4628      	mov	r0, r5
 800f8a4:	47b0      	blx	r6
 800f8a6:	2800      	cmp	r0, #0
 800f8a8:	dc08      	bgt.n	800f8bc <__sflush_r+0xfc>
 800f8aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f8b2:	81a3      	strh	r3, [r4, #12]
 800f8b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8bc:	4407      	add	r7, r0
 800f8be:	eba8 0800 	sub.w	r8, r8, r0
 800f8c2:	e7e7      	b.n	800f894 <__sflush_r+0xd4>
 800f8c4:	dfbffffe 	.word	0xdfbffffe

0800f8c8 <_fflush_r>:
 800f8c8:	b538      	push	{r3, r4, r5, lr}
 800f8ca:	690b      	ldr	r3, [r1, #16]
 800f8cc:	4605      	mov	r5, r0
 800f8ce:	460c      	mov	r4, r1
 800f8d0:	b913      	cbnz	r3, 800f8d8 <_fflush_r+0x10>
 800f8d2:	2500      	movs	r5, #0
 800f8d4:	4628      	mov	r0, r5
 800f8d6:	bd38      	pop	{r3, r4, r5, pc}
 800f8d8:	b118      	cbz	r0, 800f8e2 <_fflush_r+0x1a>
 800f8da:	6a03      	ldr	r3, [r0, #32]
 800f8dc:	b90b      	cbnz	r3, 800f8e2 <_fflush_r+0x1a>
 800f8de:	f7ff fb3f 	bl	800ef60 <__sinit>
 800f8e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d0f3      	beq.n	800f8d2 <_fflush_r+0xa>
 800f8ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f8ec:	07d0      	lsls	r0, r2, #31
 800f8ee:	d404      	bmi.n	800f8fa <_fflush_r+0x32>
 800f8f0:	0599      	lsls	r1, r3, #22
 800f8f2:	d402      	bmi.n	800f8fa <_fflush_r+0x32>
 800f8f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f8f6:	f7ff fbae 	bl	800f056 <__retarget_lock_acquire_recursive>
 800f8fa:	4628      	mov	r0, r5
 800f8fc:	4621      	mov	r1, r4
 800f8fe:	f7ff ff5f 	bl	800f7c0 <__sflush_r>
 800f902:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f904:	07da      	lsls	r2, r3, #31
 800f906:	4605      	mov	r5, r0
 800f908:	d4e4      	bmi.n	800f8d4 <_fflush_r+0xc>
 800f90a:	89a3      	ldrh	r3, [r4, #12]
 800f90c:	059b      	lsls	r3, r3, #22
 800f90e:	d4e1      	bmi.n	800f8d4 <_fflush_r+0xc>
 800f910:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f912:	f7ff fba1 	bl	800f058 <__retarget_lock_release_recursive>
 800f916:	e7dd      	b.n	800f8d4 <_fflush_r+0xc>

0800f918 <__malloc_lock>:
 800f918:	4801      	ldr	r0, [pc, #4]	@ (800f920 <__malloc_lock+0x8>)
 800f91a:	f7ff bb9c 	b.w	800f056 <__retarget_lock_acquire_recursive>
 800f91e:	bf00      	nop
 800f920:	20000834 	.word	0x20000834

0800f924 <__malloc_unlock>:
 800f924:	4801      	ldr	r0, [pc, #4]	@ (800f92c <__malloc_unlock+0x8>)
 800f926:	f7ff bb97 	b.w	800f058 <__retarget_lock_release_recursive>
 800f92a:	bf00      	nop
 800f92c:	20000834 	.word	0x20000834

0800f930 <__sread>:
 800f930:	b510      	push	{r4, lr}
 800f932:	460c      	mov	r4, r1
 800f934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f938:	f000 f9a8 	bl	800fc8c <_read_r>
 800f93c:	2800      	cmp	r0, #0
 800f93e:	bfab      	itete	ge
 800f940:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f942:	89a3      	ldrhlt	r3, [r4, #12]
 800f944:	181b      	addge	r3, r3, r0
 800f946:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f94a:	bfac      	ite	ge
 800f94c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f94e:	81a3      	strhlt	r3, [r4, #12]
 800f950:	bd10      	pop	{r4, pc}

0800f952 <__swrite>:
 800f952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f956:	461f      	mov	r7, r3
 800f958:	898b      	ldrh	r3, [r1, #12]
 800f95a:	05db      	lsls	r3, r3, #23
 800f95c:	4605      	mov	r5, r0
 800f95e:	460c      	mov	r4, r1
 800f960:	4616      	mov	r6, r2
 800f962:	d505      	bpl.n	800f970 <__swrite+0x1e>
 800f964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f968:	2302      	movs	r3, #2
 800f96a:	2200      	movs	r2, #0
 800f96c:	f000 f94c 	bl	800fc08 <_lseek_r>
 800f970:	89a3      	ldrh	r3, [r4, #12]
 800f972:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f976:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f97a:	81a3      	strh	r3, [r4, #12]
 800f97c:	4632      	mov	r2, r6
 800f97e:	463b      	mov	r3, r7
 800f980:	4628      	mov	r0, r5
 800f982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f986:	f000 b9b7 	b.w	800fcf8 <_write_r>

0800f98a <__sseek>:
 800f98a:	b510      	push	{r4, lr}
 800f98c:	460c      	mov	r4, r1
 800f98e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f992:	f000 f939 	bl	800fc08 <_lseek_r>
 800f996:	1c43      	adds	r3, r0, #1
 800f998:	89a3      	ldrh	r3, [r4, #12]
 800f99a:	bf15      	itete	ne
 800f99c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f99e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f9a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f9a6:	81a3      	strheq	r3, [r4, #12]
 800f9a8:	bf18      	it	ne
 800f9aa:	81a3      	strhne	r3, [r4, #12]
 800f9ac:	bd10      	pop	{r4, pc}

0800f9ae <__sclose>:
 800f9ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9b2:	f000 b8f7 	b.w	800fba4 <_close_r>

0800f9b6 <__swbuf_r>:
 800f9b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9b8:	460e      	mov	r6, r1
 800f9ba:	4614      	mov	r4, r2
 800f9bc:	4605      	mov	r5, r0
 800f9be:	b118      	cbz	r0, 800f9c8 <__swbuf_r+0x12>
 800f9c0:	6a03      	ldr	r3, [r0, #32]
 800f9c2:	b90b      	cbnz	r3, 800f9c8 <__swbuf_r+0x12>
 800f9c4:	f7ff facc 	bl	800ef60 <__sinit>
 800f9c8:	69a3      	ldr	r3, [r4, #24]
 800f9ca:	60a3      	str	r3, [r4, #8]
 800f9cc:	89a3      	ldrh	r3, [r4, #12]
 800f9ce:	071a      	lsls	r2, r3, #28
 800f9d0:	d501      	bpl.n	800f9d6 <__swbuf_r+0x20>
 800f9d2:	6923      	ldr	r3, [r4, #16]
 800f9d4:	b943      	cbnz	r3, 800f9e8 <__swbuf_r+0x32>
 800f9d6:	4621      	mov	r1, r4
 800f9d8:	4628      	mov	r0, r5
 800f9da:	f000 f82b 	bl	800fa34 <__swsetup_r>
 800f9de:	b118      	cbz	r0, 800f9e8 <__swbuf_r+0x32>
 800f9e0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800f9e4:	4638      	mov	r0, r7
 800f9e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9e8:	6823      	ldr	r3, [r4, #0]
 800f9ea:	6922      	ldr	r2, [r4, #16]
 800f9ec:	1a98      	subs	r0, r3, r2
 800f9ee:	6963      	ldr	r3, [r4, #20]
 800f9f0:	b2f6      	uxtb	r6, r6
 800f9f2:	4283      	cmp	r3, r0
 800f9f4:	4637      	mov	r7, r6
 800f9f6:	dc05      	bgt.n	800fa04 <__swbuf_r+0x4e>
 800f9f8:	4621      	mov	r1, r4
 800f9fa:	4628      	mov	r0, r5
 800f9fc:	f7ff ff64 	bl	800f8c8 <_fflush_r>
 800fa00:	2800      	cmp	r0, #0
 800fa02:	d1ed      	bne.n	800f9e0 <__swbuf_r+0x2a>
 800fa04:	68a3      	ldr	r3, [r4, #8]
 800fa06:	3b01      	subs	r3, #1
 800fa08:	60a3      	str	r3, [r4, #8]
 800fa0a:	6823      	ldr	r3, [r4, #0]
 800fa0c:	1c5a      	adds	r2, r3, #1
 800fa0e:	6022      	str	r2, [r4, #0]
 800fa10:	701e      	strb	r6, [r3, #0]
 800fa12:	6962      	ldr	r2, [r4, #20]
 800fa14:	1c43      	adds	r3, r0, #1
 800fa16:	429a      	cmp	r2, r3
 800fa18:	d004      	beq.n	800fa24 <__swbuf_r+0x6e>
 800fa1a:	89a3      	ldrh	r3, [r4, #12]
 800fa1c:	07db      	lsls	r3, r3, #31
 800fa1e:	d5e1      	bpl.n	800f9e4 <__swbuf_r+0x2e>
 800fa20:	2e0a      	cmp	r6, #10
 800fa22:	d1df      	bne.n	800f9e4 <__swbuf_r+0x2e>
 800fa24:	4621      	mov	r1, r4
 800fa26:	4628      	mov	r0, r5
 800fa28:	f7ff ff4e 	bl	800f8c8 <_fflush_r>
 800fa2c:	2800      	cmp	r0, #0
 800fa2e:	d0d9      	beq.n	800f9e4 <__swbuf_r+0x2e>
 800fa30:	e7d6      	b.n	800f9e0 <__swbuf_r+0x2a>
	...

0800fa34 <__swsetup_r>:
 800fa34:	b538      	push	{r3, r4, r5, lr}
 800fa36:	4b29      	ldr	r3, [pc, #164]	@ (800fadc <__swsetup_r+0xa8>)
 800fa38:	4605      	mov	r5, r0
 800fa3a:	6818      	ldr	r0, [r3, #0]
 800fa3c:	460c      	mov	r4, r1
 800fa3e:	b118      	cbz	r0, 800fa48 <__swsetup_r+0x14>
 800fa40:	6a03      	ldr	r3, [r0, #32]
 800fa42:	b90b      	cbnz	r3, 800fa48 <__swsetup_r+0x14>
 800fa44:	f7ff fa8c 	bl	800ef60 <__sinit>
 800fa48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa4c:	0719      	lsls	r1, r3, #28
 800fa4e:	d422      	bmi.n	800fa96 <__swsetup_r+0x62>
 800fa50:	06da      	lsls	r2, r3, #27
 800fa52:	d407      	bmi.n	800fa64 <__swsetup_r+0x30>
 800fa54:	2209      	movs	r2, #9
 800fa56:	602a      	str	r2, [r5, #0]
 800fa58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa5c:	81a3      	strh	r3, [r4, #12]
 800fa5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fa62:	e033      	b.n	800facc <__swsetup_r+0x98>
 800fa64:	0758      	lsls	r0, r3, #29
 800fa66:	d512      	bpl.n	800fa8e <__swsetup_r+0x5a>
 800fa68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fa6a:	b141      	cbz	r1, 800fa7e <__swsetup_r+0x4a>
 800fa6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fa70:	4299      	cmp	r1, r3
 800fa72:	d002      	beq.n	800fa7a <__swsetup_r+0x46>
 800fa74:	4628      	mov	r0, r5
 800fa76:	f001 f8db 	bl	8010c30 <_free_r>
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	6363      	str	r3, [r4, #52]	@ 0x34
 800fa7e:	89a3      	ldrh	r3, [r4, #12]
 800fa80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fa84:	81a3      	strh	r3, [r4, #12]
 800fa86:	2300      	movs	r3, #0
 800fa88:	6063      	str	r3, [r4, #4]
 800fa8a:	6923      	ldr	r3, [r4, #16]
 800fa8c:	6023      	str	r3, [r4, #0]
 800fa8e:	89a3      	ldrh	r3, [r4, #12]
 800fa90:	f043 0308 	orr.w	r3, r3, #8
 800fa94:	81a3      	strh	r3, [r4, #12]
 800fa96:	6923      	ldr	r3, [r4, #16]
 800fa98:	b94b      	cbnz	r3, 800faae <__swsetup_r+0x7a>
 800fa9a:	89a3      	ldrh	r3, [r4, #12]
 800fa9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800faa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800faa4:	d003      	beq.n	800faae <__swsetup_r+0x7a>
 800faa6:	4621      	mov	r1, r4
 800faa8:	4628      	mov	r0, r5
 800faaa:	f000 f83f 	bl	800fb2c <__smakebuf_r>
 800faae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fab2:	f013 0201 	ands.w	r2, r3, #1
 800fab6:	d00a      	beq.n	800face <__swsetup_r+0x9a>
 800fab8:	2200      	movs	r2, #0
 800faba:	60a2      	str	r2, [r4, #8]
 800fabc:	6962      	ldr	r2, [r4, #20]
 800fabe:	4252      	negs	r2, r2
 800fac0:	61a2      	str	r2, [r4, #24]
 800fac2:	6922      	ldr	r2, [r4, #16]
 800fac4:	b942      	cbnz	r2, 800fad8 <__swsetup_r+0xa4>
 800fac6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800faca:	d1c5      	bne.n	800fa58 <__swsetup_r+0x24>
 800facc:	bd38      	pop	{r3, r4, r5, pc}
 800face:	0799      	lsls	r1, r3, #30
 800fad0:	bf58      	it	pl
 800fad2:	6962      	ldrpl	r2, [r4, #20]
 800fad4:	60a2      	str	r2, [r4, #8]
 800fad6:	e7f4      	b.n	800fac2 <__swsetup_r+0x8e>
 800fad8:	2000      	movs	r0, #0
 800fada:	e7f7      	b.n	800facc <__swsetup_r+0x98>
 800fadc:	20000074 	.word	0x20000074

0800fae0 <__swhatbuf_r>:
 800fae0:	b570      	push	{r4, r5, r6, lr}
 800fae2:	460c      	mov	r4, r1
 800fae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fae8:	2900      	cmp	r1, #0
 800faea:	b096      	sub	sp, #88	@ 0x58
 800faec:	4615      	mov	r5, r2
 800faee:	461e      	mov	r6, r3
 800faf0:	da0d      	bge.n	800fb0e <__swhatbuf_r+0x2e>
 800faf2:	89a3      	ldrh	r3, [r4, #12]
 800faf4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800faf8:	f04f 0100 	mov.w	r1, #0
 800fafc:	bf14      	ite	ne
 800fafe:	2340      	movne	r3, #64	@ 0x40
 800fb00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fb04:	2000      	movs	r0, #0
 800fb06:	6031      	str	r1, [r6, #0]
 800fb08:	602b      	str	r3, [r5, #0]
 800fb0a:	b016      	add	sp, #88	@ 0x58
 800fb0c:	bd70      	pop	{r4, r5, r6, pc}
 800fb0e:	466a      	mov	r2, sp
 800fb10:	f000 f858 	bl	800fbc4 <_fstat_r>
 800fb14:	2800      	cmp	r0, #0
 800fb16:	dbec      	blt.n	800faf2 <__swhatbuf_r+0x12>
 800fb18:	9901      	ldr	r1, [sp, #4]
 800fb1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fb1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fb22:	4259      	negs	r1, r3
 800fb24:	4159      	adcs	r1, r3
 800fb26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fb2a:	e7eb      	b.n	800fb04 <__swhatbuf_r+0x24>

0800fb2c <__smakebuf_r>:
 800fb2c:	898b      	ldrh	r3, [r1, #12]
 800fb2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb30:	079d      	lsls	r5, r3, #30
 800fb32:	4606      	mov	r6, r0
 800fb34:	460c      	mov	r4, r1
 800fb36:	d507      	bpl.n	800fb48 <__smakebuf_r+0x1c>
 800fb38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fb3c:	6023      	str	r3, [r4, #0]
 800fb3e:	6123      	str	r3, [r4, #16]
 800fb40:	2301      	movs	r3, #1
 800fb42:	6163      	str	r3, [r4, #20]
 800fb44:	b003      	add	sp, #12
 800fb46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb48:	ab01      	add	r3, sp, #4
 800fb4a:	466a      	mov	r2, sp
 800fb4c:	f7ff ffc8 	bl	800fae0 <__swhatbuf_r>
 800fb50:	9f00      	ldr	r7, [sp, #0]
 800fb52:	4605      	mov	r5, r0
 800fb54:	4639      	mov	r1, r7
 800fb56:	4630      	mov	r0, r6
 800fb58:	f7ff fc24 	bl	800f3a4 <_malloc_r>
 800fb5c:	b948      	cbnz	r0, 800fb72 <__smakebuf_r+0x46>
 800fb5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb62:	059a      	lsls	r2, r3, #22
 800fb64:	d4ee      	bmi.n	800fb44 <__smakebuf_r+0x18>
 800fb66:	f023 0303 	bic.w	r3, r3, #3
 800fb6a:	f043 0302 	orr.w	r3, r3, #2
 800fb6e:	81a3      	strh	r3, [r4, #12]
 800fb70:	e7e2      	b.n	800fb38 <__smakebuf_r+0xc>
 800fb72:	89a3      	ldrh	r3, [r4, #12]
 800fb74:	6020      	str	r0, [r4, #0]
 800fb76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fb7a:	81a3      	strh	r3, [r4, #12]
 800fb7c:	9b01      	ldr	r3, [sp, #4]
 800fb7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fb82:	b15b      	cbz	r3, 800fb9c <__smakebuf_r+0x70>
 800fb84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb88:	4630      	mov	r0, r6
 800fb8a:	f000 f82d 	bl	800fbe8 <_isatty_r>
 800fb8e:	b128      	cbz	r0, 800fb9c <__smakebuf_r+0x70>
 800fb90:	89a3      	ldrh	r3, [r4, #12]
 800fb92:	f023 0303 	bic.w	r3, r3, #3
 800fb96:	f043 0301 	orr.w	r3, r3, #1
 800fb9a:	81a3      	strh	r3, [r4, #12]
 800fb9c:	89a3      	ldrh	r3, [r4, #12]
 800fb9e:	431d      	orrs	r5, r3
 800fba0:	81a5      	strh	r5, [r4, #12]
 800fba2:	e7cf      	b.n	800fb44 <__smakebuf_r+0x18>

0800fba4 <_close_r>:
 800fba4:	b538      	push	{r3, r4, r5, lr}
 800fba6:	4d06      	ldr	r5, [pc, #24]	@ (800fbc0 <_close_r+0x1c>)
 800fba8:	2300      	movs	r3, #0
 800fbaa:	4604      	mov	r4, r0
 800fbac:	4608      	mov	r0, r1
 800fbae:	602b      	str	r3, [r5, #0]
 800fbb0:	f7f9 fc0c 	bl	80093cc <_close>
 800fbb4:	1c43      	adds	r3, r0, #1
 800fbb6:	d102      	bne.n	800fbbe <_close_r+0x1a>
 800fbb8:	682b      	ldr	r3, [r5, #0]
 800fbba:	b103      	cbz	r3, 800fbbe <_close_r+0x1a>
 800fbbc:	6023      	str	r3, [r4, #0]
 800fbbe:	bd38      	pop	{r3, r4, r5, pc}
 800fbc0:	20000840 	.word	0x20000840

0800fbc4 <_fstat_r>:
 800fbc4:	b538      	push	{r3, r4, r5, lr}
 800fbc6:	4d07      	ldr	r5, [pc, #28]	@ (800fbe4 <_fstat_r+0x20>)
 800fbc8:	2300      	movs	r3, #0
 800fbca:	4604      	mov	r4, r0
 800fbcc:	4608      	mov	r0, r1
 800fbce:	4611      	mov	r1, r2
 800fbd0:	602b      	str	r3, [r5, #0]
 800fbd2:	f7f9 fc07 	bl	80093e4 <_fstat>
 800fbd6:	1c43      	adds	r3, r0, #1
 800fbd8:	d102      	bne.n	800fbe0 <_fstat_r+0x1c>
 800fbda:	682b      	ldr	r3, [r5, #0]
 800fbdc:	b103      	cbz	r3, 800fbe0 <_fstat_r+0x1c>
 800fbde:	6023      	str	r3, [r4, #0]
 800fbe0:	bd38      	pop	{r3, r4, r5, pc}
 800fbe2:	bf00      	nop
 800fbe4:	20000840 	.word	0x20000840

0800fbe8 <_isatty_r>:
 800fbe8:	b538      	push	{r3, r4, r5, lr}
 800fbea:	4d06      	ldr	r5, [pc, #24]	@ (800fc04 <_isatty_r+0x1c>)
 800fbec:	2300      	movs	r3, #0
 800fbee:	4604      	mov	r4, r0
 800fbf0:	4608      	mov	r0, r1
 800fbf2:	602b      	str	r3, [r5, #0]
 800fbf4:	f7f9 fc06 	bl	8009404 <_isatty>
 800fbf8:	1c43      	adds	r3, r0, #1
 800fbfa:	d102      	bne.n	800fc02 <_isatty_r+0x1a>
 800fbfc:	682b      	ldr	r3, [r5, #0]
 800fbfe:	b103      	cbz	r3, 800fc02 <_isatty_r+0x1a>
 800fc00:	6023      	str	r3, [r4, #0]
 800fc02:	bd38      	pop	{r3, r4, r5, pc}
 800fc04:	20000840 	.word	0x20000840

0800fc08 <_lseek_r>:
 800fc08:	b538      	push	{r3, r4, r5, lr}
 800fc0a:	4d07      	ldr	r5, [pc, #28]	@ (800fc28 <_lseek_r+0x20>)
 800fc0c:	4604      	mov	r4, r0
 800fc0e:	4608      	mov	r0, r1
 800fc10:	4611      	mov	r1, r2
 800fc12:	2200      	movs	r2, #0
 800fc14:	602a      	str	r2, [r5, #0]
 800fc16:	461a      	mov	r2, r3
 800fc18:	f7f9 fbff 	bl	800941a <_lseek>
 800fc1c:	1c43      	adds	r3, r0, #1
 800fc1e:	d102      	bne.n	800fc26 <_lseek_r+0x1e>
 800fc20:	682b      	ldr	r3, [r5, #0]
 800fc22:	b103      	cbz	r3, 800fc26 <_lseek_r+0x1e>
 800fc24:	6023      	str	r3, [r4, #0]
 800fc26:	bd38      	pop	{r3, r4, r5, pc}
 800fc28:	20000840 	.word	0x20000840

0800fc2c <_raise_r>:
 800fc2c:	291f      	cmp	r1, #31
 800fc2e:	b538      	push	{r3, r4, r5, lr}
 800fc30:	4605      	mov	r5, r0
 800fc32:	460c      	mov	r4, r1
 800fc34:	d904      	bls.n	800fc40 <_raise_r+0x14>
 800fc36:	2316      	movs	r3, #22
 800fc38:	6003      	str	r3, [r0, #0]
 800fc3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fc3e:	bd38      	pop	{r3, r4, r5, pc}
 800fc40:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fc42:	b112      	cbz	r2, 800fc4a <_raise_r+0x1e>
 800fc44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fc48:	b94b      	cbnz	r3, 800fc5e <_raise_r+0x32>
 800fc4a:	4628      	mov	r0, r5
 800fc4c:	f000 f842 	bl	800fcd4 <_getpid_r>
 800fc50:	4622      	mov	r2, r4
 800fc52:	4601      	mov	r1, r0
 800fc54:	4628      	mov	r0, r5
 800fc56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc5a:	f000 b829 	b.w	800fcb0 <_kill_r>
 800fc5e:	2b01      	cmp	r3, #1
 800fc60:	d00a      	beq.n	800fc78 <_raise_r+0x4c>
 800fc62:	1c59      	adds	r1, r3, #1
 800fc64:	d103      	bne.n	800fc6e <_raise_r+0x42>
 800fc66:	2316      	movs	r3, #22
 800fc68:	6003      	str	r3, [r0, #0]
 800fc6a:	2001      	movs	r0, #1
 800fc6c:	e7e7      	b.n	800fc3e <_raise_r+0x12>
 800fc6e:	2100      	movs	r1, #0
 800fc70:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fc74:	4620      	mov	r0, r4
 800fc76:	4798      	blx	r3
 800fc78:	2000      	movs	r0, #0
 800fc7a:	e7e0      	b.n	800fc3e <_raise_r+0x12>

0800fc7c <raise>:
 800fc7c:	4b02      	ldr	r3, [pc, #8]	@ (800fc88 <raise+0xc>)
 800fc7e:	4601      	mov	r1, r0
 800fc80:	6818      	ldr	r0, [r3, #0]
 800fc82:	f7ff bfd3 	b.w	800fc2c <_raise_r>
 800fc86:	bf00      	nop
 800fc88:	20000074 	.word	0x20000074

0800fc8c <_read_r>:
 800fc8c:	b538      	push	{r3, r4, r5, lr}
 800fc8e:	4d07      	ldr	r5, [pc, #28]	@ (800fcac <_read_r+0x20>)
 800fc90:	4604      	mov	r4, r0
 800fc92:	4608      	mov	r0, r1
 800fc94:	4611      	mov	r1, r2
 800fc96:	2200      	movs	r2, #0
 800fc98:	602a      	str	r2, [r5, #0]
 800fc9a:	461a      	mov	r2, r3
 800fc9c:	f7f9 fb5d 	bl	800935a <_read>
 800fca0:	1c43      	adds	r3, r0, #1
 800fca2:	d102      	bne.n	800fcaa <_read_r+0x1e>
 800fca4:	682b      	ldr	r3, [r5, #0]
 800fca6:	b103      	cbz	r3, 800fcaa <_read_r+0x1e>
 800fca8:	6023      	str	r3, [r4, #0]
 800fcaa:	bd38      	pop	{r3, r4, r5, pc}
 800fcac:	20000840 	.word	0x20000840

0800fcb0 <_kill_r>:
 800fcb0:	b538      	push	{r3, r4, r5, lr}
 800fcb2:	4d07      	ldr	r5, [pc, #28]	@ (800fcd0 <_kill_r+0x20>)
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	4604      	mov	r4, r0
 800fcb8:	4608      	mov	r0, r1
 800fcba:	4611      	mov	r1, r2
 800fcbc:	602b      	str	r3, [r5, #0]
 800fcbe:	f7f9 fb31 	bl	8009324 <_kill>
 800fcc2:	1c43      	adds	r3, r0, #1
 800fcc4:	d102      	bne.n	800fccc <_kill_r+0x1c>
 800fcc6:	682b      	ldr	r3, [r5, #0]
 800fcc8:	b103      	cbz	r3, 800fccc <_kill_r+0x1c>
 800fcca:	6023      	str	r3, [r4, #0]
 800fccc:	bd38      	pop	{r3, r4, r5, pc}
 800fcce:	bf00      	nop
 800fcd0:	20000840 	.word	0x20000840

0800fcd4 <_getpid_r>:
 800fcd4:	f7f9 bb1e 	b.w	8009314 <_getpid>

0800fcd8 <_sbrk_r>:
 800fcd8:	b538      	push	{r3, r4, r5, lr}
 800fcda:	4d06      	ldr	r5, [pc, #24]	@ (800fcf4 <_sbrk_r+0x1c>)
 800fcdc:	2300      	movs	r3, #0
 800fcde:	4604      	mov	r4, r0
 800fce0:	4608      	mov	r0, r1
 800fce2:	602b      	str	r3, [r5, #0]
 800fce4:	f7f9 fba6 	bl	8009434 <_sbrk>
 800fce8:	1c43      	adds	r3, r0, #1
 800fcea:	d102      	bne.n	800fcf2 <_sbrk_r+0x1a>
 800fcec:	682b      	ldr	r3, [r5, #0]
 800fcee:	b103      	cbz	r3, 800fcf2 <_sbrk_r+0x1a>
 800fcf0:	6023      	str	r3, [r4, #0]
 800fcf2:	bd38      	pop	{r3, r4, r5, pc}
 800fcf4:	20000840 	.word	0x20000840

0800fcf8 <_write_r>:
 800fcf8:	b538      	push	{r3, r4, r5, lr}
 800fcfa:	4d07      	ldr	r5, [pc, #28]	@ (800fd18 <_write_r+0x20>)
 800fcfc:	4604      	mov	r4, r0
 800fcfe:	4608      	mov	r0, r1
 800fd00:	4611      	mov	r1, r2
 800fd02:	2200      	movs	r2, #0
 800fd04:	602a      	str	r2, [r5, #0]
 800fd06:	461a      	mov	r2, r3
 800fd08:	f7f9 fb44 	bl	8009394 <_write>
 800fd0c:	1c43      	adds	r3, r0, #1
 800fd0e:	d102      	bne.n	800fd16 <_write_r+0x1e>
 800fd10:	682b      	ldr	r3, [r5, #0]
 800fd12:	b103      	cbz	r3, 800fd16 <_write_r+0x1e>
 800fd14:	6023      	str	r3, [r4, #0]
 800fd16:	bd38      	pop	{r3, r4, r5, pc}
 800fd18:	20000840 	.word	0x20000840

0800fd1c <print_e>:
 800fd1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd1e:	b087      	sub	sp, #28
 800fd20:	461e      	mov	r6, r3
 800fd22:	ab04      	add	r3, sp, #16
 800fd24:	9301      	str	r3, [sp, #4]
 800fd26:	ab03      	add	r3, sp, #12
 800fd28:	9300      	str	r3, [sp, #0]
 800fd2a:	460c      	mov	r4, r1
 800fd2c:	ab05      	add	r3, sp, #20
 800fd2e:	2102      	movs	r1, #2
 800fd30:	4615      	mov	r5, r2
 800fd32:	3201      	adds	r2, #1
 800fd34:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 800fd36:	f000 f9b7 	bl	80100a8 <_dtoa_r>
 800fd3a:	9b05      	ldr	r3, [sp, #20]
 800fd3c:	f242 720f 	movw	r2, #9999	@ 0x270f
 800fd40:	4293      	cmp	r3, r2
 800fd42:	4601      	mov	r1, r0
 800fd44:	d104      	bne.n	800fd50 <print_e+0x34>
 800fd46:	4620      	mov	r0, r4
 800fd48:	f000 f91e 	bl	800ff88 <strcpy>
 800fd4c:	b007      	add	sp, #28
 800fd4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd50:	7802      	ldrb	r2, [r0, #0]
 800fd52:	f804 2b01 	strb.w	r2, [r4], #1
 800fd56:	2d00      	cmp	r5, #0
 800fd58:	bfc8      	it	gt
 800fd5a:	2701      	movgt	r7, #1
 800fd5c:	222e      	movs	r2, #46	@ 0x2e
 800fd5e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fd62:	b108      	cbz	r0, 800fd68 <print_e+0x4c>
 800fd64:	2d00      	cmp	r5, #0
 800fd66:	dc29      	bgt.n	800fdbc <print_e+0xa0>
 800fd68:	2e67      	cmp	r6, #103	@ 0x67
 800fd6a:	d038      	beq.n	800fdde <print_e+0xc2>
 800fd6c:	2e47      	cmp	r6, #71	@ 0x47
 800fd6e:	d038      	beq.n	800fde2 <print_e+0xc6>
 800fd70:	222e      	movs	r2, #46	@ 0x2e
 800fd72:	2130      	movs	r1, #48	@ 0x30
 800fd74:	2d00      	cmp	r5, #0
 800fd76:	dc2a      	bgt.n	800fdce <print_e+0xb2>
 800fd78:	1e5a      	subs	r2, r3, #1
 800fd7a:	2a00      	cmp	r2, #0
 800fd7c:	bfb8      	it	lt
 800fd7e:	f1c3 0301 	rsblt	r3, r3, #1
 800fd82:	9205      	str	r2, [sp, #20]
 800fd84:	bfaa      	itet	ge
 800fd86:	232b      	movge	r3, #43	@ 0x2b
 800fd88:	9305      	strlt	r3, [sp, #20]
 800fd8a:	7063      	strbge	r3, [r4, #1]
 800fd8c:	9b05      	ldr	r3, [sp, #20]
 800fd8e:	7026      	strb	r6, [r4, #0]
 800fd90:	bfbc      	itt	lt
 800fd92:	222d      	movlt	r2, #45	@ 0x2d
 800fd94:	7062      	strblt	r2, [r4, #1]
 800fd96:	2b63      	cmp	r3, #99	@ 0x63
 800fd98:	dc25      	bgt.n	800fde6 <print_e+0xca>
 800fd9a:	1ca1      	adds	r1, r4, #2
 800fd9c:	9b05      	ldr	r3, [sp, #20]
 800fd9e:	220a      	movs	r2, #10
 800fda0:	fb93 f2f2 	sdiv	r2, r3, r2
 800fda4:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 800fda8:	7008      	strb	r0, [r1, #0]
 800fdaa:	f06f 0009 	mvn.w	r0, #9
 800fdae:	fb00 3302 	mla	r3, r0, r2, r3
 800fdb2:	3330      	adds	r3, #48	@ 0x30
 800fdb4:	704b      	strb	r3, [r1, #1]
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	708b      	strb	r3, [r1, #2]
 800fdba:	e7c7      	b.n	800fd4c <print_e+0x30>
 800fdbc:	b10f      	cbz	r7, 800fdc2 <print_e+0xa6>
 800fdbe:	f804 2b01 	strb.w	r2, [r4], #1
 800fdc2:	7808      	ldrb	r0, [r1, #0]
 800fdc4:	f804 0b01 	strb.w	r0, [r4], #1
 800fdc8:	3d01      	subs	r5, #1
 800fdca:	2700      	movs	r7, #0
 800fdcc:	e7c7      	b.n	800fd5e <print_e+0x42>
 800fdce:	b10f      	cbz	r7, 800fdd4 <print_e+0xb8>
 800fdd0:	f804 2b01 	strb.w	r2, [r4], #1
 800fdd4:	f804 1b01 	strb.w	r1, [r4], #1
 800fdd8:	3d01      	subs	r5, #1
 800fdda:	2700      	movs	r7, #0
 800fddc:	e7ca      	b.n	800fd74 <print_e+0x58>
 800fdde:	2665      	movs	r6, #101	@ 0x65
 800fde0:	e7ca      	b.n	800fd78 <print_e+0x5c>
 800fde2:	2645      	movs	r6, #69	@ 0x45
 800fde4:	e7c8      	b.n	800fd78 <print_e+0x5c>
 800fde6:	2264      	movs	r2, #100	@ 0x64
 800fde8:	fb93 f2f2 	sdiv	r2, r3, r2
 800fdec:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 800fdf0:	70a0      	strb	r0, [r4, #2]
 800fdf2:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 800fdf6:	fb00 3302 	mla	r3, r0, r2, r3
 800fdfa:	1ce1      	adds	r1, r4, #3
 800fdfc:	9305      	str	r3, [sp, #20]
 800fdfe:	e7cd      	b.n	800fd9c <print_e+0x80>

0800fe00 <_gcvt>:
 800fe00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe04:	ec59 8b10 	vmov	r8, r9, d0
 800fe08:	b086      	sub	sp, #24
 800fe0a:	4605      	mov	r5, r0
 800fe0c:	460c      	mov	r4, r1
 800fe0e:	4616      	mov	r6, r2
 800fe10:	469a      	mov	sl, r3
 800fe12:	2200      	movs	r2, #0
 800fe14:	2300      	movs	r3, #0
 800fe16:	4640      	mov	r0, r8
 800fe18:	4649      	mov	r1, r9
 800fe1a:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 800fe1c:	f7f0 fe56 	bl	8000acc <__aeabi_dcmplt>
 800fe20:	b110      	cbz	r0, 800fe28 <_gcvt+0x28>
 800fe22:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800fe26:	4699      	mov	r9, r3
 800fe28:	2200      	movs	r2, #0
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	4640      	mov	r0, r8
 800fe2e:	4649      	mov	r1, r9
 800fe30:	f7f0 fe42 	bl	8000ab8 <__aeabi_dcmpeq>
 800fe34:	b138      	cbz	r0, 800fe46 <_gcvt+0x46>
 800fe36:	2330      	movs	r3, #48	@ 0x30
 800fe38:	7033      	strb	r3, [r6, #0]
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	7073      	strb	r3, [r6, #1]
 800fe3e:	4630      	mov	r0, r6
 800fe40:	b006      	add	sp, #24
 800fe42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe46:	a34e      	add	r3, pc, #312	@ (adr r3, 800ff80 <_gcvt+0x180>)
 800fe48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe4c:	4640      	mov	r0, r8
 800fe4e:	4649      	mov	r1, r9
 800fe50:	f7f0 fe46 	bl	8000ae0 <__aeabi_dcmple>
 800fe54:	b148      	cbz	r0, 800fe6a <_gcvt+0x6a>
 800fe56:	ec49 8b10 	vmov	d0, r8, r9
 800fe5a:	9700      	str	r7, [sp, #0]
 800fe5c:	4653      	mov	r3, sl
 800fe5e:	1e62      	subs	r2, r4, #1
 800fe60:	4631      	mov	r1, r6
 800fe62:	4628      	mov	r0, r5
 800fe64:	f7ff ff5a 	bl	800fd1c <print_e>
 800fe68:	e7e9      	b.n	800fe3e <_gcvt+0x3e>
 800fe6a:	4620      	mov	r0, r4
 800fe6c:	f001 fab4 	bl	80113d8 <_mprec_log10>
 800fe70:	4642      	mov	r2, r8
 800fe72:	ec51 0b10 	vmov	r0, r1, d0
 800fe76:	464b      	mov	r3, r9
 800fe78:	f7f0 fe32 	bl	8000ae0 <__aeabi_dcmple>
 800fe7c:	2800      	cmp	r0, #0
 800fe7e:	d1ea      	bne.n	800fe56 <_gcvt+0x56>
 800fe80:	ab05      	add	r3, sp, #20
 800fe82:	9301      	str	r3, [sp, #4]
 800fe84:	ab04      	add	r3, sp, #16
 800fe86:	9300      	str	r3, [sp, #0]
 800fe88:	4622      	mov	r2, r4
 800fe8a:	ab03      	add	r3, sp, #12
 800fe8c:	2102      	movs	r1, #2
 800fe8e:	ec49 8b10 	vmov	d0, r8, r9
 800fe92:	4628      	mov	r0, r5
 800fe94:	f000 f908 	bl	80100a8 <_dtoa_r>
 800fe98:	9a03      	ldr	r2, [sp, #12]
 800fe9a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fe9e:	429a      	cmp	r2, r3
 800fea0:	4601      	mov	r1, r0
 800fea2:	d00e      	beq.n	800fec2 <_gcvt+0xc2>
 800fea4:	4633      	mov	r3, r6
 800fea6:	4608      	mov	r0, r1
 800fea8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800feac:	9d03      	ldr	r5, [sp, #12]
 800feae:	b10a      	cbz	r2, 800feb4 <_gcvt+0xb4>
 800feb0:	2d00      	cmp	r5, #0
 800feb2:	dc0a      	bgt.n	800feca <_gcvt+0xca>
 800feb4:	1931      	adds	r1, r6, r4
 800feb6:	1ac9      	subs	r1, r1, r3
 800feb8:	462c      	mov	r4, r5
 800feba:	2200      	movs	r2, #0
 800febc:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 800fec0:	e00c      	b.n	800fedc <_gcvt+0xdc>
 800fec2:	4630      	mov	r0, r6
 800fec4:	f000 f860 	bl	800ff88 <strcpy>
 800fec8:	e7b9      	b.n	800fe3e <_gcvt+0x3e>
 800feca:	3d01      	subs	r5, #1
 800fecc:	f803 2b01 	strb.w	r2, [r3], #1
 800fed0:	9503      	str	r5, [sp, #12]
 800fed2:	e7e8      	b.n	800fea6 <_gcvt+0xa6>
 800fed4:	f803 cb01 	strb.w	ip, [r3], #1
 800fed8:	3901      	subs	r1, #1
 800feda:	2201      	movs	r2, #1
 800fedc:	2c00      	cmp	r4, #0
 800fede:	4625      	mov	r5, r4
 800fee0:	dc2e      	bgt.n	800ff40 <_gcvt+0x140>
 800fee2:	b102      	cbz	r2, 800fee6 <_gcvt+0xe6>
 800fee4:	9403      	str	r4, [sp, #12]
 800fee6:	b90f      	cbnz	r7, 800feec <_gcvt+0xec>
 800fee8:	7802      	ldrb	r2, [r0, #0]
 800feea:	b332      	cbz	r2, 800ff3a <_gcvt+0x13a>
 800feec:	42b3      	cmp	r3, r6
 800feee:	bf04      	itt	eq
 800fef0:	2230      	moveq	r2, #48	@ 0x30
 800fef2:	f803 2b01 	strbeq.w	r2, [r3], #1
 800fef6:	222e      	movs	r2, #46	@ 0x2e
 800fef8:	701a      	strb	r2, [r3, #0]
 800fefa:	9a03      	ldr	r2, [sp, #12]
 800fefc:	461c      	mov	r4, r3
 800fefe:	f04f 0c00 	mov.w	ip, #0
 800ff02:	1ad5      	subs	r5, r2, r3
 800ff04:	f04f 0e30 	mov.w	lr, #48	@ 0x30
 800ff08:	42e5      	cmn	r5, r4
 800ff0a:	d421      	bmi.n	800ff50 <_gcvt+0x150>
 800ff0c:	2a00      	cmp	r2, #0
 800ff0e:	f1c2 0400 	rsb	r4, r2, #0
 800ff12:	bfd4      	ite	le
 800ff14:	4625      	movle	r5, r4
 800ff16:	2500      	movgt	r5, #0
 800ff18:	3501      	adds	r5, #1
 800ff1a:	442b      	add	r3, r5
 800ff1c:	f1bc 0f00 	cmp.w	ip, #0
 800ff20:	d004      	beq.n	800ff2c <_gcvt+0x12c>
 800ff22:	2a00      	cmp	r2, #0
 800ff24:	bfc8      	it	gt
 800ff26:	2400      	movgt	r4, #0
 800ff28:	4422      	add	r2, r4
 800ff2a:	9203      	str	r2, [sp, #12]
 800ff2c:	1e42      	subs	r2, r0, #1
 800ff2e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800ff32:	b108      	cbz	r0, 800ff38 <_gcvt+0x138>
 800ff34:	2900      	cmp	r1, #0
 800ff36:	dc10      	bgt.n	800ff5a <_gcvt+0x15a>
 800ff38:	b9e7      	cbnz	r7, 800ff74 <_gcvt+0x174>
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	701a      	strb	r2, [r3, #0]
 800ff3e:	e77e      	b.n	800fe3e <_gcvt+0x3e>
 800ff40:	2900      	cmp	r1, #0
 800ff42:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800ff46:	dcc5      	bgt.n	800fed4 <_gcvt+0xd4>
 800ff48:	2a00      	cmp	r2, #0
 800ff4a:	d0cc      	beq.n	800fee6 <_gcvt+0xe6>
 800ff4c:	9503      	str	r5, [sp, #12]
 800ff4e:	e7ca      	b.n	800fee6 <_gcvt+0xe6>
 800ff50:	f804 ef01 	strb.w	lr, [r4, #1]!
 800ff54:	f04f 0c01 	mov.w	ip, #1
 800ff58:	e7d6      	b.n	800ff08 <_gcvt+0x108>
 800ff5a:	f803 0b01 	strb.w	r0, [r3], #1
 800ff5e:	3901      	subs	r1, #1
 800ff60:	e7e5      	b.n	800ff2e <_gcvt+0x12e>
 800ff62:	f802 5b01 	strb.w	r5, [r2], #1
 800ff66:	1aa0      	subs	r0, r4, r2
 800ff68:	2800      	cmp	r0, #0
 800ff6a:	dcfa      	bgt.n	800ff62 <_gcvt+0x162>
 800ff6c:	2900      	cmp	r1, #0
 800ff6e:	bfa8      	it	ge
 800ff70:	185b      	addge	r3, r3, r1
 800ff72:	e7e2      	b.n	800ff3a <_gcvt+0x13a>
 800ff74:	461a      	mov	r2, r3
 800ff76:	185c      	adds	r4, r3, r1
 800ff78:	2530      	movs	r5, #48	@ 0x30
 800ff7a:	e7f4      	b.n	800ff66 <_gcvt+0x166>
 800ff7c:	f3af 8000 	nop.w
 800ff80:	eb1c432d 	.word	0xeb1c432d
 800ff84:	3f1a36e2 	.word	0x3f1a36e2

0800ff88 <strcpy>:
 800ff88:	4603      	mov	r3, r0
 800ff8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ff8e:	f803 2b01 	strb.w	r2, [r3], #1
 800ff92:	2a00      	cmp	r2, #0
 800ff94:	d1f9      	bne.n	800ff8a <strcpy+0x2>
 800ff96:	4770      	bx	lr

0800ff98 <quorem>:
 800ff98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff9c:	6903      	ldr	r3, [r0, #16]
 800ff9e:	690c      	ldr	r4, [r1, #16]
 800ffa0:	42a3      	cmp	r3, r4
 800ffa2:	4607      	mov	r7, r0
 800ffa4:	db7e      	blt.n	80100a4 <quorem+0x10c>
 800ffa6:	3c01      	subs	r4, #1
 800ffa8:	f101 0814 	add.w	r8, r1, #20
 800ffac:	00a3      	lsls	r3, r4, #2
 800ffae:	f100 0514 	add.w	r5, r0, #20
 800ffb2:	9300      	str	r3, [sp, #0]
 800ffb4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ffb8:	9301      	str	r3, [sp, #4]
 800ffba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ffbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ffc2:	3301      	adds	r3, #1
 800ffc4:	429a      	cmp	r2, r3
 800ffc6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ffca:	fbb2 f6f3 	udiv	r6, r2, r3
 800ffce:	d32e      	bcc.n	801002e <quorem+0x96>
 800ffd0:	f04f 0a00 	mov.w	sl, #0
 800ffd4:	46c4      	mov	ip, r8
 800ffd6:	46ae      	mov	lr, r5
 800ffd8:	46d3      	mov	fp, sl
 800ffda:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ffde:	b298      	uxth	r0, r3
 800ffe0:	fb06 a000 	mla	r0, r6, r0, sl
 800ffe4:	0c02      	lsrs	r2, r0, #16
 800ffe6:	0c1b      	lsrs	r3, r3, #16
 800ffe8:	fb06 2303 	mla	r3, r6, r3, r2
 800ffec:	f8de 2000 	ldr.w	r2, [lr]
 800fff0:	b280      	uxth	r0, r0
 800fff2:	b292      	uxth	r2, r2
 800fff4:	1a12      	subs	r2, r2, r0
 800fff6:	445a      	add	r2, fp
 800fff8:	f8de 0000 	ldr.w	r0, [lr]
 800fffc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010000:	b29b      	uxth	r3, r3
 8010002:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010006:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801000a:	b292      	uxth	r2, r2
 801000c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010010:	45e1      	cmp	r9, ip
 8010012:	f84e 2b04 	str.w	r2, [lr], #4
 8010016:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801001a:	d2de      	bcs.n	800ffda <quorem+0x42>
 801001c:	9b00      	ldr	r3, [sp, #0]
 801001e:	58eb      	ldr	r3, [r5, r3]
 8010020:	b92b      	cbnz	r3, 801002e <quorem+0x96>
 8010022:	9b01      	ldr	r3, [sp, #4]
 8010024:	3b04      	subs	r3, #4
 8010026:	429d      	cmp	r5, r3
 8010028:	461a      	mov	r2, r3
 801002a:	d32f      	bcc.n	801008c <quorem+0xf4>
 801002c:	613c      	str	r4, [r7, #16]
 801002e:	4638      	mov	r0, r7
 8010030:	f001 f8ca 	bl	80111c8 <__mcmp>
 8010034:	2800      	cmp	r0, #0
 8010036:	db25      	blt.n	8010084 <quorem+0xec>
 8010038:	4629      	mov	r1, r5
 801003a:	2000      	movs	r0, #0
 801003c:	f858 2b04 	ldr.w	r2, [r8], #4
 8010040:	f8d1 c000 	ldr.w	ip, [r1]
 8010044:	fa1f fe82 	uxth.w	lr, r2
 8010048:	fa1f f38c 	uxth.w	r3, ip
 801004c:	eba3 030e 	sub.w	r3, r3, lr
 8010050:	4403      	add	r3, r0
 8010052:	0c12      	lsrs	r2, r2, #16
 8010054:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010058:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801005c:	b29b      	uxth	r3, r3
 801005e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010062:	45c1      	cmp	r9, r8
 8010064:	f841 3b04 	str.w	r3, [r1], #4
 8010068:	ea4f 4022 	mov.w	r0, r2, asr #16
 801006c:	d2e6      	bcs.n	801003c <quorem+0xa4>
 801006e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010072:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010076:	b922      	cbnz	r2, 8010082 <quorem+0xea>
 8010078:	3b04      	subs	r3, #4
 801007a:	429d      	cmp	r5, r3
 801007c:	461a      	mov	r2, r3
 801007e:	d30b      	bcc.n	8010098 <quorem+0x100>
 8010080:	613c      	str	r4, [r7, #16]
 8010082:	3601      	adds	r6, #1
 8010084:	4630      	mov	r0, r6
 8010086:	b003      	add	sp, #12
 8010088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801008c:	6812      	ldr	r2, [r2, #0]
 801008e:	3b04      	subs	r3, #4
 8010090:	2a00      	cmp	r2, #0
 8010092:	d1cb      	bne.n	801002c <quorem+0x94>
 8010094:	3c01      	subs	r4, #1
 8010096:	e7c6      	b.n	8010026 <quorem+0x8e>
 8010098:	6812      	ldr	r2, [r2, #0]
 801009a:	3b04      	subs	r3, #4
 801009c:	2a00      	cmp	r2, #0
 801009e:	d1ef      	bne.n	8010080 <quorem+0xe8>
 80100a0:	3c01      	subs	r4, #1
 80100a2:	e7ea      	b.n	801007a <quorem+0xe2>
 80100a4:	2000      	movs	r0, #0
 80100a6:	e7ee      	b.n	8010086 <quorem+0xee>

080100a8 <_dtoa_r>:
 80100a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100ac:	69c7      	ldr	r7, [r0, #28]
 80100ae:	b099      	sub	sp, #100	@ 0x64
 80100b0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80100b4:	ec55 4b10 	vmov	r4, r5, d0
 80100b8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80100ba:	9109      	str	r1, [sp, #36]	@ 0x24
 80100bc:	4683      	mov	fp, r0
 80100be:	920e      	str	r2, [sp, #56]	@ 0x38
 80100c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80100c2:	b97f      	cbnz	r7, 80100e4 <_dtoa_r+0x3c>
 80100c4:	2010      	movs	r0, #16
 80100c6:	f000 fdfd 	bl	8010cc4 <malloc>
 80100ca:	4602      	mov	r2, r0
 80100cc:	f8cb 001c 	str.w	r0, [fp, #28]
 80100d0:	b920      	cbnz	r0, 80100dc <_dtoa_r+0x34>
 80100d2:	4ba7      	ldr	r3, [pc, #668]	@ (8010370 <_dtoa_r+0x2c8>)
 80100d4:	21ef      	movs	r1, #239	@ 0xef
 80100d6:	48a7      	ldr	r0, [pc, #668]	@ (8010374 <_dtoa_r+0x2cc>)
 80100d8:	f7fe fe98 	bl	800ee0c <__assert_func>
 80100dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80100e0:	6007      	str	r7, [r0, #0]
 80100e2:	60c7      	str	r7, [r0, #12]
 80100e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80100e8:	6819      	ldr	r1, [r3, #0]
 80100ea:	b159      	cbz	r1, 8010104 <_dtoa_r+0x5c>
 80100ec:	685a      	ldr	r2, [r3, #4]
 80100ee:	604a      	str	r2, [r1, #4]
 80100f0:	2301      	movs	r3, #1
 80100f2:	4093      	lsls	r3, r2
 80100f4:	608b      	str	r3, [r1, #8]
 80100f6:	4658      	mov	r0, fp
 80100f8:	f000 fe2c 	bl	8010d54 <_Bfree>
 80100fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010100:	2200      	movs	r2, #0
 8010102:	601a      	str	r2, [r3, #0]
 8010104:	1e2b      	subs	r3, r5, #0
 8010106:	bfb9      	ittee	lt
 8010108:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801010c:	9303      	strlt	r3, [sp, #12]
 801010e:	2300      	movge	r3, #0
 8010110:	6033      	strge	r3, [r6, #0]
 8010112:	9f03      	ldr	r7, [sp, #12]
 8010114:	4b98      	ldr	r3, [pc, #608]	@ (8010378 <_dtoa_r+0x2d0>)
 8010116:	bfbc      	itt	lt
 8010118:	2201      	movlt	r2, #1
 801011a:	6032      	strlt	r2, [r6, #0]
 801011c:	43bb      	bics	r3, r7
 801011e:	d112      	bne.n	8010146 <_dtoa_r+0x9e>
 8010120:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010122:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010126:	6013      	str	r3, [r2, #0]
 8010128:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801012c:	4323      	orrs	r3, r4
 801012e:	f000 854d 	beq.w	8010bcc <_dtoa_r+0xb24>
 8010132:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010134:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801038c <_dtoa_r+0x2e4>
 8010138:	2b00      	cmp	r3, #0
 801013a:	f000 854f 	beq.w	8010bdc <_dtoa_r+0xb34>
 801013e:	f10a 0303 	add.w	r3, sl, #3
 8010142:	f000 bd49 	b.w	8010bd8 <_dtoa_r+0xb30>
 8010146:	ed9d 7b02 	vldr	d7, [sp, #8]
 801014a:	2200      	movs	r2, #0
 801014c:	ec51 0b17 	vmov	r0, r1, d7
 8010150:	2300      	movs	r3, #0
 8010152:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010156:	f7f0 fcaf 	bl	8000ab8 <__aeabi_dcmpeq>
 801015a:	4680      	mov	r8, r0
 801015c:	b158      	cbz	r0, 8010176 <_dtoa_r+0xce>
 801015e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010160:	2301      	movs	r3, #1
 8010162:	6013      	str	r3, [r2, #0]
 8010164:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010166:	b113      	cbz	r3, 801016e <_dtoa_r+0xc6>
 8010168:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801016a:	4b84      	ldr	r3, [pc, #528]	@ (801037c <_dtoa_r+0x2d4>)
 801016c:	6013      	str	r3, [r2, #0]
 801016e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8010390 <_dtoa_r+0x2e8>
 8010172:	f000 bd33 	b.w	8010bdc <_dtoa_r+0xb34>
 8010176:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801017a:	aa16      	add	r2, sp, #88	@ 0x58
 801017c:	a917      	add	r1, sp, #92	@ 0x5c
 801017e:	4658      	mov	r0, fp
 8010180:	f001 f8d2 	bl	8011328 <__d2b>
 8010184:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010188:	4681      	mov	r9, r0
 801018a:	2e00      	cmp	r6, #0
 801018c:	d077      	beq.n	801027e <_dtoa_r+0x1d6>
 801018e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010190:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8010194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010198:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801019c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80101a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80101a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80101a8:	4619      	mov	r1, r3
 80101aa:	2200      	movs	r2, #0
 80101ac:	4b74      	ldr	r3, [pc, #464]	@ (8010380 <_dtoa_r+0x2d8>)
 80101ae:	f7f0 f863 	bl	8000278 <__aeabi_dsub>
 80101b2:	a369      	add	r3, pc, #420	@ (adr r3, 8010358 <_dtoa_r+0x2b0>)
 80101b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101b8:	f7f0 fa16 	bl	80005e8 <__aeabi_dmul>
 80101bc:	a368      	add	r3, pc, #416	@ (adr r3, 8010360 <_dtoa_r+0x2b8>)
 80101be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101c2:	f7f0 f85b 	bl	800027c <__adddf3>
 80101c6:	4604      	mov	r4, r0
 80101c8:	4630      	mov	r0, r6
 80101ca:	460d      	mov	r5, r1
 80101cc:	f7f0 f9a2 	bl	8000514 <__aeabi_i2d>
 80101d0:	a365      	add	r3, pc, #404	@ (adr r3, 8010368 <_dtoa_r+0x2c0>)
 80101d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101d6:	f7f0 fa07 	bl	80005e8 <__aeabi_dmul>
 80101da:	4602      	mov	r2, r0
 80101dc:	460b      	mov	r3, r1
 80101de:	4620      	mov	r0, r4
 80101e0:	4629      	mov	r1, r5
 80101e2:	f7f0 f84b 	bl	800027c <__adddf3>
 80101e6:	4604      	mov	r4, r0
 80101e8:	460d      	mov	r5, r1
 80101ea:	f7f0 fc97 	bl	8000b1c <__aeabi_d2iz>
 80101ee:	2200      	movs	r2, #0
 80101f0:	4607      	mov	r7, r0
 80101f2:	2300      	movs	r3, #0
 80101f4:	4620      	mov	r0, r4
 80101f6:	4629      	mov	r1, r5
 80101f8:	f7f0 fc68 	bl	8000acc <__aeabi_dcmplt>
 80101fc:	b140      	cbz	r0, 8010210 <_dtoa_r+0x168>
 80101fe:	4638      	mov	r0, r7
 8010200:	f7f0 f988 	bl	8000514 <__aeabi_i2d>
 8010204:	4622      	mov	r2, r4
 8010206:	462b      	mov	r3, r5
 8010208:	f7f0 fc56 	bl	8000ab8 <__aeabi_dcmpeq>
 801020c:	b900      	cbnz	r0, 8010210 <_dtoa_r+0x168>
 801020e:	3f01      	subs	r7, #1
 8010210:	2f16      	cmp	r7, #22
 8010212:	d851      	bhi.n	80102b8 <_dtoa_r+0x210>
 8010214:	4b5b      	ldr	r3, [pc, #364]	@ (8010384 <_dtoa_r+0x2dc>)
 8010216:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801021a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801021e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010222:	f7f0 fc53 	bl	8000acc <__aeabi_dcmplt>
 8010226:	2800      	cmp	r0, #0
 8010228:	d048      	beq.n	80102bc <_dtoa_r+0x214>
 801022a:	3f01      	subs	r7, #1
 801022c:	2300      	movs	r3, #0
 801022e:	9312      	str	r3, [sp, #72]	@ 0x48
 8010230:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010232:	1b9b      	subs	r3, r3, r6
 8010234:	1e5a      	subs	r2, r3, #1
 8010236:	bf44      	itt	mi
 8010238:	f1c3 0801 	rsbmi	r8, r3, #1
 801023c:	2300      	movmi	r3, #0
 801023e:	9208      	str	r2, [sp, #32]
 8010240:	bf54      	ite	pl
 8010242:	f04f 0800 	movpl.w	r8, #0
 8010246:	9308      	strmi	r3, [sp, #32]
 8010248:	2f00      	cmp	r7, #0
 801024a:	db39      	blt.n	80102c0 <_dtoa_r+0x218>
 801024c:	9b08      	ldr	r3, [sp, #32]
 801024e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010250:	443b      	add	r3, r7
 8010252:	9308      	str	r3, [sp, #32]
 8010254:	2300      	movs	r3, #0
 8010256:	930a      	str	r3, [sp, #40]	@ 0x28
 8010258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801025a:	2b09      	cmp	r3, #9
 801025c:	d864      	bhi.n	8010328 <_dtoa_r+0x280>
 801025e:	2b05      	cmp	r3, #5
 8010260:	bfc4      	itt	gt
 8010262:	3b04      	subgt	r3, #4
 8010264:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8010266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010268:	f1a3 0302 	sub.w	r3, r3, #2
 801026c:	bfcc      	ite	gt
 801026e:	2400      	movgt	r4, #0
 8010270:	2401      	movle	r4, #1
 8010272:	2b03      	cmp	r3, #3
 8010274:	d863      	bhi.n	801033e <_dtoa_r+0x296>
 8010276:	e8df f003 	tbb	[pc, r3]
 801027a:	372a      	.short	0x372a
 801027c:	5535      	.short	0x5535
 801027e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8010282:	441e      	add	r6, r3
 8010284:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010288:	2b20      	cmp	r3, #32
 801028a:	bfc1      	itttt	gt
 801028c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010290:	409f      	lslgt	r7, r3
 8010292:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010296:	fa24 f303 	lsrgt.w	r3, r4, r3
 801029a:	bfd6      	itet	le
 801029c:	f1c3 0320 	rsble	r3, r3, #32
 80102a0:	ea47 0003 	orrgt.w	r0, r7, r3
 80102a4:	fa04 f003 	lslle.w	r0, r4, r3
 80102a8:	f7f0 f924 	bl	80004f4 <__aeabi_ui2d>
 80102ac:	2201      	movs	r2, #1
 80102ae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80102b2:	3e01      	subs	r6, #1
 80102b4:	9214      	str	r2, [sp, #80]	@ 0x50
 80102b6:	e777      	b.n	80101a8 <_dtoa_r+0x100>
 80102b8:	2301      	movs	r3, #1
 80102ba:	e7b8      	b.n	801022e <_dtoa_r+0x186>
 80102bc:	9012      	str	r0, [sp, #72]	@ 0x48
 80102be:	e7b7      	b.n	8010230 <_dtoa_r+0x188>
 80102c0:	427b      	negs	r3, r7
 80102c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80102c4:	2300      	movs	r3, #0
 80102c6:	eba8 0807 	sub.w	r8, r8, r7
 80102ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 80102cc:	e7c4      	b.n	8010258 <_dtoa_r+0x1b0>
 80102ce:	2300      	movs	r3, #0
 80102d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80102d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	dc35      	bgt.n	8010344 <_dtoa_r+0x29c>
 80102d8:	2301      	movs	r3, #1
 80102da:	9300      	str	r3, [sp, #0]
 80102dc:	9307      	str	r3, [sp, #28]
 80102de:	461a      	mov	r2, r3
 80102e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80102e2:	e00b      	b.n	80102fc <_dtoa_r+0x254>
 80102e4:	2301      	movs	r3, #1
 80102e6:	e7f3      	b.n	80102d0 <_dtoa_r+0x228>
 80102e8:	2300      	movs	r3, #0
 80102ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80102ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80102ee:	18fb      	adds	r3, r7, r3
 80102f0:	9300      	str	r3, [sp, #0]
 80102f2:	3301      	adds	r3, #1
 80102f4:	2b01      	cmp	r3, #1
 80102f6:	9307      	str	r3, [sp, #28]
 80102f8:	bfb8      	it	lt
 80102fa:	2301      	movlt	r3, #1
 80102fc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010300:	2100      	movs	r1, #0
 8010302:	2204      	movs	r2, #4
 8010304:	f102 0514 	add.w	r5, r2, #20
 8010308:	429d      	cmp	r5, r3
 801030a:	d91f      	bls.n	801034c <_dtoa_r+0x2a4>
 801030c:	6041      	str	r1, [r0, #4]
 801030e:	4658      	mov	r0, fp
 8010310:	f000 fce0 	bl	8010cd4 <_Balloc>
 8010314:	4682      	mov	sl, r0
 8010316:	2800      	cmp	r0, #0
 8010318:	d13c      	bne.n	8010394 <_dtoa_r+0x2ec>
 801031a:	4b1b      	ldr	r3, [pc, #108]	@ (8010388 <_dtoa_r+0x2e0>)
 801031c:	4602      	mov	r2, r0
 801031e:	f240 11af 	movw	r1, #431	@ 0x1af
 8010322:	e6d8      	b.n	80100d6 <_dtoa_r+0x2e>
 8010324:	2301      	movs	r3, #1
 8010326:	e7e0      	b.n	80102ea <_dtoa_r+0x242>
 8010328:	2401      	movs	r4, #1
 801032a:	2300      	movs	r3, #0
 801032c:	9309      	str	r3, [sp, #36]	@ 0x24
 801032e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010330:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010334:	9300      	str	r3, [sp, #0]
 8010336:	9307      	str	r3, [sp, #28]
 8010338:	2200      	movs	r2, #0
 801033a:	2312      	movs	r3, #18
 801033c:	e7d0      	b.n	80102e0 <_dtoa_r+0x238>
 801033e:	2301      	movs	r3, #1
 8010340:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010342:	e7f5      	b.n	8010330 <_dtoa_r+0x288>
 8010344:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010346:	9300      	str	r3, [sp, #0]
 8010348:	9307      	str	r3, [sp, #28]
 801034a:	e7d7      	b.n	80102fc <_dtoa_r+0x254>
 801034c:	3101      	adds	r1, #1
 801034e:	0052      	lsls	r2, r2, #1
 8010350:	e7d8      	b.n	8010304 <_dtoa_r+0x25c>
 8010352:	bf00      	nop
 8010354:	f3af 8000 	nop.w
 8010358:	636f4361 	.word	0x636f4361
 801035c:	3fd287a7 	.word	0x3fd287a7
 8010360:	8b60c8b3 	.word	0x8b60c8b3
 8010364:	3fc68a28 	.word	0x3fc68a28
 8010368:	509f79fb 	.word	0x509f79fb
 801036c:	3fd34413 	.word	0x3fd34413
 8010370:	08012e7a 	.word	0x08012e7a
 8010374:	08012e91 	.word	0x08012e91
 8010378:	7ff00000 	.word	0x7ff00000
 801037c:	08012e79 	.word	0x08012e79
 8010380:	3ff80000 	.word	0x3ff80000
 8010384:	08012f88 	.word	0x08012f88
 8010388:	08012ee9 	.word	0x08012ee9
 801038c:	08012e74 	.word	0x08012e74
 8010390:	08012e78 	.word	0x08012e78
 8010394:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010398:	6018      	str	r0, [r3, #0]
 801039a:	9b07      	ldr	r3, [sp, #28]
 801039c:	2b0e      	cmp	r3, #14
 801039e:	f200 80a4 	bhi.w	80104ea <_dtoa_r+0x442>
 80103a2:	2c00      	cmp	r4, #0
 80103a4:	f000 80a1 	beq.w	80104ea <_dtoa_r+0x442>
 80103a8:	2f00      	cmp	r7, #0
 80103aa:	dd33      	ble.n	8010414 <_dtoa_r+0x36c>
 80103ac:	4bad      	ldr	r3, [pc, #692]	@ (8010664 <_dtoa_r+0x5bc>)
 80103ae:	f007 020f 	and.w	r2, r7, #15
 80103b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80103b6:	ed93 7b00 	vldr	d7, [r3]
 80103ba:	05f8      	lsls	r0, r7, #23
 80103bc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80103c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80103c4:	d516      	bpl.n	80103f4 <_dtoa_r+0x34c>
 80103c6:	4ba8      	ldr	r3, [pc, #672]	@ (8010668 <_dtoa_r+0x5c0>)
 80103c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80103cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80103d0:	f7f0 fa34 	bl	800083c <__aeabi_ddiv>
 80103d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80103d8:	f004 040f 	and.w	r4, r4, #15
 80103dc:	2603      	movs	r6, #3
 80103de:	4da2      	ldr	r5, [pc, #648]	@ (8010668 <_dtoa_r+0x5c0>)
 80103e0:	b954      	cbnz	r4, 80103f8 <_dtoa_r+0x350>
 80103e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80103e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80103ea:	f7f0 fa27 	bl	800083c <__aeabi_ddiv>
 80103ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80103f2:	e028      	b.n	8010446 <_dtoa_r+0x39e>
 80103f4:	2602      	movs	r6, #2
 80103f6:	e7f2      	b.n	80103de <_dtoa_r+0x336>
 80103f8:	07e1      	lsls	r1, r4, #31
 80103fa:	d508      	bpl.n	801040e <_dtoa_r+0x366>
 80103fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010400:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010404:	f7f0 f8f0 	bl	80005e8 <__aeabi_dmul>
 8010408:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801040c:	3601      	adds	r6, #1
 801040e:	1064      	asrs	r4, r4, #1
 8010410:	3508      	adds	r5, #8
 8010412:	e7e5      	b.n	80103e0 <_dtoa_r+0x338>
 8010414:	f000 80d2 	beq.w	80105bc <_dtoa_r+0x514>
 8010418:	427c      	negs	r4, r7
 801041a:	4b92      	ldr	r3, [pc, #584]	@ (8010664 <_dtoa_r+0x5bc>)
 801041c:	4d92      	ldr	r5, [pc, #584]	@ (8010668 <_dtoa_r+0x5c0>)
 801041e:	f004 020f 	and.w	r2, r4, #15
 8010422:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010426:	e9d3 2300 	ldrd	r2, r3, [r3]
 801042a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801042e:	f7f0 f8db 	bl	80005e8 <__aeabi_dmul>
 8010432:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010436:	1124      	asrs	r4, r4, #4
 8010438:	2300      	movs	r3, #0
 801043a:	2602      	movs	r6, #2
 801043c:	2c00      	cmp	r4, #0
 801043e:	f040 80b2 	bne.w	80105a6 <_dtoa_r+0x4fe>
 8010442:	2b00      	cmp	r3, #0
 8010444:	d1d3      	bne.n	80103ee <_dtoa_r+0x346>
 8010446:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010448:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801044c:	2b00      	cmp	r3, #0
 801044e:	f000 80b7 	beq.w	80105c0 <_dtoa_r+0x518>
 8010452:	4b86      	ldr	r3, [pc, #536]	@ (801066c <_dtoa_r+0x5c4>)
 8010454:	2200      	movs	r2, #0
 8010456:	4620      	mov	r0, r4
 8010458:	4629      	mov	r1, r5
 801045a:	f7f0 fb37 	bl	8000acc <__aeabi_dcmplt>
 801045e:	2800      	cmp	r0, #0
 8010460:	f000 80ae 	beq.w	80105c0 <_dtoa_r+0x518>
 8010464:	9b07      	ldr	r3, [sp, #28]
 8010466:	2b00      	cmp	r3, #0
 8010468:	f000 80aa 	beq.w	80105c0 <_dtoa_r+0x518>
 801046c:	9b00      	ldr	r3, [sp, #0]
 801046e:	2b00      	cmp	r3, #0
 8010470:	dd37      	ble.n	80104e2 <_dtoa_r+0x43a>
 8010472:	1e7b      	subs	r3, r7, #1
 8010474:	9304      	str	r3, [sp, #16]
 8010476:	4620      	mov	r0, r4
 8010478:	4b7d      	ldr	r3, [pc, #500]	@ (8010670 <_dtoa_r+0x5c8>)
 801047a:	2200      	movs	r2, #0
 801047c:	4629      	mov	r1, r5
 801047e:	f7f0 f8b3 	bl	80005e8 <__aeabi_dmul>
 8010482:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010486:	9c00      	ldr	r4, [sp, #0]
 8010488:	3601      	adds	r6, #1
 801048a:	4630      	mov	r0, r6
 801048c:	f7f0 f842 	bl	8000514 <__aeabi_i2d>
 8010490:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010494:	f7f0 f8a8 	bl	80005e8 <__aeabi_dmul>
 8010498:	4b76      	ldr	r3, [pc, #472]	@ (8010674 <_dtoa_r+0x5cc>)
 801049a:	2200      	movs	r2, #0
 801049c:	f7ef feee 	bl	800027c <__adddf3>
 80104a0:	4605      	mov	r5, r0
 80104a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80104a6:	2c00      	cmp	r4, #0
 80104a8:	f040 808d 	bne.w	80105c6 <_dtoa_r+0x51e>
 80104ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104b0:	4b71      	ldr	r3, [pc, #452]	@ (8010678 <_dtoa_r+0x5d0>)
 80104b2:	2200      	movs	r2, #0
 80104b4:	f7ef fee0 	bl	8000278 <__aeabi_dsub>
 80104b8:	4602      	mov	r2, r0
 80104ba:	460b      	mov	r3, r1
 80104bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80104c0:	462a      	mov	r2, r5
 80104c2:	4633      	mov	r3, r6
 80104c4:	f7f0 fb20 	bl	8000b08 <__aeabi_dcmpgt>
 80104c8:	2800      	cmp	r0, #0
 80104ca:	f040 828b 	bne.w	80109e4 <_dtoa_r+0x93c>
 80104ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104d2:	462a      	mov	r2, r5
 80104d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80104d8:	f7f0 faf8 	bl	8000acc <__aeabi_dcmplt>
 80104dc:	2800      	cmp	r0, #0
 80104de:	f040 8128 	bne.w	8010732 <_dtoa_r+0x68a>
 80104e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80104e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80104ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	f2c0 815a 	blt.w	80107a6 <_dtoa_r+0x6fe>
 80104f2:	2f0e      	cmp	r7, #14
 80104f4:	f300 8157 	bgt.w	80107a6 <_dtoa_r+0x6fe>
 80104f8:	4b5a      	ldr	r3, [pc, #360]	@ (8010664 <_dtoa_r+0x5bc>)
 80104fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80104fe:	ed93 7b00 	vldr	d7, [r3]
 8010502:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010504:	2b00      	cmp	r3, #0
 8010506:	ed8d 7b00 	vstr	d7, [sp]
 801050a:	da03      	bge.n	8010514 <_dtoa_r+0x46c>
 801050c:	9b07      	ldr	r3, [sp, #28]
 801050e:	2b00      	cmp	r3, #0
 8010510:	f340 8101 	ble.w	8010716 <_dtoa_r+0x66e>
 8010514:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010518:	4656      	mov	r6, sl
 801051a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801051e:	4620      	mov	r0, r4
 8010520:	4629      	mov	r1, r5
 8010522:	f7f0 f98b 	bl	800083c <__aeabi_ddiv>
 8010526:	f7f0 faf9 	bl	8000b1c <__aeabi_d2iz>
 801052a:	4680      	mov	r8, r0
 801052c:	f7ef fff2 	bl	8000514 <__aeabi_i2d>
 8010530:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010534:	f7f0 f858 	bl	80005e8 <__aeabi_dmul>
 8010538:	4602      	mov	r2, r0
 801053a:	460b      	mov	r3, r1
 801053c:	4620      	mov	r0, r4
 801053e:	4629      	mov	r1, r5
 8010540:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010544:	f7ef fe98 	bl	8000278 <__aeabi_dsub>
 8010548:	f806 4b01 	strb.w	r4, [r6], #1
 801054c:	9d07      	ldr	r5, [sp, #28]
 801054e:	eba6 040a 	sub.w	r4, r6, sl
 8010552:	42a5      	cmp	r5, r4
 8010554:	4602      	mov	r2, r0
 8010556:	460b      	mov	r3, r1
 8010558:	f040 8117 	bne.w	801078a <_dtoa_r+0x6e2>
 801055c:	f7ef fe8e 	bl	800027c <__adddf3>
 8010560:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010564:	4604      	mov	r4, r0
 8010566:	460d      	mov	r5, r1
 8010568:	f7f0 face 	bl	8000b08 <__aeabi_dcmpgt>
 801056c:	2800      	cmp	r0, #0
 801056e:	f040 80f9 	bne.w	8010764 <_dtoa_r+0x6bc>
 8010572:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010576:	4620      	mov	r0, r4
 8010578:	4629      	mov	r1, r5
 801057a:	f7f0 fa9d 	bl	8000ab8 <__aeabi_dcmpeq>
 801057e:	b118      	cbz	r0, 8010588 <_dtoa_r+0x4e0>
 8010580:	f018 0f01 	tst.w	r8, #1
 8010584:	f040 80ee 	bne.w	8010764 <_dtoa_r+0x6bc>
 8010588:	4649      	mov	r1, r9
 801058a:	4658      	mov	r0, fp
 801058c:	f000 fbe2 	bl	8010d54 <_Bfree>
 8010590:	2300      	movs	r3, #0
 8010592:	7033      	strb	r3, [r6, #0]
 8010594:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010596:	3701      	adds	r7, #1
 8010598:	601f      	str	r7, [r3, #0]
 801059a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801059c:	2b00      	cmp	r3, #0
 801059e:	f000 831d 	beq.w	8010bdc <_dtoa_r+0xb34>
 80105a2:	601e      	str	r6, [r3, #0]
 80105a4:	e31a      	b.n	8010bdc <_dtoa_r+0xb34>
 80105a6:	07e2      	lsls	r2, r4, #31
 80105a8:	d505      	bpl.n	80105b6 <_dtoa_r+0x50e>
 80105aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80105ae:	f7f0 f81b 	bl	80005e8 <__aeabi_dmul>
 80105b2:	3601      	adds	r6, #1
 80105b4:	2301      	movs	r3, #1
 80105b6:	1064      	asrs	r4, r4, #1
 80105b8:	3508      	adds	r5, #8
 80105ba:	e73f      	b.n	801043c <_dtoa_r+0x394>
 80105bc:	2602      	movs	r6, #2
 80105be:	e742      	b.n	8010446 <_dtoa_r+0x39e>
 80105c0:	9c07      	ldr	r4, [sp, #28]
 80105c2:	9704      	str	r7, [sp, #16]
 80105c4:	e761      	b.n	801048a <_dtoa_r+0x3e2>
 80105c6:	4b27      	ldr	r3, [pc, #156]	@ (8010664 <_dtoa_r+0x5bc>)
 80105c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80105ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80105ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80105d2:	4454      	add	r4, sl
 80105d4:	2900      	cmp	r1, #0
 80105d6:	d053      	beq.n	8010680 <_dtoa_r+0x5d8>
 80105d8:	4928      	ldr	r1, [pc, #160]	@ (801067c <_dtoa_r+0x5d4>)
 80105da:	2000      	movs	r0, #0
 80105dc:	f7f0 f92e 	bl	800083c <__aeabi_ddiv>
 80105e0:	4633      	mov	r3, r6
 80105e2:	462a      	mov	r2, r5
 80105e4:	f7ef fe48 	bl	8000278 <__aeabi_dsub>
 80105e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80105ec:	4656      	mov	r6, sl
 80105ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80105f2:	f7f0 fa93 	bl	8000b1c <__aeabi_d2iz>
 80105f6:	4605      	mov	r5, r0
 80105f8:	f7ef ff8c 	bl	8000514 <__aeabi_i2d>
 80105fc:	4602      	mov	r2, r0
 80105fe:	460b      	mov	r3, r1
 8010600:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010604:	f7ef fe38 	bl	8000278 <__aeabi_dsub>
 8010608:	3530      	adds	r5, #48	@ 0x30
 801060a:	4602      	mov	r2, r0
 801060c:	460b      	mov	r3, r1
 801060e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010612:	f806 5b01 	strb.w	r5, [r6], #1
 8010616:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801061a:	f7f0 fa57 	bl	8000acc <__aeabi_dcmplt>
 801061e:	2800      	cmp	r0, #0
 8010620:	d171      	bne.n	8010706 <_dtoa_r+0x65e>
 8010622:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010626:	4911      	ldr	r1, [pc, #68]	@ (801066c <_dtoa_r+0x5c4>)
 8010628:	2000      	movs	r0, #0
 801062a:	f7ef fe25 	bl	8000278 <__aeabi_dsub>
 801062e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010632:	f7f0 fa4b 	bl	8000acc <__aeabi_dcmplt>
 8010636:	2800      	cmp	r0, #0
 8010638:	f040 8095 	bne.w	8010766 <_dtoa_r+0x6be>
 801063c:	42a6      	cmp	r6, r4
 801063e:	f43f af50 	beq.w	80104e2 <_dtoa_r+0x43a>
 8010642:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010646:	4b0a      	ldr	r3, [pc, #40]	@ (8010670 <_dtoa_r+0x5c8>)
 8010648:	2200      	movs	r2, #0
 801064a:	f7ef ffcd 	bl	80005e8 <__aeabi_dmul>
 801064e:	4b08      	ldr	r3, [pc, #32]	@ (8010670 <_dtoa_r+0x5c8>)
 8010650:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010654:	2200      	movs	r2, #0
 8010656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801065a:	f7ef ffc5 	bl	80005e8 <__aeabi_dmul>
 801065e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010662:	e7c4      	b.n	80105ee <_dtoa_r+0x546>
 8010664:	08012f88 	.word	0x08012f88
 8010668:	08012f60 	.word	0x08012f60
 801066c:	3ff00000 	.word	0x3ff00000
 8010670:	40240000 	.word	0x40240000
 8010674:	401c0000 	.word	0x401c0000
 8010678:	40140000 	.word	0x40140000
 801067c:	3fe00000 	.word	0x3fe00000
 8010680:	4631      	mov	r1, r6
 8010682:	4628      	mov	r0, r5
 8010684:	f7ef ffb0 	bl	80005e8 <__aeabi_dmul>
 8010688:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801068c:	9415      	str	r4, [sp, #84]	@ 0x54
 801068e:	4656      	mov	r6, sl
 8010690:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010694:	f7f0 fa42 	bl	8000b1c <__aeabi_d2iz>
 8010698:	4605      	mov	r5, r0
 801069a:	f7ef ff3b 	bl	8000514 <__aeabi_i2d>
 801069e:	4602      	mov	r2, r0
 80106a0:	460b      	mov	r3, r1
 80106a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80106a6:	f7ef fde7 	bl	8000278 <__aeabi_dsub>
 80106aa:	3530      	adds	r5, #48	@ 0x30
 80106ac:	f806 5b01 	strb.w	r5, [r6], #1
 80106b0:	4602      	mov	r2, r0
 80106b2:	460b      	mov	r3, r1
 80106b4:	42a6      	cmp	r6, r4
 80106b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80106ba:	f04f 0200 	mov.w	r2, #0
 80106be:	d124      	bne.n	801070a <_dtoa_r+0x662>
 80106c0:	4bac      	ldr	r3, [pc, #688]	@ (8010974 <_dtoa_r+0x8cc>)
 80106c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80106c6:	f7ef fdd9 	bl	800027c <__adddf3>
 80106ca:	4602      	mov	r2, r0
 80106cc:	460b      	mov	r3, r1
 80106ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80106d2:	f7f0 fa19 	bl	8000b08 <__aeabi_dcmpgt>
 80106d6:	2800      	cmp	r0, #0
 80106d8:	d145      	bne.n	8010766 <_dtoa_r+0x6be>
 80106da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80106de:	49a5      	ldr	r1, [pc, #660]	@ (8010974 <_dtoa_r+0x8cc>)
 80106e0:	2000      	movs	r0, #0
 80106e2:	f7ef fdc9 	bl	8000278 <__aeabi_dsub>
 80106e6:	4602      	mov	r2, r0
 80106e8:	460b      	mov	r3, r1
 80106ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80106ee:	f7f0 f9ed 	bl	8000acc <__aeabi_dcmplt>
 80106f2:	2800      	cmp	r0, #0
 80106f4:	f43f aef5 	beq.w	80104e2 <_dtoa_r+0x43a>
 80106f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80106fa:	1e73      	subs	r3, r6, #1
 80106fc:	9315      	str	r3, [sp, #84]	@ 0x54
 80106fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010702:	2b30      	cmp	r3, #48	@ 0x30
 8010704:	d0f8      	beq.n	80106f8 <_dtoa_r+0x650>
 8010706:	9f04      	ldr	r7, [sp, #16]
 8010708:	e73e      	b.n	8010588 <_dtoa_r+0x4e0>
 801070a:	4b9b      	ldr	r3, [pc, #620]	@ (8010978 <_dtoa_r+0x8d0>)
 801070c:	f7ef ff6c 	bl	80005e8 <__aeabi_dmul>
 8010710:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010714:	e7bc      	b.n	8010690 <_dtoa_r+0x5e8>
 8010716:	d10c      	bne.n	8010732 <_dtoa_r+0x68a>
 8010718:	4b98      	ldr	r3, [pc, #608]	@ (801097c <_dtoa_r+0x8d4>)
 801071a:	2200      	movs	r2, #0
 801071c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010720:	f7ef ff62 	bl	80005e8 <__aeabi_dmul>
 8010724:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010728:	f7f0 f9e4 	bl	8000af4 <__aeabi_dcmpge>
 801072c:	2800      	cmp	r0, #0
 801072e:	f000 8157 	beq.w	80109e0 <_dtoa_r+0x938>
 8010732:	2400      	movs	r4, #0
 8010734:	4625      	mov	r5, r4
 8010736:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010738:	43db      	mvns	r3, r3
 801073a:	9304      	str	r3, [sp, #16]
 801073c:	4656      	mov	r6, sl
 801073e:	2700      	movs	r7, #0
 8010740:	4621      	mov	r1, r4
 8010742:	4658      	mov	r0, fp
 8010744:	f000 fb06 	bl	8010d54 <_Bfree>
 8010748:	2d00      	cmp	r5, #0
 801074a:	d0dc      	beq.n	8010706 <_dtoa_r+0x65e>
 801074c:	b12f      	cbz	r7, 801075a <_dtoa_r+0x6b2>
 801074e:	42af      	cmp	r7, r5
 8010750:	d003      	beq.n	801075a <_dtoa_r+0x6b2>
 8010752:	4639      	mov	r1, r7
 8010754:	4658      	mov	r0, fp
 8010756:	f000 fafd 	bl	8010d54 <_Bfree>
 801075a:	4629      	mov	r1, r5
 801075c:	4658      	mov	r0, fp
 801075e:	f000 faf9 	bl	8010d54 <_Bfree>
 8010762:	e7d0      	b.n	8010706 <_dtoa_r+0x65e>
 8010764:	9704      	str	r7, [sp, #16]
 8010766:	4633      	mov	r3, r6
 8010768:	461e      	mov	r6, r3
 801076a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801076e:	2a39      	cmp	r2, #57	@ 0x39
 8010770:	d107      	bne.n	8010782 <_dtoa_r+0x6da>
 8010772:	459a      	cmp	sl, r3
 8010774:	d1f8      	bne.n	8010768 <_dtoa_r+0x6c0>
 8010776:	9a04      	ldr	r2, [sp, #16]
 8010778:	3201      	adds	r2, #1
 801077a:	9204      	str	r2, [sp, #16]
 801077c:	2230      	movs	r2, #48	@ 0x30
 801077e:	f88a 2000 	strb.w	r2, [sl]
 8010782:	781a      	ldrb	r2, [r3, #0]
 8010784:	3201      	adds	r2, #1
 8010786:	701a      	strb	r2, [r3, #0]
 8010788:	e7bd      	b.n	8010706 <_dtoa_r+0x65e>
 801078a:	4b7b      	ldr	r3, [pc, #492]	@ (8010978 <_dtoa_r+0x8d0>)
 801078c:	2200      	movs	r2, #0
 801078e:	f7ef ff2b 	bl	80005e8 <__aeabi_dmul>
 8010792:	2200      	movs	r2, #0
 8010794:	2300      	movs	r3, #0
 8010796:	4604      	mov	r4, r0
 8010798:	460d      	mov	r5, r1
 801079a:	f7f0 f98d 	bl	8000ab8 <__aeabi_dcmpeq>
 801079e:	2800      	cmp	r0, #0
 80107a0:	f43f aebb 	beq.w	801051a <_dtoa_r+0x472>
 80107a4:	e6f0      	b.n	8010588 <_dtoa_r+0x4e0>
 80107a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80107a8:	2a00      	cmp	r2, #0
 80107aa:	f000 80db 	beq.w	8010964 <_dtoa_r+0x8bc>
 80107ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80107b0:	2a01      	cmp	r2, #1
 80107b2:	f300 80bf 	bgt.w	8010934 <_dtoa_r+0x88c>
 80107b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80107b8:	2a00      	cmp	r2, #0
 80107ba:	f000 80b7 	beq.w	801092c <_dtoa_r+0x884>
 80107be:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80107c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80107c4:	4646      	mov	r6, r8
 80107c6:	9a08      	ldr	r2, [sp, #32]
 80107c8:	2101      	movs	r1, #1
 80107ca:	441a      	add	r2, r3
 80107cc:	4658      	mov	r0, fp
 80107ce:	4498      	add	r8, r3
 80107d0:	9208      	str	r2, [sp, #32]
 80107d2:	f000 fb73 	bl	8010ebc <__i2b>
 80107d6:	4605      	mov	r5, r0
 80107d8:	b15e      	cbz	r6, 80107f2 <_dtoa_r+0x74a>
 80107da:	9b08      	ldr	r3, [sp, #32]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	dd08      	ble.n	80107f2 <_dtoa_r+0x74a>
 80107e0:	42b3      	cmp	r3, r6
 80107e2:	9a08      	ldr	r2, [sp, #32]
 80107e4:	bfa8      	it	ge
 80107e6:	4633      	movge	r3, r6
 80107e8:	eba8 0803 	sub.w	r8, r8, r3
 80107ec:	1af6      	subs	r6, r6, r3
 80107ee:	1ad3      	subs	r3, r2, r3
 80107f0:	9308      	str	r3, [sp, #32]
 80107f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80107f4:	b1f3      	cbz	r3, 8010834 <_dtoa_r+0x78c>
 80107f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	f000 80b7 	beq.w	801096c <_dtoa_r+0x8c4>
 80107fe:	b18c      	cbz	r4, 8010824 <_dtoa_r+0x77c>
 8010800:	4629      	mov	r1, r5
 8010802:	4622      	mov	r2, r4
 8010804:	4658      	mov	r0, fp
 8010806:	f000 fc19 	bl	801103c <__pow5mult>
 801080a:	464a      	mov	r2, r9
 801080c:	4601      	mov	r1, r0
 801080e:	4605      	mov	r5, r0
 8010810:	4658      	mov	r0, fp
 8010812:	f000 fb69 	bl	8010ee8 <__multiply>
 8010816:	4649      	mov	r1, r9
 8010818:	9004      	str	r0, [sp, #16]
 801081a:	4658      	mov	r0, fp
 801081c:	f000 fa9a 	bl	8010d54 <_Bfree>
 8010820:	9b04      	ldr	r3, [sp, #16]
 8010822:	4699      	mov	r9, r3
 8010824:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010826:	1b1a      	subs	r2, r3, r4
 8010828:	d004      	beq.n	8010834 <_dtoa_r+0x78c>
 801082a:	4649      	mov	r1, r9
 801082c:	4658      	mov	r0, fp
 801082e:	f000 fc05 	bl	801103c <__pow5mult>
 8010832:	4681      	mov	r9, r0
 8010834:	2101      	movs	r1, #1
 8010836:	4658      	mov	r0, fp
 8010838:	f000 fb40 	bl	8010ebc <__i2b>
 801083c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801083e:	4604      	mov	r4, r0
 8010840:	2b00      	cmp	r3, #0
 8010842:	f000 81cf 	beq.w	8010be4 <_dtoa_r+0xb3c>
 8010846:	461a      	mov	r2, r3
 8010848:	4601      	mov	r1, r0
 801084a:	4658      	mov	r0, fp
 801084c:	f000 fbf6 	bl	801103c <__pow5mult>
 8010850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010852:	2b01      	cmp	r3, #1
 8010854:	4604      	mov	r4, r0
 8010856:	f300 8095 	bgt.w	8010984 <_dtoa_r+0x8dc>
 801085a:	9b02      	ldr	r3, [sp, #8]
 801085c:	2b00      	cmp	r3, #0
 801085e:	f040 8087 	bne.w	8010970 <_dtoa_r+0x8c8>
 8010862:	9b03      	ldr	r3, [sp, #12]
 8010864:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010868:	2b00      	cmp	r3, #0
 801086a:	f040 8089 	bne.w	8010980 <_dtoa_r+0x8d8>
 801086e:	9b03      	ldr	r3, [sp, #12]
 8010870:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010874:	0d1b      	lsrs	r3, r3, #20
 8010876:	051b      	lsls	r3, r3, #20
 8010878:	b12b      	cbz	r3, 8010886 <_dtoa_r+0x7de>
 801087a:	9b08      	ldr	r3, [sp, #32]
 801087c:	3301      	adds	r3, #1
 801087e:	9308      	str	r3, [sp, #32]
 8010880:	f108 0801 	add.w	r8, r8, #1
 8010884:	2301      	movs	r3, #1
 8010886:	930a      	str	r3, [sp, #40]	@ 0x28
 8010888:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801088a:	2b00      	cmp	r3, #0
 801088c:	f000 81b0 	beq.w	8010bf0 <_dtoa_r+0xb48>
 8010890:	6923      	ldr	r3, [r4, #16]
 8010892:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010896:	6918      	ldr	r0, [r3, #16]
 8010898:	f000 fac4 	bl	8010e24 <__hi0bits>
 801089c:	f1c0 0020 	rsb	r0, r0, #32
 80108a0:	9b08      	ldr	r3, [sp, #32]
 80108a2:	4418      	add	r0, r3
 80108a4:	f010 001f 	ands.w	r0, r0, #31
 80108a8:	d077      	beq.n	801099a <_dtoa_r+0x8f2>
 80108aa:	f1c0 0320 	rsb	r3, r0, #32
 80108ae:	2b04      	cmp	r3, #4
 80108b0:	dd6b      	ble.n	801098a <_dtoa_r+0x8e2>
 80108b2:	9b08      	ldr	r3, [sp, #32]
 80108b4:	f1c0 001c 	rsb	r0, r0, #28
 80108b8:	4403      	add	r3, r0
 80108ba:	4480      	add	r8, r0
 80108bc:	4406      	add	r6, r0
 80108be:	9308      	str	r3, [sp, #32]
 80108c0:	f1b8 0f00 	cmp.w	r8, #0
 80108c4:	dd05      	ble.n	80108d2 <_dtoa_r+0x82a>
 80108c6:	4649      	mov	r1, r9
 80108c8:	4642      	mov	r2, r8
 80108ca:	4658      	mov	r0, fp
 80108cc:	f000 fc10 	bl	80110f0 <__lshift>
 80108d0:	4681      	mov	r9, r0
 80108d2:	9b08      	ldr	r3, [sp, #32]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	dd05      	ble.n	80108e4 <_dtoa_r+0x83c>
 80108d8:	4621      	mov	r1, r4
 80108da:	461a      	mov	r2, r3
 80108dc:	4658      	mov	r0, fp
 80108de:	f000 fc07 	bl	80110f0 <__lshift>
 80108e2:	4604      	mov	r4, r0
 80108e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d059      	beq.n	801099e <_dtoa_r+0x8f6>
 80108ea:	4621      	mov	r1, r4
 80108ec:	4648      	mov	r0, r9
 80108ee:	f000 fc6b 	bl	80111c8 <__mcmp>
 80108f2:	2800      	cmp	r0, #0
 80108f4:	da53      	bge.n	801099e <_dtoa_r+0x8f6>
 80108f6:	1e7b      	subs	r3, r7, #1
 80108f8:	9304      	str	r3, [sp, #16]
 80108fa:	4649      	mov	r1, r9
 80108fc:	2300      	movs	r3, #0
 80108fe:	220a      	movs	r2, #10
 8010900:	4658      	mov	r0, fp
 8010902:	f000 fa49 	bl	8010d98 <__multadd>
 8010906:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010908:	4681      	mov	r9, r0
 801090a:	2b00      	cmp	r3, #0
 801090c:	f000 8172 	beq.w	8010bf4 <_dtoa_r+0xb4c>
 8010910:	2300      	movs	r3, #0
 8010912:	4629      	mov	r1, r5
 8010914:	220a      	movs	r2, #10
 8010916:	4658      	mov	r0, fp
 8010918:	f000 fa3e 	bl	8010d98 <__multadd>
 801091c:	9b00      	ldr	r3, [sp, #0]
 801091e:	2b00      	cmp	r3, #0
 8010920:	4605      	mov	r5, r0
 8010922:	dc67      	bgt.n	80109f4 <_dtoa_r+0x94c>
 8010924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010926:	2b02      	cmp	r3, #2
 8010928:	dc41      	bgt.n	80109ae <_dtoa_r+0x906>
 801092a:	e063      	b.n	80109f4 <_dtoa_r+0x94c>
 801092c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801092e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010932:	e746      	b.n	80107c2 <_dtoa_r+0x71a>
 8010934:	9b07      	ldr	r3, [sp, #28]
 8010936:	1e5c      	subs	r4, r3, #1
 8010938:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801093a:	42a3      	cmp	r3, r4
 801093c:	bfbf      	itttt	lt
 801093e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010940:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8010942:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010944:	1ae3      	sublt	r3, r4, r3
 8010946:	bfb4      	ite	lt
 8010948:	18d2      	addlt	r2, r2, r3
 801094a:	1b1c      	subge	r4, r3, r4
 801094c:	9b07      	ldr	r3, [sp, #28]
 801094e:	bfbc      	itt	lt
 8010950:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8010952:	2400      	movlt	r4, #0
 8010954:	2b00      	cmp	r3, #0
 8010956:	bfb5      	itete	lt
 8010958:	eba8 0603 	sublt.w	r6, r8, r3
 801095c:	9b07      	ldrge	r3, [sp, #28]
 801095e:	2300      	movlt	r3, #0
 8010960:	4646      	movge	r6, r8
 8010962:	e730      	b.n	80107c6 <_dtoa_r+0x71e>
 8010964:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010966:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010968:	4646      	mov	r6, r8
 801096a:	e735      	b.n	80107d8 <_dtoa_r+0x730>
 801096c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801096e:	e75c      	b.n	801082a <_dtoa_r+0x782>
 8010970:	2300      	movs	r3, #0
 8010972:	e788      	b.n	8010886 <_dtoa_r+0x7de>
 8010974:	3fe00000 	.word	0x3fe00000
 8010978:	40240000 	.word	0x40240000
 801097c:	40140000 	.word	0x40140000
 8010980:	9b02      	ldr	r3, [sp, #8]
 8010982:	e780      	b.n	8010886 <_dtoa_r+0x7de>
 8010984:	2300      	movs	r3, #0
 8010986:	930a      	str	r3, [sp, #40]	@ 0x28
 8010988:	e782      	b.n	8010890 <_dtoa_r+0x7e8>
 801098a:	d099      	beq.n	80108c0 <_dtoa_r+0x818>
 801098c:	9a08      	ldr	r2, [sp, #32]
 801098e:	331c      	adds	r3, #28
 8010990:	441a      	add	r2, r3
 8010992:	4498      	add	r8, r3
 8010994:	441e      	add	r6, r3
 8010996:	9208      	str	r2, [sp, #32]
 8010998:	e792      	b.n	80108c0 <_dtoa_r+0x818>
 801099a:	4603      	mov	r3, r0
 801099c:	e7f6      	b.n	801098c <_dtoa_r+0x8e4>
 801099e:	9b07      	ldr	r3, [sp, #28]
 80109a0:	9704      	str	r7, [sp, #16]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	dc20      	bgt.n	80109e8 <_dtoa_r+0x940>
 80109a6:	9300      	str	r3, [sp, #0]
 80109a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109aa:	2b02      	cmp	r3, #2
 80109ac:	dd1e      	ble.n	80109ec <_dtoa_r+0x944>
 80109ae:	9b00      	ldr	r3, [sp, #0]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	f47f aec0 	bne.w	8010736 <_dtoa_r+0x68e>
 80109b6:	4621      	mov	r1, r4
 80109b8:	2205      	movs	r2, #5
 80109ba:	4658      	mov	r0, fp
 80109bc:	f000 f9ec 	bl	8010d98 <__multadd>
 80109c0:	4601      	mov	r1, r0
 80109c2:	4604      	mov	r4, r0
 80109c4:	4648      	mov	r0, r9
 80109c6:	f000 fbff 	bl	80111c8 <__mcmp>
 80109ca:	2800      	cmp	r0, #0
 80109cc:	f77f aeb3 	ble.w	8010736 <_dtoa_r+0x68e>
 80109d0:	4656      	mov	r6, sl
 80109d2:	2331      	movs	r3, #49	@ 0x31
 80109d4:	f806 3b01 	strb.w	r3, [r6], #1
 80109d8:	9b04      	ldr	r3, [sp, #16]
 80109da:	3301      	adds	r3, #1
 80109dc:	9304      	str	r3, [sp, #16]
 80109de:	e6ae      	b.n	801073e <_dtoa_r+0x696>
 80109e0:	9c07      	ldr	r4, [sp, #28]
 80109e2:	9704      	str	r7, [sp, #16]
 80109e4:	4625      	mov	r5, r4
 80109e6:	e7f3      	b.n	80109d0 <_dtoa_r+0x928>
 80109e8:	9b07      	ldr	r3, [sp, #28]
 80109ea:	9300      	str	r3, [sp, #0]
 80109ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	f000 8104 	beq.w	8010bfc <_dtoa_r+0xb54>
 80109f4:	2e00      	cmp	r6, #0
 80109f6:	dd05      	ble.n	8010a04 <_dtoa_r+0x95c>
 80109f8:	4629      	mov	r1, r5
 80109fa:	4632      	mov	r2, r6
 80109fc:	4658      	mov	r0, fp
 80109fe:	f000 fb77 	bl	80110f0 <__lshift>
 8010a02:	4605      	mov	r5, r0
 8010a04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d05a      	beq.n	8010ac0 <_dtoa_r+0xa18>
 8010a0a:	6869      	ldr	r1, [r5, #4]
 8010a0c:	4658      	mov	r0, fp
 8010a0e:	f000 f961 	bl	8010cd4 <_Balloc>
 8010a12:	4606      	mov	r6, r0
 8010a14:	b928      	cbnz	r0, 8010a22 <_dtoa_r+0x97a>
 8010a16:	4b84      	ldr	r3, [pc, #528]	@ (8010c28 <_dtoa_r+0xb80>)
 8010a18:	4602      	mov	r2, r0
 8010a1a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010a1e:	f7ff bb5a 	b.w	80100d6 <_dtoa_r+0x2e>
 8010a22:	692a      	ldr	r2, [r5, #16]
 8010a24:	3202      	adds	r2, #2
 8010a26:	0092      	lsls	r2, r2, #2
 8010a28:	f105 010c 	add.w	r1, r5, #12
 8010a2c:	300c      	adds	r0, #12
 8010a2e:	f7fe fb41 	bl	800f0b4 <memcpy>
 8010a32:	2201      	movs	r2, #1
 8010a34:	4631      	mov	r1, r6
 8010a36:	4658      	mov	r0, fp
 8010a38:	f000 fb5a 	bl	80110f0 <__lshift>
 8010a3c:	f10a 0301 	add.w	r3, sl, #1
 8010a40:	9307      	str	r3, [sp, #28]
 8010a42:	9b00      	ldr	r3, [sp, #0]
 8010a44:	4453      	add	r3, sl
 8010a46:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010a48:	9b02      	ldr	r3, [sp, #8]
 8010a4a:	f003 0301 	and.w	r3, r3, #1
 8010a4e:	462f      	mov	r7, r5
 8010a50:	930a      	str	r3, [sp, #40]	@ 0x28
 8010a52:	4605      	mov	r5, r0
 8010a54:	9b07      	ldr	r3, [sp, #28]
 8010a56:	4621      	mov	r1, r4
 8010a58:	3b01      	subs	r3, #1
 8010a5a:	4648      	mov	r0, r9
 8010a5c:	9300      	str	r3, [sp, #0]
 8010a5e:	f7ff fa9b 	bl	800ff98 <quorem>
 8010a62:	4639      	mov	r1, r7
 8010a64:	9002      	str	r0, [sp, #8]
 8010a66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010a6a:	4648      	mov	r0, r9
 8010a6c:	f000 fbac 	bl	80111c8 <__mcmp>
 8010a70:	462a      	mov	r2, r5
 8010a72:	9008      	str	r0, [sp, #32]
 8010a74:	4621      	mov	r1, r4
 8010a76:	4658      	mov	r0, fp
 8010a78:	f000 fbc2 	bl	8011200 <__mdiff>
 8010a7c:	68c2      	ldr	r2, [r0, #12]
 8010a7e:	4606      	mov	r6, r0
 8010a80:	bb02      	cbnz	r2, 8010ac4 <_dtoa_r+0xa1c>
 8010a82:	4601      	mov	r1, r0
 8010a84:	4648      	mov	r0, r9
 8010a86:	f000 fb9f 	bl	80111c8 <__mcmp>
 8010a8a:	4602      	mov	r2, r0
 8010a8c:	4631      	mov	r1, r6
 8010a8e:	4658      	mov	r0, fp
 8010a90:	920e      	str	r2, [sp, #56]	@ 0x38
 8010a92:	f000 f95f 	bl	8010d54 <_Bfree>
 8010a96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010a9a:	9e07      	ldr	r6, [sp, #28]
 8010a9c:	ea43 0102 	orr.w	r1, r3, r2
 8010aa0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010aa2:	4319      	orrs	r1, r3
 8010aa4:	d110      	bne.n	8010ac8 <_dtoa_r+0xa20>
 8010aa6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010aaa:	d029      	beq.n	8010b00 <_dtoa_r+0xa58>
 8010aac:	9b08      	ldr	r3, [sp, #32]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	dd02      	ble.n	8010ab8 <_dtoa_r+0xa10>
 8010ab2:	9b02      	ldr	r3, [sp, #8]
 8010ab4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010ab8:	9b00      	ldr	r3, [sp, #0]
 8010aba:	f883 8000 	strb.w	r8, [r3]
 8010abe:	e63f      	b.n	8010740 <_dtoa_r+0x698>
 8010ac0:	4628      	mov	r0, r5
 8010ac2:	e7bb      	b.n	8010a3c <_dtoa_r+0x994>
 8010ac4:	2201      	movs	r2, #1
 8010ac6:	e7e1      	b.n	8010a8c <_dtoa_r+0x9e4>
 8010ac8:	9b08      	ldr	r3, [sp, #32]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	db04      	blt.n	8010ad8 <_dtoa_r+0xa30>
 8010ace:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010ad0:	430b      	orrs	r3, r1
 8010ad2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010ad4:	430b      	orrs	r3, r1
 8010ad6:	d120      	bne.n	8010b1a <_dtoa_r+0xa72>
 8010ad8:	2a00      	cmp	r2, #0
 8010ada:	dded      	ble.n	8010ab8 <_dtoa_r+0xa10>
 8010adc:	4649      	mov	r1, r9
 8010ade:	2201      	movs	r2, #1
 8010ae0:	4658      	mov	r0, fp
 8010ae2:	f000 fb05 	bl	80110f0 <__lshift>
 8010ae6:	4621      	mov	r1, r4
 8010ae8:	4681      	mov	r9, r0
 8010aea:	f000 fb6d 	bl	80111c8 <__mcmp>
 8010aee:	2800      	cmp	r0, #0
 8010af0:	dc03      	bgt.n	8010afa <_dtoa_r+0xa52>
 8010af2:	d1e1      	bne.n	8010ab8 <_dtoa_r+0xa10>
 8010af4:	f018 0f01 	tst.w	r8, #1
 8010af8:	d0de      	beq.n	8010ab8 <_dtoa_r+0xa10>
 8010afa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010afe:	d1d8      	bne.n	8010ab2 <_dtoa_r+0xa0a>
 8010b00:	9a00      	ldr	r2, [sp, #0]
 8010b02:	2339      	movs	r3, #57	@ 0x39
 8010b04:	7013      	strb	r3, [r2, #0]
 8010b06:	4633      	mov	r3, r6
 8010b08:	461e      	mov	r6, r3
 8010b0a:	3b01      	subs	r3, #1
 8010b0c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010b10:	2a39      	cmp	r2, #57	@ 0x39
 8010b12:	d052      	beq.n	8010bba <_dtoa_r+0xb12>
 8010b14:	3201      	adds	r2, #1
 8010b16:	701a      	strb	r2, [r3, #0]
 8010b18:	e612      	b.n	8010740 <_dtoa_r+0x698>
 8010b1a:	2a00      	cmp	r2, #0
 8010b1c:	dd07      	ble.n	8010b2e <_dtoa_r+0xa86>
 8010b1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010b22:	d0ed      	beq.n	8010b00 <_dtoa_r+0xa58>
 8010b24:	9a00      	ldr	r2, [sp, #0]
 8010b26:	f108 0301 	add.w	r3, r8, #1
 8010b2a:	7013      	strb	r3, [r2, #0]
 8010b2c:	e608      	b.n	8010740 <_dtoa_r+0x698>
 8010b2e:	9b07      	ldr	r3, [sp, #28]
 8010b30:	9a07      	ldr	r2, [sp, #28]
 8010b32:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010b36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b38:	4293      	cmp	r3, r2
 8010b3a:	d028      	beq.n	8010b8e <_dtoa_r+0xae6>
 8010b3c:	4649      	mov	r1, r9
 8010b3e:	2300      	movs	r3, #0
 8010b40:	220a      	movs	r2, #10
 8010b42:	4658      	mov	r0, fp
 8010b44:	f000 f928 	bl	8010d98 <__multadd>
 8010b48:	42af      	cmp	r7, r5
 8010b4a:	4681      	mov	r9, r0
 8010b4c:	f04f 0300 	mov.w	r3, #0
 8010b50:	f04f 020a 	mov.w	r2, #10
 8010b54:	4639      	mov	r1, r7
 8010b56:	4658      	mov	r0, fp
 8010b58:	d107      	bne.n	8010b6a <_dtoa_r+0xac2>
 8010b5a:	f000 f91d 	bl	8010d98 <__multadd>
 8010b5e:	4607      	mov	r7, r0
 8010b60:	4605      	mov	r5, r0
 8010b62:	9b07      	ldr	r3, [sp, #28]
 8010b64:	3301      	adds	r3, #1
 8010b66:	9307      	str	r3, [sp, #28]
 8010b68:	e774      	b.n	8010a54 <_dtoa_r+0x9ac>
 8010b6a:	f000 f915 	bl	8010d98 <__multadd>
 8010b6e:	4629      	mov	r1, r5
 8010b70:	4607      	mov	r7, r0
 8010b72:	2300      	movs	r3, #0
 8010b74:	220a      	movs	r2, #10
 8010b76:	4658      	mov	r0, fp
 8010b78:	f000 f90e 	bl	8010d98 <__multadd>
 8010b7c:	4605      	mov	r5, r0
 8010b7e:	e7f0      	b.n	8010b62 <_dtoa_r+0xaba>
 8010b80:	9b00      	ldr	r3, [sp, #0]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	bfcc      	ite	gt
 8010b86:	461e      	movgt	r6, r3
 8010b88:	2601      	movle	r6, #1
 8010b8a:	4456      	add	r6, sl
 8010b8c:	2700      	movs	r7, #0
 8010b8e:	4649      	mov	r1, r9
 8010b90:	2201      	movs	r2, #1
 8010b92:	4658      	mov	r0, fp
 8010b94:	f000 faac 	bl	80110f0 <__lshift>
 8010b98:	4621      	mov	r1, r4
 8010b9a:	4681      	mov	r9, r0
 8010b9c:	f000 fb14 	bl	80111c8 <__mcmp>
 8010ba0:	2800      	cmp	r0, #0
 8010ba2:	dcb0      	bgt.n	8010b06 <_dtoa_r+0xa5e>
 8010ba4:	d102      	bne.n	8010bac <_dtoa_r+0xb04>
 8010ba6:	f018 0f01 	tst.w	r8, #1
 8010baa:	d1ac      	bne.n	8010b06 <_dtoa_r+0xa5e>
 8010bac:	4633      	mov	r3, r6
 8010bae:	461e      	mov	r6, r3
 8010bb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010bb4:	2a30      	cmp	r2, #48	@ 0x30
 8010bb6:	d0fa      	beq.n	8010bae <_dtoa_r+0xb06>
 8010bb8:	e5c2      	b.n	8010740 <_dtoa_r+0x698>
 8010bba:	459a      	cmp	sl, r3
 8010bbc:	d1a4      	bne.n	8010b08 <_dtoa_r+0xa60>
 8010bbe:	9b04      	ldr	r3, [sp, #16]
 8010bc0:	3301      	adds	r3, #1
 8010bc2:	9304      	str	r3, [sp, #16]
 8010bc4:	2331      	movs	r3, #49	@ 0x31
 8010bc6:	f88a 3000 	strb.w	r3, [sl]
 8010bca:	e5b9      	b.n	8010740 <_dtoa_r+0x698>
 8010bcc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010bce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010c2c <_dtoa_r+0xb84>
 8010bd2:	b11b      	cbz	r3, 8010bdc <_dtoa_r+0xb34>
 8010bd4:	f10a 0308 	add.w	r3, sl, #8
 8010bd8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010bda:	6013      	str	r3, [r2, #0]
 8010bdc:	4650      	mov	r0, sl
 8010bde:	b019      	add	sp, #100	@ 0x64
 8010be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010be4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010be6:	2b01      	cmp	r3, #1
 8010be8:	f77f ae37 	ble.w	801085a <_dtoa_r+0x7b2>
 8010bec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010bee:	930a      	str	r3, [sp, #40]	@ 0x28
 8010bf0:	2001      	movs	r0, #1
 8010bf2:	e655      	b.n	80108a0 <_dtoa_r+0x7f8>
 8010bf4:	9b00      	ldr	r3, [sp, #0]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	f77f aed6 	ble.w	80109a8 <_dtoa_r+0x900>
 8010bfc:	4656      	mov	r6, sl
 8010bfe:	4621      	mov	r1, r4
 8010c00:	4648      	mov	r0, r9
 8010c02:	f7ff f9c9 	bl	800ff98 <quorem>
 8010c06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010c0a:	f806 8b01 	strb.w	r8, [r6], #1
 8010c0e:	9b00      	ldr	r3, [sp, #0]
 8010c10:	eba6 020a 	sub.w	r2, r6, sl
 8010c14:	4293      	cmp	r3, r2
 8010c16:	ddb3      	ble.n	8010b80 <_dtoa_r+0xad8>
 8010c18:	4649      	mov	r1, r9
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	220a      	movs	r2, #10
 8010c1e:	4658      	mov	r0, fp
 8010c20:	f000 f8ba 	bl	8010d98 <__multadd>
 8010c24:	4681      	mov	r9, r0
 8010c26:	e7ea      	b.n	8010bfe <_dtoa_r+0xb56>
 8010c28:	08012ee9 	.word	0x08012ee9
 8010c2c:	08012e6b 	.word	0x08012e6b

08010c30 <_free_r>:
 8010c30:	b538      	push	{r3, r4, r5, lr}
 8010c32:	4605      	mov	r5, r0
 8010c34:	2900      	cmp	r1, #0
 8010c36:	d041      	beq.n	8010cbc <_free_r+0x8c>
 8010c38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c3c:	1f0c      	subs	r4, r1, #4
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	bfb8      	it	lt
 8010c42:	18e4      	addlt	r4, r4, r3
 8010c44:	f7fe fe68 	bl	800f918 <__malloc_lock>
 8010c48:	4a1d      	ldr	r2, [pc, #116]	@ (8010cc0 <_free_r+0x90>)
 8010c4a:	6813      	ldr	r3, [r2, #0]
 8010c4c:	b933      	cbnz	r3, 8010c5c <_free_r+0x2c>
 8010c4e:	6063      	str	r3, [r4, #4]
 8010c50:	6014      	str	r4, [r2, #0]
 8010c52:	4628      	mov	r0, r5
 8010c54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c58:	f7fe be64 	b.w	800f924 <__malloc_unlock>
 8010c5c:	42a3      	cmp	r3, r4
 8010c5e:	d908      	bls.n	8010c72 <_free_r+0x42>
 8010c60:	6820      	ldr	r0, [r4, #0]
 8010c62:	1821      	adds	r1, r4, r0
 8010c64:	428b      	cmp	r3, r1
 8010c66:	bf01      	itttt	eq
 8010c68:	6819      	ldreq	r1, [r3, #0]
 8010c6a:	685b      	ldreq	r3, [r3, #4]
 8010c6c:	1809      	addeq	r1, r1, r0
 8010c6e:	6021      	streq	r1, [r4, #0]
 8010c70:	e7ed      	b.n	8010c4e <_free_r+0x1e>
 8010c72:	461a      	mov	r2, r3
 8010c74:	685b      	ldr	r3, [r3, #4]
 8010c76:	b10b      	cbz	r3, 8010c7c <_free_r+0x4c>
 8010c78:	42a3      	cmp	r3, r4
 8010c7a:	d9fa      	bls.n	8010c72 <_free_r+0x42>
 8010c7c:	6811      	ldr	r1, [r2, #0]
 8010c7e:	1850      	adds	r0, r2, r1
 8010c80:	42a0      	cmp	r0, r4
 8010c82:	d10b      	bne.n	8010c9c <_free_r+0x6c>
 8010c84:	6820      	ldr	r0, [r4, #0]
 8010c86:	4401      	add	r1, r0
 8010c88:	1850      	adds	r0, r2, r1
 8010c8a:	4283      	cmp	r3, r0
 8010c8c:	6011      	str	r1, [r2, #0]
 8010c8e:	d1e0      	bne.n	8010c52 <_free_r+0x22>
 8010c90:	6818      	ldr	r0, [r3, #0]
 8010c92:	685b      	ldr	r3, [r3, #4]
 8010c94:	6053      	str	r3, [r2, #4]
 8010c96:	4408      	add	r0, r1
 8010c98:	6010      	str	r0, [r2, #0]
 8010c9a:	e7da      	b.n	8010c52 <_free_r+0x22>
 8010c9c:	d902      	bls.n	8010ca4 <_free_r+0x74>
 8010c9e:	230c      	movs	r3, #12
 8010ca0:	602b      	str	r3, [r5, #0]
 8010ca2:	e7d6      	b.n	8010c52 <_free_r+0x22>
 8010ca4:	6820      	ldr	r0, [r4, #0]
 8010ca6:	1821      	adds	r1, r4, r0
 8010ca8:	428b      	cmp	r3, r1
 8010caa:	bf04      	itt	eq
 8010cac:	6819      	ldreq	r1, [r3, #0]
 8010cae:	685b      	ldreq	r3, [r3, #4]
 8010cb0:	6063      	str	r3, [r4, #4]
 8010cb2:	bf04      	itt	eq
 8010cb4:	1809      	addeq	r1, r1, r0
 8010cb6:	6021      	streq	r1, [r4, #0]
 8010cb8:	6054      	str	r4, [r2, #4]
 8010cba:	e7ca      	b.n	8010c52 <_free_r+0x22>
 8010cbc:	bd38      	pop	{r3, r4, r5, pc}
 8010cbe:	bf00      	nop
 8010cc0:	2000083c 	.word	0x2000083c

08010cc4 <malloc>:
 8010cc4:	4b02      	ldr	r3, [pc, #8]	@ (8010cd0 <malloc+0xc>)
 8010cc6:	4601      	mov	r1, r0
 8010cc8:	6818      	ldr	r0, [r3, #0]
 8010cca:	f7fe bb6b 	b.w	800f3a4 <_malloc_r>
 8010cce:	bf00      	nop
 8010cd0:	20000074 	.word	0x20000074

08010cd4 <_Balloc>:
 8010cd4:	b570      	push	{r4, r5, r6, lr}
 8010cd6:	69c6      	ldr	r6, [r0, #28]
 8010cd8:	4604      	mov	r4, r0
 8010cda:	460d      	mov	r5, r1
 8010cdc:	b976      	cbnz	r6, 8010cfc <_Balloc+0x28>
 8010cde:	2010      	movs	r0, #16
 8010ce0:	f7ff fff0 	bl	8010cc4 <malloc>
 8010ce4:	4602      	mov	r2, r0
 8010ce6:	61e0      	str	r0, [r4, #28]
 8010ce8:	b920      	cbnz	r0, 8010cf4 <_Balloc+0x20>
 8010cea:	4b18      	ldr	r3, [pc, #96]	@ (8010d4c <_Balloc+0x78>)
 8010cec:	4818      	ldr	r0, [pc, #96]	@ (8010d50 <_Balloc+0x7c>)
 8010cee:	216b      	movs	r1, #107	@ 0x6b
 8010cf0:	f7fe f88c 	bl	800ee0c <__assert_func>
 8010cf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010cf8:	6006      	str	r6, [r0, #0]
 8010cfa:	60c6      	str	r6, [r0, #12]
 8010cfc:	69e6      	ldr	r6, [r4, #28]
 8010cfe:	68f3      	ldr	r3, [r6, #12]
 8010d00:	b183      	cbz	r3, 8010d24 <_Balloc+0x50>
 8010d02:	69e3      	ldr	r3, [r4, #28]
 8010d04:	68db      	ldr	r3, [r3, #12]
 8010d06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010d0a:	b9b8      	cbnz	r0, 8010d3c <_Balloc+0x68>
 8010d0c:	2101      	movs	r1, #1
 8010d0e:	fa01 f605 	lsl.w	r6, r1, r5
 8010d12:	1d72      	adds	r2, r6, #5
 8010d14:	0092      	lsls	r2, r2, #2
 8010d16:	4620      	mov	r0, r4
 8010d18:	f000 fb7c 	bl	8011414 <_calloc_r>
 8010d1c:	b160      	cbz	r0, 8010d38 <_Balloc+0x64>
 8010d1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010d22:	e00e      	b.n	8010d42 <_Balloc+0x6e>
 8010d24:	2221      	movs	r2, #33	@ 0x21
 8010d26:	2104      	movs	r1, #4
 8010d28:	4620      	mov	r0, r4
 8010d2a:	f000 fb73 	bl	8011414 <_calloc_r>
 8010d2e:	69e3      	ldr	r3, [r4, #28]
 8010d30:	60f0      	str	r0, [r6, #12]
 8010d32:	68db      	ldr	r3, [r3, #12]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d1e4      	bne.n	8010d02 <_Balloc+0x2e>
 8010d38:	2000      	movs	r0, #0
 8010d3a:	bd70      	pop	{r4, r5, r6, pc}
 8010d3c:	6802      	ldr	r2, [r0, #0]
 8010d3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010d42:	2300      	movs	r3, #0
 8010d44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010d48:	e7f7      	b.n	8010d3a <_Balloc+0x66>
 8010d4a:	bf00      	nop
 8010d4c:	08012e7a 	.word	0x08012e7a
 8010d50:	08012efa 	.word	0x08012efa

08010d54 <_Bfree>:
 8010d54:	b570      	push	{r4, r5, r6, lr}
 8010d56:	69c6      	ldr	r6, [r0, #28]
 8010d58:	4605      	mov	r5, r0
 8010d5a:	460c      	mov	r4, r1
 8010d5c:	b976      	cbnz	r6, 8010d7c <_Bfree+0x28>
 8010d5e:	2010      	movs	r0, #16
 8010d60:	f7ff ffb0 	bl	8010cc4 <malloc>
 8010d64:	4602      	mov	r2, r0
 8010d66:	61e8      	str	r0, [r5, #28]
 8010d68:	b920      	cbnz	r0, 8010d74 <_Bfree+0x20>
 8010d6a:	4b09      	ldr	r3, [pc, #36]	@ (8010d90 <_Bfree+0x3c>)
 8010d6c:	4809      	ldr	r0, [pc, #36]	@ (8010d94 <_Bfree+0x40>)
 8010d6e:	218f      	movs	r1, #143	@ 0x8f
 8010d70:	f7fe f84c 	bl	800ee0c <__assert_func>
 8010d74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010d78:	6006      	str	r6, [r0, #0]
 8010d7a:	60c6      	str	r6, [r0, #12]
 8010d7c:	b13c      	cbz	r4, 8010d8e <_Bfree+0x3a>
 8010d7e:	69eb      	ldr	r3, [r5, #28]
 8010d80:	6862      	ldr	r2, [r4, #4]
 8010d82:	68db      	ldr	r3, [r3, #12]
 8010d84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010d88:	6021      	str	r1, [r4, #0]
 8010d8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010d8e:	bd70      	pop	{r4, r5, r6, pc}
 8010d90:	08012e7a 	.word	0x08012e7a
 8010d94:	08012efa 	.word	0x08012efa

08010d98 <__multadd>:
 8010d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d9c:	690d      	ldr	r5, [r1, #16]
 8010d9e:	4607      	mov	r7, r0
 8010da0:	460c      	mov	r4, r1
 8010da2:	461e      	mov	r6, r3
 8010da4:	f101 0c14 	add.w	ip, r1, #20
 8010da8:	2000      	movs	r0, #0
 8010daa:	f8dc 3000 	ldr.w	r3, [ip]
 8010dae:	b299      	uxth	r1, r3
 8010db0:	fb02 6101 	mla	r1, r2, r1, r6
 8010db4:	0c1e      	lsrs	r6, r3, #16
 8010db6:	0c0b      	lsrs	r3, r1, #16
 8010db8:	fb02 3306 	mla	r3, r2, r6, r3
 8010dbc:	b289      	uxth	r1, r1
 8010dbe:	3001      	adds	r0, #1
 8010dc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010dc4:	4285      	cmp	r5, r0
 8010dc6:	f84c 1b04 	str.w	r1, [ip], #4
 8010dca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010dce:	dcec      	bgt.n	8010daa <__multadd+0x12>
 8010dd0:	b30e      	cbz	r6, 8010e16 <__multadd+0x7e>
 8010dd2:	68a3      	ldr	r3, [r4, #8]
 8010dd4:	42ab      	cmp	r3, r5
 8010dd6:	dc19      	bgt.n	8010e0c <__multadd+0x74>
 8010dd8:	6861      	ldr	r1, [r4, #4]
 8010dda:	4638      	mov	r0, r7
 8010ddc:	3101      	adds	r1, #1
 8010dde:	f7ff ff79 	bl	8010cd4 <_Balloc>
 8010de2:	4680      	mov	r8, r0
 8010de4:	b928      	cbnz	r0, 8010df2 <__multadd+0x5a>
 8010de6:	4602      	mov	r2, r0
 8010de8:	4b0c      	ldr	r3, [pc, #48]	@ (8010e1c <__multadd+0x84>)
 8010dea:	480d      	ldr	r0, [pc, #52]	@ (8010e20 <__multadd+0x88>)
 8010dec:	21ba      	movs	r1, #186	@ 0xba
 8010dee:	f7fe f80d 	bl	800ee0c <__assert_func>
 8010df2:	6922      	ldr	r2, [r4, #16]
 8010df4:	3202      	adds	r2, #2
 8010df6:	f104 010c 	add.w	r1, r4, #12
 8010dfa:	0092      	lsls	r2, r2, #2
 8010dfc:	300c      	adds	r0, #12
 8010dfe:	f7fe f959 	bl	800f0b4 <memcpy>
 8010e02:	4621      	mov	r1, r4
 8010e04:	4638      	mov	r0, r7
 8010e06:	f7ff ffa5 	bl	8010d54 <_Bfree>
 8010e0a:	4644      	mov	r4, r8
 8010e0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010e10:	3501      	adds	r5, #1
 8010e12:	615e      	str	r6, [r3, #20]
 8010e14:	6125      	str	r5, [r4, #16]
 8010e16:	4620      	mov	r0, r4
 8010e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e1c:	08012ee9 	.word	0x08012ee9
 8010e20:	08012efa 	.word	0x08012efa

08010e24 <__hi0bits>:
 8010e24:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010e28:	4603      	mov	r3, r0
 8010e2a:	bf36      	itet	cc
 8010e2c:	0403      	lslcc	r3, r0, #16
 8010e2e:	2000      	movcs	r0, #0
 8010e30:	2010      	movcc	r0, #16
 8010e32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010e36:	bf3c      	itt	cc
 8010e38:	021b      	lslcc	r3, r3, #8
 8010e3a:	3008      	addcc	r0, #8
 8010e3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010e40:	bf3c      	itt	cc
 8010e42:	011b      	lslcc	r3, r3, #4
 8010e44:	3004      	addcc	r0, #4
 8010e46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010e4a:	bf3c      	itt	cc
 8010e4c:	009b      	lslcc	r3, r3, #2
 8010e4e:	3002      	addcc	r0, #2
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	db05      	blt.n	8010e60 <__hi0bits+0x3c>
 8010e54:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010e58:	f100 0001 	add.w	r0, r0, #1
 8010e5c:	bf08      	it	eq
 8010e5e:	2020      	moveq	r0, #32
 8010e60:	4770      	bx	lr

08010e62 <__lo0bits>:
 8010e62:	6803      	ldr	r3, [r0, #0]
 8010e64:	4602      	mov	r2, r0
 8010e66:	f013 0007 	ands.w	r0, r3, #7
 8010e6a:	d00b      	beq.n	8010e84 <__lo0bits+0x22>
 8010e6c:	07d9      	lsls	r1, r3, #31
 8010e6e:	d421      	bmi.n	8010eb4 <__lo0bits+0x52>
 8010e70:	0798      	lsls	r0, r3, #30
 8010e72:	bf49      	itett	mi
 8010e74:	085b      	lsrmi	r3, r3, #1
 8010e76:	089b      	lsrpl	r3, r3, #2
 8010e78:	2001      	movmi	r0, #1
 8010e7a:	6013      	strmi	r3, [r2, #0]
 8010e7c:	bf5c      	itt	pl
 8010e7e:	6013      	strpl	r3, [r2, #0]
 8010e80:	2002      	movpl	r0, #2
 8010e82:	4770      	bx	lr
 8010e84:	b299      	uxth	r1, r3
 8010e86:	b909      	cbnz	r1, 8010e8c <__lo0bits+0x2a>
 8010e88:	0c1b      	lsrs	r3, r3, #16
 8010e8a:	2010      	movs	r0, #16
 8010e8c:	b2d9      	uxtb	r1, r3
 8010e8e:	b909      	cbnz	r1, 8010e94 <__lo0bits+0x32>
 8010e90:	3008      	adds	r0, #8
 8010e92:	0a1b      	lsrs	r3, r3, #8
 8010e94:	0719      	lsls	r1, r3, #28
 8010e96:	bf04      	itt	eq
 8010e98:	091b      	lsreq	r3, r3, #4
 8010e9a:	3004      	addeq	r0, #4
 8010e9c:	0799      	lsls	r1, r3, #30
 8010e9e:	bf04      	itt	eq
 8010ea0:	089b      	lsreq	r3, r3, #2
 8010ea2:	3002      	addeq	r0, #2
 8010ea4:	07d9      	lsls	r1, r3, #31
 8010ea6:	d403      	bmi.n	8010eb0 <__lo0bits+0x4e>
 8010ea8:	085b      	lsrs	r3, r3, #1
 8010eaa:	f100 0001 	add.w	r0, r0, #1
 8010eae:	d003      	beq.n	8010eb8 <__lo0bits+0x56>
 8010eb0:	6013      	str	r3, [r2, #0]
 8010eb2:	4770      	bx	lr
 8010eb4:	2000      	movs	r0, #0
 8010eb6:	4770      	bx	lr
 8010eb8:	2020      	movs	r0, #32
 8010eba:	4770      	bx	lr

08010ebc <__i2b>:
 8010ebc:	b510      	push	{r4, lr}
 8010ebe:	460c      	mov	r4, r1
 8010ec0:	2101      	movs	r1, #1
 8010ec2:	f7ff ff07 	bl	8010cd4 <_Balloc>
 8010ec6:	4602      	mov	r2, r0
 8010ec8:	b928      	cbnz	r0, 8010ed6 <__i2b+0x1a>
 8010eca:	4b05      	ldr	r3, [pc, #20]	@ (8010ee0 <__i2b+0x24>)
 8010ecc:	4805      	ldr	r0, [pc, #20]	@ (8010ee4 <__i2b+0x28>)
 8010ece:	f240 1145 	movw	r1, #325	@ 0x145
 8010ed2:	f7fd ff9b 	bl	800ee0c <__assert_func>
 8010ed6:	2301      	movs	r3, #1
 8010ed8:	6144      	str	r4, [r0, #20]
 8010eda:	6103      	str	r3, [r0, #16]
 8010edc:	bd10      	pop	{r4, pc}
 8010ede:	bf00      	nop
 8010ee0:	08012ee9 	.word	0x08012ee9
 8010ee4:	08012efa 	.word	0x08012efa

08010ee8 <__multiply>:
 8010ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eec:	4614      	mov	r4, r2
 8010eee:	690a      	ldr	r2, [r1, #16]
 8010ef0:	6923      	ldr	r3, [r4, #16]
 8010ef2:	429a      	cmp	r2, r3
 8010ef4:	bfa8      	it	ge
 8010ef6:	4623      	movge	r3, r4
 8010ef8:	460f      	mov	r7, r1
 8010efa:	bfa4      	itt	ge
 8010efc:	460c      	movge	r4, r1
 8010efe:	461f      	movge	r7, r3
 8010f00:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010f04:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010f08:	68a3      	ldr	r3, [r4, #8]
 8010f0a:	6861      	ldr	r1, [r4, #4]
 8010f0c:	eb0a 0609 	add.w	r6, sl, r9
 8010f10:	42b3      	cmp	r3, r6
 8010f12:	b085      	sub	sp, #20
 8010f14:	bfb8      	it	lt
 8010f16:	3101      	addlt	r1, #1
 8010f18:	f7ff fedc 	bl	8010cd4 <_Balloc>
 8010f1c:	b930      	cbnz	r0, 8010f2c <__multiply+0x44>
 8010f1e:	4602      	mov	r2, r0
 8010f20:	4b44      	ldr	r3, [pc, #272]	@ (8011034 <__multiply+0x14c>)
 8010f22:	4845      	ldr	r0, [pc, #276]	@ (8011038 <__multiply+0x150>)
 8010f24:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010f28:	f7fd ff70 	bl	800ee0c <__assert_func>
 8010f2c:	f100 0514 	add.w	r5, r0, #20
 8010f30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010f34:	462b      	mov	r3, r5
 8010f36:	2200      	movs	r2, #0
 8010f38:	4543      	cmp	r3, r8
 8010f3a:	d321      	bcc.n	8010f80 <__multiply+0x98>
 8010f3c:	f107 0114 	add.w	r1, r7, #20
 8010f40:	f104 0214 	add.w	r2, r4, #20
 8010f44:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010f48:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010f4c:	9302      	str	r3, [sp, #8]
 8010f4e:	1b13      	subs	r3, r2, r4
 8010f50:	3b15      	subs	r3, #21
 8010f52:	f023 0303 	bic.w	r3, r3, #3
 8010f56:	3304      	adds	r3, #4
 8010f58:	f104 0715 	add.w	r7, r4, #21
 8010f5c:	42ba      	cmp	r2, r7
 8010f5e:	bf38      	it	cc
 8010f60:	2304      	movcc	r3, #4
 8010f62:	9301      	str	r3, [sp, #4]
 8010f64:	9b02      	ldr	r3, [sp, #8]
 8010f66:	9103      	str	r1, [sp, #12]
 8010f68:	428b      	cmp	r3, r1
 8010f6a:	d80c      	bhi.n	8010f86 <__multiply+0x9e>
 8010f6c:	2e00      	cmp	r6, #0
 8010f6e:	dd03      	ble.n	8010f78 <__multiply+0x90>
 8010f70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d05b      	beq.n	8011030 <__multiply+0x148>
 8010f78:	6106      	str	r6, [r0, #16]
 8010f7a:	b005      	add	sp, #20
 8010f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f80:	f843 2b04 	str.w	r2, [r3], #4
 8010f84:	e7d8      	b.n	8010f38 <__multiply+0x50>
 8010f86:	f8b1 a000 	ldrh.w	sl, [r1]
 8010f8a:	f1ba 0f00 	cmp.w	sl, #0
 8010f8e:	d024      	beq.n	8010fda <__multiply+0xf2>
 8010f90:	f104 0e14 	add.w	lr, r4, #20
 8010f94:	46a9      	mov	r9, r5
 8010f96:	f04f 0c00 	mov.w	ip, #0
 8010f9a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010f9e:	f8d9 3000 	ldr.w	r3, [r9]
 8010fa2:	fa1f fb87 	uxth.w	fp, r7
 8010fa6:	b29b      	uxth	r3, r3
 8010fa8:	fb0a 330b 	mla	r3, sl, fp, r3
 8010fac:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010fb0:	f8d9 7000 	ldr.w	r7, [r9]
 8010fb4:	4463      	add	r3, ip
 8010fb6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010fba:	fb0a c70b 	mla	r7, sl, fp, ip
 8010fbe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010fc2:	b29b      	uxth	r3, r3
 8010fc4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010fc8:	4572      	cmp	r2, lr
 8010fca:	f849 3b04 	str.w	r3, [r9], #4
 8010fce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010fd2:	d8e2      	bhi.n	8010f9a <__multiply+0xb2>
 8010fd4:	9b01      	ldr	r3, [sp, #4]
 8010fd6:	f845 c003 	str.w	ip, [r5, r3]
 8010fda:	9b03      	ldr	r3, [sp, #12]
 8010fdc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010fe0:	3104      	adds	r1, #4
 8010fe2:	f1b9 0f00 	cmp.w	r9, #0
 8010fe6:	d021      	beq.n	801102c <__multiply+0x144>
 8010fe8:	682b      	ldr	r3, [r5, #0]
 8010fea:	f104 0c14 	add.w	ip, r4, #20
 8010fee:	46ae      	mov	lr, r5
 8010ff0:	f04f 0a00 	mov.w	sl, #0
 8010ff4:	f8bc b000 	ldrh.w	fp, [ip]
 8010ff8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010ffc:	fb09 770b 	mla	r7, r9, fp, r7
 8011000:	4457      	add	r7, sl
 8011002:	b29b      	uxth	r3, r3
 8011004:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011008:	f84e 3b04 	str.w	r3, [lr], #4
 801100c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011010:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011014:	f8be 3000 	ldrh.w	r3, [lr]
 8011018:	fb09 330a 	mla	r3, r9, sl, r3
 801101c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011020:	4562      	cmp	r2, ip
 8011022:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011026:	d8e5      	bhi.n	8010ff4 <__multiply+0x10c>
 8011028:	9f01      	ldr	r7, [sp, #4]
 801102a:	51eb      	str	r3, [r5, r7]
 801102c:	3504      	adds	r5, #4
 801102e:	e799      	b.n	8010f64 <__multiply+0x7c>
 8011030:	3e01      	subs	r6, #1
 8011032:	e79b      	b.n	8010f6c <__multiply+0x84>
 8011034:	08012ee9 	.word	0x08012ee9
 8011038:	08012efa 	.word	0x08012efa

0801103c <__pow5mult>:
 801103c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011040:	4615      	mov	r5, r2
 8011042:	f012 0203 	ands.w	r2, r2, #3
 8011046:	4607      	mov	r7, r0
 8011048:	460e      	mov	r6, r1
 801104a:	d007      	beq.n	801105c <__pow5mult+0x20>
 801104c:	4c25      	ldr	r4, [pc, #148]	@ (80110e4 <__pow5mult+0xa8>)
 801104e:	3a01      	subs	r2, #1
 8011050:	2300      	movs	r3, #0
 8011052:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011056:	f7ff fe9f 	bl	8010d98 <__multadd>
 801105a:	4606      	mov	r6, r0
 801105c:	10ad      	asrs	r5, r5, #2
 801105e:	d03d      	beq.n	80110dc <__pow5mult+0xa0>
 8011060:	69fc      	ldr	r4, [r7, #28]
 8011062:	b97c      	cbnz	r4, 8011084 <__pow5mult+0x48>
 8011064:	2010      	movs	r0, #16
 8011066:	f7ff fe2d 	bl	8010cc4 <malloc>
 801106a:	4602      	mov	r2, r0
 801106c:	61f8      	str	r0, [r7, #28]
 801106e:	b928      	cbnz	r0, 801107c <__pow5mult+0x40>
 8011070:	4b1d      	ldr	r3, [pc, #116]	@ (80110e8 <__pow5mult+0xac>)
 8011072:	481e      	ldr	r0, [pc, #120]	@ (80110ec <__pow5mult+0xb0>)
 8011074:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011078:	f7fd fec8 	bl	800ee0c <__assert_func>
 801107c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011080:	6004      	str	r4, [r0, #0]
 8011082:	60c4      	str	r4, [r0, #12]
 8011084:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011088:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801108c:	b94c      	cbnz	r4, 80110a2 <__pow5mult+0x66>
 801108e:	f240 2171 	movw	r1, #625	@ 0x271
 8011092:	4638      	mov	r0, r7
 8011094:	f7ff ff12 	bl	8010ebc <__i2b>
 8011098:	2300      	movs	r3, #0
 801109a:	f8c8 0008 	str.w	r0, [r8, #8]
 801109e:	4604      	mov	r4, r0
 80110a0:	6003      	str	r3, [r0, #0]
 80110a2:	f04f 0900 	mov.w	r9, #0
 80110a6:	07eb      	lsls	r3, r5, #31
 80110a8:	d50a      	bpl.n	80110c0 <__pow5mult+0x84>
 80110aa:	4631      	mov	r1, r6
 80110ac:	4622      	mov	r2, r4
 80110ae:	4638      	mov	r0, r7
 80110b0:	f7ff ff1a 	bl	8010ee8 <__multiply>
 80110b4:	4631      	mov	r1, r6
 80110b6:	4680      	mov	r8, r0
 80110b8:	4638      	mov	r0, r7
 80110ba:	f7ff fe4b 	bl	8010d54 <_Bfree>
 80110be:	4646      	mov	r6, r8
 80110c0:	106d      	asrs	r5, r5, #1
 80110c2:	d00b      	beq.n	80110dc <__pow5mult+0xa0>
 80110c4:	6820      	ldr	r0, [r4, #0]
 80110c6:	b938      	cbnz	r0, 80110d8 <__pow5mult+0x9c>
 80110c8:	4622      	mov	r2, r4
 80110ca:	4621      	mov	r1, r4
 80110cc:	4638      	mov	r0, r7
 80110ce:	f7ff ff0b 	bl	8010ee8 <__multiply>
 80110d2:	6020      	str	r0, [r4, #0]
 80110d4:	f8c0 9000 	str.w	r9, [r0]
 80110d8:	4604      	mov	r4, r0
 80110da:	e7e4      	b.n	80110a6 <__pow5mult+0x6a>
 80110dc:	4630      	mov	r0, r6
 80110de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110e2:	bf00      	nop
 80110e4:	08012f54 	.word	0x08012f54
 80110e8:	08012e7a 	.word	0x08012e7a
 80110ec:	08012efa 	.word	0x08012efa

080110f0 <__lshift>:
 80110f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110f4:	460c      	mov	r4, r1
 80110f6:	6849      	ldr	r1, [r1, #4]
 80110f8:	6923      	ldr	r3, [r4, #16]
 80110fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80110fe:	68a3      	ldr	r3, [r4, #8]
 8011100:	4607      	mov	r7, r0
 8011102:	4691      	mov	r9, r2
 8011104:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011108:	f108 0601 	add.w	r6, r8, #1
 801110c:	42b3      	cmp	r3, r6
 801110e:	db0b      	blt.n	8011128 <__lshift+0x38>
 8011110:	4638      	mov	r0, r7
 8011112:	f7ff fddf 	bl	8010cd4 <_Balloc>
 8011116:	4605      	mov	r5, r0
 8011118:	b948      	cbnz	r0, 801112e <__lshift+0x3e>
 801111a:	4602      	mov	r2, r0
 801111c:	4b28      	ldr	r3, [pc, #160]	@ (80111c0 <__lshift+0xd0>)
 801111e:	4829      	ldr	r0, [pc, #164]	@ (80111c4 <__lshift+0xd4>)
 8011120:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011124:	f7fd fe72 	bl	800ee0c <__assert_func>
 8011128:	3101      	adds	r1, #1
 801112a:	005b      	lsls	r3, r3, #1
 801112c:	e7ee      	b.n	801110c <__lshift+0x1c>
 801112e:	2300      	movs	r3, #0
 8011130:	f100 0114 	add.w	r1, r0, #20
 8011134:	f100 0210 	add.w	r2, r0, #16
 8011138:	4618      	mov	r0, r3
 801113a:	4553      	cmp	r3, sl
 801113c:	db33      	blt.n	80111a6 <__lshift+0xb6>
 801113e:	6920      	ldr	r0, [r4, #16]
 8011140:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011144:	f104 0314 	add.w	r3, r4, #20
 8011148:	f019 091f 	ands.w	r9, r9, #31
 801114c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011150:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011154:	d02b      	beq.n	80111ae <__lshift+0xbe>
 8011156:	f1c9 0e20 	rsb	lr, r9, #32
 801115a:	468a      	mov	sl, r1
 801115c:	2200      	movs	r2, #0
 801115e:	6818      	ldr	r0, [r3, #0]
 8011160:	fa00 f009 	lsl.w	r0, r0, r9
 8011164:	4310      	orrs	r0, r2
 8011166:	f84a 0b04 	str.w	r0, [sl], #4
 801116a:	f853 2b04 	ldr.w	r2, [r3], #4
 801116e:	459c      	cmp	ip, r3
 8011170:	fa22 f20e 	lsr.w	r2, r2, lr
 8011174:	d8f3      	bhi.n	801115e <__lshift+0x6e>
 8011176:	ebac 0304 	sub.w	r3, ip, r4
 801117a:	3b15      	subs	r3, #21
 801117c:	f023 0303 	bic.w	r3, r3, #3
 8011180:	3304      	adds	r3, #4
 8011182:	f104 0015 	add.w	r0, r4, #21
 8011186:	4584      	cmp	ip, r0
 8011188:	bf38      	it	cc
 801118a:	2304      	movcc	r3, #4
 801118c:	50ca      	str	r2, [r1, r3]
 801118e:	b10a      	cbz	r2, 8011194 <__lshift+0xa4>
 8011190:	f108 0602 	add.w	r6, r8, #2
 8011194:	3e01      	subs	r6, #1
 8011196:	4638      	mov	r0, r7
 8011198:	612e      	str	r6, [r5, #16]
 801119a:	4621      	mov	r1, r4
 801119c:	f7ff fdda 	bl	8010d54 <_Bfree>
 80111a0:	4628      	mov	r0, r5
 80111a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80111aa:	3301      	adds	r3, #1
 80111ac:	e7c5      	b.n	801113a <__lshift+0x4a>
 80111ae:	3904      	subs	r1, #4
 80111b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80111b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80111b8:	459c      	cmp	ip, r3
 80111ba:	d8f9      	bhi.n	80111b0 <__lshift+0xc0>
 80111bc:	e7ea      	b.n	8011194 <__lshift+0xa4>
 80111be:	bf00      	nop
 80111c0:	08012ee9 	.word	0x08012ee9
 80111c4:	08012efa 	.word	0x08012efa

080111c8 <__mcmp>:
 80111c8:	690a      	ldr	r2, [r1, #16]
 80111ca:	4603      	mov	r3, r0
 80111cc:	6900      	ldr	r0, [r0, #16]
 80111ce:	1a80      	subs	r0, r0, r2
 80111d0:	b530      	push	{r4, r5, lr}
 80111d2:	d10e      	bne.n	80111f2 <__mcmp+0x2a>
 80111d4:	3314      	adds	r3, #20
 80111d6:	3114      	adds	r1, #20
 80111d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80111dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80111e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80111e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80111e8:	4295      	cmp	r5, r2
 80111ea:	d003      	beq.n	80111f4 <__mcmp+0x2c>
 80111ec:	d205      	bcs.n	80111fa <__mcmp+0x32>
 80111ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80111f2:	bd30      	pop	{r4, r5, pc}
 80111f4:	42a3      	cmp	r3, r4
 80111f6:	d3f3      	bcc.n	80111e0 <__mcmp+0x18>
 80111f8:	e7fb      	b.n	80111f2 <__mcmp+0x2a>
 80111fa:	2001      	movs	r0, #1
 80111fc:	e7f9      	b.n	80111f2 <__mcmp+0x2a>
	...

08011200 <__mdiff>:
 8011200:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011204:	4689      	mov	r9, r1
 8011206:	4606      	mov	r6, r0
 8011208:	4611      	mov	r1, r2
 801120a:	4648      	mov	r0, r9
 801120c:	4614      	mov	r4, r2
 801120e:	f7ff ffdb 	bl	80111c8 <__mcmp>
 8011212:	1e05      	subs	r5, r0, #0
 8011214:	d112      	bne.n	801123c <__mdiff+0x3c>
 8011216:	4629      	mov	r1, r5
 8011218:	4630      	mov	r0, r6
 801121a:	f7ff fd5b 	bl	8010cd4 <_Balloc>
 801121e:	4602      	mov	r2, r0
 8011220:	b928      	cbnz	r0, 801122e <__mdiff+0x2e>
 8011222:	4b3f      	ldr	r3, [pc, #252]	@ (8011320 <__mdiff+0x120>)
 8011224:	f240 2137 	movw	r1, #567	@ 0x237
 8011228:	483e      	ldr	r0, [pc, #248]	@ (8011324 <__mdiff+0x124>)
 801122a:	f7fd fdef 	bl	800ee0c <__assert_func>
 801122e:	2301      	movs	r3, #1
 8011230:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011234:	4610      	mov	r0, r2
 8011236:	b003      	add	sp, #12
 8011238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801123c:	bfbc      	itt	lt
 801123e:	464b      	movlt	r3, r9
 8011240:	46a1      	movlt	r9, r4
 8011242:	4630      	mov	r0, r6
 8011244:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011248:	bfba      	itte	lt
 801124a:	461c      	movlt	r4, r3
 801124c:	2501      	movlt	r5, #1
 801124e:	2500      	movge	r5, #0
 8011250:	f7ff fd40 	bl	8010cd4 <_Balloc>
 8011254:	4602      	mov	r2, r0
 8011256:	b918      	cbnz	r0, 8011260 <__mdiff+0x60>
 8011258:	4b31      	ldr	r3, [pc, #196]	@ (8011320 <__mdiff+0x120>)
 801125a:	f240 2145 	movw	r1, #581	@ 0x245
 801125e:	e7e3      	b.n	8011228 <__mdiff+0x28>
 8011260:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011264:	6926      	ldr	r6, [r4, #16]
 8011266:	60c5      	str	r5, [r0, #12]
 8011268:	f109 0310 	add.w	r3, r9, #16
 801126c:	f109 0514 	add.w	r5, r9, #20
 8011270:	f104 0e14 	add.w	lr, r4, #20
 8011274:	f100 0b14 	add.w	fp, r0, #20
 8011278:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801127c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011280:	9301      	str	r3, [sp, #4]
 8011282:	46d9      	mov	r9, fp
 8011284:	f04f 0c00 	mov.w	ip, #0
 8011288:	9b01      	ldr	r3, [sp, #4]
 801128a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801128e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011292:	9301      	str	r3, [sp, #4]
 8011294:	fa1f f38a 	uxth.w	r3, sl
 8011298:	4619      	mov	r1, r3
 801129a:	b283      	uxth	r3, r0
 801129c:	1acb      	subs	r3, r1, r3
 801129e:	0c00      	lsrs	r0, r0, #16
 80112a0:	4463      	add	r3, ip
 80112a2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80112a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80112aa:	b29b      	uxth	r3, r3
 80112ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80112b0:	4576      	cmp	r6, lr
 80112b2:	f849 3b04 	str.w	r3, [r9], #4
 80112b6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80112ba:	d8e5      	bhi.n	8011288 <__mdiff+0x88>
 80112bc:	1b33      	subs	r3, r6, r4
 80112be:	3b15      	subs	r3, #21
 80112c0:	f023 0303 	bic.w	r3, r3, #3
 80112c4:	3415      	adds	r4, #21
 80112c6:	3304      	adds	r3, #4
 80112c8:	42a6      	cmp	r6, r4
 80112ca:	bf38      	it	cc
 80112cc:	2304      	movcc	r3, #4
 80112ce:	441d      	add	r5, r3
 80112d0:	445b      	add	r3, fp
 80112d2:	461e      	mov	r6, r3
 80112d4:	462c      	mov	r4, r5
 80112d6:	4544      	cmp	r4, r8
 80112d8:	d30e      	bcc.n	80112f8 <__mdiff+0xf8>
 80112da:	f108 0103 	add.w	r1, r8, #3
 80112de:	1b49      	subs	r1, r1, r5
 80112e0:	f021 0103 	bic.w	r1, r1, #3
 80112e4:	3d03      	subs	r5, #3
 80112e6:	45a8      	cmp	r8, r5
 80112e8:	bf38      	it	cc
 80112ea:	2100      	movcc	r1, #0
 80112ec:	440b      	add	r3, r1
 80112ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80112f2:	b191      	cbz	r1, 801131a <__mdiff+0x11a>
 80112f4:	6117      	str	r7, [r2, #16]
 80112f6:	e79d      	b.n	8011234 <__mdiff+0x34>
 80112f8:	f854 1b04 	ldr.w	r1, [r4], #4
 80112fc:	46e6      	mov	lr, ip
 80112fe:	0c08      	lsrs	r0, r1, #16
 8011300:	fa1c fc81 	uxtah	ip, ip, r1
 8011304:	4471      	add	r1, lr
 8011306:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801130a:	b289      	uxth	r1, r1
 801130c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011310:	f846 1b04 	str.w	r1, [r6], #4
 8011314:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011318:	e7dd      	b.n	80112d6 <__mdiff+0xd6>
 801131a:	3f01      	subs	r7, #1
 801131c:	e7e7      	b.n	80112ee <__mdiff+0xee>
 801131e:	bf00      	nop
 8011320:	08012ee9 	.word	0x08012ee9
 8011324:	08012efa 	.word	0x08012efa

08011328 <__d2b>:
 8011328:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801132c:	460f      	mov	r7, r1
 801132e:	2101      	movs	r1, #1
 8011330:	ec59 8b10 	vmov	r8, r9, d0
 8011334:	4616      	mov	r6, r2
 8011336:	f7ff fccd 	bl	8010cd4 <_Balloc>
 801133a:	4604      	mov	r4, r0
 801133c:	b930      	cbnz	r0, 801134c <__d2b+0x24>
 801133e:	4602      	mov	r2, r0
 8011340:	4b23      	ldr	r3, [pc, #140]	@ (80113d0 <__d2b+0xa8>)
 8011342:	4824      	ldr	r0, [pc, #144]	@ (80113d4 <__d2b+0xac>)
 8011344:	f240 310f 	movw	r1, #783	@ 0x30f
 8011348:	f7fd fd60 	bl	800ee0c <__assert_func>
 801134c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011350:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011354:	b10d      	cbz	r5, 801135a <__d2b+0x32>
 8011356:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801135a:	9301      	str	r3, [sp, #4]
 801135c:	f1b8 0300 	subs.w	r3, r8, #0
 8011360:	d023      	beq.n	80113aa <__d2b+0x82>
 8011362:	4668      	mov	r0, sp
 8011364:	9300      	str	r3, [sp, #0]
 8011366:	f7ff fd7c 	bl	8010e62 <__lo0bits>
 801136a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801136e:	b1d0      	cbz	r0, 80113a6 <__d2b+0x7e>
 8011370:	f1c0 0320 	rsb	r3, r0, #32
 8011374:	fa02 f303 	lsl.w	r3, r2, r3
 8011378:	430b      	orrs	r3, r1
 801137a:	40c2      	lsrs	r2, r0
 801137c:	6163      	str	r3, [r4, #20]
 801137e:	9201      	str	r2, [sp, #4]
 8011380:	9b01      	ldr	r3, [sp, #4]
 8011382:	61a3      	str	r3, [r4, #24]
 8011384:	2b00      	cmp	r3, #0
 8011386:	bf0c      	ite	eq
 8011388:	2201      	moveq	r2, #1
 801138a:	2202      	movne	r2, #2
 801138c:	6122      	str	r2, [r4, #16]
 801138e:	b1a5      	cbz	r5, 80113ba <__d2b+0x92>
 8011390:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011394:	4405      	add	r5, r0
 8011396:	603d      	str	r5, [r7, #0]
 8011398:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801139c:	6030      	str	r0, [r6, #0]
 801139e:	4620      	mov	r0, r4
 80113a0:	b003      	add	sp, #12
 80113a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113a6:	6161      	str	r1, [r4, #20]
 80113a8:	e7ea      	b.n	8011380 <__d2b+0x58>
 80113aa:	a801      	add	r0, sp, #4
 80113ac:	f7ff fd59 	bl	8010e62 <__lo0bits>
 80113b0:	9b01      	ldr	r3, [sp, #4]
 80113b2:	6163      	str	r3, [r4, #20]
 80113b4:	3020      	adds	r0, #32
 80113b6:	2201      	movs	r2, #1
 80113b8:	e7e8      	b.n	801138c <__d2b+0x64>
 80113ba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80113be:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80113c2:	6038      	str	r0, [r7, #0]
 80113c4:	6918      	ldr	r0, [r3, #16]
 80113c6:	f7ff fd2d 	bl	8010e24 <__hi0bits>
 80113ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80113ce:	e7e5      	b.n	801139c <__d2b+0x74>
 80113d0:	08012ee9 	.word	0x08012ee9
 80113d4:	08012efa 	.word	0x08012efa

080113d8 <_mprec_log10>:
 80113d8:	2817      	cmp	r0, #23
 80113da:	b5d0      	push	{r4, r6, r7, lr}
 80113dc:	4604      	mov	r4, r0
 80113de:	dc07      	bgt.n	80113f0 <_mprec_log10+0x18>
 80113e0:	4b09      	ldr	r3, [pc, #36]	@ (8011408 <_mprec_log10+0x30>)
 80113e2:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80113e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80113ea:	ec41 0b10 	vmov	d0, r0, r1
 80113ee:	bdd0      	pop	{r4, r6, r7, pc}
 80113f0:	4906      	ldr	r1, [pc, #24]	@ (801140c <_mprec_log10+0x34>)
 80113f2:	4f07      	ldr	r7, [pc, #28]	@ (8011410 <_mprec_log10+0x38>)
 80113f4:	2000      	movs	r0, #0
 80113f6:	2600      	movs	r6, #0
 80113f8:	4632      	mov	r2, r6
 80113fa:	463b      	mov	r3, r7
 80113fc:	f7ef f8f4 	bl	80005e8 <__aeabi_dmul>
 8011400:	3c01      	subs	r4, #1
 8011402:	d1f9      	bne.n	80113f8 <_mprec_log10+0x20>
 8011404:	e7f1      	b.n	80113ea <_mprec_log10+0x12>
 8011406:	bf00      	nop
 8011408:	08012f88 	.word	0x08012f88
 801140c:	3ff00000 	.word	0x3ff00000
 8011410:	40240000 	.word	0x40240000

08011414 <_calloc_r>:
 8011414:	b570      	push	{r4, r5, r6, lr}
 8011416:	fba1 5402 	umull	r5, r4, r1, r2
 801141a:	b93c      	cbnz	r4, 801142c <_calloc_r+0x18>
 801141c:	4629      	mov	r1, r5
 801141e:	f7fd ffc1 	bl	800f3a4 <_malloc_r>
 8011422:	4606      	mov	r6, r0
 8011424:	b928      	cbnz	r0, 8011432 <_calloc_r+0x1e>
 8011426:	2600      	movs	r6, #0
 8011428:	4630      	mov	r0, r6
 801142a:	bd70      	pop	{r4, r5, r6, pc}
 801142c:	220c      	movs	r2, #12
 801142e:	6002      	str	r2, [r0, #0]
 8011430:	e7f9      	b.n	8011426 <_calloc_r+0x12>
 8011432:	462a      	mov	r2, r5
 8011434:	4621      	mov	r1, r4
 8011436:	f7fd fddb 	bl	800eff0 <memset>
 801143a:	e7f5      	b.n	8011428 <_calloc_r+0x14>

0801143c <_init>:
 801143c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801143e:	bf00      	nop
 8011440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011442:	bc08      	pop	{r3}
 8011444:	469e      	mov	lr, r3
 8011446:	4770      	bx	lr

08011448 <_fini>:
 8011448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801144a:	bf00      	nop
 801144c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801144e:	bc08      	pop	{r3}
 8011450:	469e      	mov	lr, r3
 8011452:	4770      	bx	lr
