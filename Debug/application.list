
application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001133c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001be0  080114d0  080114d0  000124d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080130b0  080130b0  000150c4  2**0
                  CONTENTS
  4 .ARM          00000008  080130b0  080130b0  000140b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080130b8  080130b8  000150c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080130b8  080130b8  000140b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080130bc  080130bc  000140bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c4  20000000  080130c0  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000784  200000c4  08013184  000150c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000848  08013184  00015848  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000150c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024243  00000000  00000000  000150f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e5c  00000000  00000000  00039337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002060  00000000  00000000  0003e198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001954  00000000  00000000  000401f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027573  00000000  00000000  00041b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025999  00000000  00000000  000690bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7c1c  00000000  00000000  0008ea58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00176674  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000099a0  00000000  00000000  001766b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00180058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c4 	.word	0x200000c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080114b4 	.word	0x080114b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c8 	.word	0x200000c8
 80001cc:	080114b4 	.word	0x080114b4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_ldivmod>:
 8000c0c:	b97b      	cbnz	r3, 8000c2e <__aeabi_ldivmod+0x22>
 8000c0e:	b972      	cbnz	r2, 8000c2e <__aeabi_ldivmod+0x22>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bfbe      	ittt	lt
 8000c14:	2000      	movlt	r0, #0
 8000c16:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c1a:	e006      	blt.n	8000c2a <__aeabi_ldivmod+0x1e>
 8000c1c:	bf08      	it	eq
 8000c1e:	2800      	cmpeq	r0, #0
 8000c20:	bf1c      	itt	ne
 8000c22:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c26:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c2a:	f000 b9b5 	b.w	8000f98 <__aeabi_idiv0>
 8000c2e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c32:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c36:	2900      	cmp	r1, #0
 8000c38:	db09      	blt.n	8000c4e <__aeabi_ldivmod+0x42>
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	db1a      	blt.n	8000c74 <__aeabi_ldivmod+0x68>
 8000c3e:	f000 f84d 	bl	8000cdc <__udivmoddi4>
 8000c42:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4a:	b004      	add	sp, #16
 8000c4c:	4770      	bx	lr
 8000c4e:	4240      	negs	r0, r0
 8000c50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	db1b      	blt.n	8000c90 <__aeabi_ldivmod+0x84>
 8000c58:	f000 f840 	bl	8000cdc <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4240      	negs	r0, r0
 8000c68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6c:	4252      	negs	r2, r2
 8000c6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c72:	4770      	bx	lr
 8000c74:	4252      	negs	r2, r2
 8000c76:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c7a:	f000 f82f 	bl	8000cdc <__udivmoddi4>
 8000c7e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c86:	b004      	add	sp, #16
 8000c88:	4240      	negs	r0, r0
 8000c8a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8e:	4770      	bx	lr
 8000c90:	4252      	negs	r2, r2
 8000c92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c96:	f000 f821 	bl	8000cdc <__udivmoddi4>
 8000c9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca2:	b004      	add	sp, #16
 8000ca4:	4252      	negs	r2, r2
 8000ca6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000caa:	4770      	bx	lr

08000cac <__aeabi_uldivmod>:
 8000cac:	b953      	cbnz	r3, 8000cc4 <__aeabi_uldivmod+0x18>
 8000cae:	b94a      	cbnz	r2, 8000cc4 <__aeabi_uldivmod+0x18>
 8000cb0:	2900      	cmp	r1, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	2800      	cmpeq	r0, #0
 8000cb6:	bf1c      	itt	ne
 8000cb8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cbc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cc0:	f000 b96a 	b.w	8000f98 <__aeabi_idiv0>
 8000cc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ccc:	f000 f806 	bl	8000cdc <__udivmoddi4>
 8000cd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd8:	b004      	add	sp, #16
 8000cda:	4770      	bx	lr

08000cdc <__udivmoddi4>:
 8000cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce0:	9d08      	ldr	r5, [sp, #32]
 8000ce2:	460c      	mov	r4, r1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d14e      	bne.n	8000d86 <__udivmoddi4+0xaa>
 8000ce8:	4694      	mov	ip, r2
 8000cea:	458c      	cmp	ip, r1
 8000cec:	4686      	mov	lr, r0
 8000cee:	fab2 f282 	clz	r2, r2
 8000cf2:	d962      	bls.n	8000dba <__udivmoddi4+0xde>
 8000cf4:	b14a      	cbz	r2, 8000d0a <__udivmoddi4+0x2e>
 8000cf6:	f1c2 0320 	rsb	r3, r2, #32
 8000cfa:	4091      	lsls	r1, r2
 8000cfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000d00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d04:	4319      	orrs	r1, r3
 8000d06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f f68c 	uxth.w	r6, ip
 8000d12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000d1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d22:	fb04 f106 	mul.w	r1, r4, r6
 8000d26:	4299      	cmp	r1, r3
 8000d28:	d90a      	bls.n	8000d40 <__udivmoddi4+0x64>
 8000d2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d32:	f080 8112 	bcs.w	8000f5a <__udivmoddi4+0x27e>
 8000d36:	4299      	cmp	r1, r3
 8000d38:	f240 810f 	bls.w	8000f5a <__udivmoddi4+0x27e>
 8000d3c:	3c02      	subs	r4, #2
 8000d3e:	4463      	add	r3, ip
 8000d40:	1a59      	subs	r1, r3, r1
 8000d42:	fa1f f38e 	uxth.w	r3, lr
 8000d46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000d4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d52:	fb00 f606 	mul.w	r6, r0, r6
 8000d56:	429e      	cmp	r6, r3
 8000d58:	d90a      	bls.n	8000d70 <__udivmoddi4+0x94>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d62:	f080 80fc 	bcs.w	8000f5e <__udivmoddi4+0x282>
 8000d66:	429e      	cmp	r6, r3
 8000d68:	f240 80f9 	bls.w	8000f5e <__udivmoddi4+0x282>
 8000d6c:	4463      	add	r3, ip
 8000d6e:	3802      	subs	r0, #2
 8000d70:	1b9b      	subs	r3, r3, r6
 8000d72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d76:	2100      	movs	r1, #0
 8000d78:	b11d      	cbz	r5, 8000d82 <__udivmoddi4+0xa6>
 8000d7a:	40d3      	lsrs	r3, r2
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	428b      	cmp	r3, r1
 8000d88:	d905      	bls.n	8000d96 <__udivmoddi4+0xba>
 8000d8a:	b10d      	cbz	r5, 8000d90 <__udivmoddi4+0xb4>
 8000d8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000d90:	2100      	movs	r1, #0
 8000d92:	4608      	mov	r0, r1
 8000d94:	e7f5      	b.n	8000d82 <__udivmoddi4+0xa6>
 8000d96:	fab3 f183 	clz	r1, r3
 8000d9a:	2900      	cmp	r1, #0
 8000d9c:	d146      	bne.n	8000e2c <__udivmoddi4+0x150>
 8000d9e:	42a3      	cmp	r3, r4
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xcc>
 8000da2:	4290      	cmp	r0, r2
 8000da4:	f0c0 80f0 	bcc.w	8000f88 <__udivmoddi4+0x2ac>
 8000da8:	1a86      	subs	r6, r0, r2
 8000daa:	eb64 0303 	sbc.w	r3, r4, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	2d00      	cmp	r5, #0
 8000db2:	d0e6      	beq.n	8000d82 <__udivmoddi4+0xa6>
 8000db4:	e9c5 6300 	strd	r6, r3, [r5]
 8000db8:	e7e3      	b.n	8000d82 <__udivmoddi4+0xa6>
 8000dba:	2a00      	cmp	r2, #0
 8000dbc:	f040 8090 	bne.w	8000ee0 <__udivmoddi4+0x204>
 8000dc0:	eba1 040c 	sub.w	r4, r1, ip
 8000dc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc8:	fa1f f78c 	uxth.w	r7, ip
 8000dcc:	2101      	movs	r1, #1
 8000dce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000dda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dde:	fb07 f006 	mul.w	r0, r7, r6
 8000de2:	4298      	cmp	r0, r3
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x11c>
 8000de6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dea:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dee:	d202      	bcs.n	8000df6 <__udivmoddi4+0x11a>
 8000df0:	4298      	cmp	r0, r3
 8000df2:	f200 80cd 	bhi.w	8000f90 <__udivmoddi4+0x2b4>
 8000df6:	4626      	mov	r6, r4
 8000df8:	1a1c      	subs	r4, r3, r0
 8000dfa:	fa1f f38e 	uxth.w	r3, lr
 8000dfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e02:	fb08 4410 	mls	r4, r8, r0, r4
 8000e06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e0a:	fb00 f707 	mul.w	r7, r0, r7
 8000e0e:	429f      	cmp	r7, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x148>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x146>
 8000e1c:	429f      	cmp	r7, r3
 8000e1e:	f200 80b0 	bhi.w	8000f82 <__udivmoddi4+0x2a6>
 8000e22:	4620      	mov	r0, r4
 8000e24:	1bdb      	subs	r3, r3, r7
 8000e26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e2a:	e7a5      	b.n	8000d78 <__udivmoddi4+0x9c>
 8000e2c:	f1c1 0620 	rsb	r6, r1, #32
 8000e30:	408b      	lsls	r3, r1
 8000e32:	fa22 f706 	lsr.w	r7, r2, r6
 8000e36:	431f      	orrs	r7, r3
 8000e38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000e40:	ea43 030c 	orr.w	r3, r3, ip
 8000e44:	40f4      	lsrs	r4, r6
 8000e46:	fa00 f801 	lsl.w	r8, r0, r1
 8000e4a:	0c38      	lsrs	r0, r7, #16
 8000e4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e50:	fbb4 fef0 	udiv	lr, r4, r0
 8000e54:	fa1f fc87 	uxth.w	ip, r7
 8000e58:	fb00 441e 	mls	r4, r0, lr, r4
 8000e5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e60:	fb0e f90c 	mul.w	r9, lr, ip
 8000e64:	45a1      	cmp	r9, r4
 8000e66:	fa02 f201 	lsl.w	r2, r2, r1
 8000e6a:	d90a      	bls.n	8000e82 <__udivmoddi4+0x1a6>
 8000e6c:	193c      	adds	r4, r7, r4
 8000e6e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e72:	f080 8084 	bcs.w	8000f7e <__udivmoddi4+0x2a2>
 8000e76:	45a1      	cmp	r9, r4
 8000e78:	f240 8081 	bls.w	8000f7e <__udivmoddi4+0x2a2>
 8000e7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e80:	443c      	add	r4, r7
 8000e82:	eba4 0409 	sub.w	r4, r4, r9
 8000e86:	fa1f f983 	uxth.w	r9, r3
 8000e8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000e92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e9a:	45a4      	cmp	ip, r4
 8000e9c:	d907      	bls.n	8000eae <__udivmoddi4+0x1d2>
 8000e9e:	193c      	adds	r4, r7, r4
 8000ea0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ea4:	d267      	bcs.n	8000f76 <__udivmoddi4+0x29a>
 8000ea6:	45a4      	cmp	ip, r4
 8000ea8:	d965      	bls.n	8000f76 <__udivmoddi4+0x29a>
 8000eaa:	3b02      	subs	r3, #2
 8000eac:	443c      	add	r4, r7
 8000eae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eb2:	fba0 9302 	umull	r9, r3, r0, r2
 8000eb6:	eba4 040c 	sub.w	r4, r4, ip
 8000eba:	429c      	cmp	r4, r3
 8000ebc:	46ce      	mov	lr, r9
 8000ebe:	469c      	mov	ip, r3
 8000ec0:	d351      	bcc.n	8000f66 <__udivmoddi4+0x28a>
 8000ec2:	d04e      	beq.n	8000f62 <__udivmoddi4+0x286>
 8000ec4:	b155      	cbz	r5, 8000edc <__udivmoddi4+0x200>
 8000ec6:	ebb8 030e 	subs.w	r3, r8, lr
 8000eca:	eb64 040c 	sbc.w	r4, r4, ip
 8000ece:	fa04 f606 	lsl.w	r6, r4, r6
 8000ed2:	40cb      	lsrs	r3, r1
 8000ed4:	431e      	orrs	r6, r3
 8000ed6:	40cc      	lsrs	r4, r1
 8000ed8:	e9c5 6400 	strd	r6, r4, [r5]
 8000edc:	2100      	movs	r1, #0
 8000ede:	e750      	b.n	8000d82 <__udivmoddi4+0xa6>
 8000ee0:	f1c2 0320 	rsb	r3, r2, #32
 8000ee4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa24 f303 	lsr.w	r3, r4, r3
 8000ef0:	4094      	lsls	r4, r2
 8000ef2:	430c      	orrs	r4, r1
 8000ef4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000efc:	fa1f f78c 	uxth.w	r7, ip
 8000f00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f04:	fb08 3110 	mls	r1, r8, r0, r3
 8000f08:	0c23      	lsrs	r3, r4, #16
 8000f0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f0e:	fb00 f107 	mul.w	r1, r0, r7
 8000f12:	4299      	cmp	r1, r3
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x24c>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f1e:	d22c      	bcs.n	8000f7a <__udivmoddi4+0x29e>
 8000f20:	4299      	cmp	r1, r3
 8000f22:	d92a      	bls.n	8000f7a <__udivmoddi4+0x29e>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1a5b      	subs	r3, r3, r1
 8000f2a:	b2a4      	uxth	r4, r4
 8000f2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f30:	fb08 3311 	mls	r3, r8, r1, r3
 8000f34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f38:	fb01 f307 	mul.w	r3, r1, r7
 8000f3c:	42a3      	cmp	r3, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x276>
 8000f40:	eb1c 0404 	adds.w	r4, ip, r4
 8000f44:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f48:	d213      	bcs.n	8000f72 <__udivmoddi4+0x296>
 8000f4a:	42a3      	cmp	r3, r4
 8000f4c:	d911      	bls.n	8000f72 <__udivmoddi4+0x296>
 8000f4e:	3902      	subs	r1, #2
 8000f50:	4464      	add	r4, ip
 8000f52:	1ae4      	subs	r4, r4, r3
 8000f54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f58:	e739      	b.n	8000dce <__udivmoddi4+0xf2>
 8000f5a:	4604      	mov	r4, r0
 8000f5c:	e6f0      	b.n	8000d40 <__udivmoddi4+0x64>
 8000f5e:	4608      	mov	r0, r1
 8000f60:	e706      	b.n	8000d70 <__udivmoddi4+0x94>
 8000f62:	45c8      	cmp	r8, r9
 8000f64:	d2ae      	bcs.n	8000ec4 <__udivmoddi4+0x1e8>
 8000f66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f6e:	3801      	subs	r0, #1
 8000f70:	e7a8      	b.n	8000ec4 <__udivmoddi4+0x1e8>
 8000f72:	4631      	mov	r1, r6
 8000f74:	e7ed      	b.n	8000f52 <__udivmoddi4+0x276>
 8000f76:	4603      	mov	r3, r0
 8000f78:	e799      	b.n	8000eae <__udivmoddi4+0x1d2>
 8000f7a:	4630      	mov	r0, r6
 8000f7c:	e7d4      	b.n	8000f28 <__udivmoddi4+0x24c>
 8000f7e:	46d6      	mov	lr, sl
 8000f80:	e77f      	b.n	8000e82 <__udivmoddi4+0x1a6>
 8000f82:	4463      	add	r3, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e74d      	b.n	8000e24 <__udivmoddi4+0x148>
 8000f88:	4606      	mov	r6, r0
 8000f8a:	4623      	mov	r3, r4
 8000f8c:	4608      	mov	r0, r1
 8000f8e:	e70f      	b.n	8000db0 <__udivmoddi4+0xd4>
 8000f90:	3e02      	subs	r6, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	e730      	b.n	8000df8 <__udivmoddi4+0x11c>
 8000f96:	bf00      	nop

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
 8000fb0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fb2:	4b30      	ldr	r3, [pc, #192]	@ (8001074 <MX_ADC1_Init+0xd8>)
 8000fb4:	4a30      	ldr	r2, [pc, #192]	@ (8001078 <MX_ADC1_Init+0xdc>)
 8000fb6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 8000fb8:	4b2e      	ldr	r3, [pc, #184]	@ (8001074 <MX_ADC1_Init+0xd8>)
 8000fba:	f44f 12e0 	mov.w	r2, #1835008	@ 0x1c0000
 8000fbe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fc0:	4b2c      	ldr	r3, [pc, #176]	@ (8001074 <MX_ADC1_Init+0xd8>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc6:	4b2b      	ldr	r3, [pc, #172]	@ (8001074 <MX_ADC1_Init+0xd8>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fcc:	4b29      	ldr	r3, [pc, #164]	@ (8001074 <MX_ADC1_Init+0xd8>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fd2:	4b28      	ldr	r3, [pc, #160]	@ (8001074 <MX_ADC1_Init+0xd8>)
 8000fd4:	2204      	movs	r2, #4
 8000fd6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fd8:	4b26      	ldr	r3, [pc, #152]	@ (8001074 <MX_ADC1_Init+0xd8>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fde:	4b25      	ldr	r3, [pc, #148]	@ (8001074 <MX_ADC1_Init+0xd8>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000fe4:	4b23      	ldr	r3, [pc, #140]	@ (8001074 <MX_ADC1_Init+0xd8>)
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fea:	4b22      	ldr	r3, [pc, #136]	@ (8001074 <MX_ADC1_Init+0xd8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ff2:	4b20      	ldr	r3, [pc, #128]	@ (8001074 <MX_ADC1_Init+0xd8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ff8:	4b1e      	ldr	r3, [pc, #120]	@ (8001074 <MX_ADC1_Init+0xd8>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8001074 <MX_ADC1_Init+0xd8>)
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001006:	4b1b      	ldr	r3, [pc, #108]	@ (8001074 <MX_ADC1_Init+0xd8>)
 8001008:	2200      	movs	r2, #0
 800100a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800100c:	4b19      	ldr	r3, [pc, #100]	@ (8001074 <MX_ADC1_Init+0xd8>)
 800100e:	2200      	movs	r2, #0
 8001010:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001014:	4817      	ldr	r0, [pc, #92]	@ (8001074 <MX_ADC1_Init+0xd8>)
 8001016:	f008 fe8b 	bl	8009d30 <HAL_ADC_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001020:	f007 fa4a 	bl	80084b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001024:	4b15      	ldr	r3, [pc, #84]	@ (800107c <MX_ADC1_Init+0xe0>)
 8001026:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001028:	2306      	movs	r3, #6
 800102a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800102c:	2307      	movs	r3, #7
 800102e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001030:	237f      	movs	r3, #127	@ 0x7f
 8001032:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001034:	2304      	movs	r3, #4
 8001036:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103c:	463b      	mov	r3, r7
 800103e:	4619      	mov	r1, r3
 8001040:	480c      	ldr	r0, [pc, #48]	@ (8001074 <MX_ADC1_Init+0xd8>)
 8001042:	f009 fa41 	bl	800a4c8 <HAL_ADC_ConfigChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800104c:	f007 fa34 	bl	80084b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001050:	4b0b      	ldr	r3, [pc, #44]	@ (8001080 <MX_ADC1_Init+0xe4>)
 8001052:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001054:	230c      	movs	r3, #12
 8001056:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001058:	463b      	mov	r3, r7
 800105a:	4619      	mov	r1, r3
 800105c:	4805      	ldr	r0, [pc, #20]	@ (8001074 <MX_ADC1_Init+0xd8>)
 800105e:	f009 fa33 	bl	800a4c8 <HAL_ADC_ConfigChannel>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8001068:	f007 fa26 	bl	80084b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800106c:	bf00      	nop
 800106e:	3718      	adds	r7, #24
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	200000e0 	.word	0x200000e0
 8001078:	50040000 	.word	0x50040000
 800107c:	3ef08000 	.word	0x3ef08000
 8001080:	25b00200 	.word	0x25b00200

08001084 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b0a0      	sub	sp, #128	@ 0x80
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800109c:	f107 0318 	add.w	r3, r7, #24
 80010a0:	2254      	movs	r2, #84	@ 0x54
 80010a2:	2100      	movs	r1, #0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f00d ffdd 	bl	800f064 <memset>
  if(adcHandle->Instance==ADC1)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a35      	ldr	r2, [pc, #212]	@ (8001184 <HAL_ADC_MspInit+0x100>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d163      	bne.n	800117c <HAL_ADC_MspInit+0xf8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80010b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80010ba:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80010be:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80010c0:	2302      	movs	r3, #2
 80010c2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80010c4:	2301      	movs	r3, #1
 80010c6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80010c8:	2308      	movs	r3, #8
 80010ca:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80010cc:	2307      	movs	r3, #7
 80010ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010d0:	2302      	movs	r3, #2
 80010d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80010d4:	2302      	movs	r3, #2
 80010d6:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80010d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80010dc:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010de:	f107 0318 	add.w	r3, r7, #24
 80010e2:	4618      	mov	r0, r3
 80010e4:	f00b ffce 	bl	800d084 <HAL_RCCEx_PeriphCLKConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80010ee:	f007 f9e3 	bl	80084b8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010f2:	4b25      	ldr	r3, [pc, #148]	@ (8001188 <HAL_ADC_MspInit+0x104>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f6:	4a24      	ldr	r2, [pc, #144]	@ (8001188 <HAL_ADC_MspInit+0x104>)
 80010f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010fe:	4b22      	ldr	r3, [pc, #136]	@ (8001188 <HAL_ADC_MspInit+0x104>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001102:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	4b1f      	ldr	r3, [pc, #124]	@ (8001188 <HAL_ADC_MspInit+0x104>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110e:	4a1e      	ldr	r2, [pc, #120]	@ (8001188 <HAL_ADC_MspInit+0x104>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001116:	4b1c      	ldr	r3, [pc, #112]	@ (8001188 <HAL_ADC_MspInit+0x104>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001122:	4b19      	ldr	r3, [pc, #100]	@ (8001188 <HAL_ADC_MspInit+0x104>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001126:	4a18      	ldr	r2, [pc, #96]	@ (8001188 <HAL_ADC_MspInit+0x104>)
 8001128:	f043 0302 	orr.w	r3, r3, #2
 800112c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800112e:	4b16      	ldr	r3, [pc, #88]	@ (8001188 <HAL_ADC_MspInit+0x104>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800113a:	2310      	movs	r3, #16
 800113c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800113e:	230b      	movs	r3, #11
 8001140:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001146:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800114a:	4619      	mov	r1, r3
 800114c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001150:	f00a f852 	bl	800b1f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001154:	2301      	movs	r3, #1
 8001156:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001158:	230b      	movs	r3, #11
 800115a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001160:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001164:	4619      	mov	r1, r3
 8001166:	4809      	ldr	r0, [pc, #36]	@ (800118c <HAL_ADC_MspInit+0x108>)
 8001168:	f00a f846 	bl	800b1f8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2100      	movs	r1, #0
 8001170:	2012      	movs	r0, #18
 8001172:	f00a f80a 	bl	800b18a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001176:	2012      	movs	r0, #18
 8001178:	f00a f823 	bl	800b1c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800117c:	bf00      	nop
 800117e:	3780      	adds	r7, #128	@ 0x80
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	50040000 	.word	0x50040000
 8001188:	40021000 	.word	0x40021000
 800118c:	48000400 	.word	0x48000400

08001190 <aesroundkeys>:
u4_t AESKEY[11 * 16 / sizeof(u4_t)];

// generate 1+10 roundkeys for encryption with 128-bit key
// read 128-bit key from AESKEY in MSBF, generate roundkey words in place
static void aesroundkeys()
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
	int i;
	u4_t b;

	for (i = 0; i < 4; i++) {
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	e021      	b.n	80011e0 <aesroundkeys+0x50>
		AESKEY[i] = swapmsbf(AESKEY[i]);
 800119c:	4a37      	ldr	r2, [pc, #220]	@ (800127c <aesroundkeys+0xec>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a4:	061a      	lsls	r2, r3, #24
 80011a6:	4935      	ldr	r1, [pc, #212]	@ (800127c <aesroundkeys+0xec>)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011ae:	021b      	lsls	r3, r3, #8
 80011b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80011b4:	431a      	orrs	r2, r3
 80011b6:	4931      	ldr	r1, [pc, #196]	@ (800127c <aesroundkeys+0xec>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011be:	0a1b      	lsrs	r3, r3, #8
 80011c0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80011c4:	431a      	orrs	r2, r3
 80011c6:	492d      	ldr	r1, [pc, #180]	@ (800127c <aesroundkeys+0xec>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011ce:	0e1b      	lsrs	r3, r3, #24
 80011d0:	431a      	orrs	r2, r3
 80011d2:	492a      	ldr	r1, [pc, #168]	@ (800127c <aesroundkeys+0xec>)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i = 0; i < 4; i++) {
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3301      	adds	r3, #1
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b03      	cmp	r3, #3
 80011e4:	ddda      	ble.n	800119c <aesroundkeys+0xc>
	}

	b = AESKEY[3];
 80011e6:	4b25      	ldr	r3, [pc, #148]	@ (800127c <aesroundkeys+0xec>)
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	603b      	str	r3, [r7, #0]
	for (; i < 44; i++) {
 80011ec:	e03c      	b.n	8001268 <aesroundkeys+0xd8>
		if (i % 4 == 0) {
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d127      	bne.n	8001248 <aesroundkeys+0xb8>
			// b = SubWord(RotWord(b)) xor Rcon[i/4]
			b = (AES_S[u1(b >> 16)] << 24) ^ (AES_S[u1(b >> 8)] << 16)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	0c1b      	lsrs	r3, r3, #16
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	461a      	mov	r2, r3
 8001200:	4b1f      	ldr	r3, [pc, #124]	@ (8001280 <aesroundkeys+0xf0>)
 8001202:	5c9b      	ldrb	r3, [r3, r2]
 8001204:	061a      	lsls	r2, r3, #24
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	0a1b      	lsrs	r3, r3, #8
 800120a:	b2db      	uxtb	r3, r3
 800120c:	4619      	mov	r1, r3
 800120e:	4b1c      	ldr	r3, [pc, #112]	@ (8001280 <aesroundkeys+0xf0>)
 8001210:	5c5b      	ldrb	r3, [r3, r1]
 8001212:	041b      	lsls	r3, r3, #16
 8001214:	405a      	eors	r2, r3
					^ (AES_S[u1(b)] << 8) ^ (AES_S[b >> 24])
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	4619      	mov	r1, r3
 800121c:	4b18      	ldr	r3, [pc, #96]	@ (8001280 <aesroundkeys+0xf0>)
 800121e:	5c5b      	ldrb	r3, [r3, r1]
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	4053      	eors	r3, r2
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	0e12      	lsrs	r2, r2, #24
 8001228:	4915      	ldr	r1, [pc, #84]	@ (8001280 <aesroundkeys+0xf0>)
 800122a:	5c8a      	ldrb	r2, [r1, r2]
 800122c:	4053      	eors	r3, r2
 800122e:	461a      	mov	r2, r3
					^ AES_RCON[(i - 4) / 4];
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b04      	subs	r3, #4
 8001234:	2b00      	cmp	r3, #0
 8001236:	da00      	bge.n	800123a <aesroundkeys+0xaa>
 8001238:	3303      	adds	r3, #3
 800123a:	109b      	asrs	r3, r3, #2
 800123c:	4619      	mov	r1, r3
 800123e:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <aesroundkeys+0xf4>)
 8001240:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			b = (AES_S[u1(b >> 16)] << 24) ^ (AES_S[u1(b >> 8)] << 16)
 8001244:	4053      	eors	r3, r2
 8001246:	603b      	str	r3, [r7, #0]
		}
		AESKEY[i] = b ^= AESKEY[i - 4];
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3b04      	subs	r3, #4
 800124c:	4a0b      	ldr	r2, [pc, #44]	@ (800127c <aesroundkeys+0xec>)
 800124e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	4053      	eors	r3, r2
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	4908      	ldr	r1, [pc, #32]	@ (800127c <aesroundkeys+0xec>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (; i < 44; i++) {
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3301      	adds	r3, #1
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b2b      	cmp	r3, #43	@ 0x2b
 800126c:	ddbf      	ble.n	80011ee <aesroundkeys+0x5e>
	}
}
 800126e:	bf00      	nop
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	20000154 	.word	0x20000154
 8001280:	08011c10 	.word	0x08011c10
 8001284:	08011be8 	.word	0x08011be8

08001288 <os_aes>:

u4_t os_aes(u1_t mode, xref2u1_t buf, u2_t len)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08c      	sub	sp, #48	@ 0x30
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	6039      	str	r1, [r7, #0]
 8001292:	71fb      	strb	r3, [r7, #7]
 8001294:	4613      	mov	r3, r2
 8001296:	80bb      	strh	r3, [r7, #4]

	aesroundkeys();
 8001298:	f7ff ff7a 	bl	8001190 <aesroundkeys>

	if (mode & AES_MICNOAUX) {
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d010      	beq.n	80012c8 <os_aes+0x40>
		AESAUX[0] = AESAUX[1] = AESAUX[2] = AESAUX[3] = 0;
 80012a6:	4b5a      	ldr	r3, [pc, #360]	@ (8001410 <os_aes+0x188>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	4b58      	ldr	r3, [pc, #352]	@ (8001410 <os_aes+0x188>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	4a57      	ldr	r2, [pc, #348]	@ (8001410 <os_aes+0x188>)
 80012b2:	6093      	str	r3, [r2, #8]
 80012b4:	4b56      	ldr	r3, [pc, #344]	@ (8001410 <os_aes+0x188>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	4a55      	ldr	r2, [pc, #340]	@ (8001410 <os_aes+0x188>)
 80012ba:	6053      	str	r3, [r2, #4]
 80012bc:	4b54      	ldr	r3, [pc, #336]	@ (8001410 <os_aes+0x188>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	4a53      	ldr	r2, [pc, #332]	@ (8001410 <os_aes+0x188>)
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	f000 bc97 	b.w	8001bf6 <os_aes+0x96e>
	} else {
		AESAUX[0] = swapmsbf(AESAUX[0]);
 80012c8:	4b51      	ldr	r3, [pc, #324]	@ (8001410 <os_aes+0x188>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	061a      	lsls	r2, r3, #24
 80012ce:	4b50      	ldr	r3, [pc, #320]	@ (8001410 <os_aes+0x188>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80012d8:	431a      	orrs	r2, r3
 80012da:	4b4d      	ldr	r3, [pc, #308]	@ (8001410 <os_aes+0x188>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	0a1b      	lsrs	r3, r3, #8
 80012e0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80012e4:	431a      	orrs	r2, r3
 80012e6:	4b4a      	ldr	r3, [pc, #296]	@ (8001410 <os_aes+0x188>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	0e1b      	lsrs	r3, r3, #24
 80012ec:	4313      	orrs	r3, r2
 80012ee:	4a48      	ldr	r2, [pc, #288]	@ (8001410 <os_aes+0x188>)
 80012f0:	6013      	str	r3, [r2, #0]
		AESAUX[1] = swapmsbf(AESAUX[1]);
 80012f2:	4b47      	ldr	r3, [pc, #284]	@ (8001410 <os_aes+0x188>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	061a      	lsls	r2, r3, #24
 80012f8:	4b45      	ldr	r3, [pc, #276]	@ (8001410 <os_aes+0x188>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	021b      	lsls	r3, r3, #8
 80012fe:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001302:	431a      	orrs	r2, r3
 8001304:	4b42      	ldr	r3, [pc, #264]	@ (8001410 <os_aes+0x188>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	0a1b      	lsrs	r3, r3, #8
 800130a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800130e:	431a      	orrs	r2, r3
 8001310:	4b3f      	ldr	r3, [pc, #252]	@ (8001410 <os_aes+0x188>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	0e1b      	lsrs	r3, r3, #24
 8001316:	4313      	orrs	r3, r2
 8001318:	4a3d      	ldr	r2, [pc, #244]	@ (8001410 <os_aes+0x188>)
 800131a:	6053      	str	r3, [r2, #4]
		AESAUX[2] = swapmsbf(AESAUX[2]);
 800131c:	4b3c      	ldr	r3, [pc, #240]	@ (8001410 <os_aes+0x188>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	061a      	lsls	r2, r3, #24
 8001322:	4b3b      	ldr	r3, [pc, #236]	@ (8001410 <os_aes+0x188>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	021b      	lsls	r3, r3, #8
 8001328:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800132c:	431a      	orrs	r2, r3
 800132e:	4b38      	ldr	r3, [pc, #224]	@ (8001410 <os_aes+0x188>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	0a1b      	lsrs	r3, r3, #8
 8001334:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001338:	431a      	orrs	r2, r3
 800133a:	4b35      	ldr	r3, [pc, #212]	@ (8001410 <os_aes+0x188>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	0e1b      	lsrs	r3, r3, #24
 8001340:	4313      	orrs	r3, r2
 8001342:	4a33      	ldr	r2, [pc, #204]	@ (8001410 <os_aes+0x188>)
 8001344:	6093      	str	r3, [r2, #8]
		AESAUX[3] = swapmsbf(AESAUX[3]);
 8001346:	4b32      	ldr	r3, [pc, #200]	@ (8001410 <os_aes+0x188>)
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	061a      	lsls	r2, r3, #24
 800134c:	4b30      	ldr	r3, [pc, #192]	@ (8001410 <os_aes+0x188>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	021b      	lsls	r3, r3, #8
 8001352:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001356:	431a      	orrs	r2, r3
 8001358:	4b2d      	ldr	r3, [pc, #180]	@ (8001410 <os_aes+0x188>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001362:	431a      	orrs	r2, r3
 8001364:	4b2a      	ldr	r3, [pc, #168]	@ (8001410 <os_aes+0x188>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	0e1b      	lsrs	r3, r3, #24
 800136a:	4313      	orrs	r3, r2
 800136c:	4a28      	ldr	r2, [pc, #160]	@ (8001410 <os_aes+0x188>)
 800136e:	60d3      	str	r3, [r2, #12]
	}

	while ((signed char) len > 0) {
 8001370:	f000 bc41 	b.w	8001bf6 <os_aes+0x96e>
		u4_t a0, a1, a2, a3;
		u4_t t0, t1, t2, t3;
		u4_t *ki, *ke;

		// load input block
		if ((mode & AES_CTR)
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	2b00      	cmp	r3, #0
 800137c:	d109      	bne.n	8001392 <os_aes+0x10a>
				|| ((mode & AES_MIC) && (mode & AES_MICNOAUX) == 0)) { // load CTR block or first MIC block
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d011      	beq.n	80013ac <os_aes+0x124>
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	f003 0308 	and.w	r3, r3, #8
 800138e:	2b00      	cmp	r3, #0
 8001390:	d10c      	bne.n	80013ac <os_aes+0x124>
			a0 = AESAUX[0];
 8001392:	4b1f      	ldr	r3, [pc, #124]	@ (8001410 <os_aes+0x188>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	62fb      	str	r3, [r7, #44]	@ 0x2c
			a1 = AESAUX[1];
 8001398:	4b1d      	ldr	r3, [pc, #116]	@ (8001410 <os_aes+0x188>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	62bb      	str	r3, [r7, #40]	@ 0x28
			a2 = AESAUX[2];
 800139e:	4b1c      	ldr	r3, [pc, #112]	@ (8001410 <os_aes+0x188>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
			a3 = AESAUX[3];
 80013a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001410 <os_aes+0x188>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	623b      	str	r3, [r7, #32]
 80013aa:	e062      	b.n	8001472 <os_aes+0x1ea>
		} else if ((mode & AES_MIC) && len <= 16) { // last MIC block
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d016      	beq.n	80013e4 <os_aes+0x15c>
 80013b6:	88bb      	ldrh	r3, [r7, #4]
 80013b8:	2b10      	cmp	r3, #16
 80013ba:	d813      	bhi.n	80013e4 <os_aes+0x15c>
			a0 = a1 = a2 = a3 = 0; // load null block
 80013bc:	2300      	movs	r3, #0
 80013be:	623b      	str	r3, [r7, #32]
 80013c0:	6a3b      	ldr	r3, [r7, #32]
 80013c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80013c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
			mode |= ((len == 16) ? 1 : 2) << 4; // set MICSUB: CMAC subkey K1 or K2
 80013cc:	88bb      	ldrh	r3, [r7, #4]
 80013ce:	2b10      	cmp	r3, #16
 80013d0:	d101      	bne.n	80013d6 <os_aes+0x14e>
 80013d2:	2210      	movs	r2, #16
 80013d4:	e000      	b.n	80013d8 <os_aes+0x150>
 80013d6:	2220      	movs	r2, #32
 80013d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013dc:	4313      	orrs	r3, r2
 80013de:	b25b      	sxtb	r3, r3
 80013e0:	71fb      	strb	r3, [r7, #7]
 80013e2:	e046      	b.n	8001472 <os_aes+0x1ea>
		} else
			LOADDATA: { // load data block (partially)
 80013e4:	bf00      	nop
				for (t0 = 0; t0 < 16; t0++) {
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
 80013ea:	e026      	b.n	800143a <os_aes+0x1b2>
					t1 =
							(t1 << 8)
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	021a      	lsls	r2, r3, #8
									| ((t0 < len) ? buf[t0] :
 80013f0:	88bb      	ldrh	r3, [r7, #4]
 80013f2:	69f9      	ldr	r1, [r7, #28]
 80013f4:	4299      	cmp	r1, r3
 80013f6:	d204      	bcs.n	8001402 <os_aes+0x17a>
 80013f8:	6839      	ldr	r1, [r7, #0]
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	440b      	add	r3, r1
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	e009      	b.n	8001416 <os_aes+0x18e>
										(t0 == len) ? 0x80 : 0x00);
 8001402:	88bb      	ldrh	r3, [r7, #4]
									| ((t0 < len) ? buf[t0] :
 8001404:	69f9      	ldr	r1, [r7, #28]
 8001406:	4299      	cmp	r1, r3
 8001408:	d104      	bne.n	8001414 <os_aes+0x18c>
 800140a:	2380      	movs	r3, #128	@ 0x80
 800140c:	e003      	b.n	8001416 <os_aes+0x18e>
 800140e:	bf00      	nop
 8001410:	20000144 	.word	0x20000144
 8001414:	2300      	movs	r3, #0
					t1 =
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
					if ((t0 & 3) == 3) {
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	2b03      	cmp	r3, #3
 8001422:	d107      	bne.n	8001434 <os_aes+0x1ac>
						a0 = a1;
 8001424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001426:	62fb      	str	r3, [r7, #44]	@ 0x2c
						a1 = a2;
 8001428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142a:	62bb      	str	r3, [r7, #40]	@ 0x28
						a2 = a3;
 800142c:	6a3b      	ldr	r3, [r7, #32]
 800142e:	627b      	str	r3, [r7, #36]	@ 0x24
						a3 = t1;
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	623b      	str	r3, [r7, #32]
				for (t0 = 0; t0 < 16; t0++) {
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	3301      	adds	r3, #1
 8001438:	61fb      	str	r3, [r7, #28]
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	2b0f      	cmp	r3, #15
 800143e:	d9d5      	bls.n	80013ec <os_aes+0x164>
					}
				}
				if (mode & AES_MIC) {
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d013      	beq.n	8001472 <os_aes+0x1ea>
					a0 ^= AESAUX[0];
 800144a:	4ba0      	ldr	r3, [pc, #640]	@ (80016cc <os_aes+0x444>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001450:	4053      	eors	r3, r2
 8001452:	62fb      	str	r3, [r7, #44]	@ 0x2c
					a1 ^= AESAUX[1];
 8001454:	4b9d      	ldr	r3, [pc, #628]	@ (80016cc <os_aes+0x444>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800145a:	4053      	eors	r3, r2
 800145c:	62bb      	str	r3, [r7, #40]	@ 0x28
					a2 ^= AESAUX[2];
 800145e:	4b9b      	ldr	r3, [pc, #620]	@ (80016cc <os_aes+0x444>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001464:	4053      	eors	r3, r2
 8001466:	627b      	str	r3, [r7, #36]	@ 0x24
					a3 ^= AESAUX[3];
 8001468:	4b98      	ldr	r3, [pc, #608]	@ (80016cc <os_aes+0x444>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	6a3a      	ldr	r2, [r7, #32]
 800146e:	4053      	eors	r3, r2
 8001470:	623b      	str	r3, [r7, #32]
				}
			}

		// perform AES encryption on block in a0-a3
		ki = AESKEY;
 8001472:	4b97      	ldr	r3, [pc, #604]	@ (80016d0 <os_aes+0x448>)
 8001474:	617b      	str	r3, [r7, #20]
		ke = ki + 8 * 4;
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	3380      	adds	r3, #128	@ 0x80
 800147a:	613b      	str	r3, [r7, #16]
		a0 ^= ki[0];
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001482:	4053      	eors	r3, r2
 8001484:	62fb      	str	r3, [r7, #44]	@ 0x2c
		a1 ^= ki[1];
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	3304      	adds	r3, #4
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800148e:	4053      	eors	r3, r2
 8001490:	62bb      	str	r3, [r7, #40]	@ 0x28
		a2 ^= ki[2];
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	3308      	adds	r3, #8
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800149a:	4053      	eors	r3, r2
 800149c:	627b      	str	r3, [r7, #36]	@ 0x24
		a3 ^= ki[3];
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	330c      	adds	r3, #12
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6a3a      	ldr	r2, [r7, #32]
 80014a6:	4053      	eors	r3, r2
 80014a8:	623b      	str	r3, [r7, #32]
		do {
			AES_key4(t1, t2, t3, t0, 4);
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	61bb      	str	r3, [r7, #24]
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	61fb      	str	r3, [r7, #28]
			AES_expr4(t1, t2, t3, t0, a0);
 80014c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	461a      	mov	r2, r3
 80014c8:	4b82      	ldr	r3, [pc, #520]	@ (80016d4 <os_aes+0x44c>)
 80014ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4053      	eors	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
 80014d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014d6:	0a1b      	lsrs	r3, r3, #8
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	461a      	mov	r2, r3
 80014dc:	4b7e      	ldr	r3, [pc, #504]	@ (80016d8 <os_aes+0x450>)
 80014de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	4053      	eors	r3, r2
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014ea:	0c1b      	lsrs	r3, r3, #16
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b7a      	ldr	r3, [pc, #488]	@ (80016dc <os_aes+0x454>)
 80014f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	4053      	eors	r3, r2
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014fe:	0e1b      	lsrs	r3, r3, #24
 8001500:	4a77      	ldr	r2, [pc, #476]	@ (80016e0 <os_aes+0x458>)
 8001502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001506:	69fa      	ldr	r2, [r7, #28]
 8001508:	4053      	eors	r3, r2
 800150a:	61fb      	str	r3, [r7, #28]
			AES_expr4(t2, t3, t0, t1, a1);
 800150c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800150e:	b2db      	uxtb	r3, r3
 8001510:	461a      	mov	r2, r3
 8001512:	4b70      	ldr	r3, [pc, #448]	@ (80016d4 <os_aes+0x44c>)
 8001514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	4053      	eors	r3, r2
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001520:	0a1b      	lsrs	r3, r3, #8
 8001522:	b2db      	uxtb	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	4b6c      	ldr	r3, [pc, #432]	@ (80016d8 <os_aes+0x450>)
 8001528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152c:	68ba      	ldr	r2, [r7, #8]
 800152e:	4053      	eors	r3, r2
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001534:	0c1b      	lsrs	r3, r3, #16
 8001536:	b2db      	uxtb	r3, r3
 8001538:	461a      	mov	r2, r3
 800153a:	4b68      	ldr	r3, [pc, #416]	@ (80016dc <os_aes+0x454>)
 800153c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001540:	69fa      	ldr	r2, [r7, #28]
 8001542:	4053      	eors	r3, r2
 8001544:	61fb      	str	r3, [r7, #28]
 8001546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001548:	0e1b      	lsrs	r3, r3, #24
 800154a:	4a65      	ldr	r2, [pc, #404]	@ (80016e0 <os_aes+0x458>)
 800154c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4053      	eors	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
			AES_expr4(t3, t0, t1, t2, a2);
 8001556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001558:	b2db      	uxtb	r3, r3
 800155a:	461a      	mov	r2, r3
 800155c:	4b5d      	ldr	r3, [pc, #372]	@ (80016d4 <os_aes+0x44c>)
 800155e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	4053      	eors	r3, r2
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156a:	0a1b      	lsrs	r3, r3, #8
 800156c:	b2db      	uxtb	r3, r3
 800156e:	461a      	mov	r2, r3
 8001570:	4b59      	ldr	r3, [pc, #356]	@ (80016d8 <os_aes+0x450>)
 8001572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001576:	69fa      	ldr	r2, [r7, #28]
 8001578:	4053      	eors	r3, r2
 800157a:	61fb      	str	r3, [r7, #28]
 800157c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157e:	0c1b      	lsrs	r3, r3, #16
 8001580:	b2db      	uxtb	r3, r3
 8001582:	461a      	mov	r2, r3
 8001584:	4b55      	ldr	r3, [pc, #340]	@ (80016dc <os_aes+0x454>)
 8001586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4053      	eors	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
 8001590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001592:	0e1b      	lsrs	r3, r3, #24
 8001594:	4a52      	ldr	r2, [pc, #328]	@ (80016e0 <os_aes+0x458>)
 8001596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	4053      	eors	r3, r2
 800159e:	60fb      	str	r3, [r7, #12]
			AES_expr4(t0, t1, t2, t3, a3);
 80015a0:	6a3b      	ldr	r3, [r7, #32]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b4b      	ldr	r3, [pc, #300]	@ (80016d4 <os_aes+0x44c>)
 80015a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ac:	69fa      	ldr	r2, [r7, #28]
 80015ae:	4053      	eors	r3, r2
 80015b0:	61fb      	str	r3, [r7, #28]
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	0a1b      	lsrs	r3, r3, #8
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b47      	ldr	r3, [pc, #284]	@ (80016d8 <os_aes+0x450>)
 80015bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4053      	eors	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
 80015c6:	6a3b      	ldr	r3, [r7, #32]
 80015c8:	0c1b      	lsrs	r3, r3, #16
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b43      	ldr	r3, [pc, #268]	@ (80016dc <os_aes+0x454>)
 80015d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	4053      	eors	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	6a3b      	ldr	r3, [r7, #32]
 80015dc:	0e1b      	lsrs	r3, r3, #24
 80015de:	4a40      	ldr	r2, [pc, #256]	@ (80016e0 <os_aes+0x458>)
 80015e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e4:	68ba      	ldr	r2, [r7, #8]
 80015e6:	4053      	eors	r3, r2
 80015e8:	60bb      	str	r3, [r7, #8]

			AES_key4(a1, a2, a3, a0, 8);
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015fa:	623b      	str	r3, [r7, #32]
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	62fb      	str	r3, [r7, #44]	@ 0x2c
			AES_expr4(a1, a2, a3, a0, t0);
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	461a      	mov	r2, r3
 8001608:	4b32      	ldr	r3, [pc, #200]	@ (80016d4 <os_aes+0x44c>)
 800160a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800160e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001610:	4053      	eors	r3, r2
 8001612:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	0a1b      	lsrs	r3, r3, #8
 8001618:	b2db      	uxtb	r3, r3
 800161a:	461a      	mov	r2, r3
 800161c:	4b2e      	ldr	r3, [pc, #184]	@ (80016d8 <os_aes+0x450>)
 800161e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001622:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001624:	4053      	eors	r3, r2
 8001626:	627b      	str	r3, [r7, #36]	@ 0x24
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	0c1b      	lsrs	r3, r3, #16
 800162c:	b2db      	uxtb	r3, r3
 800162e:	461a      	mov	r2, r3
 8001630:	4b2a      	ldr	r3, [pc, #168]	@ (80016dc <os_aes+0x454>)
 8001632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001636:	6a3a      	ldr	r2, [r7, #32]
 8001638:	4053      	eors	r3, r2
 800163a:	623b      	str	r3, [r7, #32]
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	0e1b      	lsrs	r3, r3, #24
 8001640:	4a27      	ldr	r2, [pc, #156]	@ (80016e0 <os_aes+0x458>)
 8001642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001646:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001648:	4053      	eors	r3, r2
 800164a:	62fb      	str	r3, [r7, #44]	@ 0x2c
			AES_expr4(a2, a3, a0, a1, t1);
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	b2db      	uxtb	r3, r3
 8001650:	461a      	mov	r2, r3
 8001652:	4b20      	ldr	r3, [pc, #128]	@ (80016d4 <os_aes+0x44c>)
 8001654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001658:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800165a:	4053      	eors	r3, r2
 800165c:	627b      	str	r3, [r7, #36]	@ 0x24
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	0a1b      	lsrs	r3, r3, #8
 8001662:	b2db      	uxtb	r3, r3
 8001664:	461a      	mov	r2, r3
 8001666:	4b1c      	ldr	r3, [pc, #112]	@ (80016d8 <os_aes+0x450>)
 8001668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800166c:	6a3a      	ldr	r2, [r7, #32]
 800166e:	4053      	eors	r3, r2
 8001670:	623b      	str	r3, [r7, #32]
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	0c1b      	lsrs	r3, r3, #16
 8001676:	b2db      	uxtb	r3, r3
 8001678:	461a      	mov	r2, r3
 800167a:	4b18      	ldr	r3, [pc, #96]	@ (80016dc <os_aes+0x454>)
 800167c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001680:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001682:	4053      	eors	r3, r2
 8001684:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	0e1b      	lsrs	r3, r3, #24
 800168a:	4a15      	ldr	r2, [pc, #84]	@ (80016e0 <os_aes+0x458>)
 800168c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001690:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001692:	4053      	eors	r3, r2
 8001694:	62bb      	str	r3, [r7, #40]	@ 0x28
			AES_expr4(a3, a0, a1, a2, t2);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	b2db      	uxtb	r3, r3
 800169a:	461a      	mov	r2, r3
 800169c:	4b0d      	ldr	r3, [pc, #52]	@ (80016d4 <os_aes+0x44c>)
 800169e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a2:	6a3a      	ldr	r2, [r7, #32]
 80016a4:	4053      	eors	r3, r2
 80016a6:	623b      	str	r3, [r7, #32]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	0a1b      	lsrs	r3, r3, #8
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	461a      	mov	r2, r3
 80016b0:	4b09      	ldr	r3, [pc, #36]	@ (80016d8 <os_aes+0x450>)
 80016b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016b8:	4053      	eors	r3, r2
 80016ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	0c1b      	lsrs	r3, r3, #16
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	461a      	mov	r2, r3
 80016c4:	4b05      	ldr	r3, [pc, #20]	@ (80016dc <os_aes+0x454>)
 80016c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ca:	e00b      	b.n	80016e4 <os_aes+0x45c>
 80016cc:	20000144 	.word	0x20000144
 80016d0:	20000154 	.word	0x20000154
 80016d4:	08012910 	.word	0x08012910
 80016d8:	08012510 	.word	0x08012510
 80016dc:	08012110 	.word	0x08012110
 80016e0:	08011d10 	.word	0x08011d10
 80016e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80016e6:	4053      	eors	r3, r2
 80016e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	0e1b      	lsrs	r3, r3, #24
 80016ee:	4aa1      	ldr	r2, [pc, #644]	@ (8001974 <os_aes+0x6ec>)
 80016f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016f6:	4053      	eors	r3, r2
 80016f8:	627b      	str	r3, [r7, #36]	@ 0x24
			AES_expr4(a0, a1, a2, a3, t3);
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	461a      	mov	r2, r3
 8001700:	4b9d      	ldr	r3, [pc, #628]	@ (8001978 <os_aes+0x6f0>)
 8001702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001706:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001708:	4053      	eors	r3, r2
 800170a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	0a1b      	lsrs	r3, r3, #8
 8001710:	b2db      	uxtb	r3, r3
 8001712:	461a      	mov	r2, r3
 8001714:	4b99      	ldr	r3, [pc, #612]	@ (800197c <os_aes+0x6f4>)
 8001716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800171a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800171c:	4053      	eors	r3, r2
 800171e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	0c1b      	lsrs	r3, r3, #16
 8001724:	b2db      	uxtb	r3, r3
 8001726:	461a      	mov	r2, r3
 8001728:	4b95      	ldr	r3, [pc, #596]	@ (8001980 <os_aes+0x6f8>)
 800172a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800172e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001730:	4053      	eors	r3, r2
 8001732:	627b      	str	r3, [r7, #36]	@ 0x24
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	0e1b      	lsrs	r3, r3, #24
 8001738:	4a8e      	ldr	r2, [pc, #568]	@ (8001974 <os_aes+0x6ec>)
 800173a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173e:	6a3a      	ldr	r2, [r7, #32]
 8001740:	4053      	eors	r3, r2
 8001742:	623b      	str	r3, [r7, #32]
		} while ((ki += 8) < ke);
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	3320      	adds	r3, #32
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	429a      	cmp	r2, r3
 8001750:	f4ff aeab 	bcc.w	80014aa <os_aes+0x222>

		AES_key4(t1, t2, t3, t0, 4);
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	61bb      	str	r3, [r7, #24]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	61fb      	str	r3, [r7, #28]
		AES_expr4(t1, t2, t3, t0, a0);
 800176c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800176e:	b2db      	uxtb	r3, r3
 8001770:	461a      	mov	r2, r3
 8001772:	4b81      	ldr	r3, [pc, #516]	@ (8001978 <os_aes+0x6f0>)
 8001774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4053      	eors	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
 800177e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001780:	0a1b      	lsrs	r3, r3, #8
 8001782:	b2db      	uxtb	r3, r3
 8001784:	461a      	mov	r2, r3
 8001786:	4b7d      	ldr	r3, [pc, #500]	@ (800197c <os_aes+0x6f4>)
 8001788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	4053      	eors	r3, r2
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001794:	0c1b      	lsrs	r3, r3, #16
 8001796:	b2db      	uxtb	r3, r3
 8001798:	461a      	mov	r2, r3
 800179a:	4b79      	ldr	r3, [pc, #484]	@ (8001980 <os_aes+0x6f8>)
 800179c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a0:	68ba      	ldr	r2, [r7, #8]
 80017a2:	4053      	eors	r3, r2
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017a8:	0e1b      	lsrs	r3, r3, #24
 80017aa:	4a72      	ldr	r2, [pc, #456]	@ (8001974 <os_aes+0x6ec>)
 80017ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b0:	69fa      	ldr	r2, [r7, #28]
 80017b2:	4053      	eors	r3, r2
 80017b4:	61fb      	str	r3, [r7, #28]
		AES_expr4(t2, t3, t0, t1, a1);
 80017b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	461a      	mov	r2, r3
 80017bc:	4b6e      	ldr	r3, [pc, #440]	@ (8001978 <os_aes+0x6f0>)
 80017be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	4053      	eors	r3, r2
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017ca:	0a1b      	lsrs	r3, r3, #8
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	461a      	mov	r2, r3
 80017d0:	4b6a      	ldr	r3, [pc, #424]	@ (800197c <os_aes+0x6f4>)
 80017d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	4053      	eors	r3, r2
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017de:	0c1b      	lsrs	r3, r3, #16
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	461a      	mov	r2, r3
 80017e4:	4b66      	ldr	r3, [pc, #408]	@ (8001980 <os_aes+0x6f8>)
 80017e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ea:	69fa      	ldr	r2, [r7, #28]
 80017ec:	4053      	eors	r3, r2
 80017ee:	61fb      	str	r3, [r7, #28]
 80017f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017f2:	0e1b      	lsrs	r3, r3, #24
 80017f4:	4a5f      	ldr	r2, [pc, #380]	@ (8001974 <os_aes+0x6ec>)
 80017f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4053      	eors	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
		AES_expr4(t3, t0, t1, t2, a2);
 8001800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001802:	b2db      	uxtb	r3, r3
 8001804:	461a      	mov	r2, r3
 8001806:	4b5c      	ldr	r3, [pc, #368]	@ (8001978 <os_aes+0x6f0>)
 8001808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800180c:	68ba      	ldr	r2, [r7, #8]
 800180e:	4053      	eors	r3, r2
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	b2db      	uxtb	r3, r3
 8001818:	461a      	mov	r2, r3
 800181a:	4b58      	ldr	r3, [pc, #352]	@ (800197c <os_aes+0x6f4>)
 800181c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001820:	69fa      	ldr	r2, [r7, #28]
 8001822:	4053      	eors	r3, r2
 8001824:	61fb      	str	r3, [r7, #28]
 8001826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001828:	0c1b      	lsrs	r3, r3, #16
 800182a:	b2db      	uxtb	r3, r3
 800182c:	461a      	mov	r2, r3
 800182e:	4b54      	ldr	r3, [pc, #336]	@ (8001980 <os_aes+0x6f8>)
 8001830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4053      	eors	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
 800183a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183c:	0e1b      	lsrs	r3, r3, #24
 800183e:	4a4d      	ldr	r2, [pc, #308]	@ (8001974 <os_aes+0x6ec>)
 8001840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	4053      	eors	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]
		AES_expr4(t0, t1, t2, t3, a3);
 800184a:	6a3b      	ldr	r3, [r7, #32]
 800184c:	b2db      	uxtb	r3, r3
 800184e:	461a      	mov	r2, r3
 8001850:	4b49      	ldr	r3, [pc, #292]	@ (8001978 <os_aes+0x6f0>)
 8001852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	4053      	eors	r3, r2
 800185a:	61fb      	str	r3, [r7, #28]
 800185c:	6a3b      	ldr	r3, [r7, #32]
 800185e:	0a1b      	lsrs	r3, r3, #8
 8001860:	b2db      	uxtb	r3, r3
 8001862:	461a      	mov	r2, r3
 8001864:	4b45      	ldr	r3, [pc, #276]	@ (800197c <os_aes+0x6f4>)
 8001866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4053      	eors	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
 8001870:	6a3b      	ldr	r3, [r7, #32]
 8001872:	0c1b      	lsrs	r3, r3, #16
 8001874:	b2db      	uxtb	r3, r3
 8001876:	461a      	mov	r2, r3
 8001878:	4b41      	ldr	r3, [pc, #260]	@ (8001980 <os_aes+0x6f8>)
 800187a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	4053      	eors	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	6a3b      	ldr	r3, [r7, #32]
 8001886:	0e1b      	lsrs	r3, r3, #24
 8001888:	4a3a      	ldr	r2, [pc, #232]	@ (8001974 <os_aes+0x6ec>)
 800188a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	4053      	eors	r3, r2
 8001892:	60bb      	str	r3, [r7, #8]

		AES_expr(a0, t0, t1, t2, t3, 8);
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	0e1b      	lsrs	r3, r3, #24
 800189e:	4a39      	ldr	r2, [pc, #228]	@ (8001984 <os_aes+0x6fc>)
 80018a0:	5cd3      	ldrb	r3, [r2, r3]
 80018a2:	061b      	lsls	r3, r3, #24
 80018a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018a6:	4053      	eors	r3, r2
 80018a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	0c1b      	lsrs	r3, r3, #16
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b34      	ldr	r3, [pc, #208]	@ (8001984 <os_aes+0x6fc>)
 80018b4:	5c9b      	ldrb	r3, [r3, r2]
 80018b6:	041b      	lsls	r3, r3, #16
 80018b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018ba:	4053      	eors	r3, r2
 80018bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	0a1b      	lsrs	r3, r3, #8
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001984 <os_aes+0x6fc>)
 80018c8:	5c9b      	ldrb	r3, [r3, r2]
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018ce:	4053      	eors	r3, r2
 80018d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	461a      	mov	r2, r3
 80018d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001984 <os_aes+0x6fc>)
 80018da:	5c9b      	ldrb	r3, [r3, r2]
 80018dc:	461a      	mov	r2, r3
 80018de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018e0:	4053      	eors	r3, r2
 80018e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		AES_expr(a1, t1, t2, t3, t0, 9);
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	0e1b      	lsrs	r3, r3, #24
 80018ee:	4a25      	ldr	r2, [pc, #148]	@ (8001984 <os_aes+0x6fc>)
 80018f0:	5cd3      	ldrb	r3, [r2, r3]
 80018f2:	061b      	lsls	r3, r3, #24
 80018f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018f6:	4053      	eors	r3, r2
 80018f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	0c1b      	lsrs	r3, r3, #16
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	461a      	mov	r2, r3
 8001902:	4b20      	ldr	r3, [pc, #128]	@ (8001984 <os_aes+0x6fc>)
 8001904:	5c9b      	ldrb	r3, [r3, r2]
 8001906:	041b      	lsls	r3, r3, #16
 8001908:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800190a:	4053      	eors	r3, r2
 800190c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	0a1b      	lsrs	r3, r3, #8
 8001912:	b2db      	uxtb	r3, r3
 8001914:	461a      	mov	r2, r3
 8001916:	4b1b      	ldr	r3, [pc, #108]	@ (8001984 <os_aes+0x6fc>)
 8001918:	5c9b      	ldrb	r3, [r3, r2]
 800191a:	021b      	lsls	r3, r3, #8
 800191c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800191e:	4053      	eors	r3, r2
 8001920:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	b2db      	uxtb	r3, r3
 8001926:	461a      	mov	r2, r3
 8001928:	4b16      	ldr	r3, [pc, #88]	@ (8001984 <os_aes+0x6fc>)
 800192a:	5c9b      	ldrb	r3, [r3, r2]
 800192c:	461a      	mov	r2, r3
 800192e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001930:	4053      	eors	r3, r2
 8001932:	62bb      	str	r3, [r7, #40]	@ 0x28
		AES_expr(a2, t2, t3, t0, t1, 10);
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001938:	627b      	str	r3, [r7, #36]	@ 0x24
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	0e1b      	lsrs	r3, r3, #24
 800193e:	4a11      	ldr	r2, [pc, #68]	@ (8001984 <os_aes+0x6fc>)
 8001940:	5cd3      	ldrb	r3, [r2, r3]
 8001942:	061b      	lsls	r3, r3, #24
 8001944:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001946:	4053      	eors	r3, r2
 8001948:	627b      	str	r3, [r7, #36]	@ 0x24
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	0c1b      	lsrs	r3, r3, #16
 800194e:	b2db      	uxtb	r3, r3
 8001950:	461a      	mov	r2, r3
 8001952:	4b0c      	ldr	r3, [pc, #48]	@ (8001984 <os_aes+0x6fc>)
 8001954:	5c9b      	ldrb	r3, [r3, r2]
 8001956:	041b      	lsls	r3, r3, #16
 8001958:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800195a:	4053      	eors	r3, r2
 800195c:	627b      	str	r3, [r7, #36]	@ 0x24
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	0a1b      	lsrs	r3, r3, #8
 8001962:	b2db      	uxtb	r3, r3
 8001964:	461a      	mov	r2, r3
 8001966:	4b07      	ldr	r3, [pc, #28]	@ (8001984 <os_aes+0x6fc>)
 8001968:	5c9b      	ldrb	r3, [r3, r2]
 800196a:	021b      	lsls	r3, r3, #8
 800196c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800196e:	4053      	eors	r3, r2
 8001970:	e00a      	b.n	8001988 <os_aes+0x700>
 8001972:	bf00      	nop
 8001974:	08011d10 	.word	0x08011d10
 8001978:	08012910 	.word	0x08012910
 800197c:	08012510 	.word	0x08012510
 8001980:	08012110 	.word	0x08012110
 8001984:	08011c10 	.word	0x08011c10
 8001988:	627b      	str	r3, [r7, #36]	@ 0x24
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	b2db      	uxtb	r3, r3
 800198e:	461a      	mov	r2, r3
 8001990:	4b5f      	ldr	r3, [pc, #380]	@ (8001b10 <os_aes+0x888>)
 8001992:	5c9b      	ldrb	r3, [r3, r2]
 8001994:	461a      	mov	r2, r3
 8001996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001998:	4053      	eors	r3, r2
 800199a:	627b      	str	r3, [r7, #36]	@ 0x24
		AES_expr(a3, t3, t0, t1, t2, 11);
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a0:	623b      	str	r3, [r7, #32]
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	0e1b      	lsrs	r3, r3, #24
 80019a6:	4a5a      	ldr	r2, [pc, #360]	@ (8001b10 <os_aes+0x888>)
 80019a8:	5cd3      	ldrb	r3, [r2, r3]
 80019aa:	061b      	lsls	r3, r3, #24
 80019ac:	6a3a      	ldr	r2, [r7, #32]
 80019ae:	4053      	eors	r3, r2
 80019b0:	623b      	str	r3, [r7, #32]
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	0c1b      	lsrs	r3, r3, #16
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	461a      	mov	r2, r3
 80019ba:	4b55      	ldr	r3, [pc, #340]	@ (8001b10 <os_aes+0x888>)
 80019bc:	5c9b      	ldrb	r3, [r3, r2]
 80019be:	041b      	lsls	r3, r3, #16
 80019c0:	6a3a      	ldr	r2, [r7, #32]
 80019c2:	4053      	eors	r3, r2
 80019c4:	623b      	str	r3, [r7, #32]
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	0a1b      	lsrs	r3, r3, #8
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b50      	ldr	r3, [pc, #320]	@ (8001b10 <os_aes+0x888>)
 80019d0:	5c9b      	ldrb	r3, [r3, r2]
 80019d2:	021b      	lsls	r3, r3, #8
 80019d4:	6a3a      	ldr	r2, [r7, #32]
 80019d6:	4053      	eors	r3, r2
 80019d8:	623b      	str	r3, [r7, #32]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	461a      	mov	r2, r3
 80019e0:	4b4b      	ldr	r3, [pc, #300]	@ (8001b10 <os_aes+0x888>)
 80019e2:	5c9b      	ldrb	r3, [r3, r2]
 80019e4:	461a      	mov	r2, r3
 80019e6:	6a3b      	ldr	r3, [r7, #32]
 80019e8:	4053      	eors	r3, r2
 80019ea:	623b      	str	r3, [r7, #32]
		// result of AES encryption in a0-a3

		if (mode & AES_MIC) {
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d056      	beq.n	8001aa4 <os_aes+0x81c>
			if ((t1 = (mode & AES_MICSUB) >> 4) != 0) { // last block
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	111b      	asrs	r3, r3, #4
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	61bb      	str	r3, [r7, #24]
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d041      	beq.n	8001a8a <os_aes+0x802>
				do {
					// compute CMAC subkey K1 and K2
					t0 = a0 >> 31; // save MSB
 8001a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a08:	0fdb      	lsrs	r3, r3, #31
 8001a0a:	61fb      	str	r3, [r7, #28]
					a0 = (a0 << 1) | (a1 >> 31);
 8001a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a0e:	005a      	lsls	r2, r3, #1
 8001a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a12:	0fdb      	lsrs	r3, r3, #31
 8001a14:	4313      	orrs	r3, r2
 8001a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
					a1 = (a1 << 1) | (a2 >> 31);
 8001a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a1a:	005a      	lsls	r2, r3, #1
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1e:	0fdb      	lsrs	r3, r3, #31
 8001a20:	4313      	orrs	r3, r2
 8001a22:	62bb      	str	r3, [r7, #40]	@ 0x28
					a2 = (a2 << 1) | (a3 >> 31);
 8001a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a26:	005a      	lsls	r2, r3, #1
 8001a28:	6a3b      	ldr	r3, [r7, #32]
 8001a2a:	0fdb      	lsrs	r3, r3, #31
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	627b      	str	r3, [r7, #36]	@ 0x24
					a3 = (a3 << 1);
 8001a30:	6a3b      	ldr	r3, [r7, #32]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	623b      	str	r3, [r7, #32]
					if (t0)
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <os_aes+0x7bc>
						a3 ^= 0x87;
 8001a3c:	6a3b      	ldr	r3, [r7, #32]
 8001a3e:	f083 0387 	eor.w	r3, r3, #135	@ 0x87
 8001a42:	623b      	str	r3, [r7, #32]
				} while (--t1);
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	61bb      	str	r3, [r7, #24]
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1da      	bne.n	8001a06 <os_aes+0x77e>

				AESAUX[0] ^= a0;
 8001a50:	4b30      	ldr	r3, [pc, #192]	@ (8001b14 <os_aes+0x88c>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a56:	4053      	eors	r3, r2
 8001a58:	4a2e      	ldr	r2, [pc, #184]	@ (8001b14 <os_aes+0x88c>)
 8001a5a:	6013      	str	r3, [r2, #0]
				AESAUX[1] ^= a1;
 8001a5c:	4b2d      	ldr	r3, [pc, #180]	@ (8001b14 <os_aes+0x88c>)
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a62:	4053      	eors	r3, r2
 8001a64:	4a2b      	ldr	r2, [pc, #172]	@ (8001b14 <os_aes+0x88c>)
 8001a66:	6053      	str	r3, [r2, #4]
				AESAUX[2] ^= a2;
 8001a68:	4b2a      	ldr	r3, [pc, #168]	@ (8001b14 <os_aes+0x88c>)
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6e:	4053      	eors	r3, r2
 8001a70:	4a28      	ldr	r2, [pc, #160]	@ (8001b14 <os_aes+0x88c>)
 8001a72:	6093      	str	r3, [r2, #8]
				AESAUX[3] ^= a3;
 8001a74:	4b27      	ldr	r3, [pc, #156]	@ (8001b14 <os_aes+0x88c>)
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	6a3b      	ldr	r3, [r7, #32]
 8001a7a:	4053      	eors	r3, r2
 8001a7c:	4a25      	ldr	r2, [pc, #148]	@ (8001b14 <os_aes+0x88c>)
 8001a7e:	60d3      	str	r3, [r2, #12]
				mode &= ~AES_MICSUB;
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001a86:	71fb      	strb	r3, [r7, #7]
				goto LOADDATA;
 8001a88:	e4ad      	b.n	80013e6 <os_aes+0x15e>
			} else {
				// save cipher block as new iv
				AESAUX[0] = a0;
 8001a8a:	4a22      	ldr	r2, [pc, #136]	@ (8001b14 <os_aes+0x88c>)
 8001a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a8e:	6013      	str	r3, [r2, #0]
				AESAUX[1] = a1;
 8001a90:	4a20      	ldr	r2, [pc, #128]	@ (8001b14 <os_aes+0x88c>)
 8001a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a94:	6053      	str	r3, [r2, #4]
				AESAUX[2] = a2;
 8001a96:	4a1f      	ldr	r2, [pc, #124]	@ (8001b14 <os_aes+0x88c>)
 8001a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9a:	6093      	str	r3, [r2, #8]
				AESAUX[3] = a3;
 8001a9c:	4a1d      	ldr	r2, [pc, #116]	@ (8001b14 <os_aes+0x88c>)
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	60d3      	str	r3, [r2, #12]
 8001aa2:	e094      	b.n	8001bce <os_aes+0x946>
			}
		} else { // CIPHER
			if (mode & AES_CTR) { // xor block (partially)
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d034      	beq.n	8001b18 <os_aes+0x890>
				t0 = (len > 16) ? 16 : len;
 8001aae:	88bb      	ldrh	r3, [r7, #4]
 8001ab0:	2b10      	cmp	r3, #16
 8001ab2:	bf28      	it	cs
 8001ab4:	2310      	movcs	r3, #16
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	61fb      	str	r3, [r7, #28]
				for (t1 = 0; t1 < t0; t1++) {
 8001aba:	2300      	movs	r3, #0
 8001abc:	61bb      	str	r3, [r7, #24]
 8001abe:	e01d      	b.n	8001afc <os_aes+0x874>
					buf[t1] ^= (a0 >> 24);
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	7819      	ldrb	r1, [r3, #0]
 8001ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aca:	0e1b      	lsrs	r3, r3, #24
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	6838      	ldr	r0, [r7, #0]
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	4403      	add	r3, r0
 8001ad4:	404a      	eors	r2, r1
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	701a      	strb	r2, [r3, #0]
					a0 <<= 8;
 8001ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001adc:	021b      	lsls	r3, r3, #8
 8001ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
					if ((t1 & 3) == 3) {
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	2b03      	cmp	r3, #3
 8001ae8:	d105      	bne.n	8001af6 <os_aes+0x86e>
						a0 = a1;
 8001aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
						a1 = a2;
 8001aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af0:	62bb      	str	r3, [r7, #40]	@ 0x28
						a2 = a3;
 8001af2:	6a3b      	ldr	r3, [r7, #32]
 8001af4:	627b      	str	r3, [r7, #36]	@ 0x24
				for (t1 = 0; t1 < t0; t1++) {
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	3301      	adds	r3, #1
 8001afa:	61bb      	str	r3, [r7, #24]
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d3dd      	bcc.n	8001ac0 <os_aes+0x838>
					}
				}
				// update counter
				AESAUX[3]++;
 8001b04:	4b03      	ldr	r3, [pc, #12]	@ (8001b14 <os_aes+0x88c>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	4a02      	ldr	r2, [pc, #8]	@ (8001b14 <os_aes+0x88c>)
 8001b0c:	60d3      	str	r3, [r2, #12]
 8001b0e:	e05e      	b.n	8001bce <os_aes+0x946>
 8001b10:	08011c10 	.word	0x08011c10
 8001b14:	20000144 	.word	0x20000144
			} else { // ECB
				// store block
				msbf4_write(buf + 0, a0);
 8001b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b1a:	0e1b      	lsrs	r3, r3, #24
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	701a      	strb	r2, [r3, #0]
 8001b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b24:	0c1a      	lsrs	r2, r3, #16
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	701a      	strb	r2, [r3, #0]
 8001b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b30:	0a1a      	lsrs	r2, r3, #8
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	3302      	adds	r3, #2
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	701a      	strb	r2, [r3, #0]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	3303      	adds	r3, #3
 8001b3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	701a      	strb	r2, [r3, #0]
				msbf4_write(buf + 4, a1);
 8001b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b46:	0e1a      	lsrs	r2, r3, #24
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	3304      	adds	r3, #4
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	701a      	strb	r2, [r3, #0]
 8001b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b52:	0c1a      	lsrs	r2, r3, #16
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	3305      	adds	r3, #5
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	701a      	strb	r2, [r3, #0]
 8001b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b5e:	0a1a      	lsrs	r2, r3, #8
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	3306      	adds	r3, #6
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	701a      	strb	r2, [r3, #0]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	3307      	adds	r3, #7
 8001b6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	701a      	strb	r2, [r3, #0]
				msbf4_write(buf + 8, a2);
 8001b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b74:	0e1a      	lsrs	r2, r3, #24
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	3308      	adds	r3, #8
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	701a      	strb	r2, [r3, #0]
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b80:	0c1a      	lsrs	r2, r3, #16
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	3309      	adds	r3, #9
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	701a      	strb	r2, [r3, #0]
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8c:	0a1a      	lsrs	r2, r3, #8
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	330a      	adds	r3, #10
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	701a      	strb	r2, [r3, #0]
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	330b      	adds	r3, #11
 8001b9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	701a      	strb	r2, [r3, #0]
				msbf4_write(buf + 12, a3);
 8001ba0:	6a3b      	ldr	r3, [r7, #32]
 8001ba2:	0e1a      	lsrs	r2, r3, #24
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	330c      	adds	r3, #12
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	701a      	strb	r2, [r3, #0]
 8001bac:	6a3b      	ldr	r3, [r7, #32]
 8001bae:	0c1a      	lsrs	r2, r3, #16
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	330d      	adds	r3, #13
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	701a      	strb	r2, [r3, #0]
 8001bb8:	6a3b      	ldr	r3, [r7, #32]
 8001bba:	0a1a      	lsrs	r2, r3, #8
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	330e      	adds	r3, #14
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	701a      	strb	r2, [r3, #0]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	330f      	adds	r3, #15
 8001bc8:	6a3a      	ldr	r2, [r7, #32]
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	701a      	strb	r2, [r3, #0]
			}
		}

		// update block state
		if ((mode & AES_MIC) == 0 || (mode & AES_MICNOAUX)) {
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d004      	beq.n	8001be2 <os_aes+0x95a>
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d005      	beq.n	8001bee <os_aes+0x966>
			buf += 16;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	3310      	adds	r3, #16
 8001be6:	603b      	str	r3, [r7, #0]
			len -= 16;
 8001be8:	88bb      	ldrh	r3, [r7, #4]
 8001bea:	3b10      	subs	r3, #16
 8001bec:	80bb      	strh	r3, [r7, #4]
		}
		mode |= AES_MICNOAUX;
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	f043 0308 	orr.w	r3, r3, #8
 8001bf4:	71fb      	strb	r3, [r7, #7]
	while ((signed char) len > 0) {
 8001bf6:	88bb      	ldrh	r3, [r7, #4]
 8001bf8:	b25b      	sxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f73f abba 	bgt.w	8001374 <os_aes+0xec>
	}
	return AESAUX[0];
 8001c00:	4b02      	ldr	r3, [pc, #8]	@ (8001c0c <os_aes+0x984>)
 8001c02:	681b      	ldr	r3, [r3, #0]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3730      	adds	r7, #48	@ 0x30
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000144 	.word	0x20000144

08001c10 <bme68x_init>:
/* @brief This API reads the chip-id of the sensor which is the first step to
 * verify the sensor and also calibrates the sensor
 * As this API is the entry point, call this API before using other APIs.
 */
int8_t bme68x_init(struct bme68x_dev *dev)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	rslt = bme68x_soft_reset(dev);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 f901 	bl	8001e20 <bme68x_soft_reset>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME68X_OK) {
 8001c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d120      	bne.n	8001c6c <bme68x_init+0x5c>
		rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	20d0      	movs	r0, #208	@ 0xd0
 8001c32:	f000 f8b1 	bl	8001d98 <bme68x_get_regs>
 8001c36:	4603      	mov	r3, r0
 8001c38:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME68X_OK) {
 8001c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d114      	bne.n	8001c6c <bme68x_init+0x5c>
			if (dev->chip_id == BME68X_CHIP_ID) {
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b61      	cmp	r3, #97	@ 0x61
 8001c48:	d10e      	bne.n	8001c68 <bme68x_init+0x58>
				/* Read Variant ID */
				rslt = read_variant_id(dev);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f002 f84c 	bl	8003ce8 <read_variant_id>
 8001c50:	4603      	mov	r3, r0
 8001c52:	73fb      	strb	r3, [r7, #15]

				if (rslt == BME68X_OK) {
 8001c54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d107      	bne.n	8001c6c <bme68x_init+0x5c>
					/* Get the Calibration data */
					rslt = get_calib_data(dev);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f001 ff3f 	bl	8003ae0 <get_calib_data>
 8001c62:	4603      	mov	r3, r0
 8001c64:	73fb      	strb	r3, [r7, #15]
 8001c66:	e001      	b.n	8001c6c <bme68x_init+0x5c>
				}
			} else {
				rslt = BME68X_E_DEV_NOT_FOUND;
 8001c68:	23fd      	movs	r3, #253	@ 0xfd
 8001c6a:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return rslt;
 8001c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <bme68x_set_regs>:
/*
 * @brief This API writes the given data to the register address of the sensor
 */
int8_t bme68x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data,
		uint32_t len, struct bme68x_dev *dev)
{
 8001c78:	b5b0      	push	{r4, r5, r7, lr}
 8001c7a:	b08a      	sub	sp, #40	@ 0x28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	603b      	str	r3, [r7, #0]
	int8_t rslt;

	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	f107 0314 	add.w	r3, r7, #20
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	609a      	str	r2, [r3, #8]
 8001c96:	60da      	str	r2, [r3, #12]
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001c98:	6838      	ldr	r0, [r7, #0]
 8001c9a:	f001 fcfb 	bl	8003694 <null_ptr_check>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if ((rslt == BME68X_OK) && reg_addr && reg_data) {
 8001ca4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d16c      	bne.n	8001d86 <bme68x_set_regs+0x10e>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d069      	beq.n	8001d86 <bme68x_set_regs+0x10e>
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d066      	beq.n	8001d86 <bme68x_set_regs+0x10e>
		if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2))) {
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d05d      	beq.n	8001d7a <bme68x_set_regs+0x102>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b0a      	cmp	r3, #10
 8001cc2:	d85a      	bhi.n	8001d7a <bme68x_set_regs+0x102>
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001cc8:	e034      	b.n	8001d34 <bme68x_set_regs+0xbc>
				if (dev->intf == BME68X_SPI_INTF) {
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	7b1b      	ldrb	r3, [r3, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d118      	bne.n	8001d04 <bme68x_set_regs+0x8c>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 8001cd2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	6839      	ldr	r1, [r7, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f001 fc18 	bl	8003512 <set_mem_page>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8001ce8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	4413      	add	r3, r2
 8001cee:	781a      	ldrb	r2, [r3, #0]
 8001cf0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	3328      	adds	r3, #40	@ 0x28
 8001cfc:	443b      	add	r3, r7
 8001cfe:	f803 2c18 	strb.w	r2, [r3, #-24]
 8001d02:	e009      	b.n	8001d18 <bme68x_set_regs+0xa0>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
 8001d04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	441a      	add	r2, r3
 8001d0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	7812      	ldrb	r2, [r2, #0]
 8001d10:	3328      	adds	r3, #40	@ 0x28
 8001d12:	443b      	add	r3, r7
 8001d14:	f803 2c18 	strb.w	r2, [r3, #-24]
				}

				tmp_buff[(2 * index) + 1] = reg_data[index];
 8001d18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	441a      	add	r2, r3
 8001d1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	3301      	adds	r3, #1
 8001d24:	7812      	ldrb	r2, [r2, #0]
 8001d26:	3328      	adds	r3, #40	@ 0x28
 8001d28:	443b      	add	r3, r7
 8001d2a:	f803 2c18 	strb.w	r2, [r3, #-24]
			for (index = 0; index < len; index++) {
 8001d2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d30:	3301      	adds	r3, #1
 8001d32:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001d34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d8c6      	bhi.n	8001cca <bme68x_set_regs+0x52>
			}

			/* Write the interleaved array */
			if (rslt == BME68X_OK) {
 8001d3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d11e      	bne.n	8001d82 <bme68x_set_regs+0x10a>
				dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1],
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8001d48:	7c38      	ldrb	r0, [r7, #16]
						(2 * len) - 1, dev->intf_ptr);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	005b      	lsls	r3, r3, #1
				dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1],
 8001d4e:	1e5a      	subs	r2, r3, #1
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685d      	ldr	r5, [r3, #4]
 8001d54:	f107 0310 	add.w	r3, r7, #16
 8001d58:	1c59      	adds	r1, r3, #1
 8001d5a:	462b      	mov	r3, r5
 8001d5c:	47a0      	blx	r4
 8001d5e:	4603      	mov	r3, r0
 8001d60:	461a      	mov	r2, r3
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
				if (dev->intf_rslt != 0) {
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d007      	beq.n	8001d82 <bme68x_set_regs+0x10a>
					rslt = BME68X_E_COM_FAIL;
 8001d72:	23fe      	movs	r3, #254	@ 0xfe
 8001d74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (rslt == BME68X_OK) {
 8001d78:	e003      	b.n	8001d82 <bme68x_set_regs+0x10a>
				}
			}
		} else {
			rslt = BME68X_E_INVALID_LENGTH;
 8001d7a:	23fc      	movs	r3, #252	@ 0xfc
 8001d7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2))) {
 8001d80:	e004      	b.n	8001d8c <bme68x_set_regs+0x114>
			if (rslt == BME68X_OK) {
 8001d82:	bf00      	nop
		if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2))) {
 8001d84:	e002      	b.n	8001d8c <bme68x_set_regs+0x114>
		}
	} else {
		rslt = BME68X_E_NULL_PTR;
 8001d86:	23ff      	movs	r3, #255	@ 0xff
 8001d88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return rslt;
 8001d8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3728      	adds	r7, #40	@ 0x28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bdb0      	pop	{r4, r5, r7, pc}

08001d98 <bme68x_get_regs>:
/*
 * @brief This API reads the data from the given register address of sensor.
 */
int8_t bme68x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len,
		struct bme68x_dev *dev)
{
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b087      	sub	sp, #28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
 8001da2:	603b      	str	r3, [r7, #0]
 8001da4:	4603      	mov	r3, r0
 8001da6:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001da8:	6838      	ldr	r0, [r7, #0]
 8001daa:	f001 fc73 	bl	8003694 <null_ptr_check>
 8001dae:	4603      	mov	r3, r0
 8001db0:	75fb      	strb	r3, [r7, #23]
	if ((rslt == BME68X_OK) && reg_data) {
 8001db2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d12a      	bne.n	8001e10 <bme68x_get_regs+0x78>
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d027      	beq.n	8001e10 <bme68x_get_regs+0x78>
		if (dev->intf == BME68X_SPI_INTF) {
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	7b1b      	ldrb	r3, [r3, #12]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10e      	bne.n	8001de6 <bme68x_get_regs+0x4e>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	6839      	ldr	r1, [r7, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f001 fba0 	bl	8003512 <set_mem_page>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	75fb      	strb	r3, [r7, #23]
			if (rslt == BME68X_OK) {
 8001dd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d103      	bne.n	8001de6 <bme68x_get_regs+0x4e>
				reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 8001dde:	7bfb      	ldrb	r3, [r7, #15]
 8001de0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001de4:	73fb      	strb	r3, [r7, #15]
			}
		}

		dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	7bf8      	ldrb	r0, [r7, #15]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	68b9      	ldr	r1, [r7, #8]
 8001df4:	47a0      	blx	r4
 8001df6:	4603      	mov	r3, r0
 8001df8:	461a      	mov	r2, r3
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		if (dev->intf_rslt != 0) {
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d004      	beq.n	8001e14 <bme68x_get_regs+0x7c>
			rslt = BME68X_E_COM_FAIL;
 8001e0a:	23fe      	movs	r3, #254	@ 0xfe
 8001e0c:	75fb      	strb	r3, [r7, #23]
		if (dev->intf_rslt != 0) {
 8001e0e:	e001      	b.n	8001e14 <bme68x_get_regs+0x7c>
		}
	} else {
		rslt = BME68X_E_NULL_PTR;
 8001e10:	23ff      	movs	r3, #255	@ 0xff
 8001e12:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001e14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	371c      	adds	r7, #28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd90      	pop	{r4, r7, pc}

08001e20 <bme68x_soft_reset>:

/*
 * @brief This API soft-resets the sensor.
 */
int8_t bme68x_soft_reset(struct bme68x_dev *dev)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 8001e28:	23e0      	movs	r3, #224	@ 0xe0
 8001e2a:	73bb      	strb	r3, [r7, #14]

	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 8001e2c:	23b6      	movs	r3, #182	@ 0xb6
 8001e2e:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f001 fc2f 	bl	8003694 <null_ptr_check>
 8001e36:	4603      	mov	r3, r0
 8001e38:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME68X_OK) {
 8001e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d12b      	bne.n	8001e9a <bme68x_soft_reset+0x7a>
		if (dev->intf == BME68X_SPI_INTF) {
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	7b1b      	ldrb	r3, [r3, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d104      	bne.n	8001e54 <bme68x_soft_reset+0x34>
			rslt = get_mem_page(dev);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f001 fbc6 	bl	80035dc <get_mem_page>
 8001e50:	4603      	mov	r3, r0
 8001e52:	73fb      	strb	r3, [r7, #15]
		}

		/* Reset the device */
		if (rslt == BME68X_OK) {
 8001e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d11e      	bne.n	8001e9a <bme68x_soft_reset+0x7a>
			rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001e5c:	f107 010d 	add.w	r1, r7, #13
 8001e60:	f107 000e 	add.w	r0, r7, #14
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f7ff ff06 	bl	8001c78 <bme68x_set_regs>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	73fb      	strb	r3, [r7, #15]

			/* Wait for 5ms */
			dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6852      	ldr	r2, [r2, #4]
 8001e78:	4611      	mov	r1, r2
 8001e7a:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001e7e:	4798      	blx	r3
			if (rslt == BME68X_OK) {
 8001e80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d108      	bne.n	8001e9a <bme68x_soft_reset+0x7a>
				/* After reset get the memory page */
				if (dev->intf == BME68X_SPI_INTF) {
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	7b1b      	ldrb	r3, [r3, #12]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d104      	bne.n	8001e9a <bme68x_soft_reset+0x7a>
					rslt = get_mem_page(dev);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f001 fba3 	bl	80035dc <get_mem_page>
 8001e96:	4603      	mov	r3, r0
 8001e98:	73fb      	strb	r3, [r7, #15]
				}
			}
		}
	}

	return rslt;
 8001e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <bme68x_set_conf>:

/*
 * @brief This API is used to set the oversampling, filter and odr configuration
 */
int8_t bme68x_set_conf(struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t odr20 = 0, odr3 = 1;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	77bb      	strb	r3, [r7, #30]
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	777b      	strb	r3, [r7, #29]
	uint8_t current_op_mode;

	/* Register data starting from BME68X_REG_CTRL_GAS_1(0x71) up to BME68X_REG_CONFIG(0x75) */
	uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 8001eba:	4a7c      	ldr	r2, [pc, #496]	@ (80020ac <bme68x_set_conf+0x204>)
 8001ebc:	f107 0314 	add.w	r3, r7, #20
 8001ec0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ec4:	6018      	str	r0, [r3, #0]
 8001ec6:	3304      	adds	r3, #4
 8001ec8:	7019      	strb	r1, [r3, #0]
	uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	2300      	movs	r3, #0
 8001ed0:	743b      	strb	r3, [r7, #16]

	rslt = bme68x_get_op_mode(&current_op_mode, dev);
 8001ed2:	f107 031c 	add.w	r3, r7, #28
 8001ed6:	6839      	ldr	r1, [r7, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 f94a 	bl	8002172 <bme68x_get_op_mode>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	77fb      	strb	r3, [r7, #31]
	if (rslt == BME68X_OK) {
 8001ee2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d105      	bne.n	8001ef6 <bme68x_set_conf+0x4e>
		/* Configure only in the sleep mode */
		rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8001eea:	6839      	ldr	r1, [r7, #0]
 8001eec:	2000      	movs	r0, #0
 8001eee:	f000 f8df 	bl	80020b0 <bme68x_set_op_mode>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	77fb      	strb	r3, [r7, #31]
	}

	if (conf == NULL) {
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d102      	bne.n	8001f02 <bme68x_set_conf+0x5a>
		rslt = BME68X_E_NULL_PTR;
 8001efc:	23ff      	movs	r3, #255	@ 0xff
 8001efe:	77fb      	strb	r3, [r7, #31]
 8001f00:	e0b2      	b.n	8002068 <bme68x_set_conf+0x1c0>
	} else if (rslt == BME68X_OK) {
 8001f02:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f040 80ae 	bne.w	8002068 <bme68x_set_conf+0x1c0>
		/* Read the whole configuration and write it back once later */
		rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG,
 8001f0c:	7d38      	ldrb	r0, [r7, #20]
 8001f0e:	f107 010c 	add.w	r1, r7, #12
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	2205      	movs	r2, #5
 8001f16:	f7ff ff3f 	bl	8001d98 <bme68x_get_regs>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	77fb      	strb	r3, [r7, #31]
				dev);
		dev->info_msg = BME68X_OK;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
		if (rslt == BME68X_OK) {
 8001f26:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d108      	bne.n	8001f40 <bme68x_set_conf+0x98>
			rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3303      	adds	r3, #3
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	2107      	movs	r1, #7
 8001f36:	4618      	mov	r0, r3
 8001f38:	f001 fb7f 	bl	800363a <boundary_check>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	77fb      	strb	r3, [r7, #31]
		}

		if (rslt == BME68X_OK) {
 8001f40:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d108      	bne.n	8001f5a <bme68x_set_conf+0xb2>
			rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	2105      	movs	r1, #5
 8001f50:	4618      	mov	r0, r3
 8001f52:	f001 fb72 	bl	800363a <boundary_check>
 8001f56:	4603      	mov	r3, r0
 8001f58:	77fb      	strb	r3, [r7, #31]
		}

		if (rslt == BME68X_OK) {
 8001f5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d108      	bne.n	8001f74 <bme68x_set_conf+0xcc>
			rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3302      	adds	r3, #2
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	2105      	movs	r1, #5
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f001 fb65 	bl	800363a <boundary_check>
 8001f70:	4603      	mov	r3, r0
 8001f72:	77fb      	strb	r3, [r7, #31]
		}

		if (rslt == BME68X_OK) {
 8001f74:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d107      	bne.n	8001f8c <bme68x_set_conf+0xe4>
			rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	2105      	movs	r1, #5
 8001f82:	4618      	mov	r0, r3
 8001f84:	f001 fb59 	bl	800363a <boundary_check>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	77fb      	strb	r3, [r7, #31]
		}

		if (rslt == BME68X_OK) {
 8001f8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d108      	bne.n	8001fa6 <bme68x_set_conf+0xfe>
			rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3304      	adds	r3, #4
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	2108      	movs	r1, #8
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f001 fb4c 	bl	800363a <boundary_check>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	77fb      	strb	r3, [r7, #31]
		}

		if (rslt == BME68X_OK) {
 8001fa6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d15c      	bne.n	8002068 <bme68x_set_conf+0x1c0>
			data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER,
 8001fae:	7c3b      	ldrb	r3, [r7, #16]
 8001fb0:	b25b      	sxtb	r3, r3
 8001fb2:	f023 031c 	bic.w	r3, r3, #28
 8001fb6:	b25a      	sxtb	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	78db      	ldrb	r3, [r3, #3]
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	b25b      	sxtb	r3, r3
 8001fc0:	f003 031c 	and.w	r3, r3, #28
 8001fc4:	b25b      	sxtb	r3, r3
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	b25b      	sxtb	r3, r3
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	743b      	strb	r3, [r7, #16]
					conf->filter);
			data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST,
 8001fce:	7bfb      	ldrb	r3, [r7, #15]
 8001fd0:	b25b      	sxtb	r3, r3
 8001fd2:	f003 031f 	and.w	r3, r3, #31
 8001fd6:	b25a      	sxtb	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	785b      	ldrb	r3, [r3, #1]
 8001fdc:	015b      	lsls	r3, r3, #5
 8001fde:	b25b      	sxtb	r3, r3
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	b25b      	sxtb	r3, r3
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	73fb      	strb	r3, [r7, #15]
					conf->os_temp);
			data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP,
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
 8001fea:	b25b      	sxtb	r3, r3
 8001fec:	f023 031c 	bic.w	r3, r3, #28
 8001ff0:	b25a      	sxtb	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	789b      	ldrb	r3, [r3, #2]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	b25b      	sxtb	r3, r3
 8001ffa:	f003 031c 	and.w	r3, r3, #28
 8001ffe:	b25b      	sxtb	r3, r3
 8002000:	4313      	orrs	r3, r2
 8002002:	b25b      	sxtb	r3, r3
 8002004:	b2db      	uxtb	r3, r3
 8002006:	73fb      	strb	r3, [r7, #15]
					conf->os_pres);
			data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH,
 8002008:	7b7b      	ldrb	r3, [r7, #13]
 800200a:	b25b      	sxtb	r3, r3
 800200c:	f023 0307 	bic.w	r3, r3, #7
 8002010:	b25a      	sxtb	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	b25b      	sxtb	r3, r3
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	b25b      	sxtb	r3, r3
 800201e:	4313      	orrs	r3, r2
 8002020:	b25b      	sxtb	r3, r3
 8002022:	b2db      	uxtb	r3, r3
 8002024:	737b      	strb	r3, [r7, #13]
					conf->os_hum);
			if (conf->odr != BME68X_ODR_NONE) {
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	791b      	ldrb	r3, [r3, #4]
 800202a:	2b08      	cmp	r3, #8
 800202c:	d004      	beq.n	8002038 <bme68x_set_conf+0x190>
				odr20 = conf->odr;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	791b      	ldrb	r3, [r3, #4]
 8002032:	77bb      	strb	r3, [r7, #30]
				odr3 = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	777b      	strb	r3, [r7, #29]
			}

			data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 8002038:	7c3b      	ldrb	r3, [r7, #16]
 800203a:	b25b      	sxtb	r3, r3
 800203c:	f003 031f 	and.w	r3, r3, #31
 8002040:	b25a      	sxtb	r2, r3
 8002042:	7fbb      	ldrb	r3, [r7, #30]
 8002044:	015b      	lsls	r3, r3, #5
 8002046:	b25b      	sxtb	r3, r3
 8002048:	4313      	orrs	r3, r2
 800204a:	b25b      	sxtb	r3, r3
 800204c:	b2db      	uxtb	r3, r3
 800204e:	743b      	strb	r3, [r7, #16]
			data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8002050:	7b3b      	ldrb	r3, [r7, #12]
 8002052:	b25b      	sxtb	r3, r3
 8002054:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002058:	b25a      	sxtb	r2, r3
 800205a:	7f7b      	ldrb	r3, [r7, #29]
 800205c:	01db      	lsls	r3, r3, #7
 800205e:	b25b      	sxtb	r3, r3
 8002060:	4313      	orrs	r3, r2
 8002062:	b25b      	sxtb	r3, r3
 8002064:	b2db      	uxtb	r3, r3
 8002066:	733b      	strb	r3, [r7, #12]
		}
	}

	if (rslt == BME68X_OK) {
 8002068:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d109      	bne.n	8002084 <bme68x_set_conf+0x1dc>
		rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
 8002070:	f107 010c 	add.w	r1, r7, #12
 8002074:	f107 0014 	add.w	r0, r7, #20
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2205      	movs	r2, #5
 800207c:	f7ff fdfc 	bl	8001c78 <bme68x_set_regs>
 8002080:	4603      	mov	r3, r0
 8002082:	77fb      	strb	r3, [r7, #31]
	}

	if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK)) {
 8002084:	7f3b      	ldrb	r3, [r7, #28]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00a      	beq.n	80020a0 <bme68x_set_conf+0x1f8>
 800208a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d106      	bne.n	80020a0 <bme68x_set_conf+0x1f8>
		rslt = bme68x_set_op_mode(current_op_mode, dev);
 8002092:	7f3b      	ldrb	r3, [r7, #28]
 8002094:	6839      	ldr	r1, [r7, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f000 f80a 	bl	80020b0 <bme68x_set_op_mode>
 800209c:	4603      	mov	r3, r0
 800209e:	77fb      	strb	r3, [r7, #31]
	}

	return rslt;
 80020a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3720      	adds	r7, #32
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	080114d0 	.word	0x080114d0

080020b0 <bme68x_set_op_mode>:

/*
 * @brief This API is used to set the operation mode of the sensor
 */
int8_t bme68x_set_op_mode(const uint8_t op_mode, struct bme68x_dev *dev)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	6039      	str	r1, [r7, #0]
 80020ba:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	73bb      	strb	r3, [r7, #14]
	uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 80020c0:	2374      	movs	r3, #116	@ 0x74
 80020c2:	733b      	strb	r3, [r7, #12]

	/* Call until in sleep */
	do {
		rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 80020c4:	f107 010d 	add.w	r1, r7, #13
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	2201      	movs	r2, #1
 80020cc:	2074      	movs	r0, #116	@ 0x74
 80020ce:	f7ff fe63 	bl	8001d98 <bme68x_get_regs>
 80020d2:	4603      	mov	r3, r0
 80020d4:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME68X_OK) {
 80020d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d11d      	bne.n	800211a <bme68x_set_op_mode+0x6a>
			/* Put to sleep before changing mode */
			pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 80020de:	7b7b      	ldrb	r3, [r7, #13]
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	73bb      	strb	r3, [r7, #14]
			if (pow_mode != BME68X_SLEEP_MODE) {
 80020e6:	7bbb      	ldrb	r3, [r7, #14]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d016      	beq.n	800211a <bme68x_set_op_mode+0x6a>
				tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 80020ec:	7b7b      	ldrb	r3, [r7, #13]
 80020ee:	f023 0303 	bic.w	r3, r3, #3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	737b      	strb	r3, [r7, #13]
				rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80020f6:	f107 010d 	add.w	r1, r7, #13
 80020fa:	f107 000c 	add.w	r0, r7, #12
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	2201      	movs	r2, #1
 8002102:	f7ff fdb9 	bl	8001c78 <bme68x_set_regs>
 8002106:	4603      	mov	r3, r0
 8002108:	73fb      	strb	r3, [r7, #15]
				dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	6852      	ldr	r2, [r2, #4]
 8002112:	4611      	mov	r1, r2
 8002114:	f242 7010 	movw	r0, #10000	@ 0x2710
 8002118:	4798      	blx	r3
			}
		}
	} while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 800211a:	7bbb      	ldrb	r3, [r7, #14]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <bme68x_set_op_mode+0x78>
 8002120:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0cd      	beq.n	80020c4 <bme68x_set_op_mode+0x14>

	/* Already in sleep */
	if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK)) {
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d01b      	beq.n	8002166 <bme68x_set_op_mode+0xb6>
 800212e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d117      	bne.n	8002166 <bme68x_set_op_mode+0xb6>
		tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK)
 8002136:	7b7b      	ldrb	r3, [r7, #13]
 8002138:	b25b      	sxtb	r3, r3
 800213a:	f023 0303 	bic.w	r3, r3, #3
 800213e:	b25a      	sxtb	r2, r3
				| (op_mode & BME68X_MODE_MSK);
 8002140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	b25b      	sxtb	r3, r3
 800214a:	4313      	orrs	r3, r2
 800214c:	b25b      	sxtb	r3, r3
 800214e:	b2db      	uxtb	r3, r3
		tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK)
 8002150:	737b      	strb	r3, [r7, #13]
		rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8002152:	f107 010d 	add.w	r1, r7, #13
 8002156:	f107 000c 	add.w	r0, r7, #12
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2201      	movs	r2, #1
 800215e:	f7ff fd8b 	bl	8001c78 <bme68x_set_regs>
 8002162:	4603      	mov	r3, r0
 8002164:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8002166:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <bme68x_get_op_mode>:

/*
 * @brief This API is used to get the operation mode of the sensor.
 */
int8_t bme68x_get_op_mode(uint8_t *op_mode, struct bme68x_dev *dev)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b084      	sub	sp, #16
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t mode;

	if (op_mode) {
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00f      	beq.n	80021a2 <bme68x_get_op_mode+0x30>
		rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
 8002182:	f107 010e 	add.w	r1, r7, #14
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	2201      	movs	r2, #1
 800218a:	2074      	movs	r0, #116	@ 0x74
 800218c:	f7ff fe04 	bl	8001d98 <bme68x_get_regs>
 8002190:	4603      	mov	r3, r0
 8002192:	73fb      	strb	r3, [r7, #15]

		/* Masking the other register bit info*/
		*op_mode = mode & BME68X_MODE_MSK;
 8002194:	7bbb      	ldrb	r3, [r7, #14]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	b2da      	uxtb	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	701a      	strb	r2, [r3, #0]
 80021a0:	e001      	b.n	80021a6 <bme68x_get_op_mode+0x34>
	} else {
		rslt = BME68X_E_NULL_PTR;
 80021a2:	23ff      	movs	r3, #255	@ 0xff
 80021a4:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80021a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <bme68x_get_meas_dur>:
/*
 * @brief This API is used to get the remaining duration that can be used for heating.
 */
uint32_t bme68x_get_meas_dur(const uint8_t op_mode, struct bme68x_conf *conf,
		struct bme68x_dev *dev)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08a      	sub	sp, #40	@ 0x28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint32_t meas_dur = 0; /* Calculate in us */
 80021c2:	2300      	movs	r3, #0
 80021c4:	623b      	str	r3, [r7, #32]
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = { 0, 1, 2, 4, 8, 16 };
 80021c6:	4a34      	ldr	r2, [pc, #208]	@ (8002298 <bme68x_get_meas_dur+0xe4>)
 80021c8:	f107 0314 	add.w	r3, r7, #20
 80021cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021d0:	6018      	str	r0, [r3, #0]
 80021d2:	3304      	adds	r3, #4
 80021d4:	8019      	strh	r1, [r3, #0]

	if (conf != NULL) {
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d058      	beq.n	800228e <bme68x_get_meas_dur+0xda>
		/* Boundary check for temperature oversampling */
		rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	3301      	adds	r3, #1
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	2105      	movs	r1, #5
 80021e4:	4618      	mov	r0, r3
 80021e6:	f001 fa28 	bl	800363a <boundary_check>
 80021ea:	4603      	mov	r3, r0
 80021ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		if (rslt == BME68X_OK) {
 80021f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d109      	bne.n	800220c <bme68x_get_meas_dur+0x58>
			/* Boundary check for pressure oversampling */
			rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	3302      	adds	r3, #2
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	2105      	movs	r1, #5
 8002200:	4618      	mov	r0, r3
 8002202:	f001 fa1a 	bl	800363a <boundary_check>
 8002206:	4603      	mov	r3, r0
 8002208:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}

		if (rslt == BME68X_OK) {
 800220c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002210:	2b00      	cmp	r3, #0
 8002212:	d108      	bne.n	8002226 <bme68x_get_meas_dur+0x72>
			/* Boundary check for humidity oversampling */
			rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	2105      	movs	r1, #5
 800221a:	4618      	mov	r0, r3
 800221c:	f001 fa0d 	bl	800363a <boundary_check>
 8002220:	4603      	mov	r3, r0
 8002222:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}

		if (rslt == BME68X_OK) {
 8002226:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800222a:	2b00      	cmp	r3, #0
 800222c:	d12f      	bne.n	800228e <bme68x_get_meas_dur+0xda>
			meas_cycles = os_to_meas_cycles[conf->os_temp];
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	785b      	ldrb	r3, [r3, #1]
 8002232:	3328      	adds	r3, #40	@ 0x28
 8002234:	443b      	add	r3, r7
 8002236:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800223a:	61fb      	str	r3, [r7, #28]
			meas_cycles += os_to_meas_cycles[conf->os_pres];
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	789b      	ldrb	r3, [r3, #2]
 8002240:	3328      	adds	r3, #40	@ 0x28
 8002242:	443b      	add	r3, r7
 8002244:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002248:	461a      	mov	r2, r3
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	4413      	add	r3, r2
 800224e:	61fb      	str	r3, [r7, #28]
			meas_cycles += os_to_meas_cycles[conf->os_hum];
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	3328      	adds	r3, #40	@ 0x28
 8002256:	443b      	add	r3, r7
 8002258:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800225c:	461a      	mov	r2, r3
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	4413      	add	r3, r2
 8002262:	61fb      	str	r3, [r7, #28]

			/* TPH measurement duration */
			meas_dur = meas_cycles * UINT32_C(1963);
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f240 72ab 	movw	r2, #1963	@ 0x7ab
 800226a:	fb02 f303 	mul.w	r3, r2, r3
 800226e:	623b      	str	r3, [r7, #32]
			meas_dur += UINT32_C(477 * 4); /* TPH switching duration */
 8002270:	6a3b      	ldr	r3, [r7, #32]
 8002272:	f203 7374 	addw	r3, r3, #1908	@ 0x774
 8002276:	623b      	str	r3, [r7, #32]
			meas_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	f603 1351 	addw	r3, r3, #2385	@ 0x951
 800227e:	623b      	str	r3, [r7, #32]

			if (op_mode != BME68X_PARALLEL_MODE) {
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d003      	beq.n	800228e <bme68x_get_meas_dur+0xda>
				meas_dur += UINT32_C(1000); /* Wake up duration of 1ms */
 8002286:	6a3b      	ldr	r3, [r7, #32]
 8002288:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800228c:	623b      	str	r3, [r7, #32]
			}
		}
	}

	return meas_dur;
 800228e:	6a3b      	ldr	r3, [r7, #32]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3728      	adds	r7, #40	@ 0x28
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	080114d8 	.word	0x080114d8

0800229c <bme68x_get_data>:
 * from the sensor, compensates the data and store it in the bme68x_data
 * structure instance passed by the user.
 */
int8_t bme68x_get_data(uint8_t op_mode, struct bme68x_data *data,
		uint8_t *n_data, struct bme68x_dev *dev)
{
 800229c:	b5b0      	push	{r4, r5, r7, lr}
 800229e:	b09e      	sub	sp, #120	@ 0x78
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	603b      	str	r3, [r7, #0]
 80022a8:	4603      	mov	r3, r0
 80022aa:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t i = 0, j = 0, new_fields = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80022b2:	2300      	movs	r3, #0
 80022b4:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 80022b8:	2300      	movs	r3, #0
 80022ba:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
	struct bme68x_data *field_ptr[3] = { 0 };
 80022be:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	605a      	str	r2, [r3, #4]
 80022c8:	609a      	str	r2, [r3, #8]
	struct bme68x_data field_data[3] = { { 0 } };
 80022ca:	f107 0314 	add.w	r3, r7, #20
 80022ce:	2254      	movs	r2, #84	@ 0x54
 80022d0:	2100      	movs	r1, #0
 80022d2:	4618      	mov	r0, r3
 80022d4:	f00c fec6 	bl	800f064 <memset>

	field_ptr[0] = &field_data[0];
 80022d8:	f107 0314 	add.w	r3, r7, #20
 80022dc:	66bb      	str	r3, [r7, #104]	@ 0x68
	field_ptr[1] = &field_data[1];
 80022de:	f107 0314 	add.w	r3, r7, #20
 80022e2:	331c      	adds	r3, #28
 80022e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
	field_ptr[2] = &field_data[2];
 80022e6:	f107 0314 	add.w	r3, r7, #20
 80022ea:	3338      	adds	r3, #56	@ 0x38
 80022ec:	673b      	str	r3, [r7, #112]	@ 0x70

	rslt = null_ptr_check(dev);
 80022ee:	6838      	ldr	r0, [r7, #0]
 80022f0:	f001 f9d0 	bl	8003694 <null_ptr_check>
 80022f4:	4603      	mov	r3, r0
 80022f6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	if ((rslt == BME68X_OK) && (data != NULL)) {
 80022fa:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f040 80c1 	bne.w	8002486 <bme68x_get_data+0x1ea>
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 80bd 	beq.w	8002486 <bme68x_get_data+0x1ea>
		/* Reading the sensor data in forced mode only */
		if (op_mode == BME68X_FORCED_MODE) {
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d11c      	bne.n	800234c <bme68x_get_data+0xb0>
			rslt = read_field_data(0, data, dev);
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	68b9      	ldr	r1, [r7, #8]
 8002316:	2000      	movs	r0, #0
 8002318:	f000 fd8b 	bl	8002e32 <read_field_data>
 800231c:	4603      	mov	r3, r0
 800231e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			if (rslt == BME68X_OK) {
 8002322:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8002326:	2b00      	cmp	r3, #0
 8002328:	f040 80a1 	bne.w	800246e <bme68x_get_data+0x1d2>
				if (data->status & BME68X_NEW_DATA_MSK) {
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	b25b      	sxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	da03      	bge.n	800233e <bme68x_get_data+0xa2>
					new_fields = 1;
 8002336:	2301      	movs	r3, #1
 8002338:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 800233c:	e097      	b.n	800246e <bme68x_get_data+0x1d2>
				} else {
					new_fields = 0;
 800233e:	2300      	movs	r3, #0
 8002340:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
					rslt = BME68X_W_NO_NEW_DATA;
 8002344:	2302      	movs	r3, #2
 8002346:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800234a:	e090      	b.n	800246e <bme68x_get_data+0x1d2>
				}
			}
		} else if ((op_mode == BME68X_PARALLEL_MODE)
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	2b02      	cmp	r3, #2
 8002350:	d003      	beq.n	800235a <bme68x_get_data+0xbe>
				|| (op_mode == BME68X_SEQUENTIAL_MODE)) {
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	2b03      	cmp	r3, #3
 8002356:	f040 8087 	bne.w	8002468 <bme68x_get_data+0x1cc>
			/* Read the 3 fields and count the number of new data fields */
			rslt = read_all_field_data(field_ptr, dev);
 800235a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800235e:	6839      	ldr	r1, [r7, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f000 feaa 	bl	80030ba <read_all_field_data>
 8002366:	4603      	mov	r3, r0
 8002368:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

			new_fields = 0;
 800236c:	2300      	movs	r3, #0
 800236e:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
			for (i = 0; (i < 3) && (rslt == BME68X_OK); i++) {
 8002372:	2300      	movs	r3, #0
 8002374:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8002378:	e014      	b.n	80023a4 <bme68x_get_data+0x108>
				if (field_ptr[i]->status & BME68X_NEW_DATA_MSK) {
 800237a:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	3378      	adds	r3, #120	@ 0x78
 8002382:	443b      	add	r3, r7
 8002384:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	b25b      	sxtb	r3, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	da04      	bge.n	800239a <bme68x_get_data+0xfe>
					new_fields++;
 8002390:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8002394:	3301      	adds	r3, #1
 8002396:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
			for (i = 0; (i < 3) && (rslt == BME68X_OK); i++) {
 800239a:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800239e:	3301      	adds	r3, #1
 80023a0:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80023a4:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d803      	bhi.n	80023b4 <bme68x_get_data+0x118>
 80023ac:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0e2      	beq.n	800237a <bme68x_get_data+0xde>
				}
			}

			/* Sort the sensor data in parallel & sequential modes*/
			for (i = 0; (i < 2) && (rslt == BME68X_OK); i++) {
 80023b4:	2300      	movs	r3, #0
 80023b6:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80023ba:	e01c      	b.n	80023f6 <bme68x_get_data+0x15a>
				for (j = i + 1; j < 3; j++) {
 80023bc:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80023c0:	3301      	adds	r3, #1
 80023c2:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 80023c6:	e00d      	b.n	80023e4 <bme68x_get_data+0x148>
					sort_sensor_data(i, j, field_ptr);
 80023c8:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 80023cc:	f897 1075 	ldrb.w	r1, [r7, #117]	@ 0x75
 80023d0:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80023d4:	4618      	mov	r0, r3
 80023d6:	f001 fb09 	bl	80039ec <sort_sensor_data>
				for (j = i + 1; j < 3; j++) {
 80023da:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 80023de:	3301      	adds	r3, #1
 80023e0:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 80023e4:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d9ed      	bls.n	80023c8 <bme68x_get_data+0x12c>
			for (i = 0; (i < 2) && (rslt == BME68X_OK); i++) {
 80023ec:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80023f0:	3301      	adds	r3, #1
 80023f2:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80023f6:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d803      	bhi.n	8002406 <bme68x_get_data+0x16a>
 80023fe:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0da      	beq.n	80023bc <bme68x_get_data+0x120>
				}
			}

			/* Copy the sorted data */
			for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++) {
 8002406:	2300      	movs	r3, #0
 8002408:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 800240c:	e01c      	b.n	8002448 <bme68x_get_data+0x1ac>
				data[i] = *field_ptr[i];
 800240e:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	3378      	adds	r3, #120	@ 0x78
 8002416:	443b      	add	r3, r7
 8002418:	f853 1c10 	ldr.w	r1, [r3, #-16]
 800241c:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 8002420:	4613      	mov	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	1a9b      	subs	r3, r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	461a      	mov	r2, r3
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	4413      	add	r3, r2
 800242e:	461c      	mov	r4, r3
 8002430:	460d      	mov	r5, r1
 8002432:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002434:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002436:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800243a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++) {
 800243e:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002442:	3301      	adds	r3, #1
 8002444:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8002448:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800244c:	2b02      	cmp	r3, #2
 800244e:	d803      	bhi.n	8002458 <bme68x_get_data+0x1bc>
 8002450:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0da      	beq.n	800240e <bme68x_get_data+0x172>
			}

			if (new_fields == 0) {
 8002458:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800245c:	2b00      	cmp	r3, #0
 800245e:	d106      	bne.n	800246e <bme68x_get_data+0x1d2>
				rslt = BME68X_W_NO_NEW_DATA;
 8002460:	2302      	movs	r3, #2
 8002462:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			if (new_fields == 0) {
 8002466:	e002      	b.n	800246e <bme68x_get_data+0x1d2>
			}
		} else {
			rslt = BME68X_W_DEFINE_OP_MODE;
 8002468:	2301      	movs	r3, #1
 800246a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		}

		if (n_data == NULL) {
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d103      	bne.n	800247c <bme68x_get_data+0x1e0>
			rslt = BME68X_E_NULL_PTR;
 8002474:	23ff      	movs	r3, #255	@ 0xff
 8002476:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (n_data == NULL) {
 800247a:	e007      	b.n	800248c <bme68x_get_data+0x1f0>
		} else {
			*n_data = new_fields;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f897 2074 	ldrb.w	r2, [r7, #116]	@ 0x74
 8002482:	701a      	strb	r2, [r3, #0]
		if (n_data == NULL) {
 8002484:	e002      	b.n	800248c <bme68x_get_data+0x1f0>
		}
	} else {
		rslt = BME68X_E_NULL_PTR;
 8002486:	23ff      	movs	r3, #255	@ 0xff
 8002488:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	}

	return rslt;
 800248c:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
}
 8002490:	4618      	mov	r0, r3
 8002492:	3778      	adds	r7, #120	@ 0x78
 8002494:	46bd      	mov	sp, r7
 8002496:	bdb0      	pop	{r4, r5, r7, pc}

08002498 <bme68x_set_heatr_conf>:
/*
 * @brief This API is used to set the gas configuration of the sensor.
 */
int8_t bme68x_set_heatr_conf(uint8_t op_mode,
		const struct bme68x_heatr_conf *conf, struct bme68x_dev *dev)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
 80024a4:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t nb_conv = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	773b      	strb	r3, [r7, #28]
	uint8_t hctrl, run_gas = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	777b      	strb	r3, [r7, #29]
	uint8_t ctrl_gas_data[2];
	uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 80024ae:	f247 1370 	movw	r3, #29040	@ 0x7170
 80024b2:	82bb      	strh	r3, [r7, #20]

	if (conf != NULL) {
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d06e      	beq.n	8002598 <bme68x_set_heatr_conf+0x100>
		rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	2000      	movs	r0, #0
 80024be:	f7ff fdf7 	bl	80020b0 <bme68x_set_op_mode>
 80024c2:	4603      	mov	r3, r0
 80024c4:	77fb      	strb	r3, [r7, #31]
		if (rslt == BME68X_OK) {
 80024c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d108      	bne.n	80024e0 <bme68x_set_heatr_conf+0x48>
			rslt = set_conf(conf, op_mode, &nb_conv, dev);
 80024ce:	f107 021c 	add.w	r2, r7, #28
 80024d2:	7bf9      	ldrb	r1, [r7, #15]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68b8      	ldr	r0, [r7, #8]
 80024d8:	f001 f8fc 	bl	80036d4 <set_conf>
 80024dc:	4603      	mov	r3, r0
 80024de:	77fb      	strb	r3, [r7, #31]
		}

		if (rslt == BME68X_OK) {
 80024e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d159      	bne.n	800259c <bme68x_set_heatr_conf+0x104>
			rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2,
 80024e8:	f107 0118 	add.w	r1, r7, #24
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2202      	movs	r2, #2
 80024f0:	2070      	movs	r0, #112	@ 0x70
 80024f2:	f7ff fc51 	bl	8001d98 <bme68x_get_regs>
 80024f6:	4603      	mov	r3, r0
 80024f8:	77fb      	strb	r3, [r7, #31]
					dev);
			if (rslt == BME68X_OK) {
 80024fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d14c      	bne.n	800259c <bme68x_set_heatr_conf+0x104>
				if (conf->enable == BME68X_ENABLE) {
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d10b      	bne.n	8002522 <bme68x_set_heatr_conf+0x8a>
					hctrl = BME68X_ENABLE_HEATER;
 800250a:	2300      	movs	r3, #0
 800250c:	77bb      	strb	r3, [r7, #30]
					if (dev->variant_id == BME68X_VARIANT_GAS_HIGH) {
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d102      	bne.n	800251c <bme68x_set_heatr_conf+0x84>
						run_gas = BME68X_ENABLE_GAS_MEAS_H;
 8002516:	2302      	movs	r3, #2
 8002518:	777b      	strb	r3, [r7, #29]
 800251a:	e006      	b.n	800252a <bme68x_set_heatr_conf+0x92>
					} else {
						run_gas = BME68X_ENABLE_GAS_MEAS_L;
 800251c:	2301      	movs	r3, #1
 800251e:	777b      	strb	r3, [r7, #29]
 8002520:	e003      	b.n	800252a <bme68x_set_heatr_conf+0x92>
					}
				} else {
					hctrl = BME68X_DISABLE_HEATER;
 8002522:	2301      	movs	r3, #1
 8002524:	77bb      	strb	r3, [r7, #30]
					run_gas = BME68X_DISABLE_GAS_MEAS;
 8002526:	2300      	movs	r3, #0
 8002528:	777b      	strb	r3, [r7, #29]
				}

				ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0],
 800252a:	7e3b      	ldrb	r3, [r7, #24]
 800252c:	b25b      	sxtb	r3, r3
 800252e:	f023 0308 	bic.w	r3, r3, #8
 8002532:	b25a      	sxtb	r2, r3
 8002534:	7fbb      	ldrb	r3, [r7, #30]
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	b25b      	sxtb	r3, r3
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	b25b      	sxtb	r3, r3
 8002540:	4313      	orrs	r3, r2
 8002542:	b25b      	sxtb	r3, r3
 8002544:	b2db      	uxtb	r3, r3
 8002546:	763b      	strb	r3, [r7, #24]
						BME68X_HCTRL, hctrl);
				ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1],
 8002548:	7e7b      	ldrb	r3, [r7, #25]
 800254a:	b25b      	sxtb	r3, r3
 800254c:	f023 030f 	bic.w	r3, r3, #15
 8002550:	b25a      	sxtb	r2, r3
 8002552:	7f3b      	ldrb	r3, [r7, #28]
 8002554:	b25b      	sxtb	r3, r3
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	b25b      	sxtb	r3, r3
 800255c:	4313      	orrs	r3, r2
 800255e:	b25b      	sxtb	r3, r3
 8002560:	b2db      	uxtb	r3, r3
 8002562:	767b      	strb	r3, [r7, #25]
						BME68X_NBCONV, nb_conv);
				ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1],
 8002564:	7e7b      	ldrb	r3, [r7, #25]
 8002566:	b25b      	sxtb	r3, r3
 8002568:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800256c:	b25a      	sxtb	r2, r3
 800256e:	7f7b      	ldrb	r3, [r7, #29]
 8002570:	011b      	lsls	r3, r3, #4
 8002572:	b25b      	sxtb	r3, r3
 8002574:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002578:	b25b      	sxtb	r3, r3
 800257a:	4313      	orrs	r3, r2
 800257c:	b25b      	sxtb	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	767b      	strb	r3, [r7, #25]
						BME68X_RUN_GAS, run_gas);
				rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 8002582:	f107 0118 	add.w	r1, r7, #24
 8002586:	f107 0014 	add.w	r0, r7, #20
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2202      	movs	r2, #2
 800258e:	f7ff fb73 	bl	8001c78 <bme68x_set_regs>
 8002592:	4603      	mov	r3, r0
 8002594:	77fb      	strb	r3, [r7, #31]
 8002596:	e001      	b.n	800259c <bme68x_set_heatr_conf+0x104>
			}
		}
	} else {
		rslt = BME68X_E_NULL_PTR;
 8002598:	23ff      	movs	r3, #255	@ 0xff
 800259a:	77fb      	strb	r3, [r7, #31]
	}

	return rslt;
 800259c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3720      	adds	r7, #32
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <calc_temperature>:

#else

/* @brief This internal API is used to calculate the temperature value. */
static float calc_temperature(uint32_t temp_adc, struct bme68x_dev *dev)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b087      	sub	sp, #28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
	float var1;
	float var2;
	float calc_temp;

	/* calculate var1 data */
	var1 = ((((float) temp_adc / 16384.0f)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	ee07 3a90 	vmov	s15, r3
 80025b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025bc:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80026a0 <calc_temperature+0xf8>
 80025c0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
			- ((float) dev->calib.par_t1 / 1024.0f))
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	8bdb      	ldrh	r3, [r3, #30]
 80025c8:	ee07 3a90 	vmov	s15, r3
 80025cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025d0:	ed9f 6a34 	vldr	s12, [pc, #208]	@ 80026a4 <calc_temperature+0xfc>
 80025d4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80025d8:	ee37 7a67 	vsub.f32	s14, s14, s15
			* ((float) dev->calib.par_t2));
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80025e2:	ee07 3a90 	vmov	s15, r3
 80025e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	var1 = ((((float) temp_adc / 16384.0f)
 80025ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ee:	edc7 7a05 	vstr	s15, [r7, #20]

	/* calculate var2 data */
	var2 = (((((float) temp_adc / 131072.0f)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	ee07 3a90 	vmov	s15, r3
 80025f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025fc:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80026a8 <calc_temperature+0x100>
 8002600:	ee87 7aa6 	vdiv.f32	s14, s15, s13
			- ((float) dev->calib.par_t1 / 8192.0f))
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	8bdb      	ldrh	r3, [r3, #30]
 8002608:	ee07 3a90 	vmov	s15, r3
 800260c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002610:	ed9f 6a26 	vldr	s12, [pc, #152]	@ 80026ac <calc_temperature+0x104>
 8002614:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002618:	ee37 7a67 	vsub.f32	s14, s14, s15
			* (((float) temp_adc / 131072.0f)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	ee07 3a90 	vmov	s15, r3
 8002622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002626:	ed9f 6a20 	vldr	s12, [pc, #128]	@ 80026a8 <calc_temperature+0x100>
 800262a:	eec7 6a86 	vdiv.f32	s13, s15, s12
					- ((float) dev->calib.par_t1 / 8192.0f)))
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	8bdb      	ldrh	r3, [r3, #30]
 8002632:	ee07 3a90 	vmov	s15, r3
 8002636:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800263a:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80026ac <calc_temperature+0x104>
 800263e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002642:	ee76 7ae7 	vsub.f32	s15, s13, s15
			* (((float) temp_adc / 131072.0f)
 8002646:	ee27 7a27 	vmul.f32	s14, s14, s15
			* ((float) dev->calib.par_t3 * 16.0f));
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	f993 3022 	ldrsb.w	r3, [r3, #34]	@ 0x22
 8002650:	ee07 3a90 	vmov	s15, r3
 8002654:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002658:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800265c:	ee67 7aa6 	vmul.f32	s15, s15, s13
	var2 = (((((float) temp_adc / 131072.0f)
 8002660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002664:	edc7 7a04 	vstr	s15, [r7, #16]

	/* t_fine value*/
	dev->calib.t_fine = (var1 + var2);
 8002668:	ed97 7a05 	vldr	s14, [r7, #20]
 800266c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

	/* compensated temperature data*/
	calc_temp = ((dev->calib.t_fine) / 5120.0f);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8002680:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80026b0 <calc_temperature+0x108>
 8002684:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002688:	edc7 7a03 	vstr	s15, [r7, #12]

	return calc_temp;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	ee07 3a90 	vmov	s15, r3
}
 8002692:	eeb0 0a67 	vmov.f32	s0, s15
 8002696:	371c      	adds	r7, #28
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	46800000 	.word	0x46800000
 80026a4:	44800000 	.word	0x44800000
 80026a8:	48000000 	.word	0x48000000
 80026ac:	46000000 	.word	0x46000000
 80026b0:	45a00000 	.word	0x45a00000

080026b4 <calc_pressure>:

/* @brief This internal API is used to calculate the pressure value. */
static float calc_pressure(uint32_t pres_adc, const struct bme68x_dev *dev)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b087      	sub	sp, #28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
	float var1;
	float var2;
	float var3;
	float calc_pres;

	var1 = (((float) dev->calib.t_fine / 2.0f) - 64000.0f);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80026c4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80026c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026cc:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8002908 <calc_pressure+0x254>
 80026d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80026d4:	edc7 7a04 	vstr	s15, [r7, #16]
	var2 = var1 * var1 * (((float) dev->calib.par_p6) / (131072.0f));
 80026d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80026dc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	f993 302e 	ldrsb.w	r3, [r3, #46]	@ 0x2e
 80026e6:	ee07 3a90 	vmov	s15, r3
 80026ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80026ee:	ed9f 6a87 	vldr	s12, [pc, #540]	@ 800290c <calc_pressure+0x258>
 80026f2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80026f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026fa:	edc7 7a03 	vstr	s15, [r7, #12]
	var2 = var2 + (var1 * ((float) dev->calib.par_p5) * 2.0f);
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8002704:	ee07 3a90 	vmov	s15, r3
 8002708:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800270c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002714:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002718:	ed97 7a03 	vldr	s14, [r7, #12]
 800271c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002720:	edc7 7a03 	vstr	s15, [r7, #12]
	var2 = (var2 / 4.0f) + (((float) dev->calib.par_p4) * 65536.0f);
 8002724:	edd7 7a03 	vldr	s15, [r7, #12]
 8002728:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800272c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8002736:	ee07 3a90 	vmov	s15, r3
 800273a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800273e:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8002910 <calc_pressure+0x25c>
 8002742:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002746:	ee77 7a27 	vadd.f32	s15, s14, s15
 800274a:	edc7 7a03 	vstr	s15, [r7, #12]
	var1 = (((((float) dev->calib.par_p3 * var1 * var1) / 16384.0f)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	f993 3028 	ldrsb.w	r3, [r3, #40]	@ 0x28
 8002754:	ee07 3a90 	vmov	s15, r3
 8002758:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800275c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002760:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002764:	edd7 7a04 	vldr	s15, [r7, #16]
 8002768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800276c:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8002914 <calc_pressure+0x260>
 8002770:	ee87 7aa6 	vdiv.f32	s14, s15, s13
			+ ((float) dev->calib.par_p2 * var1)) / 524288.0f);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800277a:	ee07 3a90 	vmov	s15, r3
 800277e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002782:	edd7 7a04 	vldr	s15, [r7, #16]
 8002786:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800278a:	ee37 7a27 	vadd.f32	s14, s14, s15
	var1 = (((((float) dev->calib.par_p3 * var1 * var1) / 16384.0f)
 800278e:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8002918 <calc_pressure+0x264>
 8002792:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002796:	edc7 7a04 	vstr	s15, [r7, #16]
	var1 = ((1.0f + (var1 / 32768.0f)) * ((float) dev->calib.par_p1));
 800279a:	ed97 7a04 	vldr	s14, [r7, #16]
 800279e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800291c <calc_pressure+0x268>
 80027a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80027aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80027b2:	ee07 3a90 	vmov	s15, r3
 80027b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027be:	edc7 7a04 	vstr	s15, [r7, #16]
	calc_pres = (1048576.0f - ((float) pres_adc));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	ee07 3a90 	vmov	s15, r3
 80027c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027cc:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8002920 <calc_pressure+0x26c>
 80027d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027d4:	edc7 7a05 	vstr	s15, [r7, #20]

	/* Avoid exception caused by division by zero */
	if ((int) var1 != 0) {
 80027d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80027dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027e0:	ee17 3a90 	vmov	r3, s15
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 8081 	beq.w	80028ec <calc_pressure+0x238>
		calc_pres = (((calc_pres - (var2 / 4096.0f)) * 6250.0f) / var1);
 80027ea:	ed97 7a03 	vldr	s14, [r7, #12]
 80027ee:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8002924 <calc_pressure+0x270>
 80027f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027f6:	ed97 7a05 	vldr	s14, [r7, #20]
 80027fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027fe:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8002928 <calc_pressure+0x274>
 8002802:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002806:	ed97 7a04 	vldr	s14, [r7, #16]
 800280a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800280e:	edc7 7a05 	vstr	s15, [r7, #20]
		var1 = (((float) dev->calib.par_p9) * calc_pres * calc_pres)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8002818:	ee07 3a90 	vmov	s15, r3
 800281c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002820:	edd7 7a05 	vldr	s15, [r7, #20]
 8002824:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002828:	edd7 7a05 	vldr	s15, [r7, #20]
 800282c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002830:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 800292c <calc_pressure+0x278>
 8002834:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002838:	edc7 7a04 	vstr	s15, [r7, #16]
				/ 2147483648.0f;
		var2 = calc_pres * (((float) dev->calib.par_p8) / 32768.0f);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8002842:	ee07 3a90 	vmov	s15, r3
 8002846:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800284a:	eddf 6a34 	vldr	s13, [pc, #208]	@ 800291c <calc_pressure+0x268>
 800284e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002852:	ed97 7a05 	vldr	s14, [r7, #20]
 8002856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800285a:	edc7 7a03 	vstr	s15, [r7, #12]
		var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f)
 800285e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002862:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8002930 <calc_pressure+0x27c>
 8002866:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800286a:	edd7 6a05 	vldr	s13, [r7, #20]
 800286e:	ed9f 6a30 	vldr	s12, [pc, #192]	@ 8002930 <calc_pressure+0x27c>
 8002872:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002876:	ee27 7a27 	vmul.f32	s14, s14, s15
				* (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
 800287a:	edd7 6a05 	vldr	s13, [r7, #20]
 800287e:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8002930 <calc_pressure+0x27c>
 8002882:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002886:	ee27 7a27 	vmul.f32	s14, s14, s15
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002890:	ee07 3a90 	vmov	s15, r3
 8002894:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002898:	ed9f 6a1c 	vldr	s12, [pc, #112]	@ 800290c <calc_pressure+0x258>
 800289c:	eec6 7a86 	vdiv.f32	s15, s13, s12
		var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f)
 80028a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028a4:	edc7 7a02 	vstr	s15, [r7, #8]
		calc_pres = (calc_pres
				+ (var1 + var2 + var3 + ((float) dev->calib.par_p7 * 128.0f))
 80028a8:	ed97 7a04 	vldr	s14, [r7, #16]
 80028ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80028b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80028b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	f993 302f 	ldrsb.w	r3, [r3, #47]	@ 0x2f
 80028c2:	ee07 3a90 	vmov	s15, r3
 80028c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028ca:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8002934 <calc_pressure+0x280>
 80028ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028d2:	ee37 7a27 	vadd.f32	s14, s14, s15
						/ 16.0f);
 80028d6:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80028da:	eec7 7a26 	vdiv.f32	s15, s14, s13
		calc_pres = (calc_pres
 80028de:	ed97 7a05 	vldr	s14, [r7, #20]
 80028e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028e6:	edc7 7a05 	vstr	s15, [r7, #20]
 80028ea:	e002      	b.n	80028f2 <calc_pressure+0x23e>
	} else {
		calc_pres = 0;
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
	}

	return calc_pres;
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	ee07 3a90 	vmov	s15, r3
}
 80028f8:	eeb0 0a67 	vmov.f32	s0, s15
 80028fc:	371c      	adds	r7, #28
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	477a0000 	.word	0x477a0000
 800290c:	48000000 	.word	0x48000000
 8002910:	47800000 	.word	0x47800000
 8002914:	46800000 	.word	0x46800000
 8002918:	49000000 	.word	0x49000000
 800291c:	47000000 	.word	0x47000000
 8002920:	49800000 	.word	0x49800000
 8002924:	45800000 	.word	0x45800000
 8002928:	45c35000 	.word	0x45c35000
 800292c:	4f000000 	.word	0x4f000000
 8002930:	43800000 	.word	0x43800000
 8002934:	43000000 	.word	0x43000000

08002938 <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static float calc_humidity(uint16_t hum_adc, const struct bme68x_dev *dev)
{
 8002938:	b480      	push	{r7}
 800293a:	b089      	sub	sp, #36	@ 0x24
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	6039      	str	r1, [r7, #0]
 8002942:	80fb      	strh	r3, [r7, #6]
	float var3;
	float var4;
	float temp_comp;

	/* compensated temperature data*/
	temp_comp = ((dev->calib.t_fine) / 5120.0f);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800294a:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8002ab4 <calc_humidity+0x17c>
 800294e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002952:	edc7 7a06 	vstr	s15, [r7, #24]
	var1 = (float) ((float) hum_adc)
 8002956:	88fb      	ldrh	r3, [r7, #6]
 8002958:	ee07 3a90 	vmov	s15, r3
 800295c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
			- (((float) dev->calib.par_h1 * 16.0f)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	8a1b      	ldrh	r3, [r3, #16]
 8002964:	ee07 3a90 	vmov	s15, r3
 8002968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800296c:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8002970:	ee67 6aa6 	vmul.f32	s13, s15, s13
					+ (((float) dev->calib.par_h3 / 2.0f) * temp_comp));
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800297a:	ee07 3a90 	vmov	s15, r3
 800297e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002982:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 8002986:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800298a:	edd7 7a06 	vldr	s15, [r7, #24]
 800298e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002992:	ee76 7aa7 	vadd.f32	s15, s13, s15
	var1 = (float) ((float) hum_adc)
 8002996:	ee77 7a67 	vsub.f32	s15, s14, s15
 800299a:	edc7 7a05 	vstr	s15, [r7, #20]
	var2 = var1
			* ((float) (((float) dev->calib.par_h2 / 262144.0f)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	8a5b      	ldrh	r3, [r3, #18]
 80029a2:	ee07 3a90 	vmov	s15, r3
 80029a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029aa:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8002ab8 <calc_humidity+0x180>
 80029ae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					* (1.0f
							+ (((float) dev->calib.par_h4 / 16384.0f)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80029b8:	ee07 3a90 	vmov	s15, r3
 80029bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029c0:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 8002abc <calc_humidity+0x184>
 80029c4:	eec7 6a86 	vdiv.f32	s13, s15, s12
									* temp_comp)
 80029c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80029cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
							+ (((float) dev->calib.par_h4 / 16384.0f)
 80029d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029d4:	ee77 6aa6 	vadd.f32	s13, s15, s13
							+ (((float) dev->calib.par_h5 / 1048576.0f)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80029de:	ee07 3a90 	vmov	s15, r3
 80029e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029e6:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8002ac0 <calc_humidity+0x188>
 80029ea:	ee87 6aa5 	vdiv.f32	s12, s15, s11
									* temp_comp * temp_comp))));
 80029ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80029f2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80029f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80029fa:	ee66 7a27 	vmul.f32	s15, s12, s15
							+ (((float) dev->calib.par_h5 / 1048576.0f)
 80029fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
			* ((float) (((float) dev->calib.par_h2 / 262144.0f)
 8002a02:	ee67 7a27 	vmul.f32	s15, s14, s15
	var2 = var1
 8002a06:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a0e:	edc7 7a04 	vstr	s15, [r7, #16]
	var3 = (float) dev->calib.par_h6 / 16384.0f;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	7ddb      	ldrb	r3, [r3, #23]
 8002a16:	ee07 3a90 	vmov	s15, r3
 8002a1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a1e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8002abc <calc_humidity+0x184>
 8002a22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a26:	edc7 7a03 	vstr	s15, [r7, #12]
	var4 = (float) dev->calib.par_h7 / 2097152.0f;
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8002a30:	ee07 3a90 	vmov	s15, r3
 8002a34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a38:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8002ac4 <calc_humidity+0x18c>
 8002a3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a40:	edc7 7a02 	vstr	s15, [r7, #8]
	calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
 8002a44:	ed97 7a02 	vldr	s14, [r7, #8]
 8002a48:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a50:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a58:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a60:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a68:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a70:	edc7 7a07 	vstr	s15, [r7, #28]
	if (calc_hum > 100.0f) {
 8002a74:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a78:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8002ac8 <calc_humidity+0x190>
 8002a7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a84:	dd02      	ble.n	8002a8c <calc_humidity+0x154>
		calc_hum = 100.0f;
 8002a86:	4b11      	ldr	r3, [pc, #68]	@ (8002acc <calc_humidity+0x194>)
 8002a88:	61fb      	str	r3, [r7, #28]
 8002a8a:	e009      	b.n	8002aa0 <calc_humidity+0x168>
	} else if (calc_hum < 0.0f) {
 8002a8c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a98:	d502      	bpl.n	8002aa0 <calc_humidity+0x168>
		calc_hum = 0.0f;
 8002a9a:	f04f 0300 	mov.w	r3, #0
 8002a9e:	61fb      	str	r3, [r7, #28]
	}

	return calc_hum;
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	ee07 3a90 	vmov	s15, r3
}
 8002aa6:	eeb0 0a67 	vmov.f32	s0, s15
 8002aaa:	3724      	adds	r7, #36	@ 0x24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	45a00000 	.word	0x45a00000
 8002ab8:	48800000 	.word	0x48800000
 8002abc:	46800000 	.word	0x46800000
 8002ac0:	49800000 	.word	0x49800000
 8002ac4:	4a000000 	.word	0x4a000000
 8002ac8:	42c80000 	.word	0x42c80000
 8002acc:	42c80000 	.word	0x42c80000

08002ad0 <calc_gas_resistance_low>:

/* This internal API is used to calculate the gas resistance low value in float */
static float calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range,
		const struct bme68x_dev *dev)
{
 8002ad0:	b4b0      	push	{r4, r5, r7}
 8002ad2:	b0a9      	sub	sp, #164	@ 0xa4
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	603a      	str	r2, [r7, #0]
 8002ada:	80fb      	strh	r3, [r7, #6]
 8002adc:	460b      	mov	r3, r1
 8002ade:	717b      	strb	r3, [r7, #5]
	float calc_gas_res;
	float var1;
	float var2;
	float var3;
	float gas_res_f = gas_res_adc;
 8002ae0:	88fb      	ldrh	r3, [r7, #6]
 8002ae2:	ee07 3a90 	vmov	s15, r3
 8002ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aea:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
	float gas_range_f = (1U << gas_range); /*lint !e790 / Suspicious truncation, integral to float */
 8002aee:	797b      	ldrb	r3, [r7, #5]
 8002af0:	2201      	movs	r2, #1
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	ee07 3a90 	vmov	s15, r3
 8002afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002afe:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
	const float lookup_k1_range[16] = { 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -1.0f,
 8002b02:	4b3e      	ldr	r3, [pc, #248]	@ (8002bfc <calc_gas_resistance_low+0x12c>)
 8002b04:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8002b08:	461d      	mov	r5, r3
 8002b0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b16:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002b1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0.0f, -0.8f, 0.0f, 0.0f, -0.2f, -0.5f, 0.0f, -1.0f, 0.0f, 0.0f };
	const float lookup_k2_range[16] = { 0.0f, 0.0f, 0.0f, 0.0f, 0.1f, 0.7f,
 8002b1e:	4b38      	ldr	r3, [pc, #224]	@ (8002c00 <calc_gas_resistance_low+0x130>)
 8002b20:	f107 0408 	add.w	r4, r7, #8
 8002b24:	461d      	mov	r5, r3
 8002b26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b32:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002b36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0.0f, -0.8f, -0.1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f };

	var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	f993 303e 	ldrsb.w	r3, [r3, #62]	@ 0x3e
 8002b40:	ee07 3a90 	vmov	s15, r3
 8002b44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b48:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002b4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b50:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8002c04 <calc_gas_resistance_low+0x134>
 8002b54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b58:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
	var2 = (var1) * (1.0f + lookup_k1_range[gas_range] / 100.0f);
 8002b5c:	797b      	ldrb	r3, [r7, #5]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	33a0      	adds	r3, #160	@ 0xa0
 8002b62:	443b      	add	r3, r7
 8002b64:	3b58      	subs	r3, #88	@ 0x58
 8002b66:	ed93 7a00 	vldr	s14, [r3]
 8002b6a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8002c08 <calc_gas_resistance_low+0x138>
 8002b6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b7a:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8002b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b82:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
	var3 = 1.0f + (lookup_k2_range[gas_range] / 100.0f);
 8002b86:	797b      	ldrb	r3, [r7, #5]
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	33a0      	adds	r3, #160	@ 0xa0
 8002b8c:	443b      	add	r3, r7
 8002b8e:	3b98      	subs	r3, #152	@ 0x98
 8002b90:	ed93 7a00 	vldr	s14, [r3]
 8002b94:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8002c08 <calc_gas_resistance_low+0x138>
 8002b98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002ba0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ba4:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
	calc_gas_res = 1.0f
			/ (float) (var3 * (0.000000125f) * gas_range_f
 8002ba8:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8002bac:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002c0c <calc_gas_resistance_low+0x13c>
 8002bb0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002bb4:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8002bb8:	ee27 7a27 	vmul.f32	s14, s14, s15
					* (((gas_res_f - 512.0f) / var2) + 1.0f));
 8002bbc:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002bc0:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8002c10 <calc_gas_resistance_low+0x140>
 8002bc4:	ee37 6ae6 	vsub.f32	s12, s15, s13
 8002bc8:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8002bcc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002bd0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
			/ (float) (var3 * (0.000000125f) * gas_range_f
 8002bd8:	ee27 7a27 	vmul.f32	s14, s14, s15
	calc_gas_res = 1.0f
 8002bdc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002be0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002be4:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

	return calc_gas_res;
 8002be8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002bec:	ee07 3a90 	vmov	s15, r3
}
 8002bf0:	eeb0 0a67 	vmov.f32	s0, s15
 8002bf4:	37a4      	adds	r7, #164	@ 0xa4
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bcb0      	pop	{r4, r5, r7}
 8002bfa:	4770      	bx	lr
 8002bfc:	080114e0 	.word	0x080114e0
 8002c00:	08011520 	.word	0x08011520
 8002c04:	44a78000 	.word	0x44a78000
 8002c08:	42c80000 	.word	0x42c80000
 8002c0c:	340637bd 	.word	0x340637bd
 8002c10:	44000000 	.word	0x44000000

08002c14 <calc_gas_resistance_high>:

/* This internal API is used to calculate the gas resistance value in float */
static float calc_gas_resistance_high(uint16_t gas_res_adc, uint8_t gas_range)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b087      	sub	sp, #28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	460a      	mov	r2, r1
 8002c1e:	80fb      	strh	r3, [r7, #6]
 8002c20:	4613      	mov	r3, r2
 8002c22:	717b      	strb	r3, [r7, #5]
	float calc_gas_res;
	uint32_t var1 = UINT32_C(262144) >> gas_range;
 8002c24:	797b      	ldrb	r3, [r7, #5]
 8002c26:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2e:	617b      	str	r3, [r7, #20]
	int32_t var2 = (int32_t) gas_res_adc - INT32_C(512);
 8002c30:	88fb      	ldrh	r3, [r7, #6]
 8002c32:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8002c36:	613b      	str	r3, [r7, #16]

	var2 *= INT32_C(3);
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	4413      	add	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
	var2 = INT32_C(4096) + var2;
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c48:	613b      	str	r3, [r7, #16]

	calc_gas_res = 1000000.0f * (float) var1 / (float) var2;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	ee07 3a90 	vmov	s15, r3
 8002c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c54:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002c84 <calc_gas_resistance_high+0x70>
 8002c58:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	ee07 3a90 	vmov	s15, r3
 8002c62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c6a:	edc7 7a03 	vstr	s15, [r7, #12]

	return calc_gas_res;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	ee07 3a90 	vmov	s15, r3
}
 8002c74:	eeb0 0a67 	vmov.f32	s0, s15
 8002c78:	371c      	adds	r7, #28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	49742400 	.word	0x49742400

08002c88 <calc_res_heat>:

/* This internal API is used to calculate the heater resistance value */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b08b      	sub	sp, #44	@ 0x2c
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	81fb      	strh	r3, [r7, #14]
	float var3;
	float var4;
	float var5;
	uint8_t res_heat;

	if (temp > 400) /* Cap temperature */
 8002c94:	89fb      	ldrh	r3, [r7, #14]
 8002c96:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002c9a:	d902      	bls.n	8002ca2 <calc_res_heat+0x1a>
	{
		temp = 400;
 8002c9c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002ca0:	81fb      	strh	r3, [r7, #14]
	}

	var1 = (((float) dev->calib.par_gh1 / (16.0f)) + 49.0f);
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	f993 3019 	ldrsb.w	r3, [r3, #25]
 8002ca8:	ee07 3a90 	vmov	s15, r3
 8002cac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cb0:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8002cb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cb8:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8002dcc <calc_res_heat+0x144>
 8002cbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002cc0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	var2 = ((((float) dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002cca:	ee07 3a90 	vmov	s15, r3
 8002cce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cd2:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8002dd0 <calc_res_heat+0x148>
 8002cd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cda:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8002dd4 <calc_res_heat+0x14c>
 8002cde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ce2:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8002dd8 <calc_res_heat+0x150>
 8002ce6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002cea:	edc7 7a08 	vstr	s15, [r7, #32]
	var3 = ((float) dev->calib.par_gh3 / (1024.0f));
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8002cf4:	ee07 3a90 	vmov	s15, r3
 8002cf8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cfc:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8002ddc <calc_res_heat+0x154>
 8002d00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d04:	edc7 7a07 	vstr	s15, [r7, #28]
	var4 = (var1 * (1.0f + (var2 * (float) temp)));
 8002d08:	89fb      	ldrh	r3, [r7, #14]
 8002d0a:	ee07 3a90 	vmov	s15, r3
 8002d0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d12:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002d1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d22:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d2a:	edc7 7a06 	vstr	s15, [r7, #24]
	var5 = (var4 + (var3 * (float) dev->amb_temp));
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8002d34:	ee07 3a90 	vmov	s15, r3
 8002d38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d3c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d44:	ed97 7a06 	vldr	s14, [r7, #24]
 8002d48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d4c:	edc7 7a05 	vstr	s15, [r7, #20]
	res_heat = (uint8_t) (3.4f
			* ((var5 * (4 / (4 + (float) dev->calib.res_heat_range))
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d56:	ee07 3a90 	vmov	s15, r3
 8002d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d5e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002d62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d66:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8002d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d72:	ee27 7a27 	vmul.f32	s14, s14, s15
					* (1 / (1 + ((float) dev->calib.res_heat_val * 0.002f))))
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	f993 303d 	ldrsb.w	r3, [r3, #61]	@ 0x3d
 8002d7c:	ee07 3a90 	vmov	s15, r3
 8002d80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d84:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8002de0 <calc_res_heat+0x158>
 8002d88:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d90:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8002d94:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8002d98:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
					- 25));
 8002da0:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8002da4:	ee77 7ac7 	vsub.f32	s15, s15, s14
			* ((var5 * (4 / (4 + (float) dev->calib.res_heat_range))
 8002da8:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002de4 <calc_res_heat+0x15c>
 8002dac:	ee67 7a87 	vmul.f32	s15, s15, s14
	res_heat = (uint8_t) (3.4f
 8002db0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002db4:	edc7 7a01 	vstr	s15, [r7, #4]
 8002db8:	793b      	ldrb	r3, [r7, #4]
 8002dba:	74fb      	strb	r3, [r7, #19]

	return res_heat;
 8002dbc:	7cfb      	ldrb	r3, [r7, #19]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	372c      	adds	r7, #44	@ 0x2c
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	42440000 	.word	0x42440000
 8002dd0:	47000000 	.word	0x47000000
 8002dd4:	3a03126f 	.word	0x3a03126f
 8002dd8:	3b1a0275 	.word	0x3b1a0275
 8002ddc:	44800000 	.word	0x44800000
 8002de0:	3b03126f 	.word	0x3b03126f
 8002de4:	4059999a 	.word	0x4059999a

08002de8 <calc_gas_wait>:

#endif

/* This internal API is used to calculate the gas wait */
static uint8_t calc_gas_wait(uint16_t dur)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	80fb      	strh	r3, [r7, #6]
	uint8_t factor = 0;
 8002df2:	2300      	movs	r3, #0
 8002df4:	73fb      	strb	r3, [r7, #15]
	uint8_t durval;

	if (dur >= 0xfc0) {
 8002df6:	88fb      	ldrh	r3, [r7, #6]
 8002df8:	f5b3 6f7c 	cmp.w	r3, #4032	@ 0xfc0
 8002dfc:	d308      	bcc.n	8002e10 <calc_gas_wait+0x28>
		durval = 0xff; /* Max duration*/
 8002dfe:	23ff      	movs	r3, #255	@ 0xff
 8002e00:	73bb      	strb	r3, [r7, #14]
 8002e02:	e00f      	b.n	8002e24 <calc_gas_wait+0x3c>
	} else {
		while (dur > 0x3F) {
			dur = dur / 4;
 8002e04:	88fb      	ldrh	r3, [r7, #6]
 8002e06:	089b      	lsrs	r3, r3, #2
 8002e08:	80fb      	strh	r3, [r7, #6]
			factor += 1;
 8002e0a:	7bfb      	ldrb	r3, [r7, #15]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	73fb      	strb	r3, [r7, #15]
		while (dur > 0x3F) {
 8002e10:	88fb      	ldrh	r3, [r7, #6]
 8002e12:	2b3f      	cmp	r3, #63	@ 0x3f
 8002e14:	d8f6      	bhi.n	8002e04 <calc_gas_wait+0x1c>
		}

		durval = (uint8_t) (dur + (factor * 64));
 8002e16:	88fb      	ldrh	r3, [r7, #6]
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	7bfb      	ldrb	r3, [r7, #15]
 8002e1c:	019b      	lsls	r3, r3, #6
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	4413      	add	r3, r2
 8002e22:	73bb      	strb	r3, [r7, #14]
	}

	return durval;
 8002e24:	7bbb      	ldrb	r3, [r7, #14]
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <read_field_data>:

/* This internal API is used to read a single data of the sensor */
static int8_t read_field_data(uint8_t index, struct bme68x_data *data,
		struct bme68x_dev *dev)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b08e      	sub	sp, #56	@ 0x38
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	4603      	mov	r3, r0
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	607a      	str	r2, [r7, #4]
 8002e3e:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME68X_OK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t buff[BME68X_LEN_FIELD] = { 0 };
 8002e46:	2300      	movs	r3, #0
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	f107 0314 	add.w	r3, r7, #20
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	605a      	str	r2, [r3, #4]
 8002e54:	609a      	str	r2, [r3, #8]
 8002e56:	731a      	strb	r2, [r3, #12]
	uint8_t gas_range_l, gas_range_h;
	uint32_t adc_temp;
	uint32_t adc_pres;
	uint16_t adc_hum;
	uint16_t adc_gas_res_low, adc_gas_res_high;
	uint8_t tries = 5;
 8002e58:	2305      	movs	r3, #5
 8002e5a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

	while ((tries) && (rslt == BME68X_OK)) {
 8002e5e:	e11d      	b.n	800309c <read_field_data+0x26a>
		rslt = bme68x_get_regs(
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
 8002e62:	461a      	mov	r2, r3
 8002e64:	0112      	lsls	r2, r2, #4
 8002e66:	4413      	add	r3, r2
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	331d      	adds	r3, #29
 8002e6c:	b2d8      	uxtb	r0, r3
 8002e6e:	f107 0110 	add.w	r1, r7, #16
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2211      	movs	r2, #17
 8002e76:	f7fe ff8f 	bl	8001d98 <bme68x_get_regs>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				((uint8_t) (BME68X_REG_FIELD0
						+ (index * BME68X_LEN_FIELD_OFFSET))), buff,
				(uint16_t) BME68X_LEN_FIELD, dev);
		if (!data) {
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d103      	bne.n	8002e8e <read_field_data+0x5c>
			rslt = BME68X_E_NULL_PTR;
 8002e86:	23ff      	movs	r3, #255	@ 0xff
 8002e88:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			break;
 8002e8c:	e10f      	b.n	80030ae <read_field_data+0x27c>
		}

		data->status = buff[0] & BME68X_NEW_DATA_MSK;
 8002e8e:	7c3b      	ldrb	r3, [r7, #16]
 8002e90:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	701a      	strb	r2, [r3, #0]
		data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
 8002e9a:	7c3b      	ldrb	r3, [r7, #16]
 8002e9c:	f003 030f 	and.w	r3, r3, #15
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	705a      	strb	r2, [r3, #1]
		data->meas_index = buff[1];
 8002ea6:	7c7a      	ldrb	r2, [r7, #17]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	709a      	strb	r2, [r3, #2]

		/* read the raw data from the sensor */
		adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096)
 8002eac:	7cbb      	ldrb	r3, [r7, #18]
 8002eae:	031a      	lsls	r2, r3, #12
				| ((uint32_t) buff[3] * 16) | ((uint32_t) buff[4] / 16));
 8002eb0:	7cfb      	ldrb	r3, [r7, #19]
 8002eb2:	011b      	lsls	r3, r3, #4
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	7d3a      	ldrb	r2, [r7, #20]
 8002eb8:	0912      	lsrs	r2, r2, #4
 8002eba:	b2d2      	uxtb	r2, r2
		adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	633b      	str	r3, [r7, #48]	@ 0x30
		adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096)
 8002ec0:	7d7b      	ldrb	r3, [r7, #21]
 8002ec2:	031a      	lsls	r2, r3, #12
				| ((uint32_t) buff[6] * 16) | ((uint32_t) buff[7] / 16));
 8002ec4:	7dbb      	ldrb	r3, [r7, #22]
 8002ec6:	011b      	lsls	r3, r3, #4
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	7dfa      	ldrb	r2, [r7, #23]
 8002ecc:	0912      	lsrs	r2, r2, #4
 8002ece:	b2d2      	uxtb	r2, r2
		adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8002ed4:	7e3b      	ldrb	r3, [r7, #24]
 8002ed6:	021b      	lsls	r3, r3, #8
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	7e7a      	ldrb	r2, [r7, #25]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	857b      	strh	r3, [r7, #42]	@ 0x2a
		adc_gas_res_low = (uint16_t) ((uint32_t) buff[13] * 4
 8002ee0:	7f7b      	ldrb	r3, [r7, #29]
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	b29b      	uxth	r3, r3
				| (((uint32_t) buff[14]) / 64));
 8002ee6:	7fba      	ldrb	r2, [r7, #30]
		adc_gas_res_low = (uint16_t) ((uint32_t) buff[13] * 4
 8002ee8:	0992      	lsrs	r2, r2, #6
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	4313      	orrs	r3, r2
 8002eee:	853b      	strh	r3, [r7, #40]	@ 0x28
		adc_gas_res_high = (uint16_t) ((uint32_t) buff[15] * 4
 8002ef0:	7ffb      	ldrb	r3, [r7, #31]
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	b29b      	uxth	r3, r3
				| (((uint32_t) buff[16]) / 64));
 8002ef6:	f897 2020 	ldrb.w	r2, [r7, #32]
		adc_gas_res_high = (uint16_t) ((uint32_t) buff[15] * 4
 8002efa:	0992      	lsrs	r2, r2, #6
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	4313      	orrs	r3, r2
 8002f00:	84fb      	strh	r3, [r7, #38]	@ 0x26
		gas_range_l = buff[14] & BME68X_GAS_RANGE_MSK;
 8002f02:	7fbb      	ldrb	r3, [r7, #30]
 8002f04:	f003 030f 	and.w	r3, r3, #15
 8002f08:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		gas_range_h = buff[16] & BME68X_GAS_RANGE_MSK;
 8002f0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f10:	f003 030f 	and.w	r3, r3, #15
 8002f14:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		if (dev->variant_id == BME68X_VARIANT_GAS_HIGH) {
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d11c      	bne.n	8002f5a <read_field_data+0x128>
			data->status |= buff[16] & BME68X_GASM_VALID_MSK;
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	b25a      	sxtb	r2, r3
 8002f26:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f2a:	b25b      	sxtb	r3, r3
 8002f2c:	f003 0320 	and.w	r3, r3, #32
 8002f30:	b25b      	sxtb	r3, r3
 8002f32:	4313      	orrs	r3, r2
 8002f34:	b25b      	sxtb	r3, r3
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	701a      	strb	r2, [r3, #0]
			data->status |= buff[16] & BME68X_HEAT_STAB_MSK;
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	b25a      	sxtb	r2, r3
 8002f42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f46:	b25b      	sxtb	r3, r3
 8002f48:	f003 0310 	and.w	r3, r3, #16
 8002f4c:	b25b      	sxtb	r3, r3
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	b25b      	sxtb	r3, r3
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	701a      	strb	r2, [r3, #0]
 8002f58:	e019      	b.n	8002f8e <read_field_data+0x15c>
		} else {
			data->status |= buff[14] & BME68X_GASM_VALID_MSK;
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	b25a      	sxtb	r2, r3
 8002f60:	7fbb      	ldrb	r3, [r7, #30]
 8002f62:	b25b      	sxtb	r3, r3
 8002f64:	f003 0320 	and.w	r3, r3, #32
 8002f68:	b25b      	sxtb	r3, r3
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	b25b      	sxtb	r3, r3
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	701a      	strb	r2, [r3, #0]
			data->status |= buff[14] & BME68X_HEAT_STAB_MSK;
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	b25a      	sxtb	r2, r3
 8002f7a:	7fbb      	ldrb	r3, [r7, #30]
 8002f7c:	b25b      	sxtb	r3, r3
 8002f7e:	f003 0310 	and.w	r3, r3, #16
 8002f82:	b25b      	sxtb	r3, r3
 8002f84:	4313      	orrs	r3, r2
 8002f86:	b25b      	sxtb	r3, r3
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	701a      	strb	r2, [r3, #0]
		}

		if ((data->status & BME68X_NEW_DATA_MSK) && (rslt == BME68X_OK)) {
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	b25b      	sxtb	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	da70      	bge.n	800307a <read_field_data+0x248>
 8002f98:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d16c      	bne.n	800307a <read_field_data+0x248>
			rslt = bme68x_get_regs(BME68X_REG_RES_HEAT0 + data->gas_index,
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	785b      	ldrb	r3, [r3, #1]
 8002fa4:	335a      	adds	r3, #90	@ 0x5a
 8002fa6:	b2d8      	uxtb	r0, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	1cd9      	adds	r1, r3, #3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f7fe fef2 	bl	8001d98 <bme68x_get_regs>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					&data->res_heat, 1, dev);
			if (rslt == BME68X_OK) {
 8002fba:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10c      	bne.n	8002fdc <read_field_data+0x1aa>
				rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0 + data->gas_index,
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	785b      	ldrb	r3, [r3, #1]
 8002fc6:	3350      	adds	r3, #80	@ 0x50
 8002fc8:	b2d8      	uxtb	r0, r3
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	1d19      	adds	r1, r3, #4
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f7fe fee1 	bl	8001d98 <bme68x_get_regs>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						&data->idac, 1, dev);
			}

			if (rslt == BME68X_OK) {
 8002fdc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10c      	bne.n	8002ffe <read_field_data+0x1cc>
				rslt = bme68x_get_regs(BME68X_REG_GAS_WAIT0 + data->gas_index,
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	785b      	ldrb	r3, [r3, #1]
 8002fe8:	3364      	adds	r3, #100	@ 0x64
 8002fea:	b2d8      	uxtb	r0, r3
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	1d59      	adds	r1, r3, #5
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f7fe fed0 	bl	8001d98 <bme68x_get_regs>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						&data->gas_wait, 1, dev);
			}

			if (rslt == BME68X_OK) {
 8002ffe:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8003002:	2b00      	cmp	r3, #0
 8003004:	d139      	bne.n	800307a <read_field_data+0x248>
				data->temperature = calc_temperature(adc_temp, dev);
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800300a:	f7ff facd 	bl	80025a8 <calc_temperature>
 800300e:	eef0 7a40 	vmov.f32	s15, s0
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	edc3 7a03 	vstr	s15, [r3, #12]
				data->pressure = calc_pressure(adc_pres, dev);
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800301c:	f7ff fb4a 	bl	80026b4 <calc_pressure>
 8003020:	eef0 7a40 	vmov.f32	s15, s0
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	edc3 7a04 	vstr	s15, [r3, #16]
				data->humidity = calc_humidity(adc_hum, dev);
 800302a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff fc82 	bl	8002938 <calc_humidity>
 8003034:	eef0 7a40 	vmov.f32	s15, s0
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	edc3 7a05 	vstr	s15, [r3, #20]
				if (dev->variant_id == BME68X_VARIANT_GAS_HIGH) {
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d10c      	bne.n	8003060 <read_field_data+0x22e>
					data->gas_resistance = calc_gas_resistance_high(
 8003046:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800304a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800304c:	4611      	mov	r1, r2
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff fde0 	bl	8002c14 <calc_gas_resistance_high>
 8003054:	eef0 7a40 	vmov.f32	s15, s0
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	edc3 7a06 	vstr	s15, [r3, #24]
				} else {
					data->gas_resistance = calc_gas_resistance_low(
							adc_gas_res_low, gas_range_l, dev);
				}

				break;
 800305e:	e026      	b.n	80030ae <read_field_data+0x27c>
					data->gas_resistance = calc_gas_resistance_low(
 8003060:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8003064:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff fd31 	bl	8002ad0 <calc_gas_resistance_low>
 800306e:	eef0 7a40 	vmov.f32	s15, s0
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	edc3 7a06 	vstr	s15, [r3, #24]
				break;
 8003078:	e019      	b.n	80030ae <read_field_data+0x27c>
			}
		}

		if (rslt == BME68X_OK) {
 800307a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800307e:	2b00      	cmp	r3, #0
 8003080:	d107      	bne.n	8003092 <read_field_data+0x260>
			dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6852      	ldr	r2, [r2, #4]
 800308a:	4611      	mov	r1, r2
 800308c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8003090:	4798      	blx	r3
		}

		tries--;
 8003092:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003096:	3b01      	subs	r3, #1
 8003098:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	while ((tries) && (rslt == BME68X_OK)) {
 800309c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d004      	beq.n	80030ae <read_field_data+0x27c>
 80030a4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f43f aed9 	beq.w	8002e60 <read_field_data+0x2e>
	}

	return rslt;
 80030ae:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3738      	adds	r7, #56	@ 0x38
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <read_all_field_data>:

/* This internal API is used to read all data fields of the sensor */
static int8_t read_all_field_data(struct bme68x_data *const data[],
		struct bme68x_dev *dev)
{
 80030ba:	b590      	push	{r4, r7, lr}
 80030bc:	b09d      	sub	sp, #116	@ 0x74
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
 80030c2:	6039      	str	r1, [r7, #0]
	int8_t rslt = BME68X_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	uint8_t buff[BME68X_LEN_FIELD * 3] = { 0 };
 80030ca:	2300      	movs	r3, #0
 80030cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030d2:	222f      	movs	r2, #47	@ 0x2f
 80030d4:	2100      	movs	r1, #0
 80030d6:	4618      	mov	r0, r3
 80030d8:	f00b ffc4 	bl	800f064 <memset>
	uint32_t adc_temp;
	uint32_t adc_pres;
	uint16_t adc_hum;
	uint16_t adc_gas_res_low, adc_gas_res_high;
	uint8_t off;
	uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
 80030dc:	2300      	movs	r3, #0
 80030de:	60bb      	str	r3, [r7, #8]
 80030e0:	f107 030c 	add.w	r3, r7, #12
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	605a      	str	r2, [r3, #4]
 80030ea:	609a      	str	r2, [r3, #8]
 80030ec:	60da      	str	r2, [r3, #12]
 80030ee:	611a      	str	r2, [r3, #16]
 80030f0:	615a      	str	r2, [r3, #20]
 80030f2:	831a      	strh	r2, [r3, #24]
	uint8_t i;

	if (!data[0] && !data[1] && !data[2]) {
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10c      	bne.n	8003116 <read_all_field_data+0x5c>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3304      	adds	r3, #4
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d107      	bne.n	8003116 <read_all_field_data+0x5c>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	3308      	adds	r3, #8
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d102      	bne.n	8003116 <read_all_field_data+0x5c>
		rslt = BME68X_E_NULL_PTR;
 8003110:	23ff      	movs	r3, #255	@ 0xff
 8003112:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	}

	if (rslt == BME68X_OK) {
 8003116:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800311a:	2b00      	cmp	r3, #0
 800311c:	d109      	bne.n	8003132 <read_all_field_data+0x78>
		rslt = bme68x_get_regs(BME68X_REG_FIELD0, buff,
 800311e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2233      	movs	r2, #51	@ 0x33
 8003126:	201d      	movs	r0, #29
 8003128:	f7fe fe36 	bl	8001d98 <bme68x_get_regs>
 800312c:	4603      	mov	r3, r0
 800312e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				(uint32_t) BME68X_LEN_FIELD * 3, dev);
	}

	if (rslt == BME68X_OK) {
 8003132:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003136:	2b00      	cmp	r3, #0
 8003138:	d109      	bne.n	800314e <read_all_field_data+0x94>
		rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0, set_val, 30, dev);
 800313a:	f107 0108 	add.w	r1, r7, #8
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	221e      	movs	r2, #30
 8003142:	2050      	movs	r0, #80	@ 0x50
 8003144:	f7fe fe28 	bl	8001d98 <bme68x_get_regs>
 8003148:	4603      	mov	r3, r0
 800314a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	}

	for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++) {
 800314e:	2300      	movs	r3, #0
 8003150:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8003154:	e1ce      	b.n	80034f4 <read_all_field_data+0x43a>
		off = (uint8_t) (i * BME68X_LEN_FIELD);
 8003156:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800315a:	461a      	mov	r2, r3
 800315c:	0112      	lsls	r2, r2, #4
 800315e:	4413      	add	r3, r2
 8003160:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
		data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 8003164:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003168:	3370      	adds	r3, #112	@ 0x70
 800316a:	443b      	add	r3, r7
 800316c:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 8003170:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	440b      	add	r3, r1
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	701a      	strb	r2, [r3, #0]
		data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 8003184:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003188:	3370      	adds	r3, #112	@ 0x70
 800318a:	443b      	add	r3, r7
 800318c:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 8003190:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	440b      	add	r3, r1
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f002 020f 	and.w	r2, r2, #15
 80031a0:	b2d2      	uxtb	r2, r2
 80031a2:	705a      	strb	r2, [r3, #1]
		data[i]->meas_index = buff[off + 1];
 80031a4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	440b      	add	r3, r1
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	3270      	adds	r2, #112	@ 0x70
 80031b8:	443a      	add	r2, r7
 80031ba:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 80031be:	709a      	strb	r2, [r3, #2]

		/* read the raw data from the sensor */
		adc_pres = (uint32_t) (((uint32_t) buff[off + 2] * 4096)
 80031c0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80031c4:	3302      	adds	r3, #2
 80031c6:	3370      	adds	r3, #112	@ 0x70
 80031c8:	443b      	add	r3, r7
 80031ca:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80031ce:	031a      	lsls	r2, r3, #12
				| ((uint32_t) buff[off + 3] * 16)
 80031d0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80031d4:	3303      	adds	r3, #3
 80031d6:	3370      	adds	r3, #112	@ 0x70
 80031d8:	443b      	add	r3, r7
 80031da:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	4313      	orrs	r3, r2
				| ((uint32_t) buff[off + 4] / 16));
 80031e2:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80031e6:	3204      	adds	r2, #4
 80031e8:	3270      	adds	r2, #112	@ 0x70
 80031ea:	443a      	add	r2, r7
 80031ec:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 80031f0:	0912      	lsrs	r2, r2, #4
 80031f2:	b2d2      	uxtb	r2, r2
		adc_pres = (uint32_t) (((uint32_t) buff[off + 2] * 4096)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	66bb      	str	r3, [r7, #104]	@ 0x68
		adc_temp = (uint32_t) (((uint32_t) buff[off + 5] * 4096)
 80031f8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80031fc:	3305      	adds	r3, #5
 80031fe:	3370      	adds	r3, #112	@ 0x70
 8003200:	443b      	add	r3, r7
 8003202:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8003206:	031a      	lsls	r2, r3, #12
				| ((uint32_t) buff[off + 6] * 16)
 8003208:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800320c:	3306      	adds	r3, #6
 800320e:	3370      	adds	r3, #112	@ 0x70
 8003210:	443b      	add	r3, r7
 8003212:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	4313      	orrs	r3, r2
				| ((uint32_t) buff[off + 7] / 16));
 800321a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800321e:	3207      	adds	r2, #7
 8003220:	3270      	adds	r2, #112	@ 0x70
 8003222:	443a      	add	r2, r7
 8003224:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8003228:	0912      	lsrs	r2, r2, #4
 800322a:	b2d2      	uxtb	r2, r2
		adc_temp = (uint32_t) (((uint32_t) buff[off + 5] * 4096)
 800322c:	4313      	orrs	r3, r2
 800322e:	667b      	str	r3, [r7, #100]	@ 0x64
		adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256)
 8003230:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003234:	3308      	adds	r3, #8
 8003236:	3370      	adds	r3, #112	@ 0x70
 8003238:	443b      	add	r3, r7
 800323a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800323e:	021b      	lsls	r3, r3, #8
 8003240:	b29b      	uxth	r3, r3
				| (uint32_t) buff[off + 9]);
 8003242:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8003246:	3209      	adds	r2, #9
 8003248:	3270      	adds	r2, #112	@ 0x70
 800324a:	443a      	add	r2, r7
 800324c:	f812 2c48 	ldrb.w	r2, [r2, #-72]
		adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
		adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4
 8003256:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800325a:	330d      	adds	r3, #13
 800325c:	3370      	adds	r3, #112	@ 0x70
 800325e:	443b      	add	r3, r7
 8003260:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	b29b      	uxth	r3, r3
				| (((uint32_t) buff[off + 14]) / 64));
 8003268:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800326c:	320e      	adds	r2, #14
 800326e:	3270      	adds	r2, #112	@ 0x70
 8003270:	443a      	add	r2, r7
 8003272:	f812 2c48 	ldrb.w	r2, [r2, #-72]
		adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4
 8003276:	0992      	lsrs	r2, r2, #6
 8003278:	b2d2      	uxtb	r2, r2
 800327a:	4313      	orrs	r3, r2
 800327c:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
		adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4
 8003280:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003284:	330f      	adds	r3, #15
 8003286:	3370      	adds	r3, #112	@ 0x70
 8003288:	443b      	add	r3, r7
 800328a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	b29b      	uxth	r3, r3
				| (((uint32_t) buff[off + 16]) / 64));
 8003292:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8003296:	3210      	adds	r2, #16
 8003298:	3270      	adds	r2, #112	@ 0x70
 800329a:	443a      	add	r2, r7
 800329c:	f812 2c48 	ldrb.w	r2, [r2, #-72]
		adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4
 80032a0:	0992      	lsrs	r2, r2, #6
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		gas_range_l = buff[off + 14] & BME68X_GAS_RANGE_MSK;
 80032aa:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80032ae:	330e      	adds	r3, #14
 80032b0:	3370      	adds	r3, #112	@ 0x70
 80032b2:	443b      	add	r3, r7
 80032b4:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80032b8:	f003 030f 	and.w	r3, r3, #15
 80032bc:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
		gas_range_h = buff[off + 16] & BME68X_GAS_RANGE_MSK;
 80032c0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80032c4:	3310      	adds	r3, #16
 80032c6:	3370      	adds	r3, #112	@ 0x70
 80032c8:	443b      	add	r3, r7
 80032ca:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
		if (dev->variant_id == BME68X_VARIANT_GAS_HIGH) {
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d13a      	bne.n	8003354 <read_all_field_data+0x29a>
			data[i]->status |= buff[off + 16] & BME68X_GASM_VALID_MSK;
 80032de:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	4413      	add	r3, r2
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	b25a      	sxtb	r2, r3
 80032ee:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80032f2:	3310      	adds	r3, #16
 80032f4:	3370      	adds	r3, #112	@ 0x70
 80032f6:	443b      	add	r3, r7
 80032f8:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80032fc:	b25b      	sxtb	r3, r3
 80032fe:	f003 0320 	and.w	r3, r3, #32
 8003302:	b25b      	sxtb	r3, r3
 8003304:	4313      	orrs	r3, r2
 8003306:	b259      	sxtb	r1, r3
 8003308:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	4413      	add	r3, r2
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	b2ca      	uxtb	r2, r1
 8003316:	701a      	strb	r2, [r3, #0]
			data[i]->status |= buff[off + 16] & BME68X_HEAT_STAB_MSK;
 8003318:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	4413      	add	r3, r2
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	b25a      	sxtb	r2, r3
 8003328:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800332c:	3310      	adds	r3, #16
 800332e:	3370      	adds	r3, #112	@ 0x70
 8003330:	443b      	add	r3, r7
 8003332:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8003336:	b25b      	sxtb	r3, r3
 8003338:	f003 0310 	and.w	r3, r3, #16
 800333c:	b25b      	sxtb	r3, r3
 800333e:	4313      	orrs	r3, r2
 8003340:	b259      	sxtb	r1, r3
 8003342:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	4413      	add	r3, r2
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	b2ca      	uxtb	r2, r1
 8003350:	701a      	strb	r2, [r3, #0]
 8003352:	e039      	b.n	80033c8 <read_all_field_data+0x30e>
		} else {
			data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
 8003354:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	4413      	add	r3, r2
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	b25a      	sxtb	r2, r3
 8003364:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003368:	330e      	adds	r3, #14
 800336a:	3370      	adds	r3, #112	@ 0x70
 800336c:	443b      	add	r3, r7
 800336e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8003372:	b25b      	sxtb	r3, r3
 8003374:	f003 0320 	and.w	r3, r3, #32
 8003378:	b25b      	sxtb	r3, r3
 800337a:	4313      	orrs	r3, r2
 800337c:	b259      	sxtb	r1, r3
 800337e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	4413      	add	r3, r2
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	b2ca      	uxtb	r2, r1
 800338c:	701a      	strb	r2, [r3, #0]
			data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
 800338e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	4413      	add	r3, r2
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	b25a      	sxtb	r2, r3
 800339e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80033a2:	330e      	adds	r3, #14
 80033a4:	3370      	adds	r3, #112	@ 0x70
 80033a6:	443b      	add	r3, r7
 80033a8:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80033ac:	b25b      	sxtb	r3, r3
 80033ae:	f003 0310 	and.w	r3, r3, #16
 80033b2:	b25b      	sxtb	r3, r3
 80033b4:	4313      	orrs	r3, r2
 80033b6:	b259      	sxtb	r1, r3
 80033b8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	4413      	add	r3, r2
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	b2ca      	uxtb	r2, r1
 80033c6:	701a      	strb	r2, [r3, #0]
		}

		data[i]->idac = set_val[data[i]->gas_index];
 80033c8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	4413      	add	r3, r2
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	785b      	ldrb	r3, [r3, #1]
 80033d6:	4619      	mov	r1, r3
 80033d8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	4413      	add	r3, r2
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f101 0270 	add.w	r2, r1, #112	@ 0x70
 80033e8:	443a      	add	r2, r7
 80033ea:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 80033ee:	711a      	strb	r2, [r3, #4]
		data[i]->res_heat = set_val[10 + data[i]->gas_index];
 80033f0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	4413      	add	r3, r2
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	785b      	ldrb	r3, [r3, #1]
 80033fe:	f103 020a 	add.w	r2, r3, #10
 8003402:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	440b      	add	r3, r1
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	3270      	adds	r2, #112	@ 0x70
 8003410:	443a      	add	r2, r7
 8003412:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8003416:	70da      	strb	r2, [r3, #3]
		data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 8003418:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	4413      	add	r3, r2
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	785b      	ldrb	r3, [r3, #1]
 8003426:	f103 0214 	add.w	r2, r3, #20
 800342a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	440b      	add	r3, r1
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	3270      	adds	r2, #112	@ 0x70
 8003438:	443a      	add	r2, r7
 800343a:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 800343e:	715a      	strb	r2, [r3, #5]
		data[i]->temperature = calc_temperature(adc_temp, dev);
 8003440:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	4413      	add	r3, r2
 800344a:	681c      	ldr	r4, [r3, #0]
 800344c:	6839      	ldr	r1, [r7, #0]
 800344e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003450:	f7ff f8aa 	bl	80025a8 <calc_temperature>
 8003454:	eef0 7a40 	vmov.f32	s15, s0
 8003458:	edc4 7a03 	vstr	s15, [r4, #12]
		data[i]->pressure = calc_pressure(adc_pres, dev);
 800345c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	4413      	add	r3, r2
 8003466:	681c      	ldr	r4, [r3, #0]
 8003468:	6839      	ldr	r1, [r7, #0]
 800346a:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800346c:	f7ff f922 	bl	80026b4 <calc_pressure>
 8003470:	eef0 7a40 	vmov.f32	s15, s0
 8003474:	edc4 7a04 	vstr	s15, [r4, #16]
		data[i]->humidity = calc_humidity(adc_hum, dev);
 8003478:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	4413      	add	r3, r2
 8003482:	681c      	ldr	r4, [r3, #0]
 8003484:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8003488:	6839      	ldr	r1, [r7, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff fa54 	bl	8002938 <calc_humidity>
 8003490:	eef0 7a40 	vmov.f32	s15, s0
 8003494:	edc4 7a05 	vstr	s15, [r4, #20]
		if (dev->variant_id == BME68X_VARIANT_GAS_HIGH) {
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d112      	bne.n	80034c6 <read_all_field_data+0x40c>
			data[i]->gas_resistance = calc_gas_resistance_high(adc_gas_res_high,
 80034a0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	4413      	add	r3, r2
 80034aa:	681c      	ldr	r4, [r3, #0]
 80034ac:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 80034b0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80034b4:	4611      	mov	r1, r2
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff fbac 	bl	8002c14 <calc_gas_resistance_high>
 80034bc:	eef0 7a40 	vmov.f32	s15, s0
 80034c0:	edc4 7a06 	vstr	s15, [r4, #24]
 80034c4:	e011      	b.n	80034ea <read_all_field_data+0x430>
					gas_range_h);
		} else {
			data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low,
 80034c6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	4413      	add	r3, r2
 80034d0:	681c      	ldr	r4, [r3, #0]
 80034d2:	f897 105d 	ldrb.w	r1, [r7, #93]	@ 0x5d
 80034d6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff faf7 	bl	8002ad0 <calc_gas_resistance_low>
 80034e2:	eef0 7a40 	vmov.f32	s15, s0
 80034e6:	edc4 7a06 	vstr	s15, [r4, #24]
	for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++) {
 80034ea:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80034ee:	3301      	adds	r3, #1
 80034f0:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80034f4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d804      	bhi.n	8003506 <read_all_field_data+0x44c>
 80034fc:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8003500:	2b00      	cmp	r3, #0
 8003502:	f43f ae28 	beq.w	8003156 <read_all_field_data+0x9c>
					gas_range_l, dev);
		}
	}

	return rslt;
 8003506:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 800350a:	4618      	mov	r0, r3
 800350c:	3774      	adds	r7, #116	@ 0x74
 800350e:	46bd      	mov	sp, r7
 8003510:	bd90      	pop	{r4, r7, pc}

08003512 <set_mem_page>:

/* This internal API is used to switch between SPI memory pages */
static int8_t set_mem_page(uint8_t reg_addr, struct bme68x_dev *dev)
{
 8003512:	b590      	push	{r4, r7, lr}
 8003514:	b085      	sub	sp, #20
 8003516:	af00      	add	r7, sp, #0
 8003518:	4603      	mov	r3, r0
 800351a:	6039      	str	r1, [r7, #0]
 800351c:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 800351e:	6838      	ldr	r0, [r7, #0]
 8003520:	f000 f8b8 	bl	8003694 <null_ptr_check>
 8003524:	4603      	mov	r3, r0
 8003526:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME68X_OK) {
 8003528:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d14f      	bne.n	80035d0 <set_mem_page+0xbe>
		if (reg_addr > 0x7f) {
 8003530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003534:	2b00      	cmp	r3, #0
 8003536:	da02      	bge.n	800353e <set_mem_page+0x2c>
			mem_page = BME68X_MEM_PAGE1;
 8003538:	2300      	movs	r3, #0
 800353a:	73bb      	strb	r3, [r7, #14]
 800353c:	e001      	b.n	8003542 <set_mem_page+0x30>
		} else {
			mem_page = BME68X_MEM_PAGE0;
 800353e:	2310      	movs	r3, #16
 8003540:	73bb      	strb	r3, [r7, #14]
		}

		if (mem_page != dev->mem_page) {
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	7b5b      	ldrb	r3, [r3, #13]
 8003546:	7bba      	ldrb	r2, [r7, #14]
 8003548:	429a      	cmp	r2, r3
 800354a:	d041      	beq.n	80035d0 <set_mem_page+0xbe>
			dev->mem_page = mem_page;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	7bba      	ldrb	r2, [r7, #14]
 8003550:	735a      	strb	r2, [r3, #13]
			dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK,
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f107 010d 	add.w	r1, r7, #13
 800355e:	2201      	movs	r2, #1
 8003560:	20f3      	movs	r0, #243	@ 0xf3
 8003562:	47a0      	blx	r4
 8003564:	4603      	mov	r3, r0
 8003566:	461a      	mov	r2, r3
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
					&reg, 1, dev->intf_ptr);
			if (dev->intf_rslt != 0) {
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <set_mem_page+0x6a>
				rslt = BME68X_E_COM_FAIL;
 8003578:	23fe      	movs	r3, #254	@ 0xfe
 800357a:	73fb      	strb	r3, [r7, #15]
			}

			if (rslt == BME68X_OK) {
 800357c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d125      	bne.n	80035d0 <set_mem_page+0xbe>
				reg = reg & (~BME68X_MEM_PAGE_MSK);
 8003584:	7b7b      	ldrb	r3, [r7, #13]
 8003586:	f023 0310 	bic.w	r3, r3, #16
 800358a:	b2db      	uxtb	r3, r3
 800358c:	737b      	strb	r3, [r7, #13]
				reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	7b5b      	ldrb	r3, [r3, #13]
 8003592:	b25b      	sxtb	r3, r3
 8003594:	f003 0310 	and.w	r3, r3, #16
 8003598:	b25a      	sxtb	r2, r3
 800359a:	7b7b      	ldrb	r3, [r7, #13]
 800359c:	b25b      	sxtb	r3, r3
 800359e:	4313      	orrs	r3, r2
 80035a0:	b25b      	sxtb	r3, r3
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	737b      	strb	r3, [r7, #13]
				dev->intf_rslt = dev->write(
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f107 010d 	add.w	r1, r7, #13
 80035b2:	2201      	movs	r2, #1
 80035b4:	2073      	movs	r0, #115	@ 0x73
 80035b6:	47a0      	blx	r4
 80035b8:	4603      	mov	r3, r0
 80035ba:	461a      	mov	r2, r3
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
						BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1,
						dev->intf_ptr);
				if (dev->intf_rslt != 0) {
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <set_mem_page+0xbe>
					rslt = BME68X_E_COM_FAIL;
 80035cc:	23fe      	movs	r3, #254	@ 0xfe
 80035ce:	73fb      	strb	r3, [r7, #15]
				}
			}
		}
	}

	return rslt;
 80035d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd90      	pop	{r4, r7, pc}

080035dc <get_mem_page>:

/* This internal API is used to get the current SPI memory page */
static int8_t get_mem_page(struct bme68x_dev *dev)
{
 80035dc:	b590      	push	{r4, r7, lr}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f855 	bl	8003694 <null_ptr_check>
 80035ea:	4603      	mov	r3, r0
 80035ec:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME68X_OK) {
 80035ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d11b      	bne.n	800362e <get_mem_page+0x52>
		dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK,
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f107 010e 	add.w	r1, r7, #14
 8003602:	2201      	movs	r2, #1
 8003604:	20f3      	movs	r0, #243	@ 0xf3
 8003606:	47a0      	blx	r4
 8003608:	4603      	mov	r3, r0
 800360a:	461a      	mov	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
				&reg, 1, dev->intf_ptr);
		if (dev->intf_rslt != 0) {
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8003618:	2b00      	cmp	r3, #0
 800361a:	d002      	beq.n	8003622 <get_mem_page+0x46>
			rslt = BME68X_E_COM_FAIL;
 800361c:	23fe      	movs	r3, #254	@ 0xfe
 800361e:	73fb      	strb	r3, [r7, #15]
 8003620:	e005      	b.n	800362e <get_mem_page+0x52>
		} else {
			dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 8003622:	7bbb      	ldrb	r3, [r7, #14]
 8003624:	f003 0310 	and.w	r3, r3, #16
 8003628:	b2da      	uxtb	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	735a      	strb	r2, [r3, #13]
		}
	}

	return rslt;
 800362e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003632:	4618      	mov	r0, r3
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	bd90      	pop	{r4, r7, pc}

0800363a <boundary_check>:

/* This internal API is used to limit the max value of a parameter */
static int8_t boundary_check(uint8_t *value, uint8_t max,
		struct bme68x_dev *dev)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b086      	sub	sp, #24
 800363e:	af00      	add	r7, sp, #0
 8003640:	60f8      	str	r0, [r7, #12]
 8003642:	460b      	mov	r3, r1
 8003644:	607a      	str	r2, [r7, #4]
 8003646:	72fb      	strb	r3, [r7, #11]
	int8_t rslt;

	rslt = null_ptr_check(dev);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f823 	bl	8003694 <null_ptr_check>
 800364e:	4603      	mov	r3, r0
 8003650:	75fb      	strb	r3, [r7, #23]
	if ((value != NULL) && (rslt == BME68X_OK)) {
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d015      	beq.n	8003684 <boundary_check+0x4a>
 8003658:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d111      	bne.n	8003684 <boundary_check+0x4a>
		/* Check if value is above maximum value */
		if (*value > max) {
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	7afa      	ldrb	r2, [r7, #11]
 8003666:	429a      	cmp	r2, r3
 8003668:	d20e      	bcs.n	8003688 <boundary_check+0x4e>
			/* Auto correct the invalid value to maximum value */
			*value = max;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	7afa      	ldrb	r2, [r7, #11]
 800366e:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME68X_I_PARAM_CORR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8003676:	f043 0301 	orr.w	r3, r3, #1
 800367a:	b2da      	uxtb	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
		if (*value > max) {
 8003682:	e001      	b.n	8003688 <boundary_check+0x4e>
		}
	} else {
		rslt = BME68X_E_NULL_PTR;
 8003684:	23ff      	movs	r3, #255	@ 0xff
 8003686:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8003688:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <null_ptr_check>:

/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
	int8_t rslt = BME68X_OK;
 800369c:	2300      	movs	r3, #0
 800369e:	73fb      	strb	r3, [r7, #15]

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00b      	beq.n	80036be <null_ptr_check+0x2a>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d007      	beq.n	80036be <null_ptr_check+0x2a>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <null_ptr_check+0x2a>
			|| (dev->delay_us == NULL)) {
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <null_ptr_check+0x2e>
		/* Device structure pointer is not valid */
		rslt = BME68X_E_NULL_PTR;
 80036be:	23ff      	movs	r3, #255	@ 0xff
 80036c0:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80036c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
	...

080036d4 <set_conf>:

/* This internal API is used to set heater configurations */
static int8_t set_conf(const struct bme68x_heatr_conf *conf, uint8_t op_mode,
		uint8_t *nb_conv, struct bme68x_dev *dev)
{
 80036d4:	b590      	push	{r4, r7, lr}
 80036d6:	b093      	sub	sp, #76	@ 0x4c
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	607a      	str	r2, [r7, #4]
 80036de:	603b      	str	r3, [r7, #0]
 80036e0:	460b      	mov	r3, r1
 80036e2:	72fb      	strb	r3, [r7, #11]
	int8_t rslt = BME68X_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	uint8_t i;
	uint8_t shared_dur;
	uint8_t write_len = 0;
 80036ea:	2300      	movs	r3, #0
 80036ec:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
	uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 80036f0:	236e      	movs	r3, #110	@ 0x6e
 80036f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80036f6:	4aa1      	ldr	r2, [pc, #644]	@ (800397c <set_conf+0x2a8>)
 80036f8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80036fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80036fe:	c303      	stmia	r3!, {r0, r1}
 8003700:	801a      	strh	r2, [r3, #0]
	uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8003702:	4a9e      	ldr	r2, [pc, #632]	@ (800397c <set_conf+0x2a8>)
 8003704:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003708:	ca07      	ldmia	r2, {r0, r1, r2}
 800370a:	c303      	stmia	r3!, {r0, r1}
 800370c:	801a      	strh	r2, [r3, #0]
	uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 800370e:	4a9b      	ldr	r2, [pc, #620]	@ (800397c <set_conf+0x2a8>)
 8003710:	f107 0320 	add.w	r3, r7, #32
 8003714:	ca07      	ldmia	r2, {r0, r1, r2}
 8003716:	c303      	stmia	r3!, {r0, r1}
 8003718:	801a      	strh	r2, [r3, #0]
	uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 800371a:	4a98      	ldr	r2, [pc, #608]	@ (800397c <set_conf+0x2a8>)
 800371c:	f107 0314 	add.w	r3, r7, #20
 8003720:	ca07      	ldmia	r2, {r0, r1, r2}
 8003722:	c303      	stmia	r3!, {r0, r1}
 8003724:	801a      	strh	r2, [r3, #0]

	switch (op_mode) {
 8003726:	7afb      	ldrb	r3, [r7, #11]
 8003728:	2b03      	cmp	r3, #3
 800372a:	d024      	beq.n	8003776 <set_conf+0xa2>
 800372c:	2b03      	cmp	r3, #3
 800372e:	f300 80f9 	bgt.w	8003924 <set_conf+0x250>
 8003732:	2b01      	cmp	r3, #1
 8003734:	d002      	beq.n	800373c <set_conf+0x68>
 8003736:	2b02      	cmp	r3, #2
 8003738:	d07c      	beq.n	8003834 <set_conf+0x160>
 800373a:	e0f3      	b.n	8003924 <set_conf+0x250>
	case BME68X_FORCED_MODE:
		rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 800373c:	235a      	movs	r3, #90	@ 0x5a
 800373e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
		rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	885b      	ldrh	r3, [r3, #2]
 8003746:	6839      	ldr	r1, [r7, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff fa9d 	bl	8002c88 <calc_res_heat>
 800374e:	4603      	mov	r3, r0
 8003750:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
		gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 8003754:	2364      	movs	r3, #100	@ 0x64
 8003756:	f887 3020 	strb.w	r3, [r7, #32]
		gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	889b      	ldrh	r3, [r3, #4]
 800375e:	4618      	mov	r0, r3
 8003760:	f7ff fb42 	bl	8002de8 <calc_gas_wait>
 8003764:	4603      	mov	r3, r0
 8003766:	753b      	strb	r3, [r7, #20]
		(*nb_conv) = 0;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	701a      	strb	r2, [r3, #0]
		write_len = 1;
 800376e:	2301      	movs	r3, #1
 8003770:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
		break;
 8003774:	e0db      	b.n	800392e <set_conf+0x25a>
	case BME68X_SEQUENTIAL_MODE:
		if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof)) {
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <set_conf+0xb2>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d103      	bne.n	800378e <set_conf+0xba>
			rslt = BME68X_E_NULL_PTR;
 8003786:	23ff      	movs	r3, #255	@ 0xff
 8003788:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			break;
 800378c:	e0cf      	b.n	800392e <set_conf+0x25a>
		}

		for (i = 0; i < conf->profile_len; i++) {
 800378e:	2300      	movs	r3, #0
 8003790:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8003794:	e03f      	b.n	8003816 <set_conf+0x142>
			rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8003796:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800379a:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800379e:	325a      	adds	r2, #90	@ 0x5a
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	3348      	adds	r3, #72	@ 0x48
 80037a4:	443b      	add	r3, r7
 80037a6:	f803 2c10 	strb.w	r2, [r3, #-16]
			rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	4413      	add	r3, r2
 80037b6:	881b      	ldrh	r3, [r3, #0]
 80037b8:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 80037bc:	6839      	ldr	r1, [r7, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f7ff fa62 	bl	8002c88 <calc_res_heat>
 80037c4:	4603      	mov	r3, r0
 80037c6:	461a      	mov	r2, r3
 80037c8:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 80037cc:	443b      	add	r3, r7
 80037ce:	f803 2c1c 	strb.w	r2, [r3, #-28]
			gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 80037d2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80037d6:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80037da:	3264      	adds	r2, #100	@ 0x64
 80037dc:	b2d2      	uxtb	r2, r2
 80037de:	3348      	adds	r3, #72	@ 0x48
 80037e0:	443b      	add	r3, r7
 80037e2:	f803 2c28 	strb.w	r2, [r3, #-40]
			gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	4413      	add	r3, r2
 80037f2:	881b      	ldrh	r3, [r3, #0]
 80037f4:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff faf5 	bl	8002de8 <calc_gas_wait>
 80037fe:	4603      	mov	r3, r0
 8003800:	461a      	mov	r2, r3
 8003802:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8003806:	443b      	add	r3, r7
 8003808:	f803 2c34 	strb.w	r2, [r3, #-52]
		for (i = 0; i < conf->profile_len; i++) {
 800380c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003810:	3301      	adds	r3, #1
 8003812:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	7c1b      	ldrb	r3, [r3, #16]
 800381a:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800381e:	429a      	cmp	r2, r3
 8003820:	d3b9      	bcc.n	8003796 <set_conf+0xc2>
		}

		(*nb_conv) = conf->profile_len;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	7c1a      	ldrb	r2, [r3, #16]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	701a      	strb	r2, [r3, #0]
		write_len = conf->profile_len;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	7c1b      	ldrb	r3, [r3, #16]
 800382e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
		break;
 8003832:	e07c      	b.n	800392e <set_conf+0x25a>
	case BME68X_PARALLEL_MODE:
		if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof)) {
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <set_conf+0x170>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d103      	bne.n	800384c <set_conf+0x178>
			rslt = BME68X_E_NULL_PTR;
 8003844:	23ff      	movs	r3, #255	@ 0xff
 8003846:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			break;
 800384a:	e070      	b.n	800392e <set_conf+0x25a>
		}

		if (conf->shared_heatr_dur == 0) {
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8a5b      	ldrh	r3, [r3, #18]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d102      	bne.n	800385a <set_conf+0x186>
			rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
 8003854:	2303      	movs	r3, #3
 8003856:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		}

		for (i = 0; i < conf->profile_len; i++) {
 800385a:	2300      	movs	r3, #0
 800385c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8003860:	e03a      	b.n	80038d8 <set_conf+0x204>
			rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8003862:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003866:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800386a:	325a      	adds	r2, #90	@ 0x5a
 800386c:	b2d2      	uxtb	r2, r2
 800386e:	3348      	adds	r3, #72	@ 0x48
 8003870:	443b      	add	r3, r7
 8003872:	f803 2c10 	strb.w	r2, [r3, #-16]
			rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	4413      	add	r3, r2
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 8003888:	6839      	ldr	r1, [r7, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff f9fc 	bl	8002c88 <calc_res_heat>
 8003890:	4603      	mov	r3, r0
 8003892:	461a      	mov	r2, r3
 8003894:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8003898:	443b      	add	r3, r7
 800389a:	f803 2c1c 	strb.w	r2, [r3, #-28]
			gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 800389e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80038a2:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80038a6:	3264      	adds	r2, #100	@ 0x64
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	3348      	adds	r3, #72	@ 0x48
 80038ac:	443b      	add	r3, r7
 80038ae:	f803 2c28 	strb.w	r2, [r3, #-40]
			gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	4413      	add	r3, r2
 80038be:	881a      	ldrh	r2, [r3, #0]
 80038c0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	3348      	adds	r3, #72	@ 0x48
 80038c8:	443b      	add	r3, r7
 80038ca:	f803 2c34 	strb.w	r2, [r3, #-52]
		for (i = 0; i < conf->profile_len; i++) {
 80038ce:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80038d2:	3301      	adds	r3, #1
 80038d4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	7c1b      	ldrb	r3, [r3, #16]
 80038dc:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d3be      	bcc.n	8003862 <set_conf+0x18e>
		}

		(*nb_conv) = conf->profile_len;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	7c1a      	ldrb	r2, [r3, #16]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	701a      	strb	r2, [r3, #0]
		write_len = conf->profile_len;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	7c1b      	ldrb	r3, [r3, #16]
 80038f0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
		shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8a5b      	ldrh	r3, [r3, #18]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 f841 	bl	8003980 <calc_heatr_dur_shared>
 80038fe:	4603      	mov	r3, r0
 8003900:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
		if (rslt == BME68X_OK) {
 8003904:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10f      	bne.n	800392c <set_conf+0x258>
			rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1,
 800390c:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8003910:	f107 0043 	add.w	r0, r7, #67	@ 0x43
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	2201      	movs	r2, #1
 8003918:	f7fe f9ae 	bl	8001c78 <bme68x_set_regs>
 800391c:	4603      	mov	r3, r0
 800391e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
					dev);
		}

		break;
 8003922:	e003      	b.n	800392c <set_conf+0x258>
	default:
		rslt = BME68X_W_DEFINE_OP_MODE;
 8003924:	2301      	movs	r3, #1
 8003926:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800392a:	e000      	b.n	800392e <set_conf+0x25a>
		break;
 800392c:	bf00      	nop
	}

	if (rslt == BME68X_OK) {
 800392e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10b      	bne.n	800394e <set_conf+0x27a>
		rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 8003936:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800393a:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800393e:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	f7fe f998 	bl	8001c78 <bme68x_set_regs>
 8003948:	4603      	mov	r3, r0
 800394a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	}

	if (rslt == BME68X_OK) {
 800394e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10b      	bne.n	800396e <set_conf+0x29a>
		rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 8003956:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800395a:	f107 0114 	add.w	r1, r7, #20
 800395e:	f107 0020 	add.w	r0, r7, #32
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	f7fe f988 	bl	8001c78 <bme68x_set_regs>
 8003968:	4603      	mov	r3, r0
 800396a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	}

	return rslt;
 800396e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 8003972:	4618      	mov	r0, r3
 8003974:	374c      	adds	r7, #76	@ 0x4c
 8003976:	46bd      	mov	sp, r7
 8003978:	bd90      	pop	{r4, r7, pc}
 800397a:	bf00      	nop
 800397c:	08011560 	.word	0x08011560

08003980 <calc_heatr_dur_shared>:

/* This internal API is used to calculate the register value for
 * shared heater duration */
static uint8_t calc_heatr_dur_shared(uint16_t dur)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	80fb      	strh	r3, [r7, #6]
	uint8_t factor = 0;
 800398a:	2300      	movs	r3, #0
 800398c:	73fb      	strb	r3, [r7, #15]
	uint8_t heatdurval;

	if (dur >= 0x783) {
 800398e:	88fb      	ldrh	r3, [r7, #6]
 8003990:	f240 7282 	movw	r2, #1922	@ 0x782
 8003994:	4293      	cmp	r3, r2
 8003996:	d902      	bls.n	800399e <calc_heatr_dur_shared+0x1e>
		heatdurval = 0xff; /* Max duration */
 8003998:	23ff      	movs	r3, #255	@ 0xff
 800399a:	73bb      	strb	r3, [r7, #14]
 800399c:	e01d      	b.n	80039da <calc_heatr_dur_shared+0x5a>
	} else {
		/* Step size of 0.477ms */
		dur = (uint16_t) (((uint32_t) dur * 1000) / 477);
 800399e:	88fb      	ldrh	r3, [r7, #6]
 80039a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80039a4:	fb03 f202 	mul.w	r2, r3, r2
 80039a8:	4b0f      	ldr	r3, [pc, #60]	@ (80039e8 <calc_heatr_dur_shared+0x68>)
 80039aa:	fba3 1302 	umull	r1, r3, r3, r2
 80039ae:	1ad2      	subs	r2, r2, r3
 80039b0:	0852      	lsrs	r2, r2, #1
 80039b2:	4413      	add	r3, r2
 80039b4:	0a1b      	lsrs	r3, r3, #8
 80039b6:	80fb      	strh	r3, [r7, #6]
		while (dur > 0x3F) {
 80039b8:	e005      	b.n	80039c6 <calc_heatr_dur_shared+0x46>
			dur = dur >> 2;
 80039ba:	88fb      	ldrh	r3, [r7, #6]
 80039bc:	089b      	lsrs	r3, r3, #2
 80039be:	80fb      	strh	r3, [r7, #6]
			factor += 1;
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
 80039c2:	3301      	adds	r3, #1
 80039c4:	73fb      	strb	r3, [r7, #15]
		while (dur > 0x3F) {
 80039c6:	88fb      	ldrh	r3, [r7, #6]
 80039c8:	2b3f      	cmp	r3, #63	@ 0x3f
 80039ca:	d8f6      	bhi.n	80039ba <calc_heatr_dur_shared+0x3a>
		}

		heatdurval = (uint8_t) (dur + (factor * 64));
 80039cc:	88fb      	ldrh	r3, [r7, #6]
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
 80039d2:	019b      	lsls	r3, r3, #6
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	4413      	add	r3, r2
 80039d8:	73bb      	strb	r3, [r7, #14]
	}

	return heatdurval;
 80039da:	7bbb      	ldrb	r3, [r7, #14]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3714      	adds	r7, #20
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	12c8b89f 	.word	0x12c8b89f

080039ec <sort_sensor_data>:

/* This internal API is used sort the sensor data */
static void sort_sensor_data(uint8_t low_index, uint8_t high_index,
		struct bme68x_data *field[])
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	4603      	mov	r3, r0
 80039f4:	603a      	str	r2, [r7, #0]
 80039f6:	71fb      	strb	r3, [r7, #7]
 80039f8:	460b      	mov	r3, r1
 80039fa:	71bb      	strb	r3, [r7, #6]
	int16_t meas_index1;
	int16_t meas_index2;

	meas_index1 = (int16_t) field[low_index]->meas_index;
 80039fc:	79fb      	ldrb	r3, [r7, #7]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	4413      	add	r3, r2
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	789b      	ldrb	r3, [r3, #2]
 8003a08:	81fb      	strh	r3, [r7, #14]
	meas_index2 = (int16_t) field[high_index]->meas_index;
 8003a0a:	79bb      	ldrb	r3, [r7, #6]
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	4413      	add	r3, r2
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	789b      	ldrb	r3, [r3, #2]
 8003a16:	81bb      	strh	r3, [r7, #12]
	if ((field[low_index]->status & BME68X_NEW_DATA_MSK)
 8003a18:	79fb      	ldrb	r3, [r7, #7]
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	4413      	add	r3, r2
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	b25b      	sxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	da21      	bge.n	8003a6e <sort_sensor_data+0x82>
			&& (field[high_index]->status & BME68X_NEW_DATA_MSK)) {
 8003a2a:	79bb      	ldrb	r3, [r7, #6]
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	4413      	add	r3, r2
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	b25b      	sxtb	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	da18      	bge.n	8003a6e <sort_sensor_data+0x82>
		int16_t diff = meas_index2 - meas_index1;
 8003a3c:	89ba      	ldrh	r2, [r7, #12]
 8003a3e:	89fb      	ldrh	r3, [r7, #14]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	817b      	strh	r3, [r7, #10]
		if (((diff > -3) && (diff < 0)) || (diff > 2)) {
 8003a46:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003a4a:	f113 0f02 	cmn.w	r3, #2
 8003a4e:	db03      	blt.n	8003a58 <sort_sensor_data+0x6c>
 8003a50:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	db03      	blt.n	8003a60 <sort_sensor_data+0x74>
 8003a58:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	dd16      	ble.n	8003a8e <sort_sensor_data+0xa2>
			swap_fields(low_index, high_index, field);
 8003a60:	79b9      	ldrb	r1, [r7, #6]
 8003a62:	79fb      	ldrb	r3, [r7, #7]
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 f816 	bl	8003a98 <swap_fields>
			&& (field[high_index]->status & BME68X_NEW_DATA_MSK)) {
 8003a6c:	e00f      	b.n	8003a8e <sort_sensor_data+0xa2>
		}
	} else if (field[high_index]->status & BME68X_NEW_DATA_MSK) {
 8003a6e:	79bb      	ldrb	r3, [r7, #6]
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	4413      	add	r3, r2
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	b25b      	sxtb	r3, r3
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	da07      	bge.n	8003a90 <sort_sensor_data+0xa4>
		swap_fields(low_index, high_index, field);
 8003a80:	79b9      	ldrb	r1, [r7, #6]
 8003a82:	79fb      	ldrb	r3, [r7, #7]
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 f806 	bl	8003a98 <swap_fields>
	 *         - diff > 2, case 4.
	 *
	 *     Here the limits of -3 and 2 derive from the fact that there are 3 fields.
	 *     These values decrease or increase respectively if the number of fields increases.
	 */
}
 8003a8c:	e000      	b.n	8003a90 <sort_sensor_data+0xa4>
			&& (field[high_index]->status & BME68X_NEW_DATA_MSK)) {
 8003a8e:	bf00      	nop
}
 8003a90:	bf00      	nop
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <swap_fields>:

/* This internal API is used sort the sensor data */
static void swap_fields(uint8_t index1, uint8_t index2,
		struct bme68x_data *field[])
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	603a      	str	r2, [r7, #0]
 8003aa2:	71fb      	strb	r3, [r7, #7]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	71bb      	strb	r3, [r7, #6]
	struct bme68x_data *temp;

	temp = field[index1];
 8003aa8:	79fb      	ldrb	r3, [r7, #7]
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	4413      	add	r3, r2
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	60fb      	str	r3, [r7, #12]
	field[index1] = field[index2];
 8003ab4:	79bb      	ldrb	r3, [r7, #6]
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	441a      	add	r2, r3
 8003abc:	79fb      	ldrb	r3, [r7, #7]
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	6839      	ldr	r1, [r7, #0]
 8003ac2:	440b      	add	r3, r1
 8003ac4:	6812      	ldr	r2, [r2, #0]
 8003ac6:	601a      	str	r2, [r3, #0]
	field[index2] = temp;
 8003ac8:	79bb      	ldrb	r3, [r7, #6]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	4413      	add	r3, r2
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	601a      	str	r2, [r3, #0]
}
 8003ad4:	bf00      	nop
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <get_calib_data>:
	return rslt;
}

/* This internal API is used to read the calibration coefficients */
static int8_t get_calib_data(struct bme68x_dev *dev)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08e      	sub	sp, #56	@ 0x38
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t coeff_array[BME68X_LEN_COEFF_ALL];

	rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1,
 8003ae8:	f107 010c 	add.w	r1, r7, #12
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2217      	movs	r2, #23
 8003af0:	208a      	movs	r0, #138	@ 0x8a
 8003af2:	f7fe f951 	bl	8001d98 <bme68x_get_regs>
 8003af6:	4603      	mov	r3, r0
 8003af8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			dev);
	if (rslt == BME68X_OK) {
 8003afc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10b      	bne.n	8003b1c <get_calib_data+0x3c>
		rslt = bme68x_get_regs(BME68X_REG_COEFF2,
 8003b04:	f107 030c 	add.w	r3, r7, #12
 8003b08:	f103 0117 	add.w	r1, r3, #23
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	220e      	movs	r2, #14
 8003b10:	20e1      	movs	r0, #225	@ 0xe1
 8003b12:	f7fe f941 	bl	8001d98 <bme68x_get_regs>
 8003b16:	4603      	mov	r3, r0
 8003b18:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				&coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
	}

	if (rslt == BME68X_OK) {
 8003b1c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10b      	bne.n	8003b3c <get_calib_data+0x5c>
		rslt = bme68x_get_regs(BME68X_REG_COEFF3,
 8003b24:	f107 030c 	add.w	r3, r7, #12
 8003b28:	f103 0125 	add.w	r1, r3, #37	@ 0x25
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2205      	movs	r2, #5
 8003b30:	2000      	movs	r0, #0
 8003b32:	f7fe f931 	bl	8001d98 <bme68x_get_regs>
 8003b36:	4603      	mov	r3, r0
 8003b38:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				&coeff_array[BME68X_LEN_COEFF1 + BME68X_LEN_COEFF2],
				BME68X_LEN_COEFF3, dev);
	}

	if (rslt == BME68X_OK) {
 8003b3c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f040 80cb 	bne.w	8003cdc <get_calib_data+0x1fc>
		/* Temperature related coefficients */
		dev->calib.par_t1 =
				(uint16_t) (BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T1_MSB],
 8003b46:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003b4a:	021b      	lsls	r3, r3, #8
 8003b4c:	b21a      	sxth	r2, r3
 8003b4e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003b52:	b21b      	sxth	r3, r3
 8003b54:	4313      	orrs	r3, r2
 8003b56:	b21b      	sxth	r3, r3
 8003b58:	b29a      	uxth	r2, r3
		dev->calib.par_t1 =
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	83da      	strh	r2, [r3, #30]
						coeff_array[BME68X_IDX_T1_LSB]));
		dev->calib.par_t2 =
				(int16_t) (BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T2_MSB],
 8003b5e:	7b7b      	ldrb	r3, [r7, #13]
 8003b60:	021b      	lsls	r3, r3, #8
 8003b62:	b21a      	sxth	r2, r3
 8003b64:	7b3b      	ldrb	r3, [r7, #12]
 8003b66:	b21b      	sxth	r3, r3
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	b21a      	sxth	r2, r3
		dev->calib.par_t2 =
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	841a      	strh	r2, [r3, #32]
						coeff_array[BME68X_IDX_T2_LSB]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME68X_IDX_T3]);
 8003b70:	7bbb      	ldrb	r3, [r7, #14]
 8003b72:	b25a      	sxtb	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

		/* Pressure related coefficients */
		dev->calib.par_p1 =
				(uint16_t) (BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P1_MSB],
 8003b7a:	7c7b      	ldrb	r3, [r7, #17]
 8003b7c:	021b      	lsls	r3, r3, #8
 8003b7e:	b21a      	sxth	r2, r3
 8003b80:	7c3b      	ldrb	r3, [r7, #16]
 8003b82:	b21b      	sxth	r3, r3
 8003b84:	4313      	orrs	r3, r2
 8003b86:	b21b      	sxth	r3, r3
 8003b88:	b29a      	uxth	r2, r3
		dev->calib.par_p1 =
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	849a      	strh	r2, [r3, #36]	@ 0x24
						coeff_array[BME68X_IDX_P1_LSB]));
		dev->calib.par_p2 =
				(int16_t) (BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P2_MSB],
 8003b8e:	7cfb      	ldrb	r3, [r7, #19]
 8003b90:	021b      	lsls	r3, r3, #8
 8003b92:	b21a      	sxth	r2, r3
 8003b94:	7cbb      	ldrb	r3, [r7, #18]
 8003b96:	b21b      	sxth	r3, r3
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	b21a      	sxth	r2, r3
		dev->calib.par_p2 =
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	84da      	strh	r2, [r3, #38]	@ 0x26
						coeff_array[BME68X_IDX_P2_LSB]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME68X_IDX_P3];
 8003ba0:	7d3b      	ldrb	r3, [r7, #20]
 8003ba2:	b25a      	sxtb	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		dev->calib.par_p4 =
				(int16_t) (BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB],
 8003baa:	7dfb      	ldrb	r3, [r7, #23]
 8003bac:	021b      	lsls	r3, r3, #8
 8003bae:	b21a      	sxth	r2, r3
 8003bb0:	7dbb      	ldrb	r3, [r7, #22]
 8003bb2:	b21b      	sxth	r3, r3
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	b21a      	sxth	r2, r3
		dev->calib.par_p4 =
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	855a      	strh	r2, [r3, #42]	@ 0x2a
						coeff_array[BME68X_IDX_P4_LSB]));
		dev->calib.par_p5 =
				(int16_t) (BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P5_MSB],
 8003bbc:	7e7b      	ldrb	r3, [r7, #25]
 8003bbe:	021b      	lsls	r3, r3, #8
 8003bc0:	b21a      	sxth	r2, r3
 8003bc2:	7e3b      	ldrb	r3, [r7, #24]
 8003bc4:	b21b      	sxth	r3, r3
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	b21a      	sxth	r2, r3
		dev->calib.par_p5 =
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	859a      	strh	r2, [r3, #44]	@ 0x2c
						coeff_array[BME68X_IDX_P5_LSB]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME68X_IDX_P6]);
 8003bce:	7efb      	ldrb	r3, [r7, #27]
 8003bd0:	b25a      	sxtb	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		dev->calib.par_p7 = (int8_t) (coeff_array[BME68X_IDX_P7]);
 8003bd8:	7ebb      	ldrb	r3, [r7, #26]
 8003bda:	b25a      	sxtb	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		dev->calib.par_p8 =
				(int16_t) (BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB],
 8003be2:	7ffb      	ldrb	r3, [r7, #31]
 8003be4:	021b      	lsls	r3, r3, #8
 8003be6:	b21a      	sxth	r2, r3
 8003be8:	7fbb      	ldrb	r3, [r7, #30]
 8003bea:	b21b      	sxth	r3, r3
 8003bec:	4313      	orrs	r3, r2
 8003bee:	b21a      	sxth	r2, r3
		dev->calib.par_p8 =
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	861a      	strh	r2, [r3, #48]	@ 0x30
						coeff_array[BME68X_IDX_P8_LSB]));
		dev->calib.par_p9 =
				(int16_t) (BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P9_MSB],
 8003bf4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003bf8:	021b      	lsls	r3, r3, #8
 8003bfa:	b21a      	sxth	r2, r3
 8003bfc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c00:	b21b      	sxth	r3, r3
 8003c02:	4313      	orrs	r3, r2
 8003c04:	b21a      	sxth	r2, r3
		dev->calib.par_p9 =
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	865a      	strh	r2, [r3, #50]	@ 0x32
						coeff_array[BME68X_IDX_P9_LSB]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME68X_IDX_P10]);
 8003c0a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

		/* Humidity related coefficients */
		dev->calib.par_h1 =
				(uint16_t) (((uint16_t) coeff_array[BME68X_IDX_H1_MSB] << 4)
 8003c14:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003c18:	011b      	lsls	r3, r3, #4
						| (coeff_array[BME68X_IDX_H1_LSB]
 8003c1a:	b21a      	sxth	r2, r3
 8003c1c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003c20:	b21b      	sxth	r3, r3
								& BME68X_BIT_H1_DATA_MSK));
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	b21b      	sxth	r3, r3
						| (coeff_array[BME68X_IDX_H1_LSB]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	b21b      	sxth	r3, r3
				(uint16_t) (((uint16_t) coeff_array[BME68X_IDX_H1_MSB] << 4)
 8003c2c:	b29a      	uxth	r2, r3
		dev->calib.par_h1 =
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	821a      	strh	r2, [r3, #16]
		dev->calib.par_h2 =
				(uint16_t) (((uint16_t) coeff_array[BME68X_IDX_H2_MSB] << 4)
 8003c32:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003c36:	011b      	lsls	r3, r3, #4
						| ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 8003c38:	b21a      	sxth	r2, r3
 8003c3a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003c3e:	091b      	lsrs	r3, r3, #4
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	b21b      	sxth	r3, r3
 8003c44:	4313      	orrs	r3, r2
 8003c46:	b21b      	sxth	r3, r3
				(uint16_t) (((uint16_t) coeff_array[BME68X_IDX_H2_MSB] << 4)
 8003c48:	b29a      	uxth	r2, r3
		dev->calib.par_h2 =
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	825a      	strh	r2, [r3, #18]
		dev->calib.par_h3 = (int8_t) coeff_array[BME68X_IDX_H3];
 8003c4e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003c52:	b25a      	sxtb	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	751a      	strb	r2, [r3, #20]
		dev->calib.par_h4 = (int8_t) coeff_array[BME68X_IDX_H4];
 8003c58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c5c:	b25a      	sxtb	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	755a      	strb	r2, [r3, #21]
		dev->calib.par_h5 = (int8_t) coeff_array[BME68X_IDX_H5];
 8003c62:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003c66:	b25a      	sxtb	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	759a      	strb	r2, [r3, #22]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME68X_IDX_H6];
 8003c6c:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	75da      	strb	r2, [r3, #23]
		dev->calib.par_h7 = (int8_t) coeff_array[BME68X_IDX_H7];
 8003c74:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003c78:	b25a      	sxtb	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	761a      	strb	r2, [r3, #24]

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME68X_IDX_GH1];
 8003c7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003c82:	b25a      	sxtb	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	765a      	strb	r2, [r3, #25]
		dev->calib.par_gh2 = (int16_t) (BME68X_CONCAT_BYTES(
 8003c88:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003c8c:	021b      	lsls	r3, r3, #8
 8003c8e:	b21a      	sxth	r2, r3
 8003c90:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003c94:	b21b      	sxth	r3, r3
 8003c96:	4313      	orrs	r3, r2
 8003c98:	b21a      	sxth	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	835a      	strh	r2, [r3, #26]
				coeff_array[BME68X_IDX_GH2_MSB],
				coeff_array[BME68X_IDX_GH2_LSB]));
		dev->calib.par_gh3 = (int8_t) coeff_array[BME68X_IDX_GH3];
 8003c9e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003ca2:	b25a      	sxtb	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	771a      	strb	r2, [r3, #28]

		/* Other coefficients */
		dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE]
 8003ca8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
				& BME68X_RHRANGE_MSK) / 16);
 8003cac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	da00      	bge.n	8003cb6 <get_calib_data+0x1d6>
 8003cb4:	330f      	adds	r3, #15
 8003cb6:	111b      	asrs	r3, r3, #4
		dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE]
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		dev->calib.res_heat_val = (int8_t) coeff_array[BME68X_IDX_RES_HEAT_VAL];
 8003cc0:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8003cc4:	b25a      	sxtb	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
		dev->calib.range_sw_err =
				((int8_t) (coeff_array[BME68X_IDX_RANGE_SW_ERR]
 8003ccc:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003cd0:	b25b      	sxtb	r3, r3
		dev->calib.range_sw_err =
 8003cd2:	111b      	asrs	r3, r3, #4
 8003cd4:	b25a      	sxtb	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
						& BME68X_RSERROR_MSK)) / 16;
	}

	return rslt;
 8003cdc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3738      	adds	r7, #56	@ 0x38
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <read_variant_id>:

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme68x_dev *dev)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data = 0;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	73bb      	strb	r3, [r7, #14]

	/* Read variant ID information register */
	rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 8003cf4:	f107 010e 	add.w	r1, r7, #14
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	20f0      	movs	r0, #240	@ 0xf0
 8003cfe:	f7fe f84b 	bl	8001d98 <bme68x_get_regs>
 8003d02:	4603      	mov	r3, r0
 8003d04:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME68X_OK) {
 8003d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d103      	bne.n	8003d16 <read_variant_id+0x2e>
		dev->variant_id = reg_data;
 8003d0e:	7bbb      	ldrb	r3, [r7, #14]
 8003d10:	461a      	mov	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	609a      	str	r2, [r3, #8]
	}

	return rslt;
 8003d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
	...

08003d24 <bme68x_start>:
float gas_lower_limit = 5000;   // Bad air quality limit
float gas_upper_limit = 50000;  // Good air quality limit

/* Complete init. function. */
int8_t bme68x_start(struct bme68x_data *dataPtr, I2C_HandleTypeDef *handler)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]

	// I2C handler copy
	memcpy(&BME68x_I2C_Handler, handler, sizeof(*handler));
 8003d2e:	2254      	movs	r2, #84	@ 0x54
 8003d30:	6839      	ldr	r1, [r7, #0]
 8003d32:	481e      	ldr	r0, [pc, #120]	@ (8003dac <bme68x_start+0x88>)
 8003d34:	f00b f9f8 	bl	800f128 <memcpy>

	// Init.
	bme68x_interface_init(&bme, BME68X_I2C_INTF);
 8003d38:	2101      	movs	r1, #1
 8003d3a:	481d      	ldr	r0, [pc, #116]	@ (8003db0 <bme68x_start+0x8c>)
 8003d3c:	f000 f8ea 	bl	8003f14 <bme68x_interface_init>
	bme68x_init(&bme);
 8003d40:	481b      	ldr	r0, [pc, #108]	@ (8003db0 <bme68x_start+0x8c>)
 8003d42:	f7fd ff65 	bl	8001c10 <bme68x_init>

	// Init. for data variable
	BME68x_DATA = dataPtr;
 8003d46:	4a1b      	ldr	r2, [pc, #108]	@ (8003db4 <bme68x_start+0x90>)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6013      	str	r3, [r2, #0]

	// Configuration
	/* Check if rslt == BME68X_OK, report or handle if otherwise */
	conf.filter = BME68X_FILTER_SIZE_3;
 8003d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8003db8 <bme68x_start+0x94>)
 8003d4e:	2202      	movs	r2, #2
 8003d50:	70da      	strb	r2, [r3, #3]
	conf.odr = BME68X_ODR_NONE;
 8003d52:	4b19      	ldr	r3, [pc, #100]	@ (8003db8 <bme68x_start+0x94>)
 8003d54:	2208      	movs	r2, #8
 8003d56:	711a      	strb	r2, [r3, #4]
	conf.os_hum = BME68X_OS_2X;
 8003d58:	4b17      	ldr	r3, [pc, #92]	@ (8003db8 <bme68x_start+0x94>)
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	701a      	strb	r2, [r3, #0]
	conf.os_pres = BME68X_OS_4X;
 8003d5e:	4b16      	ldr	r3, [pc, #88]	@ (8003db8 <bme68x_start+0x94>)
 8003d60:	2203      	movs	r2, #3
 8003d62:	709a      	strb	r2, [r3, #2]
	conf.os_temp = BME68X_OS_8X;
 8003d64:	4b14      	ldr	r3, [pc, #80]	@ (8003db8 <bme68x_start+0x94>)
 8003d66:	2204      	movs	r2, #4
 8003d68:	705a      	strb	r2, [r3, #1]
	bme68x_set_conf(&conf, &bme);
 8003d6a:	4911      	ldr	r1, [pc, #68]	@ (8003db0 <bme68x_start+0x8c>)
 8003d6c:	4812      	ldr	r0, [pc, #72]	@ (8003db8 <bme68x_start+0x94>)
 8003d6e:	f7fe f89b 	bl	8001ea8 <bme68x_set_conf>

	// Heat conf.
	/* Check if rslt == BME68X_OK, report or handle if otherwise */
	heatr_conf.enable = BME68X_ENABLE;
 8003d72:	4b12      	ldr	r3, [pc, #72]	@ (8003dbc <bme68x_start+0x98>)
 8003d74:	2201      	movs	r2, #1
 8003d76:	701a      	strb	r2, [r3, #0]
	heatr_conf.heatr_temp = 320;
 8003d78:	4b10      	ldr	r3, [pc, #64]	@ (8003dbc <bme68x_start+0x98>)
 8003d7a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003d7e:	805a      	strh	r2, [r3, #2]
	heatr_conf.heatr_dur = 150;
 8003d80:	4b0e      	ldr	r3, [pc, #56]	@ (8003dbc <bme68x_start+0x98>)
 8003d82:	2296      	movs	r2, #150	@ 0x96
 8003d84:	809a      	strh	r2, [r3, #4]
	rslt = bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heatr_conf, &bme);
 8003d86:	4a0a      	ldr	r2, [pc, #40]	@ (8003db0 <bme68x_start+0x8c>)
 8003d88:	490c      	ldr	r1, [pc, #48]	@ (8003dbc <bme68x_start+0x98>)
 8003d8a:	2001      	movs	r0, #1
 8003d8c:	f7fe fb84 	bl	8002498 <bme68x_set_heatr_conf>
 8003d90:	4603      	mov	r3, r0
 8003d92:	461a      	mov	r2, r3
 8003d94:	4b0a      	ldr	r3, [pc, #40]	@ (8003dc0 <bme68x_start+0x9c>)
 8003d96:	701a      	strb	r2, [r3, #0]

	// Gather gas reference for the IAQ calculation
	bme68x_GetGasReference();
 8003d98:	f000 f906 	bl	8003fa8 <bme68x_GetGasReference>

	return rslt;
 8003d9c:	4b08      	ldr	r3, [pc, #32]	@ (8003dc0 <bme68x_start+0x9c>)
 8003d9e:	f993 3000 	ldrsb.w	r3, [r3]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	20000204 	.word	0x20000204
 8003db0:	20000258 	.word	0x20000258
 8003db4:	200002a8 	.word	0x200002a8
 8003db8:	200002b0 	.word	0x200002b0
 8003dbc:	200002b8 	.word	0x200002b8
 8003dc0:	200002ac 	.word	0x200002ac

08003dc4 <bme68x_single_measure>:

/* Force mode measurement. */
int8_t bme68x_single_measure(struct bme68x_data *dataPtr)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]

	bme68x_set_op_mode(BME68X_FORCED_MODE, &bme);
 8003dcc:	4916      	ldr	r1, [pc, #88]	@ (8003e28 <bme68x_single_measure+0x64>)
 8003dce:	2001      	movs	r0, #1
 8003dd0:	f7fe f96e 	bl	80020b0 <bme68x_set_op_mode>

	/* Calculate delay period in microseconds */
	del_period = bme68x_get_meas_dur(BME68X_FORCED_MODE, &conf, &bme)
 8003dd4:	4a14      	ldr	r2, [pc, #80]	@ (8003e28 <bme68x_single_measure+0x64>)
 8003dd6:	4915      	ldr	r1, [pc, #84]	@ (8003e2c <bme68x_single_measure+0x68>)
 8003dd8:	2001      	movs	r0, #1
 8003dda:	f7fe f9eb 	bl	80021b4 <bme68x_get_meas_dur>
 8003dde:	4603      	mov	r3, r0
			+ (heatr_conf.heatr_dur * 1000);
 8003de0:	4a13      	ldr	r2, [pc, #76]	@ (8003e30 <bme68x_single_measure+0x6c>)
 8003de2:	8892      	ldrh	r2, [r2, #4]
 8003de4:	4611      	mov	r1, r2
 8003de6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003dea:	fb01 f202 	mul.w	r2, r1, r2
 8003dee:	4413      	add	r3, r2
	del_period = bme68x_get_meas_dur(BME68X_FORCED_MODE, &conf, &bme)
 8003df0:	4a10      	ldr	r2, [pc, #64]	@ (8003e34 <bme68x_single_measure+0x70>)
 8003df2:	6013      	str	r3, [r2, #0]
	// bme.delay_us(del_period, bme.intf_ptr);
	HAL_Delay(del_period / 1000);
 8003df4:	4b0f      	ldr	r3, [pc, #60]	@ (8003e34 <bme68x_single_measure+0x70>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a0f      	ldr	r2, [pc, #60]	@ (8003e38 <bme68x_single_measure+0x74>)
 8003dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfe:	099b      	lsrs	r3, r3, #6
 8003e00:	4618      	mov	r0, r3
 8003e02:	f005 fd71 	bl	80098e8 <HAL_Delay>

	/* Check if rslt == BME68X_OK, report or handle if otherwise */
	rslt = bme68x_get_data(BME68X_FORCED_MODE, dataPtr, &n_fields, &bme);
 8003e06:	4b08      	ldr	r3, [pc, #32]	@ (8003e28 <bme68x_single_measure+0x64>)
 8003e08:	4a0c      	ldr	r2, [pc, #48]	@ (8003e3c <bme68x_single_measure+0x78>)
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	2001      	movs	r0, #1
 8003e0e:	f7fe fa45 	bl	800229c <bme68x_get_data>
 8003e12:	4603      	mov	r3, r0
 8003e14:	461a      	mov	r2, r3
 8003e16:	4b0a      	ldr	r3, [pc, #40]	@ (8003e40 <bme68x_single_measure+0x7c>)
 8003e18:	701a      	strb	r2, [r3, #0]

	return rslt;
 8003e1a:	4b09      	ldr	r3, [pc, #36]	@ (8003e40 <bme68x_single_measure+0x7c>)
 8003e1c:	f993 3000 	ldrsb.w	r3, [r3]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	20000258 	.word	0x20000258
 8003e2c:	200002b0 	.word	0x200002b0
 8003e30:	200002b8 	.word	0x200002b8
 8003e34:	200002cc 	.word	0x200002cc
 8003e38:	10624dd3 	.word	0x10624dd3
 8003e3c:	200002d0 	.word	0x200002d0
 8003e40:	200002ac 	.word	0x200002ac

08003e44 <bme68x_i2c_write>:

/* Necessary functions. */
// I2C write function.
BME68X_INTF_RET_TYPE bme68x_i2c_write(uint8_t reg_addr, const uint8_t *reg_data,
		uint32_t len, void *intf_ptr)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b08a      	sub	sp, #40	@ 0x28
 8003e48:	af04      	add	r7, sp, #16
 8003e4a:	60b9      	str	r1, [r7, #8]
 8003e4c:	607a      	str	r2, [r7, #4]
 8003e4e:	603b      	str	r3, [r7, #0]
 8003e50:	4603      	mov	r3, r0
 8003e52:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t*) intf_ptr;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	75fb      	strb	r3, [r7, #23]

	if (HAL_I2C_Mem_Write(&BME68x_I2C_Handler, (uint16_t) (dev_addr << 1),
 8003e5a:	7dfb      	ldrb	r3, [r7, #23]
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	b299      	uxth	r1, r3
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	200f      	movs	r0, #15
 8003e6c:	9002      	str	r0, [sp, #8]
 8003e6e:	9301      	str	r3, [sp, #4]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	2301      	movs	r3, #1
 8003e76:	4806      	ldr	r0, [pc, #24]	@ (8003e90 <bme68x_i2c_write+0x4c>)
 8003e78:	f007 fbf4 	bl	800b664 <HAL_I2C_Mem_Write>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <bme68x_i2c_write+0x42>
			reg_addr, 1, (uint8_t*) reg_data, len, 15) == HAL_OK)
		return 0;
 8003e82:	2300      	movs	r3, #0
 8003e84:	e000      	b.n	8003e88 <bme68x_i2c_write+0x44>

	return 1;
 8003e86:	2301      	movs	r3, #1
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	20000204 	.word	0x20000204

08003e94 <bme68x_i2c_read>:

// I2C read function.
BME68X_INTF_RET_TYPE bme68x_i2c_read(uint8_t reg_addr, uint8_t *reg_data,
		uint32_t len, void *intf_ptr)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08a      	sub	sp, #40	@ 0x28
 8003e98:	af04      	add	r7, sp, #16
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	607a      	str	r2, [r7, #4]
 8003e9e:	603b      	str	r3, [r7, #0]
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t*) intf_ptr;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	75fb      	strb	r3, [r7, #23]

	if (HAL_I2C_Mem_Read(&BME68x_I2C_Handler,
			(uint16_t) ((dev_addr << 1) | 0x1), reg_addr, 1, reg_data, len, 15)
 8003eaa:	7dfb      	ldrb	r3, [r7, #23]
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	b21b      	sxth	r3, r3
 8003eb0:	f043 0301 	orr.w	r3, r3, #1
 8003eb4:	b21b      	sxth	r3, r3
	if (HAL_I2C_Mem_Read(&BME68x_I2C_Handler,
 8003eb6:	b299      	uxth	r1, r3
 8003eb8:	7bfb      	ldrb	r3, [r7, #15]
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	200f      	movs	r0, #15
 8003ec2:	9002      	str	r0, [sp, #8]
 8003ec4:	9301      	str	r3, [sp, #4]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	2301      	movs	r3, #1
 8003ecc:	4806      	ldr	r0, [pc, #24]	@ (8003ee8 <bme68x_i2c_read+0x54>)
 8003ece:	f007 fcdd 	bl	800b88c <HAL_I2C_Mem_Read>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <bme68x_i2c_read+0x48>
			== HAL_OK)
		return 0;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	e000      	b.n	8003ede <bme68x_i2c_read+0x4a>

	return 1;
 8003edc:	2301      	movs	r3, #1
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3718      	adds	r7, #24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	20000204 	.word	0x20000204

08003eec <bme68x_delay_us>:

// BME68x delay function
void bme68x_delay_us(uint32_t period, void *intf_ptr)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
	HAL_Delay(period / 1000);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a05      	ldr	r2, [pc, #20]	@ (8003f10 <bme68x_delay_us+0x24>)
 8003efa:	fba2 2303 	umull	r2, r3, r2, r3
 8003efe:	099b      	lsrs	r3, r3, #6
 8003f00:	4618      	mov	r0, r3
 8003f02:	f005 fcf1 	bl	80098e8 <HAL_Delay>
}
 8003f06:	bf00      	nop
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	10624dd3 	.word	0x10624dd3

08003f14 <bme68x_interface_init>:

// BME68x interface function
int8_t bme68x_interface_init(struct bme68x_dev *bme, uint8_t intf)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	70fb      	strb	r3, [r7, #3]
	int8_t rslt = BME68X_OK;
 8003f20:	2300      	movs	r3, #0
 8003f22:	73fb      	strb	r3, [r7, #15]

	if (bme != NULL) {
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d02c      	beq.n	8003f84 <bme68x_interface_init+0x70>

		// Check for the device on the I2C line
		if (HAL_I2C_IsDeviceReady(&BME68x_I2C_Handler,
 8003f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8003f94 <bme68x_interface_init+0x80>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	b299      	uxth	r1, r3
 8003f32:	2305      	movs	r3, #5
 8003f34:	2205      	movs	r2, #5
 8003f36:	4818      	ldr	r0, [pc, #96]	@ (8003f98 <bme68x_interface_init+0x84>)
 8003f38:	f007 fdc2 	bl	800bac0 <HAL_I2C_IsDeviceReady>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d105      	bne.n	8003f4e <bme68x_interface_init+0x3a>
				(uint16_t) (dev_addr << 1), 5, 5) == HAL_OK) {
			// Device found at the I2C line.
			rslt = 0;
 8003f42:	2300      	movs	r3, #0
 8003f44:	73fb      	strb	r3, [r7, #15]
			rslt = -2; // Communication error.
			return rslt;
		}

		/* Bus configuration : I2C */
		if (intf == BME68X_I2C_INTF) {
 8003f46:	78fb      	ldrb	r3, [r7, #3]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d118      	bne.n	8003f7e <bme68x_interface_init+0x6a>
 8003f4c:	e004      	b.n	8003f58 <bme68x_interface_init+0x44>
			rslt = -2; // Communication error.
 8003f4e:	23fe      	movs	r3, #254	@ 0xfe
 8003f50:	73fb      	strb	r3, [r7, #15]
			return rslt;
 8003f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f56:	e019      	b.n	8003f8c <bme68x_interface_init+0x78>
			bme->read = bme68x_i2c_read;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a10      	ldr	r2, [pc, #64]	@ (8003f9c <bme68x_interface_init+0x88>)
 8003f5c:	641a      	str	r2, [r3, #64]	@ 0x40
			bme->write = bme68x_i2c_write;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a0f      	ldr	r2, [pc, #60]	@ (8003fa0 <bme68x_interface_init+0x8c>)
 8003f62:	645a      	str	r2, [r3, #68]	@ 0x44
			bme->intf = BME68X_I2C_INTF;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	731a      	strb	r2, [r3, #12]
		} else {
			return -2;
		}

		bme->delay_us = bme68x_delay_us;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8003fa4 <bme68x_interface_init+0x90>)
 8003f6e:	649a      	str	r2, [r3, #72]	@ 0x48
		bme->intf_ptr = &dev_addr;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a08      	ldr	r2, [pc, #32]	@ (8003f94 <bme68x_interface_init+0x80>)
 8003f74:	605a      	str	r2, [r3, #4]
		bme->amb_temp = 30; /* The ambient temperature in deg C is used for defining the heater temperature */
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	221e      	movs	r2, #30
 8003f7a:	739a      	strb	r2, [r3, #14]
 8003f7c:	e004      	b.n	8003f88 <bme68x_interface_init+0x74>
			return -2;
 8003f7e:	f06f 0301 	mvn.w	r3, #1
 8003f82:	e003      	b.n	8003f8c <bme68x_interface_init+0x78>
	} else {
		rslt = BME68X_E_NULL_PTR;
 8003f84:	23ff      	movs	r3, #255	@ 0xff
 8003f86:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8003f88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	20000000 	.word	0x20000000
 8003f98:	20000204 	.word	0x20000204
 8003f9c:	08003e95 	.word	0x08003e95
 8003fa0:	08003e45 	.word	0x08003e45
 8003fa4:	08003eed 	.word	0x08003eed

08003fa8 <bme68x_GetGasReference>:
 See more at http://www.dsbird.org.uk
 */

/* IAQ functions */
void bme68x_GetGasReference()
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
	// Now run the sensor for a burn-in period, then use combination of relative humidity and gas resistance to estimate indoor air quality as a percentage.

	int readings = 10;
 8003fae:	230a      	movs	r3, #10
 8003fb0:	603b      	str	r3, [r7, #0]
	for (int i = 1; i <= readings; i++) { // read gas for 10 x 0.150mS = 1.5secs
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	607b      	str	r3, [r7, #4]
 8003fb6:	e013      	b.n	8003fe0 <bme68x_GetGasReference+0x38>
		bme68x_single_measure(BME68x_DATA);
 8003fb8:	4b14      	ldr	r3, [pc, #80]	@ (800400c <bme68x_GetGasReference+0x64>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff ff01 	bl	8003dc4 <bme68x_single_measure>
		gas_reference += BME68x_DATA->gas_resistance;
 8003fc2:	4b12      	ldr	r3, [pc, #72]	@ (800400c <bme68x_GetGasReference+0x64>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	ed93 7a06 	vldr	s14, [r3, #24]
 8003fca:	4b11      	ldr	r3, [pc, #68]	@ (8004010 <bme68x_GetGasReference+0x68>)
 8003fcc:	edd3 7a00 	vldr	s15, [r3]
 8003fd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fd4:	4b0e      	ldr	r3, [pc, #56]	@ (8004010 <bme68x_GetGasReference+0x68>)
 8003fd6:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 1; i <= readings; i++) { // read gas for 10 x 0.150mS = 1.5secs
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	607b      	str	r3, [r7, #4]
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	dde7      	ble.n	8003fb8 <bme68x_GetGasReference+0x10>
	}
	gas_reference = gas_reference / readings;
 8003fe8:	4b09      	ldr	r3, [pc, #36]	@ (8004010 <bme68x_GetGasReference+0x68>)
 8003fea:	edd3 6a00 	vldr	s13, [r3]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	ee07 3a90 	vmov	s15, r3
 8003ff4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ff8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ffc:	4b04      	ldr	r3, [pc, #16]	@ (8004010 <bme68x_GetGasReference+0x68>)
 8003ffe:	edc3 7a00 	vstr	s15, [r3]

}
 8004002:	bf00      	nop
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	200002a8 	.word	0x200002a8
 8004010:	20000004 	.word	0x20000004
 8004014:	00000000 	.word	0x00000000

08004018 <bme68x_GetHumidityScore>:

//Calculate humidity contribution to IAQ index
int8_t bme68x_GetHumidityScore()
{
 8004018:	b5b0      	push	{r4, r5, r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0

	if (BME68x_DATA->humidity >= 38 && BME68x_DATA->humidity <= 42) // Humidity +/-5% around optimum
 800401e:	4b52      	ldr	r3, [pc, #328]	@ (8004168 <bme68x_GetHumidityScore+0x150>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	edd3 7a05 	vldr	s15, [r3, #20]
 8004026:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 800416c <bme68x_GetHumidityScore+0x154>
 800402a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800402e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004032:	db0e      	blt.n	8004052 <bme68x_GetHumidityScore+0x3a>
 8004034:	4b4c      	ldr	r3, [pc, #304]	@ (8004168 <bme68x_GetHumidityScore+0x150>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	edd3 7a05 	vldr	s15, [r3, #20]
 800403c:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8004170 <bme68x_GetHumidityScore+0x158>
 8004040:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004048:	d803      	bhi.n	8004052 <bme68x_GetHumidityScore+0x3a>
		humidity_score = 0.25 * 100;
 800404a:	4b4a      	ldr	r3, [pc, #296]	@ (8004174 <bme68x_GetHumidityScore+0x15c>)
 800404c:	4a4a      	ldr	r2, [pc, #296]	@ (8004178 <bme68x_GetHumidityScore+0x160>)
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	e076      	b.n	8004140 <bme68x_GetHumidityScore+0x128>
	else { // Humidity is sub-optimal
		if (BME68x_DATA->humidity < 38)
 8004052:	4b45      	ldr	r3, [pc, #276]	@ (8004168 <bme68x_GetHumidityScore+0x150>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	edd3 7a05 	vldr	s15, [r3, #20]
 800405a:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800416c <bme68x_GetHumidityScore+0x154>
 800405e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004066:	d52e      	bpl.n	80040c6 <bme68x_GetHumidityScore+0xae>
			humidity_score = 0.25 / hum_reference * BME68x_DATA->humidity * 100;
 8004068:	4b44      	ldr	r3, [pc, #272]	@ (800417c <bme68x_GetHumidityScore+0x164>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4618      	mov	r0, r3
 800406e:	f7fc fa63 	bl	8000538 <__aeabi_f2d>
 8004072:	4602      	mov	r2, r0
 8004074:	460b      	mov	r3, r1
 8004076:	f04f 0000 	mov.w	r0, #0
 800407a:	4941      	ldr	r1, [pc, #260]	@ (8004180 <bme68x_GetHumidityScore+0x168>)
 800407c:	f7fc fbde 	bl	800083c <__aeabi_ddiv>
 8004080:	4602      	mov	r2, r0
 8004082:	460b      	mov	r3, r1
 8004084:	4614      	mov	r4, r2
 8004086:	461d      	mov	r5, r3
 8004088:	4b37      	ldr	r3, [pc, #220]	@ (8004168 <bme68x_GetHumidityScore+0x150>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	4618      	mov	r0, r3
 8004090:	f7fc fa52 	bl	8000538 <__aeabi_f2d>
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	4620      	mov	r0, r4
 800409a:	4629      	mov	r1, r5
 800409c:	f7fc faa4 	bl	80005e8 <__aeabi_dmul>
 80040a0:	4602      	mov	r2, r0
 80040a2:	460b      	mov	r3, r1
 80040a4:	4610      	mov	r0, r2
 80040a6:	4619      	mov	r1, r3
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	4b35      	ldr	r3, [pc, #212]	@ (8004184 <bme68x_GetHumidityScore+0x16c>)
 80040ae:	f7fc fa9b 	bl	80005e8 <__aeabi_dmul>
 80040b2:	4602      	mov	r2, r0
 80040b4:	460b      	mov	r3, r1
 80040b6:	4610      	mov	r0, r2
 80040b8:	4619      	mov	r1, r3
 80040ba:	f7fc fd57 	bl	8000b6c <__aeabi_d2f>
 80040be:	4603      	mov	r3, r0
 80040c0:	4a2c      	ldr	r2, [pc, #176]	@ (8004174 <bme68x_GetHumidityScore+0x15c>)
 80040c2:	6013      	str	r3, [r2, #0]
 80040c4:	e03c      	b.n	8004140 <bme68x_GetHumidityScore+0x128>
		else {
			humidity_score = ((-0.25 / (100 - hum_reference)
 80040c6:	4b2d      	ldr	r3, [pc, #180]	@ (800417c <bme68x_GetHumidityScore+0x164>)
 80040c8:	edd3 7a00 	vldr	s15, [r3]
 80040cc:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8004188 <bme68x_GetHumidityScore+0x170>
 80040d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040d4:	ee17 0a90 	vmov	r0, s15
 80040d8:	f7fc fa2e 	bl	8000538 <__aeabi_f2d>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	f04f 0000 	mov.w	r0, #0
 80040e4:	4929      	ldr	r1, [pc, #164]	@ (800418c <bme68x_GetHumidityScore+0x174>)
 80040e6:	f7fc fba9 	bl	800083c <__aeabi_ddiv>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	4614      	mov	r4, r2
 80040f0:	461d      	mov	r5, r3
					* BME68x_DATA->humidity) + 0.416666) * 100;
 80040f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004168 <bme68x_GetHumidityScore+0x150>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fc fa1d 	bl	8000538 <__aeabi_f2d>
 80040fe:	4602      	mov	r2, r0
 8004100:	460b      	mov	r3, r1
 8004102:	4620      	mov	r0, r4
 8004104:	4629      	mov	r1, r5
 8004106:	f7fc fa6f 	bl	80005e8 <__aeabi_dmul>
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	4610      	mov	r0, r2
 8004110:	4619      	mov	r1, r3
 8004112:	a313      	add	r3, pc, #76	@ (adr r3, 8004160 <bme68x_GetHumidityScore+0x148>)
 8004114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004118:	f7fc f8b0 	bl	800027c <__adddf3>
 800411c:	4602      	mov	r2, r0
 800411e:	460b      	mov	r3, r1
 8004120:	4610      	mov	r0, r2
 8004122:	4619      	mov	r1, r3
 8004124:	f04f 0200 	mov.w	r2, #0
 8004128:	4b16      	ldr	r3, [pc, #88]	@ (8004184 <bme68x_GetHumidityScore+0x16c>)
 800412a:	f7fc fa5d 	bl	80005e8 <__aeabi_dmul>
 800412e:	4602      	mov	r2, r0
 8004130:	460b      	mov	r3, r1
 8004132:	4610      	mov	r0, r2
 8004134:	4619      	mov	r1, r3
 8004136:	f7fc fd19 	bl	8000b6c <__aeabi_d2f>
 800413a:	4603      	mov	r3, r0
			humidity_score = ((-0.25 / (100 - hum_reference)
 800413c:	4a0d      	ldr	r2, [pc, #52]	@ (8004174 <bme68x_GetHumidityScore+0x15c>)
 800413e:	6013      	str	r3, [r2, #0]
		}
	}

	return humidity_score;
 8004140:	4b0c      	ldr	r3, [pc, #48]	@ (8004174 <bme68x_GetHumidityScore+0x15c>)
 8004142:	edd3 7a00 	vldr	s15, [r3]
 8004146:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800414a:	edc7 7a01 	vstr	s15, [r7, #4]
 800414e:	793b      	ldrb	r3, [r7, #4]
 8004150:	b25b      	sxtb	r3, r3
}
 8004152:	4618      	mov	r0, r3
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bdb0      	pop	{r4, r5, r7, pc}
 800415a:	bf00      	nop
 800415c:	f3af 8000 	nop.w
 8004160:	ded6ba8c 	.word	0xded6ba8c
 8004164:	3fdaaaa7 	.word	0x3fdaaaa7
 8004168:	200002a8 	.word	0x200002a8
 800416c:	42180000 	.word	0x42180000
 8004170:	42280000 	.word	0x42280000
 8004174:	200002d4 	.word	0x200002d4
 8004178:	41c80000 	.word	0x41c80000
 800417c:	20000008 	.word	0x20000008
 8004180:	3fd00000 	.word	0x3fd00000
 8004184:	40590000 	.word	0x40590000
 8004188:	42c80000 	.word	0x42c80000
 800418c:	bfd00000 	.word	0xbfd00000

08004190 <bme68x_GetGasScore>:

//Calculate gas contribution to IAQ index
int8_t bme68x_GetGasScore()
{
 8004190:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004194:	b082      	sub	sp, #8
 8004196:	af00      	add	r7, sp, #0

	gas_score = (0.75 / (gas_upper_limit - gas_lower_limit) * gas_reference
 8004198:	4b42      	ldr	r3, [pc, #264]	@ (80042a4 <bme68x_GetGasScore+0x114>)
 800419a:	ed93 7a00 	vldr	s14, [r3]
 800419e:	4b42      	ldr	r3, [pc, #264]	@ (80042a8 <bme68x_GetGasScore+0x118>)
 80041a0:	edd3 7a00 	vldr	s15, [r3]
 80041a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041a8:	ee17 0a90 	vmov	r0, s15
 80041ac:	f7fc f9c4 	bl	8000538 <__aeabi_f2d>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	f04f 0000 	mov.w	r0, #0
 80041b8:	493c      	ldr	r1, [pc, #240]	@ (80042ac <bme68x_GetGasScore+0x11c>)
 80041ba:	f7fc fb3f 	bl	800083c <__aeabi_ddiv>
 80041be:	4602      	mov	r2, r0
 80041c0:	460b      	mov	r3, r1
 80041c2:	4614      	mov	r4, r2
 80041c4:	461d      	mov	r5, r3
 80041c6:	4b3a      	ldr	r3, [pc, #232]	@ (80042b0 <bme68x_GetGasScore+0x120>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fc f9b4 	bl	8000538 <__aeabi_f2d>
 80041d0:	4602      	mov	r2, r0
 80041d2:	460b      	mov	r3, r1
 80041d4:	4620      	mov	r0, r4
 80041d6:	4629      	mov	r1, r5
 80041d8:	f7fc fa06 	bl	80005e8 <__aeabi_dmul>
 80041dc:	4602      	mov	r2, r0
 80041de:	460b      	mov	r3, r1
 80041e0:	4690      	mov	r8, r2
 80041e2:	4699      	mov	r9, r3
			- (gas_lower_limit * (0.75 / (gas_upper_limit - gas_lower_limit))))
 80041e4:	4b30      	ldr	r3, [pc, #192]	@ (80042a8 <bme68x_GetGasScore+0x118>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7fc f9a5 	bl	8000538 <__aeabi_f2d>
 80041ee:	4604      	mov	r4, r0
 80041f0:	460d      	mov	r5, r1
 80041f2:	4b2c      	ldr	r3, [pc, #176]	@ (80042a4 <bme68x_GetGasScore+0x114>)
 80041f4:	ed93 7a00 	vldr	s14, [r3]
 80041f8:	4b2b      	ldr	r3, [pc, #172]	@ (80042a8 <bme68x_GetGasScore+0x118>)
 80041fa:	edd3 7a00 	vldr	s15, [r3]
 80041fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004202:	ee17 0a90 	vmov	r0, s15
 8004206:	f7fc f997 	bl	8000538 <__aeabi_f2d>
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	f04f 0000 	mov.w	r0, #0
 8004212:	4926      	ldr	r1, [pc, #152]	@ (80042ac <bme68x_GetGasScore+0x11c>)
 8004214:	f7fc fb12 	bl	800083c <__aeabi_ddiv>
 8004218:	4602      	mov	r2, r0
 800421a:	460b      	mov	r3, r1
 800421c:	4620      	mov	r0, r4
 800421e:	4629      	mov	r1, r5
 8004220:	f7fc f9e2 	bl	80005e8 <__aeabi_dmul>
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	4640      	mov	r0, r8
 800422a:	4649      	mov	r1, r9
 800422c:	f7fc f824 	bl	8000278 <__aeabi_dsub>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	4610      	mov	r0, r2
 8004236:	4619      	mov	r1, r3
			* 100.00;
 8004238:	f04f 0200 	mov.w	r2, #0
 800423c:	4b1d      	ldr	r3, [pc, #116]	@ (80042b4 <bme68x_GetGasScore+0x124>)
 800423e:	f7fc f9d3 	bl	80005e8 <__aeabi_dmul>
 8004242:	4602      	mov	r2, r0
 8004244:	460b      	mov	r3, r1
 8004246:	4610      	mov	r0, r2
 8004248:	4619      	mov	r1, r3
 800424a:	f7fc fc8f 	bl	8000b6c <__aeabi_d2f>
 800424e:	4603      	mov	r3, r0
	gas_score = (0.75 / (gas_upper_limit - gas_lower_limit) * gas_reference
 8004250:	4a19      	ldr	r2, [pc, #100]	@ (80042b8 <bme68x_GetGasScore+0x128>)
 8004252:	6013      	str	r3, [r2, #0]
	if (gas_score > 75)
 8004254:	4b18      	ldr	r3, [pc, #96]	@ (80042b8 <bme68x_GetGasScore+0x128>)
 8004256:	edd3 7a00 	vldr	s15, [r3]
 800425a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80042bc <bme68x_GetGasScore+0x12c>
 800425e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004266:	dd02      	ble.n	800426e <bme68x_GetGasScore+0xde>
		gas_score = 75; // Sometimes gas readings can go outside of expected scale maximum
 8004268:	4b13      	ldr	r3, [pc, #76]	@ (80042b8 <bme68x_GetGasScore+0x128>)
 800426a:	4a15      	ldr	r2, [pc, #84]	@ (80042c0 <bme68x_GetGasScore+0x130>)
 800426c:	601a      	str	r2, [r3, #0]
	if (gas_score < 0)
 800426e:	4b12      	ldr	r3, [pc, #72]	@ (80042b8 <bme68x_GetGasScore+0x128>)
 8004270:	edd3 7a00 	vldr	s15, [r3]
 8004274:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800427c:	d503      	bpl.n	8004286 <bme68x_GetGasScore+0xf6>
		gas_score = 0; // Sometimes gas readings can go outside of expected scale minimum
 800427e:	4b0e      	ldr	r3, [pc, #56]	@ (80042b8 <bme68x_GetGasScore+0x128>)
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	601a      	str	r2, [r3, #0]

	return gas_score;
 8004286:	4b0c      	ldr	r3, [pc, #48]	@ (80042b8 <bme68x_GetGasScore+0x128>)
 8004288:	edd3 7a00 	vldr	s15, [r3]
 800428c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004290:	edc7 7a01 	vstr	s15, [r7, #4]
 8004294:	793b      	ldrb	r3, [r7, #4]
 8004296:	b25b      	sxtb	r3, r3
}
 8004298:	4618      	mov	r0, r3
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80042a2:	bf00      	nop
 80042a4:	20000010 	.word	0x20000010
 80042a8:	2000000c 	.word	0x2000000c
 80042ac:	3fe80000 	.word	0x3fe80000
 80042b0:	20000004 	.word	0x20000004
 80042b4:	40590000 	.word	0x40590000
 80042b8:	200002d8 	.word	0x200002d8
 80042bc:	42960000 	.word	0x42960000
 80042c0:	42960000 	.word	0x42960000

080042c4 <bme68x_iaq>:

float bme68x_iaq()
{
 80042c4:	b590      	push	{r4, r7, lr}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0

	float air_quality_score = (100
			- (bme68x_GetHumidityScore(BME68x_DATA)
 80042ca:	4b1e      	ldr	r3, [pc, #120]	@ (8004344 <bme68x_iaq+0x80>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7ff fea2 	bl	8004018 <bme68x_GetHumidityScore>
 80042d4:	4603      	mov	r3, r0
 80042d6:	461c      	mov	r4, r3
					+ bme68x_GetGasScore(BME68x_DATA))) * 5;
 80042d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004344 <bme68x_iaq+0x80>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff ff57 	bl	8004190 <bme68x_GetGasScore>
 80042e2:	4603      	mov	r3, r0
 80042e4:	4423      	add	r3, r4
			- (bme68x_GetHumidityScore(BME68x_DATA)
 80042e6:	f1c3 0264 	rsb	r2, r3, #100	@ 0x64
					+ bme68x_GetGasScore(BME68x_DATA))) * 5;
 80042ea:	4613      	mov	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
	float air_quality_score = (100
 80042f0:	ee07 3a90 	vmov	s15, r3
 80042f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042f8:	edc7 7a01 	vstr	s15, [r7, #4]

	// If 5 measurements passed, recalculate the gas reference.
	if ((getgasreference_count++) % 5 == 0)
 80042fc:	4b12      	ldr	r3, [pc, #72]	@ (8004348 <bme68x_iaq+0x84>)
 80042fe:	f993 2000 	ldrsb.w	r2, [r3]
 8004302:	b2d3      	uxtb	r3, r2
 8004304:	3301      	adds	r3, #1
 8004306:	b2db      	uxtb	r3, r3
 8004308:	b259      	sxtb	r1, r3
 800430a:	4b0f      	ldr	r3, [pc, #60]	@ (8004348 <bme68x_iaq+0x84>)
 800430c:	7019      	strb	r1, [r3, #0]
 800430e:	4b0f      	ldr	r3, [pc, #60]	@ (800434c <bme68x_iaq+0x88>)
 8004310:	fb83 1302 	smull	r1, r3, r3, r2
 8004314:	1059      	asrs	r1, r3, #1
 8004316:	17d3      	asrs	r3, r2, #31
 8004318:	1ac9      	subs	r1, r1, r3
 800431a:	460b      	mov	r3, r1
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	440b      	add	r3, r1
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	b25b      	sxtb	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d104      	bne.n	8004332 <bme68x_iaq+0x6e>
		bme68x_GetGasReference(BME68x_DATA);
 8004328:	4b06      	ldr	r3, [pc, #24]	@ (8004344 <bme68x_iaq+0x80>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff fe3b 	bl	8003fa8 <bme68x_GetGasReference>

	return air_quality_score;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	ee07 3a90 	vmov	s15, r3

}
 8004338:	eeb0 0a67 	vmov.f32	s0, s15
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	bd90      	pop	{r4, r7, pc}
 8004342:	bf00      	nop
 8004344:	200002a8 	.word	0x200002a8
 8004348:	200002dc 	.word	0x200002dc
 800434c:	66666667 	.word	0x66666667

08004350 <cayenne_lpp_reset>:
#include <string.h>

#include "cayenne_lpp.h"

void cayenne_lpp_reset(cayenne_lpp_t *lpp)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
	memset(lpp->buffer, 0, CAYENNE_LPP_MAX_BUFFER_SIZE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	222a      	movs	r2, #42	@ 0x2a
 800435c:	2100      	movs	r1, #0
 800435e:	4618      	mov	r0, r3
 8004360:	f00a fe80 	bl	800f064 <memset>
	lpp->cursor = 0;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
}
 800436c:	bf00      	nop
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <cayenne_lpp_add_analog_output>:
	lpp->buffer[lpp->cursor++] = val;
}

void cayenne_lpp_add_analog_output(cayenne_lpp_t *lpp, uint8_t channel,
		float value)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	460b      	mov	r3, r1
 800437e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004382:	72fb      	strb	r3, [r7, #11]
	assert(
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800438a:	3304      	adds	r3, #4
 800438c:	2b29      	cmp	r3, #41	@ 0x29
 800438e:	d905      	bls.n	800439c <cayenne_lpp_add_analog_output+0x28>
 8004390:	4b24      	ldr	r3, [pc, #144]	@ (8004424 <cayenne_lpp_add_analog_output+0xb0>)
 8004392:	4a25      	ldr	r2, [pc, #148]	@ (8004428 <cayenne_lpp_add_analog_output+0xb4>)
 8004394:	2141      	movs	r1, #65	@ 0x41
 8004396:	4825      	ldr	r0, [pc, #148]	@ (800442c <cayenne_lpp_add_analog_output+0xb8>)
 8004398:	f00a fd72 	bl	800ee80 <__assert_func>
			(lpp->cursor + CAYENNE_LPP_ANALOG_OUTPUT_SIZE) < CAYENNE_LPP_MAX_BUFFER_SIZE);

	int16_t val = value * 100;
 800439c:	edd7 7a01 	vldr	s15, [r7, #4]
 80043a0:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8004430 <cayenne_lpp_add_analog_output+0xbc>
 80043a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043ac:	ee17 3a90 	vmov	r3, s15
 80043b0:	82fb      	strh	r3, [r7, #22]
	lpp->buffer[lpp->cursor++] = channel;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80043b8:	1c5a      	adds	r2, r3, #1
 80043ba:	b2d1      	uxtb	r1, r2
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	f882 102a 	strb.w	r1, [r2, #42]	@ 0x2a
 80043c2:	4619      	mov	r1, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	7afa      	ldrb	r2, [r7, #11]
 80043c8:	545a      	strb	r2, [r3, r1]
	lpp->buffer[lpp->cursor++] = CAYENNE_LPP_ANALOG_OUTPUT;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	b2d1      	uxtb	r1, r2
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	f882 102a 	strb.w	r1, [r2, #42]	@ 0x2a
 80043da:	461a      	mov	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2103      	movs	r1, #3
 80043e0:	5499      	strb	r1, [r3, r2]
	lpp->buffer[lpp->cursor++] = val >> 8;
 80043e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80043e6:	121b      	asrs	r3, r3, #8
 80043e8:	b219      	sxth	r1, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	b2d0      	uxtb	r0, r2
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	f882 002a 	strb.w	r0, [r2, #42]	@ 0x2a
 80043fa:	461a      	mov	r2, r3
 80043fc:	b2c9      	uxtb	r1, r1
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	5499      	strb	r1, [r3, r2]
	lpp->buffer[lpp->cursor++] = val;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8004408:	1c5a      	adds	r2, r3, #1
 800440a:	b2d1      	uxtb	r1, r2
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	f882 102a 	strb.w	r1, [r2, #42]	@ 0x2a
 8004412:	461a      	mov	r2, r3
 8004414:	8afb      	ldrh	r3, [r7, #22]
 8004416:	b2d9      	uxtb	r1, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	5499      	strb	r1, [r3, r2]
}
 800441c:	bf00      	nop
 800441e:	3718      	adds	r7, #24
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	08011674 	.word	0x08011674
 8004428:	08012d10 	.word	0x08012d10
 800442c:	080115bc 	.word	0x080115bc
 8004430:	42c80000 	.word	0x42c80000

08004434 <cayenne_lpp_add_temperature>:
	lpp->buffer[lpp->cursor++] = value;
}

void cayenne_lpp_add_temperature(cayenne_lpp_t *lpp, uint8_t channel,
		float celsius)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	460b      	mov	r3, r1
 800443e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004442:	72fb      	strb	r3, [r7, #11]
	assert(
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800444a:	3304      	adds	r3, #4
 800444c:	2b29      	cmp	r3, #41	@ 0x29
 800444e:	d905      	bls.n	800445c <cayenne_lpp_add_temperature+0x28>
 8004450:	4b24      	ldr	r3, [pc, #144]	@ (80044e4 <cayenne_lpp_add_temperature+0xb0>)
 8004452:	4a25      	ldr	r2, [pc, #148]	@ (80044e8 <cayenne_lpp_add_temperature+0xb4>)
 8004454:	2165      	movs	r1, #101	@ 0x65
 8004456:	4825      	ldr	r0, [pc, #148]	@ (80044ec <cayenne_lpp_add_temperature+0xb8>)
 8004458:	f00a fd12 	bl	800ee80 <__assert_func>
			(lpp->cursor + CAYENNE_LPP_TEMPERATURE_SIZE) < CAYENNE_LPP_MAX_BUFFER_SIZE);

	int16_t val = celsius * 10;
 800445c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004460:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004464:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004468:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800446c:	ee17 3a90 	vmov	r3, s15
 8004470:	82fb      	strh	r3, [r7, #22]
	lpp->buffer[lpp->cursor++] = channel;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	b2d1      	uxtb	r1, r2
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	f882 102a 	strb.w	r1, [r2, #42]	@ 0x2a
 8004482:	4619      	mov	r1, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	7afa      	ldrb	r2, [r7, #11]
 8004488:	545a      	strb	r2, [r3, r1]
	lpp->buffer[lpp->cursor++] = CAYENNE_LPP_TEMPERATURE;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8004490:	1c5a      	adds	r2, r3, #1
 8004492:	b2d1      	uxtb	r1, r2
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	f882 102a 	strb.w	r1, [r2, #42]	@ 0x2a
 800449a:	461a      	mov	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2167      	movs	r1, #103	@ 0x67
 80044a0:	5499      	strb	r1, [r3, r2]
	lpp->buffer[lpp->cursor++] = val >> 8;
 80044a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80044a6:	121b      	asrs	r3, r3, #8
 80044a8:	b219      	sxth	r1, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80044b0:	1c5a      	adds	r2, r3, #1
 80044b2:	b2d0      	uxtb	r0, r2
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	f882 002a 	strb.w	r0, [r2, #42]	@ 0x2a
 80044ba:	461a      	mov	r2, r3
 80044bc:	b2c9      	uxtb	r1, r1
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	5499      	strb	r1, [r3, r2]
	lpp->buffer[lpp->cursor++] = val;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80044c8:	1c5a      	adds	r2, r3, #1
 80044ca:	b2d1      	uxtb	r1, r2
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	f882 102a 	strb.w	r1, [r2, #42]	@ 0x2a
 80044d2:	461a      	mov	r2, r3
 80044d4:	8afb      	ldrh	r3, [r7, #22]
 80044d6:	b2d9      	uxtb	r1, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	5499      	strb	r1, [r3, r2]
}
 80044dc:	bf00      	nop
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	08011758 	.word	0x08011758
 80044e8:	08012d30 	.word	0x08012d30
 80044ec:	080115bc 	.word	0x080115bc

080044f0 <debug_init>:
/*  ************************************** */
/*    DO NOT CHANGE BELOW THIS LINE        */
/*  ************************************** */

void debug_init()
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
//    debug_led(0);

// configure USART1 (115200/8N1, tx-only)

// print banner
	debug_str("\r\n============== DEBUG STARTED ==============\r\n");
 80044f4:	4802      	ldr	r0, [pc, #8]	@ (8004500 <debug_init+0x10>)
 80044f6:	f000 f88d 	bl	8004614 <debug_str>
}
 80044fa:	bf00      	nop
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	0801192c 	.word	0x0801192c

08004504 <debug_led>:

void debug_led(int val)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, val);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	b2db      	uxtb	r3, r3
 8004510:	461a      	mov	r2, r3
 8004512:	2102      	movs	r1, #2
 8004514:	4803      	ldr	r0, [pc, #12]	@ (8004524 <debug_led+0x20>)
 8004516:	f006 ffd9 	bl	800b4cc <HAL_GPIO_WritePin>
}
 800451a:	bf00      	nop
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	48000400 	.word	0x48000400

08004528 <debug_char>:

void debug_char(char c)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	4603      	mov	r3, r0
 8004530:	71fb      	strb	r3, [r7, #7]
	char buffer[] = "";
 8004532:	2300      	movs	r3, #0
 8004534:	733b      	strb	r3, [r7, #12]
	buffer[0] = c;
 8004536:	79fb      	ldrb	r3, [r7, #7]
 8004538:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&myUART, buffer, sizeof(buffer), HAL_MAX_DELAY);
 800453a:	f107 010c 	add.w	r1, r7, #12
 800453e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004542:	2201      	movs	r2, #1
 8004544:	4803      	ldr	r0, [pc, #12]	@ (8004554 <debug_char+0x2c>)
 8004546:	f009 ffc9 	bl	800e4dc <HAL_UART_Transmit>
}
 800454a:	bf00      	nop
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	20000670 	.word	0x20000670

08004558 <debug_hex>:

void debug_hex(u1_t b)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	4603      	mov	r3, r0
 8004560:	71fb      	strb	r3, [r7, #7]
	debug_char("0123456789ABCDEF"[b >> 4]);
 8004562:	79fb      	ldrb	r3, [r7, #7]
 8004564:	091b      	lsrs	r3, r3, #4
 8004566:	b2db      	uxtb	r3, r3
 8004568:	461a      	mov	r2, r3
 800456a:	4b08      	ldr	r3, [pc, #32]	@ (800458c <debug_hex+0x34>)
 800456c:	5c9b      	ldrb	r3, [r3, r2]
 800456e:	4618      	mov	r0, r3
 8004570:	f7ff ffda 	bl	8004528 <debug_char>
	debug_char("0123456789ABCDEF"[b & 0xF]);
 8004574:	79fb      	ldrb	r3, [r7, #7]
 8004576:	f003 030f 	and.w	r3, r3, #15
 800457a:	4a04      	ldr	r2, [pc, #16]	@ (800458c <debug_hex+0x34>)
 800457c:	5cd3      	ldrb	r3, [r2, r3]
 800457e:	4618      	mov	r0, r3
 8004580:	f7ff ffd2 	bl	8004528 <debug_char>
}
 8004584:	bf00      	nop
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	0801195c 	.word	0x0801195c

08004590 <debug_uint>:
	debug_char('\r');
	debug_char('\n');
}

void debug_uint(u4_t v)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
	for (s1_t n = 24; n >= 0; n -= 8) {
 8004598:	2318      	movs	r3, #24
 800459a:	73fb      	strb	r3, [r7, #15]
 800459c:	e00c      	b.n	80045b8 <debug_uint+0x28>
		debug_hex(v >> n);
 800459e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	fa22 f303 	lsr.w	r3, r2, r3
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff ffd4 	bl	8004558 <debug_hex>
	for (s1_t n = 24; n >= 0; n -= 8) {
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
 80045b2:	3b08      	subs	r3, #8
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	73fb      	strb	r3, [r7, #15]
 80045b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	daee      	bge.n	800459e <debug_uint+0xe>
	}
}
 80045c0:	bf00      	nop
 80045c2:	bf00      	nop
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <debug_int>:

void debug_int(s4_t v)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b08a      	sub	sp, #40	@ 0x28
 80045ce:	af02      	add	r7, sp, #8
 80045d0:	6078      	str	r0, [r7, #4]
	char buf[10], *p = buf;
 80045d2:	f107 030c 	add.w	r3, r7, #12
 80045d6:	61fb      	str	r3, [r7, #28]
	int n = debug_fmt(buf, sizeof(buf), v, 10, 0, 0);
 80045d8:	f107 000c 	add.w	r0, r7, #12
 80045dc:	2300      	movs	r3, #0
 80045de:	9301      	str	r3, [sp, #4]
 80045e0:	2300      	movs	r3, #0
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	230a      	movs	r3, #10
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	210a      	movs	r1, #10
 80045ea:	f000 f88e 	bl	800470a <debug_fmt>
 80045ee:	61b8      	str	r0, [r7, #24]
	while (n--)
 80045f0:	e006      	b.n	8004600 <debug_int+0x36>
		debug_char(*p++);
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	1c5a      	adds	r2, r3, #1
 80045f6:	61fa      	str	r2, [r7, #28]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff ff94 	bl	8004528 <debug_char>
	while (n--)
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	1e5a      	subs	r2, r3, #1
 8004604:	61ba      	str	r2, [r7, #24]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f3      	bne.n	80045f2 <debug_int+0x28>
}
 800460a:	bf00      	nop
 800460c:	bf00      	nop
 800460e:	3720      	adds	r7, #32
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <debug_str>:

void debug_str(const char *str)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
	while (*str) {
 800461c:	e006      	b.n	800462c <debug_str+0x18>
		debug_char(*str++);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	607a      	str	r2, [r7, #4]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	4618      	mov	r0, r3
 8004628:	f7ff ff7e 	bl	8004528 <debug_char>
	while (*str) {
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1f4      	bne.n	800461e <debug_str+0xa>
	}
}
 8004634:	bf00      	nop
 8004636:	bf00      	nop
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <debug_float2str>:

void debug_float2str(double val, int n)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b09e      	sub	sp, #120	@ 0x78
 8004642:	af00      	add	r7, sp, #0
 8004644:	ed87 0b02 	vstr	d0, [r7, #8]
 8004648:	6078      	str	r0, [r7, #4]
	char buf[100], *p = buf;
 800464a:	f107 0310 	add.w	r3, r7, #16
 800464e:	677b      	str	r3, [r7, #116]	@ 0x74
	//int n = 7;	// number of digits
	gcvt(val, n, buf);
 8004650:	f107 0310 	add.w	r3, r7, #16
 8004654:	4619      	mov	r1, r3
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	ed97 0b02 	vldr	d0, [r7, #8]
 800465c:	f00a fd38 	bl	800f0d0 <gcvt>
	while (n--)
 8004660:	e006      	b.n	8004670 <debug_float2str+0x32>
		debug_char(*p++);
 8004662:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004664:	1c5a      	adds	r2, r3, #1
 8004666:	677a      	str	r2, [r7, #116]	@ 0x74
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	4618      	mov	r0, r3
 800466c:	f7ff ff5c 	bl	8004528 <debug_char>
	while (n--)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	1e5a      	subs	r2, r3, #1
 8004674:	607a      	str	r2, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1f3      	bne.n	8004662 <debug_float2str+0x24>
}
 800467a:	bf00      	nop
 800467c:	bf00      	nop
 800467e:	3778      	adds	r7, #120	@ 0x78
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <debug_valfloat>:

void debug_valfloat(const char *label, double val, int n)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	ed87 0b00 	vstr	d0, [r7]
 8004690:	60b9      	str	r1, [r7, #8]
	debug_str(label);
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f7ff ffbe 	bl	8004614 <debug_str>
	debug_float2str(val, n);
 8004698:	68b8      	ldr	r0, [r7, #8]
 800469a:	ed97 0b00 	vldr	d0, [r7]
 800469e:	f7ff ffce 	bl	800463e <debug_float2str>
	debug_char('\r');
 80046a2:	200d      	movs	r0, #13
 80046a4:	f7ff ff40 	bl	8004528 <debug_char>
	debug_char('\n');
 80046a8:	200a      	movs	r0, #10
 80046aa:	f7ff ff3d 	bl	8004528 <debug_char>
}
 80046ae:	bf00      	nop
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <debug_val>:

void debug_val(const char *label, u4_t val)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b082      	sub	sp, #8
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
 80046be:	6039      	str	r1, [r7, #0]
	debug_str(label);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7ff ffa7 	bl	8004614 <debug_str>
	debug_uint(val);
 80046c6:	6838      	ldr	r0, [r7, #0]
 80046c8:	f7ff ff62 	bl	8004590 <debug_uint>
	debug_char('\r');
 80046cc:	200d      	movs	r0, #13
 80046ce:	f7ff ff2b 	bl	8004528 <debug_char>
	debug_char('\n');
 80046d2:	200a      	movs	r0, #10
 80046d4:	f7ff ff28 	bl	8004528 <debug_char>
}
 80046d8:	bf00      	nop
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <debug_valdec>:

void debug_valdec(const char *label, s4_t val)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
	debug_str(label);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7ff ff92 	bl	8004614 <debug_str>
	debug_int(val);
 80046f0:	6838      	ldr	r0, [r7, #0]
 80046f2:	f7ff ff6a 	bl	80045ca <debug_int>
	debug_char('\r');
 80046f6:	200d      	movs	r0, #13
 80046f8:	f7ff ff16 	bl	8004528 <debug_char>
	debug_char('\n');
 80046fc:	200a      	movs	r0, #10
 80046fe:	f7ff ff13 	bl	8004528 <debug_char>
}
 8004702:	bf00      	nop
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <debug_fmt>:

int debug_fmt(char *buf, int max, s4_t val, int base, int width, char pad)
{
 800470a:	b480      	push	{r7}
 800470c:	b093      	sub	sp, #76	@ 0x4c
 800470e:	af00      	add	r7, sp, #0
 8004710:	60f8      	str	r0, [r7, #12]
 8004712:	60b9      	str	r1, [r7, #8]
 8004714:	607a      	str	r2, [r7, #4]
 8004716:	603b      	str	r3, [r7, #0]
	char num[33], *p = num, *b = buf;
 8004718:	f107 0314 	add.w	r3, r7, #20
 800471c:	647b      	str	r3, [r7, #68]	@ 0x44
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	643b      	str	r3, [r7, #64]	@ 0x40
	u4_t m, v;
	// special handling of negative decimals
	v = (base == 10 && val < 0) ? -val : val;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b0a      	cmp	r3, #10
 8004726:	d105      	bne.n	8004734 <debug_fmt+0x2a>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	da02      	bge.n	8004734 <debug_fmt+0x2a>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	425b      	negs	r3, r3
 8004732:	e000      	b.n	8004736 <debug_fmt+0x2c>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	63fb      	str	r3, [r7, #60]	@ 0x3c
	// generate digits backwards
	do {
		*p++ = ((m = v % base) <= 9) ? m + '0' : m + 'A' - 10;
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800473c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004740:	fb01 f202 	mul.w	r2, r1, r2
 8004744:	1a9b      	subs	r3, r3, r2
 8004746:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800474a:	2b09      	cmp	r3, #9
 800474c:	d804      	bhi.n	8004758 <debug_fmt+0x4e>
 800474e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004750:	b2db      	uxtb	r3, r3
 8004752:	3330      	adds	r3, #48	@ 0x30
 8004754:	b2da      	uxtb	r2, r3
 8004756:	e003      	b.n	8004760 <debug_fmt+0x56>
 8004758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800475a:	b2db      	uxtb	r3, r3
 800475c:	3337      	adds	r3, #55	@ 0x37
 800475e:	b2da      	uxtb	r2, r3
 8004760:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004762:	1c59      	adds	r1, r3, #1
 8004764:	6479      	str	r1, [r7, #68]	@ 0x44
 8004766:	701a      	strb	r2, [r3, #0]
	} while (v /= base);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800476c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004770:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1df      	bne.n	8004738 <debug_fmt+0x2e>
	// prefix negative decimals with '-'
	if (base == 10 && val < 0) {
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	2b0a      	cmp	r3, #10
 800477c:	d10e      	bne.n	800479c <debug_fmt+0x92>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	da0b      	bge.n	800479c <debug_fmt+0x92>
		*p++ = '-';
 8004784:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004786:	1c5a      	adds	r2, r3, #1
 8004788:	647a      	str	r2, [r7, #68]	@ 0x44
 800478a:	222d      	movs	r2, #45	@ 0x2d
 800478c:	701a      	strb	r2, [r3, #0]
	}
	// add leading zeroes or spaces
	while (b - buf < max - 1 && b - buf < width - (p - num)) {
 800478e:	e005      	b.n	800479c <debug_fmt+0x92>
		*b++ = pad;
 8004790:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004792:	1c5a      	adds	r2, r3, #1
 8004794:	643a      	str	r2, [r7, #64]	@ 0x40
 8004796:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800479a:	701a      	strb	r2, [r3, #0]
	while (b - buf < max - 1 && b - buf < width - (p - num)) {
 800479c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	1ad2      	subs	r2, r2, r3
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	3b01      	subs	r3, #1
 80047a6:	429a      	cmp	r2, r3
 80047a8:	da0a      	bge.n	80047c0 <debug_fmt+0xb6>
 80047aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	1ad2      	subs	r2, r2, r3
 80047b0:	f107 0314 	add.w	r3, r7, #20
 80047b4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80047b6:	1acb      	subs	r3, r1, r3
 80047b8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80047ba:	1acb      	subs	r3, r1, r3
 80047bc:	429a      	cmp	r2, r3
 80047be:	dbe7      	blt.n	8004790 <debug_fmt+0x86>
	}
	// copy digits and sign forwards
	do
		*b++ = *--p;
 80047c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047c2:	3b01      	subs	r3, #1
 80047c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80047c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	643a      	str	r2, [r7, #64]	@ 0x40
 80047cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047ce:	7812      	ldrb	r2, [r2, #0]
 80047d0:	701a      	strb	r2, [r3, #0]
	while (b - buf < max && p > num);
 80047d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	429a      	cmp	r2, r3
 80047dc:	dd04      	ble.n	80047e8 <debug_fmt+0xde>
 80047de:	f107 0314 	add.w	r3, r7, #20
 80047e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d8eb      	bhi.n	80047c0 <debug_fmt+0xb6>
	// return number of characters written
	return b - buf;
 80047e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	1ad3      	subs	r3, r2, r3
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	374c      	adds	r7, #76	@ 0x4c
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
	...

080047fc <debug_event>:

void debug_event(int ev)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
			[EV_TXCOMPLETE] = "TXCOMPLETE", [EV_LOST_TSYNC] = "LOST_TSYNC",
			[EV_RESET] = "RESET", [EV_RXCOMPLETE] = "RXCOMPLETE", [EV_LINK_DEAD
					] = "LINK_DEAD", [EV_LINK_ALIVE] = "LINK_ALIVE",
			[EV_SCAN_FOUND] = "SCAN_FOUND", [EV_TXSTART] = "EV_TXSTART", };
	debug_str(
			(ev < sizeof(evnames) / sizeof(evnames[0])) ?
 8004804:	687b      	ldr	r3, [r7, #4]
	debug_str(
 8004806:	2b11      	cmp	r3, #17
 8004808:	d804      	bhi.n	8004814 <debug_event+0x18>
 800480a:	4a09      	ldr	r2, [pc, #36]	@ (8004830 <debug_event+0x34>)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004812:	e000      	b.n	8004816 <debug_event+0x1a>
 8004814:	4b07      	ldr	r3, [pc, #28]	@ (8004834 <debug_event+0x38>)
 8004816:	4618      	mov	r0, r3
 8004818:	f7ff fefc 	bl	8004614 <debug_str>
					evnames[ev] : "EV_UNKNOWN");
	debug_char('\r');
 800481c:	200d      	movs	r0, #13
 800481e:	f7ff fe83 	bl	8004528 <debug_char>
	debug_char('\n');
 8004822:	200a      	movs	r0, #10
 8004824:	f7ff fe80 	bl	8004528 <debug_char>
}
 8004828:	bf00      	nop
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	20000014 	.word	0x20000014
 8004834:	08011970 	.word	0x08011970

08004838 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b088      	sub	sp, #32
 800483c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800483e:	f107 030c 	add.w	r3, r7, #12
 8004842:	2200      	movs	r2, #0
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	605a      	str	r2, [r3, #4]
 8004848:	609a      	str	r2, [r3, #8]
 800484a:	60da      	str	r2, [r3, #12]
 800484c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800484e:	4b3b      	ldr	r3, [pc, #236]	@ (800493c <MX_GPIO_Init+0x104>)
 8004850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004852:	4a3a      	ldr	r2, [pc, #232]	@ (800493c <MX_GPIO_Init+0x104>)
 8004854:	f043 0304 	orr.w	r3, r3, #4
 8004858:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800485a:	4b38      	ldr	r3, [pc, #224]	@ (800493c <MX_GPIO_Init+0x104>)
 800485c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800485e:	f003 0304 	and.w	r3, r3, #4
 8004862:	60bb      	str	r3, [r7, #8]
 8004864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004866:	4b35      	ldr	r3, [pc, #212]	@ (800493c <MX_GPIO_Init+0x104>)
 8004868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800486a:	4a34      	ldr	r2, [pc, #208]	@ (800493c <MX_GPIO_Init+0x104>)
 800486c:	f043 0301 	orr.w	r3, r3, #1
 8004870:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004872:	4b32      	ldr	r3, [pc, #200]	@ (800493c <MX_GPIO_Init+0x104>)
 8004874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	607b      	str	r3, [r7, #4]
 800487c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800487e:	4b2f      	ldr	r3, [pc, #188]	@ (800493c <MX_GPIO_Init+0x104>)
 8004880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004882:	4a2e      	ldr	r2, [pc, #184]	@ (800493c <MX_GPIO_Init+0x104>)
 8004884:	f043 0302 	orr.w	r3, r3, #2
 8004888:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800488a:	4b2c      	ldr	r3, [pc, #176]	@ (800493c <MX_GPIO_Init+0x104>)
 800488c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	603b      	str	r3, [r7, #0]
 8004894:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzer_Pin|Alim_temp_Pin|RST_Pin|NSS_Pin, GPIO_PIN_RESET);
 8004896:	2200      	movs	r2, #0
 8004898:	f648 01c0 	movw	r1, #35008	@ 0x88c0
 800489c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80048a0:	f006 fe14 	bl	800b4cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80048a4:	2200      	movs	r2, #0
 80048a6:	2102      	movs	r1, #2
 80048a8:	4825      	ldr	r0, [pc, #148]	@ (8004940 <MX_GPIO_Init+0x108>)
 80048aa:	f006 fe0f 	bl	800b4cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : buzzer_Pin */
  GPIO_InitStruct.Pin = buzzer_Pin;
 80048ae:	2340      	movs	r3, #64	@ 0x40
 80048b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048b2:	2301      	movs	r3, #1
 80048b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80048b6:	2302      	movs	r3, #2
 80048b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048ba:	2300      	movs	r3, #0
 80048bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 80048be:	f107 030c 	add.w	r3, r7, #12
 80048c2:	4619      	mov	r1, r3
 80048c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80048c8:	f006 fc96 	bl	800b1f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Alim_temp_Pin RST_Pin NSS_Pin */
  GPIO_InitStruct.Pin = Alim_temp_Pin|RST_Pin|NSS_Pin;
 80048cc:	f648 0380 	movw	r3, #34944	@ 0x8880
 80048d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048d2:	2301      	movs	r3, #1
 80048d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d6:	2300      	movs	r3, #0
 80048d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048da:	2300      	movs	r3, #0
 80048dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048de:	f107 030c 	add.w	r3, r7, #12
 80048e2:	4619      	mov	r1, r3
 80048e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80048e8:	f006 fc86 	bl	800b1f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80048ec:	2302      	movs	r3, #2
 80048ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048f0:	2301      	movs	r3, #1
 80048f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f4:	2300      	movs	r3, #0
 80048f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048f8:	2300      	movs	r3, #0
 80048fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80048fc:	f107 030c 	add.w	r3, r7, #12
 8004900:	4619      	mov	r1, r3
 8004902:	480f      	ldr	r0, [pc, #60]	@ (8004940 <MX_GPIO_Init+0x108>)
 8004904:	f006 fc78 	bl	800b1f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO0_Pin DIO1_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin|DIO1_Pin;
 8004908:	23c0      	movs	r3, #192	@ 0xc0
 800490a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800490c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004910:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004912:	2300      	movs	r3, #0
 8004914:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004916:	f107 030c 	add.w	r3, r7, #12
 800491a:	4619      	mov	r1, r3
 800491c:	4808      	ldr	r0, [pc, #32]	@ (8004940 <MX_GPIO_Init+0x108>)
 800491e:	f006 fc6b 	bl	800b1f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004922:	2200      	movs	r2, #0
 8004924:	2100      	movs	r1, #0
 8004926:	2017      	movs	r0, #23
 8004928:	f006 fc2f 	bl	800b18a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800492c:	2017      	movs	r0, #23
 800492e:	f006 fc48 	bl	800b1c2 <HAL_NVIC_EnableIRQ>

}
 8004932:	bf00      	nop
 8004934:	3720      	adds	r7, #32
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	40021000 	.word	0x40021000
 8004940:	48000400 	.word	0x48000400

08004944 <hal_io_init>:

// -----------------------------------------------------------------------------
// I/O

static void hal_io_init()
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0
	//already done by cubemx
}
 8004948:	bf00      	nop
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <hal_pin_rxtx>:

// val ==1  => tx 1, rx 0 ; val == 0 => tx 0, rx 1
void hal_pin_rxtx(u1_t val)
{
 8004952:	b480      	push	{r7}
 8004954:	b083      	sub	sp, #12
 8004956:	af00      	add	r7, sp, #0
 8004958:	4603      	mov	r3, r0
 800495a:	71fb      	strb	r3, [r7, #7]
  #ifdef TX_GPIO_Port
    HAL_GPIO_WritePin(RX_GPIO_Port,RX_Pin,~val);
    HAL_GPIO_WritePin(TX_GPIO_Port,TX_Pin,val);
  #endif
#endif
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <hal_pin_nss>:

// set radio NSS pin to given value
void hal_pin_nss(u1_t val)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	4603      	mov	r3, r0
 8004970:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, val);
 8004972:	79fb      	ldrb	r3, [r7, #7]
 8004974:	461a      	mov	r2, r3
 8004976:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800497a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800497e:	f006 fda5 	bl	800b4cc <HAL_GPIO_WritePin>
}
 8004982:	bf00      	nop
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <hal_pin_rst>:

// set radio RST pin to given value (or keep floating!)
void hal_pin_rst(u1_t val)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b08c      	sub	sp, #48	@ 0x30
 800498e:	af00      	add	r7, sp, #0
 8004990:	4603      	mov	r3, r0
 8004992:	71fb      	strb	r3, [r7, #7]
	if (val == 0 || val == 1) { // drive pin
 8004994:	79fb      	ldrb	r3, [r7, #7]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <hal_pin_rst+0x16>
 800499a:	79fb      	ldrb	r3, [r7, #7]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d116      	bne.n	80049ce <hal_pin_rst+0x44>
		GPIO_InitTypeDef GPIO_InitStruct;
		GPIO_InitStruct.Pin = RST_Pin;
 80049a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80049a4:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049a6:	2301      	movs	r3, #1
 80049a8:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049aa:	2300      	movs	r3, #0
 80049ac:	62bb      	str	r3, [r7, #40]	@ 0x28
		HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80049ae:	f107 031c 	add.w	r3, r7, #28
 80049b2:	4619      	mov	r1, r3
 80049b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80049b8:	f006 fc1e 	bl	800b1f8 <HAL_GPIO_Init>

		HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, val);
 80049bc:	79fb      	ldrb	r3, [r7, #7]
 80049be:	461a      	mov	r2, r3
 80049c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80049c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80049c8:	f006 fd80 	bl	800b4cc <HAL_GPIO_WritePin>
	if (val == 0 || val == 1) { // drive pin
 80049cc:	e00e      	b.n	80049ec <hal_pin_rst+0x62>

	} else { // keep pin floating
		GPIO_InitTypeDef GPIO_InitStruct;
		GPIO_InitStruct.Pin = RST_Pin;
 80049ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80049d2:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049d4:	2300      	movs	r3, #0
 80049d6:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049d8:	2300      	movs	r3, #0
 80049da:	613b      	str	r3, [r7, #16]
		HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80049dc:	f107 0308 	add.w	r3, r7, #8
 80049e0:	4619      	mov	r1, r3
 80049e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80049e6:	f006 fc07 	bl	800b1f8 <HAL_GPIO_Init>
	}
}
 80049ea:	bf00      	nop
 80049ec:	bf00      	nop
 80049ee:	3730      	adds	r7, #48	@ 0x30
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <HAL_GPIO_EXTI_Callback>:

extern void radio_irq_handler(u1_t dio);

// generic EXTI IRQ handler for all channels
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin_int)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	4603      	mov	r3, r0
 80049fc:	80fb      	strh	r3, [r7, #6]
	// DIO 0
	if (GPIO_Pin_int == DIO0_Pin) {
 80049fe:	88fb      	ldrh	r3, [r7, #6]
 8004a00:	2b40      	cmp	r3, #64	@ 0x40
 8004a02:	d102      	bne.n	8004a0a <HAL_GPIO_EXTI_Callback+0x16>
		// invoke radio handler (on IRQ!)
		radio_irq_handler(0);
 8004a04:	2000      	movs	r0, #0
 8004a06:	f004 fabf 	bl	8008f88 <radio_irq_handler>
	}
	// DIO 1
	if (GPIO_Pin_int == DIO1_Pin) {
 8004a0a:	88fb      	ldrh	r3, [r7, #6]
 8004a0c:	2b80      	cmp	r3, #128	@ 0x80
 8004a0e:	d102      	bne.n	8004a16 <HAL_GPIO_EXTI_Callback+0x22>
		// invoke radio handler (on IRQ!)
		radio_irq_handler(1);
 8004a10:	2001      	movs	r0, #1
 8004a12:	f004 fab9 	bl	8008f88 <radio_irq_handler>
	// DIO 2
//	if(GPIO_Pin_int == DIO2_Pin) {
	//    // invoke radio handler (on IRQ!)
//	    radio_irq_handler(2);
//	}
}
 8004a16:	bf00      	nop
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <hal_spi_init>:

// -----------------------------------------------------------------------------
// SPI
void hal_spi_init()
{
 8004a1e:	b480      	push	{r7}
 8004a20:	af00      	add	r7, sp, #0
	// already done by cube mx
}
 8004a22:	bf00      	nop
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <hal_spi>:

// perform SPI transaction with radio
u1_t hal_spi(u1_t out)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af02      	add	r7, sp, #8
 8004a32:	4603      	mov	r3, r0
 8004a34:	71fb      	strb	r3, [r7, #7]
	char outbuffer[] = "";
 8004a36:	2300      	movs	r3, #0
 8004a38:	733b      	strb	r3, [r7, #12]
	char inbuffer[] = "";
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	723b      	strb	r3, [r7, #8]
	outbuffer[0] = out;
 8004a3e:	79fb      	ldrb	r3, [r7, #7]
 8004a40:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&mySPI, outbuffer, inbuffer, sizeof(outbuffer),
 8004a42:	f107 0208 	add.w	r2, r7, #8
 8004a46:	f107 010c 	add.w	r1, r7, #12
 8004a4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	2301      	movs	r3, #1
 8004a52:	4804      	ldr	r0, [pc, #16]	@ (8004a64 <hal_spi+0x38>)
 8004a54:	f008 fea1 	bl	800d79a <HAL_SPI_TransmitReceive>
	HAL_MAX_DELAY);
	return inbuffer[0];
 8004a58:	7a3b      	ldrb	r3, [r7, #8]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	20000570 	.word	0x20000570

08004a68 <hal_time_init>:

// -----------------------------------------------------------------------------
// TIME
static void hal_time_init()
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
	// already done by cubemx
}
 8004a6c:	bf00      	nop
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
	...

08004a78 <hal_ticks>:

u4_t hal_ticks()
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
	hal_disableIRQs();
 8004a7e:	f000 f8a5 	bl	8004bcc <hal_disableIRQs>
	u4_t t = HAL.ticks;
 8004a82:	4b13      	ldr	r3, [pc, #76]	@ (8004ad0 <hal_ticks+0x58>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	607b      	str	r3, [r7, #4]
	u2_t cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 8004a88:	4b12      	ldr	r3, [pc, #72]	@ (8004ad4 <hal_ticks+0x5c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8e:	807b      	strh	r3, [r7, #2]
	if (__HAL_TIM_GET_FLAG(&myTIMER, TIM_FLAG_CC1) != RESET) {
 8004a90:	4b10      	ldr	r3, [pc, #64]	@ (8004ad4 <hal_ticks+0x5c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d10d      	bne.n	8004aba <hal_ticks+0x42>
		if (__HAL_TIM_GET_IT_SOURCE(&myTIMER, TIM_IT_CC1) != RESET) {
 8004a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ad4 <hal_ticks+0x5c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d106      	bne.n	8004aba <hal_ticks+0x42>
			cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 8004aac:	4b09      	ldr	r3, [pc, #36]	@ (8004ad4 <hal_ticks+0x5c>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab2:	807b      	strh	r3, [r7, #2]
			t++;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	607b      	str	r3, [r7, #4]
		}
	}
	hal_enableIRQs();
 8004aba:	f000 f897 	bl	8004bec <hal_enableIRQs>
	return (t << 16) | cnt;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	041a      	lsls	r2, r3, #16
 8004ac2:	887b      	ldrh	r3, [r7, #2]
 8004ac4:	4313      	orrs	r3, r2
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	200002e0 	.word	0x200002e0
 8004ad4:	20000624 	.word	0x20000624

08004ad8 <hal_ticksplusplus>:

void hal_ticksplusplus(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
	HAL.ticks++;
 8004adc:	4b04      	ldr	r3, [pc, #16]	@ (8004af0 <hal_ticksplusplus+0x18>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	4a03      	ldr	r2, [pc, #12]	@ (8004af0 <hal_ticksplusplus+0x18>)
 8004ae4:	6053      	str	r3, [r2, #4]
}
 8004ae6:	bf00      	nop
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	200002e0 	.word	0x200002e0

08004af4 <deltaticks>:

// return modified delta ticks from now to specified ticktime (0 for past, FFFF for far future)
static u2_t deltaticks(u4_t time)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
	u4_t t = hal_ticks();
 8004afc:	f7ff ffbc 	bl	8004a78 <hal_ticks>
 8004b00:	60f8      	str	r0, [r7, #12]
	s4_t d = time - t;
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	60bb      	str	r3, [r7, #8]
	if (d <= 0)
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	dc01      	bgt.n	8004b14 <deltaticks+0x20>
		return 0;    // in the past
 8004b10:	2300      	movs	r3, #0
 8004b12:	e008      	b.n	8004b26 <deltaticks+0x32>
	if ((d >> 16) != 0)
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	141b      	asrs	r3, r3, #16
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d002      	beq.n	8004b22 <deltaticks+0x2e>
		return 0xFFFF; // far ahead
 8004b1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004b20:	e001      	b.n	8004b26 <deltaticks+0x32>
	return (u2_t) d;
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	b29b      	uxth	r3, r3
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <hal_waitUntil>:

void hal_waitUntil(u4_t time)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b082      	sub	sp, #8
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
	while (deltaticks(time) != 0)
 8004b36:	bf00      	nop
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f7ff ffdb 	bl	8004af4 <deltaticks>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1f9      	bne.n	8004b38 <hal_waitUntil+0xa>
		; // busy wait until timestamp is reached
}
 8004b44:	bf00      	nop
 8004b46:	bf00      	nop
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
	...

08004b50 <hal_checkTimer>:

// check and rewind for target time
u1_t hal_checkTimer(u4_t time)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
	u2_t dt;
	myTIMER.Instance->SR &= ~TIM_SR_CC1IF; // clear any pending interrupts
 8004b58:	4b1b      	ldr	r3, [pc, #108]	@ (8004bc8 <hal_checkTimer+0x78>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	691a      	ldr	r2, [r3, #16]
 8004b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8004bc8 <hal_checkTimer+0x78>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0202 	bic.w	r2, r2, #2
 8004b66:	611a      	str	r2, [r3, #16]
	if ((dt = deltaticks(time)) < 5) { // event is now (a few ticks ahead)
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f7ff ffc3 	bl	8004af4 <deltaticks>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	81fb      	strh	r3, [r7, #14]
 8004b72:	89fb      	ldrh	r3, [r7, #14]
 8004b74:	2b04      	cmp	r3, #4
 8004b76:	d809      	bhi.n	8004b8c <hal_checkTimer+0x3c>
		myTIMER.Instance->DIER &= ~TIM_DIER_CC1IE; // disable IE
 8004b78:	4b13      	ldr	r3, [pc, #76]	@ (8004bc8 <hal_checkTimer+0x78>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	4b12      	ldr	r3, [pc, #72]	@ (8004bc8 <hal_checkTimer+0x78>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 0202 	bic.w	r2, r2, #2
 8004b86:	60da      	str	r2, [r3, #12]
		return 1;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e018      	b.n	8004bbe <hal_checkTimer+0x6e>
	} else { // rewind timer (fully or to exact time))
		myTIMER.Instance->CCR1 = myTIMER.Instance->CNT + dt;   // set comparator
 8004b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8004bc8 <hal_checkTimer+0x78>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004b92:	89fa      	ldrh	r2, [r7, #14]
 8004b94:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc8 <hal_checkTimer+0x78>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	440a      	add	r2, r1
 8004b9a:	635a      	str	r2, [r3, #52]	@ 0x34
		myTIMER.Instance->DIER |= TIM_DIER_CC1IE;  // enable IE
 8004b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004bc8 <hal_checkTimer+0x78>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68da      	ldr	r2, [r3, #12]
 8004ba2:	4b09      	ldr	r3, [pc, #36]	@ (8004bc8 <hal_checkTimer+0x78>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0202 	orr.w	r2, r2, #2
 8004baa:	60da      	str	r2, [r3, #12]
		myTIMER.Instance->CCER |= TIM_CCER_CC1E; // enable capture/compare uint 2
 8004bac:	4b06      	ldr	r3, [pc, #24]	@ (8004bc8 <hal_checkTimer+0x78>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6a1a      	ldr	r2, [r3, #32]
 8004bb2:	4b05      	ldr	r3, [pc, #20]	@ (8004bc8 <hal_checkTimer+0x78>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f042 0201 	orr.w	r2, r2, #1
 8004bba:	621a      	str	r2, [r3, #32]
		return 0;
 8004bbc:	2300      	movs	r3, #0
	}
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000624 	.word	0x20000624

08004bcc <hal_disableIRQs>:

// -----------------------------------------------------------------------------
// IRQ
void hal_disableIRQs()
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004bd0:	b672      	cpsid	i
}
 8004bd2:	bf00      	nop
	__disable_irq();
	//__set_BASEPRI(1 << 4);
	HAL.irqlevel++;
 8004bd4:	4b04      	ldr	r3, [pc, #16]	@ (8004be8 <hal_disableIRQs+0x1c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	4a03      	ldr	r2, [pc, #12]	@ (8004be8 <hal_disableIRQs+0x1c>)
 8004bdc:	6013      	str	r3, [r2, #0]
}
 8004bde:	bf00      	nop
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	200002e0 	.word	0x200002e0

08004bec <hal_enableIRQs>:

void hal_enableIRQs()
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
	if (--HAL.irqlevel == 0) {
 8004bf0:	4b07      	ldr	r3, [pc, #28]	@ (8004c10 <hal_enableIRQs+0x24>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	4a06      	ldr	r2, [pc, #24]	@ (8004c10 <hal_enableIRQs+0x24>)
 8004bf8:	6013      	str	r3, [r2, #0]
 8004bfa:	4b05      	ldr	r3, [pc, #20]	@ (8004c10 <hal_enableIRQs+0x24>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <hal_enableIRQs+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 8004c02:	b662      	cpsie	i
}
 8004c04:	bf00      	nop
		__enable_irq();
		//__set_BASEPRI(0);
	}
}
 8004c06:	bf00      	nop
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	200002e0 	.word	0x200002e0

08004c14 <hal_sleep>:

void hal_sleep()
{
 8004c14:	b480      	push	{r7}
 8004c16:	af00      	add	r7, sp, #0
	// low power sleep mode
#ifndef CFG_no_low_power_sleep_mode
	// PWR->CR |= PWR_CR_LPSDSR;
#endif
	// suspend execution until IRQ, regardless of the CPSR I-bit
	__WFI();
 8004c18:	bf30      	wfi
}
 8004c1a:	bf00      	nop
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <hal_init>:

// -----------------------------------------------------------------------------

void hal_init()
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
	memset(&HAL, 0x00, sizeof(HAL));
 8004c28:	2208      	movs	r2, #8
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	4807      	ldr	r0, [pc, #28]	@ (8004c4c <hal_init+0x28>)
 8004c2e:	f00a fa19 	bl	800f064 <memset>
	hal_disableIRQs();
 8004c32:	f7ff ffcb 	bl	8004bcc <hal_disableIRQs>
	// configure radio I/O and interrupt handler
	hal_io_init();
 8004c36:	f7ff fe85 	bl	8004944 <hal_io_init>
	// configure radio SPI
	hal_spi_init();
 8004c3a:	f7ff fef0 	bl	8004a1e <hal_spi_init>
	// configure timer and interrupt handler
	hal_time_init();
 8004c3e:	f7ff ff13 	bl	8004a68 <hal_time_init>
	hal_enableIRQs();
 8004c42:	f7ff ffd3 	bl	8004bec <hal_enableIRQs>
}
 8004c46:	bf00      	nop
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	200002e0 	.word	0x200002e0

08004c50 <hal_failed>:

void hal_failed()
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	af00      	add	r7, sp, #0
	// HALT...
	hal_disableIRQs();
 8004c54:	f7ff ffba 	bl	8004bcc <hal_disableIRQs>
	hal_sleep();
 8004c58:	f7ff ffdc 	bl	8004c14 <hal_sleep>
	while (1)
 8004c5c:	bf00      	nop
 8004c5e:	e7fd      	b.n	8004c5c <hal_failed+0xc>

08004c60 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004c64:	4b1b      	ldr	r3, [pc, #108]	@ (8004cd4 <MX_I2C1_Init+0x74>)
 8004c66:	4a1c      	ldr	r2, [pc, #112]	@ (8004cd8 <MX_I2C1_Init+0x78>)
 8004c68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8004c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8004cd4 <MX_I2C1_Init+0x74>)
 8004c6c:	4a1b      	ldr	r2, [pc, #108]	@ (8004cdc <MX_I2C1_Init+0x7c>)
 8004c6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004c70:	4b18      	ldr	r3, [pc, #96]	@ (8004cd4 <MX_I2C1_Init+0x74>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004c76:	4b17      	ldr	r3, [pc, #92]	@ (8004cd4 <MX_I2C1_Init+0x74>)
 8004c78:	2201      	movs	r2, #1
 8004c7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004c7c:	4b15      	ldr	r3, [pc, #84]	@ (8004cd4 <MX_I2C1_Init+0x74>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004c82:	4b14      	ldr	r3, [pc, #80]	@ (8004cd4 <MX_I2C1_Init+0x74>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004c88:	4b12      	ldr	r3, [pc, #72]	@ (8004cd4 <MX_I2C1_Init+0x74>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004c8e:	4b11      	ldr	r3, [pc, #68]	@ (8004cd4 <MX_I2C1_Init+0x74>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004c94:	4b0f      	ldr	r3, [pc, #60]	@ (8004cd4 <MX_I2C1_Init+0x74>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004c9a:	480e      	ldr	r0, [pc, #56]	@ (8004cd4 <MX_I2C1_Init+0x74>)
 8004c9c:	f006 fc46 	bl	800b52c <HAL_I2C_Init>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004ca6:	f003 fc07 	bl	80084b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004caa:	2100      	movs	r1, #0
 8004cac:	4809      	ldr	r0, [pc, #36]	@ (8004cd4 <MX_I2C1_Init+0x74>)
 8004cae:	f007 fab5 	bl	800c21c <HAL_I2CEx_ConfigAnalogFilter>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d001      	beq.n	8004cbc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004cb8:	f003 fbfe 	bl	80084b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	4805      	ldr	r0, [pc, #20]	@ (8004cd4 <MX_I2C1_Init+0x74>)
 8004cc0:	f007 faf7 	bl	800c2b2 <HAL_I2CEx_ConfigDigitalFilter>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004cca:	f003 fbf5 	bl	80084b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004cce:	bf00      	nop
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	200002e8 	.word	0x200002e8
 8004cd8:	40005400 	.word	0x40005400
 8004cdc:	10d19ce4 	.word	0x10d19ce4

08004ce0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b09e      	sub	sp, #120	@ 0x78
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ce8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004cec:	2200      	movs	r2, #0
 8004cee:	601a      	str	r2, [r3, #0]
 8004cf0:	605a      	str	r2, [r3, #4]
 8004cf2:	609a      	str	r2, [r3, #8]
 8004cf4:	60da      	str	r2, [r3, #12]
 8004cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004cf8:	f107 0310 	add.w	r3, r7, #16
 8004cfc:	2254      	movs	r2, #84	@ 0x54
 8004cfe:	2100      	movs	r1, #0
 8004d00:	4618      	mov	r0, r3
 8004d02:	f00a f9af 	bl	800f064 <memset>
  if(i2cHandle->Instance==I2C1)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a1f      	ldr	r2, [pc, #124]	@ (8004d88 <HAL_I2C_MspInit+0xa8>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d137      	bne.n	8004d80 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004d10:	2340      	movs	r3, #64	@ 0x40
 8004d12:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004d14:	2300      	movs	r3, #0
 8004d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d18:	f107 0310 	add.w	r3, r7, #16
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f008 f9b1 	bl	800d084 <HAL_RCCEx_PeriphCLKConfig>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d001      	beq.n	8004d2c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004d28:	f003 fbc6 	bl	80084b8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d2c:	4b17      	ldr	r3, [pc, #92]	@ (8004d8c <HAL_I2C_MspInit+0xac>)
 8004d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d30:	4a16      	ldr	r2, [pc, #88]	@ (8004d8c <HAL_I2C_MspInit+0xac>)
 8004d32:	f043 0301 	orr.w	r3, r3, #1
 8004d36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d38:	4b14      	ldr	r3, [pc, #80]	@ (8004d8c <HAL_I2C_MspInit+0xac>)
 8004d3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	60fb      	str	r3, [r7, #12]
 8004d42:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004d44:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004d48:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d4a:	2312      	movs	r3, #18
 8004d4c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d52:	2303      	movs	r3, #3
 8004d54:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004d56:	2304      	movs	r3, #4
 8004d58:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d5a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004d5e:	4619      	mov	r1, r3
 8004d60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d64:	f006 fa48 	bl	800b1f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004d68:	4b08      	ldr	r3, [pc, #32]	@ (8004d8c <HAL_I2C_MspInit+0xac>)
 8004d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d6c:	4a07      	ldr	r2, [pc, #28]	@ (8004d8c <HAL_I2C_MspInit+0xac>)
 8004d6e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004d72:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d74:	4b05      	ldr	r3, [pc, #20]	@ (8004d8c <HAL_I2C_MspInit+0xac>)
 8004d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d7c:	60bb      	str	r3, [r7, #8]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004d80:	bf00      	nop
 8004d82:	3778      	adds	r7, #120	@ 0x78
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	40005400 	.word	0x40005400
 8004d8c:	40021000 	.word	0x40021000

08004d90 <getSf>:
enum {
	RSSI_OFF = 64, SNR_SCALEUP = 4
};

inline sf_t getSf(rps_t params)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	4603      	mov	r3, r0
 8004d98:	80fb      	strh	r3, [r7, #6]
	return (sf_t) (params & 0x7);
 8004d9a:	88fb      	ldrh	r3, [r7, #6]
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	f003 0307 	and.w	r3, r3, #7
 8004da2:	b2db      	uxtb	r3, r3
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <getBw>:
inline rps_t setSf(rps_t params, sf_t sf)
{
	return (rps_t) ((params & ~0x7) | sf);
}
inline bw_t getBw(rps_t params)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	4603      	mov	r3, r0
 8004db8:	80fb      	strh	r3, [r7, #6]
	return (bw_t) ((params >> 3) & 0x3);
 8004dba:	88fb      	ldrh	r3, [r7, #6]
 8004dbc:	08db      	lsrs	r3, r3, #3
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	f003 0303 	and.w	r3, r3, #3
 8004dc6:	b2db      	uxtb	r3, r3
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <getCr>:
inline rps_t setBw(rps_t params, bw_t cr)
{
	return (rps_t) ((params & ~0x18) | (cr << 3));
}
inline cr_t getCr(rps_t params)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	4603      	mov	r3, r0
 8004ddc:	80fb      	strh	r3, [r7, #6]
	return (cr_t) ((params >> 5) & 0x3);
 8004dde:	88fb      	ldrh	r3, [r7, #6]
 8004de0:	095b      	lsrs	r3, r3, #5
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	f003 0303 	and.w	r3, r3, #3
 8004dea:	b2db      	uxtb	r3, r3
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <setCr>:
inline rps_t setCr(rps_t params, cr_t cr)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	4603      	mov	r3, r0
 8004e00:	460a      	mov	r2, r1
 8004e02:	80fb      	strh	r3, [r7, #6]
 8004e04:	4613      	mov	r3, r2
 8004e06:	717b      	strb	r3, [r7, #5]
	return (rps_t) ((params & ~0x60) | (cr << 5));
 8004e08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e0c:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8004e10:	b21a      	sxth	r2, r3
 8004e12:	797b      	ldrb	r3, [r7, #5]
 8004e14:	015b      	lsls	r3, r3, #5
 8004e16:	b21b      	sxth	r3, r3
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	b21b      	sxth	r3, r3
 8004e1c:	b29b      	uxth	r3, r3
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <getNocrc>:
inline int getNocrc(rps_t params)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b083      	sub	sp, #12
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	4603      	mov	r3, r0
 8004e32:	80fb      	strh	r3, [r7, #6]
	return ((params >> 7) & 0x1);
 8004e34:	88fb      	ldrh	r3, [r7, #6]
 8004e36:	09db      	lsrs	r3, r3, #7
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	f003 0301 	and.w	r3, r3, #1
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <setNocrc>:
inline rps_t setNocrc(rps_t params, int nocrc)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b083      	sub	sp, #12
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	4603      	mov	r3, r0
 8004e52:	6039      	str	r1, [r7, #0]
 8004e54:	80fb      	strh	r3, [r7, #6]
	return (rps_t) ((params & ~0x80) | (nocrc << 7));
 8004e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e5e:	b21a      	sxth	r2, r3
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	01db      	lsls	r3, r3, #7
 8004e64:	b21b      	sxth	r3, r3
 8004e66:	4313      	orrs	r3, r2
 8004e68:	b21b      	sxth	r3, r3
 8004e6a:	b29b      	uxth	r3, r3
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <getIh>:
inline int getIh(rps_t params)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	4603      	mov	r3, r0
 8004e80:	80fb      	strh	r3, [r7, #6]
	return ((params >> 8) & 0xFF);
 8004e82:	88fb      	ldrh	r3, [r7, #6]
 8004e84:	0a1b      	lsrs	r3, r3, #8
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	b2db      	uxtb	r3, r3
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <setIh>:
inline rps_t setIh(rps_t params, int ih)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	6039      	str	r1, [r7, #0]
 8004ea0:	80fb      	strh	r3, [r7, #6]
	return (rps_t) ((params & ~0xFF00) | (ih << 8));
 8004ea2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	b21a      	sxth	r2, r3
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	021b      	lsls	r3, r3, #8
 8004eae:	b21b      	sxth	r3, r3
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	b21b      	sxth	r3, r3
 8004eb4:	b29b      	uxth	r3, r3
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
	...

08004ec4 <updr2rps>:
	return ((r1 ^ r2) & 0x1F) == 0;
}

extern const u1_t _DR2RPS_CRC[];
inline rps_t updr2rps(dr_t dr)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	4603      	mov	r3, r0
 8004ecc:	71fb      	strb	r3, [r7, #7]
	return (rps_t) _DR2RPS_CRC[dr + 1];
 8004ece:	79fb      	ldrb	r3, [r7, #7]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	4a04      	ldr	r2, [pc, #16]	@ (8004ee4 <updr2rps+0x20>)
 8004ed4:	5cd3      	ldrb	r3, [r2, r3]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	08012d4c 	.word	0x08012d4c

08004ee8 <dndr2rps>:
inline rps_t dndr2rps(dr_t dr)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	4603      	mov	r3, r0
 8004ef0:	71fb      	strb	r3, [r7, #7]
	return setNocrc(updr2rps(dr), 1);
 8004ef2:	79fb      	ldrb	r3, [r7, #7]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7ff ffe5 	bl	8004ec4 <updr2rps>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2101      	movs	r1, #1
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7ff ffa3 	bl	8004e4a <setNocrc>
 8004f04:	4603      	mov	r3, r0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
	...

08004f10 <decDR>:
inline dr_t incDR(dr_t dr)
{
	return _DR2RPS_CRC[dr + 2] == ILLEGAL_RPS ? dr : (dr_t) (dr + 1);
} // increase data rate
inline dr_t decDR(dr_t dr)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	4603      	mov	r3, r0
 8004f18:	71fb      	strb	r3, [r7, #7]
	return _DR2RPS_CRC[dr] == ILLEGAL_RPS ? dr : (dr_t) (dr - 1);
 8004f1a:	79fb      	ldrb	r3, [r7, #7]
 8004f1c:	4a07      	ldr	r2, [pc, #28]	@ (8004f3c <decDR+0x2c>)
 8004f1e:	5cd3      	ldrb	r3, [r2, r3]
 8004f20:	2bff      	cmp	r3, #255	@ 0xff
 8004f22:	d003      	beq.n	8004f2c <decDR+0x1c>
 8004f24:	79fb      	ldrb	r3, [r7, #7]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	e000      	b.n	8004f2e <decDR+0x1e>
 8004f2c:	79fb      	ldrb	r3, [r7, #7]
} // decrease data rate
 8004f2e:	4618      	mov	r0, r3
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	08012d4c 	.word	0x08012d4c

08004f40 <validDR>:
inline dr_t assertDR(dr_t dr)
{
	return _DR2RPS_CRC[dr + 1] == ILLEGAL_RPS ? DR_DFLTMIN : dr;
}   // force into a valid DR
inline bit_t validDR(dr_t dr)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	4603      	mov	r3, r0
 8004f48:	71fb      	strb	r3, [r7, #7]
	return _DR2RPS_CRC[dr + 1] != ILLEGAL_RPS;
 8004f4a:	79fb      	ldrb	r3, [r7, #7]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	4a06      	ldr	r2, [pc, #24]	@ (8004f68 <validDR+0x28>)
 8004f50:	5cd3      	ldrb	r3, [r2, r3]
 8004f52:	2bff      	cmp	r3, #255	@ 0xff
 8004f54:	bf14      	ite	ne
 8004f56:	2301      	movne	r3, #1
 8004f58:	2300      	moveq	r3, #0
 8004f5a:	b2db      	uxtb	r3, r3
} // in range
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	08012d4c 	.word	0x08012d4c

08004f6c <lowerDR>:
inline dr_t lowerDR(dr_t dr, u1_t n)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	4603      	mov	r3, r0
 8004f74:	460a      	mov	r2, r1
 8004f76:	71fb      	strb	r3, [r7, #7]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	71bb      	strb	r3, [r7, #6]
	while (n--) {
 8004f7c:	e005      	b.n	8004f8a <lowerDR+0x1e>
		dr = decDR(dr);
 8004f7e:	79fb      	ldrb	r3, [r7, #7]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7ff ffc5 	bl	8004f10 <decDR>
 8004f86:	4603      	mov	r3, r0
 8004f88:	71fb      	strb	r3, [r7, #7]
	while (n--) {
 8004f8a:	79bb      	ldrb	r3, [r7, #6]
 8004f8c:	1e5a      	subs	r2, r3, #1
 8004f8e:	71ba      	strb	r2, [r7, #6]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1f4      	bne.n	8004f7e <lowerDR+0x12>
	}
	return dr;
 8004f94:	79fb      	ldrb	r3, [r7, #7]
} // decrease data rate by n steps
 8004f96:	4618      	mov	r0, r3
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <os_rlsbf2>:

#if !defined(HAS_os_calls)

#if !defined(os_rlsbf2)
u2_t os_rlsbf2(xref2cu1_t buf)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b083      	sub	sp, #12
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
	return (u2_t) (buf[0] | (buf[1] << 8));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	b21a      	sxth	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	021b      	lsls	r3, r3, #8
 8004fb4:	b21b      	sxth	r3, r3
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	b21b      	sxth	r3, r3
 8004fba:	b29b      	uxth	r3, r3
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <os_rlsbf4>:
#endif

#if !defined(os_rlsbf4)
u4_t os_rlsbf4(xref2cu1_t buf)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
	return (u4_t) (buf[0] | (buf[1] << 8) | ((u4_t) buf[2] << 16)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	021b      	lsls	r3, r3, #8
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	3302      	adds	r3, #2
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	041b      	lsls	r3, r3, #16
 8004fea:	431a      	orrs	r2, r3
			| ((u4_t) buf[3] << 24));
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3303      	adds	r3, #3
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	061b      	lsls	r3, r3, #24
	return (u4_t) (buf[0] | (buf[1] << 8) | ((u4_t) buf[2] << 16)
 8004ff4:	4313      	orrs	r3, r2
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <os_rmsbf4>:
#endif

#if !defined(os_rmsbf4)
u4_t os_rmsbf4(xref2cu1_t buf)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
	return (u4_t) (buf[3] | (buf[2] << 8) | ((u4_t) buf[1] << 16)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	3303      	adds	r3, #3
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	461a      	mov	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	3302      	adds	r3, #2
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	021b      	lsls	r3, r3, #8
 800501a:	4313      	orrs	r3, r2
 800501c:	461a      	mov	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	3301      	adds	r3, #1
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	041b      	lsls	r3, r3, #16
 8005026:	431a      	orrs	r2, r3
			| ((u4_t) buf[0] << 24));
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	061b      	lsls	r3, r3, #24
	return (u4_t) (buf[3] | (buf[2] << 8) | ((u4_t) buf[1] << 16)
 800502e:	4313      	orrs	r3, r2
}
 8005030:	4618      	mov	r0, r3
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <os_wlsbf2>:
#endif

#if !defined(os_wlsbf2)
void os_wlsbf2(xref2u1_t buf, u2_t v)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	460b      	mov	r3, r1
 8005046:	807b      	strh	r3, [r7, #2]
	buf[0] = v;
 8005048:	887b      	ldrh	r3, [r7, #2]
 800504a:	b2da      	uxtb	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	701a      	strb	r2, [r3, #0]
	buf[1] = v >> 8;
 8005050:	887b      	ldrh	r3, [r7, #2]
 8005052:	0a1b      	lsrs	r3, r3, #8
 8005054:	b29a      	uxth	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	3301      	adds	r3, #1
 800505a:	b2d2      	uxtb	r2, r2
 800505c:	701a      	strb	r2, [r3, #0]
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <os_wlsbf4>:
#endif

#if !defined(os_wlsbf4)
void os_wlsbf4(xref2u1_t buf, u4_t v)
{
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
 8005072:	6039      	str	r1, [r7, #0]
	buf[0] = v;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	b2da      	uxtb	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	701a      	strb	r2, [r3, #0]
	buf[1] = v >> 8;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	0a1a      	lsrs	r2, r3, #8
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	3301      	adds	r3, #1
 8005084:	b2d2      	uxtb	r2, r2
 8005086:	701a      	strb	r2, [r3, #0]
	buf[2] = v >> 16;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	0c1a      	lsrs	r2, r3, #16
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3302      	adds	r3, #2
 8005090:	b2d2      	uxtb	r2, r2
 8005092:	701a      	strb	r2, [r3, #0]
	buf[3] = v >> 24;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	0e1a      	lsrs	r2, r3, #24
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	3303      	adds	r3, #3
 800509c:	b2d2      	uxtb	r2, r2
 800509e:	701a      	strb	r2, [r3, #0]
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <os_wmsbf4>:
#endif

#if !defined(os_wmsbf4)
void os_wmsbf4(xref2u1_t buf, u4_t v)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
	buf[3] = v;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	3303      	adds	r3, #3
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	b2d2      	uxtb	r2, r2
 80050be:	701a      	strb	r2, [r3, #0]
	buf[2] = v >> 8;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	0a1a      	lsrs	r2, r3, #8
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3302      	adds	r3, #2
 80050c8:	b2d2      	uxtb	r2, r2
 80050ca:	701a      	strb	r2, [r3, #0]
	buf[1] = v >> 16;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	0c1a      	lsrs	r2, r3, #16
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	3301      	adds	r3, #1
 80050d4:	b2d2      	uxtb	r2, r2
 80050d6:	701a      	strb	r2, [r3, #0]
	buf[0] = v >> 24;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	0e1b      	lsrs	r3, r3, #24
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	701a      	strb	r2, [r3, #0]
}
 80050e2:	bf00      	nop
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <os_getBattLevel>:
#endif

#if !defined(os_getBattLevel)
u1_t os_getBattLevel(void)
{
 80050ee:	b480      	push	{r7}
 80050f0:	af00      	add	r7, sp, #0
	return MCMD_DEVS_BATT_NOINFO;
 80050f2:	23ff      	movs	r3, #255	@ 0xff
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <os_crc16>:
#endif

#if !defined(os_crc16)
// New CRC-16 CCITT(XMODEM) checksum for beacons:
u2_t os_crc16(xref2u1_t data, uint len)
{
 80050fe:	b480      	push	{r7}
 8005100:	b087      	sub	sp, #28
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	6039      	str	r1, [r7, #0]
	u2_t remainder = 0;
 8005108:	2300      	movs	r3, #0
 800510a:	82fb      	strh	r3, [r7, #22]
	u2_t polynomial = 0x1021;
 800510c:	f241 0321 	movw	r3, #4129	@ 0x1021
 8005110:	81bb      	strh	r3, [r7, #12]
	for (uint i = 0; i < len; i++) {
 8005112:	2300      	movs	r3, #0
 8005114:	613b      	str	r3, [r7, #16]
 8005116:	e026      	b.n	8005166 <os_crc16+0x68>
		remainder ^= data[i] << 8;
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	4413      	add	r3, r2
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	021b      	lsls	r3, r3, #8
 8005122:	b21a      	sxth	r2, r3
 8005124:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005128:	4053      	eors	r3, r2
 800512a:	b21b      	sxth	r3, r3
 800512c:	82fb      	strh	r3, [r7, #22]
		for (u1_t bit = 8; bit > 0; bit--) {
 800512e:	2308      	movs	r3, #8
 8005130:	73fb      	strb	r3, [r7, #15]
 8005132:	e012      	b.n	800515a <os_crc16+0x5c>
			if ((remainder & 0x8000))
 8005134:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005138:	2b00      	cmp	r3, #0
 800513a:	da08      	bge.n	800514e <os_crc16+0x50>
				remainder = (remainder << 1) ^ polynomial;
 800513c:	8afb      	ldrh	r3, [r7, #22]
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	b21a      	sxth	r2, r3
 8005142:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005146:	4053      	eors	r3, r2
 8005148:	b21b      	sxth	r3, r3
 800514a:	82fb      	strh	r3, [r7, #22]
 800514c:	e002      	b.n	8005154 <os_crc16+0x56>
			else
				remainder <<= 1;
 800514e:	8afb      	ldrh	r3, [r7, #22]
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	82fb      	strh	r3, [r7, #22]
		for (u1_t bit = 8; bit > 0; bit--) {
 8005154:	7bfb      	ldrb	r3, [r7, #15]
 8005156:	3b01      	subs	r3, #1
 8005158:	73fb      	strb	r3, [r7, #15]
 800515a:	7bfb      	ldrb	r3, [r7, #15]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1e9      	bne.n	8005134 <os_crc16+0x36>
	for (uint i = 0; i < len; i++) {
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	3301      	adds	r3, #1
 8005164:	613b      	str	r3, [r7, #16]
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	429a      	cmp	r2, r3
 800516c:	d3d4      	bcc.n	8005118 <os_crc16+0x1a>
		}
	}
	return remainder;
 800516e:	8afb      	ldrh	r3, [r7, #22]
}
 8005170:	4618      	mov	r0, r3
 8005172:	371c      	adds	r7, #28
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <micB0>:

// ================================================================================
// BEG AES

static void micB0(u4_t devaddr, u4_t seqno, int dndir, int len)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
 8005188:	603b      	str	r3, [r7, #0]
	os_clearMem(AESaux, 16);
 800518a:	2210      	movs	r2, #16
 800518c:	2100      	movs	r1, #0
 800518e:	4810      	ldr	r0, [pc, #64]	@ (80051d0 <micB0+0x54>)
 8005190:	f009 ff68 	bl	800f064 <memset>
	AESaux[0] = 0x49;
 8005194:	4b0e      	ldr	r3, [pc, #56]	@ (80051d0 <micB0+0x54>)
 8005196:	2249      	movs	r2, #73	@ 0x49
 8005198:	701a      	strb	r2, [r3, #0]
	AESaux[5] = dndir ? 1 : 0;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	bf14      	ite	ne
 80051a0:	2301      	movne	r3, #1
 80051a2:	2300      	moveq	r3, #0
 80051a4:	b2da      	uxtb	r2, r3
 80051a6:	4b0b      	ldr	r3, [pc, #44]	@ (80051d4 <micB0+0x58>)
 80051a8:	701a      	strb	r2, [r3, #0]
	AESaux[15] = len;
 80051aa:	4b0b      	ldr	r3, [pc, #44]	@ (80051d8 <micB0+0x5c>)
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	b2d2      	uxtb	r2, r2
 80051b0:	701a      	strb	r2, [r3, #0]
	os_wlsbf4(AESaux + 6, devaddr);
 80051b2:	4b0a      	ldr	r3, [pc, #40]	@ (80051dc <micB0+0x60>)
 80051b4:	68f9      	ldr	r1, [r7, #12]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7ff ff57 	bl	800506a <os_wlsbf4>
	os_wlsbf4(AESaux + 10, seqno);
 80051bc:	4b08      	ldr	r3, [pc, #32]	@ (80051e0 <micB0+0x64>)
 80051be:	68b9      	ldr	r1, [r7, #8]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7ff ff52 	bl	800506a <os_wlsbf4>
}
 80051c6:	bf00      	nop
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	20000144 	.word	0x20000144
 80051d4:	20000149 	.word	0x20000149
 80051d8:	20000153 	.word	0x20000153
 80051dc:	2000014a 	.word	0x2000014a
 80051e0:	2000014e 	.word	0x2000014e

080051e4 <aes_verifyMic>:

static int aes_verifyMic(xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir,
		xref2u1_t pdu, int len)
{
 80051e4:	b590      	push	{r4, r7, lr}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
 80051f0:	603b      	str	r3, [r7, #0]
	micB0(devaddr, seqno, dndir, len);
 80051f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	6879      	ldr	r1, [r7, #4]
 80051f8:	68b8      	ldr	r0, [r7, #8]
 80051fa:	f7ff ffbf 	bl	800517c <micB0>
	os_copyMem(AESkey, key, 16);
 80051fe:	2210      	movs	r2, #16
 8005200:	68f9      	ldr	r1, [r7, #12]
 8005202:	480d      	ldr	r0, [pc, #52]	@ (8005238 <aes_verifyMic+0x54>)
 8005204:	f009 ff90 	bl	800f128 <memcpy>
	return os_aes(AES_MIC, pdu, len) == os_rmsbf4(pdu + len);
 8005208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520a:	b29b      	uxth	r3, r3
 800520c:	461a      	mov	r2, r3
 800520e:	6a39      	ldr	r1, [r7, #32]
 8005210:	2002      	movs	r0, #2
 8005212:	f7fc f839 	bl	8001288 <os_aes>
 8005216:	4604      	mov	r4, r0
 8005218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521a:	6a3a      	ldr	r2, [r7, #32]
 800521c:	4413      	add	r3, r2
 800521e:	4618      	mov	r0, r3
 8005220:	f7ff feef 	bl	8005002 <os_rmsbf4>
 8005224:	4603      	mov	r3, r0
 8005226:	429c      	cmp	r4, r3
 8005228:	bf0c      	ite	eq
 800522a:	2301      	moveq	r3, #1
 800522c:	2300      	movne	r3, #0
 800522e:	b2db      	uxtb	r3, r3
}
 8005230:	4618      	mov	r0, r3
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	bd90      	pop	{r4, r7, pc}
 8005238:	20000154 	.word	0x20000154

0800523c <aes_appendMic>:

static void aes_appendMic(xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir,
		xref2u1_t pdu, int len)
{
 800523c:	b590      	push	{r4, r7, lr}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
 8005248:	603b      	str	r3, [r7, #0]
	micB0(devaddr, seqno, dndir, len);
 800524a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	6879      	ldr	r1, [r7, #4]
 8005250:	68b8      	ldr	r0, [r7, #8]
 8005252:	f7ff ff93 	bl	800517c <micB0>
	os_copyMem(AESkey, key, 16);
 8005256:	2210      	movs	r2, #16
 8005258:	68f9      	ldr	r1, [r7, #12]
 800525a:	480b      	ldr	r0, [pc, #44]	@ (8005288 <aes_appendMic+0x4c>)
 800525c:	f009 ff64 	bl	800f128 <memcpy>
	// MSB because of internal structure of AES
	os_wmsbf4(pdu + len, os_aes(AES_MIC, pdu, len));
 8005260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005262:	6a3a      	ldr	r2, [r7, #32]
 8005264:	18d4      	adds	r4, r2, r3
 8005266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005268:	b29b      	uxth	r3, r3
 800526a:	461a      	mov	r2, r3
 800526c:	6a39      	ldr	r1, [r7, #32]
 800526e:	2002      	movs	r0, #2
 8005270:	f7fc f80a 	bl	8001288 <os_aes>
 8005274:	4603      	mov	r3, r0
 8005276:	4619      	mov	r1, r3
 8005278:	4620      	mov	r0, r4
 800527a:	f7ff ff17 	bl	80050ac <os_wmsbf4>
}
 800527e:	bf00      	nop
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	bd90      	pop	{r4, r7, pc}
 8005286:	bf00      	nop
 8005288:	20000154 	.word	0x20000154

0800528c <aes_appendMic0>:

static void aes_appendMic0(xref2u1_t pdu, int len)
{
 800528c:	b590      	push	{r4, r7, lr}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
	os_getDevKey(AESkey);
 8005296:	480b      	ldr	r0, [pc, #44]	@ (80052c4 <aes_appendMic0+0x38>)
 8005298:	f002 fe38 	bl	8007f0c <os_getDevKey>
	os_wmsbf4(pdu + len, os_aes(AES_MIC | AES_MICNOAUX, pdu, len)); // MSB because of internal structure of AES
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	18d4      	adds	r4, r2, r3
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	461a      	mov	r2, r3
 80052a8:	6879      	ldr	r1, [r7, #4]
 80052aa:	200a      	movs	r0, #10
 80052ac:	f7fb ffec 	bl	8001288 <os_aes>
 80052b0:	4603      	mov	r3, r0
 80052b2:	4619      	mov	r1, r3
 80052b4:	4620      	mov	r0, r4
 80052b6:	f7ff fef9 	bl	80050ac <os_wmsbf4>
}
 80052ba:	bf00      	nop
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd90      	pop	{r4, r7, pc}
 80052c2:	bf00      	nop
 80052c4:	20000154 	.word	0x20000154

080052c8 <aes_verifyMic0>:

static int aes_verifyMic0(xref2u1_t pdu, int len)
{
 80052c8:	b590      	push	{r4, r7, lr}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
	os_getDevKey(AESkey);
 80052d2:	480d      	ldr	r0, [pc, #52]	@ (8005308 <aes_verifyMic0+0x40>)
 80052d4:	f002 fe1a 	bl	8007f0c <os_getDevKey>
	return os_aes(AES_MIC | AES_MICNOAUX, pdu, len) == os_rmsbf4(pdu + len);
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	b29b      	uxth	r3, r3
 80052dc:	461a      	mov	r2, r3
 80052de:	6879      	ldr	r1, [r7, #4]
 80052e0:	200a      	movs	r0, #10
 80052e2:	f7fb ffd1 	bl	8001288 <os_aes>
 80052e6:	4604      	mov	r4, r0
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	4413      	add	r3, r2
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7ff fe87 	bl	8005002 <os_rmsbf4>
 80052f4:	4603      	mov	r3, r0
 80052f6:	429c      	cmp	r4, r3
 80052f8:	bf0c      	ite	eq
 80052fa:	2301      	moveq	r3, #1
 80052fc:	2300      	movne	r3, #0
 80052fe:	b2db      	uxtb	r3, r3
}
 8005300:	4618      	mov	r0, r3
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	bd90      	pop	{r4, r7, pc}
 8005308:	20000154 	.word	0x20000154

0800530c <aes_encrypt>:

static void aes_encrypt(xref2u1_t pdu, int len)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
	os_getDevKey(AESkey);
 8005316:	4807      	ldr	r0, [pc, #28]	@ (8005334 <aes_encrypt+0x28>)
 8005318:	f002 fdf8 	bl	8007f0c <os_getDevKey>
	os_aes(AES_ENC, pdu, len);
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	b29b      	uxth	r3, r3
 8005320:	461a      	mov	r2, r3
 8005322:	6879      	ldr	r1, [r7, #4]
 8005324:	2000      	movs	r0, #0
 8005326:	f7fb ffaf 	bl	8001288 <os_aes>
}
 800532a:	bf00      	nop
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	20000154 	.word	0x20000154

08005338 <aes_cipher>:

static void aes_cipher(xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir,
		xref2u1_t payload, int len)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
 8005344:	603b      	str	r3, [r7, #0]
	if (len <= 0)
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	2b00      	cmp	r3, #0
 800534a:	dd29      	ble.n	80053a0 <aes_cipher+0x68>
		return;
	os_clearMem(AESaux, 16);
 800534c:	2210      	movs	r2, #16
 800534e:	2100      	movs	r1, #0
 8005350:	4815      	ldr	r0, [pc, #84]	@ (80053a8 <aes_cipher+0x70>)
 8005352:	f009 fe87 	bl	800f064 <memset>
	AESaux[0] = AESaux[15] = 1; // mode=cipher / dir=down / block counter=1
 8005356:	4b15      	ldr	r3, [pc, #84]	@ (80053ac <aes_cipher+0x74>)
 8005358:	2201      	movs	r2, #1
 800535a:	701a      	strb	r2, [r3, #0]
 800535c:	4a12      	ldr	r2, [pc, #72]	@ (80053a8 <aes_cipher+0x70>)
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	7013      	strb	r3, [r2, #0]
	AESaux[5] = dndir ? 1 : 0;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	bf14      	ite	ne
 8005368:	2301      	movne	r3, #1
 800536a:	2300      	moveq	r3, #0
 800536c:	b2da      	uxtb	r2, r3
 800536e:	4b10      	ldr	r3, [pc, #64]	@ (80053b0 <aes_cipher+0x78>)
 8005370:	701a      	strb	r2, [r3, #0]
	os_wlsbf4(AESaux + 6, devaddr);
 8005372:	4b10      	ldr	r3, [pc, #64]	@ (80053b4 <aes_cipher+0x7c>)
 8005374:	68b9      	ldr	r1, [r7, #8]
 8005376:	4618      	mov	r0, r3
 8005378:	f7ff fe77 	bl	800506a <os_wlsbf4>
	os_wlsbf4(AESaux + 10, seqno);
 800537c:	4b0e      	ldr	r3, [pc, #56]	@ (80053b8 <aes_cipher+0x80>)
 800537e:	6879      	ldr	r1, [r7, #4]
 8005380:	4618      	mov	r0, r3
 8005382:	f7ff fe72 	bl	800506a <os_wlsbf4>
	os_copyMem(AESkey, key, 16);
 8005386:	2210      	movs	r2, #16
 8005388:	68f9      	ldr	r1, [r7, #12]
 800538a:	480c      	ldr	r0, [pc, #48]	@ (80053bc <aes_cipher+0x84>)
 800538c:	f009 fecc 	bl	800f128 <memcpy>
	os_aes(AES_CTR, payload, len);
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	b29b      	uxth	r3, r3
 8005394:	461a      	mov	r2, r3
 8005396:	69b9      	ldr	r1, [r7, #24]
 8005398:	2004      	movs	r0, #4
 800539a:	f7fb ff75 	bl	8001288 <os_aes>
 800539e:	e000      	b.n	80053a2 <aes_cipher+0x6a>
		return;
 80053a0:	bf00      	nop
}
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	20000144 	.word	0x20000144
 80053ac:	20000153 	.word	0x20000153
 80053b0:	20000149 	.word	0x20000149
 80053b4:	2000014a 	.word	0x2000014a
 80053b8:	2000014e 	.word	0x2000014e
 80053bc:	20000154 	.word	0x20000154

080053c0 <aes_sessKeys>:

static void aes_sessKeys(u2_t devnonce, xref2cu1_t artnonce, xref2u1_t nwkkey,
		xref2u1_t artkey)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60b9      	str	r1, [r7, #8]
 80053c8:	607a      	str	r2, [r7, #4]
 80053ca:	603b      	str	r3, [r7, #0]
 80053cc:	4603      	mov	r3, r0
 80053ce:	81fb      	strh	r3, [r7, #14]
	os_clearMem(nwkkey, 16);
 80053d0:	2210      	movs	r2, #16
 80053d2:	2100      	movs	r1, #0
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f009 fe45 	bl	800f064 <memset>
	nwkkey[0] = 0x01;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	701a      	strb	r2, [r3, #0]
	os_copyMem(nwkkey + 1, artnonce, LEN_ARTNONCE + LEN_NETID);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3301      	adds	r3, #1
 80053e4:	2206      	movs	r2, #6
 80053e6:	68b9      	ldr	r1, [r7, #8]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f009 fe9d 	bl	800f128 <memcpy>
	os_wlsbf2(nwkkey + 1 + LEN_ARTNONCE + LEN_NETID, devnonce);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	3307      	adds	r3, #7
 80053f2:	89fa      	ldrh	r2, [r7, #14]
 80053f4:	4611      	mov	r1, r2
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7ff fe20 	bl	800503c <os_wlsbf2>
	os_copyMem(artkey, nwkkey, 16);
 80053fc:	2210      	movs	r2, #16
 80053fe:	6879      	ldr	r1, [r7, #4]
 8005400:	6838      	ldr	r0, [r7, #0]
 8005402:	f009 fe91 	bl	800f128 <memcpy>
	artkey[0] = 0x02;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2202      	movs	r2, #2
 800540a:	701a      	strb	r2, [r3, #0]

	os_getDevKey(AESkey);
 800540c:	4809      	ldr	r0, [pc, #36]	@ (8005434 <aes_sessKeys+0x74>)
 800540e:	f002 fd7d 	bl	8007f0c <os_getDevKey>
	os_aes(AES_ENC, nwkkey, 16);
 8005412:	2210      	movs	r2, #16
 8005414:	6879      	ldr	r1, [r7, #4]
 8005416:	2000      	movs	r0, #0
 8005418:	f7fb ff36 	bl	8001288 <os_aes>
	os_getDevKey(AESkey);
 800541c:	4805      	ldr	r0, [pc, #20]	@ (8005434 <aes_sessKeys+0x74>)
 800541e:	f002 fd75 	bl	8007f0c <os_getDevKey>
	os_aes(AES_ENC, artkey, 16);
 8005422:	2210      	movs	r2, #16
 8005424:	6839      	ldr	r1, [r7, #0]
 8005426:	2000      	movs	r0, #0
 8005428:	f7fb ff2e 	bl	8001288 <os_aes>
}
 800542c:	bf00      	nop
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	20000154 	.word	0x20000154

08005438 <getSensitivity>:
		{ 141 - 138, 141 - 135, 141 - 132 },  // SF11
		{ 141 - 141, 141 - 138, 141 - 135 }   // SF12
};

int getSensitivity(rps_t rps)
{
 8005438:	b590      	push	{r4, r7, lr}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	4603      	mov	r3, r0
 8005440:	80fb      	strh	r3, [r7, #6]
	return -141 + SENSITIVITY[getSf(rps)][getBw(rps)];
 8005442:	88fb      	ldrh	r3, [r7, #6]
 8005444:	4618      	mov	r0, r3
 8005446:	f7ff fca3 	bl	8004d90 <getSf>
 800544a:	4603      	mov	r3, r0
 800544c:	461c      	mov	r4, r3
 800544e:	88fb      	ldrh	r3, [r7, #6]
 8005450:	4618      	mov	r0, r3
 8005452:	f7ff fcad 	bl	8004db0 <getBw>
 8005456:	4603      	mov	r3, r0
 8005458:	4619      	mov	r1, r3
 800545a:	4a06      	ldr	r2, [pc, #24]	@ (8005474 <getSensitivity+0x3c>)
 800545c:	4623      	mov	r3, r4
 800545e:	005b      	lsls	r3, r3, #1
 8005460:	4423      	add	r3, r4
 8005462:	4413      	add	r3, r2
 8005464:	440b      	add	r3, r1
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	3b8d      	subs	r3, #141	@ 0x8d
}
 800546a:	4618      	mov	r0, r3
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	bd90      	pop	{r4, r7, pc}
 8005472:	bf00      	nop
 8005474:	08012d68 	.word	0x08012d68

08005478 <calcAirTime>:

ostime_t calcAirTime(rps_t rps, u1_t plen)
{
 8005478:	b590      	push	{r4, r7, lr}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	4603      	mov	r3, r0
 8005480:	460a      	mov	r2, r1
 8005482:	80fb      	strh	r3, [r7, #6]
 8005484:	4613      	mov	r3, r2
 8005486:	717b      	strb	r3, [r7, #5]
	u1_t bw = getBw(rps);  // 0,1,2 = 125,250,500kHz
 8005488:	88fb      	ldrh	r3, [r7, #6]
 800548a:	4618      	mov	r0, r3
 800548c:	f7ff fc90 	bl	8004db0 <getBw>
 8005490:	4603      	mov	r3, r0
 8005492:	72fb      	strb	r3, [r7, #11]
	u1_t sf = getSf(rps);  // 0=FSK, 1..6 = SF7..12
 8005494:	88fb      	ldrh	r3, [r7, #6]
 8005496:	4618      	mov	r0, r3
 8005498:	f7ff fc7a 	bl	8004d90 <getSf>
 800549c:	4603      	mov	r3, r0
 800549e:	72bb      	strb	r3, [r7, #10]
	if (sf == FSK) {
 80054a0:	7abb      	ldrb	r3, [r7, #10]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10c      	bne.n	80054c0 <calcAirTime+0x48>
		return (plen + /*preamble*/5 + /*syncword*/3 + /*len*/1 + /*crc*/2)
 80054a6:	797b      	ldrb	r3, [r7, #5]
 80054a8:	330b      	adds	r3, #11
				* /*bits/byte*/8 * (s4_t) OSTICKS_PER_SEC / /*kbit/s*/50000;
 80054aa:	f44f 327a 	mov.w	r2, #256000	@ 0x3e800
 80054ae:	fb02 f303 	mul.w	r3, r2, r3
 80054b2:	4a3c      	ldr	r2, [pc, #240]	@ (80055a4 <calcAirTime+0x12c>)
 80054b4:	fb82 1203 	smull	r1, r2, r2, r3
 80054b8:	1312      	asrs	r2, r2, #12
 80054ba:	17db      	asrs	r3, r3, #31
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	e06d      	b.n	800559c <calcAirTime+0x124>
	}
	u1_t sfx = 4 * (sf + (7 - SF7));
 80054c0:	7abb      	ldrb	r3, [r7, #10]
 80054c2:	3306      	adds	r3, #6
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	75fb      	strb	r3, [r7, #23]
	u1_t q = sfx - (sf >= SF11 ? 8 : 0);
 80054ca:	7abb      	ldrb	r3, [r7, #10]
 80054cc:	2b04      	cmp	r3, #4
 80054ce:	d901      	bls.n	80054d4 <calcAirTime+0x5c>
 80054d0:	2308      	movs	r3, #8
 80054d2:	e000      	b.n	80054d6 <calcAirTime+0x5e>
 80054d4:	2300      	movs	r3, #0
 80054d6:	7dfa      	ldrb	r2, [r7, #23]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	727b      	strb	r3, [r7, #9]
	int tmp = 8 * plen - sfx + 28 + (getNocrc(rps) ? 0 : 16)
 80054dc:	797b      	ldrb	r3, [r7, #5]
 80054de:	00da      	lsls	r2, r3, #3
 80054e0:	7dfb      	ldrb	r3, [r7, #23]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	f103 041c 	add.w	r4, r3, #28
 80054e8:	88fb      	ldrh	r3, [r7, #6]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7ff fc9d 	bl	8004e2a <getNocrc>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d001      	beq.n	80054fa <calcAirTime+0x82>
 80054f6:	2300      	movs	r3, #0
 80054f8:	e000      	b.n	80054fc <calcAirTime+0x84>
 80054fa:	2310      	movs	r3, #16
 80054fc:	441c      	add	r4, r3
			- (getIh(rps) ? 20 : 0);
 80054fe:	88fb      	ldrh	r3, [r7, #6]
 8005500:	4618      	mov	r0, r3
 8005502:	f7ff fcb9 	bl	8004e78 <getIh>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <calcAirTime+0x98>
 800550c:	2314      	movs	r3, #20
 800550e:	e000      	b.n	8005512 <calcAirTime+0x9a>
 8005510:	2300      	movs	r3, #0
	int tmp = 8 * plen - sfx + 28 + (getNocrc(rps) ? 0 : 16)
 8005512:	1ae3      	subs	r3, r4, r3
 8005514:	613b      	str	r3, [r7, #16]
	if (tmp > 0) {
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	2b00      	cmp	r3, #0
 800551a:	dd15      	ble.n	8005548 <calcAirTime+0xd0>
		tmp = (tmp + q - 1) / q;
 800551c:	7a7a      	ldrb	r2, [r7, #9]
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	4413      	add	r3, r2
 8005522:	1e5a      	subs	r2, r3, #1
 8005524:	7a7b      	ldrb	r3, [r7, #9]
 8005526:	fb92 f3f3 	sdiv	r3, r2, r3
 800552a:	613b      	str	r3, [r7, #16]
		tmp *= getCr(rps) + 5;
 800552c:	88fb      	ldrh	r3, [r7, #6]
 800552e:	4618      	mov	r0, r3
 8005530:	f7ff fc50 	bl	8004dd4 <getCr>
 8005534:	4603      	mov	r3, r0
 8005536:	1d5a      	adds	r2, r3, #5
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	fb02 f303 	mul.w	r3, r2, r3
 800553e:	613b      	str	r3, [r7, #16]
		tmp += 8;
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	3308      	adds	r3, #8
 8005544:	613b      	str	r3, [r7, #16]
 8005546:	e001      	b.n	800554c <calcAirTime+0xd4>
	} else {
		tmp = 8;
 8005548:	2308      	movs	r3, #8
 800554a:	613b      	str	r3, [r7, #16]
	}
	tmp = (tmp << 2) + /*preamble*/49 /* 4 * (8 + 4.25) */;
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	3331      	adds	r3, #49	@ 0x31
 8005552:	613b      	str	r3, [r7, #16]
	//
	// osticks =  tmp * OSTICKS_PER_SEC * 1<<sf / bw
	//
	// 3 => counter reduced divisor 125000/8 => 15625
	// 2 => counter 2 shift on tmp
	sfx = sf + (7 - SF7) - (3 + 2) - bw;
 8005554:	7aba      	ldrb	r2, [r7, #10]
 8005556:	7afb      	ldrb	r3, [r7, #11]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	b2db      	uxtb	r3, r3
 800555c:	3301      	adds	r3, #1
 800555e:	75fb      	strb	r3, [r7, #23]
	int div = 15625;
 8005560:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8005564:	60fb      	str	r3, [r7, #12]
	if (sfx > 4) {
 8005566:	7dfb      	ldrb	r3, [r7, #23]
 8005568:	2b04      	cmp	r3, #4
 800556a:	d907      	bls.n	800557c <calcAirTime+0x104>
		// prevent 32bit signed int overflow in last step
		div >>= sfx - 4;
 800556c:	7dfb      	ldrb	r3, [r7, #23]
 800556e:	3b04      	subs	r3, #4
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	fa42 f303 	asr.w	r3, r2, r3
 8005576:	60fb      	str	r3, [r7, #12]
		sfx = 4;
 8005578:	2304      	movs	r3, #4
 800557a:	75fb      	strb	r3, [r7, #23]
	}
	// Need 32bit arithmetic for this last step
	return (((ostime_t) tmp << sfx) * OSTICKS_PER_SEC + div / 2) / div;
 800557c:	7dfb      	ldrb	r3, [r7, #23]
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	fa02 f303 	lsl.w	r3, r2, r3
 8005584:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8005588:	fb03 f202 	mul.w	r2, r3, r2
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	0fd9      	lsrs	r1, r3, #31
 8005590:	440b      	add	r3, r1
 8005592:	105b      	asrs	r3, r3, #1
 8005594:	441a      	add	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	fb92 f3f3 	sdiv	r3, r2, r3
}
 800559c:	4618      	mov	r0, r3
 800559e:	371c      	adds	r7, #28
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd90      	pop	{r4, r7, pc}
 80055a4:	14f8b589 	.word	0x14f8b589

080055a8 <calcRxWindow>:
    us2osticksRound(128<<0)   // ------    DR_SF7CR
#endif
		};

static ostime_t calcRxWindow(u1_t secs, dr_t dr)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b087      	sub	sp, #28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	4603      	mov	r3, r0
 80055b0:	460a      	mov	r2, r1
 80055b2:	71fb      	strb	r3, [r7, #7]
 80055b4:	4613      	mov	r3, r2
 80055b6:	71bb      	strb	r3, [r7, #6]
	ostime_t rxoff, err;
	if (secs == 0) {
 80055b8:	79fb      	ldrb	r3, [r7, #7]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d108      	bne.n	80055d0 <calcRxWindow+0x28>
		// aka 128 secs (next becaon)
		rxoff = LMIC.drift;
 80055be:	4b22      	ldr	r3, [pc, #136]	@ (8005648 <calcRxWindow+0xa0>)
 80055c0:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 80055c4:	617b      	str	r3, [r7, #20]
		err = LMIC.lastDriftDiff;
 80055c6:	4b20      	ldr	r3, [pc, #128]	@ (8005648 <calcRxWindow+0xa0>)
 80055c8:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 80055cc:	613b      	str	r3, [r7, #16]
 80055ce:	e011      	b.n	80055f4 <calcRxWindow+0x4c>
	} else {
		// scheduled RX window within secs into current beacon period
		rxoff = (LMIC.drift * (ostime_t) secs) >> BCN_INTV_exp;
 80055d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005648 <calcRxWindow+0xa0>)
 80055d2:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 80055d6:	461a      	mov	r2, r3
 80055d8:	79fb      	ldrb	r3, [r7, #7]
 80055da:	fb02 f303 	mul.w	r3, r2, r3
 80055de:	11db      	asrs	r3, r3, #7
 80055e0:	617b      	str	r3, [r7, #20]
		err = (LMIC.lastDriftDiff * (ostime_t) secs) >> BCN_INTV_exp;
 80055e2:	4b19      	ldr	r3, [pc, #100]	@ (8005648 <calcRxWindow+0xa0>)
 80055e4:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 80055e8:	461a      	mov	r2, r3
 80055ea:	79fb      	ldrb	r3, [r7, #7]
 80055ec:	fb02 f303 	mul.w	r3, r2, r3
 80055f0:	11db      	asrs	r3, r3, #7
 80055f2:	613b      	str	r3, [r7, #16]
	}
	u1_t rxsyms = MINRX_SYMS;
 80055f4:	2305      	movs	r3, #5
 80055f6:	73fb      	strb	r3, [r7, #15]
	err += (ostime_t) LMIC.maxDriftDiff * LMIC.missedBcns;
 80055f8:	4b13      	ldr	r3, [pc, #76]	@ (8005648 <calcRxWindow+0xa0>)
 80055fa:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 80055fe:	461a      	mov	r2, r3
 8005600:	4b11      	ldr	r3, [pc, #68]	@ (8005648 <calcRxWindow+0xa0>)
 8005602:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8005606:	fb02 f303 	mul.w	r3, r2, r3
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	4413      	add	r3, r2
 800560e:	613b      	str	r3, [r7, #16]
	LMIC.rxsyms = MINRX_SYMS + (err / dr2hsym(dr));
 8005610:	79bb      	ldrb	r3, [r7, #6]
 8005612:	4a0e      	ldr	r2, [pc, #56]	@ (800564c <calcRxWindow+0xa4>)
 8005614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	fb92 f3f3 	sdiv	r3, r2, r3
 800561e:	b2db      	uxtb	r3, r3
 8005620:	3305      	adds	r3, #5
 8005622:	b2da      	uxtb	r2, r3
 8005624:	4b08      	ldr	r3, [pc, #32]	@ (8005648 <calcRxWindow+0xa0>)
 8005626:	741a      	strb	r2, [r3, #16]

	return (rxsyms - PAMBL_SYMS) * dr2hsym(dr) + rxoff;
 8005628:	7bfb      	ldrb	r3, [r7, #15]
 800562a:	3b08      	subs	r3, #8
 800562c:	79ba      	ldrb	r2, [r7, #6]
 800562e:	4907      	ldr	r1, [pc, #28]	@ (800564c <calcRxWindow+0xa4>)
 8005630:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005634:	fb03 f202 	mul.w	r2, r3, r2
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	4413      	add	r3, r2
}
 800563c:	4618      	mov	r0, r3
 800563e:	371c      	adds	r7, #28
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	2000033c 	.word	0x2000033c
 800564c:	08012d8c 	.word	0x08012d8c

08005650 <calcBcnRxWindowFromMillis>:

// Setup beacon RX parameters assuming we have an error of ms (aka +/-(ms/2))
static void calcBcnRxWindowFromMillis(u1_t ms, bit_t ini)
{
 8005650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005654:	b087      	sub	sp, #28
 8005656:	af00      	add	r7, sp, #0
 8005658:	4606      	mov	r6, r0
 800565a:	4608      	mov	r0, r1
 800565c:	4631      	mov	r1, r6
 800565e:	73f9      	strb	r1, [r7, #15]
 8005660:	4601      	mov	r1, r0
 8005662:	73b9      	strb	r1, [r7, #14]
	if (ini) {
 8005664:	7bb9      	ldrb	r1, [r7, #14]
 8005666:	2900      	cmp	r1, #0
 8005668:	d014      	beq.n	8005694 <calcBcnRxWindowFromMillis+0x44>
		LMIC.drift = 0;
 800566a:	493b      	ldr	r1, [pc, #236]	@ (8005758 <calcBcnRxWindowFromMillis+0x108>)
 800566c:	2000      	movs	r0, #0
 800566e:	f8a1 00b4 	strh.w	r0, [r1, #180]	@ 0xb4
		LMIC.maxDriftDiff = 0;
 8005672:	4939      	ldr	r1, [pc, #228]	@ (8005758 <calcBcnRxWindowFromMillis+0x108>)
 8005674:	2000      	movs	r0, #0
 8005676:	f8a1 00b8 	strh.w	r0, [r1, #184]	@ 0xb8
		LMIC.missedBcns = 0;
 800567a:	4937      	ldr	r1, [pc, #220]	@ (8005758 <calcBcnRxWindowFromMillis+0x108>)
 800567c:	2000      	movs	r0, #0
 800567e:	f881 0131 	strb.w	r0, [r1, #305]	@ 0x131
		LMIC.bcninfo.flags |= BCN_NODRIFT | BCN_NODDIFF;
 8005682:	4935      	ldr	r1, [pc, #212]	@ (8005758 <calcBcnRxWindowFromMillis+0x108>)
 8005684:	f891 1196 	ldrb.w	r1, [r1, #406]	@ 0x196
 8005688:	f041 010c 	orr.w	r1, r1, #12
 800568c:	b2c8      	uxtb	r0, r1
 800568e:	4932      	ldr	r1, [pc, #200]	@ (8005758 <calcBcnRxWindowFromMillis+0x108>)
 8005690:	f881 0196 	strb.w	r0, [r1, #406]	@ 0x196
	}
	ostime_t hsym = dr2hsym(DR_BCN);
 8005694:	2142      	movs	r1, #66	@ 0x42
 8005696:	6179      	str	r1, [r7, #20]
	LMIC.bcnRxsyms = MINRX_SYMS + ms2osticksCeil(ms) / hsym;
 8005698:	7bf9      	ldrb	r1, [r7, #15]
 800569a:	2000      	movs	r0, #0
 800569c:	460c      	mov	r4, r1
 800569e:	4605      	mov	r5, r0
 80056a0:	4620      	mov	r0, r4
 80056a2:	4629      	mov	r1, r5
 80056a4:	f04f 0a00 	mov.w	sl, #0
 80056a8:	f04f 0b00 	mov.w	fp, #0
 80056ac:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 80056b0:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 80056b4:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 80056b8:	4650      	mov	r0, sl
 80056ba:	4659      	mov	r1, fp
 80056bc:	1b02      	subs	r2, r0, r4
 80056be:	eb61 0305 	sbc.w	r3, r1, r5
 80056c2:	f04f 0000 	mov.w	r0, #0
 80056c6:	f04f 0100 	mov.w	r1, #0
 80056ca:	0099      	lsls	r1, r3, #2
 80056cc:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80056d0:	0090      	lsls	r0, r2, #2
 80056d2:	4602      	mov	r2, r0
 80056d4:	460b      	mov	r3, r1
 80056d6:	eb12 0804 	adds.w	r8, r2, r4
 80056da:	eb43 0905 	adc.w	r9, r3, r5
 80056de:	f04f 0200 	mov.w	r2, #0
 80056e2:	f04f 0300 	mov.w	r3, #0
 80056e6:	ea4f 2309 	mov.w	r3, r9, lsl #8
 80056ea:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 80056ee:	ea4f 2208 	mov.w	r2, r8, lsl #8
 80056f2:	4690      	mov	r8, r2
 80056f4:	4699      	mov	r9, r3
 80056f6:	4642      	mov	r2, r8
 80056f8:	464b      	mov	r3, r9
 80056fa:	f240 31e7 	movw	r1, #999	@ 0x3e7
 80056fe:	1851      	adds	r1, r2, r1
 8005700:	6039      	str	r1, [r7, #0]
 8005702:	f143 0300 	adc.w	r3, r3, #0
 8005706:	607b      	str	r3, [r7, #4]
 8005708:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800570c:	f04f 0300 	mov.w	r3, #0
 8005710:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005714:	f7fb fa7a 	bl	8000c0c <__aeabi_ldivmod>
 8005718:	4602      	mov	r2, r0
 800571a:	460b      	mov	r3, r1
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	fb92 f3f3 	sdiv	r3, r2, r3
 8005722:	b2db      	uxtb	r3, r3
 8005724:	3305      	adds	r3, #5
 8005726:	b2da      	uxtb	r2, r3
 8005728:	4b0b      	ldr	r3, [pc, #44]	@ (8005758 <calcBcnRxWindowFromMillis+0x108>)
 800572a:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
	LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks
 800572e:	4b0a      	ldr	r3, [pc, #40]	@ (8005758 <calcBcnRxWindowFromMillis+0x108>)
 8005730:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8005734:	f503 127a 	add.w	r2, r3, #4096000	@ 0x3e8000
			- (LMIC.bcnRxsyms - PAMBL_SYMS) * hsym;
 8005738:	4b07      	ldr	r3, [pc, #28]	@ (8005758 <calcBcnRxWindowFromMillis+0x108>)
 800573a:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 800573e:	3b08      	subs	r3, #8
 8005740:	6979      	ldr	r1, [r7, #20]
 8005742:	fb01 f303 	mul.w	r3, r1, r3
 8005746:	1ad3      	subs	r3, r2, r3
	LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks
 8005748:	4a03      	ldr	r2, [pc, #12]	@ (8005758 <calcBcnRxWindowFromMillis+0x108>)
 800574a:	f8c2 318c 	str.w	r3, [r2, #396]	@ 0x18c
}
 800574e:	bf00      	nop
 8005750:	371c      	adds	r7, #28
 8005752:	46bd      	mov	sp, r7
 8005754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005758:	2000033c 	.word	0x2000033c

0800575c <rxschedInit>:

// Setup scheduled RX window (ping/multicast slot)
static void rxschedInit(xref2rxsched_t rxsched)
{
 800575c:	b590      	push	{r4, r7, lr}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
	os_clearMem(AESkey, 16);
 8005764:	2210      	movs	r2, #16
 8005766:	2100      	movs	r1, #0
 8005768:	482e      	ldr	r0, [pc, #184]	@ (8005824 <rxschedInit+0xc8>)
 800576a:	f009 fc7b 	bl	800f064 <memset>
	os_clearMem(LMIC.frame + 8, 8);
 800576e:	4b2e      	ldr	r3, [pc, #184]	@ (8005828 <rxschedInit+0xcc>)
 8005770:	2208      	movs	r2, #8
 8005772:	2100      	movs	r1, #0
 8005774:	4618      	mov	r0, r3
 8005776:	f009 fc75 	bl	800f064 <memset>
	os_wlsbf4(LMIC.frame, LMIC.bcninfo.time);
 800577a:	4b2c      	ldr	r3, [pc, #176]	@ (800582c <rxschedInit+0xd0>)
 800577c:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8005780:	4619      	mov	r1, r3
 8005782:	482b      	ldr	r0, [pc, #172]	@ (8005830 <rxschedInit+0xd4>)
 8005784:	f7ff fc71 	bl	800506a <os_wlsbf4>
	os_wlsbf4(LMIC.frame + 4, LMIC.devaddr);
 8005788:	4a2a      	ldr	r2, [pc, #168]	@ (8005834 <rxschedInit+0xd8>)
 800578a:	4b28      	ldr	r3, [pc, #160]	@ (800582c <rxschedInit+0xd0>)
 800578c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005790:	4619      	mov	r1, r3
 8005792:	4610      	mov	r0, r2
 8005794:	f7ff fc69 	bl	800506a <os_wlsbf4>
	os_aes(AES_ENC, LMIC.frame, 16);
 8005798:	2210      	movs	r2, #16
 800579a:	4925      	ldr	r1, [pc, #148]	@ (8005830 <rxschedInit+0xd4>)
 800579c:	2000      	movs	r0, #0
 800579e:	f7fb fd73 	bl	8001288 <os_aes>
	u1_t intvExp = rxsched->intvExp;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	785b      	ldrb	r3, [r3, #1]
 80057a6:	73fb      	strb	r3, [r7, #15]
	ostime_t off = os_rlsbf2(LMIC.frame) & (0x0FFF >> (7 - intvExp)); // random offset (slot units)
 80057a8:	4821      	ldr	r0, [pc, #132]	@ (8005830 <rxschedInit+0xd4>)
 80057aa:	f7ff fbf8 	bl	8004f9e <os_rlsbf2>
 80057ae:	4603      	mov	r3, r0
 80057b0:	4619      	mov	r1, r3
 80057b2:	7bfb      	ldrb	r3, [r7, #15]
 80057b4:	f1c3 0307 	rsb	r3, r3, #7
 80057b8:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80057bc:	fa42 f303 	asr.w	r3, r2, r3
 80057c0:	400b      	ands	r3, r1
 80057c2:	60bb      	str	r3, [r7, #8]
	rxsched->rxbase = (LMIC.bcninfo.txtime +
 80057c4:	4b19      	ldr	r3, [pc, #100]	@ (800582c <rxschedInit+0xd0>)
 80057c6:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
	BCN_RESERVE_osticks + ms2osticks(BCN_SLOT_SPAN_ms * off)); // random offset osticks
 80057ca:	4619      	mov	r1, r3
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	4613      	mov	r3, r2
 80057d0:	011b      	lsls	r3, r3, #4
 80057d2:	1a9b      	subs	r3, r3, r2
 80057d4:	019b      	lsls	r3, r3, #6
 80057d6:	440b      	add	r3, r1
 80057d8:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 80057dc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80057e0:	461a      	mov	r2, r3
	rxsched->rxbase = (LMIC.bcninfo.txtime +
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	605a      	str	r2, [r3, #4]
	rxsched->slot = 0;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	709a      	strb	r2, [r3, #2]
	rxsched->rxtime = rxsched->rxbase
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685c      	ldr	r4, [r3, #4]
			- calcRxWindow(/*secs BCN_RESERVE*/2 + (1 << intvExp), rxsched->dr);
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
 80057f2:	2201      	movs	r2, #1
 80057f4:	fa02 f303 	lsl.w	r3, r2, r3
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	3302      	adds	r3, #2
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	4619      	mov	r1, r3
 8005804:	4610      	mov	r0, r2
 8005806:	f7ff fecf 	bl	80055a8 <calcRxWindow>
 800580a:	4603      	mov	r3, r0
 800580c:	1ae2      	subs	r2, r4, r3
	rxsched->rxtime = rxsched->rxbase
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	609a      	str	r2, [r3, #8]
	rxsched->rxsyms = LMIC.rxsyms;
 8005812:	4b06      	ldr	r3, [pc, #24]	@ (800582c <rxschedInit+0xd0>)
 8005814:	7c1a      	ldrb	r2, [r3, #16]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	70da      	strb	r2, [r3, #3]
}
 800581a:	bf00      	nop
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	bd90      	pop	{r4, r7, pc}
 8005822:	bf00      	nop
 8005824:	20000154 	.word	0x20000154
 8005828:	2000048c 	.word	0x2000048c
 800582c:	2000033c 	.word	0x2000033c
 8005830:	20000484 	.word	0x20000484
 8005834:	20000488 	.word	0x20000488

08005838 <rxschedNext>:

static bit_t rxschedNext(xref2rxsched_t rxsched, ostime_t cando)
{
 8005838:	b590      	push	{r4, r7, lr}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
	again: if (rxsched->rxtime - cando >= 0)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	689a      	ldr	r2, [r3, #8]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	db01      	blt.n	8005852 <rxschedNext+0x1a>
		return 1;
 800584e:	2301      	movs	r3, #1
 8005850:	e03a      	b.n	80058c8 <rxschedNext+0x90>
	u1_t slot;
	if ((slot = rxsched->slot) >= 128)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	789b      	ldrb	r3, [r3, #2]
 8005856:	73fb      	strb	r3, [r7, #15]
 8005858:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800585c:	2b00      	cmp	r3, #0
 800585e:	da01      	bge.n	8005864 <rxschedNext+0x2c>
		return 0;
 8005860:	2300      	movs	r3, #0
 8005862:	e031      	b.n	80058c8 <rxschedNext+0x90>
	u1_t intv = 1 << rxsched->intvExp;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	785b      	ldrb	r3, [r3, #1]
 8005868:	461a      	mov	r2, r3
 800586a:	2301      	movs	r3, #1
 800586c:	4093      	lsls	r3, r2
 800586e:	73bb      	strb	r3, [r7, #14]
	if ((rxsched->slot = (slot += (intv))) >= 128)
 8005870:	7bfa      	ldrb	r2, [r7, #15]
 8005872:	7bbb      	ldrb	r3, [r7, #14]
 8005874:	4413      	add	r3, r2
 8005876:	73fb      	strb	r3, [r7, #15]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	7bfa      	ldrb	r2, [r7, #15]
 800587c:	709a      	strb	r2, [r3, #2]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	789b      	ldrb	r3, [r3, #2]
 8005882:	b25b      	sxtb	r3, r3
 8005884:	2b00      	cmp	r3, #0
 8005886:	da01      	bge.n	800588c <rxschedNext+0x54>
		return 0;
 8005888:	2300      	movs	r3, #0
 800588a:	e01d      	b.n	80058c8 <rxschedNext+0x90>
	rxsched->rxtime = rxsched->rxbase
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6859      	ldr	r1, [r3, #4]
			+ ((BCN_WINDOW_osticks * (ostime_t) slot) >> BCN_INTV_exp)
 8005890:	7bfa      	ldrb	r2, [r7, #15]
 8005892:	4613      	mov	r3, r2
 8005894:	011b      	lsls	r3, r3, #4
 8005896:	1a9b      	subs	r3, r3, r2
 8005898:	049b      	lsls	r3, r3, #18
 800589a:	11db      	asrs	r3, r3, #7
 800589c:	18cc      	adds	r4, r1, r3
			- calcRxWindow(/*secs BCN_RESERVE*/2 + slot + intv, rxsched->dr);
 800589e:	7bfa      	ldrb	r2, [r7, #15]
 80058a0:	7bbb      	ldrb	r3, [r7, #14]
 80058a2:	4413      	add	r3, r2
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	3302      	adds	r3, #2
 80058a8:	b2da      	uxtb	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	4619      	mov	r1, r3
 80058b0:	4610      	mov	r0, r2
 80058b2:	f7ff fe79 	bl	80055a8 <calcRxWindow>
 80058b6:	4603      	mov	r3, r0
 80058b8:	1ae2      	subs	r2, r4, r3
	rxsched->rxtime = rxsched->rxbase
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	609a      	str	r2, [r3, #8]
	rxsched->rxsyms = LMIC.rxsyms;
 80058be:	4b04      	ldr	r3, [pc, #16]	@ (80058d0 <rxschedNext+0x98>)
 80058c0:	7c1a      	ldrb	r2, [r3, #16]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	70da      	strb	r2, [r3, #3]
	goto again;
 80058c6:	e7bc      	b.n	8005842 <rxschedNext+0xa>
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd90      	pop	{r4, r7, pc}
 80058d0:	2000033c 	.word	0x2000033c

080058d4 <rndDelay>:

static ostime_t rndDelay(u1_t secSpan)
{
 80058d4:	b590      	push	{r4, r7, lr}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	4603      	mov	r3, r0
 80058dc:	71fb      	strb	r3, [r7, #7]
	u2_t r = os_getRndU2();
 80058de:	f003 fb2d 	bl	8008f3c <radio_rand1>
 80058e2:	4603      	mov	r3, r0
 80058e4:	021b      	lsls	r3, r3, #8
 80058e6:	b21c      	sxth	r4, r3
 80058e8:	f003 fb28 	bl	8008f3c <radio_rand1>
 80058ec:	4603      	mov	r3, r0
 80058ee:	b21b      	sxth	r3, r3
 80058f0:	4323      	orrs	r3, r4
 80058f2:	b21b      	sxth	r3, r3
 80058f4:	817b      	strh	r3, [r7, #10]
	ostime_t delay = r;
 80058f6:	897b      	ldrh	r3, [r7, #10]
 80058f8:	60fb      	str	r3, [r7, #12]
	if (delay > OSTICKS_PER_SEC)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8005900:	dd0b      	ble.n	800591a <rndDelay+0x46>
		delay = r % (u2_t) OSTICKS_PER_SEC;
 8005902:	897b      	ldrh	r3, [r7, #10]
 8005904:	4a11      	ldr	r2, [pc, #68]	@ (800594c <rndDelay+0x78>)
 8005906:	fba2 1203 	umull	r1, r2, r2, r3
 800590a:	0ad2      	lsrs	r2, r2, #11
 800590c:	f44f 41fa 	mov.w	r1, #32000	@ 0x7d00
 8005910:	fb01 f202 	mul.w	r2, r1, r2
 8005914:	1a9b      	subs	r3, r3, r2
 8005916:	b29b      	uxth	r3, r3
 8005918:	60fb      	str	r3, [r7, #12]
	if (secSpan > 0)
 800591a:	79fb      	ldrb	r3, [r7, #7]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d010      	beq.n	8005942 <rndDelay+0x6e>
		delay += ((u1_t) r % secSpan) * OSTICKS_PER_SEC;
 8005920:	897b      	ldrh	r3, [r7, #10]
 8005922:	b2db      	uxtb	r3, r3
 8005924:	79fa      	ldrb	r2, [r7, #7]
 8005926:	fbb3 f1f2 	udiv	r1, r3, r2
 800592a:	fb01 f202 	mul.w	r2, r1, r2
 800592e:	1a9b      	subs	r3, r3, r2
 8005930:	b2db      	uxtb	r3, r3
 8005932:	461a      	mov	r2, r3
 8005934:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005938:	fb02 f303 	mul.w	r3, r2, r3
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	4413      	add	r3, r2
 8005940:	60fb      	str	r3, [r7, #12]
	return delay;
 8005942:	68fb      	ldr	r3, [r7, #12]
}
 8005944:	4618      	mov	r0, r3
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	bd90      	pop	{r4, r7, pc}
 800594c:	10624dd3 	.word	0x10624dd3

08005950 <txDelay>:

static void txDelay(ostime_t reftime, u1_t secSpan)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	460b      	mov	r3, r1
 800595a:	70fb      	strb	r3, [r7, #3]
	reftime += rndDelay(secSpan);
 800595c:	78fb      	ldrb	r3, [r7, #3]
 800595e:	4618      	mov	r0, r3
 8005960:	f7ff ffb8 	bl	80058d4 <rndDelay>
 8005964:	4602      	mov	r2, r0
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4413      	add	r3, r2
 800596a:	607b      	str	r3, [r7, #4]
	if (LMIC.globalDutyRate == 0 || (reftime - LMIC.globalDutyAvail) > 0) {
 800596c:	4b0e      	ldr	r3, [pc, #56]	@ (80059a8 <txDelay+0x58>)
 800596e:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d006      	beq.n	8005984 <txDelay+0x34>
 8005976:	4b0c      	ldr	r3, [pc, #48]	@ (80059a8 <txDelay+0x58>)
 8005978:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	2b00      	cmp	r3, #0
 8005982:	dd0c      	ble.n	800599e <txDelay+0x4e>
		LMIC.globalDutyAvail = reftime;
 8005984:	4a08      	ldr	r2, [pc, #32]	@ (80059a8 <txDelay+0x58>)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
		LMIC.opmode |= OP_RNDTX;
 800598c:	4b06      	ldr	r3, [pc, #24]	@ (80059a8 <txDelay+0x58>)
 800598e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8005992:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005996:	b29a      	uxth	r2, r3
 8005998:	4b03      	ldr	r3, [pc, #12]	@ (80059a8 <txDelay+0x58>)
 800599a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	}
}
 800599e:	bf00      	nop
 80059a0:	3708      	adds	r7, #8
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	2000033c 	.word	0x2000033c

080059ac <setDrJoin>:

static void setDrJoin(u1_t reason, u1_t dr)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	4603      	mov	r3, r0
 80059b4:	460a      	mov	r2, r1
 80059b6:	71fb      	strb	r3, [r7, #7]
 80059b8:	4613      	mov	r3, r2
 80059ba:	71bb      	strb	r3, [r7, #6]
					e_.deveui = MAIN::CDEV->getEui(),
					e_.dr = dr|DR_PAGE,
					e_.txpow = LMIC.adrTxPow,
					e_.prevdr = LMIC.datarate|DR_PAGE,
					e_.prevtxpow = LMIC.adrTxPow));
	LMIC.datarate = dr;
 80059bc:	4a04      	ldr	r2, [pc, #16]	@ (80059d0 <setDrJoin+0x24>)
 80059be:	79bb      	ldrb	r3, [r7, #6]
 80059c0:	f882 30b0 	strb.w	r3, [r2, #176]	@ 0xb0
	DO_DEVDB(LMIC.datarate,datarate);
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	2000033c 	.word	0x2000033c

080059d4 <setDrTxpow>:

static void setDrTxpow(u1_t reason, u1_t dr, s1_t pow)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	4603      	mov	r3, r0
 80059dc:	71fb      	strb	r3, [r7, #7]
 80059de:	460b      	mov	r3, r1
 80059e0:	71bb      	strb	r3, [r7, #6]
 80059e2:	4613      	mov	r3, r2
 80059e4:	717b      	strb	r3, [r7, #5]
					e_.dr = dr|DR_PAGE,
					e_.txpow = pow,
					e_.prevdr = LMIC.datarate|DR_PAGE,
					e_.prevtxpow = LMIC.adrTxPow));

	if (pow != KEEP_TXPOW)
 80059e6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80059ea:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 80059ee:	d003      	beq.n	80059f8 <setDrTxpow+0x24>
		LMIC.adrTxPow = pow;
 80059f0:	4a0e      	ldr	r2, [pc, #56]	@ (8005a2c <setDrTxpow+0x58>)
 80059f2:	797b      	ldrb	r3, [r7, #5]
 80059f4:	f882 30af 	strb.w	r3, [r2, #175]	@ 0xaf
	if (LMIC.datarate != dr) {
 80059f8:	4b0c      	ldr	r3, [pc, #48]	@ (8005a2c <setDrTxpow+0x58>)
 80059fa:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80059fe:	79ba      	ldrb	r2, [r7, #6]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d00c      	beq.n	8005a1e <setDrTxpow+0x4a>
		LMIC.datarate = dr;
 8005a04:	4a09      	ldr	r2, [pc, #36]	@ (8005a2c <setDrTxpow+0x58>)
 8005a06:	79bb      	ldrb	r3, [r7, #6]
 8005a08:	f882 30b0 	strb.w	r3, [r2, #176]	@ 0xb0
		DO_DEVDB(LMIC.datarate,datarate);
		LMIC.opmode |= OP_NEXTCHNL;
 8005a0c:	4b07      	ldr	r3, [pc, #28]	@ (8005a2c <setDrTxpow+0x58>)
 8005a0e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8005a12:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	4b04      	ldr	r3, [pc, #16]	@ (8005a2c <setDrTxpow+0x58>)
 8005a1a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	}
}
 8005a1e:	bf00      	nop
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	2000033c 	.word	0x2000033c

08005a30 <initDefaultChannels>:
		// Default operational frequencies
		EU868_F1 | BAND_CENTI, EU868_F2 | BAND_CENTI, EU868_F3 | BAND_CENTI,
		EU868_F4 | BAND_MILLI, EU868_F5 | BAND_MILLI, EU868_F6 | BAND_DECI };

static void initDefaultChannels(bit_t join)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	4603      	mov	r3, r0
 8005a38:	71fb      	strb	r3, [r7, #7]
	os_clearMem(&LMIC.channelFreq, sizeof(LMIC.channelFreq));
 8005a3a:	2240      	movs	r2, #64	@ 0x40
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	483a      	ldr	r0, [pc, #232]	@ (8005b28 <initDefaultChannels+0xf8>)
 8005a40:	f009 fb10 	bl	800f064 <memset>
	os_clearMem(&LMIC.channelDrMap, sizeof(LMIC.channelDrMap));
 8005a44:	2220      	movs	r2, #32
 8005a46:	2100      	movs	r1, #0
 8005a48:	4838      	ldr	r0, [pc, #224]	@ (8005b2c <initDefaultChannels+0xfc>)
 8005a4a:	f009 fb0b 	bl	800f064 <memset>
	os_clearMem(&LMIC.bands, sizeof(LMIC.bands));
 8005a4e:	2220      	movs	r2, #32
 8005a50:	2100      	movs	r1, #0
 8005a52:	4837      	ldr	r0, [pc, #220]	@ (8005b30 <initDefaultChannels+0x100>)
 8005a54:	f009 fb06 	bl	800f064 <memset>

	LMIC.channelMap = (1 << NUM_DEFAULT_CHANNELS) - 1;
 8005a58:	4b36      	ldr	r3, [pc, #216]	@ (8005b34 <initDefaultChannels+0x104>)
 8005a5a:	223f      	movs	r2, #63	@ 0x3f
 8005a5c:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	u1_t su = join ? 0 : NUM_DEFAULT_CHANNELS;
 8005a60:	79fb      	ldrb	r3, [r7, #7]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d001      	beq.n	8005a6a <initDefaultChannels+0x3a>
 8005a66:	2300      	movs	r3, #0
 8005a68:	e000      	b.n	8005a6c <initDefaultChannels+0x3c>
 8005a6a:	2306      	movs	r3, #6
 8005a6c:	73fb      	strb	r3, [r7, #15]
	for (u1_t fu = 0; fu < NUM_DEFAULT_CHANNELS; fu++, su++) {
 8005a6e:	2300      	movs	r3, #0
 8005a70:	73bb      	strb	r3, [r7, #14]
 8005a72:	e014      	b.n	8005a9e <initDefaultChannels+0x6e>
		LMIC.channelFreq[fu] = iniChannelFreq[su];
 8005a74:	7bfa      	ldrb	r2, [r7, #15]
 8005a76:	7bbb      	ldrb	r3, [r7, #14]
 8005a78:	492f      	ldr	r1, [pc, #188]	@ (8005b38 <initDefaultChannels+0x108>)
 8005a7a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005a7e:	492d      	ldr	r1, [pc, #180]	@ (8005b34 <initDefaultChannels+0x104>)
 8005a80:	3310      	adds	r3, #16
 8005a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		LMIC.channelDrMap[fu] = DR_RANGE_MAP(DR_SF12, DR_SF7);
 8005a86:	7bbb      	ldrb	r3, [r7, #14]
 8005a88:	4a2a      	ldr	r2, [pc, #168]	@ (8005b34 <initDefaultChannels+0x104>)
 8005a8a:	3340      	adds	r3, #64	@ 0x40
 8005a8c:	213f      	movs	r1, #63	@ 0x3f
 8005a8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (u1_t fu = 0; fu < NUM_DEFAULT_CHANNELS; fu++, su++) {
 8005a92:	7bbb      	ldrb	r3, [r7, #14]
 8005a94:	3301      	adds	r3, #1
 8005a96:	73bb      	strb	r3, [r7, #14]
 8005a98:	7bfb      	ldrb	r3, [r7, #15]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	73fb      	strb	r3, [r7, #15]
 8005a9e:	7bbb      	ldrb	r3, [r7, #14]
 8005aa0:	2b05      	cmp	r3, #5
 8005aa2:	d9e7      	bls.n	8005a74 <initDefaultChannels+0x44>
//    if( !join ) {
//        LMIC.channelDrMap[5] = DR_RANGE_MAP(DR_SF12,DR_SF7);
//        LMIC.channelDrMap[1] = DR_RANGE_MAP(DR_SF12,DR_FSK);
//    }

	LMIC.bands[BAND_MILLI].txcap = 1000;  // 0.1%
 8005aa4:	4b23      	ldr	r3, [pc, #140]	@ (8005b34 <initDefaultChannels+0x104>)
 8005aa6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005aaa:	841a      	strh	r2, [r3, #32]
	LMIC.bands[BAND_MILLI].txpow = 14;
 8005aac:	4b21      	ldr	r3, [pc, #132]	@ (8005b34 <initDefaultChannels+0x104>)
 8005aae:	220e      	movs	r2, #14
 8005ab0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	LMIC.bands[BAND_MILLI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 8005ab4:	f003 fa42 	bl	8008f3c <radio_rand1>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	f003 030f 	and.w	r3, r3, #15
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8005b34 <initDefaultChannels+0x104>)
 8005ac2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	LMIC.bands[BAND_CENTI].txcap = 100;   // 1%
 8005ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8005b34 <initDefaultChannels+0x104>)
 8005ac8:	2264      	movs	r2, #100	@ 0x64
 8005aca:	851a      	strh	r2, [r3, #40]	@ 0x28
	LMIC.bands[BAND_CENTI].txpow = 14;
 8005acc:	4b19      	ldr	r3, [pc, #100]	@ (8005b34 <initDefaultChannels+0x104>)
 8005ace:	220e      	movs	r2, #14
 8005ad0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	LMIC.bands[BAND_CENTI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 8005ad4:	f003 fa32 	bl	8008f3c <radio_rand1>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	f003 030f 	and.w	r3, r3, #15
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	4b14      	ldr	r3, [pc, #80]	@ (8005b34 <initDefaultChannels+0x104>)
 8005ae2:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	LMIC.bands[BAND_DECI].txcap = 10;    // 10%
 8005ae6:	4b13      	ldr	r3, [pc, #76]	@ (8005b34 <initDefaultChannels+0x104>)
 8005ae8:	220a      	movs	r2, #10
 8005aea:	861a      	strh	r2, [r3, #48]	@ 0x30
	LMIC.bands[BAND_DECI].txpow = 27;
 8005aec:	4b11      	ldr	r3, [pc, #68]	@ (8005b34 <initDefaultChannels+0x104>)
 8005aee:	221b      	movs	r2, #27
 8005af0:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
	LMIC.bands[BAND_DECI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 8005af4:	f003 fa22 	bl	8008f3c <radio_rand1>
 8005af8:	4603      	mov	r3, r0
 8005afa:	f003 030f 	and.w	r3, r3, #15
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	4b0c      	ldr	r3, [pc, #48]	@ (8005b34 <initDefaultChannels+0x104>)
 8005b02:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
	LMIC.bands[BAND_MILLI].avail = LMIC.bands[BAND_CENTI].avail =
			LMIC.bands[BAND_DECI].avail = os_getTime();
 8005b06:	f002 fcef 	bl	80084e8 <os_getTime>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	4a09      	ldr	r2, [pc, #36]	@ (8005b34 <initDefaultChannels+0x104>)
 8005b0e:	6353      	str	r3, [r2, #52]	@ 0x34
 8005b10:	4b08      	ldr	r3, [pc, #32]	@ (8005b34 <initDefaultChannels+0x104>)
 8005b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
	LMIC.bands[BAND_MILLI].avail = LMIC.bands[BAND_CENTI].avail =
 8005b14:	4a07      	ldr	r2, [pc, #28]	@ (8005b34 <initDefaultChannels+0x104>)
 8005b16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005b18:	4b06      	ldr	r3, [pc, #24]	@ (8005b34 <initDefaultChannels+0x104>)
 8005b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b1c:	4a05      	ldr	r2, [pc, #20]	@ (8005b34 <initDefaultChannels+0x104>)
 8005b1e:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8005b20:	bf00      	nop
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	2000037c 	.word	0x2000037c
 8005b2c:	200003bc 	.word	0x200003bc
 8005b30:	2000035c 	.word	0x2000035c
 8005b34:	2000033c 	.word	0x2000033c
 8005b38:	08012dac 	.word	0x08012dac

08005b3c <LMIC_setupChannel>:
	b->lastchnl = os_getRndU1() % MAX_CHANNELS;
	return 1;
}

bit_t LMIC_setupChannel(u1_t chidx, u4_t freq, u2_t drmap, s1_t band)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6039      	str	r1, [r7, #0]
 8005b44:	4611      	mov	r1, r2
 8005b46:	461a      	mov	r2, r3
 8005b48:	4603      	mov	r3, r0
 8005b4a:	71fb      	strb	r3, [r7, #7]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	80bb      	strh	r3, [r7, #4]
 8005b50:	4613      	mov	r3, r2
 8005b52:	71bb      	strb	r3, [r7, #6]
	if (chidx >= MAX_CHANNELS)
 8005b54:	79fb      	ldrb	r3, [r7, #7]
 8005b56:	2b0f      	cmp	r3, #15
 8005b58:	d901      	bls.n	8005b5e <LMIC_setupChannel+0x22>
		return 0;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	e054      	b.n	8005c08 <LMIC_setupChannel+0xcc>
	if (band == -1) {
 8005b5e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005b62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b66:	d121      	bne.n	8005bac <LMIC_setupChannel+0x70>
		if (freq >= 869400000 && freq <= 869650000)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	4a2a      	ldr	r2, [pc, #168]	@ (8005c14 <LMIC_setupChannel+0xd8>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d908      	bls.n	8005b82 <LMIC_setupChannel+0x46>
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	4a29      	ldr	r2, [pc, #164]	@ (8005c18 <LMIC_setupChannel+0xdc>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d804      	bhi.n	8005b82 <LMIC_setupChannel+0x46>
			freq |= BAND_DECI;   // 10% 27dBm
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	f043 0302 	orr.w	r3, r3, #2
 8005b7e:	603b      	str	r3, [r7, #0]
 8005b80:	e021      	b.n	8005bc6 <LMIC_setupChannel+0x8a>
		else if ((freq >= 868000000 && freq <= 868600000)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	4a25      	ldr	r2, [pc, #148]	@ (8005c1c <LMIC_setupChannel+0xe0>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d903      	bls.n	8005b92 <LMIC_setupChannel+0x56>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	4a24      	ldr	r2, [pc, #144]	@ (8005c20 <LMIC_setupChannel+0xe4>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d907      	bls.n	8005ba2 <LMIC_setupChannel+0x66>
				|| (freq >= 869700000 && freq <= 870000000))
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	4a23      	ldr	r2, [pc, #140]	@ (8005c24 <LMIC_setupChannel+0xe8>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d315      	bcc.n	8005bc6 <LMIC_setupChannel+0x8a>
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	4a22      	ldr	r2, [pc, #136]	@ (8005c28 <LMIC_setupChannel+0xec>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d811      	bhi.n	8005bc6 <LMIC_setupChannel+0x8a>
			freq |= BAND_CENTI;  // 1% 14dBm 
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	f043 0301 	orr.w	r3, r3, #1
 8005ba8:	603b      	str	r3, [r7, #0]
 8005baa:	e00c      	b.n	8005bc6 <LMIC_setupChannel+0x8a>
		else
			freq |= BAND_MILLI;  // 0.1% 14dBm
	} else {
		if (band > BAND_AUX)
 8005bac:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005bb0:	2b03      	cmp	r3, #3
 8005bb2:	dd01      	ble.n	8005bb8 <LMIC_setupChannel+0x7c>
			return 0;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	e027      	b.n	8005c08 <LMIC_setupChannel+0xcc>
		freq = (freq & ~3) | band;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	f023 0203 	bic.w	r2, r3, #3
 8005bbe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	603b      	str	r3, [r7, #0]
	}
	LMIC.channelFreq[chidx] = freq;
 8005bc6:	79fb      	ldrb	r3, [r7, #7]
 8005bc8:	4918      	ldr	r1, [pc, #96]	@ (8005c2c <LMIC_setupChannel+0xf0>)
 8005bca:	3310      	adds	r3, #16
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	LMIC.channelDrMap[chidx] =
 8005bd2:	88bb      	ldrh	r3, [r7, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <LMIC_setupChannel+0xa0>
 8005bd8:	88ba      	ldrh	r2, [r7, #4]
 8005bda:	e000      	b.n	8005bde <LMIC_setupChannel+0xa2>
 8005bdc:	223f      	movs	r2, #63	@ 0x3f
 8005bde:	79fb      	ldrb	r3, [r7, #7]
 8005be0:	4912      	ldr	r1, [pc, #72]	@ (8005c2c <LMIC_setupChannel+0xf0>)
 8005be2:	3340      	adds	r3, #64	@ 0x40
 8005be4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			drmap == 0 ? DR_RANGE_MAP(DR_SF12, DR_SF7) : drmap;
	LMIC.channelMap |= 1 << chidx;  // enabled right away
 8005be8:	4b10      	ldr	r3, [pc, #64]	@ (8005c2c <LMIC_setupChannel+0xf0>)
 8005bea:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8005bee:	b21a      	sxth	r2, r3
 8005bf0:	79fb      	ldrb	r3, [r7, #7]
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf8:	b21b      	sxth	r3, r3
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	b21b      	sxth	r3, r3
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	4b0a      	ldr	r3, [pc, #40]	@ (8005c2c <LMIC_setupChannel+0xf0>)
 8005c02:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	return 1;
 8005c06:	2301      	movs	r3, #1
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	33d1fdbf 	.word	0x33d1fdbf
 8005c18:	33d5ce50 	.word	0x33d5ce50
 8005c1c:	33bca0ff 	.word	0x33bca0ff
 8005c20:	33c5c8c0 	.word	0x33c5c8c0
 8005c24:	33d691a0 	.word	0x33d691a0
 8005c28:	33db2580 	.word	0x33db2580
 8005c2c:	2000033c 	.word	0x2000033c

08005c30 <convFreq>:
	LMIC.channelDrMap[channel] = 0;
	LMIC.channelMap &= ~(1 << channel);
}

static u4_t convFreq(xref2u1_t ptr)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
	u4_t freq = (os_rlsbf4(ptr - 1) >> 8) * 100;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7ff f9c3 	bl	8004fc8 <os_rlsbf4>
 8005c42:	4603      	mov	r3, r0
 8005c44:	0a1b      	lsrs	r3, r3, #8
 8005c46:	2264      	movs	r2, #100	@ 0x64
 8005c48:	fb02 f303 	mul.w	r3, r2, r3
 8005c4c:	60fb      	str	r3, [r7, #12]
	if (freq < EU868_FREQ_MIN || freq > EU868_FREQ_MAX)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	4a06      	ldr	r2, [pc, #24]	@ (8005c6c <convFreq+0x3c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d303      	bcc.n	8005c5e <convFreq+0x2e>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	4a05      	ldr	r2, [pc, #20]	@ (8005c70 <convFreq+0x40>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d901      	bls.n	8005c62 <convFreq+0x32>
		freq = 0;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	60fb      	str	r3, [r7, #12]
	return freq;
 8005c62:	68fb      	ldr	r3, [r7, #12]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	337055c0 	.word	0x337055c0
 8005c70:	33db2580 	.word	0x33db2580

08005c74 <mapChannels>:

static u1_t mapChannels(u1_t chpage, u2_t chmap)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	460a      	mov	r2, r1
 8005c7e:	71fb      	strb	r3, [r7, #7]
 8005c80:	4613      	mov	r3, r2
 8005c82:	80bb      	strh	r3, [r7, #4]
	// Bad page, disable all channel, enable non-existent
	if (chpage != 0 || chmap == 0 || (chmap & ~LMIC.channelMap) != 0)
 8005c84:	79fb      	ldrb	r3, [r7, #7]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10a      	bne.n	8005ca0 <mapChannels+0x2c>
 8005c8a:	88bb      	ldrh	r3, [r7, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d007      	beq.n	8005ca0 <mapChannels+0x2c>
 8005c90:	88ba      	ldrh	r2, [r7, #4]
 8005c92:	4b1c      	ldr	r3, [pc, #112]	@ (8005d04 <mapChannels+0x90>)
 8005c94:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8005c98:	43db      	mvns	r3, r3
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d001      	beq.n	8005ca4 <mapChannels+0x30>
		return 0;  // illegal input
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	e028      	b.n	8005cf6 <mapChannels+0x82>
	for (u1_t chnl = 0; chnl < MAX_CHANNELS; chnl++) {
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	73fb      	strb	r3, [r7, #15]
 8005ca8:	e01d      	b.n	8005ce6 <mapChannels+0x72>
		if ((chmap & (1 << chnl)) != 0 && LMIC.channelFreq[chnl] == 0)
 8005caa:	88ba      	ldrh	r2, [r7, #4]
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
 8005cae:	fa42 f303 	asr.w	r3, r2, r3
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d012      	beq.n	8005ce0 <mapChannels+0x6c>
 8005cba:	7bfb      	ldrb	r3, [r7, #15]
 8005cbc:	4a11      	ldr	r2, [pc, #68]	@ (8005d04 <mapChannels+0x90>)
 8005cbe:	3310      	adds	r3, #16
 8005cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10b      	bne.n	8005ce0 <mapChannels+0x6c>
			chmap &= ~(1 << chnl); // ignore - channel is not defined
 8005cc8:	7bfb      	ldrb	r3, [r7, #15]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd0:	b21b      	sxth	r3, r3
 8005cd2:	43db      	mvns	r3, r3
 8005cd4:	b21a      	sxth	r2, r3
 8005cd6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005cda:	4013      	ands	r3, r2
 8005cdc:	b21b      	sxth	r3, r3
 8005cde:	80bb      	strh	r3, [r7, #4]
	for (u1_t chnl = 0; chnl < MAX_CHANNELS; chnl++) {
 8005ce0:	7bfb      	ldrb	r3, [r7, #15]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	73fb      	strb	r3, [r7, #15]
 8005ce6:	7bfb      	ldrb	r3, [r7, #15]
 8005ce8:	2b0f      	cmp	r3, #15
 8005cea:	d9de      	bls.n	8005caa <mapChannels+0x36>
	}
	LMIC.channelMap = chmap;
 8005cec:	4a05      	ldr	r2, [pc, #20]	@ (8005d04 <mapChannels+0x90>)
 8005cee:	88bb      	ldrh	r3, [r7, #4]
 8005cf0:	f8a2 30a0 	strh.w	r3, [r2, #160]	@ 0xa0
	return 1;
 8005cf4:	2301      	movs	r3, #1
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	2000033c 	.word	0x2000033c

08005d08 <updateTx>:

static void updateTx(ostime_t txbeg)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
	u4_t freq = LMIC.channelFreq[LMIC.txChnl];
 8005d10:	4b21      	ldr	r3, [pc, #132]	@ (8005d98 <updateTx+0x90>)
 8005d12:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8005d16:	4a20      	ldr	r2, [pc, #128]	@ (8005d98 <updateTx+0x90>)
 8005d18:	3310      	adds	r3, #16
 8005d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d1e:	617b      	str	r3, [r7, #20]
	// Update global/band specific duty cycle stats
	ostime_t airtime = calcAirTime(LMIC.rps, LMIC.dataLen);
 8005d20:	4b1d      	ldr	r3, [pc, #116]	@ (8005d98 <updateTx+0x90>)
 8005d22:	89db      	ldrh	r3, [r3, #14]
 8005d24:	4a1c      	ldr	r2, [pc, #112]	@ (8005d98 <updateTx+0x90>)
 8005d26:	f892 2147 	ldrb.w	r2, [r2, #327]	@ 0x147
 8005d2a:	4611      	mov	r1, r2
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7ff fba3 	bl	8005478 <calcAirTime>
 8005d32:	6138      	str	r0, [r7, #16]
	// Update channel/global duty cycle stats
	xref2band_t band = &LMIC.bands[freq & 0x3];
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f003 0303 	and.w	r3, r3, #3
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	00db      	lsls	r3, r3, #3
 8005d3e:	4a16      	ldr	r2, [pc, #88]	@ (8005d98 <updateTx+0x90>)
 8005d40:	4413      	add	r3, r2
 8005d42:	60fb      	str	r3, [r7, #12]
	LMIC.freq = freq & ~(u4_t) 3;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	f023 0303 	bic.w	r3, r3, #3
 8005d4a:	4a13      	ldr	r2, [pc, #76]	@ (8005d98 <updateTx+0x90>)
 8005d4c:	6093      	str	r3, [r2, #8]
	LMIC.txpow = band->txpow;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8005d54:	4b10      	ldr	r3, [pc, #64]	@ (8005d98 <updateTx+0x90>)
 8005d56:	749a      	strb	r2, [r3, #18]
	band->avail = txbeg + airtime * band->txcap;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	881b      	ldrh	r3, [r3, #0]
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	fb03 f202 	mul.w	r2, r3, r2
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	441a      	add	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	605a      	str	r2, [r3, #4]
	if (LMIC.globalDutyRate != 0)
 8005d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8005d98 <updateTx+0x90>)
 8005d6e:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00b      	beq.n	8005d8e <updateTx+0x86>
		LMIC.globalDutyAvail = txbeg + (airtime << LMIC.globalDutyRate);
 8005d76:	4b08      	ldr	r3, [pc, #32]	@ (8005d98 <updateTx+0x90>)
 8005d78:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	fa03 f202 	lsl.w	r2, r3, r2
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4413      	add	r3, r2
 8005d88:	4a03      	ldr	r2, [pc, #12]	@ (8005d98 <updateTx+0x90>)
 8005d8a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
}
 8005d8e:	bf00      	nop
 8005d90:	3718      	adds	r7, #24
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	2000033c 	.word	0x2000033c

08005d9c <nextTx>:

static ostime_t nextTx(ostime_t now)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b087      	sub	sp, #28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
	u1_t bmap = 0xF;
 8005da4:	230f      	movs	r3, #15
 8005da6:	75fb      	strb	r3, [r7, #23]
	do {
		ostime_t mintime = now + /*10h*/36000 * OSTICKS_PER_SEC;
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	4b48      	ldr	r3, [pc, #288]	@ (8005ecc <nextTx+0x130>)
 8005dac:	4413      	add	r3, r2
 8005dae:	613b      	str	r3, [r7, #16]
		u1_t band = 0;
 8005db0:	2300      	movs	r3, #0
 8005db2:	73fb      	strb	r3, [r7, #15]
		for (u1_t bi = 0; bi < 4; bi++) {
 8005db4:	2300      	movs	r3, #0
 8005db6:	73bb      	strb	r3, [r7, #14]
 8005db8:	e01d      	b.n	8005df6 <nextTx+0x5a>
			if ((bmap & (1 << bi)) && mintime - LMIC.bands[bi].avail > 0)
 8005dba:	7dfa      	ldrb	r2, [r7, #23]
 8005dbc:	7bbb      	ldrb	r3, [r7, #14]
 8005dbe:	fa42 f303 	asr.w	r3, r2, r3
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d012      	beq.n	8005df0 <nextTx+0x54>
 8005dca:	7bbb      	ldrb	r3, [r7, #14]
 8005dcc:	4a40      	ldr	r2, [pc, #256]	@ (8005ed0 <nextTx+0x134>)
 8005dce:	3304      	adds	r3, #4
 8005dd0:	00db      	lsls	r3, r3, #3
 8005dd2:	4413      	add	r3, r2
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	dd08      	ble.n	8005df0 <nextTx+0x54>
				mintime = LMIC.bands[band = bi].avail;
 8005dde:	7bbb      	ldrb	r3, [r7, #14]
 8005de0:	73fb      	strb	r3, [r7, #15]
 8005de2:	7bfb      	ldrb	r3, [r7, #15]
 8005de4:	4a3a      	ldr	r2, [pc, #232]	@ (8005ed0 <nextTx+0x134>)
 8005de6:	3304      	adds	r3, #4
 8005de8:	00db      	lsls	r3, r3, #3
 8005dea:	4413      	add	r3, r2
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	613b      	str	r3, [r7, #16]
		for (u1_t bi = 0; bi < 4; bi++) {
 8005df0:	7bbb      	ldrb	r3, [r7, #14]
 8005df2:	3301      	adds	r3, #1
 8005df4:	73bb      	strb	r3, [r7, #14]
 8005df6:	7bbb      	ldrb	r3, [r7, #14]
 8005df8:	2b03      	cmp	r3, #3
 8005dfa:	d9de      	bls.n	8005dba <nextTx+0x1e>
		}
		// Find next channel in given band
		u1_t chnl = LMIC.bands[band].lastchnl;
 8005dfc:	7bfb      	ldrb	r3, [r7, #15]
 8005dfe:	4a34      	ldr	r2, [pc, #208]	@ (8005ed0 <nextTx+0x134>)
 8005e00:	3304      	adds	r3, #4
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	4413      	add	r3, r2
 8005e06:	78db      	ldrb	r3, [r3, #3]
 8005e08:	737b      	strb	r3, [r7, #13]
		for (u1_t ci = 0; ci < MAX_CHANNELS; ci++) {
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	733b      	strb	r3, [r7, #12]
 8005e0e:	e042      	b.n	8005e96 <nextTx+0xfa>
			if ((chnl = (chnl + 1)) >= MAX_CHANNELS)
 8005e10:	7b7b      	ldrb	r3, [r7, #13]
 8005e12:	3301      	adds	r3, #1
 8005e14:	737b      	strb	r3, [r7, #13]
 8005e16:	7b7b      	ldrb	r3, [r7, #13]
 8005e18:	2b0f      	cmp	r3, #15
 8005e1a:	d902      	bls.n	8005e22 <nextTx+0x86>
				chnl -= MAX_CHANNELS;
 8005e1c:	7b7b      	ldrb	r3, [r7, #13]
 8005e1e:	3b10      	subs	r3, #16
 8005e20:	737b      	strb	r3, [r7, #13]
			if ((LMIC.channelMap & (1 << chnl)) != 0 &&  // channel enabled
 8005e22:	4b2b      	ldr	r3, [pc, #172]	@ (8005ed0 <nextTx+0x134>)
 8005e24:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8005e28:	461a      	mov	r2, r3
 8005e2a:	7b7b      	ldrb	r3, [r7, #13]
 8005e2c:	fa42 f303 	asr.w	r3, r2, r3
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d02b      	beq.n	8005e90 <nextTx+0xf4>
					(LMIC.channelDrMap[chnl] & (1 << (LMIC.datarate & 0xF)))
 8005e38:	7b7b      	ldrb	r3, [r7, #13]
 8005e3a:	4a25      	ldr	r2, [pc, #148]	@ (8005ed0 <nextTx+0x134>)
 8005e3c:	3340      	adds	r3, #64	@ 0x40
 8005e3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e42:	461a      	mov	r2, r3
 8005e44:	4b22      	ldr	r3, [pc, #136]	@ (8005ed0 <nextTx+0x134>)
 8005e46:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8005e4a:	f003 030f 	and.w	r3, r3, #15
							!= 0 && band == (LMIC.channelFreq[chnl] & 0x3)) { // in selected band
 8005e4e:	fa42 f303 	asr.w	r3, r2, r3
 8005e52:	f003 0301 	and.w	r3, r3, #1
			if ((LMIC.channelMap & (1 << chnl)) != 0 &&  // channel enabled
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d01a      	beq.n	8005e90 <nextTx+0xf4>
							!= 0 && band == (LMIC.channelFreq[chnl] & 0x3)) { // in selected band
 8005e5a:	7bfa      	ldrb	r2, [r7, #15]
 8005e5c:	7b7b      	ldrb	r3, [r7, #13]
 8005e5e:	491c      	ldr	r1, [pc, #112]	@ (8005ed0 <nextTx+0x134>)
 8005e60:	3310      	adds	r3, #16
 8005e62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e66:	f003 0303 	and.w	r3, r3, #3
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d110      	bne.n	8005e90 <nextTx+0xf4>
				LMIC.txChnl = LMIC.bands[band].lastchnl = chnl;
 8005e6e:	7bfa      	ldrb	r2, [r7, #15]
 8005e70:	4917      	ldr	r1, [pc, #92]	@ (8005ed0 <nextTx+0x134>)
 8005e72:	1d13      	adds	r3, r2, #4
 8005e74:	00db      	lsls	r3, r3, #3
 8005e76:	440b      	add	r3, r1
 8005e78:	7b79      	ldrb	r1, [r7, #13]
 8005e7a:	70d9      	strb	r1, [r3, #3]
 8005e7c:	4914      	ldr	r1, [pc, #80]	@ (8005ed0 <nextTx+0x134>)
 8005e7e:	1d13      	adds	r3, r2, #4
 8005e80:	00db      	lsls	r3, r3, #3
 8005e82:	440b      	add	r3, r1
 8005e84:	78da      	ldrb	r2, [r3, #3]
 8005e86:	4b12      	ldr	r3, [pc, #72]	@ (8005ed0 <nextTx+0x134>)
 8005e88:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
				return mintime;
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	e016      	b.n	8005ebe <nextTx+0x122>
		for (u1_t ci = 0; ci < MAX_CHANNELS; ci++) {
 8005e90:	7b3b      	ldrb	r3, [r7, #12]
 8005e92:	3301      	adds	r3, #1
 8005e94:	733b      	strb	r3, [r7, #12]
 8005e96:	7b3b      	ldrb	r3, [r7, #12]
 8005e98:	2b0f      	cmp	r3, #15
 8005e9a:	d9b9      	bls.n	8005e10 <nextTx+0x74>
			}
		}
		if ((bmap &= ~(1 << band)) == 0) {
 8005e9c:	7bfb      	ldrb	r3, [r7, #15]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea4:	b25b      	sxtb	r3, r3
 8005ea6:	43db      	mvns	r3, r3
 8005ea8:	b25a      	sxtb	r2, r3
 8005eaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005eae:	4013      	ands	r3, r2
 8005eb0:	b25b      	sxtb	r3, r3
 8005eb2:	75fb      	strb	r3, [r7, #23]
 8005eb4:	7dfb      	ldrb	r3, [r7, #23]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f47f af76 	bne.w	8005da8 <nextTx+0xc>
			// No feasible channel  found!
			return mintime;
 8005ebc:	693b      	ldr	r3, [r7, #16]
		}
	} while (1);
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	371c      	adds	r7, #28
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	44aa2000 	.word	0x44aa2000
 8005ed0:	2000033c 	.word	0x2000033c

08005ed4 <setBcnRxParams>:

static void setBcnRxParams(void)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	af00      	add	r7, sp, #0
	LMIC.dataLen = 0;
 8005ed8:	4b10      	ldr	r3, [pc, #64]	@ (8005f1c <setBcnRxParams+0x48>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
	LMIC.freq = LMIC.channelFreq[LMIC.bcnChnl] & ~(u4_t) 3;
 8005ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8005f1c <setBcnRxParams+0x48>)
 8005ee2:	f893 3188 	ldrb.w	r3, [r3, #392]	@ 0x188
 8005ee6:	4a0d      	ldr	r2, [pc, #52]	@ (8005f1c <setBcnRxParams+0x48>)
 8005ee8:	3310      	adds	r3, #16
 8005eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eee:	f023 0303 	bic.w	r3, r3, #3
 8005ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8005f1c <setBcnRxParams+0x48>)
 8005ef4:	6093      	str	r3, [r2, #8]
	LMIC.rps = setIh(setNocrc(dndr2rps((dr_t) DR_BCN), 1), LEN_BCN);
 8005ef6:	2003      	movs	r0, #3
 8005ef8:	f7fe fff6 	bl	8004ee8 <dndr2rps>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2101      	movs	r1, #1
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7fe ffa2 	bl	8004e4a <setNocrc>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2111      	movs	r1, #17
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7fe ffc3 	bl	8004e96 <setIh>
 8005f10:	4603      	mov	r3, r0
 8005f12:	461a      	mov	r2, r3
 8005f14:	4b01      	ldr	r3, [pc, #4]	@ (8005f1c <setBcnRxParams+0x48>)
 8005f16:	81da      	strh	r2, [r3, #14]
}
 8005f18:	bf00      	nop
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	2000033c 	.word	0x2000033c

08005f20 <initJoinLoop>:

#define setRx1Params() /*LMIC.freq/rps remain unchanged*/

static void initJoinLoop(void)
{
 8005f20:	b598      	push	{r3, r4, r7, lr}
 8005f22:	af00      	add	r7, sp, #0
#if CFG_TxContinuousMode
  LMIC.txChnl = 0;
#else
	LMIC.txChnl = os_getRndU1() % NUM_DEFAULT_CHANNELS;
 8005f24:	f003 f80a 	bl	8008f3c <radio_rand1>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	4b15      	ldr	r3, [pc, #84]	@ (8005f84 <initJoinLoop+0x64>)
 8005f2e:	fba3 1302 	umull	r1, r3, r3, r2
 8005f32:	0899      	lsrs	r1, r3, #2
 8005f34:	460b      	mov	r3, r1
 8005f36:	005b      	lsls	r3, r3, #1
 8005f38:	440b      	add	r3, r1
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	b2da      	uxtb	r2, r3
 8005f40:	4b11      	ldr	r3, [pc, #68]	@ (8005f88 <initJoinLoop+0x68>)
 8005f42:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
#endif
	LMIC.adrTxPow = 14;
 8005f46:	4b10      	ldr	r3, [pc, #64]	@ (8005f88 <initJoinLoop+0x68>)
 8005f48:	220e      	movs	r2, #14
 8005f4a:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf
	setDrJoin(DRCHG_SET, DR_SF7);
 8005f4e:	2105      	movs	r1, #5
 8005f50:	2000      	movs	r0, #0
 8005f52:	f7ff fd2b 	bl	80059ac <setDrJoin>
	initDefaultChannels(1);
 8005f56:	2001      	movs	r0, #1
 8005f58:	f7ff fd6a 	bl	8005a30 <initDefaultChannels>
	ASSERT((LMIC.opmode & OP_NEXTCHNL) == 0);
 8005f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005f88 <initJoinLoop+0x68>)
 8005f5e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8005f62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <initJoinLoop+0x4e>
 8005f6a:	f7fe fe71 	bl	8004c50 <hal_failed>
	LMIC.txend = LMIC.bands[BAND_MILLI].avail + rndDelay(8);
 8005f6e:	4b06      	ldr	r3, [pc, #24]	@ (8005f88 <initJoinLoop+0x68>)
 8005f70:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8005f72:	2008      	movs	r0, #8
 8005f74:	f7ff fcae 	bl	80058d4 <rndDelay>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	4423      	add	r3, r4
 8005f7c:	4a02      	ldr	r2, [pc, #8]	@ (8005f88 <initJoinLoop+0x68>)
 8005f7e:	6013      	str	r3, [r2, #0]
}
 8005f80:	bf00      	nop
 8005f82:	bd98      	pop	{r3, r4, r7, pc}
 8005f84:	aaaaaaab 	.word	0xaaaaaaab
 8005f88:	2000033c 	.word	0x2000033c

08005f8c <nextJoinState>:

static ostime_t nextJoinState(void)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
	u1_t failed = 0;
 8005f92:	2300      	movs	r3, #0
 8005f94:	71fb      	strb	r3, [r7, #7]

	// Try 869.x and then 864.x with same DR
	// If both fail try next lower datarate
	if (++LMIC.txChnl == NUM_DEFAULT_CHANNELS)
 8005f96:	4b30      	ldr	r3, [pc, #192]	@ (8006058 <nextJoinState+0xcc>)
 8005f98:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	4b2d      	ldr	r3, [pc, #180]	@ (8006058 <nextJoinState+0xcc>)
 8005fa2:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
 8005fa6:	4b2c      	ldr	r3, [pc, #176]	@ (8006058 <nextJoinState+0xcc>)
 8005fa8:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8005fac:	2b06      	cmp	r3, #6
 8005fae:	d103      	bne.n	8005fb8 <nextJoinState+0x2c>
		LMIC.txChnl = 0;
 8005fb0:	4b29      	ldr	r3, [pc, #164]	@ (8006058 <nextJoinState+0xcc>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
	if ((++LMIC.txCnt & 1) == 0) {
 8005fb8:	4b27      	ldr	r3, [pc, #156]	@ (8006058 <nextJoinState+0xcc>)
 8005fba:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	4b25      	ldr	r3, [pc, #148]	@ (8006058 <nextJoinState+0xcc>)
 8005fc4:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
 8005fc8:	4b23      	ldr	r3, [pc, #140]	@ (8006058 <nextJoinState+0xcc>)
 8005fca:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d112      	bne.n	8005ffc <nextJoinState+0x70>
		// Lower DR every 2nd try (having tried 868.x and 864.x with the same DR)
		if (LMIC.datarate == DR_SF9)
 8005fd6:	4b20      	ldr	r3, [pc, #128]	@ (8006058 <nextJoinState+0xcc>)
 8005fd8:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8005fdc:	2b03      	cmp	r3, #3
 8005fde:	d102      	bne.n	8005fe6 <nextJoinState+0x5a>
			failed = 1; // we have tried all DR - signal EV_JOIN_FAILED
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	71fb      	strb	r3, [r7, #7]
 8005fe4:	e00a      	b.n	8005ffc <nextJoinState+0x70>
		else
			setDrJoin(DRCHG_NOJACC, decDR((dr_t) LMIC.datarate));
 8005fe6:	4b1c      	ldr	r3, [pc, #112]	@ (8006058 <nextJoinState+0xcc>)
 8005fe8:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7fe ff8f 	bl	8004f10 <decDR>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	2001      	movs	r0, #1
 8005ff8:	f7ff fcd8 	bl	80059ac <setDrJoin>
	}
	// Clear NEXTCHNL because join state engine controls channel hopping
	LMIC.opmode &= ~OP_NEXTCHNL;
 8005ffc:	4b16      	ldr	r3, [pc, #88]	@ (8006058 <nextJoinState+0xcc>)
 8005ffe:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006002:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006006:	b29a      	uxth	r2, r3
 8006008:	4b13      	ldr	r3, [pc, #76]	@ (8006058 <nextJoinState+0xcc>)
 800600a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	// Move txend to randomize synchronized concurrent joins.
	// Duty cycle is based on txend.
	ostime_t time = os_getTime();
 800600e:	f002 fa6b 	bl	80084e8 <os_getTime>
 8006012:	6038      	str	r0, [r7, #0]
	if (time - LMIC.bands[BAND_MILLI].avail < 0)
 8006014:	4b10      	ldr	r3, [pc, #64]	@ (8006058 <nextJoinState+0xcc>)
 8006016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	2b00      	cmp	r3, #0
 800601e:	da02      	bge.n	8006026 <nextJoinState+0x9a>
		time = LMIC.bands[BAND_MILLI].avail;
 8006020:	4b0d      	ldr	r3, [pc, #52]	@ (8006058 <nextJoinState+0xcc>)
 8006022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006024:	603b      	str	r3, [r7, #0]
	// Avoid collision with JOIN ACCEPT @ SF12 being sent by GW (but we missed it)
			? DNW2_SAFETY_ZONE
			// Otherwise: randomize join (street lamp case):
			// SF12:255, SF11:127, .., SF7:8secs
			:
				DNW2_SAFETY_ZONE + rndDelay(255 >> LMIC.datarate));
 8006026:	4b0c      	ldr	r3, [pc, #48]	@ (8006058 <nextJoinState+0xcc>)
 8006028:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800602c:	461a      	mov	r2, r3
 800602e:	23ff      	movs	r3, #255	@ 0xff
 8006030:	4113      	asrs	r3, r2
 8006032:	b2db      	uxtb	r3, r3
 8006034:	4618      	mov	r0, r3
 8006036:	f7ff fc4d 	bl	80058d4 <rndDelay>
 800603a:	4603      	mov	r3, r0
 800603c:	f503 33bb 	add.w	r3, r3, #95744	@ 0x17600
 8006040:	f503 7380 	add.w	r3, r3, #256	@ 0x100
	LMIC.txend = time + (isTESTMODE()
 8006044:	683a      	ldr	r2, [r7, #0]
 8006046:	4413      	add	r3, r2
 8006048:	4a03      	ldr	r2, [pc, #12]	@ (8006058 <nextJoinState+0xcc>)
 800604a:	6013      	str	r3, [r2, #0]
	// 1 - triggers EV_JOIN_FAILED event
	return failed;
 800604c:	79fb      	ldrb	r3, [r7, #7]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	2000033c 	.word	0x2000033c

0800605c <runEngineUpdate>:
#else
#error Unsupported frequency band!
#endif

static void runEngineUpdate(xref2osjob_t osjob)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
	engineUpdate();
 8006064:	f001 fcb6 	bl	80079d4 <engineUpdate>
}
 8006068:	bf00      	nop
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <reportEvent>:

static void reportEvent(ev_t ev)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	4603      	mov	r3, r0
 8006078:	71fb      	strb	r3, [r7, #7]
	EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
					e_.eui = MAIN::CDEV->getEui(),
					e_.info = ev));
	ON_LMIC_EVENT(ev);
 800607a:	79fb      	ldrb	r3, [r7, #7]
 800607c:	4618      	mov	r0, r3
 800607e:	f002 f84d 	bl	800811c <onEvent>
	engineUpdate();
 8006082:	f001 fca7 	bl	80079d4 <engineUpdate>
}
 8006086:	bf00      	nop
 8006088:	3708      	adds	r7, #8
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <runReset>:

static void runReset(xref2osjob_t osjob)
{
 800608e:	b580      	push	{r7, lr}
 8006090:	b082      	sub	sp, #8
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
	// Disable session
	LMIC_reset();
 8006096:	f001 fe67 	bl	8007d68 <LMIC_reset>
	LMIC_startJoining();
 800609a:	f001 fa0f 	bl	80074bc <LMIC_startJoining>
	reportEvent(EV_RESET);
 800609e:	200c      	movs	r0, #12
 80060a0:	f7ff ffe6 	bl	8006070 <reportEvent>
}
 80060a4:	bf00      	nop
 80060a6:	3708      	adds	r7, #8
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <stateJustJoined>:

static void stateJustJoined(void)
{
 80060ac:	b480      	push	{r7}
 80060ae:	af00      	add	r7, sp, #0
	LMIC.seqnoDn = LMIC.seqnoUp = 0;
 80060b0:	4b2f      	ldr	r3, [pc, #188]	@ (8006170 <stateJustJoined+0xc4>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
 80060b8:	4b2d      	ldr	r3, [pc, #180]	@ (8006170 <stateJustJoined+0xc4>)
 80060ba:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80060be:	4a2c      	ldr	r2, [pc, #176]	@ (8006170 <stateJustJoined+0xc4>)
 80060c0:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
	LMIC.rejoinCnt = 0;
 80060c4:	4b2a      	ldr	r3, [pc, #168]	@ (8006170 <stateJustJoined+0xc4>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
	LMIC.dnConf = LMIC.adrChanged = LMIC.ladrAns = LMIC.devsAns = 0;
 80060cc:	4b28      	ldr	r3, [pc, #160]	@ (8006170 <stateJustJoined+0xc4>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
 80060d4:	4b26      	ldr	r3, [pc, #152]	@ (8006170 <stateJustJoined+0xc4>)
 80060d6:	f893 2126 	ldrb.w	r2, [r3, #294]	@ 0x126
 80060da:	4b25      	ldr	r3, [pc, #148]	@ (8006170 <stateJustJoined+0xc4>)
 80060dc:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
 80060e0:	4b23      	ldr	r3, [pc, #140]	@ (8006170 <stateJustJoined+0xc4>)
 80060e2:	f893 2125 	ldrb.w	r2, [r3, #293]	@ 0x125
 80060e6:	4b22      	ldr	r3, [pc, #136]	@ (8006170 <stateJustJoined+0xc4>)
 80060e8:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
 80060ec:	4b20      	ldr	r3, [pc, #128]	@ (8006170 <stateJustJoined+0xc4>)
 80060ee:	f893 2122 	ldrb.w	r2, [r3, #290]	@ 0x122
 80060f2:	4b1f      	ldr	r3, [pc, #124]	@ (8006170 <stateJustJoined+0xc4>)
 80060f4:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
	LMIC.moreData = LMIC.dn2Ans = LMIC.snchAns = LMIC.dutyCapAns = 0;
 80060f8:	4b1d      	ldr	r3, [pc, #116]	@ (8006170 <stateJustJoined+0xc4>)
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
 8006100:	4b1b      	ldr	r3, [pc, #108]	@ (8006170 <stateJustJoined+0xc4>)
 8006102:	f893 2129 	ldrb.w	r2, [r3, #297]	@ 0x129
 8006106:	4b1a      	ldr	r3, [pc, #104]	@ (8006170 <stateJustJoined+0xc4>)
 8006108:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
 800610c:	4b18      	ldr	r3, [pc, #96]	@ (8006170 <stateJustJoined+0xc4>)
 800610e:	f893 212a 	ldrb.w	r2, [r3, #298]	@ 0x12a
 8006112:	4b17      	ldr	r3, [pc, #92]	@ (8006170 <stateJustJoined+0xc4>)
 8006114:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
 8006118:	4b15      	ldr	r3, [pc, #84]	@ (8006170 <stateJustJoined+0xc4>)
 800611a:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800611e:	4b14      	ldr	r3, [pc, #80]	@ (8006170 <stateJustJoined+0xc4>)
 8006120:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
	LMIC.pingSetAns = 0;
 8006124:	4b12      	ldr	r3, [pc, #72]	@ (8006170 <stateJustJoined+0xc4>)
 8006126:	2200      	movs	r2, #0
 8006128:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
	LMIC.upRepeat = 0;
 800612c:	4b10      	ldr	r3, [pc, #64]	@ (8006170 <stateJustJoined+0xc4>)
 800612e:	2200      	movs	r2, #0
 8006130:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
	LMIC.adrAckReq = LINK_CHECK_INIT;
 8006134:	4b0e      	ldr	r3, [pc, #56]	@ (8006170 <stateJustJoined+0xc4>)
 8006136:	22f4      	movs	r2, #244	@ 0xf4
 8006138:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
	LMIC.dn2Dr = DR_DNW2;
 800613c:	4b0c      	ldr	r3, [pc, #48]	@ (8006170 <stateJustJoined+0xc4>)
 800613e:	2200      	movs	r2, #0
 8006140:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
	LMIC.dn2Freq = FREQ_DNW2;
 8006144:	4b0a      	ldr	r3, [pc, #40]	@ (8006170 <stateJustJoined+0xc4>)
 8006146:	4a0b      	ldr	r2, [pc, #44]	@ (8006174 <stateJustJoined+0xc8>)
 8006148:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
	LMIC.bcnChnl = CHNL_BCN;
 800614c:	4b08      	ldr	r3, [pc, #32]	@ (8006170 <stateJustJoined+0xc4>)
 800614e:	2205      	movs	r2, #5
 8006150:	f883 2188 	strb.w	r2, [r3, #392]	@ 0x188
	LMIC.ping.freq = FREQ_PING;
 8006154:	4b06      	ldr	r3, [pc, #24]	@ (8006170 <stateJustJoined+0xc4>)
 8006156:	4a07      	ldr	r2, [pc, #28]	@ (8006174 <stateJustJoined+0xc8>)
 8006158:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
	LMIC.ping.dr = DR_PING;
 800615c:	4b04      	ldr	r3, [pc, #16]	@ (8006170 <stateJustJoined+0xc4>)
 800615e:	2203      	movs	r2, #3
 8006160:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
}
 8006164:	bf00      	nop
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	2000033c 	.word	0x2000033c
 8006174:	33d3e608 	.word	0x33d3e608

08006178 <decodeBeacon>:
// ================================================================================
// Decoding frames

// Decode beacon  - do not overwrite bcninfo unless we have a match!
static int decodeBeacon(void)
{
 8006178:	b590      	push	{r4, r7, lr}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
	ASSERT(LMIC.dataLen == LEN_BCN); // implicit header RX guarantees this
 800617e:	4b46      	ldr	r3, [pc, #280]	@ (8006298 <decodeBeacon+0x120>)
 8006180:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8006184:	2b11      	cmp	r3, #17
 8006186:	d001      	beq.n	800618c <decodeBeacon+0x14>
 8006188:	f7fe fd62 	bl	8004c50 <hal_failed>
	xref2u1_t d = LMIC.frame;
 800618c:	4b43      	ldr	r3, [pc, #268]	@ (800629c <decodeBeacon+0x124>)
 800618e:	607b      	str	r3, [r7, #4]
	if (
#if defined CFG_eu868
	d[OFF_BCN_CRC1] != (u1_t) os_crc16(d, OFF_BCN_CRC1)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	3307      	adds	r3, #7
 8006194:	781c      	ldrb	r4, [r3, #0]
 8006196:	2107      	movs	r1, #7
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f7fe ffb0 	bl	80050fe <os_crc16>
 800619e:	4603      	mov	r3, r0
 80061a0:	b2db      	uxtb	r3, r3
	if (
 80061a2:	429c      	cmp	r4, r3
 80061a4:	d001      	beq.n	80061aa <decodeBeacon+0x32>
#elif CFG_us915
        os_rlsbf2(&d[OFF_BCN_CRC1]) != os_crc16(d,OFF_BCN_CRC1)
#endif
			)
		return 0;   // first (common) part fails CRC check
 80061a6:	2300      	movs	r3, #0
 80061a8:	e071      	b.n	800628e <decodeBeacon+0x116>
	// First set of fields is ok
	u4_t bcnnetid = os_rlsbf4(&d[OFF_BCN_NETID]) & 0xFFFFFF;
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7fe ff0c 	bl	8004fc8 <os_rlsbf4>
 80061b0:	4603      	mov	r3, r0
 80061b2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80061b6:	603b      	str	r3, [r7, #0]
	if (bcnnetid != LMIC.netid)
 80061b8:	4b37      	ldr	r3, [pc, #220]	@ (8006298 <decodeBeacon+0x120>)
 80061ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d002      	beq.n	80061ca <decodeBeacon+0x52>
		return -1;  // not the beacon we're looking for
 80061c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80061c8:	e061      	b.n	800628e <decodeBeacon+0x116>

	LMIC.bcninfo.flags &= ~(BCN_PARTIAL | BCN_FULL);
 80061ca:	4b33      	ldr	r3, [pc, #204]	@ (8006298 <decodeBeacon+0x120>)
 80061cc:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 80061d0:	f023 0303 	bic.w	r3, r3, #3
 80061d4:	b2da      	uxtb	r2, r3
 80061d6:	4b30      	ldr	r3, [pc, #192]	@ (8006298 <decodeBeacon+0x120>)
 80061d8:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
	// Match - update bcninfo structure
	LMIC.bcninfo.snr = LMIC.snr;
 80061dc:	4b2e      	ldr	r3, [pc, #184]	@ (8006298 <decodeBeacon+0x120>)
 80061de:	f993 200d 	ldrsb.w	r2, [r3, #13]
 80061e2:	4b2d      	ldr	r3, [pc, #180]	@ (8006298 <decodeBeacon+0x120>)
 80061e4:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
	LMIC.bcninfo.rssi = LMIC.rssi;
 80061e8:	4b2b      	ldr	r3, [pc, #172]	@ (8006298 <decodeBeacon+0x120>)
 80061ea:	f993 200c 	ldrsb.w	r2, [r3, #12]
 80061ee:	4b2a      	ldr	r3, [pc, #168]	@ (8006298 <decodeBeacon+0x120>)
 80061f0:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
	LMIC.bcninfo.txtime = LMIC.rxtime - AIRTIME_BCN_osticks;
 80061f4:	4b28      	ldr	r3, [pc, #160]	@ (8006298 <decodeBeacon+0x120>)
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f5a3 5390 	sub.w	r3, r3, #4608	@ 0x1200
 80061fc:	3b0c      	subs	r3, #12
 80061fe:	4a26      	ldr	r2, [pc, #152]	@ (8006298 <decodeBeacon+0x120>)
 8006200:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
	LMIC.bcninfo.time = os_rlsbf4(&d[OFF_BCN_TIME]);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	3303      	adds	r3, #3
 8006208:	4618      	mov	r0, r3
 800620a:	f7fe fedd 	bl	8004fc8 <os_rlsbf4>
 800620e:	4603      	mov	r3, r0
 8006210:	4a21      	ldr	r2, [pc, #132]	@ (8006298 <decodeBeacon+0x120>)
 8006212:	f8c2 3198 	str.w	r3, [r2, #408]	@ 0x198
	LMIC.bcninfo.flags |= BCN_PARTIAL;
 8006216:	4b20      	ldr	r3, [pc, #128]	@ (8006298 <decodeBeacon+0x120>)
 8006218:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 800621c:	f043 0301 	orr.w	r3, r3, #1
 8006220:	b2da      	uxtb	r2, r3
 8006222:	4b1d      	ldr	r3, [pc, #116]	@ (8006298 <decodeBeacon+0x120>)
 8006224:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196

	// Check 2nd set
	if (os_rlsbf2(&d[OFF_BCN_CRC2]) != os_crc16(d, OFF_BCN_CRC2))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	330f      	adds	r3, #15
 800622c:	4618      	mov	r0, r3
 800622e:	f7fe feb6 	bl	8004f9e <os_rlsbf2>
 8006232:	4603      	mov	r3, r0
 8006234:	461c      	mov	r4, r3
 8006236:	210f      	movs	r1, #15
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7fe ff60 	bl	80050fe <os_crc16>
 800623e:	4603      	mov	r3, r0
 8006240:	429c      	cmp	r4, r3
 8006242:	d001      	beq.n	8006248 <decodeBeacon+0xd0>
		return 1;
 8006244:	2301      	movs	r3, #1
 8006246:	e022      	b.n	800628e <decodeBeacon+0x116>
	// Second set of fields is ok
	LMIC.bcninfo.lat = (s4_t) os_rlsbf4(&d[OFF_BCN_LAT - 1]) >> 8; // read as signed 24-bit
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	3308      	adds	r3, #8
 800624c:	4618      	mov	r0, r3
 800624e:	f7fe febb 	bl	8004fc8 <os_rlsbf4>
 8006252:	4603      	mov	r3, r0
 8006254:	121b      	asrs	r3, r3, #8
 8006256:	4a10      	ldr	r2, [pc, #64]	@ (8006298 <decodeBeacon+0x120>)
 8006258:	f8c2 31a0 	str.w	r3, [r2, #416]	@ 0x1a0
	LMIC.bcninfo.lon = (s4_t) os_rlsbf4(&d[OFF_BCN_LON - 1]) >> 8; // ditto
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	330b      	adds	r3, #11
 8006260:	4618      	mov	r0, r3
 8006262:	f7fe feb1 	bl	8004fc8 <os_rlsbf4>
 8006266:	4603      	mov	r3, r0
 8006268:	121b      	asrs	r3, r3, #8
 800626a:	4a0b      	ldr	r2, [pc, #44]	@ (8006298 <decodeBeacon+0x120>)
 800626c:	f8c2 31a4 	str.w	r3, [r2, #420]	@ 0x1a4
	LMIC.bcninfo.info = d[OFF_BCN_INFO];
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	7a1a      	ldrb	r2, [r3, #8]
 8006274:	4b08      	ldr	r3, [pc, #32]	@ (8006298 <decodeBeacon+0x120>)
 8006276:	f883 219c 	strb.w	r2, [r3, #412]	@ 0x19c
	LMIC.bcninfo.flags |= BCN_FULL;
 800627a:	4b07      	ldr	r3, [pc, #28]	@ (8006298 <decodeBeacon+0x120>)
 800627c:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8006280:	f043 0302 	orr.w	r3, r3, #2
 8006284:	b2da      	uxtb	r2, r3
 8006286:	4b04      	ldr	r3, [pc, #16]	@ (8006298 <decodeBeacon+0x120>)
 8006288:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
	return 2;
 800628c:	2302      	movs	r3, #2
}
 800628e:	4618      	mov	r0, r3
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	bd90      	pop	{r4, r7, pc}
 8006296:	bf00      	nop
 8006298:	2000033c 	.word	0x2000033c
 800629c:	20000484 	.word	0x20000484

080062a0 <decodeFrame>:

static bit_t decodeFrame(void)
{
 80062a0:	b590      	push	{r4, r7, lr}
 80062a2:	b09b      	sub	sp, #108	@ 0x6c
 80062a4:	af02      	add	r7, sp, #8
	xref2u1_t d = LMIC.frame;
 80062a6:	4b98      	ldr	r3, [pc, #608]	@ (8006508 <decodeFrame+0x268>)
 80062a8:	64bb      	str	r3, [r7, #72]	@ 0x48
	u1_t hdr = d[0];
 80062aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	u1_t ftype = hdr & HDR_FTYPE;
 80062b2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80062b6:	f023 031f 	bic.w	r3, r3, #31
 80062ba:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	int dlen = LMIC.dataLen;
 80062be:	4b93      	ldr	r3, [pc, #588]	@ (800650c <decodeFrame+0x26c>)
 80062c0:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80062c4:	643b      	str	r3, [r7, #64]	@ 0x40
	if (dlen < OFF_DAT_OPTS + 4 || (hdr & HDR_MAJOR) != HDR_MAJOR_V1
 80062c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062c8:	2b0b      	cmp	r3, #11
 80062ca:	dd0d      	ble.n	80062e8 <decodeFrame+0x48>
 80062cc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80062d0:	f003 0303 	and.w	r3, r3, #3
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d107      	bne.n	80062e8 <decodeFrame+0x48>
			|| (ftype != HDR_FTYPE_DADN && ftype != HDR_FTYPE_DCDN)) {
 80062d8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80062dc:	2b60      	cmp	r3, #96	@ 0x60
 80062de:	d014      	beq.n	800630a <decodeFrame+0x6a>
 80062e0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80062e4:	2ba0      	cmp	r3, #160	@ 0xa0
 80062e6:	d010      	beq.n	800630a <decodeFrame+0x6a>
		// Basic sanity checks failed
		EV(specCond, WARN, (e_.reason = EV::specCond_t::UNEXPECTED_FRAME,
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = dlen < 4 ? 0 : os_rlsbf4(&d[dlen-4]),
						e_.info2 = hdr + (dlen<<8)));
		norx: LMIC.dataLen = 0;
 80062e8:	bf00      	nop
 80062ea:	e008      	b.n	80062fe <decodeFrame+0x5e>
	if (addr != LMIC.devaddr) {
		EV(specCond, WARN, (e_.reason = EV::specCond_t::ALIEN_ADDRESS,
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = addr,
						e_.info2 = LMIC.devaddr));
		goto norx;
 80062ec:	bf00      	nop
 80062ee:	e006      	b.n	80062fe <decodeFrame+0x5e>
	}
	if (poff > pend) {
		EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = 0x1000000 + (poff-pend) + (fct<<8) + (dlen<<16)));
		goto norx;
 80062f0:	bf00      	nop
 80062f2:	e004      	b.n	80062fe <decodeFrame+0x5e>
		EV(spe3Cond, ERR, (e_.reason = EV::spe3Cond_t::CORRUPTED_MIC,
						e_.eui1 = MAIN::CDEV->getEui(),
						e_.info1 = Base::lsbf4(&d[pend]),
						e_.info2 = seqno,
						e_.info3 = LMIC.devaddr));
		goto norx;
 80062f4:	bf00      	nop
 80062f6:	e002      	b.n	80062fe <decodeFrame+0x5e>
		if ((s4_t) seqno > (s4_t) LMIC.seqnoDn) {
			EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_ROLL_OVER,
							e_.eui = MAIN::CDEV->getEui(),
							e_.info = LMIC.seqnoDn,
							e_.info2 = seqno));
			goto norx;
 80062f8:	bf00      	nop
 80062fa:	e000      	b.n	80062fe <decodeFrame+0x5e>
				|| ftype != HDR_FTYPE_DCDN) {
			EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_OBSOLETE,
							e_.eui = MAIN::CDEV->getEui(),
							e_.info = LMIC.seqnoDn,
							e_.info2 = seqno));
			goto norx;
 80062fc:	bf00      	nop
		norx: LMIC.dataLen = 0;
 80062fe:	4b83      	ldr	r3, [pc, #524]	@ (800650c <decodeFrame+0x26c>)
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
		return 0;
 8006306:	2300      	movs	r3, #0
 8006308:	e2f6      	b.n	80068f8 <decodeFrame+0x658>
	int fct = d[OFF_DAT_FCT];
 800630a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800630c:	3305      	adds	r3, #5
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	63fb      	str	r3, [r7, #60]	@ 0x3c
	u4_t addr = os_rlsbf4(&d[OFF_DAT_ADDR]);
 8006312:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006314:	3301      	adds	r3, #1
 8006316:	4618      	mov	r0, r3
 8006318:	f7fe fe56 	bl	8004fc8 <os_rlsbf4>
 800631c:	63b8      	str	r0, [r7, #56]	@ 0x38
	u4_t seqno = os_rlsbf2(&d[OFF_DAT_SEQNO]);
 800631e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006320:	3306      	adds	r3, #6
 8006322:	4618      	mov	r0, r3
 8006324:	f7fe fe3b 	bl	8004f9e <os_rlsbf2>
 8006328:	4603      	mov	r3, r0
 800632a:	637b      	str	r3, [r7, #52]	@ 0x34
	int olen = fct & FCT_OPTLEN;
 800632c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800632e:	f003 030f 	and.w	r3, r3, #15
 8006332:	633b      	str	r3, [r7, #48]	@ 0x30
	int ackup = (fct & FCT_ACK) != 0 ? 1 : 0;   // ACK last up frame
 8006334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006336:	115b      	asrs	r3, r3, #5
 8006338:	f003 0301 	and.w	r3, r3, #1
 800633c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int poff = OFF_DAT_OPTS + olen;
 800633e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006340:	3308      	adds	r3, #8
 8006342:	65fb      	str	r3, [r7, #92]	@ 0x5c
	int pend = dlen - 4;  // MIC
 8006344:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006346:	3b04      	subs	r3, #4
 8006348:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (addr != LMIC.devaddr) {
 800634a:	4b70      	ldr	r3, [pc, #448]	@ (800650c <decodeFrame+0x26c>)
 800634c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006350:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006352:	429a      	cmp	r2, r3
 8006354:	d1ca      	bne.n	80062ec <decodeFrame+0x4c>
	if (poff > pend) {
 8006356:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800635a:	429a      	cmp	r2, r3
 800635c:	dcc8      	bgt.n	80062f0 <decodeFrame+0x50>
	int port = -1;
 800635e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006362:	65bb      	str	r3, [r7, #88]	@ 0x58
	int replayConf = 0;
 8006364:	2300      	movs	r3, #0
 8006366:	657b      	str	r3, [r7, #84]	@ 0x54
	if (pend > poff)
 8006368:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800636a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800636c:	429a      	cmp	r2, r3
 800636e:	dd07      	ble.n	8006380 <decodeFrame+0xe0>
		port = d[poff++];
 8006370:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006372:	1c5a      	adds	r2, r3, #1
 8006374:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006376:	461a      	mov	r2, r3
 8006378:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800637a:	4413      	add	r3, r2
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	65bb      	str	r3, [r7, #88]	@ 0x58
	seqno = LMIC.seqnoDn + (u2_t) (seqno - LMIC.seqnoDn);
 8006380:	4b62      	ldr	r3, [pc, #392]	@ (800650c <decodeFrame+0x26c>)
 8006382:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8006386:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006388:	b291      	uxth	r1, r2
 800638a:	4a60      	ldr	r2, [pc, #384]	@ (800650c <decodeFrame+0x26c>)
 800638c:	f8d2 2118 	ldr.w	r2, [r2, #280]	@ 0x118
 8006390:	b292      	uxth	r2, r2
 8006392:	1a8a      	subs	r2, r1, r2
 8006394:	b292      	uxth	r2, r2
 8006396:	4413      	add	r3, r2
 8006398:	637b      	str	r3, [r7, #52]	@ 0x34
	if (!aes_verifyMic(LMIC.nwkKey, LMIC.devaddr, seqno, /*dn*/1, d, pend)) {
 800639a:	4b5c      	ldr	r3, [pc, #368]	@ (800650c <decodeFrame+0x26c>)
 800639c:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 80063a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a2:	9301      	str	r3, [sp, #4]
 80063a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	2301      	movs	r3, #1
 80063aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063ac:	4858      	ldr	r0, [pc, #352]	@ (8006510 <decodeFrame+0x270>)
 80063ae:	f7fe ff19 	bl	80051e4 <aes_verifyMic>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d09d      	beq.n	80062f4 <decodeFrame+0x54>
	if (seqno < LMIC.seqnoDn) {
 80063b8:	4b54      	ldr	r3, [pc, #336]	@ (800650c <decodeFrame+0x26c>)
 80063ba:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80063be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d219      	bcs.n	80063f8 <decodeFrame+0x158>
		if ((s4_t) seqno > (s4_t) LMIC.seqnoDn) {
 80063c4:	4b51      	ldr	r3, [pc, #324]	@ (800650c <decodeFrame+0x26c>)
 80063c6:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80063ca:	461a      	mov	r2, r3
 80063cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ce:	429a      	cmp	r2, r3
 80063d0:	db92      	blt.n	80062f8 <decodeFrame+0x58>
		if (seqno != LMIC.seqnoDn - 1 || !LMIC.dnConf
 80063d2:	4b4e      	ldr	r3, [pc, #312]	@ (800650c <decodeFrame+0x26c>)
 80063d4:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80063d8:	3b01      	subs	r3, #1
 80063da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063dc:	429a      	cmp	r2, r3
 80063de:	d18d      	bne.n	80062fc <decodeFrame+0x5c>
 80063e0:	4b4a      	ldr	r3, [pc, #296]	@ (800650c <decodeFrame+0x26c>)
 80063e2:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d088      	beq.n	80062fc <decodeFrame+0x5c>
				|| ftype != HDR_FTYPE_DCDN) {
 80063ea:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80063ee:	2ba0      	cmp	r3, #160	@ 0xa0
 80063f0:	d184      	bne.n	80062fc <decodeFrame+0x5c>
		}
		// Replay of previous sequence number allowed only if
		// previous frame and repeated both requested confirmation
		replayConf = 1;
 80063f2:	2301      	movs	r3, #1
 80063f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80063f6:	e00e      	b.n	8006416 <decodeFrame+0x176>
			EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_SKIP,
							e_.eui = MAIN::CDEV->getEui(),
							e_.info = LMIC.seqnoDn,
							e_.info2 = seqno));
		}
		LMIC.seqnoDn = seqno + 1;  // next number to be expected
 80063f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063fa:	3301      	adds	r3, #1
 80063fc:	4a43      	ldr	r2, [pc, #268]	@ (800650c <decodeFrame+0x26c>)
 80063fe:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
		DO_DEVDB(LMIC.seqnoDn,seqnoDn);
		// DN frame requested confirmation - provide ACK once with next UP frame
		LMIC.dnConf = (ftype == HDR_FTYPE_DCDN ? FCT_ACK : 0);
 8006402:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8006406:	2ba0      	cmp	r3, #160	@ 0xa0
 8006408:	d101      	bne.n	800640e <decodeFrame+0x16e>
 800640a:	2220      	movs	r2, #32
 800640c:	e000      	b.n	8006410 <decodeFrame+0x170>
 800640e:	2200      	movs	r2, #0
 8006410:	4b3e      	ldr	r3, [pc, #248]	@ (800650c <decodeFrame+0x26c>)
 8006412:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
	}

	if (LMIC.dnConf || (fct & FCT_MORE))
 8006416:	4b3d      	ldr	r3, [pc, #244]	@ (800650c <decodeFrame+0x26c>)
 8006418:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 800641c:	2b00      	cmp	r3, #0
 800641e:	d104      	bne.n	800642a <decodeFrame+0x18a>
 8006420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006422:	f003 0310 	and.w	r3, r3, #16
 8006426:	2b00      	cmp	r3, #0
 8006428:	d008      	beq.n	800643c <decodeFrame+0x19c>
		LMIC.opmode |= OP_POLL;
 800642a:	4b38      	ldr	r3, [pc, #224]	@ (800650c <decodeFrame+0x26c>)
 800642c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006430:	f043 0310 	orr.w	r3, r3, #16
 8006434:	b29a      	uxth	r2, r3
 8006436:	4b35      	ldr	r3, [pc, #212]	@ (800650c <decodeFrame+0x26c>)
 8006438:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac

	// We heard from network
	LMIC.adrChanged = LMIC.rejoinCnt = 0;
 800643c:	4b33      	ldr	r3, [pc, #204]	@ (800650c <decodeFrame+0x26c>)
 800643e:	2200      	movs	r2, #0
 8006440:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
 8006444:	4b31      	ldr	r3, [pc, #196]	@ (800650c <decodeFrame+0x26c>)
 8006446:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 800644a:	4b30      	ldr	r3, [pc, #192]	@ (800650c <decodeFrame+0x26c>)
 800644c:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
	if (LMIC.adrAckReq != LINK_CHECK_OFF)
 8006450:	4b2e      	ldr	r3, [pc, #184]	@ (800650c <decodeFrame+0x26c>)
 8006452:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 8006456:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 800645a:	d003      	beq.n	8006464 <decodeFrame+0x1c4>
		LMIC.adrAckReq = LINK_CHECK_INIT;
 800645c:	4b2b      	ldr	r3, [pc, #172]	@ (800650c <decodeFrame+0x26c>)
 800645e:	22f4      	movs	r2, #244	@ 0xf4
 8006460:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121

	// Process OPTS
	int m = LMIC.rssi - RSSI_OFF - getSensitivity(LMIC.rps);
 8006464:	4b29      	ldr	r3, [pc, #164]	@ (800650c <decodeFrame+0x26c>)
 8006466:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800646a:	f1a3 0440 	sub.w	r4, r3, #64	@ 0x40
 800646e:	4b27      	ldr	r3, [pc, #156]	@ (800650c <decodeFrame+0x26c>)
 8006470:	89db      	ldrh	r3, [r3, #14]
 8006472:	4618      	mov	r0, r3
 8006474:	f7fe ffe0 	bl	8005438 <getSensitivity>
 8006478:	4603      	mov	r3, r0
 800647a:	1ae3      	subs	r3, r4, r3
 800647c:	627b      	str	r3, [r7, #36]	@ 0x24
	LMIC.margin = m < 0 ? 0 : m > 254 ? 254 : m;
 800647e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006480:	2b00      	cmp	r3, #0
 8006482:	db05      	blt.n	8006490 <decodeFrame+0x1f0>
 8006484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006486:	2bfe      	cmp	r3, #254	@ 0xfe
 8006488:	bfa8      	it	ge
 800648a:	23fe      	movge	r3, #254	@ 0xfe
 800648c:	b2db      	uxtb	r3, r3
 800648e:	e000      	b.n	8006492 <decodeFrame+0x1f2>
 8006490:	2300      	movs	r3, #0
 8006492:	4a1e      	ldr	r2, [pc, #120]	@ (800650c <decodeFrame+0x26c>)
 8006494:	f882 3124 	strb.w	r3, [r2, #292]	@ 0x124

	xref2u1_t opts = &d[OFF_DAT_OPTS];
 8006498:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800649a:	3308      	adds	r3, #8
 800649c:	623b      	str	r3, [r7, #32]
	int oidx = 0;
 800649e:	2300      	movs	r3, #0
 80064a0:	653b      	str	r3, [r7, #80]	@ 0x50
	while (oidx < olen) {
 80064a2:	e1b5      	b.n	8006810 <decodeFrame+0x570>
		switch (opts[oidx]) {
 80064a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064a6:	6a3a      	ldr	r2, [r7, #32]
 80064a8:	4413      	add	r3, r2
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	3b02      	subs	r3, #2
 80064ae:	2b10      	cmp	r3, #16
 80064b0:	f200 81ba 	bhi.w	8006828 <decodeFrame+0x588>
 80064b4:	a201      	add	r2, pc, #4	@ (adr r2, 80064bc <decodeFrame+0x21c>)
 80064b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ba:	bf00      	nop
 80064bc:	08006501 	.word	0x08006501
 80064c0:	08006515 	.word	0x08006515
 80064c4:	08006673 	.word	0x08006673
 80064c8:	080065ef 	.word	0x080065ef
 80064cc:	080065df 	.word	0x080065df
 80064d0:	080066c1 	.word	0x080066c1
 80064d4:	08006829 	.word	0x08006829
 80064d8:	08006829 	.word	0x08006829
 80064dc:	08006829 	.word	0x08006829
 80064e0:	08006829 	.word	0x08006829
 80064e4:	08006829 	.word	0x08006829
 80064e8:	08006829 	.word	0x08006829
 80064ec:	08006829 	.word	0x08006829
 80064f0:	08006829 	.word	0x08006829
 80064f4:	08006829 	.word	0x08006829
 80064f8:	0800674d 	.word	0x0800674d
 80064fc:	0800678f 	.word	0x0800678f
		case MCMD_LCHK_ANS: {
			//int gwmargin = opts[oidx+1];
			//int ngws = opts[oidx+2];
			oidx += 3;
 8006500:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006502:	3303      	adds	r3, #3
 8006504:	653b      	str	r3, [r7, #80]	@ 0x50
			continue;
 8006506:	e183      	b.n	8006810 <decodeFrame+0x570>
 8006508:	20000484 	.word	0x20000484
 800650c:	2000033c 	.word	0x2000033c
 8006510:	20000430 	.word	0x20000430
		}
		case MCMD_LADR_REQ: {
			u1_t p1 = opts[oidx + 1];            // txpow + DR
 8006514:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006516:	3301      	adds	r3, #1
 8006518:	6a3a      	ldr	r2, [r7, #32]
 800651a:	4413      	add	r3, r2
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	72bb      	strb	r3, [r7, #10]
			u2_t chmap = os_rlsbf2(&opts[oidx + 2]); // list of enabled channels
 8006520:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006522:	3302      	adds	r3, #2
 8006524:	6a3a      	ldr	r2, [r7, #32]
 8006526:	4413      	add	r3, r2
 8006528:	4618      	mov	r0, r3
 800652a:	f7fe fd38 	bl	8004f9e <os_rlsbf2>
 800652e:	4603      	mov	r3, r0
 8006530:	813b      	strh	r3, [r7, #8]
			u1_t chpage = opts[oidx + 4] & MCMD_LADR_CHPAGE_MASK; // channel page
 8006532:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006534:	3304      	adds	r3, #4
 8006536:	6a3a      	ldr	r2, [r7, #32]
 8006538:	4413      	add	r3, r2
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	f023 030f 	bic.w	r3, r3, #15
 8006540:	71fb      	strb	r3, [r7, #7]
			u1_t uprpt = opts[oidx + 4] & MCMD_LADR_REPEAT_MASK; // up repeat count
 8006542:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006544:	3304      	adds	r3, #4
 8006546:	6a3a      	ldr	r2, [r7, #32]
 8006548:	4413      	add	r3, r2
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	f003 030f 	and.w	r3, r3, #15
 8006550:	71bb      	strb	r3, [r7, #6]
			oidx += 5;
 8006552:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006554:	3305      	adds	r3, #5
 8006556:	653b      	str	r3, [r7, #80]	@ 0x50

			LMIC.ladrAns = 0x80
 8006558:	4bb0      	ldr	r3, [pc, #704]	@ (800681c <decodeFrame+0x57c>)
 800655a:	2287      	movs	r2, #135	@ 0x87
 800655c:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
					|     // Include an answer into next frame up
					MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK
					| MCMD_LADR_ANS_DRACK;
			if (!mapChannels(chpage, chmap))
 8006560:	893a      	ldrh	r2, [r7, #8]
 8006562:	79fb      	ldrb	r3, [r7, #7]
 8006564:	4611      	mov	r1, r2
 8006566:	4618      	mov	r0, r3
 8006568:	f7ff fb84 	bl	8005c74 <mapChannels>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d108      	bne.n	8006584 <decodeFrame+0x2e4>
				LMIC.ladrAns &= ~MCMD_LADR_ANS_CHACK;
 8006572:	4baa      	ldr	r3, [pc, #680]	@ (800681c <decodeFrame+0x57c>)
 8006574:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8006578:	f023 0301 	bic.w	r3, r3, #1
 800657c:	b2da      	uxtb	r2, r3
 800657e:	4ba7      	ldr	r3, [pc, #668]	@ (800681c <decodeFrame+0x57c>)
 8006580:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
			dr_t dr = (dr_t) (p1 >> MCMD_LADR_DR_SHIFT);
 8006584:	7abb      	ldrb	r3, [r7, #10]
 8006586:	091b      	lsrs	r3, r3, #4
 8006588:	717b      	strb	r3, [r7, #5]
			if (!validDR(dr)) {
 800658a:	797b      	ldrb	r3, [r7, #5]
 800658c:	4618      	mov	r0, r3
 800658e:	f7fe fcd7 	bl	8004f40 <validDR>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d108      	bne.n	80065aa <decodeFrame+0x30a>
				LMIC.ladrAns &= ~MCMD_LADR_ANS_DRACK;
 8006598:	4ba0      	ldr	r3, [pc, #640]	@ (800681c <decodeFrame+0x57c>)
 800659a:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 800659e:	f023 0302 	bic.w	r3, r3, #2
 80065a2:	b2da      	uxtb	r2, r3
 80065a4:	4b9d      	ldr	r3, [pc, #628]	@ (800681c <decodeFrame+0x57c>)
 80065a6:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
				EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
								e_.eui = MAIN::CDEV->getEui(),
								e_.info = Base::lsbf4(&d[pend]),
								e_.info2 = Base::msbf4(&opts[oidx-4])));
			}
			if ((LMIC.ladrAns & 0x7F)
 80065aa:	4b9c      	ldr	r3, [pc, #624]	@ (800681c <decodeFrame+0x57c>)
 80065ac:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 80065b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065b4:	2b07      	cmp	r3, #7
 80065b6:	d10d      	bne.n	80065d4 <decodeFrame+0x334>
					== (MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK
							| MCMD_LADR_ANS_DRACK)) {
				// Nothing went wrong - use settings
				LMIC.upRepeat = uprpt;
 80065b8:	4a98      	ldr	r2, [pc, #608]	@ (800681c <decodeFrame+0x57c>)
 80065ba:	79bb      	ldrb	r3, [r7, #6]
 80065bc:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
				setDrTxpow(DRCHG_NWKCMD, dr, pow2dBm(p1));
 80065c0:	7abb      	ldrb	r3, [r7, #10]
 80065c2:	f003 030f 	and.w	r3, r3, #15
 80065c6:	4a96      	ldr	r2, [pc, #600]	@ (8006820 <decodeFrame+0x580>)
 80065c8:	56d2      	ldrsb	r2, [r2, r3]
 80065ca:	797b      	ldrb	r3, [r7, #5]
 80065cc:	4619      	mov	r1, r3
 80065ce:	2004      	movs	r0, #4
 80065d0:	f7ff fa00 	bl	80059d4 <setDrTxpow>
			}
			LMIC.adrChanged = 1;  // Trigger an ACK to NWK
 80065d4:	4b91      	ldr	r3, [pc, #580]	@ (800681c <decodeFrame+0x57c>)
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
			continue;
 80065dc:	e118      	b.n	8006810 <decodeFrame+0x570>
		}
		case MCMD_DEVS_REQ: {
			LMIC.devsAns = 1;
 80065de:	4b8f      	ldr	r3, [pc, #572]	@ (800681c <decodeFrame+0x57c>)
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
			oidx += 1;
 80065e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065e8:	3301      	adds	r3, #1
 80065ea:	653b      	str	r3, [r7, #80]	@ 0x50
			continue;
 80065ec:	e110      	b.n	8006810 <decodeFrame+0x570>
		}
		case MCMD_DN2P_SET: {
			dr_t dr = (dr_t) (opts[oidx + 1] & 0x0F);
 80065ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065f0:	3301      	adds	r3, #1
 80065f2:	6a3a      	ldr	r2, [r7, #32]
 80065f4:	4413      	add	r3, r2
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	f003 030f 	and.w	r3, r3, #15
 80065fc:	74bb      	strb	r3, [r7, #18]
			u4_t freq = convFreq(&opts[oidx + 2]);
 80065fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006600:	3302      	adds	r3, #2
 8006602:	6a3a      	ldr	r2, [r7, #32]
 8006604:	4413      	add	r3, r2
 8006606:	4618      	mov	r0, r3
 8006608:	f7ff fb12 	bl	8005c30 <convFreq>
 800660c:	60f8      	str	r0, [r7, #12]
			oidx += 5;
 800660e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006610:	3305      	adds	r3, #5
 8006612:	653b      	str	r3, [r7, #80]	@ 0x50
			LMIC.dn2Ans = 0x80;   // answer pending
 8006614:	4b81      	ldr	r3, [pc, #516]	@ (800681c <decodeFrame+0x57c>)
 8006616:	2280      	movs	r2, #128	@ 0x80
 8006618:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
			if (validDR(dr))
 800661c:	7cbb      	ldrb	r3, [r7, #18]
 800661e:	4618      	mov	r0, r3
 8006620:	f7fe fc8e 	bl	8004f40 <validDR>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d008      	beq.n	800663c <decodeFrame+0x39c>
				LMIC.dn2Ans |= MCMD_DN2P_ANS_DRACK;
 800662a:	4b7c      	ldr	r3, [pc, #496]	@ (800681c <decodeFrame+0x57c>)
 800662c:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8006630:	f043 0302 	orr.w	r3, r3, #2
 8006634:	b2da      	uxtb	r2, r3
 8006636:	4b79      	ldr	r3, [pc, #484]	@ (800681c <decodeFrame+0x57c>)
 8006638:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
			if (freq != 0)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d008      	beq.n	8006654 <decodeFrame+0x3b4>
				LMIC.dn2Ans |= MCMD_DN2P_ANS_CHACK;
 8006642:	4b76      	ldr	r3, [pc, #472]	@ (800681c <decodeFrame+0x57c>)
 8006644:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8006648:	f043 0301 	orr.w	r3, r3, #1
 800664c:	b2da      	uxtb	r2, r3
 800664e:	4b73      	ldr	r3, [pc, #460]	@ (800681c <decodeFrame+0x57c>)
 8006650:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
			if (LMIC.dn2Ans
 8006654:	4b71      	ldr	r3, [pc, #452]	@ (800681c <decodeFrame+0x57c>)
 8006656:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800665a:	2b83      	cmp	r3, #131	@ 0x83
 800665c:	f040 80d7 	bne.w	800680e <decodeFrame+0x56e>
					== (0x80 | MCMD_DN2P_ANS_DRACK | MCMD_DN2P_ANS_CHACK)) {
				LMIC.dn2Dr = dr;
 8006660:	4a6e      	ldr	r2, [pc, #440]	@ (800681c <decodeFrame+0x57c>)
 8006662:	7cbb      	ldrb	r3, [r7, #18]
 8006664:	f882 312b 	strb.w	r3, [r2, #299]	@ 0x12b
				LMIC.dn2Freq = freq;
 8006668:	4a6c      	ldr	r2, [pc, #432]	@ (800681c <decodeFrame+0x57c>)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
				DO_DEVDB(LMIC.dn2Dr,dn2Dr);DO_DEVDB(LMIC.dn2Freq,dn2Freq);
			}
			continue;
 8006670:	e0cd      	b.n	800680e <decodeFrame+0x56e>
		}
		case MCMD_DCAP_REQ: {
			u1_t cap = opts[oidx + 1];
 8006672:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006674:	3301      	adds	r3, #1
 8006676:	6a3a      	ldr	r2, [r7, #32]
 8006678:	4413      	add	r3, r2
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	72fb      	strb	r3, [r7, #11]
			oidx += 2;
 800667e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006680:	3302      	adds	r3, #2
 8006682:	653b      	str	r3, [r7, #80]	@ 0x50
			// A value cap=0xFF means device is OFF unless enabled again manually.
			if (cap == 0xFF)
 8006684:	7afb      	ldrb	r3, [r7, #11]
 8006686:	2bff      	cmp	r3, #255	@ 0xff
 8006688:	d108      	bne.n	800669c <decodeFrame+0x3fc>
				LMIC.opmode |= OP_SHUTDOWN;  // stop any sending
 800668a:	4b64      	ldr	r3, [pc, #400]	@ (800681c <decodeFrame+0x57c>)
 800668c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006690:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006694:	b29a      	uxth	r2, r3
 8006696:	4b61      	ldr	r3, [pc, #388]	@ (800681c <decodeFrame+0x57c>)
 8006698:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			LMIC.globalDutyRate = cap & 0xF;
 800669c:	7afb      	ldrb	r3, [r7, #11]
 800669e:	f003 030f 	and.w	r3, r3, #15
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	4b5d      	ldr	r3, [pc, #372]	@ (800681c <decodeFrame+0x57c>)
 80066a6:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
			LMIC.globalDutyAvail = os_getTime();
 80066aa:	f001 ff1d 	bl	80084e8 <os_getTime>
 80066ae:	4603      	mov	r3, r0
 80066b0:	4a5a      	ldr	r2, [pc, #360]	@ (800681c <decodeFrame+0x57c>)
 80066b2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
			DO_DEVDB(cap,dutyCap);
			LMIC.dutyCapAns = 1;
 80066b6:	4b59      	ldr	r3, [pc, #356]	@ (800681c <decodeFrame+0x57c>)
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
			continue;
 80066be:	e0a7      	b.n	8006810 <decodeFrame+0x570>
		}
		case MCMD_SNCH_REQ: {
			u1_t chidx = opts[oidx + 1];  // channel
 80066c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066c2:	3301      	adds	r3, #1
 80066c4:	6a3a      	ldr	r2, [r7, #32]
 80066c6:	4413      	add	r3, r2
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	76fb      	strb	r3, [r7, #27]
			u4_t freq = convFreq(&opts[oidx + 2]); // freq
 80066cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066ce:	3302      	adds	r3, #2
 80066d0:	6a3a      	ldr	r2, [r7, #32]
 80066d2:	4413      	add	r3, r2
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7ff faab 	bl	8005c30 <convFreq>
 80066da:	6178      	str	r0, [r7, #20]
			u1_t drs = opts[oidx + 5];  // datarate span
 80066dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066de:	3305      	adds	r3, #5
 80066e0:	6a3a      	ldr	r2, [r7, #32]
 80066e2:	4413      	add	r3, r2
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	74fb      	strb	r3, [r7, #19]
			LMIC.snchAns = 0x80;
 80066e8:	4b4c      	ldr	r3, [pc, #304]	@ (800681c <decodeFrame+0x57c>)
 80066ea:	2280      	movs	r2, #128	@ 0x80
 80066ec:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
			if (freq != 0
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d026      	beq.n	8006744 <decodeFrame+0x4a4>
					&& LMIC_setupChannel(chidx, freq,
							DR_RANGE_MAP(drs & 0xF, drs >> 4), -1))
 80066f6:	7cfb      	ldrb	r3, [r7, #19]
 80066f8:	f003 030f 	and.w	r3, r3, #15
 80066fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006700:	fa02 f303 	lsl.w	r3, r2, r3
 8006704:	b21a      	sxth	r2, r3
 8006706:	7cfb      	ldrb	r3, [r7, #19]
 8006708:	091b      	lsrs	r3, r3, #4
 800670a:	b2db      	uxtb	r3, r3
 800670c:	f1c3 030f 	rsb	r3, r3, #15
 8006710:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8006714:	fa41 f303 	asr.w	r3, r1, r3
 8006718:	b21b      	sxth	r3, r3
 800671a:	4013      	ands	r3, r2
 800671c:	b21b      	sxth	r3, r3
					&& LMIC_setupChannel(chidx, freq,
 800671e:	b29a      	uxth	r2, r3
 8006720:	7ef8      	ldrb	r0, [r7, #27]
 8006722:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006726:	6979      	ldr	r1, [r7, #20]
 8006728:	f7ff fa08 	bl	8005b3c <LMIC_setupChannel>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d008      	beq.n	8006744 <decodeFrame+0x4a4>
				LMIC.snchAns |= MCMD_SNCH_ANS_DRACK | MCMD_SNCH_ANS_FQACK;
 8006732:	4b3a      	ldr	r3, [pc, #232]	@ (800681c <decodeFrame+0x57c>)
 8006734:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8006738:	f043 0303 	orr.w	r3, r3, #3
 800673c:	b2da      	uxtb	r2, r3
 800673e:	4b37      	ldr	r3, [pc, #220]	@ (800681c <decodeFrame+0x57c>)
 8006740:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
			oidx += 6;
 8006744:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006746:	3306      	adds	r3, #6
 8006748:	653b      	str	r3, [r7, #80]	@ 0x50
			continue;
 800674a:	e061      	b.n	8006810 <decodeFrame+0x570>
		}
		case MCMD_PING_SET: {
			u4_t freq = convFreq(&opts[oidx + 1]);
 800674c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800674e:	3301      	adds	r3, #1
 8006750:	6a3a      	ldr	r2, [r7, #32]
 8006752:	4413      	add	r3, r2
 8006754:	4618      	mov	r0, r3
 8006756:	f7ff fa6b 	bl	8005c30 <convFreq>
 800675a:	61f8      	str	r0, [r7, #28]
			oidx += 4;
 800675c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800675e:	3304      	adds	r3, #4
 8006760:	653b      	str	r3, [r7, #80]	@ 0x50
			u1_t flags = 0x80;
 8006762:	2380      	movs	r3, #128	@ 0x80
 8006764:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			if (freq != 0) {
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d009      	beq.n	8006782 <decodeFrame+0x4e2>
				flags |= MCMD_PING_ANS_FQACK;
 800676e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006772:	f043 0301 	orr.w	r3, r3, #1
 8006776:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
				LMIC.ping.freq = freq;
 800677a:	4a28      	ldr	r2, [pc, #160]	@ (800681c <decodeFrame+0x57c>)
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
				DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);DO_DEVDB(LMIC.ping.freq, pingFreq);DO_DEVDB(LMIC.ping.dr, pingDr);
			}
			LMIC.pingSetAns = flags;
 8006782:	4a26      	ldr	r2, [pc, #152]	@ (800681c <decodeFrame+0x57c>)
 8006784:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006788:	f882 3133 	strb.w	r3, [r2, #307]	@ 0x133
			continue;
 800678c:	e040      	b.n	8006810 <decodeFrame+0x570>
		}
		case MCMD_BCNI_ANS: {
			// Ignore if tracking already enabled
			if ((LMIC.opmode & OP_TRACK) == 0) {
 800678e:	4b23      	ldr	r3, [pc, #140]	@ (800681c <decodeFrame+0x57c>)
 8006790:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006794:	f003 0302 	and.w	r3, r3, #2
 8006798:	2b00      	cmp	r3, #0
 800679a:	d134      	bne.n	8006806 <decodeFrame+0x566>
				LMIC.bcnChnl = opts[oidx + 3];
 800679c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800679e:	3303      	adds	r3, #3
 80067a0:	6a3a      	ldr	r2, [r7, #32]
 80067a2:	4413      	add	r3, r2
 80067a4:	781a      	ldrb	r2, [r3, #0]
 80067a6:	4b1d      	ldr	r3, [pc, #116]	@ (800681c <decodeFrame+0x57c>)
 80067a8:	f883 2188 	strb.w	r2, [r3, #392]	@ 0x188
				// Enable tracking - bcninfoTries
				LMIC.opmode |= OP_TRACK;
 80067ac:	4b1b      	ldr	r3, [pc, #108]	@ (800681c <decodeFrame+0x57c>)
 80067ae:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80067b2:	f043 0302 	orr.w	r3, r3, #2
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	4b18      	ldr	r3, [pc, #96]	@ (800681c <decodeFrame+0x57c>)
 80067ba:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
				// Cleared later in txComplete handling - triggers EV_BEACON_FOUND
				ASSERT(LMIC.bcninfoTries != 0);
 80067be:	4b17      	ldr	r3, [pc, #92]	@ (800681c <decodeFrame+0x57c>)
 80067c0:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d101      	bne.n	80067cc <decodeFrame+0x52c>
 80067c8:	f7fe fa42 	bl	8004c50 <hal_failed>
				// Setup RX parameters
				LMIC.bcninfo.txtime =
						(LMIC.rxtime
 80067cc:	4b13      	ldr	r3, [pc, #76]	@ (800681c <decodeFrame+0x57c>)
 80067ce:	685c      	ldr	r4, [r3, #4]
								+ ms2osticks(
 80067d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067d2:	3301      	adds	r3, #1
 80067d4:	6a3a      	ldr	r2, [r7, #32]
 80067d6:	4413      	add	r3, r2
 80067d8:	4618      	mov	r0, r3
 80067da:	f7fe fbe0 	bl	8004f9e <os_rlsbf2>
 80067de:	4603      	mov	r3, r0
 80067e0:	461a      	mov	r2, r3
 80067e2:	4613      	mov	r3, r2
 80067e4:	011b      	lsls	r3, r3, #4
 80067e6:	1a9b      	subs	r3, r3, r2
 80067e8:	019b      	lsls	r3, r3, #6
 80067ea:	18e2      	adds	r2, r4, r3
										os_rlsbf2(&opts[oidx + 1])
												* MCMD_BCNI_TUNIT)
								+ ms2osticksCeil(MCMD_BCNI_TUNIT / 2)
								- BCN_INTV_osticks);
 80067ec:	4b0d      	ldr	r3, [pc, #52]	@ (8006824 <decodeFrame+0x584>)
 80067ee:	4413      	add	r3, r2
				LMIC.bcninfo.txtime =
 80067f0:	4a0a      	ldr	r2, [pc, #40]	@ (800681c <decodeFrame+0x57c>)
 80067f2:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
				LMIC.bcninfo.flags = 0; // txtime above cannot be used as reference (BCN_PARTIAL|BCN_FULL cleared)
 80067f6:	4b09      	ldr	r3, [pc, #36]	@ (800681c <decodeFrame+0x57c>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
				calcBcnRxWindowFromMillis(MCMD_BCNI_TUNIT, 1); // error of +/-N ms 
 80067fe:	2101      	movs	r1, #1
 8006800:	201e      	movs	r0, #30
 8006802:	f7fe ff25 	bl	8005650 <calcBcnRxWindowFromMillis>
								e_.info = (LMIC.missedBcns |
										(osticks2us(LMIC.bcninfo.txtime + BCN_INTV_osticks
														- LMIC.bcnRxtime) << 8)),
								e_.time = MAIN::CDEV->ostime2ustime(LMIC.bcninfo.txtime + BCN_INTV_osticks)));
			}
			oidx += 4;
 8006806:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006808:	3304      	adds	r3, #4
 800680a:	653b      	str	r3, [r7, #80]	@ 0x50
			continue;
 800680c:	e000      	b.n	8006810 <decodeFrame+0x570>
			continue;
 800680e:	bf00      	nop
	while (oidx < olen) {
 8006810:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006814:	429a      	cmp	r2, r3
 8006816:	f6ff ae45 	blt.w	80064a4 <decodeFrame+0x204>
 800681a:	e006      	b.n	800682a <decodeFrame+0x58a>
 800681c:	2000033c 	.word	0x2000033c
 8006820:	08012d58 	.word	0x08012d58
 8006824:	ffc181e0 	.word	0xffc181e0
		}
		}EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = Base::lsbf4(&d[pend]),
						e_.info2 = Base::msbf4(&opts[oidx])));
		break;
 8006828:	bf00      	nop
		EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = 0x1000000 + (oidx) + (olen<<8)));
	}

	if (!replayConf) {
 800682a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800682c:	2b00      	cmp	r3, #0
 800682e:	d11d      	bne.n	800686c <decodeFrame+0x5cc>
		// Handle payload only if not a replay
		// Decrypt payload - if any
		if (port >= 0 && pend - poff > 0)
 8006830:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006832:	2b00      	cmp	r3, #0
 8006834:	db1a      	blt.n	800686c <decodeFrame+0x5cc>
 8006836:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006838:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	2b00      	cmp	r3, #0
 800683e:	dd15      	ble.n	800686c <decodeFrame+0x5cc>
			aes_cipher(port <= 0 ? LMIC.nwkKey : LMIC.artKey, LMIC.devaddr,
 8006840:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006842:	2b00      	cmp	r3, #0
 8006844:	dc01      	bgt.n	800684a <decodeFrame+0x5aa>
 8006846:	482e      	ldr	r0, [pc, #184]	@ (8006900 <decodeFrame+0x660>)
 8006848:	e000      	b.n	800684c <decodeFrame+0x5ac>
 800684a:	482e      	ldr	r0, [pc, #184]	@ (8006904 <decodeFrame+0x664>)
 800684c:	4b2e      	ldr	r3, [pc, #184]	@ (8006908 <decodeFrame+0x668>)
 800684e:	f8d3 4114 	ldr.w	r4, [r3, #276]	@ 0x114
 8006852:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006854:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006856:	4413      	add	r3, r2
 8006858:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800685a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800685c:	1a8a      	subs	r2, r1, r2
 800685e:	9201      	str	r2, [sp, #4]
 8006860:	9300      	str	r3, [sp, #0]
 8006862:	2301      	movs	r3, #1
 8006864:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006866:	4621      	mov	r1, r4
 8006868:	f7fe fd66 	bl	8005338 <aes_cipher>
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = Base::lsbf4(&d[pend]),
						e_.info2 = seqno));
	}

	if ( // NWK acks but we don't have a frame pending
 800686c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800686e:	2b00      	cmp	r3, #0
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = seqno,
						e_.info2 = ackup));
	}

	if (LMIC.txCnt != 0) // we requested an ACK
 8006870:	4b25      	ldr	r3, [pc, #148]	@ (8006908 <decodeFrame+0x668>)
 8006872:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8006876:	2b00      	cmp	r3, #0
 8006878:	d010      	beq.n	800689c <decodeFrame+0x5fc>
		LMIC.txrxFlags |= ackup ? TXRX_ACK : TXRX_NACK;
 800687a:	4b23      	ldr	r3, [pc, #140]	@ (8006908 <decodeFrame+0x668>)
 800687c:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8006880:	b25b      	sxtb	r3, r3
 8006882:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006884:	2a00      	cmp	r2, #0
 8006886:	d002      	beq.n	800688e <decodeFrame+0x5ee>
 8006888:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 800688c:	e000      	b.n	8006890 <decodeFrame+0x5f0>
 800688e:	2240      	movs	r2, #64	@ 0x40
 8006890:	4313      	orrs	r3, r2
 8006892:	b25b      	sxtb	r3, r3
 8006894:	b2da      	uxtb	r2, r3
 8006896:	4b1c      	ldr	r3, [pc, #112]	@ (8006908 <decodeFrame+0x668>)
 8006898:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145

	if (port < 0) {
 800689c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800689e:	2b00      	cmp	r3, #0
 80068a0:	da12      	bge.n	80068c8 <decodeFrame+0x628>
		LMIC.txrxFlags |= TXRX_NOPORT;
 80068a2:	4b19      	ldr	r3, [pc, #100]	@ (8006908 <decodeFrame+0x668>)
 80068a4:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 80068a8:	f043 0320 	orr.w	r3, r3, #32
 80068ac:	b2da      	uxtb	r2, r3
 80068ae:	4b16      	ldr	r3, [pc, #88]	@ (8006908 <decodeFrame+0x668>)
 80068b0:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		LMIC.dataBeg = poff;
 80068b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	4b13      	ldr	r3, [pc, #76]	@ (8006908 <decodeFrame+0x668>)
 80068ba:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
		LMIC.dataLen = 0;
 80068be:	4b12      	ldr	r3, [pc, #72]	@ (8006908 <decodeFrame+0x668>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 80068c6:	e016      	b.n	80068f6 <decodeFrame+0x656>
	} else {
		LMIC.txrxFlags |= TXRX_PORT;
 80068c8:	4b0f      	ldr	r3, [pc, #60]	@ (8006908 <decodeFrame+0x668>)
 80068ca:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 80068ce:	f043 0310 	orr.w	r3, r3, #16
 80068d2:	b2da      	uxtb	r2, r3
 80068d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006908 <decodeFrame+0x668>)
 80068d6:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		LMIC.dataBeg = poff;
 80068da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068dc:	b2da      	uxtb	r2, r3
 80068de:	4b0a      	ldr	r3, [pc, #40]	@ (8006908 <decodeFrame+0x668>)
 80068e0:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
		LMIC.dataLen = pend - poff;
 80068e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	b2da      	uxtb	r2, r3
 80068f0:	4b05      	ldr	r3, [pc, #20]	@ (8006908 <decodeFrame+0x668>)
 80068f2:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
	}
	return 1;
 80068f6:	2301      	movs	r3, #1
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3764      	adds	r7, #100	@ 0x64
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd90      	pop	{r4, r7, pc}
 8006900:	20000430 	.word	0x20000430
 8006904:	20000440 	.word	0x20000440
 8006908:	2000033c 	.word	0x2000033c

0800690c <setupRx2>:

// ================================================================================
// TX/RX transaction support

static void setupRx2(void)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	af00      	add	r7, sp, #0
	LMIC.txrxFlags = TXRX_DNW2;
 8006910:	4b0d      	ldr	r3, [pc, #52]	@ (8006948 <setupRx2+0x3c>)
 8006912:	2202      	movs	r2, #2
 8006914:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	LMIC.rps = dndr2rps(LMIC.dn2Dr);
 8006918:	4b0b      	ldr	r3, [pc, #44]	@ (8006948 <setupRx2+0x3c>)
 800691a:	f893 312b 	ldrb.w	r3, [r3, #299]	@ 0x12b
 800691e:	4618      	mov	r0, r3
 8006920:	f7fe fae2 	bl	8004ee8 <dndr2rps>
 8006924:	4603      	mov	r3, r0
 8006926:	461a      	mov	r2, r3
 8006928:	4b07      	ldr	r3, [pc, #28]	@ (8006948 <setupRx2+0x3c>)
 800692a:	81da      	strh	r2, [r3, #14]
	LMIC.freq = LMIC.dn2Freq;
 800692c:	4b06      	ldr	r3, [pc, #24]	@ (8006948 <setupRx2+0x3c>)
 800692e:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8006932:	4a05      	ldr	r2, [pc, #20]	@ (8006948 <setupRx2+0x3c>)
 8006934:	6093      	str	r3, [r2, #8]
	LMIC.dataLen = 0;
 8006936:	4b04      	ldr	r3, [pc, #16]	@ (8006948 <setupRx2+0x3c>)
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
	os_radio(RADIO_RX);
 800693e:	2002      	movs	r0, #2
 8006940:	f002 fbf8 	bl	8009134 <os_radio>
}
 8006944:	bf00      	nop
 8006946:	bd80      	pop	{r7, pc}
 8006948:	2000033c 	.word	0x2000033c

0800694c <schedRx2>:

static void schedRx2(ostime_t delay, osjobcb_t func)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
	// Add 1.5 symbols we need 5 out of 8. Try to sync 1.5 symbols into the preamble.
	LMIC.rxtime = LMIC.txend + delay
 8006956:	4b0e      	ldr	r3, [pc, #56]	@ (8006990 <schedRx2+0x44>)
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	18d1      	adds	r1, r2, r3
			+ (PAMBL_SYMS - MINRX_SYMS) * dr2hsym(LMIC.dn2Dr);
 800695e:	4b0c      	ldr	r3, [pc, #48]	@ (8006990 <schedRx2+0x44>)
 8006960:	f893 312b 	ldrb.w	r3, [r3, #299]	@ 0x12b
 8006964:	461a      	mov	r2, r3
 8006966:	4b0b      	ldr	r3, [pc, #44]	@ (8006994 <schedRx2+0x48>)
 8006968:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800696c:	4613      	mov	r3, r2
 800696e:	005b      	lsls	r3, r3, #1
 8006970:	4413      	add	r3, r2
 8006972:	440b      	add	r3, r1
	LMIC.rxtime = LMIC.txend + delay
 8006974:	4a06      	ldr	r2, [pc, #24]	@ (8006990 <schedRx2+0x44>)
 8006976:	6053      	str	r3, [r2, #4]
	os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 8006978:	4b05      	ldr	r3, [pc, #20]	@ (8006990 <schedRx2+0x44>)
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	3b40      	subs	r3, #64	@ 0x40
 800697e:	683a      	ldr	r2, [r7, #0]
 8006980:	4619      	mov	r1, r3
 8006982:	4805      	ldr	r0, [pc, #20]	@ (8006998 <schedRx2+0x4c>)
 8006984:	f001 fe1a 	bl	80085bc <os_setTimedCallback>
}
 8006988:	bf00      	nop
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	2000033c 	.word	0x2000033c
 8006994:	08012d8c 	.word	0x08012d8c
 8006998:	20000350 	.word	0x20000350

0800699c <setupRx1>:

static void setupRx1(osjobcb_t func)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
	LMIC.txrxFlags = TXRX_DNW1;
 80069a4:	4b0d      	ldr	r3, [pc, #52]	@ (80069dc <setupRx1+0x40>)
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	// Turn LMIC.rps from TX over to RX
	LMIC.rps = setNocrc(LMIC.rps, 1);
 80069ac:	4b0b      	ldr	r3, [pc, #44]	@ (80069dc <setupRx1+0x40>)
 80069ae:	89db      	ldrh	r3, [r3, #14]
 80069b0:	2101      	movs	r1, #1
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7fe fa49 	bl	8004e4a <setNocrc>
 80069b8:	4603      	mov	r3, r0
 80069ba:	461a      	mov	r2, r3
 80069bc:	4b07      	ldr	r3, [pc, #28]	@ (80069dc <setupRx1+0x40>)
 80069be:	81da      	strh	r2, [r3, #14]
	LMIC.dataLen = 0;
 80069c0:	4b06      	ldr	r3, [pc, #24]	@ (80069dc <setupRx1+0x40>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
	LMIC.osjob.func = func;
 80069c8:	4a04      	ldr	r2, [pc, #16]	@ (80069dc <setupRx1+0x40>)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	61d3      	str	r3, [r2, #28]
	os_radio(RADIO_RX);
 80069ce:	2002      	movs	r0, #2
 80069d0:	f002 fbb0 	bl	8009134 <os_radio>
}
 80069d4:	bf00      	nop
 80069d6:	3708      	adds	r7, #8
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	2000033c 	.word	0x2000033c

080069e0 <txDone>:

// Called by HAL once TX complete and delivers exact end of TX time stamp in LMIC.rxtime
static void txDone(ostime_t delay, osjobcb_t func)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
	if ((LMIC.opmode & (OP_TRACK | OP_PINGABLE | OP_PINGINI))
 80069ea:	4b22      	ldr	r3, [pc, #136]	@ (8006a74 <txDone+0x94>)
 80069ec:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80069f0:	461a      	mov	r2, r3
 80069f2:	f240 6302 	movw	r3, #1538	@ 0x602
 80069f6:	4013      	ands	r3, r2
 80069f8:	f240 4202 	movw	r2, #1026	@ 0x402
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d10b      	bne.n	8006a18 <txDone+0x38>
			== (OP_TRACK | OP_PINGABLE)) {
		rxschedInit(&LMIC.ping);    // note: reuses LMIC.frame buffer!
 8006a00:	481d      	ldr	r0, [pc, #116]	@ (8006a78 <txDone+0x98>)
 8006a02:	f7fe feab 	bl	800575c <rxschedInit>
		LMIC.opmode |= OP_PINGINI;
 8006a06:	4b1b      	ldr	r3, [pc, #108]	@ (8006a74 <txDone+0x94>)
 8006a08:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006a0c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	4b18      	ldr	r3, [pc, #96]	@ (8006a74 <txDone+0x94>)
 8006a14:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	setRx1Params();
	// LMIC.rxsyms carries the TX datarate (can be != LMIC.datarate [confirm retries etc.])
	// Setup receive - LMIC.rxtime is preloaded with 1.5 symbols offset to tune
	// into the middle of the 8 symbols preamble.
#if defined(CFG_eu868)
	if ( /* TX datarate */LMIC.rxsyms == DR_FSK) {
 8006a18:	4b16      	ldr	r3, [pc, #88]	@ (8006a74 <txDone+0x94>)
 8006a1a:	7c1b      	ldrb	r3, [r3, #16]
 8006a1c:	2b07      	cmp	r3, #7
 8006a1e:	d10a      	bne.n	8006a36 <txDone+0x56>
		LMIC.rxtime = LMIC.txend + delay - PRERX_FSK * us2osticksRound(160);
 8006a20:	4b14      	ldr	r3, [pc, #80]	@ (8006a74 <txDone+0x94>)
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4413      	add	r3, r2
 8006a28:	3b05      	subs	r3, #5
 8006a2a:	4a12      	ldr	r2, [pc, #72]	@ (8006a74 <txDone+0x94>)
 8006a2c:	6053      	str	r3, [r2, #4]
		LMIC.rxsyms = RXLEN_FSK;
 8006a2e:	4b11      	ldr	r3, [pc, #68]	@ (8006a74 <txDone+0x94>)
 8006a30:	2208      	movs	r2, #8
 8006a32:	741a      	strb	r2, [r3, #16]
 8006a34:	e012      	b.n	8006a5c <txDone+0x7c>
	} else
#endif
	{
		LMIC.rxtime = LMIC.txend + delay
 8006a36:	4b0f      	ldr	r3, [pc, #60]	@ (8006a74 <txDone+0x94>)
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	18d1      	adds	r1, r2, r3
				+ (PAMBL_SYMS - MINRX_SYMS) * dr2hsym(LMIC.dndr);
 8006a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a74 <txDone+0x94>)
 8006a40:	7c5b      	ldrb	r3, [r3, #17]
 8006a42:	461a      	mov	r2, r3
 8006a44:	4b0d      	ldr	r3, [pc, #52]	@ (8006a7c <txDone+0x9c>)
 8006a46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	005b      	lsls	r3, r3, #1
 8006a4e:	4413      	add	r3, r2
 8006a50:	440b      	add	r3, r1
		LMIC.rxtime = LMIC.txend + delay
 8006a52:	4a08      	ldr	r2, [pc, #32]	@ (8006a74 <txDone+0x94>)
 8006a54:	6053      	str	r3, [r2, #4]
		LMIC.rxsyms = MINRX_SYMS;
 8006a56:	4b07      	ldr	r3, [pc, #28]	@ (8006a74 <txDone+0x94>)
 8006a58:	2205      	movs	r2, #5
 8006a5a:	741a      	strb	r2, [r3, #16]
	}
	os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 8006a5c:	4b05      	ldr	r3, [pc, #20]	@ (8006a74 <txDone+0x94>)
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	3b40      	subs	r3, #64	@ 0x40
 8006a62:	683a      	ldr	r2, [r7, #0]
 8006a64:	4619      	mov	r1, r3
 8006a66:	4806      	ldr	r0, [pc, #24]	@ (8006a80 <txDone+0xa0>)
 8006a68:	f001 fda8 	bl	80085bc <os_setTimedCallback>
}
 8006a6c:	bf00      	nop
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	2000033c 	.word	0x2000033c
 8006a78:	20000470 	.word	0x20000470
 8006a7c:	08012d8c 	.word	0x08012d8c
 8006a80:	20000350 	.word	0x20000350

08006a84 <onJoinFailed>:

// ======================================== Join frames

static void onJoinFailed(xref2osjob_t osjob)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
	// Notify app - must call LMIC_reset() to stop joining
	// otherwise join procedure continues.
	reportEvent(EV_JOIN_FAILED);
 8006a8c:	2008      	movs	r0, #8
 8006a8e:	f7ff faef 	bl	8006070 <reportEvent>
}
 8006a92:	bf00      	nop
 8006a94:	3708      	adds	r7, #8
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
	...

08006a9c <processJoinAccept>:

static bit_t processJoinAccept(void)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b086      	sub	sp, #24
 8006aa0:	af00      	add	r7, sp, #0
	ASSERT(LMIC.txrxFlags != TXRX_DNW1 || LMIC.dataLen != 0);
 8006aa2:	4b99      	ldr	r3, [pc, #612]	@ (8006d08 <processJoinAccept+0x26c>)
 8006aa4:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d106      	bne.n	8006aba <processJoinAccept+0x1e>
 8006aac:	4b96      	ldr	r3, [pc, #600]	@ (8006d08 <processJoinAccept+0x26c>)
 8006aae:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d101      	bne.n	8006aba <processJoinAccept+0x1e>
 8006ab6:	f7fe f8cb 	bl	8004c50 <hal_failed>
	ASSERT((LMIC.opmode & OP_TXRXPEND) != 0);
 8006aba:	4b93      	ldr	r3, [pc, #588]	@ (8006d08 <processJoinAccept+0x26c>)
 8006abc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006ac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d101      	bne.n	8006acc <processJoinAccept+0x30>
 8006ac8:	f7fe f8c2 	bl	8004c50 <hal_failed>

	if (LMIC.dataLen == 0) {
 8006acc:	4b8e      	ldr	r3, [pc, #568]	@ (8006d08 <processJoinAccept+0x26c>)
 8006ace:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d14c      	bne.n	8006b70 <processJoinAccept+0xd4>
		nojoinframe: if ((LMIC.opmode & OP_JOINING) == 0) {
 8006ad6:	bf00      	nop
 8006ad8:	e000      	b.n	8006adc <processJoinAccept+0x40>
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = dlen < 4 ? 0 : mic,
						e_.info2 = hdr + (dlen<<8)));
		badframe: if ((LMIC.txrxFlags & TXRX_DNW1) != 0)
			return 0;
		goto nojoinframe;
 8006ada:	bf00      	nop
		nojoinframe: if ((LMIC.opmode & OP_JOINING) == 0) {
 8006adc:	4b8a      	ldr	r3, [pc, #552]	@ (8006d08 <processJoinAccept+0x26c>)
 8006ade:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006ae2:	f003 0304 	and.w	r3, r3, #4
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d123      	bne.n	8006b32 <processJoinAccept+0x96>
			ASSERT((LMIC.opmode & OP_REJOIN) != 0);
 8006aea:	4b87      	ldr	r3, [pc, #540]	@ (8006d08 <processJoinAccept+0x26c>)
 8006aec:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006af0:	f003 0320 	and.w	r3, r3, #32
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d101      	bne.n	8006afc <processJoinAccept+0x60>
 8006af8:	f7fe f8aa 	bl	8004c50 <hal_failed>
			LMIC.opmode &= ~(OP_REJOIN | OP_TXRXPEND);
 8006afc:	4b82      	ldr	r3, [pc, #520]	@ (8006d08 <processJoinAccept+0x26c>)
 8006afe:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006b02:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	4b7f      	ldr	r3, [pc, #508]	@ (8006d08 <processJoinAccept+0x26c>)
 8006b0a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			if (LMIC.rejoinCnt < 10)
 8006b0e:	4b7e      	ldr	r3, [pc, #504]	@ (8006d08 <processJoinAccept+0x26c>)
 8006b10:	f893 30b2 	ldrb.w	r3, [r3, #178]	@ 0xb2
 8006b14:	2b09      	cmp	r3, #9
 8006b16:	d807      	bhi.n	8006b28 <processJoinAccept+0x8c>
				LMIC.rejoinCnt++;
 8006b18:	4b7b      	ldr	r3, [pc, #492]	@ (8006d08 <processJoinAccept+0x26c>)
 8006b1a:	f893 30b2 	ldrb.w	r3, [r3, #178]	@ 0xb2
 8006b1e:	3301      	adds	r3, #1
 8006b20:	b2da      	uxtb	r2, r3
 8006b22:	4b79      	ldr	r3, [pc, #484]	@ (8006d08 <processJoinAccept+0x26c>)
 8006b24:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
			reportEvent(EV_REJOIN_FAILED);
 8006b28:	2009      	movs	r0, #9
 8006b2a:	f7ff faa1 	bl	8006070 <reportEvent>
			return 1;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e0e6      	b.n	8006d00 <processJoinAccept+0x264>
		LMIC.opmode &= ~OP_TXRXPEND;
 8006b32:	4b75      	ldr	r3, [pc, #468]	@ (8006d08 <processJoinAccept+0x26c>)
 8006b34:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006b38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	4b72      	ldr	r3, [pc, #456]	@ (8006d08 <processJoinAccept+0x26c>)
 8006b40:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		ostime_t delay = nextJoinState();
 8006b44:	f7ff fa22 	bl	8005f8c <nextJoinState>
 8006b48:	6078      	str	r0, [r7, #4]
		os_setTimedCallback(&LMIC.osjob, os_getTime() + delay,
 8006b4a:	f001 fccd 	bl	80084e8 <os_getTime>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	18d1      	adds	r1, r2, r3
				(delay & 1) != 0 ? FUNC_ADDR(onJoinFailed) // one JOIN iteration done and failed
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f003 0301 	and.w	r3, r3, #1
		os_setTimedCallback(&LMIC.osjob, os_getTime() + delay,
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d001      	beq.n	8006b62 <processJoinAccept+0xc6>
 8006b5e:	4b6b      	ldr	r3, [pc, #428]	@ (8006d0c <processJoinAccept+0x270>)
 8006b60:	e000      	b.n	8006b64 <processJoinAccept+0xc8>
 8006b62:	4b6b      	ldr	r3, [pc, #428]	@ (8006d10 <processJoinAccept+0x274>)
 8006b64:	461a      	mov	r2, r3
 8006b66:	486b      	ldr	r0, [pc, #428]	@ (8006d14 <processJoinAccept+0x278>)
 8006b68:	f001 fd28 	bl	80085bc <os_setTimedCallback>
		return 1;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e0c7      	b.n	8006d00 <processJoinAccept+0x264>
	u1_t hdr = LMIC.frame[0];
 8006b70:	4b65      	ldr	r3, [pc, #404]	@ (8006d08 <processJoinAccept+0x26c>)
 8006b72:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8006b76:	757b      	strb	r3, [r7, #21]
	u1_t dlen = LMIC.dataLen;
 8006b78:	4b63      	ldr	r3, [pc, #396]	@ (8006d08 <processJoinAccept+0x26c>)
 8006b7a:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8006b7e:	75fb      	strb	r3, [r7, #23]
	u4_t mic = os_rlsbf4(&LMIC.frame[dlen - 4]); // safe before modified by encrypt!
 8006b80:	7dfb      	ldrb	r3, [r7, #23]
 8006b82:	3b04      	subs	r3, #4
 8006b84:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006b88:	4a5f      	ldr	r2, [pc, #380]	@ (8006d08 <processJoinAccept+0x26c>)
 8006b8a:	4413      	add	r3, r2
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7fe fa1b 	bl	8004fc8 <os_rlsbf4>
 8006b92:	6138      	str	r0, [r7, #16]
	if ((dlen != LEN_JA && dlen != LEN_JAEXT)
 8006b94:	7dfb      	ldrb	r3, [r7, #23]
 8006b96:	2b11      	cmp	r3, #17
 8006b98:	d002      	beq.n	8006ba0 <processJoinAccept+0x104>
 8006b9a:	7dfb      	ldrb	r3, [r7, #23]
 8006b9c:	2b21      	cmp	r3, #33	@ 0x21
 8006b9e:	d104      	bne.n	8006baa <processJoinAccept+0x10e>
			|| (hdr & (HDR_FTYPE | HDR_MAJOR))
 8006ba0:	7d7b      	ldrb	r3, [r7, #21]
 8006ba2:	f003 03e3 	and.w	r3, r3, #227	@ 0xe3
 8006ba6:	2b20      	cmp	r3, #32
 8006ba8:	d00b      	beq.n	8006bc2 <processJoinAccept+0x126>
		badframe: if ((LMIC.txrxFlags & TXRX_DNW1) != 0)
 8006baa:	bf00      	nop
 8006bac:	e000      	b.n	8006bb0 <processJoinAccept+0x114>
	}
	aes_encrypt(LMIC.frame + 1, dlen - 1);
	if (!aes_verifyMic0(LMIC.frame, dlen - 4)) {
		EV(specCond, ERR, (e_.reason = EV::specCond_t::JOIN_BAD_MIC,
						e_.info = mic));
		goto badframe;
 8006bae:	bf00      	nop
		badframe: if ((LMIC.txrxFlags & TXRX_DNW1) != 0)
 8006bb0:	4b55      	ldr	r3, [pc, #340]	@ (8006d08 <processJoinAccept+0x26c>)
 8006bb2:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8006bb6:	f003 0301 	and.w	r3, r3, #1
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d08d      	beq.n	8006ada <processJoinAccept+0x3e>
			return 0;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	e09e      	b.n	8006d00 <processJoinAccept+0x264>
	aes_encrypt(LMIC.frame + 1, dlen - 1);
 8006bc2:	4a55      	ldr	r2, [pc, #340]	@ (8006d18 <processJoinAccept+0x27c>)
 8006bc4:	7dfb      	ldrb	r3, [r7, #23]
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	4619      	mov	r1, r3
 8006bca:	4610      	mov	r0, r2
 8006bcc:	f7fe fb9e 	bl	800530c <aes_encrypt>
	if (!aes_verifyMic0(LMIC.frame, dlen - 4)) {
 8006bd0:	7dfb      	ldrb	r3, [r7, #23]
 8006bd2:	3b04      	subs	r3, #4
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	4851      	ldr	r0, [pc, #324]	@ (8006d1c <processJoinAccept+0x280>)
 8006bd8:	f7fe fb76 	bl	80052c8 <aes_verifyMic0>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d0e5      	beq.n	8006bae <processJoinAccept+0x112>
	}

	u4_t addr = os_rlsbf4(LMIC.frame + OFF_JA_DEVADDR);
 8006be2:	4b4f      	ldr	r3, [pc, #316]	@ (8006d20 <processJoinAccept+0x284>)
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7fe f9ef 	bl	8004fc8 <os_rlsbf4>
 8006bea:	60f8      	str	r0, [r7, #12]
	LMIC.devaddr = addr;
 8006bec:	4a46      	ldr	r2, [pc, #280]	@ (8006d08 <processJoinAccept+0x26c>)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
	LMIC.netid = os_rlsbf4(&LMIC.frame[OFF_JA_NETID]) & 0xFFFFFF;
 8006bf4:	484b      	ldr	r0, [pc, #300]	@ (8006d24 <processJoinAccept+0x288>)
 8006bf6:	f7fe f9e7 	bl	8004fc8 <os_rlsbf4>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006c00:	4a41      	ldr	r2, [pc, #260]	@ (8006d08 <processJoinAccept+0x26c>)
 8006c02:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

#if defined(CFG_eu868)
	initDefaultChannels(0);
 8006c06:	2000      	movs	r0, #0
 8006c08:	f7fe ff12 	bl	8005a30 <initDefaultChannels>
#endif
	if (dlen > LEN_JA) {
 8006c0c:	7dfb      	ldrb	r3, [r7, #23]
 8006c0e:	2b11      	cmp	r3, #17
 8006c10:	d920      	bls.n	8006c54 <processJoinAccept+0x1b8>
#if defined(CFG_us915)
        goto badframe;
#endif
		dlen = OFF_CFLIST;
 8006c12:	230d      	movs	r3, #13
 8006c14:	75fb      	strb	r3, [r7, #23]
		for (u1_t chidx = 3; chidx < 8; chidx++, dlen += 3) {
 8006c16:	2303      	movs	r3, #3
 8006c18:	75bb      	strb	r3, [r7, #22]
 8006c1a:	e018      	b.n	8006c4e <processJoinAccept+0x1b2>
			u4_t freq = convFreq(&LMIC.frame[dlen]);
 8006c1c:	7dfb      	ldrb	r3, [r7, #23]
 8006c1e:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006c22:	4a39      	ldr	r2, [pc, #228]	@ (8006d08 <processJoinAccept+0x26c>)
 8006c24:	4413      	add	r3, r2
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7ff f802 	bl	8005c30 <convFreq>
 8006c2c:	60b8      	str	r0, [r7, #8]
			if (freq)
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d006      	beq.n	8006c42 <processJoinAccept+0x1a6>
				LMIC_setupChannel(chidx, freq, 0, -1);
 8006c34:	7db8      	ldrb	r0, [r7, #22]
 8006c36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	68b9      	ldr	r1, [r7, #8]
 8006c3e:	f7fe ff7d 	bl	8005b3c <LMIC_setupChannel>
		for (u1_t chidx = 3; chidx < 8; chidx++, dlen += 3) {
 8006c42:	7dbb      	ldrb	r3, [r7, #22]
 8006c44:	3301      	adds	r3, #1
 8006c46:	75bb      	strb	r3, [r7, #22]
 8006c48:	7dfb      	ldrb	r3, [r7, #23]
 8006c4a:	3303      	adds	r3, #3
 8006c4c:	75fb      	strb	r3, [r7, #23]
 8006c4e:	7dbb      	ldrb	r3, [r7, #22]
 8006c50:	2b07      	cmp	r3, #7
 8006c52:	d9e3      	bls.n	8006c1c <processJoinAccept+0x180>
		}
	}

	// already incremented when JOIN REQ got sent off
	aes_sessKeys(LMIC.devNonce - 1, &LMIC.frame[OFF_JA_ARTNONCE], LMIC.nwkKey,
 8006c54:	4b2c      	ldr	r3, [pc, #176]	@ (8006d08 <processJoinAccept+0x26c>)
 8006c56:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	b298      	uxth	r0, r3
 8006c5e:	4b32      	ldr	r3, [pc, #200]	@ (8006d28 <processJoinAccept+0x28c>)
 8006c60:	4a32      	ldr	r2, [pc, #200]	@ (8006d2c <processJoinAccept+0x290>)
 8006c62:	492d      	ldr	r1, [pc, #180]	@ (8006d18 <processJoinAccept+0x27c>)
 8006c64:	f7fe fbac 	bl	80053c0 <aes_sessKeys>
					e_.mic = mic,
					e_.reason = ((LMIC.opmode & OP_REJOIN) != 0
							? EV::joininfo_t::REJOIN_ACCEPT
							: EV::joininfo_t::ACCEPT)));

	ASSERT((LMIC.opmode & (OP_JOINING | OP_REJOIN)) != 0);
 8006c68:	4b27      	ldr	r3, [pc, #156]	@ (8006d08 <processJoinAccept+0x26c>)
 8006c6a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006c6e:	f003 0324 	and.w	r3, r3, #36	@ 0x24
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d101      	bne.n	8006c7a <processJoinAccept+0x1de>
 8006c76:	f7fd ffeb 	bl	8004c50 <hal_failed>
	if ((LMIC.opmode & OP_REJOIN) != 0) {
 8006c7a:	4b23      	ldr	r3, [pc, #140]	@ (8006d08 <processJoinAccept+0x26c>)
 8006c7c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006c80:	f003 0320 	and.w	r3, r3, #32
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00e      	beq.n	8006ca6 <processJoinAccept+0x20a>
		// Lower DR every try below current UP DR
		LMIC.datarate = lowerDR(LMIC.datarate, LMIC.rejoinCnt);
 8006c88:	4b1f      	ldr	r3, [pc, #124]	@ (8006d08 <processJoinAccept+0x26c>)
 8006c8a:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8006c8e:	4a1e      	ldr	r2, [pc, #120]	@ (8006d08 <processJoinAccept+0x26c>)
 8006c90:	f892 20b2 	ldrb.w	r2, [r2, #178]	@ 0xb2
 8006c94:	4611      	mov	r1, r2
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7fe f968 	bl	8004f6c <lowerDR>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	4b19      	ldr	r3, [pc, #100]	@ (8006d08 <processJoinAccept+0x26c>)
 8006ca2:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
	}
	LMIC.opmode &= ~(OP_JOINING | OP_TRACK | OP_REJOIN | OP_TXRXPEND
 8006ca6:	4b18      	ldr	r3, [pc, #96]	@ (8006d08 <processJoinAccept+0x26c>)
 8006ca8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006cac:	f423 7329 	bic.w	r3, r3, #676	@ 0x2a4
 8006cb0:	f023 0302 	bic.w	r3, r3, #2
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	4b14      	ldr	r3, [pc, #80]	@ (8006d08 <processJoinAccept+0x26c>)
 8006cb8:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			| OP_PINGINI) | OP_NEXTCHNL;
	LMIC.txCnt = 0;
 8006cbc:	4b12      	ldr	r3, [pc, #72]	@ (8006d08 <processJoinAccept+0x26c>)
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	stateJustJoined();
 8006cc4:	f7ff f9f2 	bl	80060ac <stateJustJoined>
	LMIC.dn2Dr = LMIC.frame[OFF_JA_DLSET] & 0x0F;
 8006cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8006d08 <processJoinAccept+0x26c>)
 8006cca:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 8006cce:	f003 030f 	and.w	r3, r3, #15
 8006cd2:	b2da      	uxtb	r2, r3
 8006cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8006d08 <processJoinAccept+0x26c>)
 8006cd6:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
	LMIC.rxDelay = LMIC.frame[OFF_JA_RXDLY];
 8006cda:	4b0b      	ldr	r3, [pc, #44]	@ (8006d08 <processJoinAccept+0x26c>)
 8006cdc:	f893 2154 	ldrb.w	r2, [r3, #340]	@ 0x154
 8006ce0:	4b09      	ldr	r3, [pc, #36]	@ (8006d08 <processJoinAccept+0x26c>)
 8006ce2:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
	if (LMIC.rxDelay == 0)
 8006ce6:	4b08      	ldr	r3, [pc, #32]	@ (8006d08 <processJoinAccept+0x26c>)
 8006ce8:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d103      	bne.n	8006cf8 <processJoinAccept+0x25c>
		LMIC.rxDelay = 1;
 8006cf0:	4b05      	ldr	r3, [pc, #20]	@ (8006d08 <processJoinAccept+0x26c>)
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
	reportEvent(EV_JOINED);
 8006cf8:	2006      	movs	r0, #6
 8006cfa:	f7ff f9b9 	bl	8006070 <reportEvent>
	return 1;
 8006cfe:	2301      	movs	r3, #1
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3718      	adds	r7, #24
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	2000033c 	.word	0x2000033c
 8006d0c:	08006a85 	.word	0x08006a85
 8006d10:	0800605d 	.word	0x0800605d
 8006d14:	20000350 	.word	0x20000350
 8006d18:	20000485 	.word	0x20000485
 8006d1c:	20000484 	.word	0x20000484
 8006d20:	2000048b 	.word	0x2000048b
 8006d24:	20000488 	.word	0x20000488
 8006d28:	20000440 	.word	0x20000440
 8006d2c:	20000430 	.word	0x20000430

08006d30 <processRx2Jacc>:

static void processRx2Jacc(xref2osjob_t osjob)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
	if (LMIC.dataLen == 0)
 8006d38:	4b07      	ldr	r3, [pc, #28]	@ (8006d58 <processRx2Jacc+0x28>)
 8006d3a:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d103      	bne.n	8006d4a <processRx2Jacc+0x1a>
		LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 8006d42:	4b05      	ldr	r3, [pc, #20]	@ (8006d58 <processRx2Jacc+0x28>)
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	processJoinAccept();
 8006d4a:	f7ff fea7 	bl	8006a9c <processJoinAccept>
}
 8006d4e:	bf00      	nop
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	2000033c 	.word	0x2000033c

08006d5c <setupRx2Jacc>:

static void setupRx2Jacc(xref2osjob_t osjob)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
	LMIC.osjob.func = FUNC_ADDR(processRx2Jacc);
 8006d64:	4b04      	ldr	r3, [pc, #16]	@ (8006d78 <setupRx2Jacc+0x1c>)
 8006d66:	4a05      	ldr	r2, [pc, #20]	@ (8006d7c <setupRx2Jacc+0x20>)
 8006d68:	61da      	str	r2, [r3, #28]
	setupRx2();
 8006d6a:	f7ff fdcf 	bl	800690c <setupRx2>
}
 8006d6e:	bf00      	nop
 8006d70:	3708      	adds	r7, #8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	2000033c 	.word	0x2000033c
 8006d7c:	08006d31 	.word	0x08006d31

08006d80 <processRx1Jacc>:

static void processRx1Jacc(xref2osjob_t osjob)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
	if (LMIC.dataLen == 0 || !processJoinAccept())
 8006d88:	4b08      	ldr	r3, [pc, #32]	@ (8006dac <processRx1Jacc+0x2c>)
 8006d8a:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d004      	beq.n	8006d9c <processRx1Jacc+0x1c>
 8006d92:	f7ff fe83 	bl	8006a9c <processJoinAccept>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d103      	bne.n	8006da4 <processRx1Jacc+0x24>
		schedRx2(DELAY_JACC2_osticks, FUNC_ADDR(setupRx2Jacc));
 8006d9c:	4904      	ldr	r1, [pc, #16]	@ (8006db0 <processRx1Jacc+0x30>)
 8006d9e:	4805      	ldr	r0, [pc, #20]	@ (8006db4 <processRx1Jacc+0x34>)
 8006da0:	f7ff fdd4 	bl	800694c <schedRx2>
}
 8006da4:	bf00      	nop
 8006da6:	3708      	adds	r7, #8
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	2000033c 	.word	0x2000033c
 8006db0:	08006d5d 	.word	0x08006d5d
 8006db4:	0002ee00 	.word	0x0002ee00

08006db8 <setupRx1Jacc>:

static void setupRx1Jacc(xref2osjob_t osjob)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
	setupRx1(FUNC_ADDR(processRx1Jacc));
 8006dc0:	4803      	ldr	r0, [pc, #12]	@ (8006dd0 <setupRx1Jacc+0x18>)
 8006dc2:	f7ff fdeb 	bl	800699c <setupRx1>
}
 8006dc6:	bf00      	nop
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	08006d81 	.word	0x08006d81

08006dd4 <jreqDone>:

static void jreqDone(xref2osjob_t osjob)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
	txDone(DELAY_JACC1_osticks, FUNC_ADDR(setupRx1Jacc));
 8006ddc:	4903      	ldr	r1, [pc, #12]	@ (8006dec <jreqDone+0x18>)
 8006dde:	4804      	ldr	r0, [pc, #16]	@ (8006df0 <jreqDone+0x1c>)
 8006de0:	f7ff fdfe 	bl	80069e0 <txDone>
}
 8006de4:	bf00      	nop
 8006de6:	3708      	adds	r7, #8
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	08006db9 	.word	0x08006db9
 8006df0:	00027100 	.word	0x00027100

08006df4 <processRx2DnDataDelay>:

// Fwd decl.
static bit_t processDnData(void);

static void processRx2DnDataDelay(xref2osjob_t osjob)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
	processDnData();
 8006dfc:	f000 fbc6 	bl	800758c <processDnData>
}
 8006e00:	bf00      	nop
 8006e02:	3708      	adds	r7, #8
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <processRx2DnData>:

static void processRx2DnData(xref2osjob_t osjob)
{
 8006e08:	b590      	push	{r4, r7, lr}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
	if (LMIC.dataLen == 0) {
 8006e10:	4b0f      	ldr	r3, [pc, #60]	@ (8006e50 <processRx2DnData+0x48>)
 8006e12:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d115      	bne.n	8006e46 <processRx2DnData+0x3e>
		LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 8006e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e50 <processRx2DnData+0x48>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		// Delay callback processing to avoid up TX while gateway is txing our missed frame! 
		// Since DNW2 uses SF12 by default we wait 3 secs.
		os_setTimedCallback(&LMIC.osjob,
				(os_getTime() + DNW2_SAFETY_ZONE + rndDelay(2)),
 8006e22:	f001 fb61 	bl	80084e8 <os_getTime>
 8006e26:	4603      	mov	r3, r0
 8006e28:	f503 34bb 	add.w	r4, r3, #95744	@ 0x17600
 8006e2c:	f504 7480 	add.w	r4, r4, #256	@ 0x100
 8006e30:	2002      	movs	r0, #2
 8006e32:	f7fe fd4f 	bl	80058d4 <rndDelay>
 8006e36:	4603      	mov	r3, r0
		os_setTimedCallback(&LMIC.osjob,
 8006e38:	4423      	add	r3, r4
 8006e3a:	4a06      	ldr	r2, [pc, #24]	@ (8006e54 <processRx2DnData+0x4c>)
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	4806      	ldr	r0, [pc, #24]	@ (8006e58 <processRx2DnData+0x50>)
 8006e40:	f001 fbbc 	bl	80085bc <os_setTimedCallback>
				FUNC_ADDR(processRx2DnDataDelay));
		return;
 8006e44:	e001      	b.n	8006e4a <processRx2DnData+0x42>
	}
	processDnData();
 8006e46:	f000 fba1 	bl	800758c <processDnData>
}
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd90      	pop	{r4, r7, pc}
 8006e50:	2000033c 	.word	0x2000033c
 8006e54:	08006df5 	.word	0x08006df5
 8006e58:	20000350 	.word	0x20000350

08006e5c <setupRx2DnData>:

static void setupRx2DnData(xref2osjob_t osjob)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
	LMIC.osjob.func = FUNC_ADDR(processRx2DnData);
 8006e64:	4b04      	ldr	r3, [pc, #16]	@ (8006e78 <setupRx2DnData+0x1c>)
 8006e66:	4a05      	ldr	r2, [pc, #20]	@ (8006e7c <setupRx2DnData+0x20>)
 8006e68:	61da      	str	r2, [r3, #28]
	setupRx2();
 8006e6a:	f7ff fd4f 	bl	800690c <setupRx2>
}
 8006e6e:	bf00      	nop
 8006e70:	3708      	adds	r7, #8
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	2000033c 	.word	0x2000033c
 8006e7c:	08006e09 	.word	0x08006e09

08006e80 <processRx1DnData>:

static void processRx1DnData(xref2osjob_t osjob)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
	if (LMIC.dataLen == 0 || !processDnData())
 8006e88:	4b0d      	ldr	r3, [pc, #52]	@ (8006ec0 <processRx1DnData+0x40>)
 8006e8a:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d004      	beq.n	8006e9c <processRx1DnData+0x1c>
 8006e92:	f000 fb7b 	bl	800758c <processDnData>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10c      	bne.n	8006eb6 <processRx1DnData+0x36>
		schedRx2(sec2osticks(LMIC.rxDelay + (int )DELAY_EXTDNW2),
 8006e9c:	4b08      	ldr	r3, [pc, #32]	@ (8006ec0 <processRx1DnData+0x40>)
 8006e9e:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006eaa:	fb02 f303 	mul.w	r3, r2, r3
 8006eae:	4905      	ldr	r1, [pc, #20]	@ (8006ec4 <processRx1DnData+0x44>)
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f7ff fd4b 	bl	800694c <schedRx2>
				FUNC_ADDR(setupRx2DnData));
}
 8006eb6:	bf00      	nop
 8006eb8:	3708      	adds	r7, #8
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	2000033c 	.word	0x2000033c
 8006ec4:	08006e5d 	.word	0x08006e5d

08006ec8 <setupRx1DnData>:

static void setupRx1DnData(xref2osjob_t osjob)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
	setupRx1(FUNC_ADDR(processRx1DnData));
 8006ed0:	4803      	ldr	r0, [pc, #12]	@ (8006ee0 <setupRx1DnData+0x18>)
 8006ed2:	f7ff fd63 	bl	800699c <setupRx1>
}
 8006ed6:	bf00      	nop
 8006ed8:	3708      	adds	r7, #8
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	08006e81 	.word	0x08006e81

08006ee4 <updataDone>:

static void updataDone(xref2osjob_t osjob)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
	txDone(sec2osticks(LMIC.rxDelay), FUNC_ADDR(setupRx1DnData));
 8006eec:	4b07      	ldr	r3, [pc, #28]	@ (8006f0c <updataDone+0x28>)
 8006eee:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006ef8:	fb02 f303 	mul.w	r3, r2, r3
 8006efc:	4904      	ldr	r1, [pc, #16]	@ (8006f10 <updataDone+0x2c>)
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7ff fd6e 	bl	80069e0 <txDone>
}
 8006f04:	bf00      	nop
 8006f06:	3708      	adds	r7, #8
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	2000033c 	.word	0x2000033c
 8006f10:	08006ec9 	.word	0x08006ec9

08006f14 <buildDataFrame>:

// ======================================== 

static void buildDataFrame(void)
{
 8006f14:	b590      	push	{r4, r7, lr}
 8006f16:	b087      	sub	sp, #28
 8006f18:	af02      	add	r7, sp, #8
	bit_t txdata = ((LMIC.opmode & (OP_TXDATA | OP_POLL)) != OP_POLL);
 8006f1a:	4ba3      	ldr	r3, [pc, #652]	@ (80071a8 <buildDataFrame+0x294>)
 8006f1c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006f20:	f003 0318 	and.w	r3, r3, #24
 8006f24:	2b10      	cmp	r3, #16
 8006f26:	bf14      	ite	ne
 8006f28:	2301      	movne	r3, #1
 8006f2a:	2300      	moveq	r3, #0
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	73fb      	strb	r3, [r7, #15]
	u1_t dlen = txdata ? LMIC.pendTxLen : 0;
 8006f30:	7bfb      	ldrb	r3, [r7, #15]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d003      	beq.n	8006f3e <buildDataFrame+0x2a>
 8006f36:	4b9c      	ldr	r3, [pc, #624]	@ (80071a8 <buildDataFrame+0x294>)
 8006f38:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 8006f3c:	e000      	b.n	8006f40 <buildDataFrame+0x2c>
 8006f3e:	2300      	movs	r3, #0
 8006f40:	71bb      	strb	r3, [r7, #6]

	// Piggyback MAC options
	// Prioritize by importance
	int end = OFF_DAT_OPTS;
 8006f42:	2308      	movs	r3, #8
 8006f44:	60bb      	str	r3, [r7, #8]
	if ((LMIC.opmode & (OP_TRACK | OP_PINGABLE)) == (OP_TRACK | OP_PINGABLE)) {
 8006f46:	4b98      	ldr	r3, [pc, #608]	@ (80071a8 <buildDataFrame+0x294>)
 8006f48:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	f240 4302 	movw	r3, #1026	@ 0x402
 8006f52:	4013      	ands	r3, r2
 8006f54:	f240 4202 	movw	r2, #1026	@ 0x402
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d11c      	bne.n	8006f96 <buildDataFrame+0x82>
		// Indicate pingability in every UP frame
		LMIC.frame[end] = MCMD_PING_IND;
 8006f5c:	4a92      	ldr	r2, [pc, #584]	@ (80071a8 <buildDataFrame+0x294>)
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	4413      	add	r3, r2
 8006f62:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006f66:	2210      	movs	r2, #16
 8006f68:	701a      	strb	r2, [r3, #0]
		LMIC.frame[end + 1] = LMIC.ping.dr | (LMIC.ping.intvExp << 4);
 8006f6a:	4b8f      	ldr	r3, [pc, #572]	@ (80071a8 <buildDataFrame+0x294>)
 8006f6c:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8006f70:	b25a      	sxtb	r2, r3
 8006f72:	4b8d      	ldr	r3, [pc, #564]	@ (80071a8 <buildDataFrame+0x294>)
 8006f74:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8006f78:	011b      	lsls	r3, r3, #4
 8006f7a:	b25b      	sxtb	r3, r3
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	b25a      	sxtb	r2, r3
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	3301      	adds	r3, #1
 8006f84:	b2d1      	uxtb	r1, r2
 8006f86:	4a88      	ldr	r2, [pc, #544]	@ (80071a8 <buildDataFrame+0x294>)
 8006f88:	4413      	add	r3, r2
 8006f8a:	460a      	mov	r2, r1
 8006f8c:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		end += 2;
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	3302      	adds	r3, #2
 8006f94:	60bb      	str	r3, [r7, #8]
	}
	if (LMIC.dutyCapAns) {
 8006f96:	4b84      	ldr	r3, [pc, #528]	@ (80071a8 <buildDataFrame+0x294>)
 8006f98:	f893 3129 	ldrb.w	r3, [r3, #297]	@ 0x129
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00d      	beq.n	8006fbc <buildDataFrame+0xa8>
		LMIC.frame[end] = MCMD_DCAP_ANS;
 8006fa0:	4a81      	ldr	r2, [pc, #516]	@ (80071a8 <buildDataFrame+0x294>)
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006faa:	2204      	movs	r2, #4
 8006fac:	701a      	strb	r2, [r3, #0]
		end += 1;
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	60bb      	str	r3, [r7, #8]
		LMIC.dutyCapAns = 0;
 8006fb4:	4b7c      	ldr	r3, [pc, #496]	@ (80071a8 <buildDataFrame+0x294>)
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
	}
	if (LMIC.dn2Ans) {
 8006fbc:	4b7a      	ldr	r3, [pc, #488]	@ (80071a8 <buildDataFrame+0x294>)
 8006fbe:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d01a      	beq.n	8006ffc <buildDataFrame+0xe8>
		LMIC.frame[end + 0] = MCMD_DN2P_ANS;
 8006fc6:	4a78      	ldr	r2, [pc, #480]	@ (80071a8 <buildDataFrame+0x294>)
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	4413      	add	r3, r2
 8006fcc:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006fd0:	2205      	movs	r2, #5
 8006fd2:	701a      	strb	r2, [r3, #0]
		LMIC.frame[end + 1] = LMIC.dn2Ans & ~MCMD_DN2P_ANS_RFU;
 8006fd4:	4b74      	ldr	r3, [pc, #464]	@ (80071a8 <buildDataFrame+0x294>)
 8006fd6:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	f002 0203 	and.w	r2, r2, #3
 8006fe2:	b2d1      	uxtb	r1, r2
 8006fe4:	4a70      	ldr	r2, [pc, #448]	@ (80071a8 <buildDataFrame+0x294>)
 8006fe6:	4413      	add	r3, r2
 8006fe8:	460a      	mov	r2, r1
 8006fea:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		end += 2;
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	3302      	adds	r3, #2
 8006ff2:	60bb      	str	r3, [r7, #8]
		LMIC.dn2Ans = 0;
 8006ff4:	4b6c      	ldr	r3, [pc, #432]	@ (80071a8 <buildDataFrame+0x294>)
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
	}
	if (LMIC.devsAns) {  // answer to device status
 8006ffc:	4b6a      	ldr	r3, [pc, #424]	@ (80071a8 <buildDataFrame+0x294>)
 8006ffe:	f893 3126 	ldrb.w	r3, [r3, #294]	@ 0x126
 8007002:	2b00      	cmp	r3, #0
 8007004:	d021      	beq.n	800704a <buildDataFrame+0x136>
		LMIC.frame[end + 0] = MCMD_DEVS_ANS;
 8007006:	4a68      	ldr	r2, [pc, #416]	@ (80071a8 <buildDataFrame+0x294>)
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	4413      	add	r3, r2
 800700c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8007010:	2206      	movs	r2, #6
 8007012:	701a      	strb	r2, [r3, #0]
		LMIC.frame[end + 1] = os_getBattLevel();
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	1c5c      	adds	r4, r3, #1
 8007018:	f7fe f869 	bl	80050ee <os_getBattLevel>
 800701c:	4603      	mov	r3, r0
 800701e:	461a      	mov	r2, r3
 8007020:	4b61      	ldr	r3, [pc, #388]	@ (80071a8 <buildDataFrame+0x294>)
 8007022:	4423      	add	r3, r4
 8007024:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		LMIC.frame[end + 2] = LMIC.margin;
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	3302      	adds	r3, #2
 800702c:	4a5e      	ldr	r2, [pc, #376]	@ (80071a8 <buildDataFrame+0x294>)
 800702e:	f892 1124 	ldrb.w	r1, [r2, #292]	@ 0x124
 8007032:	4a5d      	ldr	r2, [pc, #372]	@ (80071a8 <buildDataFrame+0x294>)
 8007034:	4413      	add	r3, r2
 8007036:	460a      	mov	r2, r1
 8007038:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		end += 3;
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	3303      	adds	r3, #3
 8007040:	60bb      	str	r3, [r7, #8]
		LMIC.devsAns = 0;
 8007042:	4b59      	ldr	r3, [pc, #356]	@ (80071a8 <buildDataFrame+0x294>)
 8007044:	2200      	movs	r2, #0
 8007046:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
	}
	if (LMIC.ladrAns) {  // answer to ADR change
 800704a:	4b57      	ldr	r3, [pc, #348]	@ (80071a8 <buildDataFrame+0x294>)
 800704c:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8007050:	2b00      	cmp	r3, #0
 8007052:	d01a      	beq.n	800708a <buildDataFrame+0x176>
		LMIC.frame[end + 0] = MCMD_LADR_ANS;
 8007054:	4a54      	ldr	r2, [pc, #336]	@ (80071a8 <buildDataFrame+0x294>)
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	4413      	add	r3, r2
 800705a:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800705e:	2203      	movs	r2, #3
 8007060:	701a      	strb	r2, [r3, #0]
		LMIC.frame[end + 1] = LMIC.ladrAns & ~MCMD_LADR_ANS_RFU;
 8007062:	4b51      	ldr	r3, [pc, #324]	@ (80071a8 <buildDataFrame+0x294>)
 8007064:	f893 2125 	ldrb.w	r2, [r3, #293]	@ 0x125
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	3301      	adds	r3, #1
 800706c:	f002 0207 	and.w	r2, r2, #7
 8007070:	b2d1      	uxtb	r1, r2
 8007072:	4a4d      	ldr	r2, [pc, #308]	@ (80071a8 <buildDataFrame+0x294>)
 8007074:	4413      	add	r3, r2
 8007076:	460a      	mov	r2, r1
 8007078:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		end += 2;
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	3302      	adds	r3, #2
 8007080:	60bb      	str	r3, [r7, #8]
		LMIC.ladrAns = 0;
 8007082:	4b49      	ldr	r3, [pc, #292]	@ (80071a8 <buildDataFrame+0x294>)
 8007084:	2200      	movs	r2, #0
 8007086:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
	}
	if (LMIC.bcninfoTries > 0) {
 800708a:	4b47      	ldr	r3, [pc, #284]	@ (80071a8 <buildDataFrame+0x294>)
 800708c:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8007090:	2b00      	cmp	r3, #0
 8007092:	d009      	beq.n	80070a8 <buildDataFrame+0x194>
		LMIC.frame[end] = MCMD_BCNI_REQ;
 8007094:	4a44      	ldr	r2, [pc, #272]	@ (80071a8 <buildDataFrame+0x294>)
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	4413      	add	r3, r2
 800709a:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800709e:	2212      	movs	r2, #18
 80070a0:	701a      	strb	r2, [r3, #0]
		end += 1;
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	3301      	adds	r3, #1
 80070a6:	60bb      	str	r3, [r7, #8]
	}
	if (LMIC.adrChanged) {
 80070a8:	4b3f      	ldr	r3, [pc, #252]	@ (80071a8 <buildDataFrame+0x294>)
 80070aa:	f893 3122 	ldrb.w	r3, [r3, #290]	@ 0x122
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00c      	beq.n	80070cc <buildDataFrame+0x1b8>
		if (LMIC.adrAckReq < 0)
 80070b2:	4b3d      	ldr	r3, [pc, #244]	@ (80071a8 <buildDataFrame+0x294>)
 80070b4:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	da03      	bge.n	80070c4 <buildDataFrame+0x1b0>
			LMIC.adrAckReq = 0;
 80070bc:	4b3a      	ldr	r3, [pc, #232]	@ (80071a8 <buildDataFrame+0x294>)
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
		LMIC.adrChanged = 0;
 80070c4:	4b38      	ldr	r3, [pc, #224]	@ (80071a8 <buildDataFrame+0x294>)
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
	}
	if (LMIC.pingSetAns != 0) {
 80070cc:	4b36      	ldr	r3, [pc, #216]	@ (80071a8 <buildDataFrame+0x294>)
 80070ce:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d01a      	beq.n	800710c <buildDataFrame+0x1f8>
		LMIC.frame[end + 0] = MCMD_PING_ANS;
 80070d6:	4a34      	ldr	r2, [pc, #208]	@ (80071a8 <buildDataFrame+0x294>)
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80070e0:	2211      	movs	r2, #17
 80070e2:	701a      	strb	r2, [r3, #0]
		LMIC.frame[end + 1] = LMIC.pingSetAns & ~MCMD_PING_ANS_RFU;
 80070e4:	4b30      	ldr	r3, [pc, #192]	@ (80071a8 <buildDataFrame+0x294>)
 80070e6:	f893 2133 	ldrb.w	r2, [r3, #307]	@ 0x133
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	3301      	adds	r3, #1
 80070ee:	f002 0201 	and.w	r2, r2, #1
 80070f2:	b2d1      	uxtb	r1, r2
 80070f4:	4a2c      	ldr	r2, [pc, #176]	@ (80071a8 <buildDataFrame+0x294>)
 80070f6:	4413      	add	r3, r2
 80070f8:	460a      	mov	r2, r1
 80070fa:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		end += 2;
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	3302      	adds	r3, #2
 8007102:	60bb      	str	r3, [r7, #8]
		LMIC.pingSetAns = 0;
 8007104:	4b28      	ldr	r3, [pc, #160]	@ (80071a8 <buildDataFrame+0x294>)
 8007106:	2200      	movs	r2, #0
 8007108:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
	}
	if (LMIC.snchAns) {
 800710c:	4b26      	ldr	r3, [pc, #152]	@ (80071a8 <buildDataFrame+0x294>)
 800710e:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8007112:	2b00      	cmp	r3, #0
 8007114:	d01a      	beq.n	800714c <buildDataFrame+0x238>
		LMIC.frame[end + 0] = MCMD_SNCH_ANS;
 8007116:	4a24      	ldr	r2, [pc, #144]	@ (80071a8 <buildDataFrame+0x294>)
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	4413      	add	r3, r2
 800711c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8007120:	2207      	movs	r2, #7
 8007122:	701a      	strb	r2, [r3, #0]
		LMIC.frame[end + 1] = LMIC.snchAns & ~MCMD_SNCH_ANS_RFU;
 8007124:	4b20      	ldr	r3, [pc, #128]	@ (80071a8 <buildDataFrame+0x294>)
 8007126:	f893 212a 	ldrb.w	r2, [r3, #298]	@ 0x12a
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	3301      	adds	r3, #1
 800712e:	f002 0203 	and.w	r2, r2, #3
 8007132:	b2d1      	uxtb	r1, r2
 8007134:	4a1c      	ldr	r2, [pc, #112]	@ (80071a8 <buildDataFrame+0x294>)
 8007136:	4413      	add	r3, r2
 8007138:	460a      	mov	r2, r1
 800713a:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		end += 2;
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	3302      	adds	r3, #2
 8007142:	60bb      	str	r3, [r7, #8]
		LMIC.snchAns = 0;
 8007144:	4b18      	ldr	r3, [pc, #96]	@ (80071a8 <buildDataFrame+0x294>)
 8007146:	2200      	movs	r2, #0
 8007148:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
	}
	ASSERT(end <= OFF_DAT_OPTS + 16);
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	2b18      	cmp	r3, #24
 8007150:	dd01      	ble.n	8007156 <buildDataFrame+0x242>
 8007152:	f7fd fd7d 	bl	8004c50 <hal_failed>

	u1_t flen = end + (txdata ? 5 + dlen : 4);
 8007156:	7bfb      	ldrb	r3, [r7, #15]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d003      	beq.n	8007164 <buildDataFrame+0x250>
 800715c:	79bb      	ldrb	r3, [r7, #6]
 800715e:	3305      	adds	r3, #5
 8007160:	b2db      	uxtb	r3, r3
 8007162:	e000      	b.n	8007166 <buildDataFrame+0x252>
 8007164:	2304      	movs	r3, #4
 8007166:	68ba      	ldr	r2, [r7, #8]
 8007168:	b2d2      	uxtb	r2, r2
 800716a:	4413      	add	r3, r2
 800716c:	71fb      	strb	r3, [r7, #7]
	if (flen > MAX_LEN_FRAME) {
 800716e:	79fb      	ldrb	r3, [r7, #7]
 8007170:	2b40      	cmp	r3, #64	@ 0x40
 8007172:	d905      	bls.n	8007180 <buildDataFrame+0x26c>
		// Options and payload too big - delay payload
		txdata = 0;
 8007174:	2300      	movs	r3, #0
 8007176:	73fb      	strb	r3, [r7, #15]
		flen = end + 4;
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	b2db      	uxtb	r3, r3
 800717c:	3304      	adds	r3, #4
 800717e:	71fb      	strb	r3, [r7, #7]
	}
	LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DAUP | HDR_MAJOR_V1;
 8007180:	4b09      	ldr	r3, [pc, #36]	@ (80071a8 <buildDataFrame+0x294>)
 8007182:	2240      	movs	r2, #64	@ 0x40
 8007184:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
	LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 8007188:	4b07      	ldr	r3, [pc, #28]	@ (80071a8 <buildDataFrame+0x294>)
 800718a:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 800718e:	4b06      	ldr	r3, [pc, #24]	@ (80071a8 <buildDataFrame+0x294>)
 8007190:	f893 3127 	ldrb.w	r3, [r3, #295]	@ 0x127
			| (LMIC.adrAckReq >= 0 ? FCT_ADRARQ : 0) | (end - OFF_DAT_OPTS));
 8007194:	4313      	orrs	r3, r2
 8007196:	b2db      	uxtb	r3, r3
 8007198:	b25b      	sxtb	r3, r3
 800719a:	4a03      	ldr	r2, [pc, #12]	@ (80071a8 <buildDataFrame+0x294>)
 800719c:	f992 2121 	ldrsb.w	r2, [r2, #289]	@ 0x121
 80071a0:	2a00      	cmp	r2, #0
 80071a2:	db03      	blt.n	80071ac <buildDataFrame+0x298>
 80071a4:	2240      	movs	r2, #64	@ 0x40
 80071a6:	e002      	b.n	80071ae <buildDataFrame+0x29a>
 80071a8:	2000033c 	.word	0x2000033c
 80071ac:	2200      	movs	r2, #0
 80071ae:	4313      	orrs	r3, r2
 80071b0:	b25a      	sxtb	r2, r3
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	3b08      	subs	r3, #8
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	b25b      	sxtb	r3, r3
 80071bc:	4313      	orrs	r3, r2
 80071be:	b25b      	sxtb	r3, r3
 80071c0:	b2da      	uxtb	r2, r3
	LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 80071c2:	4b40      	ldr	r3, [pc, #256]	@ (80072c4 <buildDataFrame+0x3b0>)
 80071c4:	f883 214d 	strb.w	r2, [r3, #333]	@ 0x14d
	os_wlsbf4(LMIC.frame + OFF_DAT_ADDR, LMIC.devaddr);
 80071c8:	4a3f      	ldr	r2, [pc, #252]	@ (80072c8 <buildDataFrame+0x3b4>)
 80071ca:	4b3e      	ldr	r3, [pc, #248]	@ (80072c4 <buildDataFrame+0x3b0>)
 80071cc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80071d0:	4619      	mov	r1, r3
 80071d2:	4610      	mov	r0, r2
 80071d4:	f7fd ff49 	bl	800506a <os_wlsbf4>

	if (LMIC.txCnt == 0) {
 80071d8:	4b3a      	ldr	r3, [pc, #232]	@ (80072c4 <buildDataFrame+0x3b0>)
 80071da:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d106      	bne.n	80071f0 <buildDataFrame+0x2dc>
		LMIC.seqnoUp += 1;
 80071e2:	4b38      	ldr	r3, [pc, #224]	@ (80072c4 <buildDataFrame+0x3b0>)
 80071e4:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80071e8:	3301      	adds	r3, #1
 80071ea:	4a36      	ldr	r2, [pc, #216]	@ (80072c4 <buildDataFrame+0x3b0>)
 80071ec:	f8c2 311c 	str.w	r3, [r2, #284]	@ 0x11c
						e_.info = LMIC.seqnoUp-1,
						e_.info2 = ((LMIC.txCnt+1) |
								(DRADJUST[LMIC.txCnt+1] << 8) |
								((LMIC.datarate|DR_PAGE)<<16))));
	}
	os_wlsbf2(LMIC.frame + OFF_DAT_SEQNO, LMIC.seqnoUp - 1);
 80071f0:	4a36      	ldr	r2, [pc, #216]	@ (80072cc <buildDataFrame+0x3b8>)
 80071f2:	4b34      	ldr	r3, [pc, #208]	@ (80072c4 <buildDataFrame+0x3b0>)
 80071f4:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	3b01      	subs	r3, #1
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	4619      	mov	r1, r3
 8007200:	4610      	mov	r0, r2
 8007202:	f7fd ff1b 	bl	800503c <os_wlsbf2>

	// Clear pending DN confirmation
	LMIC.dnConf = 0;
 8007206:	4b2f      	ldr	r3, [pc, #188]	@ (80072c4 <buildDataFrame+0x3b0>)
 8007208:	2200      	movs	r2, #0
 800720a:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120

	if (txdata) {
 800720e:	7bfb      	ldrb	r3, [r7, #15]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d03e      	beq.n	8007292 <buildDataFrame+0x37e>
		if (LMIC.pendTxConf) {
 8007214:	4b2b      	ldr	r3, [pc, #172]	@ (80072c4 <buildDataFrame+0x3b0>)
 8007216:	f893 30bb 	ldrb.w	r3, [r3, #187]	@ 0xbb
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00c      	beq.n	8007238 <buildDataFrame+0x324>
			// Confirmed only makes sense if we have a payload (or at least a port)
			LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DCUP | HDR_MAJOR_V1;
 800721e:	4b29      	ldr	r3, [pc, #164]	@ (80072c4 <buildDataFrame+0x3b0>)
 8007220:	2280      	movs	r2, #128	@ 0x80
 8007222:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
			if (LMIC.txCnt == 0)
 8007226:	4b27      	ldr	r3, [pc, #156]	@ (80072c4 <buildDataFrame+0x3b0>)
 8007228:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 800722c:	2b00      	cmp	r3, #0
 800722e:	d103      	bne.n	8007238 <buildDataFrame+0x324>
				LMIC.txCnt = 1;
 8007230:	4b24      	ldr	r3, [pc, #144]	@ (80072c4 <buildDataFrame+0x3b0>)
 8007232:	2201      	movs	r2, #1
 8007234:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		}
		LMIC.frame[end] = LMIC.pendTxPort;
 8007238:	4b22      	ldr	r3, [pc, #136]	@ (80072c4 <buildDataFrame+0x3b0>)
 800723a:	f893 10ba 	ldrb.w	r1, [r3, #186]	@ 0xba
 800723e:	4a21      	ldr	r2, [pc, #132]	@ (80072c4 <buildDataFrame+0x3b0>)
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	4413      	add	r3, r2
 8007244:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8007248:	460a      	mov	r2, r1
 800724a:	701a      	strb	r2, [r3, #0]
		os_copyMem(LMIC.frame + end + 1, LMIC.pendTxData, dlen);
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	3301      	adds	r3, #1
 8007250:	4a1f      	ldr	r2, [pc, #124]	@ (80072d0 <buildDataFrame+0x3bc>)
 8007252:	4413      	add	r3, r2
 8007254:	79ba      	ldrb	r2, [r7, #6]
 8007256:	491f      	ldr	r1, [pc, #124]	@ (80072d4 <buildDataFrame+0x3c0>)
 8007258:	4618      	mov	r0, r3
 800725a:	f007 ff65 	bl	800f128 <memcpy>
		aes_cipher(LMIC.pendTxPort == 0 ? LMIC.nwkKey : LMIC.artKey,
 800725e:	4b19      	ldr	r3, [pc, #100]	@ (80072c4 <buildDataFrame+0x3b0>)
 8007260:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 8007264:	2b00      	cmp	r3, #0
 8007266:	d101      	bne.n	800726c <buildDataFrame+0x358>
 8007268:	481b      	ldr	r0, [pc, #108]	@ (80072d8 <buildDataFrame+0x3c4>)
 800726a:	e000      	b.n	800726e <buildDataFrame+0x35a>
 800726c:	481b      	ldr	r0, [pc, #108]	@ (80072dc <buildDataFrame+0x3c8>)
 800726e:	4b15      	ldr	r3, [pc, #84]	@ (80072c4 <buildDataFrame+0x3b0>)
 8007270:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
				LMIC.devaddr, LMIC.seqnoUp - 1,
 8007274:	4b13      	ldr	r3, [pc, #76]	@ (80072c4 <buildDataFrame+0x3b0>)
 8007276:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
		aes_cipher(LMIC.pendTxPort == 0 ? LMIC.nwkKey : LMIC.artKey,
 800727a:	1e5c      	subs	r4, r3, #1
				/*up*/0, LMIC.frame + end + 1, dlen);
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	3301      	adds	r3, #1
		aes_cipher(LMIC.pendTxPort == 0 ? LMIC.nwkKey : LMIC.artKey,
 8007280:	4a13      	ldr	r2, [pc, #76]	@ (80072d0 <buildDataFrame+0x3bc>)
 8007282:	4413      	add	r3, r2
 8007284:	79ba      	ldrb	r2, [r7, #6]
 8007286:	9201      	str	r2, [sp, #4]
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	2300      	movs	r3, #0
 800728c:	4622      	mov	r2, r4
 800728e:	f7fe f853 	bl	8005338 <aes_cipher>
	}
	aes_appendMic(LMIC.nwkKey, LMIC.devaddr, LMIC.seqnoUp - 1, /*up*/0,
 8007292:	4b0c      	ldr	r3, [pc, #48]	@ (80072c4 <buildDataFrame+0x3b0>)
 8007294:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 8007298:	4b0a      	ldr	r3, [pc, #40]	@ (80072c4 <buildDataFrame+0x3b0>)
 800729a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800729e:	1e5a      	subs	r2, r3, #1
 80072a0:	79fb      	ldrb	r3, [r7, #7]
 80072a2:	3b04      	subs	r3, #4
 80072a4:	9301      	str	r3, [sp, #4]
 80072a6:	4b0a      	ldr	r3, [pc, #40]	@ (80072d0 <buildDataFrame+0x3bc>)
 80072a8:	9300      	str	r3, [sp, #0]
 80072aa:	2300      	movs	r3, #0
 80072ac:	480a      	ldr	r0, [pc, #40]	@ (80072d8 <buildDataFrame+0x3c4>)
 80072ae:	f7fd ffc5 	bl	800523c <aes_appendMic>
					e_.fct = LMIC.frame[LORA::OFF_DAT_FCT],
					e_.port = LMIC.pendTxPort,
					e_.plen = txdata ? dlen : 0,
					e_.opts.length = end-LORA::OFF_DAT_OPTS,
					memcpy(&e_.opts[0], LMIC.frame+LORA::OFF_DAT_OPTS, end-LORA::OFF_DAT_OPTS)));
	LMIC.dataLen = flen;
 80072b2:	4a04      	ldr	r2, [pc, #16]	@ (80072c4 <buildDataFrame+0x3b0>)
 80072b4:	79fb      	ldrb	r3, [r7, #7]
 80072b6:	f882 3147 	strb.w	r3, [r2, #327]	@ 0x147
}
 80072ba:	bf00      	nop
 80072bc:	3714      	adds	r7, #20
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd90      	pop	{r4, r7, pc}
 80072c2:	bf00      	nop
 80072c4:	2000033c 	.word	0x2000033c
 80072c8:	20000485 	.word	0x20000485
 80072cc:	2000048a 	.word	0x2000048a
 80072d0:	20000484 	.word	0x20000484
 80072d4:	200003f9 	.word	0x200003f9
 80072d8:	20000430 	.word	0x20000430
 80072dc:	20000440 	.word	0x20000440

080072e0 <onBcnRx>:

// Callback from HAL during scan mode or when job timer expires.
static void onBcnRx(xref2osjob_t job)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
	// If we arrive via job timer make sure to put radio to rest.
	os_radio(RADIO_RST);
 80072e8:	2000      	movs	r0, #0
 80072ea:	f001 ff23 	bl	8009134 <os_radio>
	os_clearCallback(&LMIC.osjob);
 80072ee:	4823      	ldr	r0, [pc, #140]	@ (800737c <onBcnRx+0x9c>)
 80072f0:	f001 f920 	bl	8008534 <os_clearCallback>
	if (LMIC.dataLen == 0) {
 80072f4:	4b22      	ldr	r3, [pc, #136]	@ (8007380 <onBcnRx+0xa0>)
 80072f6:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10c      	bne.n	8007318 <onBcnRx+0x38>
		// Nothing received - timeout
		LMIC.opmode &= ~(OP_SCAN | OP_TRACK);
 80072fe:	4b20      	ldr	r3, [pc, #128]	@ (8007380 <onBcnRx+0xa0>)
 8007300:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007304:	f023 0303 	bic.w	r3, r3, #3
 8007308:	b29a      	uxth	r2, r3
 800730a:	4b1d      	ldr	r3, [pc, #116]	@ (8007380 <onBcnRx+0xa0>)
 800730c:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		reportEvent(EV_SCAN_TIMEOUT);
 8007310:	2001      	movs	r0, #1
 8007312:	f7fe fead 	bl	8006070 <reportEvent>
		return;
 8007316:	e02d      	b.n	8007374 <onBcnRx+0x94>
	}
	if (decodeBeacon() <= 0) {
 8007318:	f7fe ff2e 	bl	8006178 <decodeBeacon>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	dc0f      	bgt.n	8007342 <onBcnRx+0x62>
		// Something is wrong with the beacon - continue scan
		LMIC.dataLen = 0;
 8007322:	4b17      	ldr	r3, [pc, #92]	@ (8007380 <onBcnRx+0xa0>)
 8007324:	2200      	movs	r2, #0
 8007326:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
		os_radio(RADIO_RXON);
 800732a:	2003      	movs	r0, #3
 800732c:	f001 ff02 	bl	8009134 <os_radio>
		os_setTimedCallback(&LMIC.osjob, LMIC.bcninfo.txtime,
 8007330:	4b13      	ldr	r3, [pc, #76]	@ (8007380 <onBcnRx+0xa0>)
 8007332:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8007336:	4a13      	ldr	r2, [pc, #76]	@ (8007384 <onBcnRx+0xa4>)
 8007338:	4619      	mov	r1, r3
 800733a:	4810      	ldr	r0, [pc, #64]	@ (800737c <onBcnRx+0x9c>)
 800733c:	f001 f93e 	bl	80085bc <os_setTimedCallback>
				FUNC_ADDR(onBcnRx));
		return;
 8007340:	e018      	b.n	8007374 <onBcnRx+0x94>
	}
	// Found our 1st beacon
	// We don't have a previous beacon to calc some drift - assume
	// an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
	calcBcnRxWindowFromMillis(13, 1);
 8007342:	2101      	movs	r1, #1
 8007344:	200d      	movs	r0, #13
 8007346:	f7fe f983 	bl	8005650 <calcBcnRxWindowFromMillis>
	LMIC.opmode &= ~OP_SCAN;          // turn SCAN off
 800734a:	4b0d      	ldr	r3, [pc, #52]	@ (8007380 <onBcnRx+0xa0>)
 800734c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007350:	f023 0301 	bic.w	r3, r3, #1
 8007354:	b29a      	uxth	r2, r3
 8007356:	4b0a      	ldr	r3, [pc, #40]	@ (8007380 <onBcnRx+0xa0>)
 8007358:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	LMIC.opmode |= OP_TRACK;         // auto enable tracking
 800735c:	4b08      	ldr	r3, [pc, #32]	@ (8007380 <onBcnRx+0xa0>)
 800735e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007362:	f043 0302 	orr.w	r3, r3, #2
 8007366:	b29a      	uxth	r2, r3
 8007368:	4b05      	ldr	r3, [pc, #20]	@ (8007380 <onBcnRx+0xa0>)
 800736a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	reportEvent(EV_BEACON_FOUND);    // can be disabled in callback
 800736e:	2002      	movs	r0, #2
 8007370:	f7fe fe7e 	bl	8006070 <reportEvent>
}
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	20000350 	.word	0x20000350
 8007380:	2000033c 	.word	0x2000033c
 8007384:	080072e1 	.word	0x080072e1

08007388 <startScan>:
// netid defines when scan stops (any or specific beacon)
// This mode ends with events: EV_SCAN_TIMEOUT/EV_SCAN_BEACON
// Implicitely cancels any pending TX/RX transaction.
// Also cancels an onpoing joining procedure.
static void startScan(void)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	af00      	add	r7, sp, #0
	ASSERT(LMIC.devaddr != 0 && (LMIC.opmode & OP_JOINING) == 0);
 800738c:	4b27      	ldr	r3, [pc, #156]	@ (800742c <startScan+0xa4>)
 800738e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8007392:	2b00      	cmp	r3, #0
 8007394:	d006      	beq.n	80073a4 <startScan+0x1c>
 8007396:	4b25      	ldr	r3, [pc, #148]	@ (800742c <startScan+0xa4>)
 8007398:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800739c:	f003 0304 	and.w	r3, r3, #4
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d001      	beq.n	80073a8 <startScan+0x20>
 80073a4:	f7fd fc54 	bl	8004c50 <hal_failed>
	if ((LMIC.opmode & OP_SHUTDOWN) != 0)
 80073a8:	4b20      	ldr	r3, [pc, #128]	@ (800742c <startScan+0xa4>)
 80073aa:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80073ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d137      	bne.n	8007426 <startScan+0x9e>
		return;
	// Cancel onging TX/RX transaction
	LMIC.txCnt = LMIC.dnConf = LMIC.bcninfo.flags = 0;
 80073b6:	4b1d      	ldr	r3, [pc, #116]	@ (800742c <startScan+0xa4>)
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
 80073be:	4b1b      	ldr	r3, [pc, #108]	@ (800742c <startScan+0xa4>)
 80073c0:	f893 2196 	ldrb.w	r2, [r3, #406]	@ 0x196
 80073c4:	4b19      	ldr	r3, [pc, #100]	@ (800742c <startScan+0xa4>)
 80073c6:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
 80073ca:	4b18      	ldr	r3, [pc, #96]	@ (800742c <startScan+0xa4>)
 80073cc:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 80073d0:	4b16      	ldr	r3, [pc, #88]	@ (800742c <startScan+0xa4>)
 80073d2:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	LMIC.opmode = (LMIC.opmode | OP_SCAN) & ~(OP_TXRXPEND);
 80073d6:	4b15      	ldr	r3, [pc, #84]	@ (800742c <startScan+0xa4>)
 80073d8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80073dc:	f043 0301 	orr.w	r3, r3, #1
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	4b10      	ldr	r3, [pc, #64]	@ (800742c <startScan+0xa4>)
 80073ea:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	setBcnRxParams();
 80073ee:	f7fe fd71 	bl	8005ed4 <setBcnRxParams>
	LMIC.rxtime = LMIC.bcninfo.txtime =
			os_getTime() + sec2osticks(BCN_INTV_sec + 1);
 80073f2:	f001 f879 	bl	80084e8 <os_getTime>
 80073f6:	4603      	mov	r3, r0
 80073f8:	f503 137b 	add.w	r3, r3, #4112384	@ 0x3ec000
 80073fc:	f503 5374 	add.w	r3, r3, #15616	@ 0x3d00
	LMIC.rxtime = LMIC.bcninfo.txtime =
 8007400:	4a0a      	ldr	r2, [pc, #40]	@ (800742c <startScan+0xa4>)
 8007402:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
 8007406:	4b09      	ldr	r3, [pc, #36]	@ (800742c <startScan+0xa4>)
 8007408:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 800740c:	4a07      	ldr	r2, [pc, #28]	@ (800742c <startScan+0xa4>)
 800740e:	6053      	str	r3, [r2, #4]
	os_setTimedCallback(&LMIC.osjob, LMIC.rxtime, FUNC_ADDR(onBcnRx));
 8007410:	4b06      	ldr	r3, [pc, #24]	@ (800742c <startScan+0xa4>)
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	4a06      	ldr	r2, [pc, #24]	@ (8007430 <startScan+0xa8>)
 8007416:	4619      	mov	r1, r3
 8007418:	4806      	ldr	r0, [pc, #24]	@ (8007434 <startScan+0xac>)
 800741a:	f001 f8cf 	bl	80085bc <os_setTimedCallback>
	os_radio(RADIO_RXON);
 800741e:	2003      	movs	r0, #3
 8007420:	f001 fe88 	bl	8009134 <os_radio>
 8007424:	e000      	b.n	8007428 <startScan+0xa0>
		return;
 8007426:	bf00      	nop
}
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	2000033c 	.word	0x2000033c
 8007430:	080072e1 	.word	0x080072e1
 8007434:	20000350 	.word	0x20000350

08007438 <buildJoinRequest>:
// Join stuff
//
// ================================================================================

static void buildJoinRequest(u1_t ftype)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	4603      	mov	r3, r0
 8007440:	71fb      	strb	r3, [r7, #7]
	// Do not use pendTxData since we might have a pending
	// user level frame in there. Use RX holding area instead.
	xref2u1_t d = LMIC.frame;
 8007442:	4b16      	ldr	r3, [pc, #88]	@ (800749c <buildJoinRequest+0x64>)
 8007444:	60fb      	str	r3, [r7, #12]
	d[OFF_JR_HDR] = ftype;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	79fa      	ldrb	r2, [r7, #7]
 800744a:	701a      	strb	r2, [r3, #0]
	os_getArtEui(d + OFF_JR_ARTEUI);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	3301      	adds	r3, #1
 8007450:	4618      	mov	r0, r3
 8007452:	f000 fd33 	bl	8007ebc <os_getArtEui>
	os_getDevEui(d + OFF_JR_DEVEUI);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	3309      	adds	r3, #9
 800745a:	4618      	mov	r0, r3
 800745c:	f000 fd42 	bl	8007ee4 <os_getDevEui>
	os_wlsbf2(d + OFF_JR_DEVNONCE, LMIC.devNonce);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	3311      	adds	r3, #17
 8007464:	4a0e      	ldr	r2, [pc, #56]	@ (80074a0 <buildJoinRequest+0x68>)
 8007466:	f8b2 20f2 	ldrh.w	r2, [r2, #242]	@ 0xf2
 800746a:	4611      	mov	r1, r2
 800746c:	4618      	mov	r0, r3
 800746e:	f7fd fde5 	bl	800503c <os_wlsbf2>
	aes_appendMic0(d, OFF_JR_MIC);
 8007472:	2113      	movs	r1, #19
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f7fd ff09 	bl	800528c <aes_appendMic0>
					e_.oldaddr = LMIC.devaddr,
					e_.mic = Base::lsbf4(&d[LORA::OFF_JR_MIC]),
					e_.reason = ((LMIC.opmode & OP_REJOIN) != 0
							? EV::joininfo_t::REJOIN_REQUEST
							: EV::joininfo_t::REQUEST)));
	LMIC.dataLen = LEN_JR;
 800747a:	4b09      	ldr	r3, [pc, #36]	@ (80074a0 <buildJoinRequest+0x68>)
 800747c:	2217      	movs	r2, #23
 800747e:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
	LMIC.devNonce++;
 8007482:	4b07      	ldr	r3, [pc, #28]	@ (80074a0 <buildJoinRequest+0x68>)
 8007484:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 8007488:	3301      	adds	r3, #1
 800748a:	b29a      	uxth	r2, r3
 800748c:	4b04      	ldr	r3, [pc, #16]	@ (80074a0 <buildJoinRequest+0x68>)
 800748e:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
	DO_DEVDB(LMIC.devNonce,devNonce);
}
 8007492:	bf00      	nop
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	20000484 	.word	0x20000484
 80074a0:	2000033c 	.word	0x2000033c

080074a4 <startJoining>:

static void startJoining(xref2osjob_t osjob)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
	reportEvent(EV_JOINING);
 80074ac:	2005      	movs	r0, #5
 80074ae:	f7fe fddf 	bl	8006070 <reportEvent>
}
 80074b2:	bf00      	nop
 80074b4:	3708      	adds	r7, #8
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
	...

080074bc <LMIC_startJoining>:

// Start join procedure if not already joined.
bit_t LMIC_startJoining(void)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	af00      	add	r7, sp, #0
	if (LMIC.devaddr == 0) {
 80074c0:	4b20      	ldr	r3, [pc, #128]	@ (8007544 <LMIC_startJoining+0x88>)
 80074c2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d138      	bne.n	800753c <LMIC_startJoining+0x80>
		// There should be no TX/RX going on
		ASSERT((LMIC.opmode & (OP_POLL | OP_TXRXPEND)) == 0);
 80074ca:	4b1e      	ldr	r3, [pc, #120]	@ (8007544 <LMIC_startJoining+0x88>)
 80074cc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80074d0:	f003 0390 	and.w	r3, r3, #144	@ 0x90
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d001      	beq.n	80074dc <LMIC_startJoining+0x20>
 80074d8:	f7fd fbba 	bl	8004c50 <hal_failed>
		// Lift any previous duty limitation
		LMIC.globalDutyRate = 0;
 80074dc:	4b19      	ldr	r3, [pc, #100]	@ (8007544 <LMIC_startJoining+0x88>)
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
		// Cancel scanning
		LMIC.opmode &= ~(OP_SCAN | OP_REJOIN | OP_LINKDEAD | OP_NEXTCHNL);
 80074e4:	4b17      	ldr	r3, [pc, #92]	@ (8007544 <LMIC_startJoining+0x88>)
 80074e6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80074ea:	f423 53c1 	bic.w	r3, r3, #6176	@ 0x1820
 80074ee:	f023 0301 	bic.w	r3, r3, #1
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	4b13      	ldr	r3, [pc, #76]	@ (8007544 <LMIC_startJoining+0x88>)
 80074f6:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		// Setup state
		LMIC.rejoinCnt = LMIC.txCnt = LMIC.pendTxConf = 0;
 80074fa:	4b12      	ldr	r3, [pc, #72]	@ (8007544 <LMIC_startJoining+0x88>)
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 20bb 	strb.w	r2, [r3, #187]	@ 0xbb
 8007502:	4b10      	ldr	r3, [pc, #64]	@ (8007544 <LMIC_startJoining+0x88>)
 8007504:	f893 20bb 	ldrb.w	r2, [r3, #187]	@ 0xbb
 8007508:	4b0e      	ldr	r3, [pc, #56]	@ (8007544 <LMIC_startJoining+0x88>)
 800750a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
 800750e:	4b0d      	ldr	r3, [pc, #52]	@ (8007544 <LMIC_startJoining+0x88>)
 8007510:	f893 2144 	ldrb.w	r2, [r3, #324]	@ 0x144
 8007514:	4b0b      	ldr	r3, [pc, #44]	@ (8007544 <LMIC_startJoining+0x88>)
 8007516:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
		initJoinLoop();
 800751a:	f7fe fd01 	bl	8005f20 <initJoinLoop>
		LMIC.opmode |= OP_JOINING;
 800751e:	4b09      	ldr	r3, [pc, #36]	@ (8007544 <LMIC_startJoining+0x88>)
 8007520:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007524:	f043 0304 	orr.w	r3, r3, #4
 8007528:	b29a      	uxth	r2, r3
 800752a:	4b06      	ldr	r3, [pc, #24]	@ (8007544 <LMIC_startJoining+0x88>)
 800752c:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		// reportEvent will call engineUpdate which then starts sending JOIN REQUESTS
		os_setCallback(&LMIC.osjob, FUNC_ADDR(startJoining));
 8007530:	4905      	ldr	r1, [pc, #20]	@ (8007548 <LMIC_startJoining+0x8c>)
 8007532:	4806      	ldr	r0, [pc, #24]	@ (800754c <LMIC_startJoining+0x90>)
 8007534:	f001 f81c 	bl	8008570 <os_setCallback>
		return 1;
 8007538:	2301      	movs	r3, #1
 800753a:	e000      	b.n	800753e <LMIC_startJoining+0x82>
	}
	return 0; // already joined
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	2000033c 	.word	0x2000033c
 8007548:	080074a5 	.word	0x080074a5
 800754c:	20000350 	.word	0x20000350

08007550 <processPingRx>:
//
//
// ================================================================================

static void processPingRx(xref2osjob_t osjob)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
	if (LMIC.dataLen != 0) {
 8007558:	4b0b      	ldr	r3, [pc, #44]	@ (8007588 <processPingRx+0x38>)
 800755a:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00c      	beq.n	800757c <processPingRx+0x2c>
		LMIC.txrxFlags = TXRX_PING;
 8007562:	4b09      	ldr	r3, [pc, #36]	@ (8007588 <processPingRx+0x38>)
 8007564:	2204      	movs	r2, #4
 8007566:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		if (decodeFrame()) {
 800756a:	f7fe fe99 	bl	80062a0 <decodeFrame>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d003      	beq.n	800757c <processPingRx+0x2c>
			reportEvent(EV_RXCOMPLETE);
 8007574:	200d      	movs	r0, #13
 8007576:	f7fe fd7b 	bl	8006070 <reportEvent>
			return;
 800757a:	e001      	b.n	8007580 <processPingRx+0x30>
		}
	}
	// Pick next ping slot
	engineUpdate();
 800757c:	f000 fa2a 	bl	80079d4 <engineUpdate>
}
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	2000033c 	.word	0x2000033c

0800758c <processDnData>:

static bit_t processDnData(void)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	af00      	add	r7, sp, #0
	ASSERT((LMIC.opmode & OP_TXRXPEND) != 0);
 8007590:	4b76      	ldr	r3, [pc, #472]	@ (800776c <processDnData+0x1e0>)
 8007592:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800759a:	2b00      	cmp	r3, #0
 800759c:	d101      	bne.n	80075a2 <processDnData+0x16>
 800759e:	f7fd fb57 	bl	8004c50 <hal_failed>

	if (LMIC.dataLen == 0) {
 80075a2:	4b72      	ldr	r3, [pc, #456]	@ (800776c <processDnData+0x1e0>)
 80075a4:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f040 80ce 	bne.w	800774a <processDnData+0x1be>
		norx: if (LMIC.txCnt != 0) {
 80075ae:	bf00      	nop
 80075b0:	e000      	b.n	80075b4 <processDnData+0x28>
		return 1;
	}
	if (!decodeFrame()) {
		if ((LMIC.txrxFlags & TXRX_DNW1) != 0)
			return 0;
		goto norx;
 80075b2:	bf00      	nop
		norx: if (LMIC.txCnt != 0) {
 80075b4:	4b6d      	ldr	r3, [pc, #436]	@ (800776c <processDnData+0x1e0>)
 80075b6:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d038      	beq.n	8007630 <processDnData+0xa4>
			if (LMIC.txCnt < TXCONF_ATTEMPTS) {
 80075be:	4b6b      	ldr	r3, [pc, #428]	@ (800776c <processDnData+0x1e0>)
 80075c0:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80075c4:	2b07      	cmp	r3, #7
 80075c6:	d82e      	bhi.n	8007626 <processDnData+0x9a>
				LMIC.txCnt += 1;
 80075c8:	4b68      	ldr	r3, [pc, #416]	@ (800776c <processDnData+0x1e0>)
 80075ca:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80075ce:	3301      	adds	r3, #1
 80075d0:	b2da      	uxtb	r2, r3
 80075d2:	4b66      	ldr	r3, [pc, #408]	@ (800776c <processDnData+0x1e0>)
 80075d4:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
				setDrTxpow(DRCHG_NOACK,
 80075d8:	4b64      	ldr	r3, [pc, #400]	@ (800776c <processDnData+0x1e0>)
 80075da:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
						lowerDR(LMIC.datarate, DRADJUST[LMIC.txCnt]),
 80075de:	4a63      	ldr	r2, [pc, #396]	@ (800776c <processDnData+0x1e0>)
 80075e0:	f892 2144 	ldrb.w	r2, [r2, #324]	@ 0x144
 80075e4:	4611      	mov	r1, r2
 80075e6:	4a62      	ldr	r2, [pc, #392]	@ (8007770 <processDnData+0x1e4>)
 80075e8:	5c52      	ldrb	r2, [r2, r1]
				setDrTxpow(DRCHG_NOACK,
 80075ea:	4611      	mov	r1, r2
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7fd fcbd 	bl	8004f6c <lowerDR>
 80075f2:	4603      	mov	r3, r0
 80075f4:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 80075f8:	4619      	mov	r1, r3
 80075fa:	2002      	movs	r0, #2
 80075fc:	f7fe f9ea 	bl	80059d4 <setDrTxpow>
				txDelay(LMIC.rxtime, RETRY_PERIOD_secs);
 8007600:	4b5a      	ldr	r3, [pc, #360]	@ (800776c <processDnData+0x1e0>)
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	2103      	movs	r1, #3
 8007606:	4618      	mov	r0, r3
 8007608:	f7fe f9a2 	bl	8005950 <txDelay>
				LMIC.opmode &= ~OP_TXRXPEND;
 800760c:	4b57      	ldr	r3, [pc, #348]	@ (800776c <processDnData+0x1e0>)
 800760e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007612:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007616:	b29a      	uxth	r2, r3
 8007618:	4b54      	ldr	r3, [pc, #336]	@ (800776c <processDnData+0x1e0>)
 800761a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
				engineUpdate();
 800761e:	f000 f9d9 	bl	80079d4 <engineUpdate>
				return 1;
 8007622:	2301      	movs	r3, #1
 8007624:	e09f      	b.n	8007766 <processDnData+0x1da>
			LMIC.txrxFlags = TXRX_NACK | TXRX_NOPORT;
 8007626:	4b51      	ldr	r3, [pc, #324]	@ (800776c <processDnData+0x1e0>)
 8007628:	2260      	movs	r2, #96	@ 0x60
 800762a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
 800762e:	e003      	b.n	8007638 <processDnData+0xac>
			LMIC.txrxFlags = TXRX_NOPORT;
 8007630:	4b4e      	ldr	r3, [pc, #312]	@ (800776c <processDnData+0x1e0>)
 8007632:	2220      	movs	r2, #32
 8007634:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		if (LMIC.adrAckReq != LINK_CHECK_OFF)
 8007638:	4b4c      	ldr	r3, [pc, #304]	@ (800776c <processDnData+0x1e0>)
 800763a:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 800763e:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 8007642:	d009      	beq.n	8007658 <processDnData+0xcc>
			LMIC.adrAckReq += 1;
 8007644:	4b49      	ldr	r3, [pc, #292]	@ (800776c <processDnData+0x1e0>)
 8007646:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 800764a:	b2db      	uxtb	r3, r3
 800764c:	3301      	adds	r3, #1
 800764e:	b2db      	uxtb	r3, r3
 8007650:	b25a      	sxtb	r2, r3
 8007652:	4b46      	ldr	r3, [pc, #280]	@ (800776c <processDnData+0x1e0>)
 8007654:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
		LMIC.dataBeg = LMIC.dataLen = 0;
 8007658:	4b44      	ldr	r3, [pc, #272]	@ (800776c <processDnData+0x1e0>)
 800765a:	2200      	movs	r2, #0
 800765c:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 8007660:	4b42      	ldr	r3, [pc, #264]	@ (800776c <processDnData+0x1e0>)
 8007662:	f893 2147 	ldrb.w	r2, [r3, #327]	@ 0x147
 8007666:	4b41      	ldr	r3, [pc, #260]	@ (800776c <processDnData+0x1e0>)
 8007668:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
 800766c:	e000      	b.n	8007670 <processDnData+0xe4>
	}
	goto txcomplete;
 800766e:	bf00      	nop
		txcomplete: LMIC.opmode &= ~(OP_TXDATA | OP_TXRXPEND);
 8007670:	4b3e      	ldr	r3, [pc, #248]	@ (800776c <processDnData+0x1e0>)
 8007672:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007676:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800767a:	b29a      	uxth	r2, r3
 800767c:	4b3b      	ldr	r3, [pc, #236]	@ (800776c <processDnData+0x1e0>)
 800767e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		if ((LMIC.txrxFlags & (TXRX_DNW1 | TXRX_DNW2 | TXRX_PING)) != 0
 8007682:	4b3a      	ldr	r3, [pc, #232]	@ (800776c <processDnData+0x1e0>)
 8007684:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8007688:	f003 0307 	and.w	r3, r3, #7
 800768c:	2b00      	cmp	r3, #0
 800768e:	d012      	beq.n	80076b6 <processDnData+0x12a>
				&& (LMIC.opmode & OP_LINKDEAD) != 0) {
 8007690:	4b36      	ldr	r3, [pc, #216]	@ (800776c <processDnData+0x1e0>)
 8007692:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007696:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00b      	beq.n	80076b6 <processDnData+0x12a>
			LMIC.opmode &= ~OP_LINKDEAD;
 800769e:	4b33      	ldr	r3, [pc, #204]	@ (800776c <processDnData+0x1e0>)
 80076a0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80076a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	4b30      	ldr	r3, [pc, #192]	@ (800776c <processDnData+0x1e0>)
 80076ac:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			reportEvent(EV_LINK_ALIVE);
 80076b0:	200f      	movs	r0, #15
 80076b2:	f7fe fcdd 	bl	8006070 <reportEvent>
		reportEvent(EV_TXCOMPLETE);
 80076b6:	200a      	movs	r0, #10
 80076b8:	f7fe fcda 	bl	8006070 <reportEvent>
		if (LMIC.adrAckReq > LINK_CHECK_DEAD) {
 80076bc:	4b2b      	ldr	r3, [pc, #172]	@ (800776c <processDnData+0x1e0>)
 80076be:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 80076c2:	2b18      	cmp	r3, #24
 80076c4:	dd1c      	ble.n	8007700 <processDnData+0x174>
			setDrTxpow(DRCHG_NOADRACK, decDR((dr_t) LMIC.datarate), KEEP_TXPOW);
 80076c6:	4b29      	ldr	r3, [pc, #164]	@ (800776c <processDnData+0x1e0>)
 80076c8:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7fd fc1f 	bl	8004f10 <decDR>
 80076d2:	4603      	mov	r3, r0
 80076d4:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 80076d8:	4619      	mov	r1, r3
 80076da:	2003      	movs	r0, #3
 80076dc:	f7fe f97a 	bl	80059d4 <setDrTxpow>
			LMIC.adrAckReq = LINK_CHECK_CONT;
 80076e0:	4b22      	ldr	r3, [pc, #136]	@ (800776c <processDnData+0x1e0>)
 80076e2:	220c      	movs	r2, #12
 80076e4:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
			LMIC.opmode |= OP_REJOIN | OP_LINKDEAD;
 80076e8:	4b20      	ldr	r3, [pc, #128]	@ (800776c <processDnData+0x1e0>)
 80076ea:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80076ee:	f443 5381 	orr.w	r3, r3, #4128	@ 0x1020
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	4b1d      	ldr	r3, [pc, #116]	@ (800776c <processDnData+0x1e0>)
 80076f6:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			reportEvent(EV_LINK_DEAD);
 80076fa:	200e      	movs	r0, #14
 80076fc:	f7fe fcb8 	bl	8006070 <reportEvent>
		if (LMIC.bcninfoTries > 0) {
 8007700:	4b1a      	ldr	r3, [pc, #104]	@ (800776c <processDnData+0x1e0>)
 8007702:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8007706:	2b00      	cmp	r3, #0
 8007708:	d01d      	beq.n	8007746 <processDnData+0x1ba>
			if ((LMIC.opmode & OP_TRACK) != 0) {
 800770a:	4b18      	ldr	r3, [pc, #96]	@ (800776c <processDnData+0x1e0>)
 800770c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007710:	f003 0302 	and.w	r3, r3, #2
 8007714:	2b00      	cmp	r3, #0
 8007716:	d007      	beq.n	8007728 <processDnData+0x19c>
				reportEvent(EV_BEACON_FOUND);
 8007718:	2002      	movs	r0, #2
 800771a:	f7fe fca9 	bl	8006070 <reportEvent>
				LMIC.bcninfoTries = 0;
 800771e:	4b13      	ldr	r3, [pc, #76]	@ (800776c <processDnData+0x1e0>)
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
 8007726:	e00e      	b.n	8007746 <processDnData+0x1ba>
			} else if (--LMIC.bcninfoTries == 0) {
 8007728:	4b10      	ldr	r3, [pc, #64]	@ (800776c <processDnData+0x1e0>)
 800772a:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 800772e:	3b01      	subs	r3, #1
 8007730:	b2da      	uxtb	r2, r3
 8007732:	4b0e      	ldr	r3, [pc, #56]	@ (800776c <processDnData+0x1e0>)
 8007734:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
 8007738:	4b0c      	ldr	r3, [pc, #48]	@ (800776c <processDnData+0x1e0>)
 800773a:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 800773e:	2b00      	cmp	r3, #0
 8007740:	d101      	bne.n	8007746 <processDnData+0x1ba>
				startScan();   // NWK did not answer - try scan
 8007742:	f7ff fe21 	bl	8007388 <startScan>
		return 1;
 8007746:	2301      	movs	r3, #1
 8007748:	e00d      	b.n	8007766 <processDnData+0x1da>
	if (!decodeFrame()) {
 800774a:	f7fe fda9 	bl	80062a0 <decodeFrame>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d18c      	bne.n	800766e <processDnData+0xe2>
		if ((LMIC.txrxFlags & TXRX_DNW1) != 0)
 8007754:	4b05      	ldr	r3, [pc, #20]	@ (800776c <processDnData+0x1e0>)
 8007756:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	2b00      	cmp	r3, #0
 8007760:	f43f af27 	beq.w	80075b2 <processDnData+0x26>
			return 0;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	2000033c 	.word	0x2000033c
 8007770:	08012d80 	.word	0x08012d80

08007774 <processBeacon>:

static void processBeacon(xref2osjob_t osjob)
{
 8007774:	b590      	push	{r4, r7, lr}
 8007776:	b087      	sub	sp, #28
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
	ostime_t lasttx = LMIC.bcninfo.txtime; // save here - decodeBeacon might overwrite
 800777c:	4b81      	ldr	r3, [pc, #516]	@ (8007984 <processBeacon+0x210>)
 800777e:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8007782:	60fb      	str	r3, [r7, #12]
	u1_t flags = LMIC.bcninfo.flags;
 8007784:	4b7f      	ldr	r3, [pc, #508]	@ (8007984 <processBeacon+0x210>)
 8007786:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 800778a:	72fb      	strb	r3, [r7, #11]
	ev_t ev;

	if (LMIC.dataLen != 0 && decodeBeacon() >= 1) {
 800778c:	4b7d      	ldr	r3, [pc, #500]	@ (8007984 <processBeacon+0x210>)
 800778e:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8007792:	2b00      	cmp	r3, #0
 8007794:	f000 8087 	beq.w	80078a6 <processBeacon+0x132>
 8007798:	f7fe fcee 	bl	8006178 <decodeBeacon>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f340 8081 	ble.w	80078a6 <processBeacon+0x132>
		ev = EV_BEACON_TRACKED;
 80077a4:	2304      	movs	r3, #4
 80077a6:	75fb      	strb	r3, [r7, #23]
		if ((flags & (BCN_PARTIAL | BCN_FULL)) == 0) {
 80077a8:	7afb      	ldrb	r3, [r7, #11]
 80077aa:	f003 0303 	and.w	r3, r3, #3
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d104      	bne.n	80077bc <processBeacon+0x48>
			// We don't have a previous beacon to calc some drift - assume
			// an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
			calcBcnRxWindowFromMillis(13, 0);
 80077b2:	2100      	movs	r1, #0
 80077b4:	200d      	movs	r0, #13
 80077b6:	f7fd ff4b 	bl	8005650 <calcBcnRxWindowFromMillis>
			goto rev;
 80077ba:	e0d2      	b.n	8007962 <processBeacon+0x1ee>
		}
		// We have a previous BEACON to calculate some drift
		s2_t drift = BCN_INTV_osticks - (LMIC.bcninfo.txtime - lasttx);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	b29a      	uxth	r2, r3
 80077c0:	4b70      	ldr	r3, [pc, #448]	@ (8007984 <processBeacon+0x210>)
 80077c2:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	82bb      	strh	r3, [r7, #20]
		if (LMIC.missedBcns > 0) {
 80077d4:	4b6b      	ldr	r3, [pc, #428]	@ (8007984 <processBeacon+0x210>)
 80077d6:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d013      	beq.n	8007806 <processBeacon+0x92>
			drift = LMIC.drift + (drift - LMIC.drift) / (LMIC.missedBcns + 1);
 80077de:	4b69      	ldr	r3, [pc, #420]	@ (8007984 <processBeacon+0x210>)
 80077e0:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80077ea:	4966      	ldr	r1, [pc, #408]	@ (8007984 <processBeacon+0x210>)
 80077ec:	f9b1 10b4 	ldrsh.w	r1, [r1, #180]	@ 0xb4
 80077f0:	1a59      	subs	r1, r3, r1
 80077f2:	4b64      	ldr	r3, [pc, #400]	@ (8007984 <processBeacon+0x210>)
 80077f4:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 80077f8:	3301      	adds	r3, #1
 80077fa:	fb91 f3f3 	sdiv	r3, r1, r3
 80077fe:	b29b      	uxth	r3, r3
 8007800:	4413      	add	r3, r2
 8007802:	b29b      	uxth	r3, r3
 8007804:	82bb      	strh	r3, [r7, #20]
		}
		if ((LMIC.bcninfo.flags & BCN_NODRIFT) == 0) {
 8007806:	4b5f      	ldr	r3, [pc, #380]	@ (8007984 <processBeacon+0x210>)
 8007808:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 800780c:	f003 0304 	and.w	r3, r3, #4
 8007810:	2b00      	cmp	r3, #0
 8007812:	d127      	bne.n	8007864 <processBeacon+0xf0>
			s2_t diff = LMIC.drift - drift;
 8007814:	4b5b      	ldr	r3, [pc, #364]	@ (8007984 <processBeacon+0x210>)
 8007816:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 800781a:	b29a      	uxth	r2, r3
 800781c:	8abb      	ldrh	r3, [r7, #20]
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	b29b      	uxth	r3, r3
 8007822:	827b      	strh	r3, [r7, #18]
			if (diff < 0)
 8007824:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007828:	2b00      	cmp	r3, #0
 800782a:	da03      	bge.n	8007834 <processBeacon+0xc0>
				diff = -diff;
 800782c:	8a7b      	ldrh	r3, [r7, #18]
 800782e:	425b      	negs	r3, r3
 8007830:	b29b      	uxth	r3, r3
 8007832:	827b      	strh	r3, [r7, #18]
			LMIC.lastDriftDiff = diff;
 8007834:	4a53      	ldr	r2, [pc, #332]	@ (8007984 <processBeacon+0x210>)
 8007836:	8a7b      	ldrh	r3, [r7, #18]
 8007838:	f8a2 30b6 	strh.w	r3, [r2, #182]	@ 0xb6
			if (LMIC.maxDriftDiff < diff)
 800783c:	4b51      	ldr	r3, [pc, #324]	@ (8007984 <processBeacon+0x210>)
 800783e:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 8007842:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007846:	429a      	cmp	r2, r3
 8007848:	dd03      	ble.n	8007852 <processBeacon+0xde>
				LMIC.maxDriftDiff = diff;
 800784a:	4a4e      	ldr	r2, [pc, #312]	@ (8007984 <processBeacon+0x210>)
 800784c:	8a7b      	ldrh	r3, [r7, #18]
 800784e:	f8a2 30b8 	strh.w	r3, [r2, #184]	@ 0xb8
			LMIC.bcninfo.flags &= ~BCN_NODDIFF;
 8007852:	4b4c      	ldr	r3, [pc, #304]	@ (8007984 <processBeacon+0x210>)
 8007854:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8007858:	f023 0308 	bic.w	r3, r3, #8
 800785c:	b2da      	uxtb	r2, r3
 800785e:	4b49      	ldr	r3, [pc, #292]	@ (8007984 <processBeacon+0x210>)
 8007860:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
		}
		LMIC.drift = drift;
 8007864:	4a47      	ldr	r2, [pc, #284]	@ (8007984 <processBeacon+0x210>)
 8007866:	8abb      	ldrh	r3, [r7, #20]
 8007868:	f8a2 30b4 	strh.w	r3, [r2, #180]	@ 0xb4
		LMIC.missedBcns = LMIC.rejoinCnt = 0;
 800786c:	4b45      	ldr	r3, [pc, #276]	@ (8007984 <processBeacon+0x210>)
 800786e:	2200      	movs	r2, #0
 8007870:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
 8007874:	4b43      	ldr	r3, [pc, #268]	@ (8007984 <processBeacon+0x210>)
 8007876:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 800787a:	4b42      	ldr	r3, [pc, #264]	@ (8007984 <processBeacon+0x210>)
 800787c:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
		LMIC.bcninfo.flags &= ~BCN_NODRIFT;
 8007880:	4b40      	ldr	r3, [pc, #256]	@ (8007984 <processBeacon+0x210>)
 8007882:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8007886:	f023 0304 	bic.w	r3, r3, #4
 800788a:	b2da      	uxtb	r2, r3
 800788c:	4b3d      	ldr	r3, [pc, #244]	@ (8007984 <processBeacon+0x210>)
 800788e:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
		EV(devCond,INFO,(e_.reason = EV::devCond_t::CLOCK_DRIFT,
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = drift,
						e_.info2 = /*occasion BEACON*/0));
		ASSERT((LMIC.bcninfo.flags & (BCN_PARTIAL | BCN_FULL)) != 0);
 8007892:	4b3c      	ldr	r3, [pc, #240]	@ (8007984 <processBeacon+0x210>)
 8007894:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8007898:	f003 0303 	and.w	r3, r3, #3
 800789c:	2b00      	cmp	r3, #0
 800789e:	d14c      	bne.n	800793a <processBeacon+0x1c6>
 80078a0:	f7fd f9d6 	bl	8004c50 <hal_failed>
	if (LMIC.dataLen != 0 && decodeBeacon() >= 1) {
 80078a4:	e049      	b.n	800793a <processBeacon+0x1c6>
	} else {
		ev = EV_BEACON_MISSED;
 80078a6:	2303      	movs	r3, #3
 80078a8:	75fb      	strb	r3, [r7, #23]
		LMIC.bcninfo.txtime += BCN_INTV_osticks - LMIC.drift;
 80078aa:	4b36      	ldr	r3, [pc, #216]	@ (8007984 <processBeacon+0x210>)
 80078ac:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 80078b0:	4b34      	ldr	r3, [pc, #208]	@ (8007984 <processBeacon+0x210>)
 80078b2:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 80078b6:	f5c3 137a 	rsb	r3, r3, #4096000	@ 0x3e8000
 80078ba:	4413      	add	r3, r2
 80078bc:	4a31      	ldr	r2, [pc, #196]	@ (8007984 <processBeacon+0x210>)
 80078be:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
		LMIC.bcninfo.time += BCN_INTV_sec;
 80078c2:	4b30      	ldr	r3, [pc, #192]	@ (8007984 <processBeacon+0x210>)
 80078c4:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 80078c8:	3380      	adds	r3, #128	@ 0x80
 80078ca:	4a2e      	ldr	r2, [pc, #184]	@ (8007984 <processBeacon+0x210>)
 80078cc:	f8c2 3198 	str.w	r3, [r2, #408]	@ 0x198
		LMIC.missedBcns++;
 80078d0:	4b2c      	ldr	r3, [pc, #176]	@ (8007984 <processBeacon+0x210>)
 80078d2:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 80078d6:	3301      	adds	r3, #1
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	4b2a      	ldr	r3, [pc, #168]	@ (8007984 <processBeacon+0x210>)
 80078dc:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
		// Delay any possible TX after surmised beacon - it's there although we missed it
		txDelay(LMIC.bcninfo.txtime + BCN_RESERVE_osticks, 4);
 80078e0:	4b28      	ldr	r3, [pc, #160]	@ (8007984 <processBeacon+0x210>)
 80078e2:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80078e6:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 80078ea:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80078ee:	2104      	movs	r1, #4
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7fe f82d 	bl	8005950 <txDelay>
		if (LMIC.missedBcns > MAX_MISSED_BCNS)
 80078f6:	4b23      	ldr	r3, [pc, #140]	@ (8007984 <processBeacon+0x210>)
 80078f8:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 80078fc:	2b14      	cmp	r3, #20
 80078fe:	d908      	bls.n	8007912 <processBeacon+0x19e>
			LMIC.opmode |= OP_REJOIN;  // try if we can roam to another network
 8007900:	4b20      	ldr	r3, [pc, #128]	@ (8007984 <processBeacon+0x210>)
 8007902:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007906:	f043 0320 	orr.w	r3, r3, #32
 800790a:	b29a      	uxth	r2, r3
 800790c:	4b1d      	ldr	r3, [pc, #116]	@ (8007984 <processBeacon+0x210>)
 800790e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		if (LMIC.bcnRxsyms > MAX_RXSYMS) {
 8007912:	4b1c      	ldr	r3, [pc, #112]	@ (8007984 <processBeacon+0x210>)
 8007914:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 8007918:	2b64      	cmp	r3, #100	@ 0x64
 800791a:	d90f      	bls.n	800793c <processBeacon+0x1c8>
			LMIC.opmode &= ~(OP_TRACK | OP_PINGABLE | OP_PINGINI | OP_REJOIN);
 800791c:	4b19      	ldr	r3, [pc, #100]	@ (8007984 <processBeacon+0x210>)
 800791e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007922:	f423 63c4 	bic.w	r3, r3, #1568	@ 0x620
 8007926:	f023 0302 	bic.w	r3, r3, #2
 800792a:	b29a      	uxth	r2, r3
 800792c:	4b15      	ldr	r3, [pc, #84]	@ (8007984 <processBeacon+0x210>)
 800792e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			reportEvent(EV_LOST_TSYNC);
 8007932:	200b      	movs	r0, #11
 8007934:	f7fe fb9c 	bl	8006070 <reportEvent>
			return;
 8007938:	e021      	b.n	800797e <processBeacon+0x20a>
	if (LMIC.dataLen != 0 && decodeBeacon() >= 1) {
 800793a:	bf00      	nop
		}
	}
	LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks
 800793c:	4b11      	ldr	r3, [pc, #68]	@ (8007984 <processBeacon+0x210>)
 800793e:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8007942:	f503 147a 	add.w	r4, r3, #4096000	@ 0x3e8000
			- calcRxWindow(0, DR_BCN);
 8007946:	2103      	movs	r1, #3
 8007948:	2000      	movs	r0, #0
 800794a:	f7fd fe2d 	bl	80055a8 <calcRxWindow>
 800794e:	4603      	mov	r3, r0
 8007950:	1ae3      	subs	r3, r4, r3
	LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks
 8007952:	4a0c      	ldr	r2, [pc, #48]	@ (8007984 <processBeacon+0x210>)
 8007954:	f8c2 318c 	str.w	r3, [r2, #396]	@ 0x18c
	LMIC.bcnRxsyms = LMIC.rxsyms;
 8007958:	4b0a      	ldr	r3, [pc, #40]	@ (8007984 <processBeacon+0x210>)
 800795a:	7c1a      	ldrb	r2, [r3, #16]
 800795c:	4b09      	ldr	r3, [pc, #36]	@ (8007984 <processBeacon+0x210>)
 800795e:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
	rev:
#if CFG_us915
    LMIC.bcnChnl = (LMIC.bcnChnl+1) & 7;
#endif
	if ((LMIC.opmode & OP_PINGINI) != 0)
 8007962:	4b08      	ldr	r3, [pc, #32]	@ (8007984 <processBeacon+0x210>)
 8007964:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007968:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800796c:	2b00      	cmp	r3, #0
 800796e:	d002      	beq.n	8007976 <processBeacon+0x202>
		rxschedInit(&LMIC.ping);  // note: reuses LMIC.frame buffer!
 8007970:	4805      	ldr	r0, [pc, #20]	@ (8007988 <processBeacon+0x214>)
 8007972:	f7fd fef3 	bl	800575c <rxschedInit>
	reportEvent(ev);
 8007976:	7dfb      	ldrb	r3, [r7, #23]
 8007978:	4618      	mov	r0, r3
 800797a:	f7fe fb79 	bl	8006070 <reportEvent>
}
 800797e:	371c      	adds	r7, #28
 8007980:	46bd      	mov	sp, r7
 8007982:	bd90      	pop	{r4, r7, pc}
 8007984:	2000033c 	.word	0x2000033c
 8007988:	20000470 	.word	0x20000470

0800798c <startRxBcn>:

static void startRxBcn(xref2osjob_t osjob)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
	LMIC.osjob.func = FUNC_ADDR(processBeacon);
 8007994:	4b04      	ldr	r3, [pc, #16]	@ (80079a8 <startRxBcn+0x1c>)
 8007996:	4a05      	ldr	r2, [pc, #20]	@ (80079ac <startRxBcn+0x20>)
 8007998:	61da      	str	r2, [r3, #28]
	os_radio(RADIO_RX);
 800799a:	2002      	movs	r0, #2
 800799c:	f001 fbca 	bl	8009134 <os_radio>
}
 80079a0:	bf00      	nop
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	2000033c 	.word	0x2000033c
 80079ac:	08007775 	.word	0x08007775

080079b0 <startRxPing>:

static void startRxPing(xref2osjob_t osjob)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
	LMIC.osjob.func = FUNC_ADDR(processPingRx);
 80079b8:	4b04      	ldr	r3, [pc, #16]	@ (80079cc <startRxPing+0x1c>)
 80079ba:	4a05      	ldr	r2, [pc, #20]	@ (80079d0 <startRxPing+0x20>)
 80079bc:	61da      	str	r2, [r3, #28]
	os_radio(RADIO_RX);
 80079be:	2002      	movs	r0, #2
 80079c0:	f001 fbb8 	bl	8009134 <os_radio>
}
 80079c4:	bf00      	nop
 80079c6:	3708      	adds	r7, #8
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	2000033c 	.word	0x2000033c
 80079d0:	08007551 	.word	0x08007551

080079d4 <engineUpdate>:

// Decide what to do next for the MAC layer of a device
static void engineUpdate(void)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af00      	add	r7, sp, #0
	// Check for ongoing state: scan or TX/RX transaction
	if ((LMIC.opmode & (OP_SCAN | OP_TXRXPEND | OP_SHUTDOWN)) != 0)
 80079da:	4b90      	ldr	r3, [pc, #576]	@ (8007c1c <engineUpdate+0x248>)
 80079dc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80079e0:	f003 03c1 	and.w	r3, r3, #193	@ 0xc1
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f040 81ab 	bne.w	8007d40 <engineUpdate+0x36c>
		return;

	if (LMIC.devaddr == 0 && (LMIC.opmode & OP_JOINING) == 0) {
 80079ea:	4b8c      	ldr	r3, [pc, #560]	@ (8007c1c <engineUpdate+0x248>)
 80079ec:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d109      	bne.n	8007a08 <engineUpdate+0x34>
 80079f4:	4b89      	ldr	r3, [pc, #548]	@ (8007c1c <engineUpdate+0x248>)
 80079f6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80079fa:	f003 0304 	and.w	r3, r3, #4
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d102      	bne.n	8007a08 <engineUpdate+0x34>
		LMIC_startJoining();
 8007a02:	f7ff fd5b 	bl	80074bc <LMIC_startJoining>
		return;
 8007a06:	e19e      	b.n	8007d46 <engineUpdate+0x372>
	}

	ostime_t now = os_getTime();
 8007a08:	f000 fd6e 	bl	80084e8 <os_getTime>
 8007a0c:	60b8      	str	r0, [r7, #8]
	ostime_t rxtime = 0;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	617b      	str	r3, [r7, #20]
	ostime_t txbeg = 0;
 8007a12:	2300      	movs	r3, #0
 8007a14:	613b      	str	r3, [r7, #16]

	if ((LMIC.opmode & OP_TRACK) != 0) {
 8007a16:	4b81      	ldr	r3, [pc, #516]	@ (8007c1c <engineUpdate+0x248>)
 8007a18:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007a1c:	f003 0302 	and.w	r3, r3, #2
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d00f      	beq.n	8007a44 <engineUpdate+0x70>
		// We are tracking a beacon
		ASSERT(now + RX_RAMPUP - LMIC.bcnRxtime <= 0);
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8007a2a:	4b7c      	ldr	r3, [pc, #496]	@ (8007c1c <engineUpdate+0x248>)
 8007a2c:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8007a30:	1ad3      	subs	r3, r2, r3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	dd01      	ble.n	8007a3a <engineUpdate+0x66>
 8007a36:	f7fd f90b 	bl	8004c50 <hal_failed>
		rxtime = LMIC.bcnRxtime - RX_RAMPUP;
 8007a3a:	4b78      	ldr	r3, [pc, #480]	@ (8007c1c <engineUpdate+0x248>)
 8007a3c:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8007a40:	3b40      	subs	r3, #64	@ 0x40
 8007a42:	617b      	str	r3, [r7, #20]
	}

	if ((LMIC.opmode & (OP_JOINING | OP_REJOIN | OP_TXDATA | OP_POLL)) != 0) {
 8007a44:	4b75      	ldr	r3, [pc, #468]	@ (8007c1c <engineUpdate+0x248>)
 8007a46:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007a4a:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f000 80f2 	beq.w	8007c38 <engineUpdate+0x264>
		// Need to TX some data...
		// Assuming txChnl points to channel which first becomes available again.
		bit_t jacc = ((LMIC.opmode & (OP_JOINING | OP_REJOIN)) != 0 ? 1 : 0);
 8007a54:	4b71      	ldr	r3, [pc, #452]	@ (8007c1c <engineUpdate+0x248>)
 8007a56:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007a5a:	f003 0324 	and.w	r3, r3, #36	@ 0x24
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	bf14      	ite	ne
 8007a62:	2301      	movne	r3, #1
 8007a64:	2300      	moveq	r3, #0
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	71fb      	strb	r3, [r7, #7]
		// Find next suitable channel and return availability time
		if ((LMIC.opmode & OP_NEXTCHNL) != 0) {
 8007a6a:	4b6c      	ldr	r3, [pc, #432]	@ (8007c1c <engineUpdate+0x248>)
 8007a6c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007a70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d012      	beq.n	8007a9e <engineUpdate+0xca>
			txbeg = LMIC.txend = nextTx(now);
 8007a78:	68b8      	ldr	r0, [r7, #8]
 8007a7a:	f7fe f98f 	bl	8005d9c <nextTx>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	4a66      	ldr	r2, [pc, #408]	@ (8007c1c <engineUpdate+0x248>)
 8007a82:	6013      	str	r3, [r2, #0]
 8007a84:	4b65      	ldr	r3, [pc, #404]	@ (8007c1c <engineUpdate+0x248>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	613b      	str	r3, [r7, #16]
			LMIC.opmode &= ~OP_NEXTCHNL;
 8007a8a:	4b64      	ldr	r3, [pc, #400]	@ (8007c1c <engineUpdate+0x248>)
 8007a8c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007a90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	4b61      	ldr	r3, [pc, #388]	@ (8007c1c <engineUpdate+0x248>)
 8007a98:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8007a9c:	e002      	b.n	8007aa4 <engineUpdate+0xd0>
		} else {
			txbeg = LMIC.txend;
 8007a9e:	4b5f      	ldr	r3, [pc, #380]	@ (8007c1c <engineUpdate+0x248>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	613b      	str	r3, [r7, #16]
		}
		// Delayed TX or waiting for duty cycle?
		if ((LMIC.globalDutyRate != 0 || (LMIC.opmode & OP_RNDTX) != 0)
 8007aa4:	4b5d      	ldr	r3, [pc, #372]	@ (8007c1c <engineUpdate+0x248>)
 8007aa6:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d106      	bne.n	8007abc <engineUpdate+0xe8>
 8007aae:	4b5b      	ldr	r3, [pc, #364]	@ (8007c1c <engineUpdate+0x248>)
 8007ab0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00a      	beq.n	8007ad2 <engineUpdate+0xfe>
				&& (txbeg - LMIC.globalDutyAvail) < 0)
 8007abc:	4b57      	ldr	r3, [pc, #348]	@ (8007c1c <engineUpdate+0x248>)
 8007abe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007ac2:	693a      	ldr	r2, [r7, #16]
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	da03      	bge.n	8007ad2 <engineUpdate+0xfe>
			txbeg = LMIC.globalDutyAvail;
 8007aca:	4b54      	ldr	r3, [pc, #336]	@ (8007c1c <engineUpdate+0x248>)
 8007acc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007ad0:	613b      	str	r3, [r7, #16]
		// If we're tracking a beacon...
		// then make sure TX-RX transaction is complete before beacon
		if ((LMIC.opmode & OP_TRACK) != 0
 8007ad2:	4b52      	ldr	r3, [pc, #328]	@ (8007c1c <engineUpdate+0x248>)
 8007ad4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007ad8:	f003 0302 	and.w	r3, r3, #2
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d017      	beq.n	8007b10 <engineUpdate+0x13c>
				&& txbeg + (jacc ? JOIN_GUARD_osticks : TXRX_GUARD_osticks)
 8007ae0:	79fb      	ldrb	r3, [r7, #7]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d001      	beq.n	8007aea <engineUpdate+0x116>
 8007ae6:	4a4e      	ldr	r2, [pc, #312]	@ (8007c20 <engineUpdate+0x24c>)
 8007ae8:	e000      	b.n	8007aec <engineUpdate+0x118>
 8007aea:	4a4e      	ldr	r2, [pc, #312]	@ (8007c24 <engineUpdate+0x250>)
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	441a      	add	r2, r3
						- rxtime > 0) {
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	1ad3      	subs	r3, r2, r3
				&& txbeg + (jacc ? JOIN_GUARD_osticks : TXRX_GUARD_osticks)
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	dd0b      	ble.n	8007b10 <engineUpdate+0x13c>
			// Not enough time to complete TX-RX before beacon - postpone after beacon.
			// In order to avoid clustering of postponed TX right after beacon randomize start!
			txDelay(rxtime + BCN_RESERVE_osticks, 16);
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 8007afe:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8007b02:	2110      	movs	r1, #16
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7fd ff23 	bl	8005950 <txDelay>
			txbeg = 0;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	613b      	str	r3, [r7, #16]
			goto checkrx;
 8007b0e:	e09b      	b.n	8007c48 <engineUpdate+0x274>
		}
		// Earliest possible time vs overhead to setup radio
		if (txbeg - (now + TX_RAMPUP) < 0) {
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	3340      	adds	r3, #64	@ 0x40
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	1ad3      	subs	r3, r2, r3
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	da70      	bge.n	8007bfe <engineUpdate+0x22a>
			// We could send right now!
			txbeg = now;
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	613b      	str	r3, [r7, #16]
			dr_t txdr = (dr_t) LMIC.datarate;
 8007b20:	4b3e      	ldr	r3, [pc, #248]	@ (8007c1c <engineUpdate+0x248>)
 8007b22:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8007b26:	73fb      	strb	r3, [r7, #15]
			if (jacc) {
 8007b28:	79fb      	ldrb	r3, [r7, #7]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d01d      	beq.n	8007b6a <engineUpdate+0x196>
				u1_t ftype;
				if ((LMIC.opmode & OP_REJOIN) != 0) {
 8007b2e:	4b3b      	ldr	r3, [pc, #236]	@ (8007c1c <engineUpdate+0x248>)
 8007b30:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007b34:	f003 0320 	and.w	r3, r3, #32
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00c      	beq.n	8007b56 <engineUpdate+0x182>
					txdr = lowerDR(txdr, LMIC.rejoinCnt);
 8007b3c:	4b37      	ldr	r3, [pc, #220]	@ (8007c1c <engineUpdate+0x248>)
 8007b3e:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 8007b42:	7bfb      	ldrb	r3, [r7, #15]
 8007b44:	4611      	mov	r1, r2
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7fd fa10 	bl	8004f6c <lowerDR>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	73fb      	strb	r3, [r7, #15]
					ftype = HDR_FTYPE_REJOIN;
 8007b50:	23c0      	movs	r3, #192	@ 0xc0
 8007b52:	73bb      	strb	r3, [r7, #14]
 8007b54:	e001      	b.n	8007b5a <engineUpdate+0x186>
				} else {
					ftype = HDR_FTYPE_JREQ;
 8007b56:	2300      	movs	r3, #0
 8007b58:	73bb      	strb	r3, [r7, #14]
				}
				buildJoinRequest(ftype);
 8007b5a:	7bbb      	ldrb	r3, [r7, #14]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f7ff fc6b 	bl	8007438 <buildJoinRequest>
				LMIC.osjob.func = FUNC_ADDR(jreqDone);
 8007b62:	4b2e      	ldr	r3, [pc, #184]	@ (8007c1c <engineUpdate+0x248>)
 8007b64:	4a30      	ldr	r2, [pc, #192]	@ (8007c28 <engineUpdate+0x254>)
 8007b66:	61da      	str	r2, [r3, #28]
 8007b68:	e01d      	b.n	8007ba6 <engineUpdate+0x1d2>
			} else {
				if (LMIC.seqnoDn >= 0xFFFFFF80) {
 8007b6a:	4b2c      	ldr	r3, [pc, #176]	@ (8007c1c <engineUpdate+0x248>)
 8007b6c:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8007b70:	f113 0f81 	cmn.w	r3, #129	@ 0x81
 8007b74:	d907      	bls.n	8007b86 <engineUpdate+0x1b2>
									e_.eui = MAIN::CDEV->getEui(),
									e_.info = LMIC.seqnoDn,
									e_.info2 = 0));
					// Device has to react! NWK will not roll over and just stop sending.
					// Thus, we have N frames to detect a possible lock up.
					reset: os_setCallback(&LMIC.osjob, FUNC_ADDR(runReset));
 8007b76:	bf00      	nop
 8007b78:	e000      	b.n	8007b7c <engineUpdate+0x1a8>
					EV(specCond, ERR, (e_.reason = EV::specCond_t::UPSEQNO_ROLL_OVER,
									e_.eui = MAIN::CDEV->getEui(),
									e_.info2 = LMIC.seqnoUp));
					// Do not run RESET event callback from here!
					// App code might do some stuff after send unaware of RESET.
					goto reset;
 8007b7a:	bf00      	nop
					reset: os_setCallback(&LMIC.osjob, FUNC_ADDR(runReset));
 8007b7c:	492b      	ldr	r1, [pc, #172]	@ (8007c2c <engineUpdate+0x258>)
 8007b7e:	482c      	ldr	r0, [pc, #176]	@ (8007c30 <engineUpdate+0x25c>)
 8007b80:	f000 fcf6 	bl	8008570 <os_setCallback>
					return;
 8007b84:	e0df      	b.n	8007d46 <engineUpdate+0x372>
				if ((LMIC.txCnt == 0 && LMIC.seqnoUp == 0xFFFFFFFF)) {
 8007b86:	4b25      	ldr	r3, [pc, #148]	@ (8007c1c <engineUpdate+0x248>)
 8007b88:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d105      	bne.n	8007b9c <engineUpdate+0x1c8>
 8007b90:	4b22      	ldr	r3, [pc, #136]	@ (8007c1c <engineUpdate+0x248>)
 8007b92:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8007b96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b9a:	d0ee      	beq.n	8007b7a <engineUpdate+0x1a6>
				}
				buildDataFrame();
 8007b9c:	f7ff f9ba 	bl	8006f14 <buildDataFrame>
				LMIC.osjob.func = FUNC_ADDR(updataDone);
 8007ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8007c1c <engineUpdate+0x248>)
 8007ba2:	4a24      	ldr	r2, [pc, #144]	@ (8007c34 <engineUpdate+0x260>)
 8007ba4:	61da      	str	r2, [r3, #28]
			}
			LMIC.rps = setCr(updr2rps(txdr), (cr_t) LMIC.errcr);
 8007ba6:	7bfb      	ldrb	r3, [r7, #15]
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7fd f98b 	bl	8004ec4 <updr2rps>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8007c1c <engineUpdate+0x248>)
 8007bb4:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8007bb8:	4619      	mov	r1, r3
 8007bba:	4610      	mov	r0, r2
 8007bbc:	f7fd f91c 	bl	8004df8 <setCr>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	4b15      	ldr	r3, [pc, #84]	@ (8007c1c <engineUpdate+0x248>)
 8007bc6:	81da      	strh	r2, [r3, #14]
			LMIC.dndr = txdr; // carry TX datarate (can be != LMIC.datarate) over to txDone/setupRx1
 8007bc8:	4a14      	ldr	r2, [pc, #80]	@ (8007c1c <engineUpdate+0x248>)
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
 8007bcc:	7453      	strb	r3, [r2, #17]
			LMIC.opmode = (LMIC.opmode & ~(OP_POLL | OP_RNDTX)) | OP_TXRXPEND
 8007bce:	4b13      	ldr	r3, [pc, #76]	@ (8007c1c <engineUpdate+0x248>)
 8007bd0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007bd4:	b21b      	sxth	r3, r3
					| OP_NEXTCHNL;
 8007bd6:	f423 6319 	bic.w	r3, r3, #2448	@ 0x990
 8007bda:	b21b      	sxth	r3, r3
 8007bdc:	f443 6308 	orr.w	r3, r3, #2176	@ 0x880
 8007be0:	b21b      	sxth	r3, r3
 8007be2:	b29a      	uxth	r2, r3
			LMIC.opmode = (LMIC.opmode & ~(OP_POLL | OP_RNDTX)) | OP_TXRXPEND
 8007be4:	4b0d      	ldr	r3, [pc, #52]	@ (8007c1c <engineUpdate+0x248>)
 8007be6:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			updateTx(txbeg);
 8007bea:	6938      	ldr	r0, [r7, #16]
 8007bec:	f7fe f88c 	bl	8005d08 <updateTx>
			reportEvent(EV_TXSTART);
 8007bf0:	2011      	movs	r0, #17
 8007bf2:	f7fe fa3d 	bl	8006070 <reportEvent>
			os_radio(RADIO_TX);
 8007bf6:	2001      	movs	r0, #1
 8007bf8:	f001 fa9c 	bl	8009134 <os_radio>
			return;
 8007bfc:	e0a3      	b.n	8007d46 <engineUpdate+0x372>
		}
		// Cannot yet TX
		if ((LMIC.opmode & OP_TRACK) == 0)
 8007bfe:	4b07      	ldr	r3, [pc, #28]	@ (8007c1c <engineUpdate+0x248>)
 8007c00:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007c04:	f003 0302 	and.w	r3, r3, #2
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f000 808c 	beq.w	8007d26 <engineUpdate+0x352>
			goto txdelay;
		// We don't track the beacon - nothing else to do - so wait for the time to TX
		// Consider RX tasks
		if (txbeg == 0) // zero indicates no TX pending
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d119      	bne.n	8007c48 <engineUpdate+0x274>
			txbeg += 1; // TX delayed by one tick (insignificant amount of time)
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	3301      	adds	r3, #1
 8007c18:	613b      	str	r3, [r7, #16]
 8007c1a:	e015      	b.n	8007c48 <engineUpdate+0x274>
 8007c1c:	2000033c 	.word	0x2000033c
 8007c20:	00046500 	.word	0x00046500
 8007c24:	0002ee00 	.word	0x0002ee00
 8007c28:	08006dd5 	.word	0x08006dd5
 8007c2c:	0800608f 	.word	0x0800608f
 8007c30:	20000350 	.word	0x20000350
 8007c34:	08006ee5 	.word	0x08006ee5
	} else {
		// No TX pending - no scheduled RX
		if ((LMIC.opmode & OP_TRACK) == 0)
 8007c38:	4b44      	ldr	r3, [pc, #272]	@ (8007d4c <engineUpdate+0x378>)
 8007c3a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007c3e:	f003 0302 	and.w	r3, r3, #2
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d07e      	beq.n	8007d44 <engineUpdate+0x370>
			return;
	}

	// Are we pingable?
	checkrx: if ((LMIC.opmode & OP_PINGINI) != 0) {
 8007c46:	bf00      	nop
 8007c48:	4b40      	ldr	r3, [pc, #256]	@ (8007d4c <engineUpdate+0x378>)
 8007c4a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007c4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d041      	beq.n	8007cda <engineUpdate+0x306>
		// One more RX slot in this beacon period?
		if (rxschedNext(&LMIC.ping, now + RX_RAMPUP)) {
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	3340      	adds	r3, #64	@ 0x40
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	483c      	ldr	r0, [pc, #240]	@ (8007d50 <engineUpdate+0x37c>)
 8007c5e:	f7fd fdeb 	bl	8005838 <rxschedNext>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d038      	beq.n	8007cda <engineUpdate+0x306>
			if (txbeg != 0 && (txbeg - LMIC.ping.rxtime) < 0)
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d006      	beq.n	8007c7c <engineUpdate+0x2a8>
 8007c6e:	4b37      	ldr	r3, [pc, #220]	@ (8007d4c <engineUpdate+0x378>)
 8007c70:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8007c74:	693a      	ldr	r2, [r7, #16]
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	db56      	blt.n	8007d2a <engineUpdate+0x356>
				goto txdelay;
			LMIC.rxsyms = LMIC.ping.rxsyms;
 8007c7c:	4b33      	ldr	r3, [pc, #204]	@ (8007d4c <engineUpdate+0x378>)
 8007c7e:	f893 2137 	ldrb.w	r2, [r3, #311]	@ 0x137
 8007c82:	4b32      	ldr	r3, [pc, #200]	@ (8007d4c <engineUpdate+0x378>)
 8007c84:	741a      	strb	r2, [r3, #16]
			LMIC.rxtime = LMIC.ping.rxtime;
 8007c86:	4b31      	ldr	r3, [pc, #196]	@ (8007d4c <engineUpdate+0x378>)
 8007c88:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8007c8c:	4a2f      	ldr	r2, [pc, #188]	@ (8007d4c <engineUpdate+0x378>)
 8007c8e:	6053      	str	r3, [r2, #4]
			LMIC.freq = LMIC.ping.freq;
 8007c90:	4b2e      	ldr	r3, [pc, #184]	@ (8007d4c <engineUpdate+0x378>)
 8007c92:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8007c96:	4a2d      	ldr	r2, [pc, #180]	@ (8007d4c <engineUpdate+0x378>)
 8007c98:	6093      	str	r3, [r2, #8]
			LMIC.rps = dndr2rps(LMIC.ping.dr);
 8007c9a:	4b2c      	ldr	r3, [pc, #176]	@ (8007d4c <engineUpdate+0x378>)
 8007c9c:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f7fd f921 	bl	8004ee8 <dndr2rps>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	461a      	mov	r2, r3
 8007caa:	4b28      	ldr	r3, [pc, #160]	@ (8007d4c <engineUpdate+0x378>)
 8007cac:	81da      	strh	r2, [r3, #14]
			LMIC.dataLen = 0;
 8007cae:	4b27      	ldr	r3, [pc, #156]	@ (8007d4c <engineUpdate+0x378>)
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
			ASSERT(LMIC.rxtime - now+RX_RAMPUP >= 0);
 8007cb6:	4b25      	ldr	r3, [pc, #148]	@ (8007d4c <engineUpdate+0x378>)
 8007cb8:	685a      	ldr	r2, [r3, #4]
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	1ad3      	subs	r3, r2, r3
 8007cbe:	f113 0f40 	cmn.w	r3, #64	@ 0x40
 8007cc2:	da01      	bge.n	8007cc8 <engineUpdate+0x2f4>
 8007cc4:	f7fc ffc4 	bl	8004c50 <hal_failed>
			os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP,
 8007cc8:	4b20      	ldr	r3, [pc, #128]	@ (8007d4c <engineUpdate+0x378>)
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	3b40      	subs	r3, #64	@ 0x40
 8007cce:	4a21      	ldr	r2, [pc, #132]	@ (8007d54 <engineUpdate+0x380>)
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	4821      	ldr	r0, [pc, #132]	@ (8007d58 <engineUpdate+0x384>)
 8007cd4:	f000 fc72 	bl	80085bc <os_setTimedCallback>
					FUNC_ADDR(startRxPing));
			return;
 8007cd8:	e035      	b.n	8007d46 <engineUpdate+0x372>
		}
		// no - just wait for the beacon
	}

	if (txbeg != 0 && (txbeg - rxtime) < 0)
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d004      	beq.n	8007cea <engineUpdate+0x316>
 8007ce0:	693a      	ldr	r2, [r7, #16]
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	db21      	blt.n	8007d2e <engineUpdate+0x35a>
		goto txdelay;

	setBcnRxParams();
 8007cea:	f7fe f8f3 	bl	8005ed4 <setBcnRxParams>
	LMIC.rxsyms = LMIC.bcnRxsyms;
 8007cee:	4b17      	ldr	r3, [pc, #92]	@ (8007d4c <engineUpdate+0x378>)
 8007cf0:	f893 2189 	ldrb.w	r2, [r3, #393]	@ 0x189
 8007cf4:	4b15      	ldr	r3, [pc, #84]	@ (8007d4c <engineUpdate+0x378>)
 8007cf6:	741a      	strb	r2, [r3, #16]
	LMIC.rxtime = LMIC.bcnRxtime;
 8007cf8:	4b14      	ldr	r3, [pc, #80]	@ (8007d4c <engineUpdate+0x378>)
 8007cfa:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8007cfe:	4a13      	ldr	r2, [pc, #76]	@ (8007d4c <engineUpdate+0x378>)
 8007d00:	6053      	str	r3, [r2, #4]
	if (now - rxtime >= 0) {
 8007d02:	68ba      	ldr	r2, [r7, #8]
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	db06      	blt.n	8007d1a <engineUpdate+0x346>
		LMIC.osjob.func = FUNC_ADDR(processBeacon);
 8007d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8007d4c <engineUpdate+0x378>)
 8007d0e:	4a13      	ldr	r2, [pc, #76]	@ (8007d5c <engineUpdate+0x388>)
 8007d10:	61da      	str	r2, [r3, #28]
		os_radio(RADIO_RX);
 8007d12:	2002      	movs	r0, #2
 8007d14:	f001 fa0e 	bl	8009134 <os_radio>
		return;
 8007d18:	e015      	b.n	8007d46 <engineUpdate+0x372>
	}
	os_setTimedCallback(&LMIC.osjob, rxtime, FUNC_ADDR(startRxBcn));
 8007d1a:	4a11      	ldr	r2, [pc, #68]	@ (8007d60 <engineUpdate+0x38c>)
 8007d1c:	6979      	ldr	r1, [r7, #20]
 8007d1e:	480e      	ldr	r0, [pc, #56]	@ (8007d58 <engineUpdate+0x384>)
 8007d20:	f000 fc4c 	bl	80085bc <os_setTimedCallback>
	return;
 8007d24:	e00f      	b.n	8007d46 <engineUpdate+0x372>
			goto txdelay;
 8007d26:	bf00      	nop
 8007d28:	e002      	b.n	8007d30 <engineUpdate+0x35c>
				goto txdelay;
 8007d2a:	bf00      	nop
 8007d2c:	e000      	b.n	8007d30 <engineUpdate+0x35c>
		goto txdelay;
 8007d2e:	bf00      	nop

	txdelay: EV(devCond, INFO, (e_.reason = EV::devCond_t::TX_DELAY,
					e_.eui = MAIN::CDEV->getEui(),
					e_.info = osticks2ms(txbeg-now),
					e_.info2 = LMIC.seqnoUp-1));
	os_setTimedCallback(&LMIC.osjob, txbeg - TX_RAMPUP,
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	3b40      	subs	r3, #64	@ 0x40
 8007d34:	4a0b      	ldr	r2, [pc, #44]	@ (8007d64 <engineUpdate+0x390>)
 8007d36:	4619      	mov	r1, r3
 8007d38:	4807      	ldr	r0, [pc, #28]	@ (8007d58 <engineUpdate+0x384>)
 8007d3a:	f000 fc3f 	bl	80085bc <os_setTimedCallback>
 8007d3e:	e002      	b.n	8007d46 <engineUpdate+0x372>
		return;
 8007d40:	bf00      	nop
 8007d42:	e000      	b.n	8007d46 <engineUpdate+0x372>
			return;
 8007d44:	bf00      	nop
			FUNC_ADDR(runEngineUpdate));
}
 8007d46:	3718      	adds	r7, #24
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	2000033c 	.word	0x2000033c
 8007d50:	20000470 	.word	0x20000470
 8007d54:	080079b1 	.word	0x080079b1
 8007d58:	20000350 	.word	0x20000350
 8007d5c:	08007775 	.word	0x08007775
 8007d60:	0800798d 	.word	0x0800798d
 8007d64:	0800605d 	.word	0x0800605d

08007d68 <LMIC_reset>:
	os_radio(RADIO_RST);
	LMIC.opmode |= OP_SHUTDOWN;
}

void LMIC_reset(void)
{
 8007d68:	b598      	push	{r3, r4, r7, lr}
 8007d6a:	af00      	add	r7, sp, #0
	EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
					e_.eui = MAIN::CDEV->getEui(),
					e_.info = EV_RESET));
	os_radio(RADIO_RST);
 8007d6c:	2000      	movs	r0, #0
 8007d6e:	f001 f9e1 	bl	8009134 <os_radio>
	os_clearCallback(&LMIC.osjob);
 8007d72:	4821      	ldr	r0, [pc, #132]	@ (8007df8 <LMIC_reset+0x90>)
 8007d74:	f000 fbde 	bl	8008534 <os_clearCallback>

	os_clearMem((xref2u1_t )&LMIC, SIZEOFEXPR(LMIC));
 8007d78:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	481f      	ldr	r0, [pc, #124]	@ (8007dfc <LMIC_reset+0x94>)
 8007d80:	f007 f970 	bl	800f064 <memset>
	LMIC.devaddr = 0;
 8007d84:	4b1d      	ldr	r3, [pc, #116]	@ (8007dfc <LMIC_reset+0x94>)
 8007d86:	2200      	movs	r2, #0
 8007d88:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
	LMIC.devNonce = os_getRndU2();
 8007d8c:	f001 f8d6 	bl	8008f3c <radio_rand1>
 8007d90:	4603      	mov	r3, r0
 8007d92:	021b      	lsls	r3, r3, #8
 8007d94:	b21c      	sxth	r4, r3
 8007d96:	f001 f8d1 	bl	8008f3c <radio_rand1>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	b21b      	sxth	r3, r3
 8007d9e:	4323      	orrs	r3, r4
 8007da0:	b21b      	sxth	r3, r3
 8007da2:	b29a      	uxth	r2, r3
 8007da4:	4b15      	ldr	r3, [pc, #84]	@ (8007dfc <LMIC_reset+0x94>)
 8007da6:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
	LMIC.opmode = OP_NONE;
 8007daa:	4b14      	ldr	r3, [pc, #80]	@ (8007dfc <LMIC_reset+0x94>)
 8007dac:	2200      	movs	r2, #0
 8007dae:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	LMIC.errcr = CR_4_5;
 8007db2:	4b12      	ldr	r3, [pc, #72]	@ (8007dfc <LMIC_reset+0x94>)
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
	LMIC.adrEnabled = FCT_ADREN;
 8007dba:	4b10      	ldr	r3, [pc, #64]	@ (8007dfc <LMIC_reset+0x94>)
 8007dbc:	2280      	movs	r2, #128	@ 0x80
 8007dbe:	f883 2127 	strb.w	r2, [r3, #295]	@ 0x127
	LMIC.dn2Dr = DR_DNW2;   // we need this for 2nd DN window of join accept
 8007dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8007dfc <LMIC_reset+0x94>)
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
	LMIC.dn2Freq = FREQ_DNW2; // ditto
 8007dca:	4b0c      	ldr	r3, [pc, #48]	@ (8007dfc <LMIC_reset+0x94>)
 8007dcc:	4a0c      	ldr	r2, [pc, #48]	@ (8007e00 <LMIC_reset+0x98>)
 8007dce:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
	LMIC.rxDelay = DELAY_DNW1;
 8007dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8007dfc <LMIC_reset+0x94>)
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
	LMIC.ping.freq = FREQ_PING; // defaults for ping
 8007dda:	4b08      	ldr	r3, [pc, #32]	@ (8007dfc <LMIC_reset+0x94>)
 8007ddc:	4a08      	ldr	r2, [pc, #32]	@ (8007e00 <LMIC_reset+0x98>)
 8007dde:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
	LMIC.ping.dr = DR_PING;   // ditto
 8007de2:	4b06      	ldr	r3, [pc, #24]	@ (8007dfc <LMIC_reset+0x94>)
 8007de4:	2203      	movs	r2, #3
 8007de6:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
	LMIC.ping.intvExp = 0xFF;
 8007dea:	4b04      	ldr	r3, [pc, #16]	@ (8007dfc <LMIC_reset+0x94>)
 8007dec:	22ff      	movs	r2, #255	@ 0xff
 8007dee:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
#if defined(CFG_us915)
    initDefaultChannels();
#endif
	DO_DEVDB(LMIC.devaddr, devaddr);DO_DEVDB(LMIC.devNonce, devNonce);DO_DEVDB(LMIC.dn2Dr, dn2Dr);DO_DEVDB(LMIC.dn2Freq, dn2Freq);DO_DEVDB(LMIC.ping.freq, pingFreq);DO_DEVDB(LMIC.ping.dr, pingDr);DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
}
 8007df2:	bf00      	nop
 8007df4:	bd98      	pop	{r3, r4, r7, pc}
 8007df6:	bf00      	nop
 8007df8:	20000350 	.word	0x20000350
 8007dfc:	2000033c 	.word	0x2000033c
 8007e00:	33d3e608 	.word	0x33d3e608

08007e04 <LMIC_init>:

void LMIC_init(void)
{
 8007e04:	b480      	push	{r7}
 8007e06:	af00      	add	r7, sp, #0
	LMIC.opmode = OP_SHUTDOWN;
 8007e08:	4b04      	ldr	r3, [pc, #16]	@ (8007e1c <LMIC_init+0x18>)
 8007e0a:	2240      	movs	r2, #64	@ 0x40
 8007e0c:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
}
 8007e10:	bf00      	nop
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	2000033c 	.word	0x2000033c

08007e20 <LMIC_setTxData>:
	os_radio(RADIO_RST);
	engineUpdate();
}

void LMIC_setTxData(void)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	af00      	add	r7, sp, #0
	LMIC.opmode |= OP_TXDATA;
 8007e24:	4b0b      	ldr	r3, [pc, #44]	@ (8007e54 <LMIC_setTxData+0x34>)
 8007e26:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007e2a:	f043 0308 	orr.w	r3, r3, #8
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	4b08      	ldr	r3, [pc, #32]	@ (8007e54 <LMIC_setTxData+0x34>)
 8007e32:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	if ((LMIC.opmode & OP_JOINING) == 0)
 8007e36:	4b07      	ldr	r3, [pc, #28]	@ (8007e54 <LMIC_setTxData+0x34>)
 8007e38:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007e3c:	f003 0304 	and.w	r3, r3, #4
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d103      	bne.n	8007e4c <LMIC_setTxData+0x2c>
		LMIC.txCnt = 0;             // cancel any ongoing TX/RX retries
 8007e44:	4b03      	ldr	r3, [pc, #12]	@ (8007e54 <LMIC_setTxData+0x34>)
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	engineUpdate();
 8007e4c:	f7ff fdc2 	bl	80079d4 <engineUpdate>
}
 8007e50:	bf00      	nop
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	2000033c 	.word	0x2000033c

08007e58 <LMIC_setTxData2>:

//
int LMIC_setTxData2(u1_t port, xref2u1_t data, u1_t dlen, u1_t confirmed)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6039      	str	r1, [r7, #0]
 8007e60:	4611      	mov	r1, r2
 8007e62:	461a      	mov	r2, r3
 8007e64:	4603      	mov	r3, r0
 8007e66:	71fb      	strb	r3, [r7, #7]
 8007e68:	460b      	mov	r3, r1
 8007e6a:	71bb      	strb	r3, [r7, #6]
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	717b      	strb	r3, [r7, #5]
	if (dlen > SIZEOFEXPR(LMIC.pendTxData))
 8007e70:	79bb      	ldrb	r3, [r7, #6]
 8007e72:	2b34      	cmp	r3, #52	@ 0x34
 8007e74:	d902      	bls.n	8007e7c <LMIC_setTxData2+0x24>
		return -2;
 8007e76:	f06f 0301 	mvn.w	r3, #1
 8007e7a:	e017      	b.n	8007eac <LMIC_setTxData2+0x54>
	if (data != (xref2u1_t) 0)
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d005      	beq.n	8007e8e <LMIC_setTxData2+0x36>
		os_copyMem(LMIC.pendTxData, data, dlen);
 8007e82:	79bb      	ldrb	r3, [r7, #6]
 8007e84:	461a      	mov	r2, r3
 8007e86:	6839      	ldr	r1, [r7, #0]
 8007e88:	480a      	ldr	r0, [pc, #40]	@ (8007eb4 <LMIC_setTxData2+0x5c>)
 8007e8a:	f007 f94d 	bl	800f128 <memcpy>
	LMIC.pendTxConf = confirmed;
 8007e8e:	4a0a      	ldr	r2, [pc, #40]	@ (8007eb8 <LMIC_setTxData2+0x60>)
 8007e90:	797b      	ldrb	r3, [r7, #5]
 8007e92:	f882 30bb 	strb.w	r3, [r2, #187]	@ 0xbb
	LMIC.pendTxPort = port;
 8007e96:	4a08      	ldr	r2, [pc, #32]	@ (8007eb8 <LMIC_setTxData2+0x60>)
 8007e98:	79fb      	ldrb	r3, [r7, #7]
 8007e9a:	f882 30ba 	strb.w	r3, [r2, #186]	@ 0xba
	LMIC.pendTxLen = dlen;
 8007e9e:	4a06      	ldr	r2, [pc, #24]	@ (8007eb8 <LMIC_setTxData2+0x60>)
 8007ea0:	79bb      	ldrb	r3, [r7, #6]
 8007ea2:	f882 30bc 	strb.w	r3, [r2, #188]	@ 0xbc
	LMIC_setTxData();
 8007ea6:	f7ff ffbb 	bl	8007e20 <LMIC_setTxData>
	return 0;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3708      	adds	r7, #8
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	200003f9 	.word	0x200003f9
 8007eb8:	2000033c 	.word	0x2000033c

08007ebc <os_getArtEui>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// provide application router ID (8 bytes, LSBF)
void os_getArtEui(u1_t *buf)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
	memcpy(buf, APPEUI, 8);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4906      	ldr	r1, [pc, #24]	@ (8007ee0 <os_getArtEui+0x24>)
 8007ec8:	461a      	mov	r2, r3
 8007eca:	460b      	mov	r3, r1
 8007ecc:	cb03      	ldmia	r3!, {r0, r1}
 8007ece:	6010      	str	r0, [r2, #0]
 8007ed0:	6051      	str	r1, [r2, #4]
}
 8007ed2:	bf00      	nop
 8007ed4:	370c      	adds	r7, #12
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	08012ddc 	.word	0x08012ddc

08007ee4 <os_getDevEui>:

// provide device ID (8 bytes, LSBF)
void os_getDevEui(u1_t *buf)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
	memcpy(buf, DEVEUI, 8);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4906      	ldr	r1, [pc, #24]	@ (8007f08 <os_getDevEui+0x24>)
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	cb03      	ldmia	r3!, {r0, r1}
 8007ef6:	6010      	str	r0, [r2, #0]
 8007ef8:	6051      	str	r1, [r2, #4]
}
 8007efa:	bf00      	nop
 8007efc:	370c      	adds	r7, #12
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	08012de4 	.word	0x08012de4

08007f0c <os_getDevKey>:

// provide device key (16 bytes)
void os_getDevKey(u1_t *buf)
{
 8007f0c:	b4b0      	push	{r4, r5, r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
	memcpy(buf, DEVKEY, 16);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a06      	ldr	r2, [pc, #24]	@ (8007f30 <os_getDevKey+0x24>)
 8007f18:	461c      	mov	r4, r3
 8007f1a:	4615      	mov	r5, r2
 8007f1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f1e:	6020      	str	r0, [r4, #0]
 8007f20:	6061      	str	r1, [r4, #4]
 8007f22:	60a2      	str	r2, [r4, #8]
 8007f24:	60e3      	str	r3, [r4, #12]
}
 8007f26:	bf00      	nop
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bcb0      	pop	{r4, r5, r7}
 8007f2e:	4770      	bx	lr
 8007f30:	08012dec 	.word	0x08012dec

08007f34 <initsensor>:

void initsensor()
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	af00      	add	r7, sp, #0
	// Here you init your sensors
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8007f38:	217f      	movs	r1, #127	@ 0x7f
 8007f3a:	4802      	ldr	r0, [pc, #8]	@ (8007f44 <initsensor+0x10>)
 8007f3c:	f002 ffb8 	bl	800aeb0 <HAL_ADCEx_Calibration_Start>
}
 8007f40:	bf00      	nop
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	200000e0 	.word	0x200000e0

08007f48 <initsensor_bme>:

void initsensor_bme()
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	af00      	add	r7, sp, #0
	// Here you init your sensors
	bme68x_start(&data, &hi2c1);
 8007f4c:	4902      	ldr	r1, [pc, #8]	@ (8007f58 <initsensor_bme+0x10>)
 8007f4e:	4803      	ldr	r0, [pc, #12]	@ (8007f5c <initsensor_bme+0x14>)
 8007f50:	f7fb fee8 	bl	8003d24 <bme68x_start>
}
 8007f54:	bf00      	nop
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	200002e8 	.word	0x200002e8
 8007f5c:	200004f4 	.word	0x200004f4

08007f60 <initfunc>:

void initfunc(osjob_t *j)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
	// initialize sensor hardware
	initsensor();
 8007f68:	f7ff ffe4 	bl	8007f34 <initsensor>
	initsensor_bme();
 8007f6c:	f7ff ffec 	bl	8007f48 <initsensor_bme>
	// reset MAC state
	LMIC_reset();
 8007f70:	f7ff fefa 	bl	8007d68 <LMIC_reset>
	// start joining
	LMIC_startJoining();
 8007f74:	f7ff faa2 	bl	80074bc <LMIC_startJoining>
	// init done - onEvent() callback will be invoked...
}
 8007f78:	bf00      	nop
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <readsensor_bme>:
	u2_t value = temp; /// read from everything ...make your own sensor
	return value;
}

void readsensor_bme()
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	af00      	add	r7, sp, #0
	if (bme68x_single_measure(&data) == 0) {
 8007f84:	4807      	ldr	r0, [pc, #28]	@ (8007fa4 <readsensor_bme+0x24>)
 8007f86:	f7fb ff1d 	bl	8003dc4 <bme68x_single_measure>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d106      	bne.n	8007f9e <readsensor_bme+0x1e>
		// Measurement is successful, so continue with IAQ
		data.iaq_score = bme68x_iaq(); // Calculate IAQ
 8007f90:	f7fc f998 	bl	80042c4 <bme68x_iaq>
 8007f94:	eef0 7a40 	vmov.f32	s15, s0
 8007f98:	4b02      	ldr	r3, [pc, #8]	@ (8007fa4 <readsensor_bme+0x24>)
 8007f9a:	edc3 7a02 	vstr	s15, [r3, #8]
	} /// read from everything ...make your own sensor
}
 8007f9e:	bf00      	nop
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	200004f4 	.word	0x200004f4

08007fa8 <reportfunc_bme>:
}

static osjob_t reportjob_bme;
// report bme sensor value every minute
static void reportfunc_bme(osjob_t *j)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
	// read sensor
	readsensor_bme();
 8007fb0:	f7ff ffe6 	bl	8007f80 <readsensor_bme>

	debug_valfloat("T = ", data.temperature, 7);
 8007fb4:	4b3d      	ldr	r3, [pc, #244]	@ (80080ac <reportfunc_bme+0x104>)
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7f8 fabd 	bl	8000538 <__aeabi_f2d>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	2107      	movs	r1, #7
 8007fc4:	ec43 2b10 	vmov	d0, r2, r3
 8007fc8:	4839      	ldr	r0, [pc, #228]	@ (80080b0 <reportfunc_bme+0x108>)
 8007fca:	f7fc fb5b 	bl	8004684 <debug_valfloat>
	debug_valdec("IAQ = ", data.iaq_score);
 8007fce:	4b37      	ldr	r3, [pc, #220]	@ (80080ac <reportfunc_bme+0x104>)
 8007fd0:	edd3 7a02 	vldr	s15, [r3, #8]
 8007fd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007fd8:	ee17 1a90 	vmov	r1, s15
 8007fdc:	4835      	ldr	r0, [pc, #212]	@ (80080b4 <reportfunc_bme+0x10c>)
 8007fde:	f7fc fb7f 	bl	80046e0 <debug_valdec>
	debug_valfloat("h = ", data.humidity, 7);
 8007fe2:	4b32      	ldr	r3, [pc, #200]	@ (80080ac <reportfunc_bme+0x104>)
 8007fe4:	695b      	ldr	r3, [r3, #20]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7f8 faa6 	bl	8000538 <__aeabi_f2d>
 8007fec:	4602      	mov	r2, r0
 8007fee:	460b      	mov	r3, r1
 8007ff0:	2107      	movs	r1, #7
 8007ff2:	ec43 2b10 	vmov	d0, r2, r3
 8007ff6:	4830      	ldr	r0, [pc, #192]	@ (80080b8 <reportfunc_bme+0x110>)
 8007ff8:	f7fc fb44 	bl	8004684 <debug_valfloat>
	debug_valdec("w = ", n_temp);
 8007ffc:	4b2f      	ldr	r3, [pc, #188]	@ (80080bc <reportfunc_bme+0x114>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4619      	mov	r1, r3
 8008002:	482f      	ldr	r0, [pc, #188]	@ (80080c0 <reportfunc_bme+0x118>)
 8008004:	f7fc fb6c 	bl	80046e0 <debug_valdec>
	if (n_water < 700) {
 8008008:	4b2e      	ldr	r3, [pc, #184]	@ (80080c4 <reportfunc_bme+0x11c>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8008010:	d206      	bcs.n	8008020 <reportfunc_bme+0x78>
		HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_SET);
 8008012:	2201      	movs	r2, #1
 8008014:	2140      	movs	r1, #64	@ 0x40
 8008016:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800801a:	f003 fa57 	bl	800b4cc <HAL_GPIO_WritePin>
 800801e:	e005      	b.n	800802c <reportfunc_bme+0x84>
	} else {
		HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8008020:	2200      	movs	r2, #0
 8008022:	2140      	movs	r1, #64	@ 0x40
 8008024:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008028:	f003 fa50 	bl	800b4cc <HAL_GPIO_WritePin>
	}
	// prepare and schedule data for transmission
	cayenne_lpp_reset(&lpp_desc);
 800802c:	4826      	ldr	r0, [pc, #152]	@ (80080c8 <reportfunc_bme+0x120>)
 800802e:	f7fc f98f 	bl	8004350 <cayenne_lpp_reset>
	cayenne_lpp_add_temperature(&lpp_desc, 0, data.temperature);
 8008032:	4b1e      	ldr	r3, [pc, #120]	@ (80080ac <reportfunc_bme+0x104>)
 8008034:	edd3 7a03 	vldr	s15, [r3, #12]
 8008038:	eeb0 0a67 	vmov.f32	s0, s15
 800803c:	2100      	movs	r1, #0
 800803e:	4822      	ldr	r0, [pc, #136]	@ (80080c8 <reportfunc_bme+0x120>)
 8008040:	f7fc f9f8 	bl	8004434 <cayenne_lpp_add_temperature>
	cayenne_lpp_add_analog_output(&lpp_desc, 1, data.iaq_score);
 8008044:	4b19      	ldr	r3, [pc, #100]	@ (80080ac <reportfunc_bme+0x104>)
 8008046:	edd3 7a02 	vldr	s15, [r3, #8]
 800804a:	eeb0 0a67 	vmov.f32	s0, s15
 800804e:	2101      	movs	r1, #1
 8008050:	481d      	ldr	r0, [pc, #116]	@ (80080c8 <reportfunc_bme+0x120>)
 8008052:	f7fc f98f 	bl	8004374 <cayenne_lpp_add_analog_output>
	cayenne_lpp_add_analog_output(&lpp_desc, 2, data.humidity);
 8008056:	4b15      	ldr	r3, [pc, #84]	@ (80080ac <reportfunc_bme+0x104>)
 8008058:	edd3 7a05 	vldr	s15, [r3, #20]
 800805c:	eeb0 0a67 	vmov.f32	s0, s15
 8008060:	2102      	movs	r1, #2
 8008062:	4819      	ldr	r0, [pc, #100]	@ (80080c8 <reportfunc_bme+0x120>)
 8008064:	f7fc f986 	bl	8004374 <cayenne_lpp_add_analog_output>
	cayenne_lpp_add_analog_output(&lpp_desc, 3, n_temp);
 8008068:	4b14      	ldr	r3, [pc, #80]	@ (80080bc <reportfunc_bme+0x114>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	ee07 3a90 	vmov	s15, r3
 8008070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008074:	eeb0 0a67 	vmov.f32	s0, s15
 8008078:	2103      	movs	r1, #3
 800807a:	4813      	ldr	r0, [pc, #76]	@ (80080c8 <reportfunc_bme+0x120>)
 800807c:	f7fc f97a 	bl	8004374 <cayenne_lpp_add_analog_output>
	// La fonction LMIC_setTxData2 envoie
	LMIC_setTxData2(1, &lpp_desc, 4 * 4, 0);
 8008080:	2300      	movs	r3, #0
 8008082:	2210      	movs	r2, #16
 8008084:	4910      	ldr	r1, [pc, #64]	@ (80080c8 <reportfunc_bme+0x120>)
 8008086:	2001      	movs	r0, #1
 8008088:	f7ff fee6 	bl	8007e58 <LMIC_setTxData2>
	// la trame Lora : lpp_desc
	// (port 1, 2 bytes, unconfirmed)
	// reschedule job in 15 seconds
	os_setTimedCallback(j, os_getTime() + sec2osticks(15), reportfunc_bme);
 800808c:	f000 fa2c 	bl	80084e8 <os_getTime>
 8008090:	4603      	mov	r3, r0
 8008092:	f503 23ea 	add.w	r3, r3, #479232	@ 0x75000
 8008096:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800809a:	4a0c      	ldr	r2, [pc, #48]	@ (80080cc <reportfunc_bme+0x124>)
 800809c:	4619      	mov	r1, r3
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 fa8c 	bl	80085bc <os_setTimedCallback>
}
 80080a4:	bf00      	nop
 80080a6:	3708      	adds	r7, #8
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	200004f4 	.word	0x200004f4
 80080b0:	08011a54 	.word	0x08011a54
 80080b4:	08011a5c 	.word	0x08011a5c
 80080b8:	08011a64 	.word	0x08011a64
 80080bc:	200004e8 	.word	0x200004e8
 80080c0:	08011a6c 	.word	0x08011a6c
 80080c4:	200004f0 	.word	0x200004f0
 80080c8:	20000510 	.word	0x20000510
 80080cc:	08007fa9 	.word	0x08007fa9

080080d0 <blinkfunc>:
}

static osjob_t blinkjob;
static u1_t ledstate = 0;
static void blinkfunc(osjob_t *j)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
	// toggle LED
	ledstate = !ledstate;
 80080d8:	4b0e      	ldr	r3, [pc, #56]	@ (8008114 <blinkfunc+0x44>)
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	bf0c      	ite	eq
 80080e0:	2301      	moveq	r3, #1
 80080e2:	2300      	movne	r3, #0
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	461a      	mov	r2, r3
 80080e8:	4b0a      	ldr	r3, [pc, #40]	@ (8008114 <blinkfunc+0x44>)
 80080ea:	701a      	strb	r2, [r3, #0]
	debug_led(ledstate);
 80080ec:	4b09      	ldr	r3, [pc, #36]	@ (8008114 <blinkfunc+0x44>)
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7fc fa07 	bl	8004504 <debug_led>
	// reschedule blink job
	os_setTimedCallback(j, os_getTime() + ms2osticks(100), blinkfunc);
 80080f6:	f000 f9f7 	bl	80084e8 <os_getTime>
 80080fa:	4603      	mov	r3, r0
 80080fc:	f503 6348 	add.w	r3, r3, #3200	@ 0xc80
 8008100:	4a05      	ldr	r2, [pc, #20]	@ (8008118 <blinkfunc+0x48>)
 8008102:	4619      	mov	r1, r3
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 fa59 	bl	80085bc <os_setTimedCallback>
}
 800810a:	bf00      	nop
 800810c:	3708      	adds	r7, #8
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	20000554 	.word	0x20000554
 8008118:	080080d1 	.word	0x080080d1

0800811c <onEvent>:

//////////////////////////////////////////////////
// LMIC EVENT CALLBACK
//////////////////////////////////////////////////
void onEvent(ev_t ev)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	4603      	mov	r3, r0
 8008124:	71fb      	strb	r3, [r7, #7]
	debug_event(ev);
 8008126:	79fb      	ldrb	r3, [r7, #7]
 8008128:	4618      	mov	r0, r3
 800812a:	f7fc fb67 	bl	80047fc <debug_event>
	switch (ev) {
 800812e:	79fb      	ldrb	r3, [r7, #7]
 8008130:	3b01      	subs	r3, #1
 8008132:	2b0e      	cmp	r3, #14
 8008134:	f200 8093 	bhi.w	800825e <onEvent+0x142>
 8008138:	a201      	add	r2, pc, #4	@ (adr r2, 8008140 <onEvent+0x24>)
 800813a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813e:	bf00      	nop
 8008140:	080081a7 	.word	0x080081a7
 8008144:	080081af 	.word	0x080081af
 8008148:	080081b7 	.word	0x080081b7
 800814c:	080081bf 	.word	0x080081bf
 8008150:	0800817d 	.word	0x0800817d
 8008154:	0800818b 	.word	0x0800818b
 8008158:	080081c7 	.word	0x080081c7
 800815c:	0800819f 	.word	0x0800819f
 8008160:	080081cf 	.word	0x080081cf
 8008164:	080081d7 	.word	0x080081d7
 8008168:	08008237 	.word	0x08008237
 800816c:	0800823f 	.word	0x0800823f
 8008170:	08008247 	.word	0x08008247
 8008174:	0800824f 	.word	0x0800824f
 8008178:	08008257 	.word	0x08008257
	// network joined, session established
	case EV_JOINING:
		debug_str("try joining\r\n");
 800817c:	483c      	ldr	r0, [pc, #240]	@ (8008270 <onEvent+0x154>)
 800817e:	f7fc fa49 	bl	8004614 <debug_str>
		blinkfunc(&blinkjob);
 8008182:	483c      	ldr	r0, [pc, #240]	@ (8008274 <onEvent+0x158>)
 8008184:	f7ff ffa4 	bl	80080d0 <blinkfunc>
		break;
 8008188:	e06e      	b.n	8008268 <onEvent+0x14c>
	case EV_JOINED:
		// kick-off periodic sensor job
		os_clearCallback(&blinkjob);
 800818a:	483a      	ldr	r0, [pc, #232]	@ (8008274 <onEvent+0x158>)
 800818c:	f000 f9d2 	bl	8008534 <os_clearCallback>
		debug_led(1);
 8008190:	2001      	movs	r0, #1
 8008192:	f7fc f9b7 	bl	8004504 <debug_led>
		// reportfunc(&reportjob);
		reportfunc_bme(&reportjob_bme);
 8008196:	4838      	ldr	r0, [pc, #224]	@ (8008278 <onEvent+0x15c>)
 8008198:	f7ff ff06 	bl	8007fa8 <reportfunc_bme>
		break;
 800819c:	e064      	b.n	8008268 <onEvent+0x14c>
	case EV_JOIN_FAILED:
		debug_str("join failed\r\n");
 800819e:	4837      	ldr	r0, [pc, #220]	@ (800827c <onEvent+0x160>)
 80081a0:	f7fc fa38 	bl	8004614 <debug_str>
		break;
 80081a4:	e060      	b.n	8008268 <onEvent+0x14c>
	case EV_SCAN_TIMEOUT:
		debug_str("EV_SCAN_TIMEOUT\r\n");
 80081a6:	4836      	ldr	r0, [pc, #216]	@ (8008280 <onEvent+0x164>)
 80081a8:	f7fc fa34 	bl	8004614 <debug_str>
		break;
 80081ac:	e05c      	b.n	8008268 <onEvent+0x14c>
	case EV_BEACON_FOUND:
		debug_str("EV_BEACON_FOUND\r\n");
 80081ae:	4835      	ldr	r0, [pc, #212]	@ (8008284 <onEvent+0x168>)
 80081b0:	f7fc fa30 	bl	8004614 <debug_str>
		break;
 80081b4:	e058      	b.n	8008268 <onEvent+0x14c>
	case EV_BEACON_MISSED:
		debug_str("EV_BEACON_MISSED\r\n");
 80081b6:	4834      	ldr	r0, [pc, #208]	@ (8008288 <onEvent+0x16c>)
 80081b8:	f7fc fa2c 	bl	8004614 <debug_str>
		break;
 80081bc:	e054      	b.n	8008268 <onEvent+0x14c>
	case EV_BEACON_TRACKED:
		debug_str("EV_BEACON_TRACKED\r\n");
 80081be:	4833      	ldr	r0, [pc, #204]	@ (800828c <onEvent+0x170>)
 80081c0:	f7fc fa28 	bl	8004614 <debug_str>
		break;
 80081c4:	e050      	b.n	8008268 <onEvent+0x14c>
	case EV_RFU1:
		debug_str("EV_RFU1\r\n");
 80081c6:	4832      	ldr	r0, [pc, #200]	@ (8008290 <onEvent+0x174>)
 80081c8:	f7fc fa24 	bl	8004614 <debug_str>
		break;
 80081cc:	e04c      	b.n	8008268 <onEvent+0x14c>
	case EV_REJOIN_FAILED:
		debug_str("EV_REJOIN_FAILED\r\n");
 80081ce:	4831      	ldr	r0, [pc, #196]	@ (8008294 <onEvent+0x178>)
 80081d0:	f7fc fa20 	bl	8004614 <debug_str>
		break;
 80081d4:	e048      	b.n	8008268 <onEvent+0x14c>
	case EV_TXCOMPLETE:
		debug_str("EV_TXCOMPLETE (includes waiting for RX windows)\r\n");
 80081d6:	4830      	ldr	r0, [pc, #192]	@ (8008298 <onEvent+0x17c>)
 80081d8:	f7fc fa1c 	bl	8004614 <debug_str>
		if (LMIC.txrxFlags & TXRX_ACK)
 80081dc:	4b2f      	ldr	r3, [pc, #188]	@ (800829c <onEvent+0x180>)
 80081de:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 80081e2:	b25b      	sxtb	r3, r3
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	da02      	bge.n	80081ee <onEvent+0xd2>
			debug_str("Received ack\r\n");
 80081e8:	482d      	ldr	r0, [pc, #180]	@ (80082a0 <onEvent+0x184>)
 80081ea:	f7fc fa13 	bl	8004614 <debug_str>
		if (LMIC.dataLen) {
 80081ee:	4b2b      	ldr	r3, [pc, #172]	@ (800829c <onEvent+0x180>)
 80081f0:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d036      	beq.n	8008266 <onEvent+0x14a>
			debug_valdec("Received bytes of payload\r\n:", LMIC.dataLen);
 80081f8:	4b28      	ldr	r3, [pc, #160]	@ (800829c <onEvent+0x180>)
 80081fa:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80081fe:	4619      	mov	r1, r3
 8008200:	4828      	ldr	r0, [pc, #160]	@ (80082a4 <onEvent+0x188>)
 8008202:	f7fc fa6d 	bl	80046e0 <debug_valdec>
			debug_val("Data = :", LMIC.frame[LMIC.dataBeg]);
 8008206:	4b25      	ldr	r3, [pc, #148]	@ (800829c <onEvent+0x180>)
 8008208:	f893 3146 	ldrb.w	r3, [r3, #326]	@ 0x146
 800820c:	461a      	mov	r2, r3
 800820e:	4b23      	ldr	r3, [pc, #140]	@ (800829c <onEvent+0x180>)
 8008210:	4413      	add	r3, r2
 8008212:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8008216:	4619      	mov	r1, r3
 8008218:	4823      	ldr	r0, [pc, #140]	@ (80082a8 <onEvent+0x18c>)
 800821a:	f7fc fa4c 	bl	80046b6 <debug_val>
			debug_led(LMIC.frame[LMIC.dataBeg]);
 800821e:	4b1f      	ldr	r3, [pc, #124]	@ (800829c <onEvent+0x180>)
 8008220:	f893 3146 	ldrb.w	r3, [r3, #326]	@ 0x146
 8008224:	461a      	mov	r2, r3
 8008226:	4b1d      	ldr	r3, [pc, #116]	@ (800829c <onEvent+0x180>)
 8008228:	4413      	add	r3, r2
 800822a:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 800822e:	4618      	mov	r0, r3
 8008230:	f7fc f968 	bl	8004504 <debug_led>
		}
		break;
 8008234:	e017      	b.n	8008266 <onEvent+0x14a>
	case EV_LOST_TSYNC:
		debug_str("EV_LOST_TSYNC\r\n");
 8008236:	481d      	ldr	r0, [pc, #116]	@ (80082ac <onEvent+0x190>)
 8008238:	f7fc f9ec 	bl	8004614 <debug_str>
		break;
 800823c:	e014      	b.n	8008268 <onEvent+0x14c>
	case EV_RESET:
		debug_str("EV_RESET\r\n");
 800823e:	481c      	ldr	r0, [pc, #112]	@ (80082b0 <onEvent+0x194>)
 8008240:	f7fc f9e8 	bl	8004614 <debug_str>
		break;
 8008244:	e010      	b.n	8008268 <onEvent+0x14c>
	case EV_RXCOMPLETE:
		// data received in ping slot
		debug_str("EV_RXCOMPLETE\r\n");
 8008246:	481b      	ldr	r0, [pc, #108]	@ (80082b4 <onEvent+0x198>)
 8008248:	f7fc f9e4 	bl	8004614 <debug_str>
		break;
 800824c:	e00c      	b.n	8008268 <onEvent+0x14c>
	case EV_LINK_DEAD:
		debug_str("EV_LINK_DEAD\r\n");
 800824e:	481a      	ldr	r0, [pc, #104]	@ (80082b8 <onEvent+0x19c>)
 8008250:	f7fc f9e0 	bl	8004614 <debug_str>
		break;
 8008254:	e008      	b.n	8008268 <onEvent+0x14c>
	case EV_LINK_ALIVE:
		debug_str("EV_LINK_ALIVE\r\n");
 8008256:	4819      	ldr	r0, [pc, #100]	@ (80082bc <onEvent+0x1a0>)
 8008258:	f7fc f9dc 	bl	8004614 <debug_str>
		break;
 800825c:	e004      	b.n	8008268 <onEvent+0x14c>
	default:
		debug_str("Unknown event\r\n");
 800825e:	4818      	ldr	r0, [pc, #96]	@ (80082c0 <onEvent+0x1a4>)
 8008260:	f7fc f9d8 	bl	8004614 <debug_str>
		break;
 8008264:	e000      	b.n	8008268 <onEvent+0x14c>
		break;
 8008266:	bf00      	nop
	}
}
 8008268:	bf00      	nop
 800826a:	3708      	adds	r7, #8
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	08011a8c 	.word	0x08011a8c
 8008274:	20000548 	.word	0x20000548
 8008278:	2000053c 	.word	0x2000053c
 800827c:	08011a9c 	.word	0x08011a9c
 8008280:	08011aac 	.word	0x08011aac
 8008284:	08011ac0 	.word	0x08011ac0
 8008288:	08011ad4 	.word	0x08011ad4
 800828c:	08011ae8 	.word	0x08011ae8
 8008290:	08011afc 	.word	0x08011afc
 8008294:	08011b08 	.word	0x08011b08
 8008298:	08011b1c 	.word	0x08011b1c
 800829c:	2000033c 	.word	0x2000033c
 80082a0:	08011b50 	.word	0x08011b50
 80082a4:	08011b60 	.word	0x08011b60
 80082a8:	08011b80 	.word	0x08011b80
 80082ac:	08011b8c 	.word	0x08011b8c
 80082b0:	08011b9c 	.word	0x08011b9c
 80082b4:	08011ba8 	.word	0x08011ba8
 80082b8:	08011bb8 	.word	0x08011bb8
 80082bc:	08011bc8 	.word	0x08011bc8
 80082c0:	08011bd8 	.word	0x08011bd8

080082c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80082ca:	f001 fa98 	bl	80097fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80082ce:	f000 f841 	bl	8008354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80082d2:	f7fc fab1 	bl	8004838 <MX_GPIO_Init>
  MX_SPI3_Init();
 80082d6:	f000 ff59 	bl	800918c <MX_SPI3_Init>
  MX_TIM7_Init();
 80082da:	f001 f965 	bl	80095a8 <MX_TIM7_Init>
  MX_ADC1_Init();
 80082de:	f7f8 fe5d 	bl	8000f9c <MX_ADC1_Init>
  MX_TIM6_Init();
 80082e2:	f001 f929 	bl	8009538 <MX_TIM6_Init>
  MX_I2C1_Init();
 80082e6:	f7fc fcbb 	bl	8004c60 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80082ea:	f001 f9d7 	bl	800969c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim6);
 80082ee:	4815      	ldr	r0, [pc, #84]	@ (8008344 <main+0x80>)
 80082f0:	f005 fe2e 	bl	800df50 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);   // <----------- change to your setup
 80082f4:	4814      	ldr	r0, [pc, #80]	@ (8008348 <main+0x84>)
 80082f6:	f005 fe2b 	bl	800df50 <HAL_TIM_Base_Start_IT>
	__HAL_SPI_ENABLE(&hspi3);        // <----------- change to your setup
 80082fa:	4b14      	ldr	r3, [pc, #80]	@ (800834c <main+0x88>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	4b12      	ldr	r3, [pc, #72]	@ (800834c <main+0x88>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008308:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(Alim_temp_GPIO_Port, Alim_temp_Pin, GPIO_PIN_SET);
 800830a:	2201      	movs	r2, #1
 800830c:	2180      	movs	r1, #128	@ 0x80
 800830e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008312:	f003 f8db 	bl	800b4cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8008316:	2200      	movs	r2, #0
 8008318:	2140      	movs	r1, #64	@ 0x40
 800831a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800831e:	f003 f8d5 	bl	800b4cc <HAL_GPIO_WritePin>
	osjob_t initjob;
	// initialize runtime env
	os_init();
 8008322:	f000 f8cf 	bl	80084c4 <os_init>
	// initialize debug library
	debug_init();
 8008326:	f7fc f8e3 	bl	80044f0 <debug_init>
	// setup initial job
	os_setCallback(&initjob, initfunc);
 800832a:	1d3b      	adds	r3, r7, #4
 800832c:	4908      	ldr	r1, [pc, #32]	@ (8008350 <main+0x8c>)
 800832e:	4618      	mov	r0, r3
 8008330:	f000 f91e 	bl	8008570 <os_setCallback>
	// execute scheduled jobs and events
	os_runloop();
 8008334:	f000 f978 	bl	8008628 <os_runloop>
	// (not reached)
	return 0;
 8008338:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 800833a:	4618      	mov	r0, r3
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	200005d8 	.word	0x200005d8
 8008348:	20000624 	.word	0x20000624
 800834c:	20000570 	.word	0x20000570
 8008350:	08007f61 	.word	0x08007f61

08008354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b096      	sub	sp, #88	@ 0x58
 8008358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800835a:	f107 0314 	add.w	r3, r7, #20
 800835e:	2244      	movs	r2, #68	@ 0x44
 8008360:	2100      	movs	r1, #0
 8008362:	4618      	mov	r0, r3
 8008364:	f006 fe7e 	bl	800f064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008368:	463b      	mov	r3, r7
 800836a:	2200      	movs	r2, #0
 800836c:	601a      	str	r2, [r3, #0]
 800836e:	605a      	str	r2, [r3, #4]
 8008370:	609a      	str	r2, [r3, #8]
 8008372:	60da      	str	r2, [r3, #12]
 8008374:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8008376:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800837a:	f003 fff5 	bl	800c368 <HAL_PWREx_ControlVoltageScaling>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d001      	beq.n	8008388 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8008384:	f000 f898 	bl	80084b8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008388:	2302      	movs	r3, #2
 800838a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800838c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008390:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008392:	2310      	movs	r3, #16
 8008394:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008396:	2302      	movs	r3, #2
 8008398:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800839a:	2302      	movs	r3, #2
 800839c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800839e:	2301      	movs	r3, #1
 80083a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80083a2:	230a      	movs	r3, #10
 80083a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80083a6:	2307      	movs	r3, #7
 80083a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80083aa:	2302      	movs	r3, #2
 80083ac:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80083ae:	2302      	movs	r3, #2
 80083b0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80083b2:	f107 0314 	add.w	r3, r7, #20
 80083b6:	4618      	mov	r0, r3
 80083b8:	f004 f82c 	bl	800c414 <HAL_RCC_OscConfig>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d001      	beq.n	80083c6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80083c2:	f000 f879 	bl	80084b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80083c6:	230f      	movs	r3, #15
 80083c8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80083ca:	2303      	movs	r3, #3
 80083cc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80083ce:	2300      	movs	r3, #0
 80083d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80083d2:	2300      	movs	r3, #0
 80083d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80083d6:	2300      	movs	r3, #0
 80083d8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80083da:	463b      	mov	r3, r7
 80083dc:	2104      	movs	r1, #4
 80083de:	4618      	mov	r0, r3
 80083e0:	f004 fc2c 	bl	800cc3c <HAL_RCC_ClockConfig>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d001      	beq.n	80083ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80083ea:	f000 f865 	bl	80084b8 <Error_Handler>
  }
}
 80083ee:	bf00      	nop
 80083f0:	3758      	adds	r7, #88	@ 0x58
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
	...

080083f8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
	if (htim == &htim6) {
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4a09      	ldr	r2, [pc, #36]	@ (8008428 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d102      	bne.n	800840e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_ADC_Start_IT(&hadc1);
 8008408:	4808      	ldr	r0, [pc, #32]	@ (800842c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800840a:	f001 fdd3 	bl	8009fb4 <HAL_ADC_Start_IT>
	}
	if (htim->Instance == htim7.Instance) {
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	4b07      	ldr	r3, [pc, #28]	@ (8008430 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	429a      	cmp	r2, r3
 8008418:	d101      	bne.n	800841e <HAL_TIM_PeriodElapsedCallback+0x26>
		hal_ticksplusplus();
 800841a:	f7fc fb5d 	bl	8004ad8 <hal_ticksplusplus>
	}
}
 800841e:	bf00      	nop
 8008420:	3708      	adds	r7, #8
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	200005d8 	.word	0x200005d8
 800842c:	200000e0 	.word	0x200000e0
 8008430:	20000624 	.word	0x20000624

08008434 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4a19      	ldr	r2, [pc, #100]	@ (80084a4 <HAL_ADC_ConvCpltCallback+0x70>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d12b      	bne.n	800849c <HAL_ADC_ConvCpltCallback+0x68>
		static uint8_t conv_cnt = 0;
		if (conv_cnt == 0) {
 8008444:	4b18      	ldr	r3, [pc, #96]	@ (80084a8 <HAL_ADC_ConvCpltCallback+0x74>)
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d117      	bne.n	800847c <HAL_ADC_ConvCpltCallback+0x48>
			n_temp = HAL_ADC_GetValue(&hadc1);
 800844c:	4815      	ldr	r0, [pc, #84]	@ (80084a4 <HAL_ADC_ConvCpltCallback+0x70>)
 800844e:	f001 fe65 	bl	800a11c <HAL_ADC_GetValue>
 8008452:	4603      	mov	r3, r0
 8008454:	4a15      	ldr	r2, [pc, #84]	@ (80084ac <HAL_ADC_ConvCpltCallback+0x78>)
 8008456:	6013      	str	r3, [r2, #0]
			temp = 188686 - 147 * n_temp;
 8008458:	4b14      	ldr	r3, [pc, #80]	@ (80084ac <HAL_ADC_ConvCpltCallback+0x78>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2293      	movs	r2, #147	@ 0x93
 800845e:	fb02 f303 	mul.w	r3, r2, r3
 8008462:	f5c3 3338 	rsb	r3, r3, #188416	@ 0x2e000
 8008466:	f503 7387 	add.w	r3, r3, #270	@ 0x10e
 800846a:	4a11      	ldr	r2, [pc, #68]	@ (80084b0 <HAL_ADC_ConvCpltCallback+0x7c>)
 800846c:	6013      	str	r3, [r2, #0]
			conv_cnt++;
 800846e:	4b0e      	ldr	r3, [pc, #56]	@ (80084a8 <HAL_ADC_ConvCpltCallback+0x74>)
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	3301      	adds	r3, #1
 8008474:	b2da      	uxtb	r2, r3
 8008476:	4b0c      	ldr	r3, [pc, #48]	@ (80084a8 <HAL_ADC_ConvCpltCallback+0x74>)
 8008478:	701a      	strb	r2, [r3, #0]
		} else if (conv_cnt == 1) {
			n_water = HAL_ADC_GetValue(&hadc1);
			conv_cnt--;
		}
	}
}
 800847a:	e00f      	b.n	800849c <HAL_ADC_ConvCpltCallback+0x68>
		} else if (conv_cnt == 1) {
 800847c:	4b0a      	ldr	r3, [pc, #40]	@ (80084a8 <HAL_ADC_ConvCpltCallback+0x74>)
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	2b01      	cmp	r3, #1
 8008482:	d10b      	bne.n	800849c <HAL_ADC_ConvCpltCallback+0x68>
			n_water = HAL_ADC_GetValue(&hadc1);
 8008484:	4807      	ldr	r0, [pc, #28]	@ (80084a4 <HAL_ADC_ConvCpltCallback+0x70>)
 8008486:	f001 fe49 	bl	800a11c <HAL_ADC_GetValue>
 800848a:	4603      	mov	r3, r0
 800848c:	4a09      	ldr	r2, [pc, #36]	@ (80084b4 <HAL_ADC_ConvCpltCallback+0x80>)
 800848e:	6013      	str	r3, [r2, #0]
			conv_cnt--;
 8008490:	4b05      	ldr	r3, [pc, #20]	@ (80084a8 <HAL_ADC_ConvCpltCallback+0x74>)
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	3b01      	subs	r3, #1
 8008496:	b2da      	uxtb	r2, r3
 8008498:	4b03      	ldr	r3, [pc, #12]	@ (80084a8 <HAL_ADC_ConvCpltCallback+0x74>)
 800849a:	701a      	strb	r2, [r3, #0]
}
 800849c:	bf00      	nop
 800849e:	3708      	adds	r7, #8
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	200000e0 	.word	0x200000e0
 80084a8:	20000555 	.word	0x20000555
 80084ac:	200004e8 	.word	0x200004e8
 80084b0:	200004ec 	.word	0x200004ec
 80084b4:	200004f0 	.word	0x200004f0

080084b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80084b8:	b480      	push	{r7}
 80084ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80084bc:	b672      	cpsid	i
}
 80084be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80084c0:	bf00      	nop
 80084c2:	e7fd      	b.n	80084c0 <Error_Handler+0x8>

080084c4 <os_init>:
	osjob_t *scheduledjobs;
	osjob_t *runnablejobs;
} OS;

void os_init()
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	af00      	add	r7, sp, #0
	memset(&OS, 0x00, sizeof(OS));
 80084c8:	2208      	movs	r2, #8
 80084ca:	2100      	movs	r1, #0
 80084cc:	4805      	ldr	r0, [pc, #20]	@ (80084e4 <os_init+0x20>)
 80084ce:	f006 fdc9 	bl	800f064 <memset>
	hal_init();
 80084d2:	f7fc fba7 	bl	8004c24 <hal_init>
	radio_init();
 80084d6:	f000 fcbd 	bl	8008e54 <radio_init>
	LMIC_init();
 80084da:	f7ff fc93 	bl	8007e04 <LMIC_init>
}
 80084de:	bf00      	nop
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	20000558 	.word	0x20000558

080084e8 <os_getTime>:

ostime_t os_getTime()
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	af00      	add	r7, sp, #0
	return hal_ticks();
 80084ec:	f7fc fac4 	bl	8004a78 <hal_ticks>
 80084f0:	4603      	mov	r3, r0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <unlinkjob>:

// unlink job from queue, return if removed
static int unlinkjob(osjob_t **pnext, osjob_t *job)
{
 80084f6:	b480      	push	{r7}
 80084f8:	b083      	sub	sp, #12
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
 80084fe:	6039      	str	r1, [r7, #0]
	for (; *pnext; pnext = &((*pnext)->next)) {
 8008500:	e00d      	b.n	800851e <unlinkjob+0x28>
		if (*pnext == job) { // unlink
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	683a      	ldr	r2, [r7, #0]
 8008508:	429a      	cmp	r2, r3
 800850a:	d105      	bne.n	8008518 <unlinkjob+0x22>
			*pnext = job->next;
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	601a      	str	r2, [r3, #0]
			return 1;
 8008514:	2301      	movs	r3, #1
 8008516:	e007      	b.n	8008528 <unlinkjob+0x32>
	for (; *pnext; pnext = &((*pnext)->next)) {
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	607b      	str	r3, [r7, #4]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1ed      	bne.n	8008502 <unlinkjob+0xc>
		}
	}
	return 0;
 8008526:	2300      	movs	r3, #0
}
 8008528:	4618      	mov	r0, r3
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <os_clearCallback>:

// clear scheduled job
void os_clearCallback(osjob_t *job)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
	hal_disableIRQs();
 800853c:	f7fc fb46 	bl	8004bcc <hal_disableIRQs>
	unlinkjob(&OS.scheduledjobs, job) || unlinkjob(&OS.runnablejobs, job);
 8008540:	6879      	ldr	r1, [r7, #4]
 8008542:	4809      	ldr	r0, [pc, #36]	@ (8008568 <os_clearCallback+0x34>)
 8008544:	f7ff ffd7 	bl	80084f6 <unlinkjob>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d105      	bne.n	800855a <os_clearCallback+0x26>
 800854e:	6879      	ldr	r1, [r7, #4]
 8008550:	4806      	ldr	r0, [pc, #24]	@ (800856c <os_clearCallback+0x38>)
 8008552:	f7ff ffd0 	bl	80084f6 <unlinkjob>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
	hal_enableIRQs();
 800855a:	f7fc fb47 	bl	8004bec <hal_enableIRQs>
}
 800855e:	bf00      	nop
 8008560:	3708      	adds	r7, #8
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	20000558 	.word	0x20000558
 800856c:	2000055c 	.word	0x2000055c

08008570 <os_setCallback>:

// schedule immediately runnable job
void os_setCallback(osjob_t *job, osjobcb_t cb)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
	osjob_t **pnext;
	hal_disableIRQs();
 800857a:	f7fc fb27 	bl	8004bcc <hal_disableIRQs>
	// remove if job was already queued
	unlinkjob(&OS.runnablejobs, job);
 800857e:	6879      	ldr	r1, [r7, #4]
 8008580:	480d      	ldr	r0, [pc, #52]	@ (80085b8 <os_setCallback+0x48>)
 8008582:	f7ff ffb8 	bl	80084f6 <unlinkjob>
	// fill-in job
	job->func = cb;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	683a      	ldr	r2, [r7, #0]
 800858a:	609a      	str	r2, [r3, #8]
	job->next = NULL;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	601a      	str	r2, [r3, #0]
	// add to end of run queue
	for (pnext = &OS.runnablejobs; *pnext; pnext = &((*pnext)->next))
 8008592:	4b09      	ldr	r3, [pc, #36]	@ (80085b8 <os_setCallback+0x48>)
 8008594:	60fb      	str	r3, [r7, #12]
 8008596:	e002      	b.n	800859e <os_setCallback+0x2e>
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	60fb      	str	r3, [r7, #12]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1f8      	bne.n	8008598 <os_setCallback+0x28>
		;
	*pnext = job;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	601a      	str	r2, [r3, #0]
	hal_enableIRQs();
 80085ac:	f7fc fb1e 	bl	8004bec <hal_enableIRQs>
}
 80085b0:	bf00      	nop
 80085b2:	3710      	adds	r7, #16
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	2000055c 	.word	0x2000055c

080085bc <os_setTimedCallback>:

// schedule timed job
void os_setTimedCallback(osjob_t *job, ostime_t time, osjobcb_t cb)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b086      	sub	sp, #24
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]
	osjob_t **pnext;
	hal_disableIRQs();
 80085c8:	f7fc fb00 	bl	8004bcc <hal_disableIRQs>
	// remove if job was already queued
	unlinkjob(&OS.scheduledjobs, job);
 80085cc:	68f9      	ldr	r1, [r7, #12]
 80085ce:	4815      	ldr	r0, [pc, #84]	@ (8008624 <os_setTimedCallback+0x68>)
 80085d0:	f7ff ff91 	bl	80084f6 <unlinkjob>
	// fill-in job
	job->deadline = time;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	68ba      	ldr	r2, [r7, #8]
 80085d8:	605a      	str	r2, [r3, #4]
	job->func = cb;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	609a      	str	r2, [r3, #8]
	job->next = NULL;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2200      	movs	r2, #0
 80085e4:	601a      	str	r2, [r3, #0]
	// insert into schedule
	for (pnext = &OS.scheduledjobs; *pnext; pnext = &((*pnext)->next)) {
 80085e6:	4b0f      	ldr	r3, [pc, #60]	@ (8008624 <os_setTimedCallback+0x68>)
 80085e8:	617b      	str	r3, [r7, #20]
 80085ea:	e00e      	b.n	800860a <os_setTimedCallback+0x4e>
		if ((*pnext)->deadline - time > 0) { // (cmp diff, not abs!)
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	685a      	ldr	r2, [r3, #4]
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	1ad3      	subs	r3, r2, r3
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	dd04      	ble.n	8008604 <os_setTimedCallback+0x48>
			// enqueue before next element and stop
			job->next = *pnext;
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	601a      	str	r2, [r3, #0]
			break;
 8008602:	e006      	b.n	8008612 <os_setTimedCallback+0x56>
	for (pnext = &OS.scheduledjobs; *pnext; pnext = &((*pnext)->next)) {
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	617b      	str	r3, [r7, #20]
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1ec      	bne.n	80085ec <os_setTimedCallback+0x30>
		}
	}
	*pnext = job;
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	601a      	str	r2, [r3, #0]
	hal_enableIRQs();
 8008618:	f7fc fae8 	bl	8004bec <hal_enableIRQs>
}
 800861c:	bf00      	nop
 800861e:	3718      	adds	r7, #24
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	20000558 	.word	0x20000558

08008628 <os_runloop>:

// execute jobs from timer and from run queue
void os_runloop()
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
	while (1) {
		osjob_t *j = NULL;
 800862e:	2300      	movs	r3, #0
 8008630:	607b      	str	r3, [r7, #4]
		hal_disableIRQs();
 8008632:	f7fc facb 	bl	8004bcc <hal_disableIRQs>
		// check for runnable jobs
		if (OS.runnablejobs) {
 8008636:	4b16      	ldr	r3, [pc, #88]	@ (8008690 <os_runloop+0x68>)
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d007      	beq.n	800864e <os_runloop+0x26>
			j = OS.runnablejobs;
 800863e:	4b14      	ldr	r3, [pc, #80]	@ (8008690 <os_runloop+0x68>)
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	607b      	str	r3, [r7, #4]
			OS.runnablejobs = j->next;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a11      	ldr	r2, [pc, #68]	@ (8008690 <os_runloop+0x68>)
 800864a:	6053      	str	r3, [r2, #4]
 800864c:	e016      	b.n	800867c <os_runloop+0x54>
		} else if (OS.scheduledjobs
 800864e:	4b10      	ldr	r3, [pc, #64]	@ (8008690 <os_runloop+0x68>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d010      	beq.n	8008678 <os_runloop+0x50>
				&& hal_checkTimer(OS.scheduledjobs->deadline)) { // check for expired timed jobs
 8008656:	4b0e      	ldr	r3, [pc, #56]	@ (8008690 <os_runloop+0x68>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	4618      	mov	r0, r3
 800865e:	f7fc fa77 	bl	8004b50 <hal_checkTimer>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d007      	beq.n	8008678 <os_runloop+0x50>
			j = OS.scheduledjobs;
 8008668:	4b09      	ldr	r3, [pc, #36]	@ (8008690 <os_runloop+0x68>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	607b      	str	r3, [r7, #4]
			OS.scheduledjobs = j->next;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a07      	ldr	r2, [pc, #28]	@ (8008690 <os_runloop+0x68>)
 8008674:	6013      	str	r3, [r2, #0]
 8008676:	e001      	b.n	800867c <os_runloop+0x54>
		} else { // nothing pending
			hal_sleep(); // wake by irq (timer already restarted)
 8008678:	f7fc facc 	bl	8004c14 <hal_sleep>
		}
		hal_enableIRQs();
 800867c:	f7fc fab6 	bl	8004bec <hal_enableIRQs>
		if (j) { // run job callback
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d0d3      	beq.n	800862e <os_runloop+0x6>
			j->func(j);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	4798      	blx	r3
	while (1) {
 800868e:	e7ce      	b.n	800862e <os_runloop+0x6>
 8008690:	20000558 	.word	0x20000558

08008694 <writeReg>:
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif

static void writeReg(u1_t addr, u1_t data)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
 800869a:	4603      	mov	r3, r0
 800869c:	460a      	mov	r2, r1
 800869e:	71fb      	strb	r3, [r7, #7]
 80086a0:	4613      	mov	r3, r2
 80086a2:	71bb      	strb	r3, [r7, #6]
	hal_pin_nss(0);
 80086a4:	2000      	movs	r0, #0
 80086a6:	f7fc f95f 	bl	8004968 <hal_pin_nss>
	hal_spi(addr | 0x80);
 80086aa:	79fb      	ldrb	r3, [r7, #7]
 80086ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7fc f9ba 	bl	8004a2c <hal_spi>
	hal_spi(data);
 80086b8:	79bb      	ldrb	r3, [r7, #6]
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7fc f9b6 	bl	8004a2c <hal_spi>
	hal_pin_nss(1);
 80086c0:	2001      	movs	r0, #1
 80086c2:	f7fc f951 	bl	8004968 <hal_pin_nss>
}
 80086c6:	bf00      	nop
 80086c8:	3708      	adds	r7, #8
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <readReg>:

static u1_t readReg(u1_t addr)
{
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b084      	sub	sp, #16
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	4603      	mov	r3, r0
 80086d6:	71fb      	strb	r3, [r7, #7]
	hal_pin_nss(0);
 80086d8:	2000      	movs	r0, #0
 80086da:	f7fc f945 	bl	8004968 <hal_pin_nss>
	hal_spi(addr & 0x7F);
 80086de:	79fb      	ldrb	r3, [r7, #7]
 80086e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	4618      	mov	r0, r3
 80086e8:	f7fc f9a0 	bl	8004a2c <hal_spi>
	u1_t val = hal_spi(0x00);
 80086ec:	2000      	movs	r0, #0
 80086ee:	f7fc f99d 	bl	8004a2c <hal_spi>
 80086f2:	4603      	mov	r3, r0
 80086f4:	73fb      	strb	r3, [r7, #15]
	hal_pin_nss(1);
 80086f6:	2001      	movs	r0, #1
 80086f8:	f7fc f936 	bl	8004968 <hal_pin_nss>
	return val;
 80086fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <writeBuf>:

static void writeBuf(u1_t addr, xref2u1_t buf, u1_t len)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b084      	sub	sp, #16
 800870a:	af00      	add	r7, sp, #0
 800870c:	4603      	mov	r3, r0
 800870e:	6039      	str	r1, [r7, #0]
 8008710:	71fb      	strb	r3, [r7, #7]
 8008712:	4613      	mov	r3, r2
 8008714:	71bb      	strb	r3, [r7, #6]
	hal_pin_nss(0);
 8008716:	2000      	movs	r0, #0
 8008718:	f7fc f926 	bl	8004968 <hal_pin_nss>
	hal_spi(addr | 0x80);
 800871c:	79fb      	ldrb	r3, [r7, #7]
 800871e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008722:	b2db      	uxtb	r3, r3
 8008724:	4618      	mov	r0, r3
 8008726:	f7fc f981 	bl	8004a2c <hal_spi>
	for (u1_t i = 0; i < len; i++) {
 800872a:	2300      	movs	r3, #0
 800872c:	73fb      	strb	r3, [r7, #15]
 800872e:	e009      	b.n	8008744 <writeBuf+0x3e>
		hal_spi(buf[i]);
 8008730:	7bfb      	ldrb	r3, [r7, #15]
 8008732:	683a      	ldr	r2, [r7, #0]
 8008734:	4413      	add	r3, r2
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	4618      	mov	r0, r3
 800873a:	f7fc f977 	bl	8004a2c <hal_spi>
	for (u1_t i = 0; i < len; i++) {
 800873e:	7bfb      	ldrb	r3, [r7, #15]
 8008740:	3301      	adds	r3, #1
 8008742:	73fb      	strb	r3, [r7, #15]
 8008744:	7bfa      	ldrb	r2, [r7, #15]
 8008746:	79bb      	ldrb	r3, [r7, #6]
 8008748:	429a      	cmp	r2, r3
 800874a:	d3f1      	bcc.n	8008730 <writeBuf+0x2a>
	}
	hal_pin_nss(1);
 800874c:	2001      	movs	r0, #1
 800874e:	f7fc f90b 	bl	8004968 <hal_pin_nss>
}
 8008752:	bf00      	nop
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <readBuf>:

static void readBuf(u1_t addr, xref2u1_t buf, u1_t len)
{
 800875a:	b590      	push	{r4, r7, lr}
 800875c:	b085      	sub	sp, #20
 800875e:	af00      	add	r7, sp, #0
 8008760:	4603      	mov	r3, r0
 8008762:	6039      	str	r1, [r7, #0]
 8008764:	71fb      	strb	r3, [r7, #7]
 8008766:	4613      	mov	r3, r2
 8008768:	71bb      	strb	r3, [r7, #6]
	hal_pin_nss(0);
 800876a:	2000      	movs	r0, #0
 800876c:	f7fc f8fc 	bl	8004968 <hal_pin_nss>
	hal_spi(addr & 0x7F);
 8008770:	79fb      	ldrb	r3, [r7, #7]
 8008772:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008776:	b2db      	uxtb	r3, r3
 8008778:	4618      	mov	r0, r3
 800877a:	f7fc f957 	bl	8004a2c <hal_spi>
	for (u1_t i = 0; i < len; i++) {
 800877e:	2300      	movs	r3, #0
 8008780:	73fb      	strb	r3, [r7, #15]
 8008782:	e00a      	b.n	800879a <readBuf+0x40>
		buf[i] = hal_spi(0x00);
 8008784:	7bfb      	ldrb	r3, [r7, #15]
 8008786:	683a      	ldr	r2, [r7, #0]
 8008788:	18d4      	adds	r4, r2, r3
 800878a:	2000      	movs	r0, #0
 800878c:	f7fc f94e 	bl	8004a2c <hal_spi>
 8008790:	4603      	mov	r3, r0
 8008792:	7023      	strb	r3, [r4, #0]
	for (u1_t i = 0; i < len; i++) {
 8008794:	7bfb      	ldrb	r3, [r7, #15]
 8008796:	3301      	adds	r3, #1
 8008798:	73fb      	strb	r3, [r7, #15]
 800879a:	7bfa      	ldrb	r2, [r7, #15]
 800879c:	79bb      	ldrb	r3, [r7, #6]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d3f0      	bcc.n	8008784 <readBuf+0x2a>
	}
	hal_pin_nss(1);
 80087a2:	2001      	movs	r0, #1
 80087a4:	f7fc f8e0 	bl	8004968 <hal_pin_nss>
}
 80087a8:	bf00      	nop
 80087aa:	3714      	adds	r7, #20
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd90      	pop	{r4, r7, pc}

080087b0 <opmode>:

static void opmode(u1_t mode)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	4603      	mov	r3, r0
 80087b8:	71fb      	strb	r3, [r7, #7]
	writeReg(RegOpMode, (readReg(RegOpMode) & ~OPMODE_MASK) | mode);
 80087ba:	2001      	movs	r0, #1
 80087bc:	f7ff ff87 	bl	80086ce <readReg>
 80087c0:	4603      	mov	r3, r0
 80087c2:	b25b      	sxtb	r3, r3
 80087c4:	f023 0307 	bic.w	r3, r3, #7
 80087c8:	b25a      	sxtb	r2, r3
 80087ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087ce:	4313      	orrs	r3, r2
 80087d0:	b25b      	sxtb	r3, r3
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	4619      	mov	r1, r3
 80087d6:	2001      	movs	r0, #1
 80087d8:	f7ff ff5c 	bl	8008694 <writeReg>
}
 80087dc:	bf00      	nop
 80087de:	3708      	adds	r7, #8
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <opmodeLora>:

static void opmodeLora()
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
	u1_t u = OPMODE_LORA;
 80087ea:	2380      	movs	r3, #128	@ 0x80
 80087ec:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
	u |= 0x8;   // TBD: sx1276 high freq
 80087ee:	79fb      	ldrb	r3, [r7, #7]
 80087f0:	f043 0308 	orr.w	r3, r3, #8
 80087f4:	71fb      	strb	r3, [r7, #7]
#endif
	writeReg(RegOpMode, u);
 80087f6:	79fb      	ldrb	r3, [r7, #7]
 80087f8:	4619      	mov	r1, r3
 80087fa:	2001      	movs	r0, #1
 80087fc:	f7ff ff4a 	bl	8008694 <writeReg>
}
 8008800:	bf00      	nop
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <opmodeFSK>:

static void opmodeFSK()
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
	u1_t u = 0;
 800880e:	2300      	movs	r3, #0
 8008810:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
	u |= 0x8;   // TBD: sx1276 high freq
 8008812:	79fb      	ldrb	r3, [r7, #7]
 8008814:	f043 0308 	orr.w	r3, r3, #8
 8008818:	71fb      	strb	r3, [r7, #7]
#endif
	writeReg(RegOpMode, u);
 800881a:	79fb      	ldrb	r3, [r7, #7]
 800881c:	4619      	mov	r1, r3
 800881e:	2001      	movs	r0, #1
 8008820:	f7ff ff38 	bl	8008694 <writeReg>
}
 8008824:	bf00      	nop
 8008826:	3708      	adds	r7, #8
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <configLoraModem>:

// configure LoRa modem (cfg1, cfg2)
static void configLoraModem()
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
	sf_t sf = getSf(LMIC.rps);
 8008832:	4b54      	ldr	r3, [pc, #336]	@ (8008984 <configLoraModem+0x158>)
 8008834:	89db      	ldrh	r3, [r3, #14]
 8008836:	4618      	mov	r0, r3
 8008838:	f7fc faaa 	bl	8004d90 <getSf>
 800883c:	4603      	mov	r3, r0
 800883e:	713b      	strb	r3, [r7, #4]

#ifdef CFG_sx1276_radio
	u1_t mc1 = 0, mc2 = 0, mc3 = 0;
 8008840:	2300      	movs	r3, #0
 8008842:	71fb      	strb	r3, [r7, #7]
 8008844:	2300      	movs	r3, #0
 8008846:	71bb      	strb	r3, [r7, #6]
 8008848:	2300      	movs	r3, #0
 800884a:	717b      	strb	r3, [r7, #5]

	switch (getBw(LMIC.rps)) {
 800884c:	4b4d      	ldr	r3, [pc, #308]	@ (8008984 <configLoraModem+0x158>)
 800884e:	89db      	ldrh	r3, [r3, #14]
 8008850:	4618      	mov	r0, r3
 8008852:	f7fc faad 	bl	8004db0 <getBw>
 8008856:	4603      	mov	r3, r0
 8008858:	2b02      	cmp	r3, #2
 800885a:	d010      	beq.n	800887e <configLoraModem+0x52>
 800885c:	2b02      	cmp	r3, #2
 800885e:	dc13      	bgt.n	8008888 <configLoraModem+0x5c>
 8008860:	2b00      	cmp	r3, #0
 8008862:	d002      	beq.n	800886a <configLoraModem+0x3e>
 8008864:	2b01      	cmp	r3, #1
 8008866:	d005      	beq.n	8008874 <configLoraModem+0x48>
 8008868:	e00e      	b.n	8008888 <configLoraModem+0x5c>
	case BW125:
		mc1 |= SX1276_MC1_BW_125;
 800886a:	79fb      	ldrb	r3, [r7, #7]
 800886c:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8008870:	71fb      	strb	r3, [r7, #7]
		break;
 8008872:	e00b      	b.n	800888c <configLoraModem+0x60>
	case BW250:
		mc1 |= SX1276_MC1_BW_250;
 8008874:	79fb      	ldrb	r3, [r7, #7]
 8008876:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800887a:	71fb      	strb	r3, [r7, #7]
		break;
 800887c:	e006      	b.n	800888c <configLoraModem+0x60>
	case BW500:
		mc1 |= SX1276_MC1_BW_500;
 800887e:	79fb      	ldrb	r3, [r7, #7]
 8008880:	f063 036f 	orn	r3, r3, #111	@ 0x6f
 8008884:	71fb      	strb	r3, [r7, #7]
		break;
 8008886:	e001      	b.n	800888c <configLoraModem+0x60>
	default:
		ASSERT(0);
 8008888:	f7fc f9e2 	bl	8004c50 <hal_failed>
	}
	switch (getCr(LMIC.rps)) {
 800888c:	4b3d      	ldr	r3, [pc, #244]	@ (8008984 <configLoraModem+0x158>)
 800888e:	89db      	ldrh	r3, [r3, #14]
 8008890:	4618      	mov	r0, r3
 8008892:	f7fc fa9f 	bl	8004dd4 <getCr>
 8008896:	4603      	mov	r3, r0
 8008898:	2b03      	cmp	r3, #3
 800889a:	d81f      	bhi.n	80088dc <configLoraModem+0xb0>
 800889c:	a201      	add	r2, pc, #4	@ (adr r2, 80088a4 <configLoraModem+0x78>)
 800889e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a2:	bf00      	nop
 80088a4:	080088b5 	.word	0x080088b5
 80088a8:	080088bf 	.word	0x080088bf
 80088ac:	080088c9 	.word	0x080088c9
 80088b0:	080088d3 	.word	0x080088d3
	case CR_4_5:
		mc1 |= SX1276_MC1_CR_4_5;
 80088b4:	79fb      	ldrb	r3, [r7, #7]
 80088b6:	f043 0302 	orr.w	r3, r3, #2
 80088ba:	71fb      	strb	r3, [r7, #7]
		break;
 80088bc:	e010      	b.n	80088e0 <configLoraModem+0xb4>
	case CR_4_6:
		mc1 |= SX1276_MC1_CR_4_6;
 80088be:	79fb      	ldrb	r3, [r7, #7]
 80088c0:	f043 0304 	orr.w	r3, r3, #4
 80088c4:	71fb      	strb	r3, [r7, #7]
		break;
 80088c6:	e00b      	b.n	80088e0 <configLoraModem+0xb4>
	case CR_4_7:
		mc1 |= SX1276_MC1_CR_4_7;
 80088c8:	79fb      	ldrb	r3, [r7, #7]
 80088ca:	f043 0306 	orr.w	r3, r3, #6
 80088ce:	71fb      	strb	r3, [r7, #7]
		break;
 80088d0:	e006      	b.n	80088e0 <configLoraModem+0xb4>
	case CR_4_8:
		mc1 |= SX1276_MC1_CR_4_8;
 80088d2:	79fb      	ldrb	r3, [r7, #7]
 80088d4:	f043 0308 	orr.w	r3, r3, #8
 80088d8:	71fb      	strb	r3, [r7, #7]
		break;
 80088da:	e001      	b.n	80088e0 <configLoraModem+0xb4>
	default:
		ASSERT(0);
 80088dc:	f7fc f9b8 	bl	8004c50 <hal_failed>
	}

	if (getIh(LMIC.rps)) {
 80088e0:	4b28      	ldr	r3, [pc, #160]	@ (8008984 <configLoraModem+0x158>)
 80088e2:	89db      	ldrh	r3, [r3, #14]
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7fc fac7 	bl	8004e78 <getIh>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d00e      	beq.n	800890e <configLoraModem+0xe2>
		mc1 |= SX1276_MC1_IMPLICIT_HEADER_MODE_ON;
 80088f0:	79fb      	ldrb	r3, [r7, #7]
 80088f2:	f043 0301 	orr.w	r3, r3, #1
 80088f6:	71fb      	strb	r3, [r7, #7]
		writeReg(LORARegPayloadLength, getIh(LMIC.rps)); // required length
 80088f8:	4b22      	ldr	r3, [pc, #136]	@ (8008984 <configLoraModem+0x158>)
 80088fa:	89db      	ldrh	r3, [r3, #14]
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7fc fabb 	bl	8004e78 <getIh>
 8008902:	4603      	mov	r3, r0
 8008904:	b2db      	uxtb	r3, r3
 8008906:	4619      	mov	r1, r3
 8008908:	2022      	movs	r0, #34	@ 0x22
 800890a:	f7ff fec3 	bl	8008694 <writeReg>
	}
	// set ModemConfig1
	writeReg(LORARegModemConfig1, mc1);
 800890e:	79fb      	ldrb	r3, [r7, #7]
 8008910:	4619      	mov	r1, r3
 8008912:	201d      	movs	r0, #29
 8008914:	f7ff febe 	bl	8008694 <writeReg>

	mc2 = (SX1272_MC2_SF7 + ((sf - 1) << 4));
 8008918:	793b      	ldrb	r3, [r7, #4]
 800891a:	3b01      	subs	r3, #1
 800891c:	b2db      	uxtb	r3, r3
 800891e:	011b      	lsls	r3, r3, #4
 8008920:	b2db      	uxtb	r3, r3
 8008922:	3370      	adds	r3, #112	@ 0x70
 8008924:	71bb      	strb	r3, [r7, #6]
	if (getNocrc(LMIC.rps) == 0) {
 8008926:	4b17      	ldr	r3, [pc, #92]	@ (8008984 <configLoraModem+0x158>)
 8008928:	89db      	ldrh	r3, [r3, #14]
 800892a:	4618      	mov	r0, r3
 800892c:	f7fc fa7d 	bl	8004e2a <getNocrc>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d103      	bne.n	800893e <configLoraModem+0x112>
		mc2 |= SX1276_MC2_RX_PAYLOAD_CRCON;
 8008936:	79bb      	ldrb	r3, [r7, #6]
 8008938:	f043 0304 	orr.w	r3, r3, #4
 800893c:	71bb      	strb	r3, [r7, #6]
	}
	writeReg(LORARegModemConfig2, mc2);
 800893e:	79bb      	ldrb	r3, [r7, #6]
 8008940:	4619      	mov	r1, r3
 8008942:	201e      	movs	r0, #30
 8008944:	f7ff fea6 	bl	8008694 <writeReg>

	mc3 = SX1276_MC3_AGCAUTO;
 8008948:	2304      	movs	r3, #4
 800894a:	717b      	strb	r3, [r7, #5]
	if ((sf == SF11 || sf == SF12) && getBw(LMIC.rps) == BW125) {
 800894c:	793b      	ldrb	r3, [r7, #4]
 800894e:	2b05      	cmp	r3, #5
 8008950:	d002      	beq.n	8008958 <configLoraModem+0x12c>
 8008952:	793b      	ldrb	r3, [r7, #4]
 8008954:	2b06      	cmp	r3, #6
 8008956:	d10b      	bne.n	8008970 <configLoraModem+0x144>
 8008958:	4b0a      	ldr	r3, [pc, #40]	@ (8008984 <configLoraModem+0x158>)
 800895a:	89db      	ldrh	r3, [r3, #14]
 800895c:	4618      	mov	r0, r3
 800895e:	f7fc fa27 	bl	8004db0 <getBw>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d103      	bne.n	8008970 <configLoraModem+0x144>
		mc3 |= SX1276_MC3_LOW_DATA_RATE_OPTIMIZE;
 8008968:	797b      	ldrb	r3, [r7, #5]
 800896a:	f043 0308 	orr.w	r3, r3, #8
 800896e:	717b      	strb	r3, [r7, #5]
	}
	writeReg(LORARegModemConfig3, mc3);
 8008970:	797b      	ldrb	r3, [r7, #5]
 8008972:	4619      	mov	r1, r3
 8008974:	2026      	movs	r0, #38	@ 0x26
 8008976:	f7ff fe8d 	bl	8008694 <writeReg>
#endif

#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 800897a:	bf00      	nop
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	2000033c 	.word	0x2000033c

08008988 <configChannel>:

static void configChannel()
{
 8008988:	b5b0      	push	{r4, r5, r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
	// set frequency: FQ = (FRF * 32 Mhz) / (2 ^ 19)
	u8_t frf = ((u8_t) LMIC.freq << 19) / 32000000;
 800898e:	4c1b      	ldr	r4, [pc, #108]	@ (80089fc <configChannel+0x74>)
 8008990:	68a4      	ldr	r4, [r4, #8]
 8008992:	2500      	movs	r5, #0
 8008994:	4622      	mov	r2, r4
 8008996:	462b      	mov	r3, r5
 8008998:	0b51      	lsrs	r1, r2, #13
 800899a:	04d0      	lsls	r0, r2, #19
 800899c:	4a18      	ldr	r2, [pc, #96]	@ (8008a00 <configChannel+0x78>)
 800899e:	f04f 0300 	mov.w	r3, #0
 80089a2:	f7f8 f983 	bl	8000cac <__aeabi_uldivmod>
 80089a6:	4602      	mov	r2, r0
 80089a8:	460b      	mov	r3, r1
 80089aa:	e9c7 2300 	strd	r2, r3, [r7]
	writeReg(RegFrfMsb, (u1_t) (frf >> 16));
 80089ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089b2:	f04f 0200 	mov.w	r2, #0
 80089b6:	f04f 0300 	mov.w	r3, #0
 80089ba:	0c02      	lsrs	r2, r0, #16
 80089bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80089c0:	0c0b      	lsrs	r3, r1, #16
 80089c2:	b2d3      	uxtb	r3, r2
 80089c4:	4619      	mov	r1, r3
 80089c6:	2006      	movs	r0, #6
 80089c8:	f7ff fe64 	bl	8008694 <writeReg>
	writeReg(RegFrfMid, (u1_t) (frf >> 8));
 80089cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089d0:	f04f 0200 	mov.w	r2, #0
 80089d4:	f04f 0300 	mov.w	r3, #0
 80089d8:	0a02      	lsrs	r2, r0, #8
 80089da:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80089de:	0a0b      	lsrs	r3, r1, #8
 80089e0:	b2d3      	uxtb	r3, r2
 80089e2:	4619      	mov	r1, r3
 80089e4:	2007      	movs	r0, #7
 80089e6:	f7ff fe55 	bl	8008694 <writeReg>
	writeReg(RegFrfLsb, (u1_t) (frf >> 0));
 80089ea:	783b      	ldrb	r3, [r7, #0]
 80089ec:	4619      	mov	r1, r3
 80089ee:	2008      	movs	r0, #8
 80089f0:	f7ff fe50 	bl	8008694 <writeReg>
}
 80089f4:	bf00      	nop
 80089f6:	3708      	adds	r7, #8
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bdb0      	pop	{r4, r5, r7, pc}
 80089fc:	2000033c 	.word	0x2000033c
 8008a00:	01e84800 	.word	0x01e84800

08008a04 <configPower>:

static void configPower()
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
#ifdef CFG_sx1276_radio
	// no boost used for now
	s1_t pw = (s1_t) LMIC.txpow;
 8008a0a:	4b15      	ldr	r3, [pc, #84]	@ (8008a60 <configPower+0x5c>)
 8008a0c:	7c9b      	ldrb	r3, [r3, #18]
 8008a0e:	71fb      	strb	r3, [r7, #7]
	if (pw >= 17) {
 8008a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a14:	2b10      	cmp	r3, #16
 8008a16:	dd02      	ble.n	8008a1e <configPower+0x1a>
		pw = 15;
 8008a18:	230f      	movs	r3, #15
 8008a1a:	71fb      	strb	r3, [r7, #7]
 8008a1c:	e005      	b.n	8008a2a <configPower+0x26>
	} else if (pw < 2) {
 8008a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	dc01      	bgt.n	8008a2a <configPower+0x26>
		pw = 2;
 8008a26:	2302      	movs	r3, #2
 8008a28:	71fb      	strb	r3, [r7, #7]
	}
	// check board type for BOOST pin
	writeReg(RegPaConfig, (u1_t) (0x80 | (pw & 0xf)));
 8008a2a:	79fb      	ldrb	r3, [r7, #7]
 8008a2c:	f003 030f 	and.w	r3, r3, #15
 8008a30:	b25b      	sxtb	r3, r3
 8008a32:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008a36:	b25b      	sxtb	r3, r3
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	2009      	movs	r0, #9
 8008a3e:	f7ff fe29 	bl	8008694 <writeReg>
	writeReg(RegPaDac, readReg(RegPaDac) | 0x4);
 8008a42:	205a      	movs	r0, #90	@ 0x5a
 8008a44:	f7ff fe43 	bl	80086ce <readReg>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	f043 0304 	orr.w	r3, r3, #4
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	4619      	mov	r1, r3
 8008a52:	205a      	movs	r0, #90	@ 0x5a
 8008a54:	f7ff fe1e 	bl	8008694 <writeReg>
    }
    writeReg(RegPaConfig, (u1_t)(0x80|(pw-2)));
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 8008a58:	bf00      	nop
 8008a5a:	3708      	adds	r7, #8
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	2000033c 	.word	0x2000033c

08008a64 <txfsk>:

static void txfsk()
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	af00      	add	r7, sp, #0
	// select FSK modem (from sleep mode)
	writeReg(RegOpMode, 0x10); // FSK, BT=0.5
 8008a68:	2110      	movs	r1, #16
 8008a6a:	2001      	movs	r0, #1
 8008a6c:	f7ff fe12 	bl	8008694 <writeReg>
	ASSERT(readReg(RegOpMode) == 0x10);
 8008a70:	2001      	movs	r0, #1
 8008a72:	f7ff fe2c 	bl	80086ce <readReg>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b10      	cmp	r3, #16
 8008a7a:	d001      	beq.n	8008a80 <txfsk+0x1c>
 8008a7c:	f7fc f8e8 	bl	8004c50 <hal_failed>
	// enter standby mode (required for FIFO loading))
	opmode(OPMODE_STANDBY);
 8008a80:	2001      	movs	r0, #1
 8008a82:	f7ff fe95 	bl	80087b0 <opmode>
	// set bitrate
	writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 8008a86:	2102      	movs	r1, #2
 8008a88:	2002      	movs	r0, #2
 8008a8a:	f7ff fe03 	bl	8008694 <writeReg>
	writeReg(FSKRegBitrateLsb, 0x80);
 8008a8e:	2180      	movs	r1, #128	@ 0x80
 8008a90:	2003      	movs	r0, #3
 8008a92:	f7ff fdff 	bl	8008694 <writeReg>
	// set frequency deviation
	writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 8008a96:	2101      	movs	r1, #1
 8008a98:	2004      	movs	r0, #4
 8008a9a:	f7ff fdfb 	bl	8008694 <writeReg>
	writeReg(FSKRegFdevLsb, 0x99);
 8008a9e:	2199      	movs	r1, #153	@ 0x99
 8008aa0:	2005      	movs	r0, #5
 8008aa2:	f7ff fdf7 	bl	8008694 <writeReg>
	// frame and packet handler settings
	writeReg(FSKRegPreambleMsb, 0x00);
 8008aa6:	2100      	movs	r1, #0
 8008aa8:	2025      	movs	r0, #37	@ 0x25
 8008aaa:	f7ff fdf3 	bl	8008694 <writeReg>
	writeReg(FSKRegPreambleLsb, 0x05);
 8008aae:	2105      	movs	r1, #5
 8008ab0:	2026      	movs	r0, #38	@ 0x26
 8008ab2:	f7ff fdef 	bl	8008694 <writeReg>
	writeReg(FSKRegSyncConfig, 0x12);
 8008ab6:	2112      	movs	r1, #18
 8008ab8:	2027      	movs	r0, #39	@ 0x27
 8008aba:	f7ff fdeb 	bl	8008694 <writeReg>
	writeReg(FSKRegPacketConfig1, 0xD0);
 8008abe:	21d0      	movs	r1, #208	@ 0xd0
 8008ac0:	2030      	movs	r0, #48	@ 0x30
 8008ac2:	f7ff fde7 	bl	8008694 <writeReg>
	writeReg(FSKRegPacketConfig2, 0x40);
 8008ac6:	2140      	movs	r1, #64	@ 0x40
 8008ac8:	2031      	movs	r0, #49	@ 0x31
 8008aca:	f7ff fde3 	bl	8008694 <writeReg>
	writeReg(FSKRegSyncValue1, 0xC1);
 8008ace:	21c1      	movs	r1, #193	@ 0xc1
 8008ad0:	2028      	movs	r0, #40	@ 0x28
 8008ad2:	f7ff fddf 	bl	8008694 <writeReg>
	writeReg(FSKRegSyncValue2, 0x94);
 8008ad6:	2194      	movs	r1, #148	@ 0x94
 8008ad8:	2029      	movs	r0, #41	@ 0x29
 8008ada:	f7ff fddb 	bl	8008694 <writeReg>
	writeReg(FSKRegSyncValue3, 0xC1);
 8008ade:	21c1      	movs	r1, #193	@ 0xc1
 8008ae0:	202a      	movs	r0, #42	@ 0x2a
 8008ae2:	f7ff fdd7 	bl	8008694 <writeReg>
	// configure frequency
	configChannel();
 8008ae6:	f7ff ff4f 	bl	8008988 <configChannel>
	// configure output power
	configPower();
 8008aea:	f7ff ff8b 	bl	8008a04 <configPower>

	// set the IRQ mapping DIO0=PacketSent DIO1=NOP DIO2=NOP
	writeReg(RegDioMapping1,
 8008aee:	2134      	movs	r1, #52	@ 0x34
 8008af0:	2040      	movs	r0, #64	@ 0x40
 8008af2:	f7ff fdcf 	bl	8008694 <writeReg>
			MAP_DIO0_FSK_READY | MAP_DIO1_FSK_NOP | MAP_DIO2_FSK_TXNOP);

	// initialize the payload size and address pointers    
	writeReg(FSKRegPayloadLength, LMIC.dataLen + 1); // (insert length byte into payload))
 8008af6:	4b10      	ldr	r3, [pc, #64]	@ (8008b38 <txfsk+0xd4>)
 8008af8:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8008afc:	3301      	adds	r3, #1
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	4619      	mov	r1, r3
 8008b02:	2032      	movs	r0, #50	@ 0x32
 8008b04:	f7ff fdc6 	bl	8008694 <writeReg>

	// download length byte and buffer to the radio FIFO
	writeReg(RegFifo, LMIC.dataLen);
 8008b08:	4b0b      	ldr	r3, [pc, #44]	@ (8008b38 <txfsk+0xd4>)
 8008b0a:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8008b0e:	4619      	mov	r1, r3
 8008b10:	2000      	movs	r0, #0
 8008b12:	f7ff fdbf 	bl	8008694 <writeReg>
	writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8008b16:	4b08      	ldr	r3, [pc, #32]	@ (8008b38 <txfsk+0xd4>)
 8008b18:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	4907      	ldr	r1, [pc, #28]	@ (8008b3c <txfsk+0xd8>)
 8008b20:	2000      	movs	r0, #0
 8008b22:	f7ff fdf0 	bl	8008706 <writeBuf>

	// enable antenna switch for TX
	hal_pin_rxtx(1);
 8008b26:	2001      	movs	r0, #1
 8008b28:	f7fb ff13 	bl	8004952 <hal_pin_rxtx>

	// now we actually start the transmission
	opmode(OPMODE_TX);
 8008b2c:	2003      	movs	r0, #3
 8008b2e:	f7ff fe3f 	bl	80087b0 <opmode>
}
 8008b32:	bf00      	nop
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	2000033c 	.word	0x2000033c
 8008b3c:	20000484 	.word	0x20000484

08008b40 <txlora>:

static void txlora()
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	af00      	add	r7, sp, #0
	// select LoRa modem (from sleep mode)
	//writeReg(RegOpMode, OPMODE_LORA);
	opmodeLora();
 8008b44:	f7ff fe4e 	bl	80087e4 <opmodeLora>
	ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 8008b48:	2001      	movs	r0, #1
 8008b4a:	f7ff fdc0 	bl	80086ce <readReg>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	b25b      	sxtb	r3, r3
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	db01      	blt.n	8008b5a <txlora+0x1a>
 8008b56:	f7fc f87b 	bl	8004c50 <hal_failed>

	// enter standby mode (required for FIFO loading))
	opmode(OPMODE_STANDBY);
 8008b5a:	2001      	movs	r0, #1
 8008b5c:	f7ff fe28 	bl	80087b0 <opmode>
	// configure LoRa modem (cfg1, cfg2)
	configLoraModem();
 8008b60:	f7ff fe64 	bl	800882c <configLoraModem>
	// configure frequency
	configChannel();
 8008b64:	f7ff ff10 	bl	8008988 <configChannel>
	// configure output power
	writeReg(RegPaRamp, (readReg(RegPaRamp) & 0xF0) | 0x08); // set PA ramp-up time 50 uSec
 8008b68:	200a      	movs	r0, #10
 8008b6a:	f7ff fdb0 	bl	80086ce <readReg>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	b25b      	sxtb	r3, r3
 8008b72:	f023 030f 	bic.w	r3, r3, #15
 8008b76:	b25b      	sxtb	r3, r3
 8008b78:	f043 0308 	orr.w	r3, r3, #8
 8008b7c:	b25b      	sxtb	r3, r3
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	4619      	mov	r1, r3
 8008b82:	200a      	movs	r0, #10
 8008b84:	f7ff fd86 	bl	8008694 <writeReg>
	configPower();
 8008b88:	f7ff ff3c 	bl	8008a04 <configPower>
	// set sync word
	writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 8008b8c:	2134      	movs	r1, #52	@ 0x34
 8008b8e:	2039      	movs	r0, #57	@ 0x39
 8008b90:	f7ff fd80 	bl	8008694 <writeReg>

	// set the IRQ mapping DIO0=TxDone DIO1=NOP DIO2=NOP
	writeReg(RegDioMapping1,
 8008b94:	21f0      	movs	r1, #240	@ 0xf0
 8008b96:	2040      	movs	r0, #64	@ 0x40
 8008b98:	f7ff fd7c 	bl	8008694 <writeReg>
			MAP_DIO0_LORA_TXDONE | MAP_DIO1_LORA_NOP | MAP_DIO2_LORA_NOP);
	// clear all radio IRQ flags
	writeReg(LORARegIrqFlags, 0xFF);
 8008b9c:	21ff      	movs	r1, #255	@ 0xff
 8008b9e:	2012      	movs	r0, #18
 8008ba0:	f7ff fd78 	bl	8008694 <writeReg>
	// mask all IRQs but TxDone
	writeReg(LORARegIrqFlagsMask, ~IRQ_LORA_TXDONE_MASK);
 8008ba4:	21f7      	movs	r1, #247	@ 0xf7
 8008ba6:	2011      	movs	r0, #17
 8008ba8:	f7ff fd74 	bl	8008694 <writeReg>

	// initialize the payload size and address pointers    
	writeReg(LORARegFifoTxBaseAddr, 0x00);
 8008bac:	2100      	movs	r1, #0
 8008bae:	200e      	movs	r0, #14
 8008bb0:	f7ff fd70 	bl	8008694 <writeReg>
	writeReg(LORARegFifoAddrPtr, 0x00);
 8008bb4:	2100      	movs	r1, #0
 8008bb6:	200d      	movs	r0, #13
 8008bb8:	f7ff fd6c 	bl	8008694 <writeReg>
	writeReg(LORARegPayloadLength, LMIC.dataLen);
 8008bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8008bec <txlora+0xac>)
 8008bbe:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	2022      	movs	r0, #34	@ 0x22
 8008bc6:	f7ff fd65 	bl	8008694 <writeReg>

	// download buffer to the radio FIFO
	writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8008bca:	4b08      	ldr	r3, [pc, #32]	@ (8008bec <txlora+0xac>)
 8008bcc:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	4907      	ldr	r1, [pc, #28]	@ (8008bf0 <txlora+0xb0>)
 8008bd4:	2000      	movs	r0, #0
 8008bd6:	f7ff fd96 	bl	8008706 <writeBuf>

	// enable antenna switch for TX
	hal_pin_rxtx(1);
 8008bda:	2001      	movs	r0, #1
 8008bdc:	f7fb feb9 	bl	8004952 <hal_pin_rxtx>

	// now we actually start the transmission
	opmode(OPMODE_TX);
 8008be0:	2003      	movs	r0, #3
 8008be2:	f7ff fde5 	bl	80087b0 <opmode>
}
 8008be6:	bf00      	nop
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	2000033c 	.word	0x2000033c
 8008bf0:	20000484 	.word	0x20000484

08008bf4 <starttx>:

// start transmitter (buf=LMIC.frame, len=LMIC.dataLen)
static void starttx()
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	af00      	add	r7, sp, #0
	ASSERT((readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP);
 8008bf8:	2001      	movs	r0, #1
 8008bfa:	f7ff fd68 	bl	80086ce <readReg>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	f003 0307 	and.w	r3, r3, #7
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d001      	beq.n	8008c0c <starttx+0x18>
 8008c08:	f7fc f822 	bl	8004c50 <hal_failed>
	if (getSf(LMIC.rps) == FSK) { // FSK modem
 8008c0c:	4b07      	ldr	r3, [pc, #28]	@ (8008c2c <starttx+0x38>)
 8008c0e:	89db      	ldrh	r3, [r3, #14]
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7fc f8bd 	bl	8004d90 <getSf>
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d102      	bne.n	8008c22 <starttx+0x2e>
		txfsk();
 8008c1c:	f7ff ff22 	bl	8008a64 <txfsk>
	} else { // LoRa modem
		txlora();
	}
	// the radio will go back to STANDBY mode as soon as the TX is finished
	// the corresponding IRQ will inform us about completion.
}
 8008c20:	e001      	b.n	8008c26 <starttx+0x32>
		txlora();
 8008c22:	f7ff ff8d 	bl	8008b40 <txlora>
}
 8008c26:	bf00      	nop
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	2000033c 	.word	0x2000033c

08008c30 <rxlora>:
		| IRQ_LORA_RXTOUT_MASK, [RXMODE_SCAN] = IRQ_LORA_RXDONE_MASK,
		[RXMODE_RSSI] = 0x00, };

// start LoRa receiver (time=LMIC.rxtime, timeout=LMIC.rxsyms, result=LMIC.frame[LMIC.dataLen])
static void rxlora(u1_t rxmode)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	4603      	mov	r3, r0
 8008c38:	71fb      	strb	r3, [r7, #7]
	// select LoRa modem (from sleep mode)
	opmodeLora();
 8008c3a:	f7ff fdd3 	bl	80087e4 <opmodeLora>
	ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 8008c3e:	2001      	movs	r0, #1
 8008c40:	f7ff fd45 	bl	80086ce <readReg>
 8008c44:	4603      	mov	r3, r0
 8008c46:	b25b      	sxtb	r3, r3
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	db01      	blt.n	8008c50 <rxlora+0x20>
 8008c4c:	f7fc f800 	bl	8004c50 <hal_failed>
	// enter standby mode (warm up))
	opmode(OPMODE_STANDBY);
 8008c50:	2001      	movs	r0, #1
 8008c52:	f7ff fdad 	bl	80087b0 <opmode>
	// don't use MAC settings at startup
	if (rxmode == RXMODE_RSSI) { // use fixed settings for rssi scan
 8008c56:	79fb      	ldrb	r3, [r7, #7]
 8008c58:	2b02      	cmp	r3, #2
 8008c5a:	d108      	bne.n	8008c6e <rxlora+0x3e>
		writeReg(LORARegModemConfig1, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG1);
 8008c5c:	210a      	movs	r1, #10
 8008c5e:	201d      	movs	r0, #29
 8008c60:	f7ff fd18 	bl	8008694 <writeReg>
		writeReg(LORARegModemConfig2, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG2);
 8008c64:	2170      	movs	r1, #112	@ 0x70
 8008c66:	201e      	movs	r0, #30
 8008c68:	f7ff fd14 	bl	8008694 <writeReg>
 8008c6c:	e003      	b.n	8008c76 <rxlora+0x46>
	} else { // single or continuous rx mode
		// configure LoRa modem (cfg1, cfg2)
		configLoraModem();
 8008c6e:	f7ff fddd 	bl	800882c <configLoraModem>
		// configure frequency
		configChannel();
 8008c72:	f7ff fe89 	bl	8008988 <configChannel>
	}
	// set LNA gain
	writeReg(RegLna, LNA_RX_GAIN);
 8008c76:	2121      	movs	r1, #33	@ 0x21
 8008c78:	200c      	movs	r0, #12
 8008c7a:	f7ff fd0b 	bl	8008694 <writeReg>
	// set max payload size
	writeReg(LORARegPayloadMaxLength, 64);
 8008c7e:	2140      	movs	r1, #64	@ 0x40
 8008c80:	2023      	movs	r0, #35	@ 0x23
 8008c82:	f7ff fd07 	bl	8008694 <writeReg>
	// use inverted I/Q signal (prevent mote-to-mote communication)

	// XXX: use flag to switch on/off inversion
	if (LMIC.noRXIQinversion) {
 8008c86:	4b26      	ldr	r3, [pc, #152]	@ (8008d20 <rxlora+0xf0>)
 8008c88:	f893 31a8 	ldrb.w	r3, [r3, #424]	@ 0x1a8
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d00b      	beq.n	8008ca8 <rxlora+0x78>
		writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ) & ~(1 << 6));
 8008c90:	2033      	movs	r0, #51	@ 0x33
 8008c92:	f7ff fd1c 	bl	80086ce <readReg>
 8008c96:	4603      	mov	r3, r0
 8008c98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	2033      	movs	r0, #51	@ 0x33
 8008ca2:	f7ff fcf7 	bl	8008694 <writeReg>
 8008ca6:	e00a      	b.n	8008cbe <rxlora+0x8e>
	} else {
		writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ) | (1 << 6));
 8008ca8:	2033      	movs	r0, #51	@ 0x33
 8008caa:	f7ff fd10 	bl	80086ce <readReg>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	2033      	movs	r0, #51	@ 0x33
 8008cba:	f7ff fceb 	bl	8008694 <writeReg>
	}

	// set symbol timeout (for single rx)
	writeReg(LORARegSymbTimeoutLsb, LMIC.rxsyms);
 8008cbe:	4b18      	ldr	r3, [pc, #96]	@ (8008d20 <rxlora+0xf0>)
 8008cc0:	7c1b      	ldrb	r3, [r3, #16]
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	201f      	movs	r0, #31
 8008cc6:	f7ff fce5 	bl	8008694 <writeReg>
	// set sync word
	writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 8008cca:	2134      	movs	r1, #52	@ 0x34
 8008ccc:	2039      	movs	r0, #57	@ 0x39
 8008cce:	f7ff fce1 	bl	8008694 <writeReg>

	// configure DIO mapping DIO0=RxDone DIO1=RxTout DIO2=NOP
	writeReg(RegDioMapping1,
 8008cd2:	21c0      	movs	r1, #192	@ 0xc0
 8008cd4:	2040      	movs	r0, #64	@ 0x40
 8008cd6:	f7ff fcdd 	bl	8008694 <writeReg>
			MAP_DIO0_LORA_RXDONE | MAP_DIO1_LORA_RXTOUT | MAP_DIO2_LORA_NOP);
	// clear all radio IRQ flags
	writeReg(LORARegIrqFlags, 0xFF);
 8008cda:	21ff      	movs	r1, #255	@ 0xff
 8008cdc:	2012      	movs	r0, #18
 8008cde:	f7ff fcd9 	bl	8008694 <writeReg>
	// enable required radio IRQs
	writeReg(LORARegIrqFlagsMask, ~rxlorairqmask[rxmode]);
 8008ce2:	79fb      	ldrb	r3, [r7, #7]
 8008ce4:	4a0f      	ldr	r2, [pc, #60]	@ (8008d24 <rxlora+0xf4>)
 8008ce6:	5cd3      	ldrb	r3, [r2, r3]
 8008ce8:	43db      	mvns	r3, r3
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	4619      	mov	r1, r3
 8008cee:	2011      	movs	r0, #17
 8008cf0:	f7ff fcd0 	bl	8008694 <writeReg>

	// enable antenna switch for RX
	hal_pin_rxtx(0);
 8008cf4:	2000      	movs	r0, #0
 8008cf6:	f7fb fe2c 	bl	8004952 <hal_pin_rxtx>

	// now instruct the radio to receive
	if (rxmode == RXMODE_SINGLE) { // single rx
 8008cfa:	79fb      	ldrb	r3, [r7, #7]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d108      	bne.n	8008d12 <rxlora+0xe2>
		hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 8008d00:	4b07      	ldr	r3, [pc, #28]	@ (8008d20 <rxlora+0xf0>)
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	4618      	mov	r0, r3
 8008d06:	f7fb ff12 	bl	8004b2e <hal_waitUntil>
		opmode(OPMODE_RX_SINGLE);
 8008d0a:	2006      	movs	r0, #6
 8008d0c:	f7ff fd50 	bl	80087b0 <opmode>
	} else { // continous rx (scan or rssi)
		opmode(OPMODE_RX);
	}
}
 8008d10:	e002      	b.n	8008d18 <rxlora+0xe8>
		opmode(OPMODE_RX);
 8008d12:	2005      	movs	r0, #5
 8008d14:	f7ff fd4c 	bl	80087b0 <opmode>
}
 8008d18:	bf00      	nop
 8008d1a:	3708      	adds	r7, #8
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	2000033c 	.word	0x2000033c
 8008d24:	08012dfc 	.word	0x08012dfc

08008d28 <rxfsk>:

static void rxfsk(u1_t rxmode)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b082      	sub	sp, #8
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	4603      	mov	r3, r0
 8008d30:	71fb      	strb	r3, [r7, #7]
	// only single rx (no continuous scanning, no noise sampling)
	ASSERT(rxmode == RXMODE_SINGLE);
 8008d32:	79fb      	ldrb	r3, [r7, #7]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d001      	beq.n	8008d3c <rxfsk+0x14>
 8008d38:	f7fb ff8a 	bl	8004c50 <hal_failed>
	// select FSK modem (from sleep mode)
	//writeReg(RegOpMode, 0x00); // (not LoRa)
	opmodeFSK();
 8008d3c:	f7ff fd64 	bl	8008808 <opmodeFSK>
	ASSERT((readReg(RegOpMode) & OPMODE_LORA) == 0);
 8008d40:	2001      	movs	r0, #1
 8008d42:	f7ff fcc4 	bl	80086ce <readReg>
 8008d46:	4603      	mov	r3, r0
 8008d48:	b25b      	sxtb	r3, r3
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	da01      	bge.n	8008d52 <rxfsk+0x2a>
 8008d4e:	f7fb ff7f 	bl	8004c50 <hal_failed>
	// enter standby mode (warm up))
	opmode(OPMODE_STANDBY);
 8008d52:	2001      	movs	r0, #1
 8008d54:	f7ff fd2c 	bl	80087b0 <opmode>
	// configure frequency
	configChannel();
 8008d58:	f7ff fe16 	bl	8008988 <configChannel>
	// set LNA gain
	//writeReg(RegLna, 0x20|0x03); // max gain, boost enable
	writeReg(RegLna, LNA_RX_GAIN);
 8008d5c:	2121      	movs	r1, #33	@ 0x21
 8008d5e:	200c      	movs	r0, #12
 8008d60:	f7ff fc98 	bl	8008694 <writeReg>
	// configure receiver
	writeReg(FSKRegRxConfig, 0x1E); // AFC auto, AGC, trigger on preamble?!?
 8008d64:	211e      	movs	r1, #30
 8008d66:	200d      	movs	r0, #13
 8008d68:	f7ff fc94 	bl	8008694 <writeReg>
	// set receiver bandwidth
	writeReg(FSKRegRxBw, 0x0B); // 50kHz SSb
 8008d6c:	210b      	movs	r1, #11
 8008d6e:	2012      	movs	r0, #18
 8008d70:	f7ff fc90 	bl	8008694 <writeReg>
	// set AFC bandwidth
	writeReg(FSKRegAfcBw, 0x12); // 83.3kHz SSB
 8008d74:	2112      	movs	r1, #18
 8008d76:	2013      	movs	r0, #19
 8008d78:	f7ff fc8c 	bl	8008694 <writeReg>
	// set preamble detection
	writeReg(FSKRegPreambleDetect, 0xAA); // enable, 2 bytes, 10 chip errors
 8008d7c:	21aa      	movs	r1, #170	@ 0xaa
 8008d7e:	201f      	movs	r0, #31
 8008d80:	f7ff fc88 	bl	8008694 <writeReg>
	// set sync config
	writeReg(FSKRegSyncConfig, 0x12); // no auto restart, preamble 0xAA, enable, fill FIFO, 3 bytes sync
 8008d84:	2112      	movs	r1, #18
 8008d86:	2027      	movs	r0, #39	@ 0x27
 8008d88:	f7ff fc84 	bl	8008694 <writeReg>
	// set packet config
	writeReg(FSKRegPacketConfig1, 0xD8); // var-length, whitening, crc, no auto-clear, no adr filter
 8008d8c:	21d8      	movs	r1, #216	@ 0xd8
 8008d8e:	2030      	movs	r0, #48	@ 0x30
 8008d90:	f7ff fc80 	bl	8008694 <writeReg>
	writeReg(FSKRegPacketConfig2, 0x40); // packet mode
 8008d94:	2140      	movs	r1, #64	@ 0x40
 8008d96:	2031      	movs	r0, #49	@ 0x31
 8008d98:	f7ff fc7c 	bl	8008694 <writeReg>
	// set sync value
	writeReg(FSKRegSyncValue1, 0xC1);
 8008d9c:	21c1      	movs	r1, #193	@ 0xc1
 8008d9e:	2028      	movs	r0, #40	@ 0x28
 8008da0:	f7ff fc78 	bl	8008694 <writeReg>
	writeReg(FSKRegSyncValue2, 0x94);
 8008da4:	2194      	movs	r1, #148	@ 0x94
 8008da6:	2029      	movs	r0, #41	@ 0x29
 8008da8:	f7ff fc74 	bl	8008694 <writeReg>
	writeReg(FSKRegSyncValue3, 0xC1);
 8008dac:	21c1      	movs	r1, #193	@ 0xc1
 8008dae:	202a      	movs	r0, #42	@ 0x2a
 8008db0:	f7ff fc70 	bl	8008694 <writeReg>
	// set preamble timeout
	writeReg(FSKRegRxTimeout2, 0xFF);    //(LMIC.rxsyms+1)/2);
 8008db4:	21ff      	movs	r1, #255	@ 0xff
 8008db6:	2021      	movs	r0, #33	@ 0x21
 8008db8:	f7ff fc6c 	bl	8008694 <writeReg>
	// set bitrate
	writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 8008dbc:	2102      	movs	r1, #2
 8008dbe:	2002      	movs	r0, #2
 8008dc0:	f7ff fc68 	bl	8008694 <writeReg>
	writeReg(FSKRegBitrateLsb, 0x80);
 8008dc4:	2180      	movs	r1, #128	@ 0x80
 8008dc6:	2003      	movs	r0, #3
 8008dc8:	f7ff fc64 	bl	8008694 <writeReg>
	// set frequency deviation
	writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 8008dcc:	2101      	movs	r1, #1
 8008dce:	2004      	movs	r0, #4
 8008dd0:	f7ff fc60 	bl	8008694 <writeReg>
	writeReg(FSKRegFdevLsb, 0x99);
 8008dd4:	2199      	movs	r1, #153	@ 0x99
 8008dd6:	2005      	movs	r0, #5
 8008dd8:	f7ff fc5c 	bl	8008694 <writeReg>

	// configure DIO mapping DIO0=PayloadReady DIO1=NOP DIO2=TimeOut
	writeReg(RegDioMapping1,
 8008ddc:	2138      	movs	r1, #56	@ 0x38
 8008dde:	2040      	movs	r0, #64	@ 0x40
 8008de0:	f7ff fc58 	bl	8008694 <writeReg>
			MAP_DIO0_FSK_READY | MAP_DIO1_FSK_NOP | MAP_DIO2_FSK_TIMEOUT);

	// enable antenna switch for RX
	hal_pin_rxtx(0);
 8008de4:	2000      	movs	r0, #0
 8008de6:	f7fb fdb4 	bl	8004952 <hal_pin_rxtx>

	// now instruct the radio to receive
	hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 8008dea:	4b06      	ldr	r3, [pc, #24]	@ (8008e04 <rxfsk+0xdc>)
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	4618      	mov	r0, r3
 8008df0:	f7fb fe9d 	bl	8004b2e <hal_waitUntil>
	opmode(OPMODE_RX); // no single rx mode available in FSK
 8008df4:	2005      	movs	r0, #5
 8008df6:	f7ff fcdb 	bl	80087b0 <opmode>
}
 8008dfa:	bf00      	nop
 8008dfc:	3708      	adds	r7, #8
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	2000033c 	.word	0x2000033c

08008e08 <startrx>:

static void startrx(u1_t rxmode)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	4603      	mov	r3, r0
 8008e10:	71fb      	strb	r3, [r7, #7]
	ASSERT((readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP);
 8008e12:	2001      	movs	r0, #1
 8008e14:	f7ff fc5b 	bl	80086ce <readReg>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	f003 0307 	and.w	r3, r3, #7
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d001      	beq.n	8008e26 <startrx+0x1e>
 8008e22:	f7fb ff15 	bl	8004c50 <hal_failed>
	if (getSf(LMIC.rps) == FSK) { // FSK modem
 8008e26:	4b0a      	ldr	r3, [pc, #40]	@ (8008e50 <startrx+0x48>)
 8008e28:	89db      	ldrh	r3, [r3, #14]
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7fb ffb0 	bl	8004d90 <getSf>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d104      	bne.n	8008e40 <startrx+0x38>
		rxfsk(rxmode);
 8008e36:	79fb      	ldrb	r3, [r7, #7]
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f7ff ff75 	bl	8008d28 <rxfsk>
	} else { // LoRa modem
		rxlora(rxmode);
	}
	// the radio will go back to STANDBY mode as soon as the RX is finished
	// or timed out, and the corresponding IRQ will inform us about completion.
}
 8008e3e:	e003      	b.n	8008e48 <startrx+0x40>
		rxlora(rxmode);
 8008e40:	79fb      	ldrb	r3, [r7, #7]
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7ff fef4 	bl	8008c30 <rxlora>
}
 8008e48:	bf00      	nop
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	2000033c 	.word	0x2000033c

08008e54 <radio_init>:

// get random seed from wideband noise rssi
void radio_init()
{
 8008e54:	b590      	push	{r4, r7, lr}
 8008e56:	b085      	sub	sp, #20
 8008e58:	af00      	add	r7, sp, #0
	hal_disableIRQs();
 8008e5a:	f7fb feb7 	bl	8004bcc <hal_disableIRQs>

	// manually reset radio
#ifdef CFG_sx1276_radio
	hal_pin_rst(0); // drive RST pin low
 8008e5e:	2000      	movs	r0, #0
 8008e60:	f7fb fd93 	bl	800498a <hal_pin_rst>
#else
    hal_pin_rst(1); // drive RST pin high
#endif
	hal_waitUntil(os_getTime() + ms2osticks(1)); // wait >100us
 8008e64:	f7ff fb40 	bl	80084e8 <os_getTime>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	3320      	adds	r3, #32
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f7fb fe5e 	bl	8004b2e <hal_waitUntil>
	hal_pin_rst(2); // configure RST pin floating!
 8008e72:	2002      	movs	r0, #2
 8008e74:	f7fb fd89 	bl	800498a <hal_pin_rst>
	hal_waitUntil(os_getTime() + ms2osticks(5)); // wait 5ms
 8008e78:	f7ff fb36 	bl	80084e8 <os_getTime>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	33a0      	adds	r3, #160	@ 0xa0
 8008e80:	4618      	mov	r0, r3
 8008e82:	f7fb fe54 	bl	8004b2e <hal_waitUntil>

	opmode(OPMODE_SLEEP);
 8008e86:	2000      	movs	r0, #0
 8008e88:	f7ff fc92 	bl	80087b0 <opmode>

	// some sanity checks, e.g., read version number
	u1_t v = readReg(RegVersion);
 8008e8c:	2042      	movs	r0, #66	@ 0x42
 8008e8e:	f7ff fc1e 	bl	80086ce <readReg>
 8008e92:	4603      	mov	r3, r0
 8008e94:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
	ASSERT(v == 0x12);
 8008e96:	79fb      	ldrb	r3, [r7, #7]
 8008e98:	2b12      	cmp	r3, #18
 8008e9a:	d001      	beq.n	8008ea0 <radio_init+0x4c>
 8008e9c:	f7fb fed8 	bl	8004c50 <hal_failed>
    ASSERT(v == 0x22);
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif
	// seed 15-byte randomness via noise rssi
	rxlora(RXMODE_RSSI);
 8008ea0:	2002      	movs	r0, #2
 8008ea2:	f7ff fec5 	bl	8008c30 <rxlora>
	while ((readReg(RegOpMode) & OPMODE_MASK) != OPMODE_RX)
 8008ea6:	bf00      	nop
 8008ea8:	2001      	movs	r0, #1
 8008eaa:	f7ff fc10 	bl	80086ce <readReg>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	f003 0307 	and.w	r3, r3, #7
 8008eb4:	2b05      	cmp	r3, #5
 8008eb6:	d1f7      	bne.n	8008ea8 <radio_init+0x54>
		; // continuous rx
	for (int i = 1; i < 16; i++) {
 8008eb8:	2301      	movs	r3, #1
 8008eba:	60fb      	str	r3, [r7, #12]
 8008ebc:	e02c      	b.n	8008f18 <radio_init+0xc4>
		for (int j = 0; j < 8; j++) {
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	60bb      	str	r3, [r7, #8]
 8008ec2:	e023      	b.n	8008f0c <radio_init+0xb8>
			u1_t b; // wait for two non-identical subsequent least-significant bits
			while ((b = readReg(LORARegRssiWideband) & 0x01)
 8008ec4:	bf00      	nop
 8008ec6:	202c      	movs	r0, #44	@ 0x2c
 8008ec8:	f7ff fc01 	bl	80086ce <readReg>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	f003 0301 	and.w	r3, r3, #1
 8008ed2:	71bb      	strb	r3, [r7, #6]
 8008ed4:	79bc      	ldrb	r4, [r7, #6]
					== (readReg(LORARegRssiWideband) & 0x01))
 8008ed6:	202c      	movs	r0, #44	@ 0x2c
 8008ed8:	f7ff fbf9 	bl	80086ce <readReg>
 8008edc:	4603      	mov	r3, r0
 8008ede:	f003 0301 	and.w	r3, r3, #1
 8008ee2:	429c      	cmp	r4, r3
 8008ee4:	d0ef      	beq.n	8008ec6 <radio_init+0x72>
				;
			randbuf[i] = (randbuf[i] << 1) | b;
 8008ee6:	4a14      	ldr	r2, [pc, #80]	@ (8008f38 <radio_init+0xe4>)
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	4413      	add	r3, r2
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	005b      	lsls	r3, r3, #1
 8008ef0:	b25a      	sxtb	r2, r3
 8008ef2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	b25b      	sxtb	r3, r3
 8008efa:	b2d9      	uxtb	r1, r3
 8008efc:	4a0e      	ldr	r2, [pc, #56]	@ (8008f38 <radio_init+0xe4>)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	4413      	add	r3, r2
 8008f02:	460a      	mov	r2, r1
 8008f04:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++) {
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	3301      	adds	r3, #1
 8008f0a:	60bb      	str	r3, [r7, #8]
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	2b07      	cmp	r3, #7
 8008f10:	ddd8      	ble.n	8008ec4 <radio_init+0x70>
	for (int i = 1; i < 16; i++) {
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	3301      	adds	r3, #1
 8008f16:	60fb      	str	r3, [r7, #12]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2b0f      	cmp	r3, #15
 8008f1c:	ddcf      	ble.n	8008ebe <radio_init+0x6a>
		}
	}
	randbuf[0] = 16; // set initial index
 8008f1e:	4b06      	ldr	r3, [pc, #24]	@ (8008f38 <radio_init+0xe4>)
 8008f20:	2210      	movs	r2, #16
 8008f22:	701a      	strb	r2, [r3, #0]
    // Launch Rx chain calibration for HF band 
    writeReg(FSKRegImageCal, (readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_MASK)|RF_IMAGECAL_IMAGECAL_START);
    while((readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_RUNNING) == RF_IMAGECAL_IMAGECAL_RUNNING) { ; }
#endif /* CFG_sx1276mb1_board */

	opmode(OPMODE_SLEEP);
 8008f24:	2000      	movs	r0, #0
 8008f26:	f7ff fc43 	bl	80087b0 <opmode>

	hal_enableIRQs();
 8008f2a:	f7fb fe5f 	bl	8004bec <hal_enableIRQs>
}
 8008f2e:	bf00      	nop
 8008f30:	3714      	adds	r7, #20
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd90      	pop	{r4, r7, pc}
 8008f36:	bf00      	nop
 8008f38:	20000560 	.word	0x20000560

08008f3c <radio_rand1>:

// return next random byte derived from seed buffer
// (buf[0] holds index of next byte to be returned)
u1_t radio_rand1()
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
	u1_t i = randbuf[0];
 8008f42:	4b10      	ldr	r3, [pc, #64]	@ (8008f84 <radio_rand1+0x48>)
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	71fb      	strb	r3, [r7, #7]
	ASSERT(i != 0);
 8008f48:	79fb      	ldrb	r3, [r7, #7]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d101      	bne.n	8008f52 <radio_rand1+0x16>
 8008f4e:	f7fb fe7f 	bl	8004c50 <hal_failed>
	if (i == 16) {
 8008f52:	79fb      	ldrb	r3, [r7, #7]
 8008f54:	2b10      	cmp	r3, #16
 8008f56:	d106      	bne.n	8008f66 <radio_rand1+0x2a>
		os_aes(AES_ENC, randbuf, 16); // encrypt seed with any key
 8008f58:	2210      	movs	r2, #16
 8008f5a:	490a      	ldr	r1, [pc, #40]	@ (8008f84 <radio_rand1+0x48>)
 8008f5c:	2000      	movs	r0, #0
 8008f5e:	f7f8 f993 	bl	8001288 <os_aes>
		i = 0;
 8008f62:	2300      	movs	r3, #0
 8008f64:	71fb      	strb	r3, [r7, #7]
	}
	u1_t v = randbuf[i++];
 8008f66:	79fb      	ldrb	r3, [r7, #7]
 8008f68:	1c5a      	adds	r2, r3, #1
 8008f6a:	71fa      	strb	r2, [r7, #7]
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	4b05      	ldr	r3, [pc, #20]	@ (8008f84 <radio_rand1+0x48>)
 8008f70:	5c9b      	ldrb	r3, [r3, r2]
 8008f72:	71bb      	strb	r3, [r7, #6]
	randbuf[0] = i;
 8008f74:	4a03      	ldr	r2, [pc, #12]	@ (8008f84 <radio_rand1+0x48>)
 8008f76:	79fb      	ldrb	r3, [r7, #7]
 8008f78:	7013      	strb	r3, [r2, #0]
	return v;
 8008f7a:	79bb      	ldrb	r3, [r7, #6]
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3708      	adds	r7, #8
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	20000560 	.word	0x20000560

08008f88 <radio_irq_handler>:
		};

// called by hal ext IRQ handler
// (radio goes to stanby mode after tx/rx operations)
void radio_irq_handler(u1_t dio)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	4603      	mov	r3, r0
 8008f90:	71fb      	strb	r3, [r7, #7]
    u1_t s = readReg(RegOpMode);
    u1_t c = readReg(LORARegModemConfig2);
    opmode(OPMODE_TX);
    return;
#else /* ! CFG_TxContinuousMode */
	ostime_t now = os_getTime();
 8008f92:	f7ff faa9 	bl	80084e8 <os_getTime>
 8008f96:	60f8      	str	r0, [r7, #12]
	if ((readReg(RegOpMode) & OPMODE_LORA) != 0) { // LORA modem
 8008f98:	2001      	movs	r0, #1
 8008f9a:	f7ff fb98 	bl	80086ce <readReg>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	b25b      	sxtb	r3, r3
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	da74      	bge.n	8009090 <radio_irq_handler+0x108>
		u1_t flags = readReg(LORARegIrqFlags);
 8008fa6:	2012      	movs	r0, #18
 8008fa8:	f7ff fb91 	bl	80086ce <readReg>
 8008fac:	4603      	mov	r3, r0
 8008fae:	727b      	strb	r3, [r7, #9]
		if (flags & IRQ_LORA_TXDONE_MASK) {
 8008fb0:	7a7b      	ldrb	r3, [r7, #9]
 8008fb2:	f003 0308 	and.w	r3, r3, #8
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d004      	beq.n	8008fc4 <radio_irq_handler+0x3c>
			// save exact tx time
			LMIC.txend = now - us2osticks(43); // TXDONE FIXUP
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	3b01      	subs	r3, #1
 8008fbe:	4a59      	ldr	r2, [pc, #356]	@ (8009124 <radio_irq_handler+0x19c>)
 8008fc0:	6013      	str	r3, [r2, #0]
 8008fc2:	e05c      	b.n	800907e <radio_irq_handler+0xf6>
		} else if (flags & IRQ_LORA_RXDONE_MASK) {
 8008fc4:	7a7b      	ldrb	r3, [r7, #9]
 8008fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d04f      	beq.n	800906e <radio_irq_handler+0xe6>
			// save exact rx time
			if (getBw(LMIC.rps) == BW125) {
 8008fce:	4b55      	ldr	r3, [pc, #340]	@ (8009124 <radio_irq_handler+0x19c>)
 8008fd0:	89db      	ldrh	r3, [r3, #14]
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7fb feec 	bl	8004db0 <getBw>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d10d      	bne.n	8008ffa <radio_irq_handler+0x72>
				now -= LORA_RXDONE_FIXUP[getSf(LMIC.rps)];
 8008fde:	4b51      	ldr	r3, [pc, #324]	@ (8009124 <radio_irq_handler+0x19c>)
 8008fe0:	89db      	ldrh	r3, [r3, #14]
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7fb fed4 	bl	8004d90 <getSf>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	461a      	mov	r2, r3
 8008fec:	4b4e      	ldr	r3, [pc, #312]	@ (8009128 <radio_irq_handler+0x1a0>)
 8008fee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	1a9b      	subs	r3, r3, r2
 8008ff8:	60fb      	str	r3, [r7, #12]
			}
			LMIC.rxtime = now;
 8008ffa:	4a4a      	ldr	r2, [pc, #296]	@ (8009124 <radio_irq_handler+0x19c>)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6053      	str	r3, [r2, #4]
			// read the PDU and inform the MAC that we received something
			LMIC.dataLen =
					(readReg(LORARegModemConfig1)
 8009000:	201d      	movs	r0, #29
 8009002:	f7ff fb64 	bl	80086ce <readReg>
 8009006:	4603      	mov	r3, r0
							& SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
 8009008:	f003 0304 	and.w	r3, r3, #4
			LMIC.dataLen =
 800900c:	2b00      	cmp	r3, #0
 800900e:	d005      	beq.n	800901c <radio_irq_handler+0x94>
							readReg(LORARegPayloadLength) :
 8009010:	2022      	movs	r0, #34	@ 0x22
 8009012:	f7ff fb5c 	bl	80086ce <readReg>
 8009016:	4603      	mov	r3, r0
 8009018:	461a      	mov	r2, r3
 800901a:	e004      	b.n	8009026 <radio_irq_handler+0x9e>
							readReg(LORARegRxNbBytes);
 800901c:	2013      	movs	r0, #19
 800901e:	f7ff fb56 	bl	80086ce <readReg>
 8009022:	4603      	mov	r3, r0
 8009024:	461a      	mov	r2, r3
			LMIC.dataLen =
 8009026:	4b3f      	ldr	r3, [pc, #252]	@ (8009124 <radio_irq_handler+0x19c>)
 8009028:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
			// set FIFO read address pointer
			writeReg(LORARegFifoAddrPtr, readReg(LORARegFifoRxCurrentAddr));
 800902c:	2010      	movs	r0, #16
 800902e:	f7ff fb4e 	bl	80086ce <readReg>
 8009032:	4603      	mov	r3, r0
 8009034:	4619      	mov	r1, r3
 8009036:	200d      	movs	r0, #13
 8009038:	f7ff fb2c 	bl	8008694 <writeReg>
			// now read the FIFO
			readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 800903c:	4b39      	ldr	r3, [pc, #228]	@ (8009124 <radio_irq_handler+0x19c>)
 800903e:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8009042:	461a      	mov	r2, r3
 8009044:	4939      	ldr	r1, [pc, #228]	@ (800912c <radio_irq_handler+0x1a4>)
 8009046:	2000      	movs	r0, #0
 8009048:	f7ff fb87 	bl	800875a <readBuf>
			// read rx quality parameters
			LMIC.snr = readReg(LORARegPktSnrValue); // SNR [dB] * 4
 800904c:	2019      	movs	r0, #25
 800904e:	f7ff fb3e 	bl	80086ce <readReg>
 8009052:	4603      	mov	r3, r0
 8009054:	b25a      	sxtb	r2, r3
 8009056:	4b33      	ldr	r3, [pc, #204]	@ (8009124 <radio_irq_handler+0x19c>)
 8009058:	735a      	strb	r2, [r3, #13]
			LMIC.rssi = readReg(LORARegPktRssiValue) - 125 + 64; // RSSI [dBm] (-196...+63)
 800905a:	201a      	movs	r0, #26
 800905c:	f7ff fb37 	bl	80086ce <readReg>
 8009060:	4603      	mov	r3, r0
 8009062:	3b3d      	subs	r3, #61	@ 0x3d
 8009064:	b2db      	uxtb	r3, r3
 8009066:	b25a      	sxtb	r2, r3
 8009068:	4b2e      	ldr	r3, [pc, #184]	@ (8009124 <radio_irq_handler+0x19c>)
 800906a:	731a      	strb	r2, [r3, #12]
 800906c:	e007      	b.n	800907e <radio_irq_handler+0xf6>
		} else if (flags & IRQ_LORA_RXTOUT_MASK) {
 800906e:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8009072:	2b00      	cmp	r3, #0
 8009074:	da03      	bge.n	800907e <radio_irq_handler+0xf6>
			// indicate timeout
			LMIC.dataLen = 0;
 8009076:	4b2b      	ldr	r3, [pc, #172]	@ (8009124 <radio_irq_handler+0x19c>)
 8009078:	2200      	movs	r2, #0
 800907a:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
		}
		// mask all radio IRQs
		writeReg(LORARegIrqFlagsMask, 0xFF);
 800907e:	21ff      	movs	r1, #255	@ 0xff
 8009080:	2011      	movs	r0, #17
 8009082:	f7ff fb07 	bl	8008694 <writeReg>
		// clear radio IRQ flags
		writeReg(LORARegIrqFlags, 0xFF);
 8009086:	21ff      	movs	r1, #255	@ 0xff
 8009088:	2012      	movs	r0, #18
 800908a:	f7ff fb03 	bl	8008694 <writeReg>
 800908e:	e03c      	b.n	800910a <radio_irq_handler+0x182>
	} else { // FSK modem
		u1_t flags1 = readReg(FSKRegIrqFlags1);
 8009090:	203e      	movs	r0, #62	@ 0x3e
 8009092:	f7ff fb1c 	bl	80086ce <readReg>
 8009096:	4603      	mov	r3, r0
 8009098:	72fb      	strb	r3, [r7, #11]
		u1_t flags2 = readReg(FSKRegIrqFlags2);
 800909a:	203f      	movs	r0, #63	@ 0x3f
 800909c:	f7ff fb17 	bl	80086ce <readReg>
 80090a0:	4603      	mov	r3, r0
 80090a2:	72bb      	strb	r3, [r7, #10]
		if (flags2 & IRQ_FSK2_PACKETSENT_MASK) {
 80090a4:	7abb      	ldrb	r3, [r7, #10]
 80090a6:	f003 0308 	and.w	r3, r3, #8
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d003      	beq.n	80090b6 <radio_irq_handler+0x12e>
			// save exact tx time
			LMIC.txend = now;
 80090ae:	4a1d      	ldr	r2, [pc, #116]	@ (8009124 <radio_irq_handler+0x19c>)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6013      	str	r3, [r2, #0]
 80090b4:	e029      	b.n	800910a <radio_irq_handler+0x182>
		} else if (flags2 & IRQ_FSK2_PAYLOADREADY_MASK) {
 80090b6:	7abb      	ldrb	r3, [r7, #10]
 80090b8:	f003 0304 	and.w	r3, r3, #4
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d019      	beq.n	80090f4 <radio_irq_handler+0x16c>
			// save exact rx time
			LMIC.rxtime = now;
 80090c0:	4a18      	ldr	r2, [pc, #96]	@ (8009124 <radio_irq_handler+0x19c>)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6053      	str	r3, [r2, #4]
			// read the PDU and inform the MAC that we received something
			LMIC.dataLen = readReg(FSKRegPayloadLength);
 80090c6:	2032      	movs	r0, #50	@ 0x32
 80090c8:	f7ff fb01 	bl	80086ce <readReg>
 80090cc:	4603      	mov	r3, r0
 80090ce:	461a      	mov	r2, r3
 80090d0:	4b14      	ldr	r3, [pc, #80]	@ (8009124 <radio_irq_handler+0x19c>)
 80090d2:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
			// now read the FIFO
			readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 80090d6:	4b13      	ldr	r3, [pc, #76]	@ (8009124 <radio_irq_handler+0x19c>)
 80090d8:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80090dc:	461a      	mov	r2, r3
 80090de:	4913      	ldr	r1, [pc, #76]	@ (800912c <radio_irq_handler+0x1a4>)
 80090e0:	2000      	movs	r0, #0
 80090e2:	f7ff fb3a 	bl	800875a <readBuf>
			// read rx quality parameters
			LMIC.snr = 0; // determine snr
 80090e6:	4b0f      	ldr	r3, [pc, #60]	@ (8009124 <radio_irq_handler+0x19c>)
 80090e8:	2200      	movs	r2, #0
 80090ea:	735a      	strb	r2, [r3, #13]
			LMIC.rssi = 0; // determine rssi
 80090ec:	4b0d      	ldr	r3, [pc, #52]	@ (8009124 <radio_irq_handler+0x19c>)
 80090ee:	2200      	movs	r2, #0
 80090f0:	731a      	strb	r2, [r3, #12]
 80090f2:	e00a      	b.n	800910a <radio_irq_handler+0x182>
		} else if (flags1 & IRQ_FSK1_TIMEOUT_MASK) {
 80090f4:	7afb      	ldrb	r3, [r7, #11]
 80090f6:	f003 0304 	and.w	r3, r3, #4
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d004      	beq.n	8009108 <radio_irq_handler+0x180>
			// indicate timeout
			LMIC.dataLen = 0;
 80090fe:	4b09      	ldr	r3, [pc, #36]	@ (8009124 <radio_irq_handler+0x19c>)
 8009100:	2200      	movs	r2, #0
 8009102:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 8009106:	e000      	b.n	800910a <radio_irq_handler+0x182>
		} else {
			while (1)
 8009108:	e7fe      	b.n	8009108 <radio_irq_handler+0x180>
				;
		}
	}
	// go from stanby to sleep
	opmode(OPMODE_SLEEP);
 800910a:	2000      	movs	r0, #0
 800910c:	f7ff fb50 	bl	80087b0 <opmode>
	// run os job (use preset func ptr)
	os_setCallback(&LMIC.osjob, LMIC.osjob.func);
 8009110:	4b04      	ldr	r3, [pc, #16]	@ (8009124 <radio_irq_handler+0x19c>)
 8009112:	69db      	ldr	r3, [r3, #28]
 8009114:	4619      	mov	r1, r3
 8009116:	4806      	ldr	r0, [pc, #24]	@ (8009130 <radio_irq_handler+0x1a8>)
 8009118:	f7ff fa2a 	bl	8008570 <os_setCallback>
#endif /* ! CFG_TxContinuousMode */
}
 800911c:	bf00      	nop
 800911e:	3710      	adds	r7, #16
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}
 8009124:	2000033c 	.word	0x2000033c
 8009128:	08012e00 	.word	0x08012e00
 800912c:	20000484 	.word	0x20000484
 8009130:	20000350 	.word	0x20000350

08009134 <os_radio>:

void os_radio(u1_t mode)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	4603      	mov	r3, r0
 800913c:	71fb      	strb	r3, [r7, #7]
	hal_disableIRQs();
 800913e:	f7fb fd45 	bl	8004bcc <hal_disableIRQs>
	switch (mode) {
 8009142:	79fb      	ldrb	r3, [r7, #7]
 8009144:	2b03      	cmp	r3, #3
 8009146:	d81a      	bhi.n	800917e <os_radio+0x4a>
 8009148:	a201      	add	r2, pc, #4	@ (adr r2, 8009150 <os_radio+0x1c>)
 800914a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800914e:	bf00      	nop
 8009150:	08009161 	.word	0x08009161
 8009154:	08009169 	.word	0x08009169
 8009158:	0800916f 	.word	0x0800916f
 800915c:	08009177 	.word	0x08009177
	case RADIO_RST:
		// put radio to sleep
		opmode(OPMODE_SLEEP);
 8009160:	2000      	movs	r0, #0
 8009162:	f7ff fb25 	bl	80087b0 <opmode>
		break;
 8009166:	e00a      	b.n	800917e <os_radio+0x4a>

	case RADIO_TX:
		// transmit frame now
		starttx(); // buf=LMIC.frame, len=LMIC.dataLen
 8009168:	f7ff fd44 	bl	8008bf4 <starttx>
		break;
 800916c:	e007      	b.n	800917e <os_radio+0x4a>

	case RADIO_RX:
		// receive frame now (exactly at rxtime)
		startrx(RXMODE_SINGLE); // buf=LMIC.frame, time=LMIC.rxtime, timeout=LMIC.rxsyms
 800916e:	2000      	movs	r0, #0
 8009170:	f7ff fe4a 	bl	8008e08 <startrx>
		break;
 8009174:	e003      	b.n	800917e <os_radio+0x4a>

	case RADIO_RXON:
		// start scanning for beacon now
		startrx(RXMODE_SCAN); // buf=LMIC.frame
 8009176:	2001      	movs	r0, #1
 8009178:	f7ff fe46 	bl	8008e08 <startrx>
		break;
 800917c:	bf00      	nop
	}
	hal_enableIRQs();
 800917e:	f7fb fd35 	bl	8004bec <hal_enableIRQs>
}
 8009182:	bf00      	nop
 8009184:	3708      	adds	r7, #8
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop

0800918c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8009190:	4b1b      	ldr	r3, [pc, #108]	@ (8009200 <MX_SPI3_Init+0x74>)
 8009192:	4a1c      	ldr	r2, [pc, #112]	@ (8009204 <MX_SPI3_Init+0x78>)
 8009194:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8009196:	4b1a      	ldr	r3, [pc, #104]	@ (8009200 <MX_SPI3_Init+0x74>)
 8009198:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800919c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800919e:	4b18      	ldr	r3, [pc, #96]	@ (8009200 <MX_SPI3_Init+0x74>)
 80091a0:	2200      	movs	r2, #0
 80091a2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80091a4:	4b16      	ldr	r3, [pc, #88]	@ (8009200 <MX_SPI3_Init+0x74>)
 80091a6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80091aa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80091ac:	4b14      	ldr	r3, [pc, #80]	@ (8009200 <MX_SPI3_Init+0x74>)
 80091ae:	2200      	movs	r2, #0
 80091b0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80091b2:	4b13      	ldr	r3, [pc, #76]	@ (8009200 <MX_SPI3_Init+0x74>)
 80091b4:	2200      	movs	r2, #0
 80091b6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80091b8:	4b11      	ldr	r3, [pc, #68]	@ (8009200 <MX_SPI3_Init+0x74>)
 80091ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80091be:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80091c0:	4b0f      	ldr	r3, [pc, #60]	@ (8009200 <MX_SPI3_Init+0x74>)
 80091c2:	2228      	movs	r2, #40	@ 0x28
 80091c4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80091c6:	4b0e      	ldr	r3, [pc, #56]	@ (8009200 <MX_SPI3_Init+0x74>)
 80091c8:	2200      	movs	r2, #0
 80091ca:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80091cc:	4b0c      	ldr	r3, [pc, #48]	@ (8009200 <MX_SPI3_Init+0x74>)
 80091ce:	2200      	movs	r2, #0
 80091d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80091d2:	4b0b      	ldr	r3, [pc, #44]	@ (8009200 <MX_SPI3_Init+0x74>)
 80091d4:	2200      	movs	r2, #0
 80091d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80091d8:	4b09      	ldr	r3, [pc, #36]	@ (8009200 <MX_SPI3_Init+0x74>)
 80091da:	2207      	movs	r2, #7
 80091dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80091de:	4b08      	ldr	r3, [pc, #32]	@ (8009200 <MX_SPI3_Init+0x74>)
 80091e0:	2200      	movs	r2, #0
 80091e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80091e4:	4b06      	ldr	r3, [pc, #24]	@ (8009200 <MX_SPI3_Init+0x74>)
 80091e6:	2208      	movs	r2, #8
 80091e8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80091ea:	4805      	ldr	r0, [pc, #20]	@ (8009200 <MX_SPI3_Init+0x74>)
 80091ec:	f004 fa32 	bl	800d654 <HAL_SPI_Init>
 80091f0:	4603      	mov	r3, r0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d001      	beq.n	80091fa <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80091f6:	f7ff f95f 	bl	80084b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80091fa:	bf00      	nop
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	20000570 	.word	0x20000570
 8009204:	40003c00 	.word	0x40003c00

08009208 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b08a      	sub	sp, #40	@ 0x28
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009210:	f107 0314 	add.w	r3, r7, #20
 8009214:	2200      	movs	r2, #0
 8009216:	601a      	str	r2, [r3, #0]
 8009218:	605a      	str	r2, [r3, #4]
 800921a:	609a      	str	r2, [r3, #8]
 800921c:	60da      	str	r2, [r3, #12]
 800921e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a17      	ldr	r2, [pc, #92]	@ (8009284 <HAL_SPI_MspInit+0x7c>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d127      	bne.n	800927a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800922a:	4b17      	ldr	r3, [pc, #92]	@ (8009288 <HAL_SPI_MspInit+0x80>)
 800922c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800922e:	4a16      	ldr	r2, [pc, #88]	@ (8009288 <HAL_SPI_MspInit+0x80>)
 8009230:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009234:	6593      	str	r3, [r2, #88]	@ 0x58
 8009236:	4b14      	ldr	r3, [pc, #80]	@ (8009288 <HAL_SPI_MspInit+0x80>)
 8009238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800923a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800923e:	613b      	str	r3, [r7, #16]
 8009240:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009242:	4b11      	ldr	r3, [pc, #68]	@ (8009288 <HAL_SPI_MspInit+0x80>)
 8009244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009246:	4a10      	ldr	r2, [pc, #64]	@ (8009288 <HAL_SPI_MspInit+0x80>)
 8009248:	f043 0302 	orr.w	r3, r3, #2
 800924c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800924e:	4b0e      	ldr	r3, [pc, #56]	@ (8009288 <HAL_SPI_MspInit+0x80>)
 8009250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009252:	f003 0302 	and.w	r3, r3, #2
 8009256:	60fb      	str	r3, [r7, #12]
 8009258:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800925a:	2338      	movs	r3, #56	@ 0x38
 800925c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800925e:	2302      	movs	r3, #2
 8009260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009262:	2300      	movs	r3, #0
 8009264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009266:	2303      	movs	r3, #3
 8009268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800926a:	2306      	movs	r3, #6
 800926c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800926e:	f107 0314 	add.w	r3, r7, #20
 8009272:	4619      	mov	r1, r3
 8009274:	4805      	ldr	r0, [pc, #20]	@ (800928c <HAL_SPI_MspInit+0x84>)
 8009276:	f001 ffbf 	bl	800b1f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800927a:	bf00      	nop
 800927c:	3728      	adds	r7, #40	@ 0x28
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	40003c00 	.word	0x40003c00
 8009288:	40021000 	.word	0x40021000
 800928c:	48000400 	.word	0x48000400

08009290 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009296:	4b0f      	ldr	r3, [pc, #60]	@ (80092d4 <HAL_MspInit+0x44>)
 8009298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800929a:	4a0e      	ldr	r2, [pc, #56]	@ (80092d4 <HAL_MspInit+0x44>)
 800929c:	f043 0301 	orr.w	r3, r3, #1
 80092a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80092a2:	4b0c      	ldr	r3, [pc, #48]	@ (80092d4 <HAL_MspInit+0x44>)
 80092a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092a6:	f003 0301 	and.w	r3, r3, #1
 80092aa:	607b      	str	r3, [r7, #4]
 80092ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80092ae:	4b09      	ldr	r3, [pc, #36]	@ (80092d4 <HAL_MspInit+0x44>)
 80092b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092b2:	4a08      	ldr	r2, [pc, #32]	@ (80092d4 <HAL_MspInit+0x44>)
 80092b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80092ba:	4b06      	ldr	r3, [pc, #24]	@ (80092d4 <HAL_MspInit+0x44>)
 80092bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092c2:	603b      	str	r3, [r7, #0]
 80092c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80092c6:	bf00      	nop
 80092c8:	370c      	adds	r7, #12
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr
 80092d2:	bf00      	nop
 80092d4:	40021000 	.word	0x40021000

080092d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80092d8:	b480      	push	{r7}
 80092da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80092dc:	bf00      	nop
 80092de:	e7fd      	b.n	80092dc <NMI_Handler+0x4>

080092e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80092e0:	b480      	push	{r7}
 80092e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80092e4:	bf00      	nop
 80092e6:	e7fd      	b.n	80092e4 <HardFault_Handler+0x4>

080092e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80092e8:	b480      	push	{r7}
 80092ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80092ec:	bf00      	nop
 80092ee:	e7fd      	b.n	80092ec <MemManage_Handler+0x4>

080092f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80092f0:	b480      	push	{r7}
 80092f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80092f4:	bf00      	nop
 80092f6:	e7fd      	b.n	80092f4 <BusFault_Handler+0x4>

080092f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80092f8:	b480      	push	{r7}
 80092fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80092fc:	bf00      	nop
 80092fe:	e7fd      	b.n	80092fc <UsageFault_Handler+0x4>

08009300 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009300:	b480      	push	{r7}
 8009302:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009304:	bf00      	nop
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr

0800930e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800930e:	b480      	push	{r7}
 8009310:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009312:	bf00      	nop
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800931c:	b480      	push	{r7}
 800931e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009320:	bf00      	nop
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr

0800932a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800932a:	b580      	push	{r7, lr}
 800932c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800932e:	f000 fabb 	bl	80098a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009332:	bf00      	nop
 8009334:	bd80      	pop	{r7, pc}
	...

08009338 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800933c:	4802      	ldr	r0, [pc, #8]	@ (8009348 <ADC1_IRQHandler+0x10>)
 800933e:	f000 fefa 	bl	800a136 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8009342:	bf00      	nop
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	200000e0 	.word	0x200000e0

0800934c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8009350:	2040      	movs	r0, #64	@ 0x40
 8009352:	f002 f8d3 	bl	800b4fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIO1_Pin);
 8009356:	2080      	movs	r0, #128	@ 0x80
 8009358:	f002 f8d0 	bl	800b4fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800935c:	bf00      	nop
 800935e:	bd80      	pop	{r7, pc}

08009360 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8009364:	4802      	ldr	r0, [pc, #8]	@ (8009370 <TIM6_DAC_IRQHandler+0x10>)
 8009366:	f004 fe47 	bl	800dff8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800936a:	bf00      	nop
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	200005d8 	.word	0x200005d8

08009374 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8009378:	4802      	ldr	r0, [pc, #8]	@ (8009384 <TIM7_IRQHandler+0x10>)
 800937a:	f004 fe3d 	bl	800dff8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800937e:	bf00      	nop
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	20000624 	.word	0x20000624

08009388 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009388:	b480      	push	{r7}
 800938a:	af00      	add	r7, sp, #0
	return 1;
 800938c:	2301      	movs	r3, #1
}
 800938e:	4618      	mov	r0, r3
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <_kill>:

int _kill(int pid, int sig)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 80093a2:	f005 fe67 	bl	800f074 <__errno>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2216      	movs	r2, #22
 80093aa:	601a      	str	r2, [r3, #0]
	return -1;
 80093ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3708      	adds	r7, #8
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <_exit>:

void _exit(int status)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80093c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f7ff ffe7 	bl	8009398 <_kill>
	while (1) {
 80093ca:	bf00      	nop
 80093cc:	e7fd      	b.n	80093ca <_exit+0x12>

080093ce <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b086      	sub	sp, #24
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	60f8      	str	r0, [r7, #12]
 80093d6:	60b9      	str	r1, [r7, #8]
 80093d8:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80093da:	2300      	movs	r3, #0
 80093dc:	617b      	str	r3, [r7, #20]
 80093de:	e00a      	b.n	80093f6 <_read+0x28>
		*ptr++ = __io_getchar();
 80093e0:	f3af 8000 	nop.w
 80093e4:	4601      	mov	r1, r0
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	1c5a      	adds	r2, r3, #1
 80093ea:	60ba      	str	r2, [r7, #8]
 80093ec:	b2ca      	uxtb	r2, r1
 80093ee:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	3301      	adds	r3, #1
 80093f4:	617b      	str	r3, [r7, #20]
 80093f6:	697a      	ldr	r2, [r7, #20]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	dbf0      	blt.n	80093e0 <_read+0x12>
	}

	return len;
 80093fe:	687b      	ldr	r3, [r7, #4]
}
 8009400:	4618      	mov	r0, r3
 8009402:	3718      	adds	r7, #24
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b086      	sub	sp, #24
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8009414:	2300      	movs	r3, #0
 8009416:	617b      	str	r3, [r7, #20]
 8009418:	e009      	b.n	800942e <_write+0x26>
		__io_putchar(*ptr++);
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	1c5a      	adds	r2, r3, #1
 800941e:	60ba      	str	r2, [r7, #8]
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	4618      	mov	r0, r3
 8009424:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	3301      	adds	r3, #1
 800942c:	617b      	str	r3, [r7, #20]
 800942e:	697a      	ldr	r2, [r7, #20]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	429a      	cmp	r2, r3
 8009434:	dbf1      	blt.n	800941a <_write+0x12>
	}
	return len;
 8009436:	687b      	ldr	r3, [r7, #4]
}
 8009438:	4618      	mov	r0, r3
 800943a:	3718      	adds	r7, #24
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <_close>:

int _close(int file)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8009448:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800944c:	4618      	mov	r0, r3
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <_fstat>:

int _fstat(int file, struct stat *st)
{
 8009458:	b480      	push	{r7}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009468:	605a      	str	r2, [r3, #4]
	return 0;
 800946a:	2300      	movs	r3, #0
}
 800946c:	4618      	mov	r0, r3
 800946e:	370c      	adds	r7, #12
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr

08009478 <_isatty>:

int _isatty(int file)
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8009480:	2301      	movs	r3, #1
}
 8009482:	4618      	mov	r0, r3
 8009484:	370c      	adds	r7, #12
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr

0800948e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800948e:	b480      	push	{r7}
 8009490:	b085      	sub	sp, #20
 8009492:	af00      	add	r7, sp, #0
 8009494:	60f8      	str	r0, [r7, #12]
 8009496:	60b9      	str	r1, [r7, #8]
 8009498:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 800949a:	2300      	movs	r3, #0
}
 800949c:	4618      	mov	r0, r3
 800949e:	3714      	adds	r7, #20
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b086      	sub	sp, #24
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80094b0:	4a14      	ldr	r2, [pc, #80]	@ (8009504 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80094b2:	4b15      	ldr	r3, [pc, #84]	@ (8009508 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80094b4:	1ad3      	subs	r3, r2, r3
 80094b6:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80094bc:	4b13      	ldr	r3, [pc, #76]	@ (800950c <_sbrk+0x64>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d102      	bne.n	80094ca <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80094c4:	4b11      	ldr	r3, [pc, #68]	@ (800950c <_sbrk+0x64>)
 80094c6:	4a12      	ldr	r2, [pc, #72]	@ (8009510 <_sbrk+0x68>)
 80094c8:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80094ca:	4b10      	ldr	r3, [pc, #64]	@ (800950c <_sbrk+0x64>)
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4413      	add	r3, r2
 80094d2:	693a      	ldr	r2, [r7, #16]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d207      	bcs.n	80094e8 <_sbrk+0x40>
		errno = ENOMEM;
 80094d8:	f005 fdcc 	bl	800f074 <__errno>
 80094dc:	4603      	mov	r3, r0
 80094de:	220c      	movs	r2, #12
 80094e0:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80094e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80094e6:	e009      	b.n	80094fc <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80094e8:	4b08      	ldr	r3, [pc, #32]	@ (800950c <_sbrk+0x64>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80094ee:	4b07      	ldr	r3, [pc, #28]	@ (800950c <_sbrk+0x64>)
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4413      	add	r3, r2
 80094f6:	4a05      	ldr	r2, [pc, #20]	@ (800950c <_sbrk+0x64>)
 80094f8:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80094fa:	68fb      	ldr	r3, [r7, #12]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3718      	adds	r7, #24
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}
 8009504:	2000c000 	.word	0x2000c000
 8009508:	00000400 	.word	0x00000400
 800950c:	200005d4 	.word	0x200005d4
 8009510:	20000848 	.word	0x20000848

08009514 <SystemInit>:
 * @brief  Setup the microcontroller system.
 * @retval None
 */

void SystemInit(void)
{
 8009514:	b480      	push	{r7}
 8009516:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 8009518:	4b06      	ldr	r3, [pc, #24]	@ (8009534 <SystemInit+0x20>)
 800951a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800951e:	4a05      	ldr	r2, [pc, #20]	@ (8009534 <SystemInit+0x20>)
 8009520:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009524:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8009528:	bf00      	nop
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr
 8009532:	bf00      	nop
 8009534:	e000ed00 	.word	0xe000ed00

08009538 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800953e:	1d3b      	adds	r3, r7, #4
 8009540:	2200      	movs	r2, #0
 8009542:	601a      	str	r2, [r3, #0]
 8009544:	605a      	str	r2, [r3, #4]
 8009546:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8009548:	4b15      	ldr	r3, [pc, #84]	@ (80095a0 <MX_TIM6_Init+0x68>)
 800954a:	4a16      	ldr	r2, [pc, #88]	@ (80095a4 <MX_TIM6_Init+0x6c>)
 800954c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1222-1;
 800954e:	4b14      	ldr	r3, [pc, #80]	@ (80095a0 <MX_TIM6_Init+0x68>)
 8009550:	f240 42c5 	movw	r2, #1221	@ 0x4c5
 8009554:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009556:	4b12      	ldr	r3, [pc, #72]	@ (80095a0 <MX_TIM6_Init+0x68>)
 8009558:	2200      	movs	r2, #0
 800955a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65521-1;
 800955c:	4b10      	ldr	r3, [pc, #64]	@ (80095a0 <MX_TIM6_Init+0x68>)
 800955e:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8009562:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009564:	4b0e      	ldr	r3, [pc, #56]	@ (80095a0 <MX_TIM6_Init+0x68>)
 8009566:	2200      	movs	r2, #0
 8009568:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800956a:	480d      	ldr	r0, [pc, #52]	@ (80095a0 <MX_TIM6_Init+0x68>)
 800956c:	f004 fc98 	bl	800dea0 <HAL_TIM_Base_Init>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d001      	beq.n	800957a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8009576:	f7fe ff9f 	bl	80084b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800957a:	2300      	movs	r3, #0
 800957c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800957e:	2300      	movs	r3, #0
 8009580:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8009582:	1d3b      	adds	r3, r7, #4
 8009584:	4619      	mov	r1, r3
 8009586:	4806      	ldr	r0, [pc, #24]	@ (80095a0 <MX_TIM6_Init+0x68>)
 8009588:	f004 fed6 	bl	800e338 <HAL_TIMEx_MasterConfigSynchronization>
 800958c:	4603      	mov	r3, r0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d001      	beq.n	8009596 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8009592:	f7fe ff91 	bl	80084b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8009596:	bf00      	nop
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	200005d8 	.word	0x200005d8
 80095a4:	40001000 	.word	0x40001000

080095a8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80095ae:	1d3b      	adds	r3, r7, #4
 80095b0:	2200      	movs	r2, #0
 80095b2:	601a      	str	r2, [r3, #0]
 80095b4:	605a      	str	r2, [r3, #4]
 80095b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80095b8:	4b15      	ldr	r3, [pc, #84]	@ (8009610 <MX_TIM7_Init+0x68>)
 80095ba:	4a16      	ldr	r2, [pc, #88]	@ (8009614 <MX_TIM7_Init+0x6c>)
 80095bc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2500-1;
 80095be:	4b14      	ldr	r3, [pc, #80]	@ (8009610 <MX_TIM7_Init+0x68>)
 80095c0:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80095c4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80095c6:	4b12      	ldr	r3, [pc, #72]	@ (8009610 <MX_TIM7_Init+0x68>)
 80095c8:	2200      	movs	r2, #0
 80095ca:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80095cc:	4b10      	ldr	r3, [pc, #64]	@ (8009610 <MX_TIM7_Init+0x68>)
 80095ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80095d2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80095d4:	4b0e      	ldr	r3, [pc, #56]	@ (8009610 <MX_TIM7_Init+0x68>)
 80095d6:	2200      	movs	r2, #0
 80095d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80095da:	480d      	ldr	r0, [pc, #52]	@ (8009610 <MX_TIM7_Init+0x68>)
 80095dc:	f004 fc60 	bl	800dea0 <HAL_TIM_Base_Init>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d001      	beq.n	80095ea <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80095e6:	f7fe ff67 	bl	80084b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80095ea:	2300      	movs	r3, #0
 80095ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80095ee:	2300      	movs	r3, #0
 80095f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80095f2:	1d3b      	adds	r3, r7, #4
 80095f4:	4619      	mov	r1, r3
 80095f6:	4806      	ldr	r0, [pc, #24]	@ (8009610 <MX_TIM7_Init+0x68>)
 80095f8:	f004 fe9e 	bl	800e338 <HAL_TIMEx_MasterConfigSynchronization>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d001      	beq.n	8009606 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8009602:	f7fe ff59 	bl	80084b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8009606:	bf00      	nop
 8009608:	3710      	adds	r7, #16
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	20000624 	.word	0x20000624
 8009614:	40001400 	.word	0x40001400

08009618 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a1a      	ldr	r2, [pc, #104]	@ (8009690 <HAL_TIM_Base_MspInit+0x78>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d114      	bne.n	8009654 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800962a:	4b1a      	ldr	r3, [pc, #104]	@ (8009694 <HAL_TIM_Base_MspInit+0x7c>)
 800962c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800962e:	4a19      	ldr	r2, [pc, #100]	@ (8009694 <HAL_TIM_Base_MspInit+0x7c>)
 8009630:	f043 0310 	orr.w	r3, r3, #16
 8009634:	6593      	str	r3, [r2, #88]	@ 0x58
 8009636:	4b17      	ldr	r3, [pc, #92]	@ (8009694 <HAL_TIM_Base_MspInit+0x7c>)
 8009638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800963a:	f003 0310 	and.w	r3, r3, #16
 800963e:	60fb      	str	r3, [r7, #12]
 8009640:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8009642:	2200      	movs	r2, #0
 8009644:	2100      	movs	r1, #0
 8009646:	2036      	movs	r0, #54	@ 0x36
 8009648:	f001 fd9f 	bl	800b18a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800964c:	2036      	movs	r0, #54	@ 0x36
 800964e:	f001 fdb8 	bl	800b1c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8009652:	e018      	b.n	8009686 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a0f      	ldr	r2, [pc, #60]	@ (8009698 <HAL_TIM_Base_MspInit+0x80>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d113      	bne.n	8009686 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800965e:	4b0d      	ldr	r3, [pc, #52]	@ (8009694 <HAL_TIM_Base_MspInit+0x7c>)
 8009660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009662:	4a0c      	ldr	r2, [pc, #48]	@ (8009694 <HAL_TIM_Base_MspInit+0x7c>)
 8009664:	f043 0320 	orr.w	r3, r3, #32
 8009668:	6593      	str	r3, [r2, #88]	@ 0x58
 800966a:	4b0a      	ldr	r3, [pc, #40]	@ (8009694 <HAL_TIM_Base_MspInit+0x7c>)
 800966c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800966e:	f003 0320 	and.w	r3, r3, #32
 8009672:	60bb      	str	r3, [r7, #8]
 8009674:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8009676:	2200      	movs	r2, #0
 8009678:	2100      	movs	r1, #0
 800967a:	2037      	movs	r0, #55	@ 0x37
 800967c:	f001 fd85 	bl	800b18a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8009680:	2037      	movs	r0, #55	@ 0x37
 8009682:	f001 fd9e 	bl	800b1c2 <HAL_NVIC_EnableIRQ>
}
 8009686:	bf00      	nop
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	40001000 	.word	0x40001000
 8009694:	40021000 	.word	0x40021000
 8009698:	40001400 	.word	0x40001400

0800969c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80096a0:	4b14      	ldr	r3, [pc, #80]	@ (80096f4 <MX_USART2_UART_Init+0x58>)
 80096a2:	4a15      	ldr	r2, [pc, #84]	@ (80096f8 <MX_USART2_UART_Init+0x5c>)
 80096a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80096a6:	4b13      	ldr	r3, [pc, #76]	@ (80096f4 <MX_USART2_UART_Init+0x58>)
 80096a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80096ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80096ae:	4b11      	ldr	r3, [pc, #68]	@ (80096f4 <MX_USART2_UART_Init+0x58>)
 80096b0:	2200      	movs	r2, #0
 80096b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80096b4:	4b0f      	ldr	r3, [pc, #60]	@ (80096f4 <MX_USART2_UART_Init+0x58>)
 80096b6:	2200      	movs	r2, #0
 80096b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80096ba:	4b0e      	ldr	r3, [pc, #56]	@ (80096f4 <MX_USART2_UART_Init+0x58>)
 80096bc:	2200      	movs	r2, #0
 80096be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80096c0:	4b0c      	ldr	r3, [pc, #48]	@ (80096f4 <MX_USART2_UART_Init+0x58>)
 80096c2:	220c      	movs	r2, #12
 80096c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80096c6:	4b0b      	ldr	r3, [pc, #44]	@ (80096f4 <MX_USART2_UART_Init+0x58>)
 80096c8:	2200      	movs	r2, #0
 80096ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80096cc:	4b09      	ldr	r3, [pc, #36]	@ (80096f4 <MX_USART2_UART_Init+0x58>)
 80096ce:	2200      	movs	r2, #0
 80096d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80096d2:	4b08      	ldr	r3, [pc, #32]	@ (80096f4 <MX_USART2_UART_Init+0x58>)
 80096d4:	2200      	movs	r2, #0
 80096d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80096d8:	4b06      	ldr	r3, [pc, #24]	@ (80096f4 <MX_USART2_UART_Init+0x58>)
 80096da:	2200      	movs	r2, #0
 80096dc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80096de:	4805      	ldr	r0, [pc, #20]	@ (80096f4 <MX_USART2_UART_Init+0x58>)
 80096e0:	f004 feae 	bl	800e440 <HAL_UART_Init>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d001      	beq.n	80096ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80096ea:	f7fe fee5 	bl	80084b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80096ee:	bf00      	nop
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	20000670 	.word	0x20000670
 80096f8:	40004400 	.word	0x40004400

080096fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b09e      	sub	sp, #120	@ 0x78
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009704:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8009708:	2200      	movs	r2, #0
 800970a:	601a      	str	r2, [r3, #0]
 800970c:	605a      	str	r2, [r3, #4]
 800970e:	609a      	str	r2, [r3, #8]
 8009710:	60da      	str	r2, [r3, #12]
 8009712:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009714:	f107 0310 	add.w	r3, r7, #16
 8009718:	2254      	movs	r2, #84	@ 0x54
 800971a:	2100      	movs	r1, #0
 800971c:	4618      	mov	r0, r3
 800971e:	f005 fca1 	bl	800f064 <memset>
  if(uartHandle->Instance==USART2)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4a1f      	ldr	r2, [pc, #124]	@ (80097a4 <HAL_UART_MspInit+0xa8>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d136      	bne.n	800979a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800972c:	2302      	movs	r3, #2
 800972e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8009730:	2300      	movs	r3, #0
 8009732:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009734:	f107 0310 	add.w	r3, r7, #16
 8009738:	4618      	mov	r0, r3
 800973a:	f003 fca3 	bl	800d084 <HAL_RCCEx_PeriphCLKConfig>
 800973e:	4603      	mov	r3, r0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d001      	beq.n	8009748 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8009744:	f7fe feb8 	bl	80084b8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8009748:	4b17      	ldr	r3, [pc, #92]	@ (80097a8 <HAL_UART_MspInit+0xac>)
 800974a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800974c:	4a16      	ldr	r2, [pc, #88]	@ (80097a8 <HAL_UART_MspInit+0xac>)
 800974e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009752:	6593      	str	r3, [r2, #88]	@ 0x58
 8009754:	4b14      	ldr	r3, [pc, #80]	@ (80097a8 <HAL_UART_MspInit+0xac>)
 8009756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009758:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800975c:	60fb      	str	r3, [r7, #12]
 800975e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009760:	4b11      	ldr	r3, [pc, #68]	@ (80097a8 <HAL_UART_MspInit+0xac>)
 8009762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009764:	4a10      	ldr	r2, [pc, #64]	@ (80097a8 <HAL_UART_MspInit+0xac>)
 8009766:	f043 0301 	orr.w	r3, r3, #1
 800976a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800976c:	4b0e      	ldr	r3, [pc, #56]	@ (80097a8 <HAL_UART_MspInit+0xac>)
 800976e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009770:	f003 0301 	and.w	r3, r3, #1
 8009774:	60bb      	str	r3, [r7, #8]
 8009776:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009778:	230c      	movs	r3, #12
 800977a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800977c:	2302      	movs	r3, #2
 800977e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009780:	2300      	movs	r3, #0
 8009782:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009784:	2303      	movs	r3, #3
 8009786:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009788:	2307      	movs	r3, #7
 800978a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800978c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8009790:	4619      	mov	r1, r3
 8009792:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009796:	f001 fd2f 	bl	800b1f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800979a:	bf00      	nop
 800979c:	3778      	adds	r7, #120	@ 0x78
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	40004400 	.word	0x40004400
 80097a8:	40021000 	.word	0x40021000

080097ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80097ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80097e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80097b0:	f7ff feb0 	bl	8009514 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80097b4:	480c      	ldr	r0, [pc, #48]	@ (80097e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80097b6:	490d      	ldr	r1, [pc, #52]	@ (80097ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80097b8:	4a0d      	ldr	r2, [pc, #52]	@ (80097f0 <LoopForever+0xe>)
  movs r3, #0
 80097ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80097bc:	e002      	b.n	80097c4 <LoopCopyDataInit>

080097be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80097be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80097c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80097c2:	3304      	adds	r3, #4

080097c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80097c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80097c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80097c8:	d3f9      	bcc.n	80097be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80097ca:	4a0a      	ldr	r2, [pc, #40]	@ (80097f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80097cc:	4c0a      	ldr	r4, [pc, #40]	@ (80097f8 <LoopForever+0x16>)
  movs r3, #0
 80097ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80097d0:	e001      	b.n	80097d6 <LoopFillZerobss>

080097d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80097d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80097d4:	3204      	adds	r2, #4

080097d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80097d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80097d8:	d3fb      	bcc.n	80097d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80097da:	f005 fc51 	bl	800f080 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80097de:	f7fe fd71 	bl	80082c4 <main>

080097e2 <LoopForever>:

LoopForever:
    b LoopForever
 80097e2:	e7fe      	b.n	80097e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80097e4:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80097e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80097ec:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 80097f0:	080130c0 	.word	0x080130c0
  ldr r2, =_sbss
 80097f4:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 80097f8:	20000848 	.word	0x20000848

080097fc <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80097fc:	e7fe      	b.n	80097fc <CAN1_RX0_IRQHandler>

080097fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b082      	sub	sp, #8
 8009802:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009804:	2300      	movs	r3, #0
 8009806:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009808:	2003      	movs	r0, #3
 800980a:	f001 fcb3 	bl	800b174 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800980e:	200f      	movs	r0, #15
 8009810:	f000 f80e 	bl	8009830 <HAL_InitTick>
 8009814:	4603      	mov	r3, r0
 8009816:	2b00      	cmp	r3, #0
 8009818:	d002      	beq.n	8009820 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800981a:	2301      	movs	r3, #1
 800981c:	71fb      	strb	r3, [r7, #7]
 800981e:	e001      	b.n	8009824 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009820:	f7ff fd36 	bl	8009290 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009824:	79fb      	ldrb	r3, [r7, #7]
}
 8009826:	4618      	mov	r0, r3
 8009828:	3708      	adds	r7, #8
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
	...

08009830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009838:	2300      	movs	r3, #0
 800983a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800983c:	4b17      	ldr	r3, [pc, #92]	@ (800989c <HAL_InitTick+0x6c>)
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d023      	beq.n	800988c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8009844:	4b16      	ldr	r3, [pc, #88]	@ (80098a0 <HAL_InitTick+0x70>)
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	4b14      	ldr	r3, [pc, #80]	@ (800989c <HAL_InitTick+0x6c>)
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	4619      	mov	r1, r3
 800984e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009852:	fbb3 f3f1 	udiv	r3, r3, r1
 8009856:	fbb2 f3f3 	udiv	r3, r2, r3
 800985a:	4618      	mov	r0, r3
 800985c:	f001 fcbf 	bl	800b1de <HAL_SYSTICK_Config>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d10f      	bne.n	8009886 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2b0f      	cmp	r3, #15
 800986a:	d809      	bhi.n	8009880 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800986c:	2200      	movs	r2, #0
 800986e:	6879      	ldr	r1, [r7, #4]
 8009870:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009874:	f001 fc89 	bl	800b18a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009878:	4a0a      	ldr	r2, [pc, #40]	@ (80098a4 <HAL_InitTick+0x74>)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6013      	str	r3, [r2, #0]
 800987e:	e007      	b.n	8009890 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8009880:	2301      	movs	r3, #1
 8009882:	73fb      	strb	r3, [r7, #15]
 8009884:	e004      	b.n	8009890 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	73fb      	strb	r3, [r7, #15]
 800988a:	e001      	b.n	8009890 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800988c:	2301      	movs	r3, #1
 800988e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8009890:	7bfb      	ldrb	r3, [r7, #15]
}
 8009892:	4618      	mov	r0, r3
 8009894:	3710      	adds	r7, #16
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	20000064 	.word	0x20000064
 80098a0:	2000005c 	.word	0x2000005c
 80098a4:	20000060 	.word	0x20000060

080098a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80098a8:	b480      	push	{r7}
 80098aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80098ac:	4b06      	ldr	r3, [pc, #24]	@ (80098c8 <HAL_IncTick+0x20>)
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	461a      	mov	r2, r3
 80098b2:	4b06      	ldr	r3, [pc, #24]	@ (80098cc <HAL_IncTick+0x24>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4413      	add	r3, r2
 80098b8:	4a04      	ldr	r2, [pc, #16]	@ (80098cc <HAL_IncTick+0x24>)
 80098ba:	6013      	str	r3, [r2, #0]
}
 80098bc:	bf00      	nop
 80098be:	46bd      	mov	sp, r7
 80098c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c4:	4770      	bx	lr
 80098c6:	bf00      	nop
 80098c8:	20000064 	.word	0x20000064
 80098cc:	200006f8 	.word	0x200006f8

080098d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80098d0:	b480      	push	{r7}
 80098d2:	af00      	add	r7, sp, #0
  return uwTick;
 80098d4:	4b03      	ldr	r3, [pc, #12]	@ (80098e4 <HAL_GetTick+0x14>)
 80098d6:	681b      	ldr	r3, [r3, #0]
}
 80098d8:	4618      	mov	r0, r3
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	200006f8 	.word	0x200006f8

080098e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80098f0:	f7ff ffee 	bl	80098d0 <HAL_GetTick>
 80098f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009900:	d005      	beq.n	800990e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8009902:	4b0a      	ldr	r3, [pc, #40]	@ (800992c <HAL_Delay+0x44>)
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	461a      	mov	r2, r3
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	4413      	add	r3, r2
 800990c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800990e:	bf00      	nop
 8009910:	f7ff ffde 	bl	80098d0 <HAL_GetTick>
 8009914:	4602      	mov	r2, r0
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	1ad3      	subs	r3, r2, r3
 800991a:	68fa      	ldr	r2, [r7, #12]
 800991c:	429a      	cmp	r2, r3
 800991e:	d8f7      	bhi.n	8009910 <HAL_Delay+0x28>
  {
  }
}
 8009920:	bf00      	nop
 8009922:	bf00      	nop
 8009924:	3710      	adds	r7, #16
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop
 800992c:	20000064 	.word	0x20000064

08009930 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	431a      	orrs	r2, r3
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	609a      	str	r2, [r3, #8]
}
 800994a:	bf00      	nop
 800994c:	370c      	adds	r7, #12
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr

08009956 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8009956:	b480      	push	{r7}
 8009958:	b083      	sub	sp, #12
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
 800995e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	689b      	ldr	r3, [r3, #8]
 8009964:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	431a      	orrs	r2, r3
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	609a      	str	r2, [r3, #8]
}
 8009970:	bf00      	nop
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800997c:	b480      	push	{r7}
 800997e:	b083      	sub	sp, #12
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	689b      	ldr	r3, [r3, #8]
 8009988:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800998c:	4618      	mov	r0, r3
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8009998:	b480      	push	{r7}
 800999a:	b087      	sub	sp, #28
 800999c:	af00      	add	r7, sp, #0
 800999e:	60f8      	str	r0, [r7, #12]
 80099a0:	60b9      	str	r1, [r7, #8]
 80099a2:	607a      	str	r2, [r7, #4]
 80099a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	3360      	adds	r3, #96	@ 0x60
 80099aa:	461a      	mov	r2, r3
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	009b      	lsls	r3, r3, #2
 80099b0:	4413      	add	r3, r2
 80099b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	4b08      	ldr	r3, [pc, #32]	@ (80099dc <LL_ADC_SetOffset+0x44>)
 80099ba:	4013      	ands	r3, r2
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80099c2:	683a      	ldr	r2, [r7, #0]
 80099c4:	430a      	orrs	r2, r1
 80099c6:	4313      	orrs	r3, r2
 80099c8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80099d0:	bf00      	nop
 80099d2:	371c      	adds	r7, #28
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr
 80099dc:	03fff000 	.word	0x03fff000

080099e0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b085      	sub	sp, #20
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	3360      	adds	r3, #96	@ 0x60
 80099ee:	461a      	mov	r2, r3
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	4413      	add	r3, r2
 80099f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3714      	adds	r7, #20
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr

08009a0c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b087      	sub	sp, #28
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	3360      	adds	r3, #96	@ 0x60
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	009b      	lsls	r3, r3, #2
 8009a22:	4413      	add	r3, r2
 8009a24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	431a      	orrs	r2, r3
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8009a36:	bf00      	nop
 8009a38:	371c      	adds	r7, #28
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr

08009a42 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8009a42:	b480      	push	{r7}
 8009a44:	b083      	sub	sp, #12
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	68db      	ldr	r3, [r3, #12]
 8009a4e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d101      	bne.n	8009a5a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8009a56:	2301      	movs	r3, #1
 8009a58:	e000      	b.n	8009a5c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8009a5a:	2300      	movs	r3, #0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	370c      	adds	r7, #12
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr

08009a68 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b087      	sub	sp, #28
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	60b9      	str	r1, [r7, #8]
 8009a72:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	3330      	adds	r3, #48	@ 0x30
 8009a78:	461a      	mov	r2, r3
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	0a1b      	lsrs	r3, r3, #8
 8009a7e:	009b      	lsls	r3, r3, #2
 8009a80:	f003 030c 	and.w	r3, r3, #12
 8009a84:	4413      	add	r3, r2
 8009a86:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	f003 031f 	and.w	r3, r3, #31
 8009a92:	211f      	movs	r1, #31
 8009a94:	fa01 f303 	lsl.w	r3, r1, r3
 8009a98:	43db      	mvns	r3, r3
 8009a9a:	401a      	ands	r2, r3
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	0e9b      	lsrs	r3, r3, #26
 8009aa0:	f003 011f 	and.w	r1, r3, #31
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	f003 031f 	and.w	r3, r3, #31
 8009aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8009aae:	431a      	orrs	r2, r3
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8009ab4:	bf00      	nop
 8009ab6:	371c      	adds	r7, #28
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b083      	sub	sp, #12
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009acc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d101      	bne.n	8009ad8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	e000      	b.n	8009ada <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	370c      	adds	r7, #12
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr

08009ae6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8009ae6:	b480      	push	{r7}
 8009ae8:	b087      	sub	sp, #28
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	60f8      	str	r0, [r7, #12]
 8009aee:	60b9      	str	r1, [r7, #8]
 8009af0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	3314      	adds	r3, #20
 8009af6:	461a      	mov	r2, r3
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	0e5b      	lsrs	r3, r3, #25
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	f003 0304 	and.w	r3, r3, #4
 8009b02:	4413      	add	r3, r2
 8009b04:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	0d1b      	lsrs	r3, r3, #20
 8009b0e:	f003 031f 	and.w	r3, r3, #31
 8009b12:	2107      	movs	r1, #7
 8009b14:	fa01 f303 	lsl.w	r3, r1, r3
 8009b18:	43db      	mvns	r3, r3
 8009b1a:	401a      	ands	r2, r3
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	0d1b      	lsrs	r3, r3, #20
 8009b20:	f003 031f 	and.w	r3, r3, #31
 8009b24:	6879      	ldr	r1, [r7, #4]
 8009b26:	fa01 f303 	lsl.w	r3, r1, r3
 8009b2a:	431a      	orrs	r2, r3
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8009b30:	bf00      	nop
 8009b32:	371c      	adds	r7, #28
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b085      	sub	sp, #20
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	60f8      	str	r0, [r7, #12]
 8009b44:	60b9      	str	r1, [r7, #8]
 8009b46:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b54:	43db      	mvns	r3, r3
 8009b56:	401a      	ands	r2, r3
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f003 0318 	and.w	r3, r3, #24
 8009b5e:	4908      	ldr	r1, [pc, #32]	@ (8009b80 <LL_ADC_SetChannelSingleDiff+0x44>)
 8009b60:	40d9      	lsrs	r1, r3
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	400b      	ands	r3, r1
 8009b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b6a:	431a      	orrs	r2, r3
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8009b72:	bf00      	nop
 8009b74:	3714      	adds	r7, #20
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop
 8009b80:	0007ffff 	.word	0x0007ffff

08009b84 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8009b94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	6093      	str	r3, [r2, #8]
}
 8009b9c:	bf00      	nop
 8009b9e:	370c      	adds	r7, #12
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr

08009ba8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009bb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009bbc:	d101      	bne.n	8009bc2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e000      	b.n	8009bc4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8009bc2:	2300      	movs	r3, #0
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	370c      	adds	r7, #12
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b083      	sub	sp, #12
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8009be0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009be4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8009bec:	bf00      	nop
 8009bee:	370c      	adds	r7, #12
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr

08009bf8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b083      	sub	sp, #12
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	689b      	ldr	r3, [r3, #8]
 8009c04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c0c:	d101      	bne.n	8009c12 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8009c0e:	2301      	movs	r3, #1
 8009c10:	e000      	b.n	8009c14 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8009c12:	2300      	movs	r3, #0
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009c30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009c34:	f043 0201 	orr.w	r2, r3, #1
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8009c3c:	bf00      	nop
 8009c3e:	370c      	adds	r7, #12
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b083      	sub	sp, #12
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009c58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009c5c:	f043 0202 	orr.w	r2, r3, #2
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8009c64:	bf00      	nop
 8009c66:	370c      	adds	r7, #12
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr

08009c70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b083      	sub	sp, #12
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	f003 0301 	and.w	r3, r3, #1
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d101      	bne.n	8009c88 <LL_ADC_IsEnabled+0x18>
 8009c84:	2301      	movs	r3, #1
 8009c86:	e000      	b.n	8009c8a <LL_ADC_IsEnabled+0x1a>
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	370c      	adds	r7, #12
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr

08009c96 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8009c96:	b480      	push	{r7}
 8009c98:	b083      	sub	sp, #12
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	f003 0302 	and.w	r3, r3, #2
 8009ca6:	2b02      	cmp	r3, #2
 8009ca8:	d101      	bne.n	8009cae <LL_ADC_IsDisableOngoing+0x18>
 8009caa:	2301      	movs	r3, #1
 8009cac:	e000      	b.n	8009cb0 <LL_ADC_IsDisableOngoing+0x1a>
 8009cae:	2300      	movs	r3, #0
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	370c      	adds	r7, #12
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b083      	sub	sp, #12
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009ccc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009cd0:	f043 0204 	orr.w	r2, r3, #4
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8009cd8:	bf00      	nop
 8009cda:	370c      	adds	r7, #12
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr

08009ce4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b083      	sub	sp, #12
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	f003 0304 	and.w	r3, r3, #4
 8009cf4:	2b04      	cmp	r3, #4
 8009cf6:	d101      	bne.n	8009cfc <LL_ADC_REG_IsConversionOngoing+0x18>
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	e000      	b.n	8009cfe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009cfc:	2300      	movs	r3, #0
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	370c      	adds	r7, #12
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr

08009d0a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009d0a:	b480      	push	{r7}
 8009d0c:	b083      	sub	sp, #12
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	689b      	ldr	r3, [r3, #8]
 8009d16:	f003 0308 	and.w	r3, r3, #8
 8009d1a:	2b08      	cmp	r3, #8
 8009d1c:	d101      	bne.n	8009d22 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e000      	b.n	8009d24 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8009d22:	2300      	movs	r3, #0
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	370c      	adds	r7, #12
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b088      	sub	sp, #32
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d101      	bne.n	8009d4a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8009d46:	2301      	movs	r3, #1
 8009d48:	e126      	b.n	8009f98 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	691b      	ldr	r3, [r3, #16]
 8009d4e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d109      	bne.n	8009d6c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f7f7 f993 	bl	8001084 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2200      	movs	r2, #0
 8009d62:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2200      	movs	r2, #0
 8009d68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4618      	mov	r0, r3
 8009d72:	f7ff ff19 	bl	8009ba8 <LL_ADC_IsDeepPowerDownEnabled>
 8009d76:	4603      	mov	r3, r0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d004      	beq.n	8009d86 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7ff feff 	bl	8009b84 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f7ff ff34 	bl	8009bf8 <LL_ADC_IsInternalRegulatorEnabled>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d115      	bne.n	8009dc2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7ff ff18 	bl	8009bd0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009da0:	4b7f      	ldr	r3, [pc, #508]	@ (8009fa0 <HAL_ADC_Init+0x270>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	099b      	lsrs	r3, r3, #6
 8009da6:	4a7f      	ldr	r2, [pc, #508]	@ (8009fa4 <HAL_ADC_Init+0x274>)
 8009da8:	fba2 2303 	umull	r2, r3, r2, r3
 8009dac:	099b      	lsrs	r3, r3, #6
 8009dae:	3301      	adds	r3, #1
 8009db0:	005b      	lsls	r3, r3, #1
 8009db2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8009db4:	e002      	b.n	8009dbc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	3b01      	subs	r3, #1
 8009dba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d1f9      	bne.n	8009db6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7ff ff16 	bl	8009bf8 <LL_ADC_IsInternalRegulatorEnabled>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d10d      	bne.n	8009dee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dd6:	f043 0210 	orr.w	r2, r3, #16
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009de2:	f043 0201 	orr.w	r2, r3, #1
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8009dea:	2301      	movs	r3, #1
 8009dec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7ff ff76 	bl	8009ce4 <LL_ADC_REG_IsConversionOngoing>
 8009df8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dfe:	f003 0310 	and.w	r3, r3, #16
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	f040 80bf 	bne.w	8009f86 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	f040 80bb 	bne.w	8009f86 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e14:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8009e18:	f043 0202 	orr.w	r2, r3, #2
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4618      	mov	r0, r3
 8009e26:	f7ff ff23 	bl	8009c70 <LL_ADC_IsEnabled>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d10b      	bne.n	8009e48 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009e30:	485d      	ldr	r0, [pc, #372]	@ (8009fa8 <HAL_ADC_Init+0x278>)
 8009e32:	f7ff ff1d 	bl	8009c70 <LL_ADC_IsEnabled>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d105      	bne.n	8009e48 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	4619      	mov	r1, r3
 8009e42:	485a      	ldr	r0, [pc, #360]	@ (8009fac <HAL_ADC_Init+0x27c>)
 8009e44:	f7ff fd74 	bl	8009930 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	7e5b      	ldrb	r3, [r3, #25]
 8009e4c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009e52:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8009e58:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8009e5e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009e66:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009e72:	2b01      	cmp	r3, #1
 8009e74:	d106      	bne.n	8009e84 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e7a:	3b01      	subs	r3, #1
 8009e7c:	045b      	lsls	r3, r3, #17
 8009e7e:	69ba      	ldr	r2, [r7, #24]
 8009e80:	4313      	orrs	r3, r2
 8009e82:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d009      	beq.n	8009ea0 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e90:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e98:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009e9a:	69ba      	ldr	r2, [r7, #24]
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	68da      	ldr	r2, [r3, #12]
 8009ea6:	4b42      	ldr	r3, [pc, #264]	@ (8009fb0 <HAL_ADC_Init+0x280>)
 8009ea8:	4013      	ands	r3, r2
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	6812      	ldr	r2, [r2, #0]
 8009eae:	69b9      	ldr	r1, [r7, #24]
 8009eb0:	430b      	orrs	r3, r1
 8009eb2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f7ff ff26 	bl	8009d0a <LL_ADC_INJ_IsConversionOngoing>
 8009ebe:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d13d      	bne.n	8009f42 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d13a      	bne.n	8009f42 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8009ed0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009ed8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8009eda:	4313      	orrs	r3, r2
 8009edc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	68db      	ldr	r3, [r3, #12]
 8009ee4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009ee8:	f023 0302 	bic.w	r3, r3, #2
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	6812      	ldr	r2, [r2, #0]
 8009ef0:	69b9      	ldr	r1, [r7, #24]
 8009ef2:	430b      	orrs	r3, r1
 8009ef4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d118      	bne.n	8009f32 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	691b      	ldr	r3, [r3, #16]
 8009f06:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009f0a:	f023 0304 	bic.w	r3, r3, #4
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8009f12:	687a      	ldr	r2, [r7, #4]
 8009f14:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8009f16:	4311      	orrs	r1, r2
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8009f1c:	4311      	orrs	r1, r2
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009f22:	430a      	orrs	r2, r1
 8009f24:	431a      	orrs	r2, r3
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f042 0201 	orr.w	r2, r2, #1
 8009f2e:	611a      	str	r2, [r3, #16]
 8009f30:	e007      	b.n	8009f42 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	691a      	ldr	r2, [r3, #16]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f022 0201 	bic.w	r2, r2, #1
 8009f40:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	691b      	ldr	r3, [r3, #16]
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	d10c      	bne.n	8009f64 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f50:	f023 010f 	bic.w	r1, r3, #15
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	69db      	ldr	r3, [r3, #28]
 8009f58:	1e5a      	subs	r2, r3, #1
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	430a      	orrs	r2, r1
 8009f60:	631a      	str	r2, [r3, #48]	@ 0x30
 8009f62:	e007      	b.n	8009f74 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f022 020f 	bic.w	r2, r2, #15
 8009f72:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f78:	f023 0303 	bic.w	r3, r3, #3
 8009f7c:	f043 0201 	orr.w	r2, r3, #1
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	655a      	str	r2, [r3, #84]	@ 0x54
 8009f84:	e007      	b.n	8009f96 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f8a:	f043 0210 	orr.w	r2, r3, #16
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8009f92:	2301      	movs	r3, #1
 8009f94:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8009f96:	7ffb      	ldrb	r3, [r7, #31]
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3720      	adds	r7, #32
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	2000005c 	.word	0x2000005c
 8009fa4:	053e2d63 	.word	0x053e2d63
 8009fa8:	50040000 	.word	0x50040000
 8009fac:	50040300 	.word	0x50040300
 8009fb0:	fff0c007 	.word	0xfff0c007

08009fb4 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f7ff fe8f 	bl	8009ce4 <LL_ADC_REG_IsConversionOngoing>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	f040 80a0 	bne.w	800a10e <HAL_ADC_Start_IT+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d101      	bne.n	8009fdc <HAL_ADC_Start_IT+0x28>
 8009fd8:	2302      	movs	r3, #2
 8009fda:	e09b      	b.n	800a114 <HAL_ADC_Start_IT+0x160>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 fe51 	bl	800ac8c <ADC_Enable>
 8009fea:	4603      	mov	r3, r0
 8009fec:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8009fee:	7bfb      	ldrb	r3, [r7, #15]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	f040 8087 	bne.w	800a104 <HAL_ADC_Start_IT+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ffa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009ffe:	f023 0301 	bic.w	r3, r3, #1
 800a002:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a00e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a012:	2b00      	cmp	r3, #0
 800a014:	d006      	beq.n	800a024 <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a01a:	f023 0206 	bic.w	r2, r3, #6
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	659a      	str	r2, [r3, #88]	@ 0x58
 800a022:	e002      	b.n	800a02a <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2200      	movs	r2, #0
 800a028:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	221c      	movs	r2, #28
 800a030:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	685a      	ldr	r2, [r3, #4]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f022 021c 	bic.w	r2, r2, #28
 800a048:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	695b      	ldr	r3, [r3, #20]
 800a04e:	2b08      	cmp	r3, #8
 800a050:	d108      	bne.n	800a064 <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	685a      	ldr	r2, [r3, #4]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f042 0208 	orr.w	r2, r2, #8
 800a060:	605a      	str	r2, [r3, #4]
          break;
 800a062:	e008      	b.n	800a076 <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	685a      	ldr	r2, [r3, #4]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f042 0204 	orr.w	r2, r2, #4
 800a072:	605a      	str	r2, [r3, #4]
          break;
 800a074:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d107      	bne.n	800a08e <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	685a      	ldr	r2, [r3, #4]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f042 0210 	orr.w	r2, r2, #16
 800a08c:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	68db      	ldr	r3, [r3, #12]
 800a094:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d02d      	beq.n	800a0f8 <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0a0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800a0a4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	695b      	ldr	r3, [r3, #20]
 800a0b0:	2b08      	cmp	r3, #8
 800a0b2:	d110      	bne.n	800a0d6 <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	685a      	ldr	r2, [r3, #4]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f022 0220 	bic.w	r2, r2, #32
 800a0c2:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	685a      	ldr	r2, [r3, #4]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a0d2:	605a      	str	r2, [r3, #4]
            break;
 800a0d4:	e010      	b.n	800a0f8 <HAL_ADC_Start_IT+0x144>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	685a      	ldr	r2, [r3, #4]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a0e4:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	685a      	ldr	r2, [r3, #4]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f042 0220 	orr.w	r2, r2, #32
 800a0f4:	605a      	str	r2, [r3, #4]
            break;
 800a0f6:	bf00      	nop
        }
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f7ff fddd 	bl	8009cbc <LL_ADC_REG_StartConversion>
 800a102:	e006      	b.n	800a112 <HAL_ADC_Start_IT+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2200      	movs	r2, #0
 800a108:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800a10c:	e001      	b.n	800a112 <HAL_ADC_Start_IT+0x15e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800a10e:	2302      	movs	r3, #2
 800a110:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800a112:	7bfb      	ldrb	r3, [r7, #15]
}
 800a114:	4618      	mov	r0, r3
 800a116:	3710      	adds	r7, #16
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b083      	sub	sp, #12
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	370c      	adds	r7, #12
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr

0800a136 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800a136:	b580      	push	{r7, lr}
 800a138:	b088      	sub	sp, #32
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800a13e:	2300      	movs	r3, #0
 800a140:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	f003 0302 	and.w	r3, r3, #2
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d017      	beq.n	800a18c <HAL_ADC_IRQHandler+0x56>
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	f003 0302 	and.w	r3, r3, #2
 800a162:	2b00      	cmp	r3, #0
 800a164:	d012      	beq.n	800a18c <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a16a:	f003 0310 	and.w	r3, r3, #16
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d105      	bne.n	800a17e <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a176:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f000 ff1e 	bl	800afc0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2202      	movs	r2, #2
 800a18a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	f003 0304 	and.w	r3, r3, #4
 800a192:	2b00      	cmp	r3, #0
 800a194:	d004      	beq.n	800a1a0 <HAL_ADC_IRQHandler+0x6a>
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	f003 0304 	and.w	r3, r3, #4
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d109      	bne.n	800a1b4 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d05e      	beq.n	800a268 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	f003 0308 	and.w	r3, r3, #8
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d059      	beq.n	800a268 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1b8:	f003 0310 	and.w	r3, r3, #16
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d105      	bne.n	800a1cc <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1c4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f7ff fc36 	bl	8009a42 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d03e      	beq.n	800a25a <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d135      	bne.n	800a25a <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f003 0308 	and.w	r3, r3, #8
 800a1f8:	2b08      	cmp	r3, #8
 800a1fa:	d12e      	bne.n	800a25a <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4618      	mov	r0, r3
 800a202:	f7ff fd6f 	bl	8009ce4 <LL_ADC_REG_IsConversionOngoing>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d11a      	bne.n	800a242 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	685a      	ldr	r2, [r3, #4]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f022 020c 	bic.w	r2, r2, #12
 800a21a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a220:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a22c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a230:	2b00      	cmp	r3, #0
 800a232:	d112      	bne.n	800a25a <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a238:	f043 0201 	orr.w	r2, r3, #1
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	655a      	str	r2, [r3, #84]	@ 0x54
 800a240:	e00b      	b.n	800a25a <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a246:	f043 0210 	orr.w	r2, r3, #16
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a252:	f043 0201 	orr.w	r2, r3, #1
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f7fe f8ea 	bl	8008434 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	220c      	movs	r2, #12
 800a266:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800a268:	69bb      	ldr	r3, [r7, #24]
 800a26a:	f003 0320 	and.w	r3, r3, #32
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d004      	beq.n	800a27c <HAL_ADC_IRQHandler+0x146>
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	f003 0320 	and.w	r3, r3, #32
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d109      	bne.n	800a290 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800a282:	2b00      	cmp	r3, #0
 800a284:	d072      	beq.n	800a36c <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d06d      	beq.n	800a36c <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a294:	f003 0310 	and.w	r3, r3, #16
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d105      	bne.n	800a2a8 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2a0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f7ff fc07 	bl	8009ac0 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800a2b2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f7ff fbc2 	bl	8009a42 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a2be:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	68db      	ldr	r3, [r3, #12]
 800a2c6:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d047      	beq.n	800a35e <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d007      	beq.n	800a2e8 <HAL_ADC_IRQHandler+0x1b2>
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d03f      	beq.n	800a35e <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d13a      	bne.n	800a35e <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2f2:	2b40      	cmp	r3, #64	@ 0x40
 800a2f4:	d133      	bne.n	800a35e <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d12e      	bne.n	800a35e <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4618      	mov	r0, r3
 800a306:	f7ff fd00 	bl	8009d0a <LL_ADC_INJ_IsConversionOngoing>
 800a30a:	4603      	mov	r3, r0
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d11a      	bne.n	800a346 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	685a      	ldr	r2, [r3, #4]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800a31e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a324:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a334:	2b00      	cmp	r3, #0
 800a336:	d112      	bne.n	800a35e <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a33c:	f043 0201 	orr.w	r2, r3, #1
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	655a      	str	r2, [r3, #84]	@ 0x54
 800a344:	e00b      	b.n	800a35e <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a34a:	f043 0210 	orr.w	r2, r3, #16
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a356:	f043 0201 	orr.w	r2, r3, #1
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 fe06 	bl	800af70 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2260      	movs	r2, #96	@ 0x60
 800a36a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800a36c:	69bb      	ldr	r3, [r7, #24]
 800a36e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a372:	2b00      	cmp	r3, #0
 800a374:	d011      	beq.n	800a39a <HAL_ADC_IRQHandler+0x264>
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d00c      	beq.n	800a39a <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a384:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 f886 	bl	800a49e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	2280      	movs	r2, #128	@ 0x80
 800a398:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800a39a:	69bb      	ldr	r3, [r7, #24]
 800a39c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d012      	beq.n	800a3ca <HAL_ADC_IRQHandler+0x294>
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d00d      	beq.n	800a3ca <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3b2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 fdec 	bl	800af98 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a3c8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800a3ca:	69bb      	ldr	r3, [r7, #24]
 800a3cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d012      	beq.n	800a3fa <HAL_ADC_IRQHandler+0x2c4>
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d00d      	beq.n	800a3fa <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3e2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 fdde 	bl	800afac <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a3f8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800a3fa:	69bb      	ldr	r3, [r7, #24]
 800a3fc:	f003 0310 	and.w	r3, r3, #16
 800a400:	2b00      	cmp	r3, #0
 800a402:	d02a      	beq.n	800a45a <HAL_ADC_IRQHandler+0x324>
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	f003 0310 	and.w	r3, r3, #16
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d025      	beq.n	800a45a <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a412:	2b00      	cmp	r3, #0
 800a414:	d102      	bne.n	800a41c <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 800a416:	2301      	movs	r3, #1
 800a418:	61fb      	str	r3, [r7, #28]
 800a41a:	e008      	b.n	800a42e <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	68db      	ldr	r3, [r3, #12]
 800a422:	f003 0301 	and.w	r3, r3, #1
 800a426:	2b00      	cmp	r3, #0
 800a428:	d001      	beq.n	800a42e <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 800a42a:	2301      	movs	r3, #1
 800a42c:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 800a42e:	69fb      	ldr	r3, [r7, #28]
 800a430:	2b01      	cmp	r3, #1
 800a432:	d10e      	bne.n	800a452 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a438:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a444:	f043 0202 	orr.w	r2, r3, #2
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 f830 	bl	800a4b2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	2210      	movs	r2, #16
 800a458:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a460:	2b00      	cmp	r3, #0
 800a462:	d018      	beq.n	800a496 <HAL_ADC_IRQHandler+0x360>
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d013      	beq.n	800a496 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a472:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a47e:	f043 0208 	orr.w	r2, r3, #8
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a48e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 fd77 	bl	800af84 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800a496:	bf00      	nop
 800a498:	3720      	adds	r7, #32
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}

0800a49e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800a49e:	b480      	push	{r7}
 800a4a0:	b083      	sub	sp, #12
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800a4a6:	bf00      	nop
 800a4a8:	370c      	adds	r7, #12
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr

0800a4b2 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a4b2:	b480      	push	{r7}
 800a4b4:	b083      	sub	sp, #12
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800a4ba:	bf00      	nop
 800a4bc:	370c      	adds	r7, #12
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr
	...

0800a4c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b0b6      	sub	sp, #216	@ 0xd8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d101      	bne.n	800a4ea <HAL_ADC_ConfigChannel+0x22>
 800a4e6:	2302      	movs	r3, #2
 800a4e8:	e3bb      	b.n	800ac62 <HAL_ADC_ConfigChannel+0x79a>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7ff fbf4 	bl	8009ce4 <LL_ADC_REG_IsConversionOngoing>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	f040 83a0 	bne.w	800ac44 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	2b05      	cmp	r3, #5
 800a512:	d824      	bhi.n	800a55e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	3b02      	subs	r3, #2
 800a51a:	2b03      	cmp	r3, #3
 800a51c:	d81b      	bhi.n	800a556 <HAL_ADC_ConfigChannel+0x8e>
 800a51e:	a201      	add	r2, pc, #4	@ (adr r2, 800a524 <HAL_ADC_ConfigChannel+0x5c>)
 800a520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a524:	0800a535 	.word	0x0800a535
 800a528:	0800a53d 	.word	0x0800a53d
 800a52c:	0800a545 	.word	0x0800a545
 800a530:	0800a54d 	.word	0x0800a54d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800a534:	230c      	movs	r3, #12
 800a536:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800a53a:	e010      	b.n	800a55e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800a53c:	2312      	movs	r3, #18
 800a53e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800a542:	e00c      	b.n	800a55e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800a544:	2318      	movs	r3, #24
 800a546:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800a54a:	e008      	b.n	800a55e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800a54c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a550:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800a554:	e003      	b.n	800a55e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800a556:	2306      	movs	r3, #6
 800a558:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800a55c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6818      	ldr	r0, [r3, #0]
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	461a      	mov	r2, r3
 800a568:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800a56c:	f7ff fa7c 	bl	8009a68 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4618      	mov	r0, r3
 800a576:	f7ff fbb5 	bl	8009ce4 <LL_ADC_REG_IsConversionOngoing>
 800a57a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4618      	mov	r0, r3
 800a584:	f7ff fbc1 	bl	8009d0a <LL_ADC_INJ_IsConversionOngoing>
 800a588:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a58c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a590:	2b00      	cmp	r3, #0
 800a592:	f040 81a4 	bne.w	800a8de <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a596:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	f040 819f 	bne.w	800a8de <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6818      	ldr	r0, [r3, #0]
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	6819      	ldr	r1, [r3, #0]
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	689b      	ldr	r3, [r3, #8]
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	f7ff fa9a 	bl	8009ae6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	695a      	ldr	r2, [r3, #20]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	68db      	ldr	r3, [r3, #12]
 800a5bc:	08db      	lsrs	r3, r3, #3
 800a5be:	f003 0303 	and.w	r3, r3, #3
 800a5c2:	005b      	lsls	r3, r3, #1
 800a5c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a5c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	691b      	ldr	r3, [r3, #16]
 800a5d0:	2b04      	cmp	r3, #4
 800a5d2:	d00a      	beq.n	800a5ea <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6818      	ldr	r0, [r3, #0]
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	6919      	ldr	r1, [r3, #16]
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a5e4:	f7ff f9d8 	bl	8009998 <LL_ADC_SetOffset>
 800a5e8:	e179      	b.n	800a8de <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	2100      	movs	r1, #0
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f7ff f9f5 	bl	80099e0 <LL_ADC_GetOffsetChannel>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d10a      	bne.n	800a616 <HAL_ADC_ConfigChannel+0x14e>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	2100      	movs	r1, #0
 800a606:	4618      	mov	r0, r3
 800a608:	f7ff f9ea 	bl	80099e0 <LL_ADC_GetOffsetChannel>
 800a60c:	4603      	mov	r3, r0
 800a60e:	0e9b      	lsrs	r3, r3, #26
 800a610:	f003 021f 	and.w	r2, r3, #31
 800a614:	e01e      	b.n	800a654 <HAL_ADC_ConfigChannel+0x18c>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	2100      	movs	r1, #0
 800a61c:	4618      	mov	r0, r3
 800a61e:	f7ff f9df 	bl	80099e0 <LL_ADC_GetOffsetChannel>
 800a622:	4603      	mov	r3, r0
 800a624:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a628:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a62c:	fa93 f3a3 	rbit	r3, r3
 800a630:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800a634:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a638:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800a63c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a640:	2b00      	cmp	r3, #0
 800a642:	d101      	bne.n	800a648 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800a644:	2320      	movs	r3, #32
 800a646:	e004      	b.n	800a652 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800a648:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a64c:	fab3 f383 	clz	r3, r3
 800a650:	b2db      	uxtb	r3, r3
 800a652:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d105      	bne.n	800a66c <HAL_ADC_ConfigChannel+0x1a4>
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	0e9b      	lsrs	r3, r3, #26
 800a666:	f003 031f 	and.w	r3, r3, #31
 800a66a:	e018      	b.n	800a69e <HAL_ADC_ConfigChannel+0x1d6>
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a674:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a678:	fa93 f3a3 	rbit	r3, r3
 800a67c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800a680:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a684:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800a688:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d101      	bne.n	800a694 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800a690:	2320      	movs	r3, #32
 800a692:	e004      	b.n	800a69e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800a694:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a698:	fab3 f383 	clz	r3, r3
 800a69c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	d106      	bne.n	800a6b0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	2100      	movs	r1, #0
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7ff f9ae 	bl	8009a0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	2101      	movs	r1, #1
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f7ff f992 	bl	80099e0 <LL_ADC_GetOffsetChannel>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d10a      	bne.n	800a6dc <HAL_ADC_ConfigChannel+0x214>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2101      	movs	r1, #1
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f7ff f987 	bl	80099e0 <LL_ADC_GetOffsetChannel>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	0e9b      	lsrs	r3, r3, #26
 800a6d6:	f003 021f 	and.w	r2, r3, #31
 800a6da:	e01e      	b.n	800a71a <HAL_ADC_ConfigChannel+0x252>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	2101      	movs	r1, #1
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f7ff f97c 	bl	80099e0 <LL_ADC_GetOffsetChannel>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a6ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a6f2:	fa93 f3a3 	rbit	r3, r3
 800a6f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800a6fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a6fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800a702:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a706:	2b00      	cmp	r3, #0
 800a708:	d101      	bne.n	800a70e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800a70a:	2320      	movs	r3, #32
 800a70c:	e004      	b.n	800a718 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800a70e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a712:	fab3 f383 	clz	r3, r3
 800a716:	b2db      	uxtb	r3, r3
 800a718:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a722:	2b00      	cmp	r3, #0
 800a724:	d105      	bne.n	800a732 <HAL_ADC_ConfigChannel+0x26a>
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	0e9b      	lsrs	r3, r3, #26
 800a72c:	f003 031f 	and.w	r3, r3, #31
 800a730:	e018      	b.n	800a764 <HAL_ADC_ConfigChannel+0x29c>
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a73a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a73e:	fa93 f3a3 	rbit	r3, r3
 800a742:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800a746:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a74a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800a74e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a752:	2b00      	cmp	r3, #0
 800a754:	d101      	bne.n	800a75a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800a756:	2320      	movs	r3, #32
 800a758:	e004      	b.n	800a764 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800a75a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a75e:	fab3 f383 	clz	r3, r3
 800a762:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800a764:	429a      	cmp	r2, r3
 800a766:	d106      	bne.n	800a776 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2200      	movs	r2, #0
 800a76e:	2101      	movs	r1, #1
 800a770:	4618      	mov	r0, r3
 800a772:	f7ff f94b 	bl	8009a0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	2102      	movs	r1, #2
 800a77c:	4618      	mov	r0, r3
 800a77e:	f7ff f92f 	bl	80099e0 <LL_ADC_GetOffsetChannel>
 800a782:	4603      	mov	r3, r0
 800a784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d10a      	bne.n	800a7a2 <HAL_ADC_ConfigChannel+0x2da>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	2102      	movs	r1, #2
 800a792:	4618      	mov	r0, r3
 800a794:	f7ff f924 	bl	80099e0 <LL_ADC_GetOffsetChannel>
 800a798:	4603      	mov	r3, r0
 800a79a:	0e9b      	lsrs	r3, r3, #26
 800a79c:	f003 021f 	and.w	r2, r3, #31
 800a7a0:	e01e      	b.n	800a7e0 <HAL_ADC_ConfigChannel+0x318>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	2102      	movs	r1, #2
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f7ff f919 	bl	80099e0 <LL_ADC_GetOffsetChannel>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a7b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a7b8:	fa93 f3a3 	rbit	r3, r3
 800a7bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800a7c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a7c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800a7c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d101      	bne.n	800a7d4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800a7d0:	2320      	movs	r3, #32
 800a7d2:	e004      	b.n	800a7de <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800a7d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a7d8:	fab3 f383 	clz	r3, r3
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d105      	bne.n	800a7f8 <HAL_ADC_ConfigChannel+0x330>
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	0e9b      	lsrs	r3, r3, #26
 800a7f2:	f003 031f 	and.w	r3, r3, #31
 800a7f6:	e014      	b.n	800a822 <HAL_ADC_ConfigChannel+0x35a>
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a7fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a800:	fa93 f3a3 	rbit	r3, r3
 800a804:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800a806:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a808:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800a80c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a810:	2b00      	cmp	r3, #0
 800a812:	d101      	bne.n	800a818 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800a814:	2320      	movs	r3, #32
 800a816:	e004      	b.n	800a822 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800a818:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a81c:	fab3 f383 	clz	r3, r3
 800a820:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800a822:	429a      	cmp	r2, r3
 800a824:	d106      	bne.n	800a834 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	2200      	movs	r2, #0
 800a82c:	2102      	movs	r1, #2
 800a82e:	4618      	mov	r0, r3
 800a830:	f7ff f8ec 	bl	8009a0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	2103      	movs	r1, #3
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7ff f8d0 	bl	80099e0 <LL_ADC_GetOffsetChannel>
 800a840:	4603      	mov	r3, r0
 800a842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a846:	2b00      	cmp	r3, #0
 800a848:	d10a      	bne.n	800a860 <HAL_ADC_ConfigChannel+0x398>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	2103      	movs	r1, #3
 800a850:	4618      	mov	r0, r3
 800a852:	f7ff f8c5 	bl	80099e0 <LL_ADC_GetOffsetChannel>
 800a856:	4603      	mov	r3, r0
 800a858:	0e9b      	lsrs	r3, r3, #26
 800a85a:	f003 021f 	and.w	r2, r3, #31
 800a85e:	e017      	b.n	800a890 <HAL_ADC_ConfigChannel+0x3c8>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	2103      	movs	r1, #3
 800a866:	4618      	mov	r0, r3
 800a868:	f7ff f8ba 	bl	80099e0 <LL_ADC_GetOffsetChannel>
 800a86c:	4603      	mov	r3, r0
 800a86e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a870:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a872:	fa93 f3a3 	rbit	r3, r3
 800a876:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800a878:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a87a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800a87c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d101      	bne.n	800a886 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800a882:	2320      	movs	r3, #32
 800a884:	e003      	b.n	800a88e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800a886:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a888:	fab3 f383 	clz	r3, r3
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d105      	bne.n	800a8a8 <HAL_ADC_ConfigChannel+0x3e0>
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	0e9b      	lsrs	r3, r3, #26
 800a8a2:	f003 031f 	and.w	r3, r3, #31
 800a8a6:	e011      	b.n	800a8cc <HAL_ADC_ConfigChannel+0x404>
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a8ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a8b0:	fa93 f3a3 	rbit	r3, r3
 800a8b4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800a8b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a8b8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800a8ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d101      	bne.n	800a8c4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800a8c0:	2320      	movs	r3, #32
 800a8c2:	e003      	b.n	800a8cc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800a8c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a8c6:	fab3 f383 	clz	r3, r3
 800a8ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d106      	bne.n	800a8de <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	2103      	movs	r1, #3
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f7ff f897 	bl	8009a0c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f7ff f9c4 	bl	8009c70 <LL_ADC_IsEnabled>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	f040 8140 	bne.w	800ab70 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6818      	ldr	r0, [r3, #0]
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	6819      	ldr	r1, [r3, #0]
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	68db      	ldr	r3, [r3, #12]
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	f7ff f91d 	bl	8009b3c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	68db      	ldr	r3, [r3, #12]
 800a906:	4a8f      	ldr	r2, [pc, #572]	@ (800ab44 <HAL_ADC_ConfigChannel+0x67c>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	f040 8131 	bne.w	800ab70 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d10b      	bne.n	800a936 <HAL_ADC_ConfigChannel+0x46e>
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	0e9b      	lsrs	r3, r3, #26
 800a924:	3301      	adds	r3, #1
 800a926:	f003 031f 	and.w	r3, r3, #31
 800a92a:	2b09      	cmp	r3, #9
 800a92c:	bf94      	ite	ls
 800a92e:	2301      	movls	r3, #1
 800a930:	2300      	movhi	r3, #0
 800a932:	b2db      	uxtb	r3, r3
 800a934:	e019      	b.n	800a96a <HAL_ADC_ConfigChannel+0x4a2>
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a93c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a93e:	fa93 f3a3 	rbit	r3, r3
 800a942:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800a944:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a946:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800a948:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d101      	bne.n	800a952 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800a94e:	2320      	movs	r3, #32
 800a950:	e003      	b.n	800a95a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800a952:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a954:	fab3 f383 	clz	r3, r3
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	3301      	adds	r3, #1
 800a95c:	f003 031f 	and.w	r3, r3, #31
 800a960:	2b09      	cmp	r3, #9
 800a962:	bf94      	ite	ls
 800a964:	2301      	movls	r3, #1
 800a966:	2300      	movhi	r3, #0
 800a968:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d079      	beq.n	800aa62 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a976:	2b00      	cmp	r3, #0
 800a978:	d107      	bne.n	800a98a <HAL_ADC_ConfigChannel+0x4c2>
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	0e9b      	lsrs	r3, r3, #26
 800a980:	3301      	adds	r3, #1
 800a982:	069b      	lsls	r3, r3, #26
 800a984:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a988:	e015      	b.n	800a9b6 <HAL_ADC_ConfigChannel+0x4ee>
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a990:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a992:	fa93 f3a3 	rbit	r3, r3
 800a996:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800a998:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a99a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800a99c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d101      	bne.n	800a9a6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800a9a2:	2320      	movs	r3, #32
 800a9a4:	e003      	b.n	800a9ae <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800a9a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9a8:	fab3 f383 	clz	r3, r3
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	069b      	lsls	r3, r3, #26
 800a9b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d109      	bne.n	800a9d6 <HAL_ADC_ConfigChannel+0x50e>
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	0e9b      	lsrs	r3, r3, #26
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	f003 031f 	and.w	r3, r3, #31
 800a9ce:	2101      	movs	r1, #1
 800a9d0:	fa01 f303 	lsl.w	r3, r1, r3
 800a9d4:	e017      	b.n	800aa06 <HAL_ADC_ConfigChannel+0x53e>
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a9dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9de:	fa93 f3a3 	rbit	r3, r3
 800a9e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800a9e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9e6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800a9e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d101      	bne.n	800a9f2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800a9ee:	2320      	movs	r3, #32
 800a9f0:	e003      	b.n	800a9fa <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800a9f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9f4:	fab3 f383 	clz	r3, r3
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	f003 031f 	and.w	r3, r3, #31
 800aa00:	2101      	movs	r1, #1
 800aa02:	fa01 f303 	lsl.w	r3, r1, r3
 800aa06:	ea42 0103 	orr.w	r1, r2, r3
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d10a      	bne.n	800aa2c <HAL_ADC_ConfigChannel+0x564>
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	0e9b      	lsrs	r3, r3, #26
 800aa1c:	3301      	adds	r3, #1
 800aa1e:	f003 021f 	and.w	r2, r3, #31
 800aa22:	4613      	mov	r3, r2
 800aa24:	005b      	lsls	r3, r3, #1
 800aa26:	4413      	add	r3, r2
 800aa28:	051b      	lsls	r3, r3, #20
 800aa2a:	e018      	b.n	800aa5e <HAL_ADC_ConfigChannel+0x596>
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa34:	fa93 f3a3 	rbit	r3, r3
 800aa38:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800aa3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800aa3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d101      	bne.n	800aa48 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800aa44:	2320      	movs	r3, #32
 800aa46:	e003      	b.n	800aa50 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800aa48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa4a:	fab3 f383 	clz	r3, r3
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	3301      	adds	r3, #1
 800aa52:	f003 021f 	and.w	r2, r3, #31
 800aa56:	4613      	mov	r3, r2
 800aa58:	005b      	lsls	r3, r3, #1
 800aa5a:	4413      	add	r3, r2
 800aa5c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800aa5e:	430b      	orrs	r3, r1
 800aa60:	e081      	b.n	800ab66 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d107      	bne.n	800aa7e <HAL_ADC_ConfigChannel+0x5b6>
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	0e9b      	lsrs	r3, r3, #26
 800aa74:	3301      	adds	r3, #1
 800aa76:	069b      	lsls	r3, r3, #26
 800aa78:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800aa7c:	e015      	b.n	800aaaa <HAL_ADC_ConfigChannel+0x5e2>
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa86:	fa93 f3a3 	rbit	r3, r3
 800aa8a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800aa8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800aa90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d101      	bne.n	800aa9a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800aa96:	2320      	movs	r3, #32
 800aa98:	e003      	b.n	800aaa2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800aa9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa9c:	fab3 f383 	clz	r3, r3
 800aaa0:	b2db      	uxtb	r3, r3
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	069b      	lsls	r3, r3, #26
 800aaa6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d109      	bne.n	800aaca <HAL_ADC_ConfigChannel+0x602>
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	0e9b      	lsrs	r3, r3, #26
 800aabc:	3301      	adds	r3, #1
 800aabe:	f003 031f 	and.w	r3, r3, #31
 800aac2:	2101      	movs	r1, #1
 800aac4:	fa01 f303 	lsl.w	r3, r1, r3
 800aac8:	e017      	b.n	800aafa <HAL_ADC_ConfigChannel+0x632>
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aad0:	69fb      	ldr	r3, [r7, #28]
 800aad2:	fa93 f3a3 	rbit	r3, r3
 800aad6:	61bb      	str	r3, [r7, #24]
  return result;
 800aad8:	69bb      	ldr	r3, [r7, #24]
 800aada:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800aadc:	6a3b      	ldr	r3, [r7, #32]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d101      	bne.n	800aae6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800aae2:	2320      	movs	r3, #32
 800aae4:	e003      	b.n	800aaee <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800aae6:	6a3b      	ldr	r3, [r7, #32]
 800aae8:	fab3 f383 	clz	r3, r3
 800aaec:	b2db      	uxtb	r3, r3
 800aaee:	3301      	adds	r3, #1
 800aaf0:	f003 031f 	and.w	r3, r3, #31
 800aaf4:	2101      	movs	r1, #1
 800aaf6:	fa01 f303 	lsl.w	r3, r1, r3
 800aafa:	ea42 0103 	orr.w	r1, r2, r3
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d10d      	bne.n	800ab26 <HAL_ADC_ConfigChannel+0x65e>
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	0e9b      	lsrs	r3, r3, #26
 800ab10:	3301      	adds	r3, #1
 800ab12:	f003 021f 	and.w	r2, r3, #31
 800ab16:	4613      	mov	r3, r2
 800ab18:	005b      	lsls	r3, r3, #1
 800ab1a:	4413      	add	r3, r2
 800ab1c:	3b1e      	subs	r3, #30
 800ab1e:	051b      	lsls	r3, r3, #20
 800ab20:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800ab24:	e01e      	b.n	800ab64 <HAL_ADC_ConfigChannel+0x69c>
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	fa93 f3a3 	rbit	r3, r3
 800ab32:	60fb      	str	r3, [r7, #12]
  return result;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d104      	bne.n	800ab48 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800ab3e:	2320      	movs	r3, #32
 800ab40:	e006      	b.n	800ab50 <HAL_ADC_ConfigChannel+0x688>
 800ab42:	bf00      	nop
 800ab44:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	fab3 f383 	clz	r3, r3
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	3301      	adds	r3, #1
 800ab52:	f003 021f 	and.w	r2, r3, #31
 800ab56:	4613      	mov	r3, r2
 800ab58:	005b      	lsls	r3, r3, #1
 800ab5a:	4413      	add	r3, r2
 800ab5c:	3b1e      	subs	r3, #30
 800ab5e:	051b      	lsls	r3, r3, #20
 800ab60:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ab64:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800ab66:	683a      	ldr	r2, [r7, #0]
 800ab68:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	f7fe ffbb 	bl	8009ae6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	681a      	ldr	r2, [r3, #0]
 800ab74:	4b3d      	ldr	r3, [pc, #244]	@ (800ac6c <HAL_ADC_ConfigChannel+0x7a4>)
 800ab76:	4013      	ands	r3, r2
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d06c      	beq.n	800ac56 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800ab7c:	483c      	ldr	r0, [pc, #240]	@ (800ac70 <HAL_ADC_ConfigChannel+0x7a8>)
 800ab7e:	f7fe fefd 	bl	800997c <LL_ADC_GetCommonPathInternalCh>
 800ab82:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4a3a      	ldr	r2, [pc, #232]	@ (800ac74 <HAL_ADC_ConfigChannel+0x7ac>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d127      	bne.n	800abe0 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800ab90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ab94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d121      	bne.n	800abe0 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4a35      	ldr	r2, [pc, #212]	@ (800ac78 <HAL_ADC_ConfigChannel+0x7b0>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d157      	bne.n	800ac56 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800aba6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800abaa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800abae:	4619      	mov	r1, r3
 800abb0:	482f      	ldr	r0, [pc, #188]	@ (800ac70 <HAL_ADC_ConfigChannel+0x7a8>)
 800abb2:	f7fe fed0 	bl	8009956 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800abb6:	4b31      	ldr	r3, [pc, #196]	@ (800ac7c <HAL_ADC_ConfigChannel+0x7b4>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	099b      	lsrs	r3, r3, #6
 800abbc:	4a30      	ldr	r2, [pc, #192]	@ (800ac80 <HAL_ADC_ConfigChannel+0x7b8>)
 800abbe:	fba2 2303 	umull	r2, r3, r2, r3
 800abc2:	099b      	lsrs	r3, r3, #6
 800abc4:	1c5a      	adds	r2, r3, #1
 800abc6:	4613      	mov	r3, r2
 800abc8:	005b      	lsls	r3, r3, #1
 800abca:	4413      	add	r3, r2
 800abcc:	009b      	lsls	r3, r3, #2
 800abce:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800abd0:	e002      	b.n	800abd8 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	3b01      	subs	r3, #1
 800abd6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d1f9      	bne.n	800abd2 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800abde:	e03a      	b.n	800ac56 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4a27      	ldr	r2, [pc, #156]	@ (800ac84 <HAL_ADC_ConfigChannel+0x7bc>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d113      	bne.n	800ac12 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800abea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800abee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d10d      	bne.n	800ac12 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4a1f      	ldr	r2, [pc, #124]	@ (800ac78 <HAL_ADC_ConfigChannel+0x7b0>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d12a      	bne.n	800ac56 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800ac00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ac04:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ac08:	4619      	mov	r1, r3
 800ac0a:	4819      	ldr	r0, [pc, #100]	@ (800ac70 <HAL_ADC_ConfigChannel+0x7a8>)
 800ac0c:	f7fe fea3 	bl	8009956 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800ac10:	e021      	b.n	800ac56 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4a1c      	ldr	r2, [pc, #112]	@ (800ac88 <HAL_ADC_ConfigChannel+0x7c0>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d11c      	bne.n	800ac56 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800ac1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ac20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d116      	bne.n	800ac56 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	4a12      	ldr	r2, [pc, #72]	@ (800ac78 <HAL_ADC_ConfigChannel+0x7b0>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d111      	bne.n	800ac56 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800ac32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ac36:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	480c      	ldr	r0, [pc, #48]	@ (800ac70 <HAL_ADC_ConfigChannel+0x7a8>)
 800ac3e:	f7fe fe8a 	bl	8009956 <LL_ADC_SetCommonPathInternalCh>
 800ac42:	e008      	b.n	800ac56 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac48:	f043 0220 	orr.w	r2, r3, #32
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800ac50:	2301      	movs	r3, #1
 800ac52:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800ac5e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	37d8      	adds	r7, #216	@ 0xd8
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	80080000 	.word	0x80080000
 800ac70:	50040300 	.word	0x50040300
 800ac74:	c7520000 	.word	0xc7520000
 800ac78:	50040000 	.word	0x50040000
 800ac7c:	2000005c 	.word	0x2000005c
 800ac80:	053e2d63 	.word	0x053e2d63
 800ac84:	cb840000 	.word	0xcb840000
 800ac88:	80000001 	.word	0x80000001

0800ac8c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b084      	sub	sp, #16
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800ac94:	2300      	movs	r3, #0
 800ac96:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f7fe ffe7 	bl	8009c70 <LL_ADC_IsEnabled>
 800aca2:	4603      	mov	r3, r0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d169      	bne.n	800ad7c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	689a      	ldr	r2, [r3, #8]
 800acae:	4b36      	ldr	r3, [pc, #216]	@ (800ad88 <ADC_Enable+0xfc>)
 800acb0:	4013      	ands	r3, r2
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d00d      	beq.n	800acd2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acba:	f043 0210 	orr.w	r2, r3, #16
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800acc6:	f043 0201 	orr.w	r2, r3, #1
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800acce:	2301      	movs	r3, #1
 800acd0:	e055      	b.n	800ad7e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4618      	mov	r0, r3
 800acd8:	f7fe ffa2 	bl	8009c20 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800acdc:	482b      	ldr	r0, [pc, #172]	@ (800ad8c <ADC_Enable+0x100>)
 800acde:	f7fe fe4d 	bl	800997c <LL_ADC_GetCommonPathInternalCh>
 800ace2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800ace4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d013      	beq.n	800ad14 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800acec:	4b28      	ldr	r3, [pc, #160]	@ (800ad90 <ADC_Enable+0x104>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	099b      	lsrs	r3, r3, #6
 800acf2:	4a28      	ldr	r2, [pc, #160]	@ (800ad94 <ADC_Enable+0x108>)
 800acf4:	fba2 2303 	umull	r2, r3, r2, r3
 800acf8:	099b      	lsrs	r3, r3, #6
 800acfa:	1c5a      	adds	r2, r3, #1
 800acfc:	4613      	mov	r3, r2
 800acfe:	005b      	lsls	r3, r3, #1
 800ad00:	4413      	add	r3, r2
 800ad02:	009b      	lsls	r3, r3, #2
 800ad04:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800ad06:	e002      	b.n	800ad0e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	3b01      	subs	r3, #1
 800ad0c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d1f9      	bne.n	800ad08 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800ad14:	f7fe fddc 	bl	80098d0 <HAL_GetTick>
 800ad18:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ad1a:	e028      	b.n	800ad6e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4618      	mov	r0, r3
 800ad22:	f7fe ffa5 	bl	8009c70 <LL_ADC_IsEnabled>
 800ad26:	4603      	mov	r3, r0
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d104      	bne.n	800ad36 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7fe ff75 	bl	8009c20 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800ad36:	f7fe fdcb 	bl	80098d0 <HAL_GetTick>
 800ad3a:	4602      	mov	r2, r0
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	1ad3      	subs	r3, r2, r3
 800ad40:	2b02      	cmp	r3, #2
 800ad42:	d914      	bls.n	800ad6e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f003 0301 	and.w	r3, r3, #1
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d00d      	beq.n	800ad6e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad56:	f043 0210 	orr.w	r2, r3, #16
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad62:	f043 0201 	orr.w	r2, r3, #1
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e007      	b.n	800ad7e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f003 0301 	and.w	r3, r3, #1
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	d1cf      	bne.n	800ad1c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800ad7c:	2300      	movs	r3, #0
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop
 800ad88:	8000003f 	.word	0x8000003f
 800ad8c:	50040300 	.word	0x50040300
 800ad90:	2000005c 	.word	0x2000005c
 800ad94:	053e2d63 	.word	0x053e2d63

0800ad98 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7fe ff76 	bl	8009c96 <LL_ADC_IsDisableOngoing>
 800adaa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4618      	mov	r0, r3
 800adb2:	f7fe ff5d 	bl	8009c70 <LL_ADC_IsEnabled>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d047      	beq.n	800ae4c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d144      	bne.n	800ae4c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	f003 030d 	and.w	r3, r3, #13
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d10c      	bne.n	800adea <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4618      	mov	r0, r3
 800add6:	f7fe ff37 	bl	8009c48 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	2203      	movs	r2, #3
 800ade0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800ade2:	f7fe fd75 	bl	80098d0 <HAL_GetTick>
 800ade6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800ade8:	e029      	b.n	800ae3e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adee:	f043 0210 	orr.w	r2, r3, #16
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800adfa:	f043 0201 	orr.w	r2, r3, #1
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800ae02:	2301      	movs	r3, #1
 800ae04:	e023      	b.n	800ae4e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800ae06:	f7fe fd63 	bl	80098d0 <HAL_GetTick>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	1ad3      	subs	r3, r2, r3
 800ae10:	2b02      	cmp	r3, #2
 800ae12:	d914      	bls.n	800ae3e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	689b      	ldr	r3, [r3, #8]
 800ae1a:	f003 0301 	and.w	r3, r3, #1
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d00d      	beq.n	800ae3e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae26:	f043 0210 	orr.w	r2, r3, #16
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae32:	f043 0201 	orr.w	r2, r3, #1
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	e007      	b.n	800ae4e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	f003 0301 	and.w	r3, r3, #1
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d1dc      	bne.n	800ae06 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800ae4c:	2300      	movs	r3, #0
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3710      	adds	r7, #16
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}

0800ae56 <LL_ADC_StartCalibration>:
{
 800ae56:	b480      	push	{r7}
 800ae58:	b083      	sub	sp, #12
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	6078      	str	r0, [r7, #4]
 800ae5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	689b      	ldr	r3, [r3, #8]
 800ae64:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800ae68:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800ae6c:	683a      	ldr	r2, [r7, #0]
 800ae6e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800ae72:	4313      	orrs	r3, r2
 800ae74:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	609a      	str	r2, [r3, #8]
}
 800ae7c:	bf00      	nop
 800ae7e:	370c      	adds	r7, #12
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr

0800ae88 <LL_ADC_IsCalibrationOnGoing>:
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b083      	sub	sp, #12
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	689b      	ldr	r3, [r3, #8]
 800ae94:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ae98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ae9c:	d101      	bne.n	800aea2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800ae9e:	2301      	movs	r3, #1
 800aea0:	e000      	b.n	800aea4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800aea2:	2300      	movs	r3, #0
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	370c      	adds	r7, #12
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800aeba:	2300      	movs	r3, #0
 800aebc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d101      	bne.n	800aecc <HAL_ADCEx_Calibration_Start+0x1c>
 800aec8:	2302      	movs	r3, #2
 800aeca:	e04d      	b.n	800af68 <HAL_ADCEx_Calibration_Start+0xb8>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2201      	movs	r2, #1
 800aed0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f7ff ff5f 	bl	800ad98 <ADC_Disable>
 800aeda:	4603      	mov	r3, r0
 800aedc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800aede:	7bfb      	ldrb	r3, [r7, #15]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d136      	bne.n	800af52 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aee8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800aeec:	f023 0302 	bic.w	r3, r3, #2
 800aef0:	f043 0202 	orr.w	r2, r3, #2
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	6839      	ldr	r1, [r7, #0]
 800aefe:	4618      	mov	r0, r3
 800af00:	f7ff ffa9 	bl	800ae56 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800af04:	e014      	b.n	800af30 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	3301      	adds	r3, #1
 800af0a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 800af12:	d30d      	bcc.n	800af30 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af18:	f023 0312 	bic.w	r3, r3, #18
 800af1c:	f043 0210 	orr.w	r2, r3, #16
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 800af2c:	2301      	movs	r3, #1
 800af2e:	e01b      	b.n	800af68 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4618      	mov	r0, r3
 800af36:	f7ff ffa7 	bl	800ae88 <LL_ADC_IsCalibrationOnGoing>
 800af3a:	4603      	mov	r3, r0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d1e2      	bne.n	800af06 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af44:	f023 0303 	bic.w	r3, r3, #3
 800af48:	f043 0201 	orr.w	r2, r3, #1
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	655a      	str	r2, [r3, #84]	@ 0x54
 800af50:	e005      	b.n	800af5e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af56:	f043 0210 	orr.w	r2, r3, #16
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2200      	movs	r2, #0
 800af62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800af66:	7bfb      	ldrb	r3, [r7, #15]
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3710      	adds	r7, #16
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800af70:	b480      	push	{r7}
 800af72:	b083      	sub	sp, #12
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800af78:	bf00      	nop
 800af7a:	370c      	adds	r7, #12
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr

0800af84 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800af8c:	bf00      	nop
 800af8e:	370c      	adds	r7, #12
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr

0800af98 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800af98:	b480      	push	{r7}
 800af9a:	b083      	sub	sp, #12
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800afa0:	bf00      	nop
 800afa2:	370c      	adds	r7, #12
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800afac:	b480      	push	{r7}
 800afae:	b083      	sub	sp, #12
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800afb4:	bf00      	nop
 800afb6:	370c      	adds	r7, #12
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr

0800afc0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b083      	sub	sp, #12
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800afc8:	bf00      	nop
 800afca:	370c      	adds	r7, #12
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr

0800afd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b085      	sub	sp, #20
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f003 0307 	and.w	r3, r3, #7
 800afe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800afe4:	4b0c      	ldr	r3, [pc, #48]	@ (800b018 <__NVIC_SetPriorityGrouping+0x44>)
 800afe6:	68db      	ldr	r3, [r3, #12]
 800afe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800afea:	68ba      	ldr	r2, [r7, #8]
 800afec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800aff0:	4013      	ands	r3, r2
 800aff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800affc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800b000:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b006:	4a04      	ldr	r2, [pc, #16]	@ (800b018 <__NVIC_SetPriorityGrouping+0x44>)
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	60d3      	str	r3, [r2, #12]
}
 800b00c:	bf00      	nop
 800b00e:	3714      	adds	r7, #20
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr
 800b018:	e000ed00 	.word	0xe000ed00

0800b01c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b01c:	b480      	push	{r7}
 800b01e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b020:	4b04      	ldr	r3, [pc, #16]	@ (800b034 <__NVIC_GetPriorityGrouping+0x18>)
 800b022:	68db      	ldr	r3, [r3, #12]
 800b024:	0a1b      	lsrs	r3, r3, #8
 800b026:	f003 0307 	and.w	r3, r3, #7
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr
 800b034:	e000ed00 	.word	0xe000ed00

0800b038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b038:	b480      	push	{r7}
 800b03a:	b083      	sub	sp, #12
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	4603      	mov	r3, r0
 800b040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b046:	2b00      	cmp	r3, #0
 800b048:	db0b      	blt.n	800b062 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b04a:	79fb      	ldrb	r3, [r7, #7]
 800b04c:	f003 021f 	and.w	r2, r3, #31
 800b050:	4907      	ldr	r1, [pc, #28]	@ (800b070 <__NVIC_EnableIRQ+0x38>)
 800b052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b056:	095b      	lsrs	r3, r3, #5
 800b058:	2001      	movs	r0, #1
 800b05a:	fa00 f202 	lsl.w	r2, r0, r2
 800b05e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800b062:	bf00      	nop
 800b064:	370c      	adds	r7, #12
 800b066:	46bd      	mov	sp, r7
 800b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06c:	4770      	bx	lr
 800b06e:	bf00      	nop
 800b070:	e000e100 	.word	0xe000e100

0800b074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b074:	b480      	push	{r7}
 800b076:	b083      	sub	sp, #12
 800b078:	af00      	add	r7, sp, #0
 800b07a:	4603      	mov	r3, r0
 800b07c:	6039      	str	r1, [r7, #0]
 800b07e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b084:	2b00      	cmp	r3, #0
 800b086:	db0a      	blt.n	800b09e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	b2da      	uxtb	r2, r3
 800b08c:	490c      	ldr	r1, [pc, #48]	@ (800b0c0 <__NVIC_SetPriority+0x4c>)
 800b08e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b092:	0112      	lsls	r2, r2, #4
 800b094:	b2d2      	uxtb	r2, r2
 800b096:	440b      	add	r3, r1
 800b098:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b09c:	e00a      	b.n	800b0b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	b2da      	uxtb	r2, r3
 800b0a2:	4908      	ldr	r1, [pc, #32]	@ (800b0c4 <__NVIC_SetPriority+0x50>)
 800b0a4:	79fb      	ldrb	r3, [r7, #7]
 800b0a6:	f003 030f 	and.w	r3, r3, #15
 800b0aa:	3b04      	subs	r3, #4
 800b0ac:	0112      	lsls	r2, r2, #4
 800b0ae:	b2d2      	uxtb	r2, r2
 800b0b0:	440b      	add	r3, r1
 800b0b2:	761a      	strb	r2, [r3, #24]
}
 800b0b4:	bf00      	nop
 800b0b6:	370c      	adds	r7, #12
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr
 800b0c0:	e000e100 	.word	0xe000e100
 800b0c4:	e000ed00 	.word	0xe000ed00

0800b0c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b089      	sub	sp, #36	@ 0x24
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	60f8      	str	r0, [r7, #12]
 800b0d0:	60b9      	str	r1, [r7, #8]
 800b0d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f003 0307 	and.w	r3, r3, #7
 800b0da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b0dc:	69fb      	ldr	r3, [r7, #28]
 800b0de:	f1c3 0307 	rsb	r3, r3, #7
 800b0e2:	2b04      	cmp	r3, #4
 800b0e4:	bf28      	it	cs
 800b0e6:	2304      	movcs	r3, #4
 800b0e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b0ea:	69fb      	ldr	r3, [r7, #28]
 800b0ec:	3304      	adds	r3, #4
 800b0ee:	2b06      	cmp	r3, #6
 800b0f0:	d902      	bls.n	800b0f8 <NVIC_EncodePriority+0x30>
 800b0f2:	69fb      	ldr	r3, [r7, #28]
 800b0f4:	3b03      	subs	r3, #3
 800b0f6:	e000      	b.n	800b0fa <NVIC_EncodePriority+0x32>
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b0fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b100:	69bb      	ldr	r3, [r7, #24]
 800b102:	fa02 f303 	lsl.w	r3, r2, r3
 800b106:	43da      	mvns	r2, r3
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	401a      	ands	r2, r3
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b110:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	fa01 f303 	lsl.w	r3, r1, r3
 800b11a:	43d9      	mvns	r1, r3
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b120:	4313      	orrs	r3, r2
         );
}
 800b122:	4618      	mov	r0, r3
 800b124:	3724      	adds	r7, #36	@ 0x24
 800b126:	46bd      	mov	sp, r7
 800b128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12c:	4770      	bx	lr
	...

0800b130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b082      	sub	sp, #8
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	3b01      	subs	r3, #1
 800b13c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b140:	d301      	bcc.n	800b146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b142:	2301      	movs	r3, #1
 800b144:	e00f      	b.n	800b166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b146:	4a0a      	ldr	r2, [pc, #40]	@ (800b170 <SysTick_Config+0x40>)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	3b01      	subs	r3, #1
 800b14c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b14e:	210f      	movs	r1, #15
 800b150:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b154:	f7ff ff8e 	bl	800b074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b158:	4b05      	ldr	r3, [pc, #20]	@ (800b170 <SysTick_Config+0x40>)
 800b15a:	2200      	movs	r2, #0
 800b15c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b15e:	4b04      	ldr	r3, [pc, #16]	@ (800b170 <SysTick_Config+0x40>)
 800b160:	2207      	movs	r2, #7
 800b162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b164:	2300      	movs	r3, #0
}
 800b166:	4618      	mov	r0, r3
 800b168:	3708      	adds	r7, #8
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
 800b16e:	bf00      	nop
 800b170:	e000e010 	.word	0xe000e010

0800b174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f7ff ff29 	bl	800afd4 <__NVIC_SetPriorityGrouping>
}
 800b182:	bf00      	nop
 800b184:	3708      	adds	r7, #8
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}

0800b18a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b18a:	b580      	push	{r7, lr}
 800b18c:	b086      	sub	sp, #24
 800b18e:	af00      	add	r7, sp, #0
 800b190:	4603      	mov	r3, r0
 800b192:	60b9      	str	r1, [r7, #8]
 800b194:	607a      	str	r2, [r7, #4]
 800b196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800b198:	2300      	movs	r3, #0
 800b19a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b19c:	f7ff ff3e 	bl	800b01c <__NVIC_GetPriorityGrouping>
 800b1a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	68b9      	ldr	r1, [r7, #8]
 800b1a6:	6978      	ldr	r0, [r7, #20]
 800b1a8:	f7ff ff8e 	bl	800b0c8 <NVIC_EncodePriority>
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1b2:	4611      	mov	r1, r2
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f7ff ff5d 	bl	800b074 <__NVIC_SetPriority>
}
 800b1ba:	bf00      	nop
 800b1bc:	3718      	adds	r7, #24
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}

0800b1c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b1c2:	b580      	push	{r7, lr}
 800b1c4:	b082      	sub	sp, #8
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b1cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7ff ff31 	bl	800b038 <__NVIC_EnableIRQ>
}
 800b1d6:	bf00      	nop
 800b1d8:	3708      	adds	r7, #8
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}

0800b1de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b1de:	b580      	push	{r7, lr}
 800b1e0:	b082      	sub	sp, #8
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f7ff ffa2 	bl	800b130 <SysTick_Config>
 800b1ec:	4603      	mov	r3, r0
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3708      	adds	r7, #8
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
	...

0800b1f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b087      	sub	sp, #28
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800b202:	2300      	movs	r3, #0
 800b204:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b206:	e148      	b.n	800b49a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	681a      	ldr	r2, [r3, #0]
 800b20c:	2101      	movs	r1, #1
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	fa01 f303 	lsl.w	r3, r1, r3
 800b214:	4013      	ands	r3, r2
 800b216:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	f000 813a 	beq.w	800b494 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	f003 0303 	and.w	r3, r3, #3
 800b228:	2b01      	cmp	r3, #1
 800b22a:	d005      	beq.n	800b238 <HAL_GPIO_Init+0x40>
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	f003 0303 	and.w	r3, r3, #3
 800b234:	2b02      	cmp	r3, #2
 800b236:	d130      	bne.n	800b29a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	689b      	ldr	r3, [r3, #8]
 800b23c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	005b      	lsls	r3, r3, #1
 800b242:	2203      	movs	r2, #3
 800b244:	fa02 f303 	lsl.w	r3, r2, r3
 800b248:	43db      	mvns	r3, r3
 800b24a:	693a      	ldr	r2, [r7, #16]
 800b24c:	4013      	ands	r3, r2
 800b24e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	68da      	ldr	r2, [r3, #12]
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	005b      	lsls	r3, r3, #1
 800b258:	fa02 f303 	lsl.w	r3, r2, r3
 800b25c:	693a      	ldr	r2, [r7, #16]
 800b25e:	4313      	orrs	r3, r2
 800b260:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	693a      	ldr	r2, [r7, #16]
 800b266:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b26e:	2201      	movs	r2, #1
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	fa02 f303 	lsl.w	r3, r2, r3
 800b276:	43db      	mvns	r3, r3
 800b278:	693a      	ldr	r2, [r7, #16]
 800b27a:	4013      	ands	r3, r2
 800b27c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	091b      	lsrs	r3, r3, #4
 800b284:	f003 0201 	and.w	r2, r3, #1
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	fa02 f303 	lsl.w	r3, r2, r3
 800b28e:	693a      	ldr	r2, [r7, #16]
 800b290:	4313      	orrs	r3, r2
 800b292:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	693a      	ldr	r2, [r7, #16]
 800b298:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	f003 0303 	and.w	r3, r3, #3
 800b2a2:	2b03      	cmp	r3, #3
 800b2a4:	d017      	beq.n	800b2d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	68db      	ldr	r3, [r3, #12]
 800b2aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	005b      	lsls	r3, r3, #1
 800b2b0:	2203      	movs	r2, #3
 800b2b2:	fa02 f303 	lsl.w	r3, r2, r3
 800b2b6:	43db      	mvns	r3, r3
 800b2b8:	693a      	ldr	r2, [r7, #16]
 800b2ba:	4013      	ands	r3, r2
 800b2bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	689a      	ldr	r2, [r3, #8]
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	005b      	lsls	r3, r3, #1
 800b2c6:	fa02 f303 	lsl.w	r3, r2, r3
 800b2ca:	693a      	ldr	r2, [r7, #16]
 800b2cc:	4313      	orrs	r3, r2
 800b2ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	693a      	ldr	r2, [r7, #16]
 800b2d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	f003 0303 	and.w	r3, r3, #3
 800b2de:	2b02      	cmp	r3, #2
 800b2e0:	d123      	bne.n	800b32a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	08da      	lsrs	r2, r3, #3
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	3208      	adds	r2, #8
 800b2ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	f003 0307 	and.w	r3, r3, #7
 800b2f6:	009b      	lsls	r3, r3, #2
 800b2f8:	220f      	movs	r2, #15
 800b2fa:	fa02 f303 	lsl.w	r3, r2, r3
 800b2fe:	43db      	mvns	r3, r3
 800b300:	693a      	ldr	r2, [r7, #16]
 800b302:	4013      	ands	r3, r2
 800b304:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	691a      	ldr	r2, [r3, #16]
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	f003 0307 	and.w	r3, r3, #7
 800b310:	009b      	lsls	r3, r3, #2
 800b312:	fa02 f303 	lsl.w	r3, r2, r3
 800b316:	693a      	ldr	r2, [r7, #16]
 800b318:	4313      	orrs	r3, r2
 800b31a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	08da      	lsrs	r2, r3, #3
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	3208      	adds	r2, #8
 800b324:	6939      	ldr	r1, [r7, #16]
 800b326:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	005b      	lsls	r3, r3, #1
 800b334:	2203      	movs	r2, #3
 800b336:	fa02 f303 	lsl.w	r3, r2, r3
 800b33a:	43db      	mvns	r3, r3
 800b33c:	693a      	ldr	r2, [r7, #16]
 800b33e:	4013      	ands	r3, r2
 800b340:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	685b      	ldr	r3, [r3, #4]
 800b346:	f003 0203 	and.w	r2, r3, #3
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	005b      	lsls	r3, r3, #1
 800b34e:	fa02 f303 	lsl.w	r3, r2, r3
 800b352:	693a      	ldr	r2, [r7, #16]
 800b354:	4313      	orrs	r3, r2
 800b356:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	693a      	ldr	r2, [r7, #16]
 800b35c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b366:	2b00      	cmp	r3, #0
 800b368:	f000 8094 	beq.w	800b494 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b36c:	4b52      	ldr	r3, [pc, #328]	@ (800b4b8 <HAL_GPIO_Init+0x2c0>)
 800b36e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b370:	4a51      	ldr	r2, [pc, #324]	@ (800b4b8 <HAL_GPIO_Init+0x2c0>)
 800b372:	f043 0301 	orr.w	r3, r3, #1
 800b376:	6613      	str	r3, [r2, #96]	@ 0x60
 800b378:	4b4f      	ldr	r3, [pc, #316]	@ (800b4b8 <HAL_GPIO_Init+0x2c0>)
 800b37a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b37c:	f003 0301 	and.w	r3, r3, #1
 800b380:	60bb      	str	r3, [r7, #8]
 800b382:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800b384:	4a4d      	ldr	r2, [pc, #308]	@ (800b4bc <HAL_GPIO_Init+0x2c4>)
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	089b      	lsrs	r3, r3, #2
 800b38a:	3302      	adds	r3, #2
 800b38c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b390:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	f003 0303 	and.w	r3, r3, #3
 800b398:	009b      	lsls	r3, r3, #2
 800b39a:	220f      	movs	r2, #15
 800b39c:	fa02 f303 	lsl.w	r3, r2, r3
 800b3a0:	43db      	mvns	r3, r3
 800b3a2:	693a      	ldr	r2, [r7, #16]
 800b3a4:	4013      	ands	r3, r2
 800b3a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800b3ae:	d00d      	beq.n	800b3cc <HAL_GPIO_Init+0x1d4>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	4a43      	ldr	r2, [pc, #268]	@ (800b4c0 <HAL_GPIO_Init+0x2c8>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d007      	beq.n	800b3c8 <HAL_GPIO_Init+0x1d0>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	4a42      	ldr	r2, [pc, #264]	@ (800b4c4 <HAL_GPIO_Init+0x2cc>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d101      	bne.n	800b3c4 <HAL_GPIO_Init+0x1cc>
 800b3c0:	2302      	movs	r3, #2
 800b3c2:	e004      	b.n	800b3ce <HAL_GPIO_Init+0x1d6>
 800b3c4:	2307      	movs	r3, #7
 800b3c6:	e002      	b.n	800b3ce <HAL_GPIO_Init+0x1d6>
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	e000      	b.n	800b3ce <HAL_GPIO_Init+0x1d6>
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	697a      	ldr	r2, [r7, #20]
 800b3d0:	f002 0203 	and.w	r2, r2, #3
 800b3d4:	0092      	lsls	r2, r2, #2
 800b3d6:	4093      	lsls	r3, r2
 800b3d8:	693a      	ldr	r2, [r7, #16]
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800b3de:	4937      	ldr	r1, [pc, #220]	@ (800b4bc <HAL_GPIO_Init+0x2c4>)
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	089b      	lsrs	r3, r3, #2
 800b3e4:	3302      	adds	r3, #2
 800b3e6:	693a      	ldr	r2, [r7, #16]
 800b3e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b3ec:	4b36      	ldr	r3, [pc, #216]	@ (800b4c8 <HAL_GPIO_Init+0x2d0>)
 800b3ee:	689b      	ldr	r3, [r3, #8]
 800b3f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	43db      	mvns	r3, r3
 800b3f6:	693a      	ldr	r2, [r7, #16]
 800b3f8:	4013      	ands	r3, r2
 800b3fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	685b      	ldr	r3, [r3, #4]
 800b400:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b404:	2b00      	cmp	r3, #0
 800b406:	d003      	beq.n	800b410 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800b408:	693a      	ldr	r2, [r7, #16]
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	4313      	orrs	r3, r2
 800b40e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800b410:	4a2d      	ldr	r2, [pc, #180]	@ (800b4c8 <HAL_GPIO_Init+0x2d0>)
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800b416:	4b2c      	ldr	r3, [pc, #176]	@ (800b4c8 <HAL_GPIO_Init+0x2d0>)
 800b418:	68db      	ldr	r3, [r3, #12]
 800b41a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	43db      	mvns	r3, r3
 800b420:	693a      	ldr	r2, [r7, #16]
 800b422:	4013      	ands	r3, r2
 800b424:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d003      	beq.n	800b43a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800b432:	693a      	ldr	r2, [r7, #16]
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	4313      	orrs	r3, r2
 800b438:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800b43a:	4a23      	ldr	r2, [pc, #140]	@ (800b4c8 <HAL_GPIO_Init+0x2d0>)
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800b440:	4b21      	ldr	r3, [pc, #132]	@ (800b4c8 <HAL_GPIO_Init+0x2d0>)
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	43db      	mvns	r3, r3
 800b44a:	693a      	ldr	r2, [r7, #16]
 800b44c:	4013      	ands	r3, r2
 800b44e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d003      	beq.n	800b464 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800b45c:	693a      	ldr	r2, [r7, #16]
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	4313      	orrs	r3, r2
 800b462:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800b464:	4a18      	ldr	r2, [pc, #96]	@ (800b4c8 <HAL_GPIO_Init+0x2d0>)
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800b46a:	4b17      	ldr	r3, [pc, #92]	@ (800b4c8 <HAL_GPIO_Init+0x2d0>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	43db      	mvns	r3, r3
 800b474:	693a      	ldr	r2, [r7, #16]
 800b476:	4013      	ands	r3, r2
 800b478:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b482:	2b00      	cmp	r3, #0
 800b484:	d003      	beq.n	800b48e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800b486:	693a      	ldr	r2, [r7, #16]
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	4313      	orrs	r3, r2
 800b48c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800b48e:	4a0e      	ldr	r2, [pc, #56]	@ (800b4c8 <HAL_GPIO_Init+0x2d0>)
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	3301      	adds	r3, #1
 800b498:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	681a      	ldr	r2, [r3, #0]
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	fa22 f303 	lsr.w	r3, r2, r3
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	f47f aeaf 	bne.w	800b208 <HAL_GPIO_Init+0x10>
  }
}
 800b4aa:	bf00      	nop
 800b4ac:	bf00      	nop
 800b4ae:	371c      	adds	r7, #28
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr
 800b4b8:	40021000 	.word	0x40021000
 800b4bc:	40010000 	.word	0x40010000
 800b4c0:	48000400 	.word	0x48000400
 800b4c4:	48000800 	.word	0x48000800
 800b4c8:	40010400 	.word	0x40010400

0800b4cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	460b      	mov	r3, r1
 800b4d6:	807b      	strh	r3, [r7, #2]
 800b4d8:	4613      	mov	r3, r2
 800b4da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b4dc:	787b      	ldrb	r3, [r7, #1]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d003      	beq.n	800b4ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b4e2:	887a      	ldrh	r2, [r7, #2]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b4e8:	e002      	b.n	800b4f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b4ea:	887a      	ldrh	r2, [r7, #2]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800b4f0:	bf00      	nop
 800b4f2:	370c      	adds	r7, #12
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fa:	4770      	bx	lr

0800b4fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b082      	sub	sp, #8
 800b500:	af00      	add	r7, sp, #0
 800b502:	4603      	mov	r3, r0
 800b504:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800b506:	4b08      	ldr	r3, [pc, #32]	@ (800b528 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b508:	695a      	ldr	r2, [r3, #20]
 800b50a:	88fb      	ldrh	r3, [r7, #6]
 800b50c:	4013      	ands	r3, r2
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d006      	beq.n	800b520 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b512:	4a05      	ldr	r2, [pc, #20]	@ (800b528 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b514:	88fb      	ldrh	r3, [r7, #6]
 800b516:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b518:	88fb      	ldrh	r3, [r7, #6]
 800b51a:	4618      	mov	r0, r3
 800b51c:	f7f9 fa6a 	bl	80049f4 <HAL_GPIO_EXTI_Callback>
  }
}
 800b520:	bf00      	nop
 800b522:	3708      	adds	r7, #8
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}
 800b528:	40010400 	.word	0x40010400

0800b52c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d101      	bne.n	800b53e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b53a:	2301      	movs	r3, #1
 800b53c:	e08d      	b.n	800b65a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b544:	b2db      	uxtb	r3, r3
 800b546:	2b00      	cmp	r3, #0
 800b548:	d106      	bne.n	800b558 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2200      	movs	r2, #0
 800b54e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f7f9 fbc4 	bl	8004ce0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2224      	movs	r2, #36	@ 0x24
 800b55c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	681a      	ldr	r2, [r3, #0]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f022 0201 	bic.w	r2, r2, #1
 800b56e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	685a      	ldr	r2, [r3, #4]
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800b57c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	689a      	ldr	r2, [r3, #8]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b58c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	68db      	ldr	r3, [r3, #12]
 800b592:	2b01      	cmp	r3, #1
 800b594:	d107      	bne.n	800b5a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	689a      	ldr	r2, [r3, #8]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b5a2:	609a      	str	r2, [r3, #8]
 800b5a4:	e006      	b.n	800b5b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	689a      	ldr	r2, [r3, #8]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800b5b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	68db      	ldr	r3, [r3, #12]
 800b5b8:	2b02      	cmp	r3, #2
 800b5ba:	d108      	bne.n	800b5ce <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	685a      	ldr	r2, [r3, #4]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b5ca:	605a      	str	r2, [r3, #4]
 800b5cc:	e007      	b.n	800b5de <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	685a      	ldr	r2, [r3, #4]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b5dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	685b      	ldr	r3, [r3, #4]
 800b5e4:	687a      	ldr	r2, [r7, #4]
 800b5e6:	6812      	ldr	r2, [r2, #0]
 800b5e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b5ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b5f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	68da      	ldr	r2, [r3, #12]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b600:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	691a      	ldr	r2, [r3, #16]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	695b      	ldr	r3, [r3, #20]
 800b60a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	699b      	ldr	r3, [r3, #24]
 800b612:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	430a      	orrs	r2, r1
 800b61a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	69d9      	ldr	r1, [r3, #28]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6a1a      	ldr	r2, [r3, #32]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	430a      	orrs	r2, r1
 800b62a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	681a      	ldr	r2, [r3, #0]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f042 0201 	orr.w	r2, r2, #1
 800b63a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2200      	movs	r2, #0
 800b640:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2220      	movs	r2, #32
 800b646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2200      	movs	r2, #0
 800b64e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2200      	movs	r2, #0
 800b654:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800b658:	2300      	movs	r3, #0
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3708      	adds	r7, #8
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}
	...

0800b664 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b088      	sub	sp, #32
 800b668:	af02      	add	r7, sp, #8
 800b66a:	60f8      	str	r0, [r7, #12]
 800b66c:	4608      	mov	r0, r1
 800b66e:	4611      	mov	r1, r2
 800b670:	461a      	mov	r2, r3
 800b672:	4603      	mov	r3, r0
 800b674:	817b      	strh	r3, [r7, #10]
 800b676:	460b      	mov	r3, r1
 800b678:	813b      	strh	r3, [r7, #8]
 800b67a:	4613      	mov	r3, r2
 800b67c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b684:	b2db      	uxtb	r3, r3
 800b686:	2b20      	cmp	r3, #32
 800b688:	f040 80f9 	bne.w	800b87e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b68c:	6a3b      	ldr	r3, [r7, #32]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d002      	beq.n	800b698 <HAL_I2C_Mem_Write+0x34>
 800b692:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b694:	2b00      	cmp	r3, #0
 800b696:	d105      	bne.n	800b6a4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b69e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	e0ed      	b.n	800b880 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	d101      	bne.n	800b6b2 <HAL_I2C_Mem_Write+0x4e>
 800b6ae:	2302      	movs	r3, #2
 800b6b0:	e0e6      	b.n	800b880 <HAL_I2C_Mem_Write+0x21c>
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b6ba:	f7fe f909 	bl	80098d0 <HAL_GetTick>
 800b6be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	9300      	str	r3, [sp, #0]
 800b6c4:	2319      	movs	r3, #25
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b6cc:	68f8      	ldr	r0, [r7, #12]
 800b6ce:	f000 fbaf 	bl	800be30 <I2C_WaitOnFlagUntilTimeout>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d001      	beq.n	800b6dc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800b6d8:	2301      	movs	r3, #1
 800b6da:	e0d1      	b.n	800b880 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2221      	movs	r2, #33	@ 0x21
 800b6e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2240      	movs	r2, #64	@ 0x40
 800b6e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	6a3a      	ldr	r2, [r7, #32]
 800b6f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b6fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2200      	movs	r2, #0
 800b702:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b704:	88f8      	ldrh	r0, [r7, #6]
 800b706:	893a      	ldrh	r2, [r7, #8]
 800b708:	8979      	ldrh	r1, [r7, #10]
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	9301      	str	r3, [sp, #4]
 800b70e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b710:	9300      	str	r3, [sp, #0]
 800b712:	4603      	mov	r3, r0
 800b714:	68f8      	ldr	r0, [r7, #12]
 800b716:	f000 fabf 	bl	800bc98 <I2C_RequestMemoryWrite>
 800b71a:	4603      	mov	r3, r0
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d005      	beq.n	800b72c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2200      	movs	r2, #0
 800b724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800b728:	2301      	movs	r3, #1
 800b72a:	e0a9      	b.n	800b880 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b730:	b29b      	uxth	r3, r3
 800b732:	2bff      	cmp	r3, #255	@ 0xff
 800b734:	d90e      	bls.n	800b754 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	22ff      	movs	r2, #255	@ 0xff
 800b73a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b740:	b2da      	uxtb	r2, r3
 800b742:	8979      	ldrh	r1, [r7, #10]
 800b744:	2300      	movs	r3, #0
 800b746:	9300      	str	r3, [sp, #0]
 800b748:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b74c:	68f8      	ldr	r0, [r7, #12]
 800b74e:	f000 fd33 	bl	800c1b8 <I2C_TransferConfig>
 800b752:	e00f      	b.n	800b774 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b758:	b29a      	uxth	r2, r3
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b762:	b2da      	uxtb	r2, r3
 800b764:	8979      	ldrh	r1, [r7, #10]
 800b766:	2300      	movs	r3, #0
 800b768:	9300      	str	r3, [sp, #0]
 800b76a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b76e:	68f8      	ldr	r0, [r7, #12]
 800b770:	f000 fd22 	bl	800c1b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b774:	697a      	ldr	r2, [r7, #20]
 800b776:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b778:	68f8      	ldr	r0, [r7, #12]
 800b77a:	f000 fbb2 	bl	800bee2 <I2C_WaitOnTXISFlagUntilTimeout>
 800b77e:	4603      	mov	r3, r0
 800b780:	2b00      	cmp	r3, #0
 800b782:	d001      	beq.n	800b788 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800b784:	2301      	movs	r3, #1
 800b786:	e07b      	b.n	800b880 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b78c:	781a      	ldrb	r2, [r3, #0]
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b798:	1c5a      	adds	r2, r3, #1
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	3b01      	subs	r3, #1
 800b7a6:	b29a      	uxth	r2, r3
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b7b0:	3b01      	subs	r3, #1
 800b7b2:	b29a      	uxth	r2, r3
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d034      	beq.n	800b82c <HAL_I2C_Mem_Write+0x1c8>
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d130      	bne.n	800b82c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	9300      	str	r3, [sp, #0]
 800b7ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	2180      	movs	r1, #128	@ 0x80
 800b7d4:	68f8      	ldr	r0, [r7, #12]
 800b7d6:	f000 fb2b 	bl	800be30 <I2C_WaitOnFlagUntilTimeout>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d001      	beq.n	800b7e4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	e04d      	b.n	800b880 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	2bff      	cmp	r3, #255	@ 0xff
 800b7ec:	d90e      	bls.n	800b80c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	22ff      	movs	r2, #255	@ 0xff
 800b7f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b7f8:	b2da      	uxtb	r2, r3
 800b7fa:	8979      	ldrh	r1, [r7, #10]
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	9300      	str	r3, [sp, #0]
 800b800:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b804:	68f8      	ldr	r0, [r7, #12]
 800b806:	f000 fcd7 	bl	800c1b8 <I2C_TransferConfig>
 800b80a:	e00f      	b.n	800b82c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b810:	b29a      	uxth	r2, r3
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b81a:	b2da      	uxtb	r2, r3
 800b81c:	8979      	ldrh	r1, [r7, #10]
 800b81e:	2300      	movs	r3, #0
 800b820:	9300      	str	r3, [sp, #0]
 800b822:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b826:	68f8      	ldr	r0, [r7, #12]
 800b828:	f000 fcc6 	bl	800c1b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b830:	b29b      	uxth	r3, r3
 800b832:	2b00      	cmp	r3, #0
 800b834:	d19e      	bne.n	800b774 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b836:	697a      	ldr	r2, [r7, #20]
 800b838:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b83a:	68f8      	ldr	r0, [r7, #12]
 800b83c:	f000 fb98 	bl	800bf70 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b840:	4603      	mov	r3, r0
 800b842:	2b00      	cmp	r3, #0
 800b844:	d001      	beq.n	800b84a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800b846:	2301      	movs	r3, #1
 800b848:	e01a      	b.n	800b880 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	2220      	movs	r2, #32
 800b850:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	6859      	ldr	r1, [r3, #4]
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681a      	ldr	r2, [r3, #0]
 800b85c:	4b0a      	ldr	r3, [pc, #40]	@ (800b888 <HAL_I2C_Mem_Write+0x224>)
 800b85e:	400b      	ands	r3, r1
 800b860:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	2220      	movs	r2, #32
 800b866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2200      	movs	r2, #0
 800b86e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2200      	movs	r2, #0
 800b876:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b87a:	2300      	movs	r3, #0
 800b87c:	e000      	b.n	800b880 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800b87e:	2302      	movs	r3, #2
  }
}
 800b880:	4618      	mov	r0, r3
 800b882:	3718      	adds	r7, #24
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}
 800b888:	fe00e800 	.word	0xfe00e800

0800b88c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b088      	sub	sp, #32
 800b890:	af02      	add	r7, sp, #8
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	4608      	mov	r0, r1
 800b896:	4611      	mov	r1, r2
 800b898:	461a      	mov	r2, r3
 800b89a:	4603      	mov	r3, r0
 800b89c:	817b      	strh	r3, [r7, #10]
 800b89e:	460b      	mov	r3, r1
 800b8a0:	813b      	strh	r3, [r7, #8]
 800b8a2:	4613      	mov	r3, r2
 800b8a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b8ac:	b2db      	uxtb	r3, r3
 800b8ae:	2b20      	cmp	r3, #32
 800b8b0:	f040 80fd 	bne.w	800baae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800b8b4:	6a3b      	ldr	r3, [r7, #32]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d002      	beq.n	800b8c0 <HAL_I2C_Mem_Read+0x34>
 800b8ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d105      	bne.n	800b8cc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b8c6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	e0f1      	b.n	800bab0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	d101      	bne.n	800b8da <HAL_I2C_Mem_Read+0x4e>
 800b8d6:	2302      	movs	r3, #2
 800b8d8:	e0ea      	b.n	800bab0 <HAL_I2C_Mem_Read+0x224>
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	2201      	movs	r2, #1
 800b8de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b8e2:	f7fd fff5 	bl	80098d0 <HAL_GetTick>
 800b8e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	9300      	str	r3, [sp, #0]
 800b8ec:	2319      	movs	r3, #25
 800b8ee:	2201      	movs	r2, #1
 800b8f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b8f4:	68f8      	ldr	r0, [r7, #12]
 800b8f6:	f000 fa9b 	bl	800be30 <I2C_WaitOnFlagUntilTimeout>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d001      	beq.n	800b904 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800b900:	2301      	movs	r3, #1
 800b902:	e0d5      	b.n	800bab0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	2222      	movs	r2, #34	@ 0x22
 800b908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	2240      	movs	r2, #64	@ 0x40
 800b910:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2200      	movs	r2, #0
 800b918:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	6a3a      	ldr	r2, [r7, #32]
 800b91e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b924:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2200      	movs	r2, #0
 800b92a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b92c:	88f8      	ldrh	r0, [r7, #6]
 800b92e:	893a      	ldrh	r2, [r7, #8]
 800b930:	8979      	ldrh	r1, [r7, #10]
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	9301      	str	r3, [sp, #4]
 800b936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b938:	9300      	str	r3, [sp, #0]
 800b93a:	4603      	mov	r3, r0
 800b93c:	68f8      	ldr	r0, [r7, #12]
 800b93e:	f000 f9ff 	bl	800bd40 <I2C_RequestMemoryRead>
 800b942:	4603      	mov	r3, r0
 800b944:	2b00      	cmp	r3, #0
 800b946:	d005      	beq.n	800b954 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2200      	movs	r2, #0
 800b94c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800b950:	2301      	movs	r3, #1
 800b952:	e0ad      	b.n	800bab0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b958:	b29b      	uxth	r3, r3
 800b95a:	2bff      	cmp	r3, #255	@ 0xff
 800b95c:	d90e      	bls.n	800b97c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	2201      	movs	r2, #1
 800b962:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b968:	b2da      	uxtb	r2, r3
 800b96a:	8979      	ldrh	r1, [r7, #10]
 800b96c:	4b52      	ldr	r3, [pc, #328]	@ (800bab8 <HAL_I2C_Mem_Read+0x22c>)
 800b96e:	9300      	str	r3, [sp, #0]
 800b970:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b974:	68f8      	ldr	r0, [r7, #12]
 800b976:	f000 fc1f 	bl	800c1b8 <I2C_TransferConfig>
 800b97a:	e00f      	b.n	800b99c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b980:	b29a      	uxth	r2, r3
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b98a:	b2da      	uxtb	r2, r3
 800b98c:	8979      	ldrh	r1, [r7, #10]
 800b98e:	4b4a      	ldr	r3, [pc, #296]	@ (800bab8 <HAL_I2C_Mem_Read+0x22c>)
 800b990:	9300      	str	r3, [sp, #0]
 800b992:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b996:	68f8      	ldr	r0, [r7, #12]
 800b998:	f000 fc0e 	bl	800c1b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	9300      	str	r3, [sp, #0]
 800b9a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	2104      	movs	r1, #4
 800b9a6:	68f8      	ldr	r0, [r7, #12]
 800b9a8:	f000 fa42 	bl	800be30 <I2C_WaitOnFlagUntilTimeout>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d001      	beq.n	800b9b6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	e07c      	b.n	800bab0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9c0:	b2d2      	uxtb	r2, r2
 800b9c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9c8:	1c5a      	adds	r2, r3, #1
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b9d2:	3b01      	subs	r3, #1
 800b9d4:	b29a      	uxth	r2, r3
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	3b01      	subs	r3, #1
 800b9e2:	b29a      	uxth	r2, r3
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b9ec:	b29b      	uxth	r3, r3
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d034      	beq.n	800ba5c <HAL_I2C_Mem_Read+0x1d0>
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d130      	bne.n	800ba5c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	9300      	str	r3, [sp, #0]
 800b9fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba00:	2200      	movs	r2, #0
 800ba02:	2180      	movs	r1, #128	@ 0x80
 800ba04:	68f8      	ldr	r0, [r7, #12]
 800ba06:	f000 fa13 	bl	800be30 <I2C_WaitOnFlagUntilTimeout>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d001      	beq.n	800ba14 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800ba10:	2301      	movs	r3, #1
 800ba12:	e04d      	b.n	800bab0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba18:	b29b      	uxth	r3, r3
 800ba1a:	2bff      	cmp	r3, #255	@ 0xff
 800ba1c:	d90e      	bls.n	800ba3c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2201      	movs	r2, #1
 800ba22:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ba28:	b2da      	uxtb	r2, r3
 800ba2a:	8979      	ldrh	r1, [r7, #10]
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	9300      	str	r3, [sp, #0]
 800ba30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ba34:	68f8      	ldr	r0, [r7, #12]
 800ba36:	f000 fbbf 	bl	800c1b8 <I2C_TransferConfig>
 800ba3a:	e00f      	b.n	800ba5c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba40:	b29a      	uxth	r2, r3
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ba4a:	b2da      	uxtb	r2, r3
 800ba4c:	8979      	ldrh	r1, [r7, #10]
 800ba4e:	2300      	movs	r3, #0
 800ba50:	9300      	str	r3, [sp, #0]
 800ba52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ba56:	68f8      	ldr	r0, [r7, #12]
 800ba58:	f000 fbae 	bl	800c1b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba60:	b29b      	uxth	r3, r3
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d19a      	bne.n	800b99c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ba66:	697a      	ldr	r2, [r7, #20]
 800ba68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba6a:	68f8      	ldr	r0, [r7, #12]
 800ba6c:	f000 fa80 	bl	800bf70 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ba70:	4603      	mov	r3, r0
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d001      	beq.n	800ba7a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800ba76:	2301      	movs	r3, #1
 800ba78:	e01a      	b.n	800bab0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	2220      	movs	r2, #32
 800ba80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	6859      	ldr	r1, [r3, #4]
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	681a      	ldr	r2, [r3, #0]
 800ba8c:	4b0b      	ldr	r3, [pc, #44]	@ (800babc <HAL_I2C_Mem_Read+0x230>)
 800ba8e:	400b      	ands	r3, r1
 800ba90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	2220      	movs	r2, #32
 800ba96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	2200      	movs	r2, #0
 800baa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800baaa:	2300      	movs	r3, #0
 800baac:	e000      	b.n	800bab0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800baae:	2302      	movs	r3, #2
  }
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3718      	adds	r7, #24
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}
 800bab8:	80002400 	.word	0x80002400
 800babc:	fe00e800 	.word	0xfe00e800

0800bac0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b08a      	sub	sp, #40	@ 0x28
 800bac4:	af02      	add	r7, sp, #8
 800bac6:	60f8      	str	r0, [r7, #12]
 800bac8:	607a      	str	r2, [r7, #4]
 800baca:	603b      	str	r3, [r7, #0]
 800bacc:	460b      	mov	r3, r1
 800bace:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800bad0:	2300      	movs	r3, #0
 800bad2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bada:	b2db      	uxtb	r3, r3
 800badc:	2b20      	cmp	r3, #32
 800bade:	f040 80d6 	bne.w	800bc8e <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	699b      	ldr	r3, [r3, #24]
 800bae8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800baec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800baf0:	d101      	bne.n	800baf6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800baf2:	2302      	movs	r3, #2
 800baf4:	e0cc      	b.n	800bc90 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bafc:	2b01      	cmp	r3, #1
 800bafe:	d101      	bne.n	800bb04 <HAL_I2C_IsDeviceReady+0x44>
 800bb00:	2302      	movs	r3, #2
 800bb02:	e0c5      	b.n	800bc90 <HAL_I2C_IsDeviceReady+0x1d0>
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2201      	movs	r2, #1
 800bb08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	2224      	movs	r2, #36	@ 0x24
 800bb10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2200      	movs	r2, #0
 800bb18:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	68db      	ldr	r3, [r3, #12]
 800bb1e:	2b01      	cmp	r3, #1
 800bb20:	d107      	bne.n	800bb32 <HAL_I2C_IsDeviceReady+0x72>
 800bb22:	897b      	ldrh	r3, [r7, #10]
 800bb24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb28:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800bb2c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800bb30:	e006      	b.n	800bb40 <HAL_I2C_IsDeviceReady+0x80>
 800bb32:	897b      	ldrh	r3, [r7, #10]
 800bb34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb38:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800bb3c:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 800bb40:	68fa      	ldr	r2, [r7, #12]
 800bb42:	6812      	ldr	r2, [r2, #0]
 800bb44:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800bb46:	f7fd fec3 	bl	80098d0 <HAL_GetTick>
 800bb4a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	699b      	ldr	r3, [r3, #24]
 800bb52:	f003 0320 	and.w	r3, r3, #32
 800bb56:	2b20      	cmp	r3, #32
 800bb58:	bf0c      	ite	eq
 800bb5a:	2301      	moveq	r3, #1
 800bb5c:	2300      	movne	r3, #0
 800bb5e:	b2db      	uxtb	r3, r3
 800bb60:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	699b      	ldr	r3, [r3, #24]
 800bb68:	f003 0310 	and.w	r3, r3, #16
 800bb6c:	2b10      	cmp	r3, #16
 800bb6e:	bf0c      	ite	eq
 800bb70:	2301      	moveq	r3, #1
 800bb72:	2300      	movne	r3, #0
 800bb74:	b2db      	uxtb	r3, r3
 800bb76:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800bb78:	e034      	b.n	800bbe4 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bb80:	d01a      	beq.n	800bbb8 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bb82:	f7fd fea5 	bl	80098d0 <HAL_GetTick>
 800bb86:	4602      	mov	r2, r0
 800bb88:	69bb      	ldr	r3, [r7, #24]
 800bb8a:	1ad3      	subs	r3, r2, r3
 800bb8c:	683a      	ldr	r2, [r7, #0]
 800bb8e:	429a      	cmp	r2, r3
 800bb90:	d302      	bcc.n	800bb98 <HAL_I2C_IsDeviceReady+0xd8>
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d10f      	bne.n	800bbb8 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2220      	movs	r2, #32
 800bb9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bba4:	f043 0220 	orr.w	r2, r3, #32
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	e06b      	b.n	800bc90 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	699b      	ldr	r3, [r3, #24]
 800bbbe:	f003 0320 	and.w	r3, r3, #32
 800bbc2:	2b20      	cmp	r3, #32
 800bbc4:	bf0c      	ite	eq
 800bbc6:	2301      	moveq	r3, #1
 800bbc8:	2300      	movne	r3, #0
 800bbca:	b2db      	uxtb	r3, r3
 800bbcc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	699b      	ldr	r3, [r3, #24]
 800bbd4:	f003 0310 	and.w	r3, r3, #16
 800bbd8:	2b10      	cmp	r3, #16
 800bbda:	bf0c      	ite	eq
 800bbdc:	2301      	moveq	r3, #1
 800bbde:	2300      	movne	r3, #0
 800bbe0:	b2db      	uxtb	r3, r3
 800bbe2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800bbe4:	7ffb      	ldrb	r3, [r7, #31]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d102      	bne.n	800bbf0 <HAL_I2C_IsDeviceReady+0x130>
 800bbea:	7fbb      	ldrb	r3, [r7, #30]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d0c4      	beq.n	800bb7a <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	699b      	ldr	r3, [r3, #24]
 800bbf6:	f003 0310 	and.w	r3, r3, #16
 800bbfa:	2b10      	cmp	r3, #16
 800bbfc:	d01a      	beq.n	800bc34 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800bbfe:	69bb      	ldr	r3, [r7, #24]
 800bc00:	9300      	str	r3, [sp, #0]
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	2200      	movs	r2, #0
 800bc06:	2120      	movs	r1, #32
 800bc08:	68f8      	ldr	r0, [r7, #12]
 800bc0a:	f000 f911 	bl	800be30 <I2C_WaitOnFlagUntilTimeout>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d001      	beq.n	800bc18 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800bc14:	2301      	movs	r3, #1
 800bc16:	e03b      	b.n	800bc90 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	2220      	movs	r2, #32
 800bc1e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	2220      	movs	r2, #32
 800bc24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 800bc30:	2300      	movs	r3, #0
 800bc32:	e02d      	b.n	800bc90 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800bc34:	69bb      	ldr	r3, [r7, #24]
 800bc36:	9300      	str	r3, [sp, #0]
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	2120      	movs	r1, #32
 800bc3e:	68f8      	ldr	r0, [r7, #12]
 800bc40:	f000 f8f6 	bl	800be30 <I2C_WaitOnFlagUntilTimeout>
 800bc44:	4603      	mov	r3, r0
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d001      	beq.n	800bc4e <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	e020      	b.n	800bc90 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	2210      	movs	r2, #16
 800bc54:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	2220      	movs	r2, #32
 800bc5c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	3301      	adds	r3, #1
 800bc62:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	687a      	ldr	r2, [r7, #4]
 800bc68:	429a      	cmp	r2, r3
 800bc6a:	f63f af56 	bhi.w	800bb1a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2220      	movs	r2, #32
 800bc72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc7a:	f043 0220 	orr.w	r2, r3, #32
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	2200      	movs	r2, #0
 800bc86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	e000      	b.n	800bc90 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800bc8e:	2302      	movs	r3, #2
  }
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3720      	adds	r7, #32
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}

0800bc98 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b086      	sub	sp, #24
 800bc9c:	af02      	add	r7, sp, #8
 800bc9e:	60f8      	str	r0, [r7, #12]
 800bca0:	4608      	mov	r0, r1
 800bca2:	4611      	mov	r1, r2
 800bca4:	461a      	mov	r2, r3
 800bca6:	4603      	mov	r3, r0
 800bca8:	817b      	strh	r3, [r7, #10]
 800bcaa:	460b      	mov	r3, r1
 800bcac:	813b      	strh	r3, [r7, #8]
 800bcae:	4613      	mov	r3, r2
 800bcb0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800bcb2:	88fb      	ldrh	r3, [r7, #6]
 800bcb4:	b2da      	uxtb	r2, r3
 800bcb6:	8979      	ldrh	r1, [r7, #10]
 800bcb8:	4b20      	ldr	r3, [pc, #128]	@ (800bd3c <I2C_RequestMemoryWrite+0xa4>)
 800bcba:	9300      	str	r3, [sp, #0]
 800bcbc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800bcc0:	68f8      	ldr	r0, [r7, #12]
 800bcc2:	f000 fa79 	bl	800c1b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bcc6:	69fa      	ldr	r2, [r7, #28]
 800bcc8:	69b9      	ldr	r1, [r7, #24]
 800bcca:	68f8      	ldr	r0, [r7, #12]
 800bccc:	f000 f909 	bl	800bee2 <I2C_WaitOnTXISFlagUntilTimeout>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d001      	beq.n	800bcda <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	e02c      	b.n	800bd34 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bcda:	88fb      	ldrh	r3, [r7, #6]
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	d105      	bne.n	800bcec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bce0:	893b      	ldrh	r3, [r7, #8]
 800bce2:	b2da      	uxtb	r2, r3
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	629a      	str	r2, [r3, #40]	@ 0x28
 800bcea:	e015      	b.n	800bd18 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bcec:	893b      	ldrh	r3, [r7, #8]
 800bcee:	0a1b      	lsrs	r3, r3, #8
 800bcf0:	b29b      	uxth	r3, r3
 800bcf2:	b2da      	uxtb	r2, r3
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bcfa:	69fa      	ldr	r2, [r7, #28]
 800bcfc:	69b9      	ldr	r1, [r7, #24]
 800bcfe:	68f8      	ldr	r0, [r7, #12]
 800bd00:	f000 f8ef 	bl	800bee2 <I2C_WaitOnTXISFlagUntilTimeout>
 800bd04:	4603      	mov	r3, r0
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d001      	beq.n	800bd0e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	e012      	b.n	800bd34 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bd0e:	893b      	ldrh	r3, [r7, #8]
 800bd10:	b2da      	uxtb	r2, r3
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800bd18:	69fb      	ldr	r3, [r7, #28]
 800bd1a:	9300      	str	r3, [sp, #0]
 800bd1c:	69bb      	ldr	r3, [r7, #24]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	2180      	movs	r1, #128	@ 0x80
 800bd22:	68f8      	ldr	r0, [r7, #12]
 800bd24:	f000 f884 	bl	800be30 <I2C_WaitOnFlagUntilTimeout>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d001      	beq.n	800bd32 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800bd2e:	2301      	movs	r3, #1
 800bd30:	e000      	b.n	800bd34 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800bd32:	2300      	movs	r3, #0
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3710      	adds	r7, #16
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}
 800bd3c:	80002000 	.word	0x80002000

0800bd40 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b086      	sub	sp, #24
 800bd44:	af02      	add	r7, sp, #8
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	4608      	mov	r0, r1
 800bd4a:	4611      	mov	r1, r2
 800bd4c:	461a      	mov	r2, r3
 800bd4e:	4603      	mov	r3, r0
 800bd50:	817b      	strh	r3, [r7, #10]
 800bd52:	460b      	mov	r3, r1
 800bd54:	813b      	strh	r3, [r7, #8]
 800bd56:	4613      	mov	r3, r2
 800bd58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800bd5a:	88fb      	ldrh	r3, [r7, #6]
 800bd5c:	b2da      	uxtb	r2, r3
 800bd5e:	8979      	ldrh	r1, [r7, #10]
 800bd60:	4b20      	ldr	r3, [pc, #128]	@ (800bde4 <I2C_RequestMemoryRead+0xa4>)
 800bd62:	9300      	str	r3, [sp, #0]
 800bd64:	2300      	movs	r3, #0
 800bd66:	68f8      	ldr	r0, [r7, #12]
 800bd68:	f000 fa26 	bl	800c1b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bd6c:	69fa      	ldr	r2, [r7, #28]
 800bd6e:	69b9      	ldr	r1, [r7, #24]
 800bd70:	68f8      	ldr	r0, [r7, #12]
 800bd72:	f000 f8b6 	bl	800bee2 <I2C_WaitOnTXISFlagUntilTimeout>
 800bd76:	4603      	mov	r3, r0
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d001      	beq.n	800bd80 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	e02c      	b.n	800bdda <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bd80:	88fb      	ldrh	r3, [r7, #6]
 800bd82:	2b01      	cmp	r3, #1
 800bd84:	d105      	bne.n	800bd92 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bd86:	893b      	ldrh	r3, [r7, #8]
 800bd88:	b2da      	uxtb	r2, r3
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	629a      	str	r2, [r3, #40]	@ 0x28
 800bd90:	e015      	b.n	800bdbe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bd92:	893b      	ldrh	r3, [r7, #8]
 800bd94:	0a1b      	lsrs	r3, r3, #8
 800bd96:	b29b      	uxth	r3, r3
 800bd98:	b2da      	uxtb	r2, r3
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bda0:	69fa      	ldr	r2, [r7, #28]
 800bda2:	69b9      	ldr	r1, [r7, #24]
 800bda4:	68f8      	ldr	r0, [r7, #12]
 800bda6:	f000 f89c 	bl	800bee2 <I2C_WaitOnTXISFlagUntilTimeout>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d001      	beq.n	800bdb4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	e012      	b.n	800bdda <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bdb4:	893b      	ldrh	r3, [r7, #8]
 800bdb6:	b2da      	uxtb	r2, r3
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800bdbe:	69fb      	ldr	r3, [r7, #28]
 800bdc0:	9300      	str	r3, [sp, #0]
 800bdc2:	69bb      	ldr	r3, [r7, #24]
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	2140      	movs	r1, #64	@ 0x40
 800bdc8:	68f8      	ldr	r0, [r7, #12]
 800bdca:	f000 f831 	bl	800be30 <I2C_WaitOnFlagUntilTimeout>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d001      	beq.n	800bdd8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	e000      	b.n	800bdda <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800bdd8:	2300      	movs	r3, #0
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	3710      	adds	r7, #16
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
 800bde2:	bf00      	nop
 800bde4:	80002000 	.word	0x80002000

0800bde8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b083      	sub	sp, #12
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	699b      	ldr	r3, [r3, #24]
 800bdf6:	f003 0302 	and.w	r3, r3, #2
 800bdfa:	2b02      	cmp	r3, #2
 800bdfc:	d103      	bne.n	800be06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	2200      	movs	r2, #0
 800be04:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	699b      	ldr	r3, [r3, #24]
 800be0c:	f003 0301 	and.w	r3, r3, #1
 800be10:	2b01      	cmp	r3, #1
 800be12:	d007      	beq.n	800be24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	699a      	ldr	r2, [r3, #24]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f042 0201 	orr.w	r2, r2, #1
 800be22:	619a      	str	r2, [r3, #24]
  }
}
 800be24:	bf00      	nop
 800be26:	370c      	adds	r7, #12
 800be28:	46bd      	mov	sp, r7
 800be2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2e:	4770      	bx	lr

0800be30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af00      	add	r7, sp, #0
 800be36:	60f8      	str	r0, [r7, #12]
 800be38:	60b9      	str	r1, [r7, #8]
 800be3a:	603b      	str	r3, [r7, #0]
 800be3c:	4613      	mov	r3, r2
 800be3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800be40:	e03b      	b.n	800beba <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800be42:	69ba      	ldr	r2, [r7, #24]
 800be44:	6839      	ldr	r1, [r7, #0]
 800be46:	68f8      	ldr	r0, [r7, #12]
 800be48:	f000 f8d6 	bl	800bff8 <I2C_IsErrorOccurred>
 800be4c:	4603      	mov	r3, r0
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d001      	beq.n	800be56 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800be52:	2301      	movs	r3, #1
 800be54:	e041      	b.n	800beda <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800be5c:	d02d      	beq.n	800beba <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be5e:	f7fd fd37 	bl	80098d0 <HAL_GetTick>
 800be62:	4602      	mov	r2, r0
 800be64:	69bb      	ldr	r3, [r7, #24]
 800be66:	1ad3      	subs	r3, r2, r3
 800be68:	683a      	ldr	r2, [r7, #0]
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d302      	bcc.n	800be74 <I2C_WaitOnFlagUntilTimeout+0x44>
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d122      	bne.n	800beba <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	699a      	ldr	r2, [r3, #24]
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	4013      	ands	r3, r2
 800be7e:	68ba      	ldr	r2, [r7, #8]
 800be80:	429a      	cmp	r2, r3
 800be82:	bf0c      	ite	eq
 800be84:	2301      	moveq	r3, #1
 800be86:	2300      	movne	r3, #0
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	461a      	mov	r2, r3
 800be8c:	79fb      	ldrb	r3, [r7, #7]
 800be8e:	429a      	cmp	r2, r3
 800be90:	d113      	bne.n	800beba <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be96:	f043 0220 	orr.w	r2, r3, #32
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	2220      	movs	r2, #32
 800bea2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2200      	movs	r2, #0
 800beaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	2200      	movs	r2, #0
 800beb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800beb6:	2301      	movs	r3, #1
 800beb8:	e00f      	b.n	800beda <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	699a      	ldr	r2, [r3, #24]
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	4013      	ands	r3, r2
 800bec4:	68ba      	ldr	r2, [r7, #8]
 800bec6:	429a      	cmp	r2, r3
 800bec8:	bf0c      	ite	eq
 800beca:	2301      	moveq	r3, #1
 800becc:	2300      	movne	r3, #0
 800bece:	b2db      	uxtb	r3, r3
 800bed0:	461a      	mov	r2, r3
 800bed2:	79fb      	ldrb	r3, [r7, #7]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d0b4      	beq.n	800be42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bed8:	2300      	movs	r3, #0
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3710      	adds	r7, #16
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}

0800bee2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800bee2:	b580      	push	{r7, lr}
 800bee4:	b084      	sub	sp, #16
 800bee6:	af00      	add	r7, sp, #0
 800bee8:	60f8      	str	r0, [r7, #12]
 800beea:	60b9      	str	r1, [r7, #8]
 800beec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800beee:	e033      	b.n	800bf58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bef0:	687a      	ldr	r2, [r7, #4]
 800bef2:	68b9      	ldr	r1, [r7, #8]
 800bef4:	68f8      	ldr	r0, [r7, #12]
 800bef6:	f000 f87f 	bl	800bff8 <I2C_IsErrorOccurred>
 800befa:	4603      	mov	r3, r0
 800befc:	2b00      	cmp	r3, #0
 800befe:	d001      	beq.n	800bf04 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bf00:	2301      	movs	r3, #1
 800bf02:	e031      	b.n	800bf68 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bf0a:	d025      	beq.n	800bf58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf0c:	f7fd fce0 	bl	80098d0 <HAL_GetTick>
 800bf10:	4602      	mov	r2, r0
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	1ad3      	subs	r3, r2, r3
 800bf16:	68ba      	ldr	r2, [r7, #8]
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d302      	bcc.n	800bf22 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d11a      	bne.n	800bf58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	699b      	ldr	r3, [r3, #24]
 800bf28:	f003 0302 	and.w	r3, r3, #2
 800bf2c:	2b02      	cmp	r3, #2
 800bf2e:	d013      	beq.n	800bf58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf34:	f043 0220 	orr.w	r2, r3, #32
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	2220      	movs	r2, #32
 800bf40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	2200      	movs	r2, #0
 800bf48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800bf54:	2301      	movs	r3, #1
 800bf56:	e007      	b.n	800bf68 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	699b      	ldr	r3, [r3, #24]
 800bf5e:	f003 0302 	and.w	r3, r3, #2
 800bf62:	2b02      	cmp	r3, #2
 800bf64:	d1c4      	bne.n	800bef0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bf66:	2300      	movs	r3, #0
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3710      	adds	r7, #16
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	60f8      	str	r0, [r7, #12]
 800bf78:	60b9      	str	r1, [r7, #8]
 800bf7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bf7c:	e02f      	b.n	800bfde <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf7e:	687a      	ldr	r2, [r7, #4]
 800bf80:	68b9      	ldr	r1, [r7, #8]
 800bf82:	68f8      	ldr	r0, [r7, #12]
 800bf84:	f000 f838 	bl	800bff8 <I2C_IsErrorOccurred>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d001      	beq.n	800bf92 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bf8e:	2301      	movs	r3, #1
 800bf90:	e02d      	b.n	800bfee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf92:	f7fd fc9d 	bl	80098d0 <HAL_GetTick>
 800bf96:	4602      	mov	r2, r0
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	1ad3      	subs	r3, r2, r3
 800bf9c:	68ba      	ldr	r2, [r7, #8]
 800bf9e:	429a      	cmp	r2, r3
 800bfa0:	d302      	bcc.n	800bfa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d11a      	bne.n	800bfde <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	699b      	ldr	r3, [r3, #24]
 800bfae:	f003 0320 	and.w	r3, r3, #32
 800bfb2:	2b20      	cmp	r3, #32
 800bfb4:	d013      	beq.n	800bfde <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfba:	f043 0220 	orr.w	r2, r3, #32
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	2220      	movs	r2, #32
 800bfc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800bfda:	2301      	movs	r3, #1
 800bfdc:	e007      	b.n	800bfee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	699b      	ldr	r3, [r3, #24]
 800bfe4:	f003 0320 	and.w	r3, r3, #32
 800bfe8:	2b20      	cmp	r3, #32
 800bfea:	d1c8      	bne.n	800bf7e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bfec:	2300      	movs	r3, #0
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3710      	adds	r7, #16
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
	...

0800bff8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b08a      	sub	sp, #40	@ 0x28
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	60f8      	str	r0, [r7, #12]
 800c000:	60b9      	str	r1, [r7, #8]
 800c002:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c004:	2300      	movs	r3, #0
 800c006:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	699b      	ldr	r3, [r3, #24]
 800c010:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800c012:	2300      	movs	r3, #0
 800c014:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800c01a:	69bb      	ldr	r3, [r7, #24]
 800c01c:	f003 0310 	and.w	r3, r3, #16
 800c020:	2b00      	cmp	r3, #0
 800c022:	d068      	beq.n	800c0f6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	2210      	movs	r2, #16
 800c02a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c02c:	e049      	b.n	800c0c2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c034:	d045      	beq.n	800c0c2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c036:	f7fd fc4b 	bl	80098d0 <HAL_GetTick>
 800c03a:	4602      	mov	r2, r0
 800c03c:	69fb      	ldr	r3, [r7, #28]
 800c03e:	1ad3      	subs	r3, r2, r3
 800c040:	68ba      	ldr	r2, [r7, #8]
 800c042:	429a      	cmp	r2, r3
 800c044:	d302      	bcc.n	800c04c <I2C_IsErrorOccurred+0x54>
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d13a      	bne.n	800c0c2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	685b      	ldr	r3, [r3, #4]
 800c052:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c056:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c05e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	699b      	ldr	r3, [r3, #24]
 800c066:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c06a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c06e:	d121      	bne.n	800c0b4 <I2C_IsErrorOccurred+0xbc>
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c076:	d01d      	beq.n	800c0b4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800c078:	7cfb      	ldrb	r3, [r7, #19]
 800c07a:	2b20      	cmp	r3, #32
 800c07c:	d01a      	beq.n	800c0b4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	685a      	ldr	r2, [r3, #4]
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c08c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800c08e:	f7fd fc1f 	bl	80098d0 <HAL_GetTick>
 800c092:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c094:	e00e      	b.n	800c0b4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800c096:	f7fd fc1b 	bl	80098d0 <HAL_GetTick>
 800c09a:	4602      	mov	r2, r0
 800c09c:	69fb      	ldr	r3, [r7, #28]
 800c09e:	1ad3      	subs	r3, r2, r3
 800c0a0:	2b19      	cmp	r3, #25
 800c0a2:	d907      	bls.n	800c0b4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800c0a4:	6a3b      	ldr	r3, [r7, #32]
 800c0a6:	f043 0320 	orr.w	r3, r3, #32
 800c0aa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800c0b2:	e006      	b.n	800c0c2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	699b      	ldr	r3, [r3, #24]
 800c0ba:	f003 0320 	and.w	r3, r3, #32
 800c0be:	2b20      	cmp	r3, #32
 800c0c0:	d1e9      	bne.n	800c096 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	699b      	ldr	r3, [r3, #24]
 800c0c8:	f003 0320 	and.w	r3, r3, #32
 800c0cc:	2b20      	cmp	r3, #32
 800c0ce:	d003      	beq.n	800c0d8 <I2C_IsErrorOccurred+0xe0>
 800c0d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d0aa      	beq.n	800c02e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800c0d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d103      	bne.n	800c0e8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	2220      	movs	r2, #32
 800c0e6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800c0e8:	6a3b      	ldr	r3, [r7, #32]
 800c0ea:	f043 0304 	orr.w	r3, r3, #4
 800c0ee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	699b      	ldr	r3, [r3, #24]
 800c0fc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800c0fe:	69bb      	ldr	r3, [r7, #24]
 800c100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c104:	2b00      	cmp	r3, #0
 800c106:	d00b      	beq.n	800c120 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800c108:	6a3b      	ldr	r3, [r7, #32]
 800c10a:	f043 0301 	orr.w	r3, r3, #1
 800c10e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c118:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c11a:	2301      	movs	r3, #1
 800c11c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800c120:	69bb      	ldr	r3, [r7, #24]
 800c122:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c126:	2b00      	cmp	r3, #0
 800c128:	d00b      	beq.n	800c142 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800c12a:	6a3b      	ldr	r3, [r7, #32]
 800c12c:	f043 0308 	orr.w	r3, r3, #8
 800c130:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c13a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c13c:	2301      	movs	r3, #1
 800c13e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800c142:	69bb      	ldr	r3, [r7, #24]
 800c144:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d00b      	beq.n	800c164 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800c14c:	6a3b      	ldr	r3, [r7, #32]
 800c14e:	f043 0302 	orr.w	r3, r3, #2
 800c152:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c15c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c15e:	2301      	movs	r3, #1
 800c160:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800c164:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d01c      	beq.n	800c1a6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c16c:	68f8      	ldr	r0, [r7, #12]
 800c16e:	f7ff fe3b 	bl	800bde8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	6859      	ldr	r1, [r3, #4]
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	4b0d      	ldr	r3, [pc, #52]	@ (800c1b4 <I2C_IsErrorOccurred+0x1bc>)
 800c17e:	400b      	ands	r3, r1
 800c180:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c186:	6a3b      	ldr	r3, [r7, #32]
 800c188:	431a      	orrs	r2, r3
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2220      	movs	r2, #32
 800c192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	2200      	movs	r2, #0
 800c19a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800c1a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3728      	adds	r7, #40	@ 0x28
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	fe00e800 	.word	0xfe00e800

0800c1b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	b087      	sub	sp, #28
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	60f8      	str	r0, [r7, #12]
 800c1c0:	607b      	str	r3, [r7, #4]
 800c1c2:	460b      	mov	r3, r1
 800c1c4:	817b      	strh	r3, [r7, #10]
 800c1c6:	4613      	mov	r3, r2
 800c1c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c1ca:	897b      	ldrh	r3, [r7, #10]
 800c1cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c1d0:	7a7b      	ldrb	r3, [r7, #9]
 800c1d2:	041b      	lsls	r3, r3, #16
 800c1d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c1d8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c1de:	6a3b      	ldr	r3, [r7, #32]
 800c1e0:	4313      	orrs	r3, r2
 800c1e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c1e6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	685a      	ldr	r2, [r3, #4]
 800c1ee:	6a3b      	ldr	r3, [r7, #32]
 800c1f0:	0d5b      	lsrs	r3, r3, #21
 800c1f2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800c1f6:	4b08      	ldr	r3, [pc, #32]	@ (800c218 <I2C_TransferConfig+0x60>)
 800c1f8:	430b      	orrs	r3, r1
 800c1fa:	43db      	mvns	r3, r3
 800c1fc:	ea02 0103 	and.w	r1, r2, r3
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	697a      	ldr	r2, [r7, #20]
 800c206:	430a      	orrs	r2, r1
 800c208:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800c20a:	bf00      	nop
 800c20c:	371c      	adds	r7, #28
 800c20e:	46bd      	mov	sp, r7
 800c210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c214:	4770      	bx	lr
 800c216:	bf00      	nop
 800c218:	03ff63ff 	.word	0x03ff63ff

0800c21c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b083      	sub	sp, #12
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
 800c224:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c22c:	b2db      	uxtb	r3, r3
 800c22e:	2b20      	cmp	r3, #32
 800c230:	d138      	bne.n	800c2a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c238:	2b01      	cmp	r3, #1
 800c23a:	d101      	bne.n	800c240 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c23c:	2302      	movs	r3, #2
 800c23e:	e032      	b.n	800c2a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2201      	movs	r2, #1
 800c244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2224      	movs	r2, #36	@ 0x24
 800c24c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	681a      	ldr	r2, [r3, #0]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f022 0201 	bic.w	r2, r2, #1
 800c25e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	681a      	ldr	r2, [r3, #0]
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c26e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	6819      	ldr	r1, [r3, #0]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	683a      	ldr	r2, [r7, #0]
 800c27c:	430a      	orrs	r2, r1
 800c27e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	681a      	ldr	r2, [r3, #0]
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f042 0201 	orr.w	r2, r2, #1
 800c28e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2220      	movs	r2, #32
 800c294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2200      	movs	r2, #0
 800c29c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	e000      	b.n	800c2a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c2a4:	2302      	movs	r3, #2
  }
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	370c      	adds	r7, #12
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b0:	4770      	bx	lr

0800c2b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c2b2:	b480      	push	{r7}
 800c2b4:	b085      	sub	sp, #20
 800c2b6:	af00      	add	r7, sp, #0
 800c2b8:	6078      	str	r0, [r7, #4]
 800c2ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c2c2:	b2db      	uxtb	r3, r3
 800c2c4:	2b20      	cmp	r3, #32
 800c2c6:	d139      	bne.n	800c33c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c2ce:	2b01      	cmp	r3, #1
 800c2d0:	d101      	bne.n	800c2d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c2d2:	2302      	movs	r3, #2
 800c2d4:	e033      	b.n	800c33e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2201      	movs	r2, #1
 800c2da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2224      	movs	r2, #36	@ 0x24
 800c2e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f022 0201 	bic.w	r2, r2, #1
 800c2f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800c304:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	021b      	lsls	r3, r3, #8
 800c30a:	68fa      	ldr	r2, [r7, #12]
 800c30c:	4313      	orrs	r3, r2
 800c30e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	68fa      	ldr	r2, [r7, #12]
 800c316:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	681a      	ldr	r2, [r3, #0]
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f042 0201 	orr.w	r2, r2, #1
 800c326:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2220      	movs	r2, #32
 800c32c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2200      	movs	r2, #0
 800c334:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800c338:	2300      	movs	r3, #0
 800c33a:	e000      	b.n	800c33e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c33c:	2302      	movs	r3, #2
  }
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3714      	adds	r7, #20
 800c342:	46bd      	mov	sp, r7
 800c344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c348:	4770      	bx	lr
	...

0800c34c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800c34c:	b480      	push	{r7}
 800c34e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800c350:	4b04      	ldr	r3, [pc, #16]	@ (800c364 <HAL_PWREx_GetVoltageRange+0x18>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800c358:	4618      	mov	r0, r3
 800c35a:	46bd      	mov	sp, r7
 800c35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c360:	4770      	bx	lr
 800c362:	bf00      	nop
 800c364:	40007000 	.word	0x40007000

0800c368 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c368:	b480      	push	{r7}
 800c36a:	b085      	sub	sp, #20
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c376:	d130      	bne.n	800c3da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800c378:	4b23      	ldr	r3, [pc, #140]	@ (800c408 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c380:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c384:	d038      	beq.n	800c3f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c386:	4b20      	ldr	r3, [pc, #128]	@ (800c408 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800c38e:	4a1e      	ldr	r2, [pc, #120]	@ (800c408 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c390:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c394:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c396:	4b1d      	ldr	r3, [pc, #116]	@ (800c40c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	2232      	movs	r2, #50	@ 0x32
 800c39c:	fb02 f303 	mul.w	r3, r2, r3
 800c3a0:	4a1b      	ldr	r2, [pc, #108]	@ (800c410 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800c3a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c3a6:	0c9b      	lsrs	r3, r3, #18
 800c3a8:	3301      	adds	r3, #1
 800c3aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c3ac:	e002      	b.n	800c3b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	3b01      	subs	r3, #1
 800c3b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c3b4:	4b14      	ldr	r3, [pc, #80]	@ (800c408 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c3b6:	695b      	ldr	r3, [r3, #20]
 800c3b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c3bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c3c0:	d102      	bne.n	800c3c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d1f2      	bne.n	800c3ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c3c8:	4b0f      	ldr	r3, [pc, #60]	@ (800c408 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c3ca:	695b      	ldr	r3, [r3, #20]
 800c3cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c3d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c3d4:	d110      	bne.n	800c3f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800c3d6:	2303      	movs	r3, #3
 800c3d8:	e00f      	b.n	800c3fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800c3da:	4b0b      	ldr	r3, [pc, #44]	@ (800c408 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c3e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c3e6:	d007      	beq.n	800c3f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c3e8:	4b07      	ldr	r3, [pc, #28]	@ (800c408 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800c3f0:	4a05      	ldr	r2, [pc, #20]	@ (800c408 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c3f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c3f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800c3f8:	2300      	movs	r3, #0
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3714      	adds	r7, #20
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr
 800c406:	bf00      	nop
 800c408:	40007000 	.word	0x40007000
 800c40c:	2000005c 	.word	0x2000005c
 800c410:	431bde83 	.word	0x431bde83

0800c414 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b088      	sub	sp, #32
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d102      	bne.n	800c428 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800c422:	2301      	movs	r3, #1
 800c424:	f000 bc02 	b.w	800cc2c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c428:	4b96      	ldr	r3, [pc, #600]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c42a:	689b      	ldr	r3, [r3, #8]
 800c42c:	f003 030c 	and.w	r3, r3, #12
 800c430:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c432:	4b94      	ldr	r3, [pc, #592]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c434:	68db      	ldr	r3, [r3, #12]
 800c436:	f003 0303 	and.w	r3, r3, #3
 800c43a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	f003 0310 	and.w	r3, r3, #16
 800c444:	2b00      	cmp	r3, #0
 800c446:	f000 80e4 	beq.w	800c612 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c44a:	69bb      	ldr	r3, [r7, #24]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d007      	beq.n	800c460 <HAL_RCC_OscConfig+0x4c>
 800c450:	69bb      	ldr	r3, [r7, #24]
 800c452:	2b0c      	cmp	r3, #12
 800c454:	f040 808b 	bne.w	800c56e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	2b01      	cmp	r3, #1
 800c45c:	f040 8087 	bne.w	800c56e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c460:	4b88      	ldr	r3, [pc, #544]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f003 0302 	and.w	r3, r3, #2
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d005      	beq.n	800c478 <HAL_RCC_OscConfig+0x64>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	699b      	ldr	r3, [r3, #24]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d101      	bne.n	800c478 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800c474:	2301      	movs	r3, #1
 800c476:	e3d9      	b.n	800cc2c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6a1a      	ldr	r2, [r3, #32]
 800c47c:	4b81      	ldr	r3, [pc, #516]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f003 0308 	and.w	r3, r3, #8
 800c484:	2b00      	cmp	r3, #0
 800c486:	d004      	beq.n	800c492 <HAL_RCC_OscConfig+0x7e>
 800c488:	4b7e      	ldr	r3, [pc, #504]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c490:	e005      	b.n	800c49e <HAL_RCC_OscConfig+0x8a>
 800c492:	4b7c      	ldr	r3, [pc, #496]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c494:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c498:	091b      	lsrs	r3, r3, #4
 800c49a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d223      	bcs.n	800c4ea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6a1b      	ldr	r3, [r3, #32]
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f000 fd8c 	bl	800cfc4 <RCC_SetFlashLatencyFromMSIRange>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d001      	beq.n	800c4b6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	e3ba      	b.n	800cc2c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c4b6:	4b73      	ldr	r3, [pc, #460]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	4a72      	ldr	r2, [pc, #456]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c4bc:	f043 0308 	orr.w	r3, r3, #8
 800c4c0:	6013      	str	r3, [r2, #0]
 800c4c2:	4b70      	ldr	r3, [pc, #448]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6a1b      	ldr	r3, [r3, #32]
 800c4ce:	496d      	ldr	r1, [pc, #436]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c4d0:	4313      	orrs	r3, r2
 800c4d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c4d4:	4b6b      	ldr	r3, [pc, #428]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c4d6:	685b      	ldr	r3, [r3, #4]
 800c4d8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	69db      	ldr	r3, [r3, #28]
 800c4e0:	021b      	lsls	r3, r3, #8
 800c4e2:	4968      	ldr	r1, [pc, #416]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c4e4:	4313      	orrs	r3, r2
 800c4e6:	604b      	str	r3, [r1, #4]
 800c4e8:	e025      	b.n	800c536 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c4ea:	4b66      	ldr	r3, [pc, #408]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	4a65      	ldr	r2, [pc, #404]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c4f0:	f043 0308 	orr.w	r3, r3, #8
 800c4f4:	6013      	str	r3, [r2, #0]
 800c4f6:	4b63      	ldr	r3, [pc, #396]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6a1b      	ldr	r3, [r3, #32]
 800c502:	4960      	ldr	r1, [pc, #384]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c504:	4313      	orrs	r3, r2
 800c506:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c508:	4b5e      	ldr	r3, [pc, #376]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c50a:	685b      	ldr	r3, [r3, #4]
 800c50c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	69db      	ldr	r3, [r3, #28]
 800c514:	021b      	lsls	r3, r3, #8
 800c516:	495b      	ldr	r1, [pc, #364]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c518:	4313      	orrs	r3, r2
 800c51a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c51c:	69bb      	ldr	r3, [r7, #24]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d109      	bne.n	800c536 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6a1b      	ldr	r3, [r3, #32]
 800c526:	4618      	mov	r0, r3
 800c528:	f000 fd4c 	bl	800cfc4 <RCC_SetFlashLatencyFromMSIRange>
 800c52c:	4603      	mov	r3, r0
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d001      	beq.n	800c536 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800c532:	2301      	movs	r3, #1
 800c534:	e37a      	b.n	800cc2c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c536:	f000 fc81 	bl	800ce3c <HAL_RCC_GetSysClockFreq>
 800c53a:	4602      	mov	r2, r0
 800c53c:	4b51      	ldr	r3, [pc, #324]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c53e:	689b      	ldr	r3, [r3, #8]
 800c540:	091b      	lsrs	r3, r3, #4
 800c542:	f003 030f 	and.w	r3, r3, #15
 800c546:	4950      	ldr	r1, [pc, #320]	@ (800c688 <HAL_RCC_OscConfig+0x274>)
 800c548:	5ccb      	ldrb	r3, [r1, r3]
 800c54a:	f003 031f 	and.w	r3, r3, #31
 800c54e:	fa22 f303 	lsr.w	r3, r2, r3
 800c552:	4a4e      	ldr	r2, [pc, #312]	@ (800c68c <HAL_RCC_OscConfig+0x278>)
 800c554:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800c556:	4b4e      	ldr	r3, [pc, #312]	@ (800c690 <HAL_RCC_OscConfig+0x27c>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	4618      	mov	r0, r3
 800c55c:	f7fd f968 	bl	8009830 <HAL_InitTick>
 800c560:	4603      	mov	r3, r0
 800c562:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800c564:	7bfb      	ldrb	r3, [r7, #15]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d052      	beq.n	800c610 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800c56a:	7bfb      	ldrb	r3, [r7, #15]
 800c56c:	e35e      	b.n	800cc2c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	699b      	ldr	r3, [r3, #24]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d032      	beq.n	800c5dc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c576:	4b43      	ldr	r3, [pc, #268]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	4a42      	ldr	r2, [pc, #264]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c57c:	f043 0301 	orr.w	r3, r3, #1
 800c580:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c582:	f7fd f9a5 	bl	80098d0 <HAL_GetTick>
 800c586:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c588:	e008      	b.n	800c59c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c58a:	f7fd f9a1 	bl	80098d0 <HAL_GetTick>
 800c58e:	4602      	mov	r2, r0
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	1ad3      	subs	r3, r2, r3
 800c594:	2b02      	cmp	r3, #2
 800c596:	d901      	bls.n	800c59c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800c598:	2303      	movs	r3, #3
 800c59a:	e347      	b.n	800cc2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c59c:	4b39      	ldr	r3, [pc, #228]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	f003 0302 	and.w	r3, r3, #2
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d0f0      	beq.n	800c58a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c5a8:	4b36      	ldr	r3, [pc, #216]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4a35      	ldr	r2, [pc, #212]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c5ae:	f043 0308 	orr.w	r3, r3, #8
 800c5b2:	6013      	str	r3, [r2, #0]
 800c5b4:	4b33      	ldr	r3, [pc, #204]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	6a1b      	ldr	r3, [r3, #32]
 800c5c0:	4930      	ldr	r1, [pc, #192]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c5c2:	4313      	orrs	r3, r2
 800c5c4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c5c6:	4b2f      	ldr	r3, [pc, #188]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c5c8:	685b      	ldr	r3, [r3, #4]
 800c5ca:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	69db      	ldr	r3, [r3, #28]
 800c5d2:	021b      	lsls	r3, r3, #8
 800c5d4:	492b      	ldr	r1, [pc, #172]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c5d6:	4313      	orrs	r3, r2
 800c5d8:	604b      	str	r3, [r1, #4]
 800c5da:	e01a      	b.n	800c612 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c5dc:	4b29      	ldr	r3, [pc, #164]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	4a28      	ldr	r2, [pc, #160]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c5e2:	f023 0301 	bic.w	r3, r3, #1
 800c5e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c5e8:	f7fd f972 	bl	80098d0 <HAL_GetTick>
 800c5ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c5ee:	e008      	b.n	800c602 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c5f0:	f7fd f96e 	bl	80098d0 <HAL_GetTick>
 800c5f4:	4602      	mov	r2, r0
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	1ad3      	subs	r3, r2, r3
 800c5fa:	2b02      	cmp	r3, #2
 800c5fc:	d901      	bls.n	800c602 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800c5fe:	2303      	movs	r3, #3
 800c600:	e314      	b.n	800cc2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c602:	4b20      	ldr	r3, [pc, #128]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f003 0302 	and.w	r3, r3, #2
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d1f0      	bne.n	800c5f0 <HAL_RCC_OscConfig+0x1dc>
 800c60e:	e000      	b.n	800c612 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c610:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f003 0301 	and.w	r3, r3, #1
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d073      	beq.n	800c706 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800c61e:	69bb      	ldr	r3, [r7, #24]
 800c620:	2b08      	cmp	r3, #8
 800c622:	d005      	beq.n	800c630 <HAL_RCC_OscConfig+0x21c>
 800c624:	69bb      	ldr	r3, [r7, #24]
 800c626:	2b0c      	cmp	r3, #12
 800c628:	d10e      	bne.n	800c648 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	2b03      	cmp	r3, #3
 800c62e:	d10b      	bne.n	800c648 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c630:	4b14      	ldr	r3, [pc, #80]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d063      	beq.n	800c704 <HAL_RCC_OscConfig+0x2f0>
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	685b      	ldr	r3, [r3, #4]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d15f      	bne.n	800c704 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800c644:	2301      	movs	r3, #1
 800c646:	e2f1      	b.n	800cc2c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	685b      	ldr	r3, [r3, #4]
 800c64c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c650:	d106      	bne.n	800c660 <HAL_RCC_OscConfig+0x24c>
 800c652:	4b0c      	ldr	r3, [pc, #48]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	4a0b      	ldr	r2, [pc, #44]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c658:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c65c:	6013      	str	r3, [r2, #0]
 800c65e:	e025      	b.n	800c6ac <HAL_RCC_OscConfig+0x298>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c668:	d114      	bne.n	800c694 <HAL_RCC_OscConfig+0x280>
 800c66a:	4b06      	ldr	r3, [pc, #24]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	4a05      	ldr	r2, [pc, #20]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c670:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c674:	6013      	str	r3, [r2, #0]
 800c676:	4b03      	ldr	r3, [pc, #12]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4a02      	ldr	r2, [pc, #8]	@ (800c684 <HAL_RCC_OscConfig+0x270>)
 800c67c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c680:	6013      	str	r3, [r2, #0]
 800c682:	e013      	b.n	800c6ac <HAL_RCC_OscConfig+0x298>
 800c684:	40021000 	.word	0x40021000
 800c688:	08012e10 	.word	0x08012e10
 800c68c:	2000005c 	.word	0x2000005c
 800c690:	20000060 	.word	0x20000060
 800c694:	4ba0      	ldr	r3, [pc, #640]	@ (800c918 <HAL_RCC_OscConfig+0x504>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4a9f      	ldr	r2, [pc, #636]	@ (800c918 <HAL_RCC_OscConfig+0x504>)
 800c69a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c69e:	6013      	str	r3, [r2, #0]
 800c6a0:	4b9d      	ldr	r3, [pc, #628]	@ (800c918 <HAL_RCC_OscConfig+0x504>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	4a9c      	ldr	r2, [pc, #624]	@ (800c918 <HAL_RCC_OscConfig+0x504>)
 800c6a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c6aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	685b      	ldr	r3, [r3, #4]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d013      	beq.n	800c6dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6b4:	f7fd f90c 	bl	80098d0 <HAL_GetTick>
 800c6b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c6ba:	e008      	b.n	800c6ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c6bc:	f7fd f908 	bl	80098d0 <HAL_GetTick>
 800c6c0:	4602      	mov	r2, r0
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	1ad3      	subs	r3, r2, r3
 800c6c6:	2b64      	cmp	r3, #100	@ 0x64
 800c6c8:	d901      	bls.n	800c6ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800c6ca:	2303      	movs	r3, #3
 800c6cc:	e2ae      	b.n	800cc2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c6ce:	4b92      	ldr	r3, [pc, #584]	@ (800c918 <HAL_RCC_OscConfig+0x504>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d0f0      	beq.n	800c6bc <HAL_RCC_OscConfig+0x2a8>
 800c6da:	e014      	b.n	800c706 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6dc:	f7fd f8f8 	bl	80098d0 <HAL_GetTick>
 800c6e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c6e2:	e008      	b.n	800c6f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c6e4:	f7fd f8f4 	bl	80098d0 <HAL_GetTick>
 800c6e8:	4602      	mov	r2, r0
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	1ad3      	subs	r3, r2, r3
 800c6ee:	2b64      	cmp	r3, #100	@ 0x64
 800c6f0:	d901      	bls.n	800c6f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800c6f2:	2303      	movs	r3, #3
 800c6f4:	e29a      	b.n	800cc2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c6f6:	4b88      	ldr	r3, [pc, #544]	@ (800c918 <HAL_RCC_OscConfig+0x504>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d1f0      	bne.n	800c6e4 <HAL_RCC_OscConfig+0x2d0>
 800c702:	e000      	b.n	800c706 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	f003 0302 	and.w	r3, r3, #2
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d060      	beq.n	800c7d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800c712:	69bb      	ldr	r3, [r7, #24]
 800c714:	2b04      	cmp	r3, #4
 800c716:	d005      	beq.n	800c724 <HAL_RCC_OscConfig+0x310>
 800c718:	69bb      	ldr	r3, [r7, #24]
 800c71a:	2b0c      	cmp	r3, #12
 800c71c:	d119      	bne.n	800c752 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	2b02      	cmp	r3, #2
 800c722:	d116      	bne.n	800c752 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c724:	4b7c      	ldr	r3, [pc, #496]	@ (800c918 <HAL_RCC_OscConfig+0x504>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d005      	beq.n	800c73c <HAL_RCC_OscConfig+0x328>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	68db      	ldr	r3, [r3, #12]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d101      	bne.n	800c73c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800c738:	2301      	movs	r3, #1
 800c73a:	e277      	b.n	800cc2c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c73c:	4b76      	ldr	r3, [pc, #472]	@ (800c918 <HAL_RCC_OscConfig+0x504>)
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	691b      	ldr	r3, [r3, #16]
 800c748:	061b      	lsls	r3, r3, #24
 800c74a:	4973      	ldr	r1, [pc, #460]	@ (800c918 <HAL_RCC_OscConfig+0x504>)
 800c74c:	4313      	orrs	r3, r2
 800c74e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c750:	e040      	b.n	800c7d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	68db      	ldr	r3, [r3, #12]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d023      	beq.n	800c7a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c75a:	4b6f      	ldr	r3, [pc, #444]	@ (800c918 <HAL_RCC_OscConfig+0x504>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	4a6e      	ldr	r2, [pc, #440]	@ (800c918 <HAL_RCC_OscConfig+0x504>)
 800c760:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c764:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c766:	f7fd f8b3 	bl	80098d0 <HAL_GetTick>
 800c76a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c76c:	e008      	b.n	800c780 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c76e:	f7fd f8af 	bl	80098d0 <HAL_GetTick>
 800c772:	4602      	mov	r2, r0
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	1ad3      	subs	r3, r2, r3
 800c778:	2b02      	cmp	r3, #2
 800c77a:	d901      	bls.n	800c780 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800c77c:	2303      	movs	r3, #3
 800c77e:	e255      	b.n	800cc2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c780:	4b65      	ldr	r3, [pc, #404]	@ (800c918 <HAL_RCC_OscConfig+0x504>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d0f0      	beq.n	800c76e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c78c:	4b62      	ldr	r3, [pc, #392]	@ (800c918 <HAL_RCC_OscConfig+0x504>)
 800c78e:	685b      	ldr	r3, [r3, #4]
 800c790:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	691b      	ldr	r3, [r3, #16]
 800c798:	061b      	lsls	r3, r3, #24
 800c79a:	495f      	ldr	r1, [pc, #380]	@ (800c918 <HAL_RCC_OscConfig+0x504>)
 800c79c:	4313      	orrs	r3, r2
 800c79e:	604b      	str	r3, [r1, #4]
 800c7a0:	e018      	b.n	800c7d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c7a2:	4b5d      	ldr	r3, [pc, #372]	@ (800c918 <HAL_RCC_OscConfig+0x504>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	4a5c      	ldr	r2, [pc, #368]	@ (800c918 <HAL_RCC_OscConfig+0x504>)
 800c7a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c7ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7ae:	f7fd f88f 	bl	80098d0 <HAL_GetTick>
 800c7b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c7b4:	e008      	b.n	800c7c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c7b6:	f7fd f88b 	bl	80098d0 <HAL_GetTick>
 800c7ba:	4602      	mov	r2, r0
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	1ad3      	subs	r3, r2, r3
 800c7c0:	2b02      	cmp	r3, #2
 800c7c2:	d901      	bls.n	800c7c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800c7c4:	2303      	movs	r3, #3
 800c7c6:	e231      	b.n	800cc2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c7c8:	4b53      	ldr	r3, [pc, #332]	@ (800c918 <HAL_RCC_OscConfig+0x504>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d1f0      	bne.n	800c7b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f003 0308 	and.w	r3, r3, #8
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d03c      	beq.n	800c85a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	695b      	ldr	r3, [r3, #20]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d01c      	beq.n	800c822 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c7e8:	4b4b      	ldr	r3, [pc, #300]	@ (800c918 <HAL_RCC_OscConfig+0x504>)
 800c7ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c7ee:	4a4a      	ldr	r2, [pc, #296]	@ (800c918 <HAL_RCC_OscConfig+0x504>)
 800c7f0:	f043 0301 	orr.w	r3, r3, #1
 800c7f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7f8:	f7fd f86a 	bl	80098d0 <HAL_GetTick>
 800c7fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c7fe:	e008      	b.n	800c812 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c800:	f7fd f866 	bl	80098d0 <HAL_GetTick>
 800c804:	4602      	mov	r2, r0
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	1ad3      	subs	r3, r2, r3
 800c80a:	2b02      	cmp	r3, #2
 800c80c:	d901      	bls.n	800c812 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800c80e:	2303      	movs	r3, #3
 800c810:	e20c      	b.n	800cc2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c812:	4b41      	ldr	r3, [pc, #260]	@ (800c918 <HAL_RCC_OscConfig+0x504>)
 800c814:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c818:	f003 0302 	and.w	r3, r3, #2
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d0ef      	beq.n	800c800 <HAL_RCC_OscConfig+0x3ec>
 800c820:	e01b      	b.n	800c85a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c822:	4b3d      	ldr	r3, [pc, #244]	@ (800c918 <HAL_RCC_OscConfig+0x504>)
 800c824:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c828:	4a3b      	ldr	r2, [pc, #236]	@ (800c918 <HAL_RCC_OscConfig+0x504>)
 800c82a:	f023 0301 	bic.w	r3, r3, #1
 800c82e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c832:	f7fd f84d 	bl	80098d0 <HAL_GetTick>
 800c836:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c838:	e008      	b.n	800c84c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c83a:	f7fd f849 	bl	80098d0 <HAL_GetTick>
 800c83e:	4602      	mov	r2, r0
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	1ad3      	subs	r3, r2, r3
 800c844:	2b02      	cmp	r3, #2
 800c846:	d901      	bls.n	800c84c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800c848:	2303      	movs	r3, #3
 800c84a:	e1ef      	b.n	800cc2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c84c:	4b32      	ldr	r3, [pc, #200]	@ (800c918 <HAL_RCC_OscConfig+0x504>)
 800c84e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c852:	f003 0302 	and.w	r3, r3, #2
 800c856:	2b00      	cmp	r3, #0
 800c858:	d1ef      	bne.n	800c83a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f003 0304 	and.w	r3, r3, #4
 800c862:	2b00      	cmp	r3, #0
 800c864:	f000 80a6 	beq.w	800c9b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c868:	2300      	movs	r3, #0
 800c86a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800c86c:	4b2a      	ldr	r3, [pc, #168]	@ (800c918 <HAL_RCC_OscConfig+0x504>)
 800c86e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c870:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c874:	2b00      	cmp	r3, #0
 800c876:	d10d      	bne.n	800c894 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c878:	4b27      	ldr	r3, [pc, #156]	@ (800c918 <HAL_RCC_OscConfig+0x504>)
 800c87a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c87c:	4a26      	ldr	r2, [pc, #152]	@ (800c918 <HAL_RCC_OscConfig+0x504>)
 800c87e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c882:	6593      	str	r3, [r2, #88]	@ 0x58
 800c884:	4b24      	ldr	r3, [pc, #144]	@ (800c918 <HAL_RCC_OscConfig+0x504>)
 800c886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c888:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c88c:	60bb      	str	r3, [r7, #8]
 800c88e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c890:	2301      	movs	r3, #1
 800c892:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c894:	4b21      	ldr	r3, [pc, #132]	@ (800c91c <HAL_RCC_OscConfig+0x508>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d118      	bne.n	800c8d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c8a0:	4b1e      	ldr	r3, [pc, #120]	@ (800c91c <HAL_RCC_OscConfig+0x508>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4a1d      	ldr	r2, [pc, #116]	@ (800c91c <HAL_RCC_OscConfig+0x508>)
 800c8a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c8aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c8ac:	f7fd f810 	bl	80098d0 <HAL_GetTick>
 800c8b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c8b2:	e008      	b.n	800c8c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c8b4:	f7fd f80c 	bl	80098d0 <HAL_GetTick>
 800c8b8:	4602      	mov	r2, r0
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	1ad3      	subs	r3, r2, r3
 800c8be:	2b02      	cmp	r3, #2
 800c8c0:	d901      	bls.n	800c8c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800c8c2:	2303      	movs	r3, #3
 800c8c4:	e1b2      	b.n	800cc2c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c8c6:	4b15      	ldr	r3, [pc, #84]	@ (800c91c <HAL_RCC_OscConfig+0x508>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d0f0      	beq.n	800c8b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	689b      	ldr	r3, [r3, #8]
 800c8d6:	2b01      	cmp	r3, #1
 800c8d8:	d108      	bne.n	800c8ec <HAL_RCC_OscConfig+0x4d8>
 800c8da:	4b0f      	ldr	r3, [pc, #60]	@ (800c918 <HAL_RCC_OscConfig+0x504>)
 800c8dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c8e0:	4a0d      	ldr	r2, [pc, #52]	@ (800c918 <HAL_RCC_OscConfig+0x504>)
 800c8e2:	f043 0301 	orr.w	r3, r3, #1
 800c8e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c8ea:	e029      	b.n	800c940 <HAL_RCC_OscConfig+0x52c>
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	689b      	ldr	r3, [r3, #8]
 800c8f0:	2b05      	cmp	r3, #5
 800c8f2:	d115      	bne.n	800c920 <HAL_RCC_OscConfig+0x50c>
 800c8f4:	4b08      	ldr	r3, [pc, #32]	@ (800c918 <HAL_RCC_OscConfig+0x504>)
 800c8f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c8fa:	4a07      	ldr	r2, [pc, #28]	@ (800c918 <HAL_RCC_OscConfig+0x504>)
 800c8fc:	f043 0304 	orr.w	r3, r3, #4
 800c900:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c904:	4b04      	ldr	r3, [pc, #16]	@ (800c918 <HAL_RCC_OscConfig+0x504>)
 800c906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c90a:	4a03      	ldr	r2, [pc, #12]	@ (800c918 <HAL_RCC_OscConfig+0x504>)
 800c90c:	f043 0301 	orr.w	r3, r3, #1
 800c910:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c914:	e014      	b.n	800c940 <HAL_RCC_OscConfig+0x52c>
 800c916:	bf00      	nop
 800c918:	40021000 	.word	0x40021000
 800c91c:	40007000 	.word	0x40007000
 800c920:	4b9a      	ldr	r3, [pc, #616]	@ (800cb8c <HAL_RCC_OscConfig+0x778>)
 800c922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c926:	4a99      	ldr	r2, [pc, #612]	@ (800cb8c <HAL_RCC_OscConfig+0x778>)
 800c928:	f023 0301 	bic.w	r3, r3, #1
 800c92c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c930:	4b96      	ldr	r3, [pc, #600]	@ (800cb8c <HAL_RCC_OscConfig+0x778>)
 800c932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c936:	4a95      	ldr	r2, [pc, #596]	@ (800cb8c <HAL_RCC_OscConfig+0x778>)
 800c938:	f023 0304 	bic.w	r3, r3, #4
 800c93c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	689b      	ldr	r3, [r3, #8]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d016      	beq.n	800c976 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c948:	f7fc ffc2 	bl	80098d0 <HAL_GetTick>
 800c94c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c94e:	e00a      	b.n	800c966 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c950:	f7fc ffbe 	bl	80098d0 <HAL_GetTick>
 800c954:	4602      	mov	r2, r0
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	1ad3      	subs	r3, r2, r3
 800c95a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c95e:	4293      	cmp	r3, r2
 800c960:	d901      	bls.n	800c966 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800c962:	2303      	movs	r3, #3
 800c964:	e162      	b.n	800cc2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c966:	4b89      	ldr	r3, [pc, #548]	@ (800cb8c <HAL_RCC_OscConfig+0x778>)
 800c968:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c96c:	f003 0302 	and.w	r3, r3, #2
 800c970:	2b00      	cmp	r3, #0
 800c972:	d0ed      	beq.n	800c950 <HAL_RCC_OscConfig+0x53c>
 800c974:	e015      	b.n	800c9a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c976:	f7fc ffab 	bl	80098d0 <HAL_GetTick>
 800c97a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c97c:	e00a      	b.n	800c994 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c97e:	f7fc ffa7 	bl	80098d0 <HAL_GetTick>
 800c982:	4602      	mov	r2, r0
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	1ad3      	subs	r3, r2, r3
 800c988:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c98c:	4293      	cmp	r3, r2
 800c98e:	d901      	bls.n	800c994 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800c990:	2303      	movs	r3, #3
 800c992:	e14b      	b.n	800cc2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c994:	4b7d      	ldr	r3, [pc, #500]	@ (800cb8c <HAL_RCC_OscConfig+0x778>)
 800c996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c99a:	f003 0302 	and.w	r3, r3, #2
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d1ed      	bne.n	800c97e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c9a2:	7ffb      	ldrb	r3, [r7, #31]
 800c9a4:	2b01      	cmp	r3, #1
 800c9a6:	d105      	bne.n	800c9b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c9a8:	4b78      	ldr	r3, [pc, #480]	@ (800cb8c <HAL_RCC_OscConfig+0x778>)
 800c9aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c9ac:	4a77      	ldr	r2, [pc, #476]	@ (800cb8c <HAL_RCC_OscConfig+0x778>)
 800c9ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c9b2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	f003 0320 	and.w	r3, r3, #32
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d03c      	beq.n	800ca3a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d01c      	beq.n	800ca02 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c9c8:	4b70      	ldr	r3, [pc, #448]	@ (800cb8c <HAL_RCC_OscConfig+0x778>)
 800c9ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c9ce:	4a6f      	ldr	r2, [pc, #444]	@ (800cb8c <HAL_RCC_OscConfig+0x778>)
 800c9d0:	f043 0301 	orr.w	r3, r3, #1
 800c9d4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c9d8:	f7fc ff7a 	bl	80098d0 <HAL_GetTick>
 800c9dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c9de:	e008      	b.n	800c9f2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c9e0:	f7fc ff76 	bl	80098d0 <HAL_GetTick>
 800c9e4:	4602      	mov	r2, r0
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	1ad3      	subs	r3, r2, r3
 800c9ea:	2b02      	cmp	r3, #2
 800c9ec:	d901      	bls.n	800c9f2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800c9ee:	2303      	movs	r3, #3
 800c9f0:	e11c      	b.n	800cc2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c9f2:	4b66      	ldr	r3, [pc, #408]	@ (800cb8c <HAL_RCC_OscConfig+0x778>)
 800c9f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c9f8:	f003 0302 	and.w	r3, r3, #2
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d0ef      	beq.n	800c9e0 <HAL_RCC_OscConfig+0x5cc>
 800ca00:	e01b      	b.n	800ca3a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ca02:	4b62      	ldr	r3, [pc, #392]	@ (800cb8c <HAL_RCC_OscConfig+0x778>)
 800ca04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ca08:	4a60      	ldr	r2, [pc, #384]	@ (800cb8c <HAL_RCC_OscConfig+0x778>)
 800ca0a:	f023 0301 	bic.w	r3, r3, #1
 800ca0e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ca12:	f7fc ff5d 	bl	80098d0 <HAL_GetTick>
 800ca16:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ca18:	e008      	b.n	800ca2c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ca1a:	f7fc ff59 	bl	80098d0 <HAL_GetTick>
 800ca1e:	4602      	mov	r2, r0
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	1ad3      	subs	r3, r2, r3
 800ca24:	2b02      	cmp	r3, #2
 800ca26:	d901      	bls.n	800ca2c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800ca28:	2303      	movs	r3, #3
 800ca2a:	e0ff      	b.n	800cc2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ca2c:	4b57      	ldr	r3, [pc, #348]	@ (800cb8c <HAL_RCC_OscConfig+0x778>)
 800ca2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ca32:	f003 0302 	and.w	r3, r3, #2
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d1ef      	bne.n	800ca1a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	f000 80f3 	beq.w	800cc2a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca48:	2b02      	cmp	r3, #2
 800ca4a:	f040 80c9 	bne.w	800cbe0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800ca4e:	4b4f      	ldr	r3, [pc, #316]	@ (800cb8c <HAL_RCC_OscConfig+0x778>)
 800ca50:	68db      	ldr	r3, [r3, #12]
 800ca52:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	f003 0203 	and.w	r2, r3, #3
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d12c      	bne.n	800cabc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca6c:	3b01      	subs	r3, #1
 800ca6e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d123      	bne.n	800cabc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ca74:	697b      	ldr	r3, [r7, #20]
 800ca76:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca7e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d11b      	bne.n	800cabc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca8e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ca90:	429a      	cmp	r2, r3
 800ca92:	d113      	bne.n	800cabc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca9e:	085b      	lsrs	r3, r3, #1
 800caa0:	3b01      	subs	r3, #1
 800caa2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800caa4:	429a      	cmp	r2, r3
 800caa6:	d109      	bne.n	800cabc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800caa8:	697b      	ldr	r3, [r7, #20]
 800caaa:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cab2:	085b      	lsrs	r3, r3, #1
 800cab4:	3b01      	subs	r3, #1
 800cab6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cab8:	429a      	cmp	r2, r3
 800caba:	d06b      	beq.n	800cb94 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800cabc:	69bb      	ldr	r3, [r7, #24]
 800cabe:	2b0c      	cmp	r3, #12
 800cac0:	d062      	beq.n	800cb88 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800cac2:	4b32      	ldr	r3, [pc, #200]	@ (800cb8c <HAL_RCC_OscConfig+0x778>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d001      	beq.n	800cad2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800cace:	2301      	movs	r3, #1
 800cad0:	e0ac      	b.n	800cc2c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800cad2:	4b2e      	ldr	r3, [pc, #184]	@ (800cb8c <HAL_RCC_OscConfig+0x778>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	4a2d      	ldr	r2, [pc, #180]	@ (800cb8c <HAL_RCC_OscConfig+0x778>)
 800cad8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cadc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800cade:	f7fc fef7 	bl	80098d0 <HAL_GetTick>
 800cae2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cae4:	e008      	b.n	800caf8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cae6:	f7fc fef3 	bl	80098d0 <HAL_GetTick>
 800caea:	4602      	mov	r2, r0
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	1ad3      	subs	r3, r2, r3
 800caf0:	2b02      	cmp	r3, #2
 800caf2:	d901      	bls.n	800caf8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800caf4:	2303      	movs	r3, #3
 800caf6:	e099      	b.n	800cc2c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800caf8:	4b24      	ldr	r3, [pc, #144]	@ (800cb8c <HAL_RCC_OscConfig+0x778>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d1f0      	bne.n	800cae6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cb04:	4b21      	ldr	r3, [pc, #132]	@ (800cb8c <HAL_RCC_OscConfig+0x778>)
 800cb06:	68da      	ldr	r2, [r3, #12]
 800cb08:	4b21      	ldr	r3, [pc, #132]	@ (800cb90 <HAL_RCC_OscConfig+0x77c>)
 800cb0a:	4013      	ands	r3, r2
 800cb0c:	687a      	ldr	r2, [r7, #4]
 800cb0e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800cb10:	687a      	ldr	r2, [r7, #4]
 800cb12:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800cb14:	3a01      	subs	r2, #1
 800cb16:	0112      	lsls	r2, r2, #4
 800cb18:	4311      	orrs	r1, r2
 800cb1a:	687a      	ldr	r2, [r7, #4]
 800cb1c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800cb1e:	0212      	lsls	r2, r2, #8
 800cb20:	4311      	orrs	r1, r2
 800cb22:	687a      	ldr	r2, [r7, #4]
 800cb24:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800cb26:	0852      	lsrs	r2, r2, #1
 800cb28:	3a01      	subs	r2, #1
 800cb2a:	0552      	lsls	r2, r2, #21
 800cb2c:	4311      	orrs	r1, r2
 800cb2e:	687a      	ldr	r2, [r7, #4]
 800cb30:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800cb32:	0852      	lsrs	r2, r2, #1
 800cb34:	3a01      	subs	r2, #1
 800cb36:	0652      	lsls	r2, r2, #25
 800cb38:	4311      	orrs	r1, r2
 800cb3a:	687a      	ldr	r2, [r7, #4]
 800cb3c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800cb3e:	06d2      	lsls	r2, r2, #27
 800cb40:	430a      	orrs	r2, r1
 800cb42:	4912      	ldr	r1, [pc, #72]	@ (800cb8c <HAL_RCC_OscConfig+0x778>)
 800cb44:	4313      	orrs	r3, r2
 800cb46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800cb48:	4b10      	ldr	r3, [pc, #64]	@ (800cb8c <HAL_RCC_OscConfig+0x778>)
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	4a0f      	ldr	r2, [pc, #60]	@ (800cb8c <HAL_RCC_OscConfig+0x778>)
 800cb4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cb52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800cb54:	4b0d      	ldr	r3, [pc, #52]	@ (800cb8c <HAL_RCC_OscConfig+0x778>)
 800cb56:	68db      	ldr	r3, [r3, #12]
 800cb58:	4a0c      	ldr	r2, [pc, #48]	@ (800cb8c <HAL_RCC_OscConfig+0x778>)
 800cb5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cb5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800cb60:	f7fc feb6 	bl	80098d0 <HAL_GetTick>
 800cb64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cb66:	e008      	b.n	800cb7a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cb68:	f7fc feb2 	bl	80098d0 <HAL_GetTick>
 800cb6c:	4602      	mov	r2, r0
 800cb6e:	693b      	ldr	r3, [r7, #16]
 800cb70:	1ad3      	subs	r3, r2, r3
 800cb72:	2b02      	cmp	r3, #2
 800cb74:	d901      	bls.n	800cb7a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800cb76:	2303      	movs	r3, #3
 800cb78:	e058      	b.n	800cc2c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cb7a:	4b04      	ldr	r3, [pc, #16]	@ (800cb8c <HAL_RCC_OscConfig+0x778>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d0f0      	beq.n	800cb68 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800cb86:	e050      	b.n	800cc2a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800cb88:	2301      	movs	r3, #1
 800cb8a:	e04f      	b.n	800cc2c <HAL_RCC_OscConfig+0x818>
 800cb8c:	40021000 	.word	0x40021000
 800cb90:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cb94:	4b27      	ldr	r3, [pc, #156]	@ (800cc34 <HAL_RCC_OscConfig+0x820>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d144      	bne.n	800cc2a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800cba0:	4b24      	ldr	r3, [pc, #144]	@ (800cc34 <HAL_RCC_OscConfig+0x820>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	4a23      	ldr	r2, [pc, #140]	@ (800cc34 <HAL_RCC_OscConfig+0x820>)
 800cba6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cbaa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800cbac:	4b21      	ldr	r3, [pc, #132]	@ (800cc34 <HAL_RCC_OscConfig+0x820>)
 800cbae:	68db      	ldr	r3, [r3, #12]
 800cbb0:	4a20      	ldr	r2, [pc, #128]	@ (800cc34 <HAL_RCC_OscConfig+0x820>)
 800cbb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cbb6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800cbb8:	f7fc fe8a 	bl	80098d0 <HAL_GetTick>
 800cbbc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cbbe:	e008      	b.n	800cbd2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cbc0:	f7fc fe86 	bl	80098d0 <HAL_GetTick>
 800cbc4:	4602      	mov	r2, r0
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	1ad3      	subs	r3, r2, r3
 800cbca:	2b02      	cmp	r3, #2
 800cbcc:	d901      	bls.n	800cbd2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800cbce:	2303      	movs	r3, #3
 800cbd0:	e02c      	b.n	800cc2c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cbd2:	4b18      	ldr	r3, [pc, #96]	@ (800cc34 <HAL_RCC_OscConfig+0x820>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d0f0      	beq.n	800cbc0 <HAL_RCC_OscConfig+0x7ac>
 800cbde:	e024      	b.n	800cc2a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800cbe0:	69bb      	ldr	r3, [r7, #24]
 800cbe2:	2b0c      	cmp	r3, #12
 800cbe4:	d01f      	beq.n	800cc26 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cbe6:	4b13      	ldr	r3, [pc, #76]	@ (800cc34 <HAL_RCC_OscConfig+0x820>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	4a12      	ldr	r2, [pc, #72]	@ (800cc34 <HAL_RCC_OscConfig+0x820>)
 800cbec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cbf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cbf2:	f7fc fe6d 	bl	80098d0 <HAL_GetTick>
 800cbf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cbf8:	e008      	b.n	800cc0c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cbfa:	f7fc fe69 	bl	80098d0 <HAL_GetTick>
 800cbfe:	4602      	mov	r2, r0
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	1ad3      	subs	r3, r2, r3
 800cc04:	2b02      	cmp	r3, #2
 800cc06:	d901      	bls.n	800cc0c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800cc08:	2303      	movs	r3, #3
 800cc0a:	e00f      	b.n	800cc2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cc0c:	4b09      	ldr	r3, [pc, #36]	@ (800cc34 <HAL_RCC_OscConfig+0x820>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d1f0      	bne.n	800cbfa <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800cc18:	4b06      	ldr	r3, [pc, #24]	@ (800cc34 <HAL_RCC_OscConfig+0x820>)
 800cc1a:	68da      	ldr	r2, [r3, #12]
 800cc1c:	4905      	ldr	r1, [pc, #20]	@ (800cc34 <HAL_RCC_OscConfig+0x820>)
 800cc1e:	4b06      	ldr	r3, [pc, #24]	@ (800cc38 <HAL_RCC_OscConfig+0x824>)
 800cc20:	4013      	ands	r3, r2
 800cc22:	60cb      	str	r3, [r1, #12]
 800cc24:	e001      	b.n	800cc2a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800cc26:	2301      	movs	r3, #1
 800cc28:	e000      	b.n	800cc2c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800cc2a:	2300      	movs	r3, #0
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	3720      	adds	r7, #32
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}
 800cc34:	40021000 	.word	0x40021000
 800cc38:	feeefffc 	.word	0xfeeefffc

0800cc3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b084      	sub	sp, #16
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d101      	bne.n	800cc50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	e0e7      	b.n	800ce20 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800cc50:	4b75      	ldr	r3, [pc, #468]	@ (800ce28 <HAL_RCC_ClockConfig+0x1ec>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	f003 0307 	and.w	r3, r3, #7
 800cc58:	683a      	ldr	r2, [r7, #0]
 800cc5a:	429a      	cmp	r2, r3
 800cc5c:	d910      	bls.n	800cc80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cc5e:	4b72      	ldr	r3, [pc, #456]	@ (800ce28 <HAL_RCC_ClockConfig+0x1ec>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f023 0207 	bic.w	r2, r3, #7
 800cc66:	4970      	ldr	r1, [pc, #448]	@ (800ce28 <HAL_RCC_ClockConfig+0x1ec>)
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	4313      	orrs	r3, r2
 800cc6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc6e:	4b6e      	ldr	r3, [pc, #440]	@ (800ce28 <HAL_RCC_ClockConfig+0x1ec>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	f003 0307 	and.w	r3, r3, #7
 800cc76:	683a      	ldr	r2, [r7, #0]
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	d001      	beq.n	800cc80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	e0cf      	b.n	800ce20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f003 0302 	and.w	r3, r3, #2
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d010      	beq.n	800ccae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	689a      	ldr	r2, [r3, #8]
 800cc90:	4b66      	ldr	r3, [pc, #408]	@ (800ce2c <HAL_RCC_ClockConfig+0x1f0>)
 800cc92:	689b      	ldr	r3, [r3, #8]
 800cc94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	d908      	bls.n	800ccae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cc9c:	4b63      	ldr	r3, [pc, #396]	@ (800ce2c <HAL_RCC_ClockConfig+0x1f0>)
 800cc9e:	689b      	ldr	r3, [r3, #8]
 800cca0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	689b      	ldr	r3, [r3, #8]
 800cca8:	4960      	ldr	r1, [pc, #384]	@ (800ce2c <HAL_RCC_ClockConfig+0x1f0>)
 800ccaa:	4313      	orrs	r3, r2
 800ccac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f003 0301 	and.w	r3, r3, #1
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d04c      	beq.n	800cd54 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	685b      	ldr	r3, [r3, #4]
 800ccbe:	2b03      	cmp	r3, #3
 800ccc0:	d107      	bne.n	800ccd2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ccc2:	4b5a      	ldr	r3, [pc, #360]	@ (800ce2c <HAL_RCC_ClockConfig+0x1f0>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d121      	bne.n	800cd12 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800ccce:	2301      	movs	r3, #1
 800ccd0:	e0a6      	b.n	800ce20 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	685b      	ldr	r3, [r3, #4]
 800ccd6:	2b02      	cmp	r3, #2
 800ccd8:	d107      	bne.n	800ccea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ccda:	4b54      	ldr	r3, [pc, #336]	@ (800ce2c <HAL_RCC_ClockConfig+0x1f0>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d115      	bne.n	800cd12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800cce6:	2301      	movs	r3, #1
 800cce8:	e09a      	b.n	800ce20 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	685b      	ldr	r3, [r3, #4]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d107      	bne.n	800cd02 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ccf2:	4b4e      	ldr	r3, [pc, #312]	@ (800ce2c <HAL_RCC_ClockConfig+0x1f0>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	f003 0302 	and.w	r3, r3, #2
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d109      	bne.n	800cd12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800ccfe:	2301      	movs	r3, #1
 800cd00:	e08e      	b.n	800ce20 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cd02:	4b4a      	ldr	r3, [pc, #296]	@ (800ce2c <HAL_RCC_ClockConfig+0x1f0>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d101      	bne.n	800cd12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800cd0e:	2301      	movs	r3, #1
 800cd10:	e086      	b.n	800ce20 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800cd12:	4b46      	ldr	r3, [pc, #280]	@ (800ce2c <HAL_RCC_ClockConfig+0x1f0>)
 800cd14:	689b      	ldr	r3, [r3, #8]
 800cd16:	f023 0203 	bic.w	r2, r3, #3
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	685b      	ldr	r3, [r3, #4]
 800cd1e:	4943      	ldr	r1, [pc, #268]	@ (800ce2c <HAL_RCC_ClockConfig+0x1f0>)
 800cd20:	4313      	orrs	r3, r2
 800cd22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd24:	f7fc fdd4 	bl	80098d0 <HAL_GetTick>
 800cd28:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cd2a:	e00a      	b.n	800cd42 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cd2c:	f7fc fdd0 	bl	80098d0 <HAL_GetTick>
 800cd30:	4602      	mov	r2, r0
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	1ad3      	subs	r3, r2, r3
 800cd36:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd3a:	4293      	cmp	r3, r2
 800cd3c:	d901      	bls.n	800cd42 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800cd3e:	2303      	movs	r3, #3
 800cd40:	e06e      	b.n	800ce20 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cd42:	4b3a      	ldr	r3, [pc, #232]	@ (800ce2c <HAL_RCC_ClockConfig+0x1f0>)
 800cd44:	689b      	ldr	r3, [r3, #8]
 800cd46:	f003 020c 	and.w	r2, r3, #12
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	685b      	ldr	r3, [r3, #4]
 800cd4e:	009b      	lsls	r3, r3, #2
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d1eb      	bne.n	800cd2c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	f003 0302 	and.w	r3, r3, #2
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d010      	beq.n	800cd82 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	689a      	ldr	r2, [r3, #8]
 800cd64:	4b31      	ldr	r3, [pc, #196]	@ (800ce2c <HAL_RCC_ClockConfig+0x1f0>)
 800cd66:	689b      	ldr	r3, [r3, #8]
 800cd68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d208      	bcs.n	800cd82 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cd70:	4b2e      	ldr	r3, [pc, #184]	@ (800ce2c <HAL_RCC_ClockConfig+0x1f0>)
 800cd72:	689b      	ldr	r3, [r3, #8]
 800cd74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	689b      	ldr	r3, [r3, #8]
 800cd7c:	492b      	ldr	r1, [pc, #172]	@ (800ce2c <HAL_RCC_ClockConfig+0x1f0>)
 800cd7e:	4313      	orrs	r3, r2
 800cd80:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800cd82:	4b29      	ldr	r3, [pc, #164]	@ (800ce28 <HAL_RCC_ClockConfig+0x1ec>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	f003 0307 	and.w	r3, r3, #7
 800cd8a:	683a      	ldr	r2, [r7, #0]
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d210      	bcs.n	800cdb2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cd90:	4b25      	ldr	r3, [pc, #148]	@ (800ce28 <HAL_RCC_ClockConfig+0x1ec>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	f023 0207 	bic.w	r2, r3, #7
 800cd98:	4923      	ldr	r1, [pc, #140]	@ (800ce28 <HAL_RCC_ClockConfig+0x1ec>)
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	4313      	orrs	r3, r2
 800cd9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cda0:	4b21      	ldr	r3, [pc, #132]	@ (800ce28 <HAL_RCC_ClockConfig+0x1ec>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f003 0307 	and.w	r3, r3, #7
 800cda8:	683a      	ldr	r2, [r7, #0]
 800cdaa:	429a      	cmp	r2, r3
 800cdac:	d001      	beq.n	800cdb2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800cdae:	2301      	movs	r3, #1
 800cdb0:	e036      	b.n	800ce20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f003 0304 	and.w	r3, r3, #4
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d008      	beq.n	800cdd0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cdbe:	4b1b      	ldr	r3, [pc, #108]	@ (800ce2c <HAL_RCC_ClockConfig+0x1f0>)
 800cdc0:	689b      	ldr	r3, [r3, #8]
 800cdc2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	68db      	ldr	r3, [r3, #12]
 800cdca:	4918      	ldr	r1, [pc, #96]	@ (800ce2c <HAL_RCC_ClockConfig+0x1f0>)
 800cdcc:	4313      	orrs	r3, r2
 800cdce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	f003 0308 	and.w	r3, r3, #8
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d009      	beq.n	800cdf0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cddc:	4b13      	ldr	r3, [pc, #76]	@ (800ce2c <HAL_RCC_ClockConfig+0x1f0>)
 800cdde:	689b      	ldr	r3, [r3, #8]
 800cde0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	691b      	ldr	r3, [r3, #16]
 800cde8:	00db      	lsls	r3, r3, #3
 800cdea:	4910      	ldr	r1, [pc, #64]	@ (800ce2c <HAL_RCC_ClockConfig+0x1f0>)
 800cdec:	4313      	orrs	r3, r2
 800cdee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800cdf0:	f000 f824 	bl	800ce3c <HAL_RCC_GetSysClockFreq>
 800cdf4:	4602      	mov	r2, r0
 800cdf6:	4b0d      	ldr	r3, [pc, #52]	@ (800ce2c <HAL_RCC_ClockConfig+0x1f0>)
 800cdf8:	689b      	ldr	r3, [r3, #8]
 800cdfa:	091b      	lsrs	r3, r3, #4
 800cdfc:	f003 030f 	and.w	r3, r3, #15
 800ce00:	490b      	ldr	r1, [pc, #44]	@ (800ce30 <HAL_RCC_ClockConfig+0x1f4>)
 800ce02:	5ccb      	ldrb	r3, [r1, r3]
 800ce04:	f003 031f 	and.w	r3, r3, #31
 800ce08:	fa22 f303 	lsr.w	r3, r2, r3
 800ce0c:	4a09      	ldr	r2, [pc, #36]	@ (800ce34 <HAL_RCC_ClockConfig+0x1f8>)
 800ce0e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800ce10:	4b09      	ldr	r3, [pc, #36]	@ (800ce38 <HAL_RCC_ClockConfig+0x1fc>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	4618      	mov	r0, r3
 800ce16:	f7fc fd0b 	bl	8009830 <HAL_InitTick>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	72fb      	strb	r3, [r7, #11]

  return status;
 800ce1e:	7afb      	ldrb	r3, [r7, #11]
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3710      	adds	r7, #16
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}
 800ce28:	40022000 	.word	0x40022000
 800ce2c:	40021000 	.word	0x40021000
 800ce30:	08012e10 	.word	0x08012e10
 800ce34:	2000005c 	.word	0x2000005c
 800ce38:	20000060 	.word	0x20000060

0800ce3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ce3c:	b480      	push	{r7}
 800ce3e:	b089      	sub	sp, #36	@ 0x24
 800ce40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800ce42:	2300      	movs	r3, #0
 800ce44:	61fb      	str	r3, [r7, #28]
 800ce46:	2300      	movs	r3, #0
 800ce48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ce4a:	4b3e      	ldr	r3, [pc, #248]	@ (800cf44 <HAL_RCC_GetSysClockFreq+0x108>)
 800ce4c:	689b      	ldr	r3, [r3, #8]
 800ce4e:	f003 030c 	and.w	r3, r3, #12
 800ce52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ce54:	4b3b      	ldr	r3, [pc, #236]	@ (800cf44 <HAL_RCC_GetSysClockFreq+0x108>)
 800ce56:	68db      	ldr	r3, [r3, #12]
 800ce58:	f003 0303 	and.w	r3, r3, #3
 800ce5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d005      	beq.n	800ce70 <HAL_RCC_GetSysClockFreq+0x34>
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	2b0c      	cmp	r3, #12
 800ce68:	d121      	bne.n	800ceae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	2b01      	cmp	r3, #1
 800ce6e:	d11e      	bne.n	800ceae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800ce70:	4b34      	ldr	r3, [pc, #208]	@ (800cf44 <HAL_RCC_GetSysClockFreq+0x108>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	f003 0308 	and.w	r3, r3, #8
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d107      	bne.n	800ce8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800ce7c:	4b31      	ldr	r3, [pc, #196]	@ (800cf44 <HAL_RCC_GetSysClockFreq+0x108>)
 800ce7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ce82:	0a1b      	lsrs	r3, r3, #8
 800ce84:	f003 030f 	and.w	r3, r3, #15
 800ce88:	61fb      	str	r3, [r7, #28]
 800ce8a:	e005      	b.n	800ce98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800ce8c:	4b2d      	ldr	r3, [pc, #180]	@ (800cf44 <HAL_RCC_GetSysClockFreq+0x108>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	091b      	lsrs	r3, r3, #4
 800ce92:	f003 030f 	and.w	r3, r3, #15
 800ce96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800ce98:	4a2b      	ldr	r2, [pc, #172]	@ (800cf48 <HAL_RCC_GetSysClockFreq+0x10c>)
 800ce9a:	69fb      	ldr	r3, [r7, #28]
 800ce9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cea0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d10d      	bne.n	800cec4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800cea8:	69fb      	ldr	r3, [r7, #28]
 800ceaa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ceac:	e00a      	b.n	800cec4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800ceae:	693b      	ldr	r3, [r7, #16]
 800ceb0:	2b04      	cmp	r3, #4
 800ceb2:	d102      	bne.n	800ceba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ceb4:	4b25      	ldr	r3, [pc, #148]	@ (800cf4c <HAL_RCC_GetSysClockFreq+0x110>)
 800ceb6:	61bb      	str	r3, [r7, #24]
 800ceb8:	e004      	b.n	800cec4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	2b08      	cmp	r3, #8
 800cebe:	d101      	bne.n	800cec4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800cec0:	4b23      	ldr	r3, [pc, #140]	@ (800cf50 <HAL_RCC_GetSysClockFreq+0x114>)
 800cec2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	2b0c      	cmp	r3, #12
 800cec8:	d134      	bne.n	800cf34 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ceca:	4b1e      	ldr	r3, [pc, #120]	@ (800cf44 <HAL_RCC_GetSysClockFreq+0x108>)
 800cecc:	68db      	ldr	r3, [r3, #12]
 800cece:	f003 0303 	and.w	r3, r3, #3
 800ced2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	2b02      	cmp	r3, #2
 800ced8:	d003      	beq.n	800cee2 <HAL_RCC_GetSysClockFreq+0xa6>
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	2b03      	cmp	r3, #3
 800cede:	d003      	beq.n	800cee8 <HAL_RCC_GetSysClockFreq+0xac>
 800cee0:	e005      	b.n	800ceee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800cee2:	4b1a      	ldr	r3, [pc, #104]	@ (800cf4c <HAL_RCC_GetSysClockFreq+0x110>)
 800cee4:	617b      	str	r3, [r7, #20]
      break;
 800cee6:	e005      	b.n	800cef4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800cee8:	4b19      	ldr	r3, [pc, #100]	@ (800cf50 <HAL_RCC_GetSysClockFreq+0x114>)
 800ceea:	617b      	str	r3, [r7, #20]
      break;
 800ceec:	e002      	b.n	800cef4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800ceee:	69fb      	ldr	r3, [r7, #28]
 800cef0:	617b      	str	r3, [r7, #20]
      break;
 800cef2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800cef4:	4b13      	ldr	r3, [pc, #76]	@ (800cf44 <HAL_RCC_GetSysClockFreq+0x108>)
 800cef6:	68db      	ldr	r3, [r3, #12]
 800cef8:	091b      	lsrs	r3, r3, #4
 800cefa:	f003 0307 	and.w	r3, r3, #7
 800cefe:	3301      	adds	r3, #1
 800cf00:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800cf02:	4b10      	ldr	r3, [pc, #64]	@ (800cf44 <HAL_RCC_GetSysClockFreq+0x108>)
 800cf04:	68db      	ldr	r3, [r3, #12]
 800cf06:	0a1b      	lsrs	r3, r3, #8
 800cf08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf0c:	697a      	ldr	r2, [r7, #20]
 800cf0e:	fb03 f202 	mul.w	r2, r3, r2
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf18:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800cf1a:	4b0a      	ldr	r3, [pc, #40]	@ (800cf44 <HAL_RCC_GetSysClockFreq+0x108>)
 800cf1c:	68db      	ldr	r3, [r3, #12]
 800cf1e:	0e5b      	lsrs	r3, r3, #25
 800cf20:	f003 0303 	and.w	r3, r3, #3
 800cf24:	3301      	adds	r3, #1
 800cf26:	005b      	lsls	r3, r3, #1
 800cf28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800cf2a:	697a      	ldr	r2, [r7, #20]
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800cf34:	69bb      	ldr	r3, [r7, #24]
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	3724      	adds	r7, #36	@ 0x24
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf40:	4770      	bx	lr
 800cf42:	bf00      	nop
 800cf44:	40021000 	.word	0x40021000
 800cf48:	08012e28 	.word	0x08012e28
 800cf4c:	00f42400 	.word	0x00f42400
 800cf50:	007a1200 	.word	0x007a1200

0800cf54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cf54:	b480      	push	{r7}
 800cf56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cf58:	4b03      	ldr	r3, [pc, #12]	@ (800cf68 <HAL_RCC_GetHCLKFreq+0x14>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf64:	4770      	bx	lr
 800cf66:	bf00      	nop
 800cf68:	2000005c 	.word	0x2000005c

0800cf6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800cf70:	f7ff fff0 	bl	800cf54 <HAL_RCC_GetHCLKFreq>
 800cf74:	4602      	mov	r2, r0
 800cf76:	4b06      	ldr	r3, [pc, #24]	@ (800cf90 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cf78:	689b      	ldr	r3, [r3, #8]
 800cf7a:	0a1b      	lsrs	r3, r3, #8
 800cf7c:	f003 0307 	and.w	r3, r3, #7
 800cf80:	4904      	ldr	r1, [pc, #16]	@ (800cf94 <HAL_RCC_GetPCLK1Freq+0x28>)
 800cf82:	5ccb      	ldrb	r3, [r1, r3]
 800cf84:	f003 031f 	and.w	r3, r3, #31
 800cf88:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	bd80      	pop	{r7, pc}
 800cf90:	40021000 	.word	0x40021000
 800cf94:	08012e20 	.word	0x08012e20

0800cf98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800cf9c:	f7ff ffda 	bl	800cf54 <HAL_RCC_GetHCLKFreq>
 800cfa0:	4602      	mov	r2, r0
 800cfa2:	4b06      	ldr	r3, [pc, #24]	@ (800cfbc <HAL_RCC_GetPCLK2Freq+0x24>)
 800cfa4:	689b      	ldr	r3, [r3, #8]
 800cfa6:	0adb      	lsrs	r3, r3, #11
 800cfa8:	f003 0307 	and.w	r3, r3, #7
 800cfac:	4904      	ldr	r1, [pc, #16]	@ (800cfc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800cfae:	5ccb      	ldrb	r3, [r1, r3]
 800cfb0:	f003 031f 	and.w	r3, r3, #31
 800cfb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cfb8:	4618      	mov	r0, r3
 800cfba:	bd80      	pop	{r7, pc}
 800cfbc:	40021000 	.word	0x40021000
 800cfc0:	08012e20 	.word	0x08012e20

0800cfc4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b086      	sub	sp, #24
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800cfcc:	2300      	movs	r3, #0
 800cfce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800cfd0:	4b2a      	ldr	r3, [pc, #168]	@ (800d07c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cfd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cfd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d003      	beq.n	800cfe4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800cfdc:	f7ff f9b6 	bl	800c34c <HAL_PWREx_GetVoltageRange>
 800cfe0:	6178      	str	r0, [r7, #20]
 800cfe2:	e014      	b.n	800d00e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800cfe4:	4b25      	ldr	r3, [pc, #148]	@ (800d07c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cfe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cfe8:	4a24      	ldr	r2, [pc, #144]	@ (800d07c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cfea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cfee:	6593      	str	r3, [r2, #88]	@ 0x58
 800cff0:	4b22      	ldr	r3, [pc, #136]	@ (800d07c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cff4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cff8:	60fb      	str	r3, [r7, #12]
 800cffa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800cffc:	f7ff f9a6 	bl	800c34c <HAL_PWREx_GetVoltageRange>
 800d000:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800d002:	4b1e      	ldr	r3, [pc, #120]	@ (800d07c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d006:	4a1d      	ldr	r2, [pc, #116]	@ (800d07c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800d008:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d00c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d014:	d10b      	bne.n	800d02e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2b80      	cmp	r3, #128	@ 0x80
 800d01a:	d919      	bls.n	800d050 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2ba0      	cmp	r3, #160	@ 0xa0
 800d020:	d902      	bls.n	800d028 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800d022:	2302      	movs	r3, #2
 800d024:	613b      	str	r3, [r7, #16]
 800d026:	e013      	b.n	800d050 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800d028:	2301      	movs	r3, #1
 800d02a:	613b      	str	r3, [r7, #16]
 800d02c:	e010      	b.n	800d050 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2b80      	cmp	r3, #128	@ 0x80
 800d032:	d902      	bls.n	800d03a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800d034:	2303      	movs	r3, #3
 800d036:	613b      	str	r3, [r7, #16]
 800d038:	e00a      	b.n	800d050 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2b80      	cmp	r3, #128	@ 0x80
 800d03e:	d102      	bne.n	800d046 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800d040:	2302      	movs	r3, #2
 800d042:	613b      	str	r3, [r7, #16]
 800d044:	e004      	b.n	800d050 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2b70      	cmp	r3, #112	@ 0x70
 800d04a:	d101      	bne.n	800d050 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800d04c:	2301      	movs	r3, #1
 800d04e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800d050:	4b0b      	ldr	r3, [pc, #44]	@ (800d080 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	f023 0207 	bic.w	r2, r3, #7
 800d058:	4909      	ldr	r1, [pc, #36]	@ (800d080 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	4313      	orrs	r3, r2
 800d05e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800d060:	4b07      	ldr	r3, [pc, #28]	@ (800d080 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	f003 0307 	and.w	r3, r3, #7
 800d068:	693a      	ldr	r2, [r7, #16]
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d001      	beq.n	800d072 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800d06e:	2301      	movs	r3, #1
 800d070:	e000      	b.n	800d074 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800d072:	2300      	movs	r3, #0
}
 800d074:	4618      	mov	r0, r3
 800d076:	3718      	adds	r7, #24
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}
 800d07c:	40021000 	.word	0x40021000
 800d080:	40022000 	.word	0x40022000

0800d084 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b086      	sub	sp, #24
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d08c:	2300      	movs	r3, #0
 800d08e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d090:	2300      	movs	r3, #0
 800d092:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d031      	beq.n	800d104 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0a4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d0a8:	d01a      	beq.n	800d0e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800d0aa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d0ae:	d814      	bhi.n	800d0da <HAL_RCCEx_PeriphCLKConfig+0x56>
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d009      	beq.n	800d0c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800d0b4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d0b8:	d10f      	bne.n	800d0da <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800d0ba:	4b5d      	ldr	r3, [pc, #372]	@ (800d230 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d0bc:	68db      	ldr	r3, [r3, #12]
 800d0be:	4a5c      	ldr	r2, [pc, #368]	@ (800d230 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d0c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d0c4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800d0c6:	e00c      	b.n	800d0e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	3304      	adds	r3, #4
 800d0cc:	2100      	movs	r1, #0
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f000 f9ce 	bl	800d470 <RCCEx_PLLSAI1_Config>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800d0d8:	e003      	b.n	800d0e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d0da:	2301      	movs	r3, #1
 800d0dc:	74fb      	strb	r3, [r7, #19]
      break;
 800d0de:	e000      	b.n	800d0e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800d0e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d0e2:	7cfb      	ldrb	r3, [r7, #19]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d10b      	bne.n	800d100 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d0e8:	4b51      	ldr	r3, [pc, #324]	@ (800d230 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d0ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d0ee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0f6:	494e      	ldr	r1, [pc, #312]	@ (800d230 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d0f8:	4313      	orrs	r3, r2
 800d0fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800d0fe:	e001      	b.n	800d104 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d100:	7cfb      	ldrb	r3, [r7, #19]
 800d102:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	f000 809e 	beq.w	800d24e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d112:	2300      	movs	r3, #0
 800d114:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800d116:	4b46      	ldr	r3, [pc, #280]	@ (800d230 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d11a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d101      	bne.n	800d126 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800d122:	2301      	movs	r3, #1
 800d124:	e000      	b.n	800d128 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800d126:	2300      	movs	r3, #0
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d00d      	beq.n	800d148 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d12c:	4b40      	ldr	r3, [pc, #256]	@ (800d230 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d12e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d130:	4a3f      	ldr	r2, [pc, #252]	@ (800d230 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d132:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d136:	6593      	str	r3, [r2, #88]	@ 0x58
 800d138:	4b3d      	ldr	r3, [pc, #244]	@ (800d230 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d13a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d13c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d140:	60bb      	str	r3, [r7, #8]
 800d142:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d144:	2301      	movs	r3, #1
 800d146:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d148:	4b3a      	ldr	r3, [pc, #232]	@ (800d234 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	4a39      	ldr	r2, [pc, #228]	@ (800d234 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800d14e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d152:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d154:	f7fc fbbc 	bl	80098d0 <HAL_GetTick>
 800d158:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800d15a:	e009      	b.n	800d170 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d15c:	f7fc fbb8 	bl	80098d0 <HAL_GetTick>
 800d160:	4602      	mov	r2, r0
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	1ad3      	subs	r3, r2, r3
 800d166:	2b02      	cmp	r3, #2
 800d168:	d902      	bls.n	800d170 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800d16a:	2303      	movs	r3, #3
 800d16c:	74fb      	strb	r3, [r7, #19]
        break;
 800d16e:	e005      	b.n	800d17c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800d170:	4b30      	ldr	r3, [pc, #192]	@ (800d234 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d0ef      	beq.n	800d15c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800d17c:	7cfb      	ldrb	r3, [r7, #19]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d15a      	bne.n	800d238 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d182:	4b2b      	ldr	r3, [pc, #172]	@ (800d230 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d188:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d18c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d01e      	beq.n	800d1d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d198:	697a      	ldr	r2, [r7, #20]
 800d19a:	429a      	cmp	r2, r3
 800d19c:	d019      	beq.n	800d1d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d19e:	4b24      	ldr	r3, [pc, #144]	@ (800d230 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d1a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d1a8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d1aa:	4b21      	ldr	r3, [pc, #132]	@ (800d230 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d1ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1b0:	4a1f      	ldr	r2, [pc, #124]	@ (800d230 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d1b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d1b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d1ba:	4b1d      	ldr	r3, [pc, #116]	@ (800d230 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d1bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1c0:	4a1b      	ldr	r2, [pc, #108]	@ (800d230 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d1c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d1c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d1ca:	4a19      	ldr	r2, [pc, #100]	@ (800d230 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	f003 0301 	and.w	r3, r3, #1
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d016      	beq.n	800d20a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d1dc:	f7fc fb78 	bl	80098d0 <HAL_GetTick>
 800d1e0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d1e2:	e00b      	b.n	800d1fc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d1e4:	f7fc fb74 	bl	80098d0 <HAL_GetTick>
 800d1e8:	4602      	mov	r2, r0
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	1ad3      	subs	r3, r2, r3
 800d1ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d1f2:	4293      	cmp	r3, r2
 800d1f4:	d902      	bls.n	800d1fc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800d1f6:	2303      	movs	r3, #3
 800d1f8:	74fb      	strb	r3, [r7, #19]
            break;
 800d1fa:	e006      	b.n	800d20a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d1fc:	4b0c      	ldr	r3, [pc, #48]	@ (800d230 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d1fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d202:	f003 0302 	and.w	r3, r3, #2
 800d206:	2b00      	cmp	r3, #0
 800d208:	d0ec      	beq.n	800d1e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800d20a:	7cfb      	ldrb	r3, [r7, #19]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d10b      	bne.n	800d228 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d210:	4b07      	ldr	r3, [pc, #28]	@ (800d230 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d216:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d21e:	4904      	ldr	r1, [pc, #16]	@ (800d230 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800d220:	4313      	orrs	r3, r2
 800d222:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800d226:	e009      	b.n	800d23c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d228:	7cfb      	ldrb	r3, [r7, #19]
 800d22a:	74bb      	strb	r3, [r7, #18]
 800d22c:	e006      	b.n	800d23c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800d22e:	bf00      	nop
 800d230:	40021000 	.word	0x40021000
 800d234:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d238:	7cfb      	ldrb	r3, [r7, #19]
 800d23a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d23c:	7c7b      	ldrb	r3, [r7, #17]
 800d23e:	2b01      	cmp	r3, #1
 800d240:	d105      	bne.n	800d24e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d242:	4b8a      	ldr	r3, [pc, #552]	@ (800d46c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d246:	4a89      	ldr	r2, [pc, #548]	@ (800d46c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d248:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d24c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f003 0301 	and.w	r3, r3, #1
 800d256:	2b00      	cmp	r3, #0
 800d258:	d00a      	beq.n	800d270 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d25a:	4b84      	ldr	r3, [pc, #528]	@ (800d46c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d25c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d260:	f023 0203 	bic.w	r2, r3, #3
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6a1b      	ldr	r3, [r3, #32]
 800d268:	4980      	ldr	r1, [pc, #512]	@ (800d46c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d26a:	4313      	orrs	r3, r2
 800d26c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	f003 0302 	and.w	r3, r3, #2
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d00a      	beq.n	800d292 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d27c:	4b7b      	ldr	r3, [pc, #492]	@ (800d46c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d27e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d282:	f023 020c 	bic.w	r2, r3, #12
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d28a:	4978      	ldr	r1, [pc, #480]	@ (800d46c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d28c:	4313      	orrs	r3, r2
 800d28e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	f003 0320 	and.w	r3, r3, #32
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d00a      	beq.n	800d2b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d29e:	4b73      	ldr	r3, [pc, #460]	@ (800d46c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d2a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d2a4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2ac:	496f      	ldr	r1, [pc, #444]	@ (800d46c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d2ae:	4313      	orrs	r3, r2
 800d2b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d00a      	beq.n	800d2d6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d2c0:	4b6a      	ldr	r3, [pc, #424]	@ (800d46c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d2c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d2c6:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2ce:	4967      	ldr	r1, [pc, #412]	@ (800d46c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d2d0:	4313      	orrs	r3, r2
 800d2d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d00a      	beq.n	800d2f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d2e2:	4b62      	ldr	r3, [pc, #392]	@ (800d46c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d2e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d2e8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2f0:	495e      	ldr	r1, [pc, #376]	@ (800d46c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d2f2:	4313      	orrs	r3, r2
 800d2f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d300:	2b00      	cmp	r3, #0
 800d302:	d00a      	beq.n	800d31a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d304:	4b59      	ldr	r3, [pc, #356]	@ (800d46c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d30a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d312:	4956      	ldr	r1, [pc, #344]	@ (800d46c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d314:	4313      	orrs	r3, r2
 800d316:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d322:	2b00      	cmp	r3, #0
 800d324:	d00a      	beq.n	800d33c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d326:	4b51      	ldr	r3, [pc, #324]	@ (800d46c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d32c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d334:	494d      	ldr	r1, [pc, #308]	@ (800d46c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d336:	4313      	orrs	r3, r2
 800d338:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d344:	2b00      	cmp	r3, #0
 800d346:	d028      	beq.n	800d39a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d348:	4b48      	ldr	r3, [pc, #288]	@ (800d46c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d34a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d34e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d356:	4945      	ldr	r1, [pc, #276]	@ (800d46c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d358:	4313      	orrs	r3, r2
 800d35a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d362:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d366:	d106      	bne.n	800d376 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d368:	4b40      	ldr	r3, [pc, #256]	@ (800d46c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d36a:	68db      	ldr	r3, [r3, #12]
 800d36c:	4a3f      	ldr	r2, [pc, #252]	@ (800d46c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d36e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d372:	60d3      	str	r3, [r2, #12]
 800d374:	e011      	b.n	800d39a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d37a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d37e:	d10c      	bne.n	800d39a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	3304      	adds	r3, #4
 800d384:	2101      	movs	r1, #1
 800d386:	4618      	mov	r0, r3
 800d388:	f000 f872 	bl	800d470 <RCCEx_PLLSAI1_Config>
 800d38c:	4603      	mov	r3, r0
 800d38e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800d390:	7cfb      	ldrb	r3, [r7, #19]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d001      	beq.n	800d39a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800d396:	7cfb      	ldrb	r3, [r7, #19]
 800d398:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d028      	beq.n	800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d3a6:	4b31      	ldr	r3, [pc, #196]	@ (800d46c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d3a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d3ac:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3b4:	492d      	ldr	r1, [pc, #180]	@ (800d46c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d3b6:	4313      	orrs	r3, r2
 800d3b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d3c4:	d106      	bne.n	800d3d4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d3c6:	4b29      	ldr	r3, [pc, #164]	@ (800d46c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d3c8:	68db      	ldr	r3, [r3, #12]
 800d3ca:	4a28      	ldr	r2, [pc, #160]	@ (800d46c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d3cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d3d0:	60d3      	str	r3, [r2, #12]
 800d3d2:	e011      	b.n	800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d3dc:	d10c      	bne.n	800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	3304      	adds	r3, #4
 800d3e2:	2101      	movs	r1, #1
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f000 f843 	bl	800d470 <RCCEx_PLLSAI1_Config>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d3ee:	7cfb      	ldrb	r3, [r7, #19]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d001      	beq.n	800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800d3f4:	7cfb      	ldrb	r3, [r7, #19]
 800d3f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d400:	2b00      	cmp	r3, #0
 800d402:	d01c      	beq.n	800d43e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d404:	4b19      	ldr	r3, [pc, #100]	@ (800d46c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d40a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d412:	4916      	ldr	r1, [pc, #88]	@ (800d46c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d414:	4313      	orrs	r3, r2
 800d416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d41e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d422:	d10c      	bne.n	800d43e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	3304      	adds	r3, #4
 800d428:	2102      	movs	r1, #2
 800d42a:	4618      	mov	r0, r3
 800d42c:	f000 f820 	bl	800d470 <RCCEx_PLLSAI1_Config>
 800d430:	4603      	mov	r3, r0
 800d432:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d434:	7cfb      	ldrb	r3, [r7, #19]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d001      	beq.n	800d43e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800d43a:	7cfb      	ldrb	r3, [r7, #19]
 800d43c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d446:	2b00      	cmp	r3, #0
 800d448:	d00a      	beq.n	800d460 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d44a:	4b08      	ldr	r3, [pc, #32]	@ (800d46c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d44c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d450:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d458:	4904      	ldr	r1, [pc, #16]	@ (800d46c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800d45a:	4313      	orrs	r3, r2
 800d45c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800d460:	7cbb      	ldrb	r3, [r7, #18]
}
 800d462:	4618      	mov	r0, r3
 800d464:	3718      	adds	r7, #24
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}
 800d46a:	bf00      	nop
 800d46c:	40021000 	.word	0x40021000

0800d470 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b084      	sub	sp, #16
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
 800d478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d47a:	2300      	movs	r3, #0
 800d47c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800d47e:	4b74      	ldr	r3, [pc, #464]	@ (800d650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d480:	68db      	ldr	r3, [r3, #12]
 800d482:	f003 0303 	and.w	r3, r3, #3
 800d486:	2b00      	cmp	r3, #0
 800d488:	d018      	beq.n	800d4bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800d48a:	4b71      	ldr	r3, [pc, #452]	@ (800d650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d48c:	68db      	ldr	r3, [r3, #12]
 800d48e:	f003 0203 	and.w	r2, r3, #3
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	429a      	cmp	r2, r3
 800d498:	d10d      	bne.n	800d4b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
       ||
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d009      	beq.n	800d4b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800d4a2:	4b6b      	ldr	r3, [pc, #428]	@ (800d650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d4a4:	68db      	ldr	r3, [r3, #12]
 800d4a6:	091b      	lsrs	r3, r3, #4
 800d4a8:	f003 0307 	and.w	r3, r3, #7
 800d4ac:	1c5a      	adds	r2, r3, #1
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	685b      	ldr	r3, [r3, #4]
       ||
 800d4b2:	429a      	cmp	r2, r3
 800d4b4:	d047      	beq.n	800d546 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	73fb      	strb	r3, [r7, #15]
 800d4ba:	e044      	b.n	800d546 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	2b03      	cmp	r3, #3
 800d4c2:	d018      	beq.n	800d4f6 <RCCEx_PLLSAI1_Config+0x86>
 800d4c4:	2b03      	cmp	r3, #3
 800d4c6:	d825      	bhi.n	800d514 <RCCEx_PLLSAI1_Config+0xa4>
 800d4c8:	2b01      	cmp	r3, #1
 800d4ca:	d002      	beq.n	800d4d2 <RCCEx_PLLSAI1_Config+0x62>
 800d4cc:	2b02      	cmp	r3, #2
 800d4ce:	d009      	beq.n	800d4e4 <RCCEx_PLLSAI1_Config+0x74>
 800d4d0:	e020      	b.n	800d514 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800d4d2:	4b5f      	ldr	r3, [pc, #380]	@ (800d650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f003 0302 	and.w	r3, r3, #2
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d11d      	bne.n	800d51a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800d4de:	2301      	movs	r3, #1
 800d4e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d4e2:	e01a      	b.n	800d51a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800d4e4:	4b5a      	ldr	r3, [pc, #360]	@ (800d650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d116      	bne.n	800d51e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d4f4:	e013      	b.n	800d51e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800d4f6:	4b56      	ldr	r3, [pc, #344]	@ (800d650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d10f      	bne.n	800d522 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800d502:	4b53      	ldr	r3, [pc, #332]	@ (800d650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d109      	bne.n	800d522 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800d50e:	2301      	movs	r3, #1
 800d510:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d512:	e006      	b.n	800d522 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800d514:	2301      	movs	r3, #1
 800d516:	73fb      	strb	r3, [r7, #15]
      break;
 800d518:	e004      	b.n	800d524 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d51a:	bf00      	nop
 800d51c:	e002      	b.n	800d524 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d51e:	bf00      	nop
 800d520:	e000      	b.n	800d524 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800d522:	bf00      	nop
    }

    if(status == HAL_OK)
 800d524:	7bfb      	ldrb	r3, [r7, #15]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d10d      	bne.n	800d546 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800d52a:	4b49      	ldr	r3, [pc, #292]	@ (800d650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d52c:	68db      	ldr	r3, [r3, #12]
 800d52e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6819      	ldr	r1, [r3, #0]
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	685b      	ldr	r3, [r3, #4]
 800d53a:	3b01      	subs	r3, #1
 800d53c:	011b      	lsls	r3, r3, #4
 800d53e:	430b      	orrs	r3, r1
 800d540:	4943      	ldr	r1, [pc, #268]	@ (800d650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d542:	4313      	orrs	r3, r2
 800d544:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800d546:	7bfb      	ldrb	r3, [r7, #15]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d17c      	bne.n	800d646 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800d54c:	4b40      	ldr	r3, [pc, #256]	@ (800d650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	4a3f      	ldr	r2, [pc, #252]	@ (800d650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d552:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d556:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d558:	f7fc f9ba 	bl	80098d0 <HAL_GetTick>
 800d55c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800d55e:	e009      	b.n	800d574 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d560:	f7fc f9b6 	bl	80098d0 <HAL_GetTick>
 800d564:	4602      	mov	r2, r0
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	1ad3      	subs	r3, r2, r3
 800d56a:	2b02      	cmp	r3, #2
 800d56c:	d902      	bls.n	800d574 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800d56e:	2303      	movs	r3, #3
 800d570:	73fb      	strb	r3, [r7, #15]
        break;
 800d572:	e005      	b.n	800d580 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800d574:	4b36      	ldr	r3, [pc, #216]	@ (800d650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d1ef      	bne.n	800d560 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800d580:	7bfb      	ldrb	r3, [r7, #15]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d15f      	bne.n	800d646 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d110      	bne.n	800d5ae <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d58c:	4b30      	ldr	r3, [pc, #192]	@ (800d650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d58e:	691b      	ldr	r3, [r3, #16]
 800d590:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800d594:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800d598:	687a      	ldr	r2, [r7, #4]
 800d59a:	6892      	ldr	r2, [r2, #8]
 800d59c:	0211      	lsls	r1, r2, #8
 800d59e:	687a      	ldr	r2, [r7, #4]
 800d5a0:	68d2      	ldr	r2, [r2, #12]
 800d5a2:	06d2      	lsls	r2, r2, #27
 800d5a4:	430a      	orrs	r2, r1
 800d5a6:	492a      	ldr	r1, [pc, #168]	@ (800d650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d5a8:	4313      	orrs	r3, r2
 800d5aa:	610b      	str	r3, [r1, #16]
 800d5ac:	e027      	b.n	800d5fe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	2b01      	cmp	r3, #1
 800d5b2:	d112      	bne.n	800d5da <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d5b4:	4b26      	ldr	r3, [pc, #152]	@ (800d650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d5b6:	691b      	ldr	r3, [r3, #16]
 800d5b8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800d5bc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800d5c0:	687a      	ldr	r2, [r7, #4]
 800d5c2:	6892      	ldr	r2, [r2, #8]
 800d5c4:	0211      	lsls	r1, r2, #8
 800d5c6:	687a      	ldr	r2, [r7, #4]
 800d5c8:	6912      	ldr	r2, [r2, #16]
 800d5ca:	0852      	lsrs	r2, r2, #1
 800d5cc:	3a01      	subs	r2, #1
 800d5ce:	0552      	lsls	r2, r2, #21
 800d5d0:	430a      	orrs	r2, r1
 800d5d2:	491f      	ldr	r1, [pc, #124]	@ (800d650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d5d4:	4313      	orrs	r3, r2
 800d5d6:	610b      	str	r3, [r1, #16]
 800d5d8:	e011      	b.n	800d5fe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d5da:	4b1d      	ldr	r3, [pc, #116]	@ (800d650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d5dc:	691b      	ldr	r3, [r3, #16]
 800d5de:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800d5e2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800d5e6:	687a      	ldr	r2, [r7, #4]
 800d5e8:	6892      	ldr	r2, [r2, #8]
 800d5ea:	0211      	lsls	r1, r2, #8
 800d5ec:	687a      	ldr	r2, [r7, #4]
 800d5ee:	6952      	ldr	r2, [r2, #20]
 800d5f0:	0852      	lsrs	r2, r2, #1
 800d5f2:	3a01      	subs	r2, #1
 800d5f4:	0652      	lsls	r2, r2, #25
 800d5f6:	430a      	orrs	r2, r1
 800d5f8:	4915      	ldr	r1, [pc, #84]	@ (800d650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d5fa:	4313      	orrs	r3, r2
 800d5fc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800d5fe:	4b14      	ldr	r3, [pc, #80]	@ (800d650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	4a13      	ldr	r2, [pc, #76]	@ (800d650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d604:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d608:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d60a:	f7fc f961 	bl	80098d0 <HAL_GetTick>
 800d60e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d610:	e009      	b.n	800d626 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d612:	f7fc f95d 	bl	80098d0 <HAL_GetTick>
 800d616:	4602      	mov	r2, r0
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	1ad3      	subs	r3, r2, r3
 800d61c:	2b02      	cmp	r3, #2
 800d61e:	d902      	bls.n	800d626 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800d620:	2303      	movs	r3, #3
 800d622:	73fb      	strb	r3, [r7, #15]
          break;
 800d624:	e005      	b.n	800d632 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d626:	4b0a      	ldr	r3, [pc, #40]	@ (800d650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d0ef      	beq.n	800d612 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800d632:	7bfb      	ldrb	r3, [r7, #15]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d106      	bne.n	800d646 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800d638:	4b05      	ldr	r3, [pc, #20]	@ (800d650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d63a:	691a      	ldr	r2, [r3, #16]
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	699b      	ldr	r3, [r3, #24]
 800d640:	4903      	ldr	r1, [pc, #12]	@ (800d650 <RCCEx_PLLSAI1_Config+0x1e0>)
 800d642:	4313      	orrs	r3, r2
 800d644:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800d646:	7bfb      	ldrb	r3, [r7, #15]
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3710      	adds	r7, #16
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}
 800d650:	40021000 	.word	0x40021000

0800d654 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b084      	sub	sp, #16
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d101      	bne.n	800d666 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d662:	2301      	movs	r3, #1
 800d664:	e095      	b.n	800d792 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d108      	bne.n	800d680 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	685b      	ldr	r3, [r3, #4]
 800d672:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d676:	d009      	beq.n	800d68c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2200      	movs	r2, #0
 800d67c:	61da      	str	r2, [r3, #28]
 800d67e:	e005      	b.n	800d68c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2200      	movs	r2, #0
 800d684:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2200      	movs	r2, #0
 800d68a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2200      	movs	r2, #0
 800d690:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d698:	b2db      	uxtb	r3, r3
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d106      	bne.n	800d6ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f7fb fdae 	bl	8009208 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2202      	movs	r2, #2
 800d6b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	681a      	ldr	r2, [r3, #0]
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d6c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	68db      	ldr	r3, [r3, #12]
 800d6c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d6cc:	d902      	bls.n	800d6d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	60fb      	str	r3, [r7, #12]
 800d6d2:	e002      	b.n	800d6da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d6d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d6d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	68db      	ldr	r3, [r3, #12]
 800d6de:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800d6e2:	d007      	beq.n	800d6f4 <HAL_SPI_Init+0xa0>
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	68db      	ldr	r3, [r3, #12]
 800d6e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d6ec:	d002      	beq.n	800d6f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	685b      	ldr	r3, [r3, #4]
 800d6f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	689b      	ldr	r3, [r3, #8]
 800d700:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800d704:	431a      	orrs	r2, r3
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	691b      	ldr	r3, [r3, #16]
 800d70a:	f003 0302 	and.w	r3, r3, #2
 800d70e:	431a      	orrs	r2, r3
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	695b      	ldr	r3, [r3, #20]
 800d714:	f003 0301 	and.w	r3, r3, #1
 800d718:	431a      	orrs	r2, r3
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	699b      	ldr	r3, [r3, #24]
 800d71e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d722:	431a      	orrs	r2, r3
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	69db      	ldr	r3, [r3, #28]
 800d728:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d72c:	431a      	orrs	r2, r3
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6a1b      	ldr	r3, [r3, #32]
 800d732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d736:	ea42 0103 	orr.w	r1, r2, r3
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d73e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	430a      	orrs	r2, r1
 800d748:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	699b      	ldr	r3, [r3, #24]
 800d74e:	0c1b      	lsrs	r3, r3, #16
 800d750:	f003 0204 	and.w	r2, r3, #4
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d758:	f003 0310 	and.w	r3, r3, #16
 800d75c:	431a      	orrs	r2, r3
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d762:	f003 0308 	and.w	r3, r3, #8
 800d766:	431a      	orrs	r2, r3
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	68db      	ldr	r3, [r3, #12]
 800d76c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800d770:	ea42 0103 	orr.w	r1, r2, r3
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	430a      	orrs	r2, r1
 800d780:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2200      	movs	r2, #0
 800d786:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2201      	movs	r2, #1
 800d78c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800d790:	2300      	movs	r3, #0
}
 800d792:	4618      	mov	r0, r3
 800d794:	3710      	adds	r7, #16
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}

0800d79a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800d79a:	b580      	push	{r7, lr}
 800d79c:	b08a      	sub	sp, #40	@ 0x28
 800d79e:	af00      	add	r7, sp, #0
 800d7a0:	60f8      	str	r0, [r7, #12]
 800d7a2:	60b9      	str	r1, [r7, #8]
 800d7a4:	607a      	str	r2, [r7, #4]
 800d7a6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d7ac:	f7fc f890 	bl	80098d0 <HAL_GetTick>
 800d7b0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d7b8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	685b      	ldr	r3, [r3, #4]
 800d7be:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800d7c0:	887b      	ldrh	r3, [r7, #2]
 800d7c2:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800d7c4:	887b      	ldrh	r3, [r7, #2]
 800d7c6:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d7c8:	7ffb      	ldrb	r3, [r7, #31]
 800d7ca:	2b01      	cmp	r3, #1
 800d7cc:	d00c      	beq.n	800d7e8 <HAL_SPI_TransmitReceive+0x4e>
 800d7ce:	69bb      	ldr	r3, [r7, #24]
 800d7d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d7d4:	d106      	bne.n	800d7e4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	689b      	ldr	r3, [r3, #8]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d102      	bne.n	800d7e4 <HAL_SPI_TransmitReceive+0x4a>
 800d7de:	7ffb      	ldrb	r3, [r7, #31]
 800d7e0:	2b04      	cmp	r3, #4
 800d7e2:	d001      	beq.n	800d7e8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800d7e4:	2302      	movs	r3, #2
 800d7e6:	e1f3      	b.n	800dbd0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d005      	beq.n	800d7fa <HAL_SPI_TransmitReceive+0x60>
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d002      	beq.n	800d7fa <HAL_SPI_TransmitReceive+0x60>
 800d7f4:	887b      	ldrh	r3, [r7, #2]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d101      	bne.n	800d7fe <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800d7fa:	2301      	movs	r3, #1
 800d7fc:	e1e8      	b.n	800dbd0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800d804:	2b01      	cmp	r3, #1
 800d806:	d101      	bne.n	800d80c <HAL_SPI_TransmitReceive+0x72>
 800d808:	2302      	movs	r3, #2
 800d80a:	e1e1      	b.n	800dbd0 <HAL_SPI_TransmitReceive+0x436>
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	2201      	movs	r2, #1
 800d810:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d81a:	b2db      	uxtb	r3, r3
 800d81c:	2b04      	cmp	r3, #4
 800d81e:	d003      	beq.n	800d828 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	2205      	movs	r2, #5
 800d824:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	2200      	movs	r2, #0
 800d82c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	687a      	ldr	r2, [r7, #4]
 800d832:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	887a      	ldrh	r2, [r7, #2]
 800d838:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	887a      	ldrh	r2, [r7, #2]
 800d840:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	68ba      	ldr	r2, [r7, #8]
 800d848:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	887a      	ldrh	r2, [r7, #2]
 800d84e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	887a      	ldrh	r2, [r7, #2]
 800d854:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	2200      	movs	r2, #0
 800d85a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	2200      	movs	r2, #0
 800d860:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	68db      	ldr	r3, [r3, #12]
 800d866:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d86a:	d802      	bhi.n	800d872 <HAL_SPI_TransmitReceive+0xd8>
 800d86c:	8abb      	ldrh	r3, [r7, #20]
 800d86e:	2b01      	cmp	r3, #1
 800d870:	d908      	bls.n	800d884 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	685a      	ldr	r2, [r3, #4]
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d880:	605a      	str	r2, [r3, #4]
 800d882:	e007      	b.n	800d894 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	685a      	ldr	r2, [r3, #4]
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d892:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d89e:	2b40      	cmp	r3, #64	@ 0x40
 800d8a0:	d007      	beq.n	800d8b2 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	681a      	ldr	r2, [r3, #0]
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d8b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	68db      	ldr	r3, [r3, #12]
 800d8b6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d8ba:	f240 8083 	bls.w	800d9c4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	685b      	ldr	r3, [r3, #4]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d002      	beq.n	800d8cc <HAL_SPI_TransmitReceive+0x132>
 800d8c6:	8afb      	ldrh	r3, [r7, #22]
 800d8c8:	2b01      	cmp	r3, #1
 800d8ca:	d16f      	bne.n	800d9ac <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8d0:	881a      	ldrh	r2, [r3, #0]
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8dc:	1c9a      	adds	r2, r3, #2
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d8e6:	b29b      	uxth	r3, r3
 800d8e8:	3b01      	subs	r3, #1
 800d8ea:	b29a      	uxth	r2, r3
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d8f0:	e05c      	b.n	800d9ac <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	689b      	ldr	r3, [r3, #8]
 800d8f8:	f003 0302 	and.w	r3, r3, #2
 800d8fc:	2b02      	cmp	r3, #2
 800d8fe:	d11b      	bne.n	800d938 <HAL_SPI_TransmitReceive+0x19e>
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d904:	b29b      	uxth	r3, r3
 800d906:	2b00      	cmp	r3, #0
 800d908:	d016      	beq.n	800d938 <HAL_SPI_TransmitReceive+0x19e>
 800d90a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d90c:	2b01      	cmp	r3, #1
 800d90e:	d113      	bne.n	800d938 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d914:	881a      	ldrh	r2, [r3, #0]
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d920:	1c9a      	adds	r2, r3, #2
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d92a:	b29b      	uxth	r3, r3
 800d92c:	3b01      	subs	r3, #1
 800d92e:	b29a      	uxth	r2, r3
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d934:	2300      	movs	r3, #0
 800d936:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	689b      	ldr	r3, [r3, #8]
 800d93e:	f003 0301 	and.w	r3, r3, #1
 800d942:	2b01      	cmp	r3, #1
 800d944:	d11c      	bne.n	800d980 <HAL_SPI_TransmitReceive+0x1e6>
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d94c:	b29b      	uxth	r3, r3
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d016      	beq.n	800d980 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	68da      	ldr	r2, [r3, #12]
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d95c:	b292      	uxth	r2, r2
 800d95e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d964:	1c9a      	adds	r2, r3, #2
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d970:	b29b      	uxth	r3, r3
 800d972:	3b01      	subs	r3, #1
 800d974:	b29a      	uxth	r2, r3
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d97c:	2301      	movs	r3, #1
 800d97e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d980:	f7fb ffa6 	bl	80098d0 <HAL_GetTick>
 800d984:	4602      	mov	r2, r0
 800d986:	6a3b      	ldr	r3, [r7, #32]
 800d988:	1ad3      	subs	r3, r2, r3
 800d98a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d98c:	429a      	cmp	r2, r3
 800d98e:	d80d      	bhi.n	800d9ac <HAL_SPI_TransmitReceive+0x212>
 800d990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d992:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d996:	d009      	beq.n	800d9ac <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	2201      	movs	r2, #1
 800d99c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800d9a8:	2303      	movs	r3, #3
 800d9aa:	e111      	b.n	800dbd0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d9b0:	b29b      	uxth	r3, r3
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d19d      	bne.n	800d8f2 <HAL_SPI_TransmitReceive+0x158>
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d9bc:	b29b      	uxth	r3, r3
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d197      	bne.n	800d8f2 <HAL_SPI_TransmitReceive+0x158>
 800d9c2:	e0e5      	b.n	800db90 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	685b      	ldr	r3, [r3, #4]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d003      	beq.n	800d9d4 <HAL_SPI_TransmitReceive+0x23a>
 800d9cc:	8afb      	ldrh	r3, [r7, #22]
 800d9ce:	2b01      	cmp	r3, #1
 800d9d0:	f040 80d1 	bne.w	800db76 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d9d8:	b29b      	uxth	r3, r3
 800d9da:	2b01      	cmp	r3, #1
 800d9dc:	d912      	bls.n	800da04 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9e2:	881a      	ldrh	r2, [r3, #0]
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9ee:	1c9a      	adds	r2, r3, #2
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d9f8:	b29b      	uxth	r3, r3
 800d9fa:	3b02      	subs	r3, #2
 800d9fc:	b29a      	uxth	r2, r3
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800da02:	e0b8      	b.n	800db76 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	330c      	adds	r3, #12
 800da0e:	7812      	ldrb	r2, [r2, #0]
 800da10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da16:	1c5a      	adds	r2, r3, #1
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800da20:	b29b      	uxth	r3, r3
 800da22:	3b01      	subs	r3, #1
 800da24:	b29a      	uxth	r2, r3
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800da2a:	e0a4      	b.n	800db76 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	689b      	ldr	r3, [r3, #8]
 800da32:	f003 0302 	and.w	r3, r3, #2
 800da36:	2b02      	cmp	r3, #2
 800da38:	d134      	bne.n	800daa4 <HAL_SPI_TransmitReceive+0x30a>
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800da3e:	b29b      	uxth	r3, r3
 800da40:	2b00      	cmp	r3, #0
 800da42:	d02f      	beq.n	800daa4 <HAL_SPI_TransmitReceive+0x30a>
 800da44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da46:	2b01      	cmp	r3, #1
 800da48:	d12c      	bne.n	800daa4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800da4e:	b29b      	uxth	r3, r3
 800da50:	2b01      	cmp	r3, #1
 800da52:	d912      	bls.n	800da7a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da58:	881a      	ldrh	r2, [r3, #0]
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da64:	1c9a      	adds	r2, r3, #2
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800da6e:	b29b      	uxth	r3, r3
 800da70:	3b02      	subs	r3, #2
 800da72:	b29a      	uxth	r2, r3
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800da78:	e012      	b.n	800daa0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	330c      	adds	r3, #12
 800da84:	7812      	ldrb	r2, [r2, #0]
 800da86:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da8c:	1c5a      	adds	r2, r3, #1
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800da96:	b29b      	uxth	r3, r3
 800da98:	3b01      	subs	r3, #1
 800da9a:	b29a      	uxth	r2, r3
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800daa0:	2300      	movs	r3, #0
 800daa2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	689b      	ldr	r3, [r3, #8]
 800daaa:	f003 0301 	and.w	r3, r3, #1
 800daae:	2b01      	cmp	r3, #1
 800dab0:	d148      	bne.n	800db44 <HAL_SPI_TransmitReceive+0x3aa>
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800dab8:	b29b      	uxth	r3, r3
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d042      	beq.n	800db44 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800dac4:	b29b      	uxth	r3, r3
 800dac6:	2b01      	cmp	r3, #1
 800dac8:	d923      	bls.n	800db12 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	68da      	ldr	r2, [r3, #12]
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dad4:	b292      	uxth	r2, r2
 800dad6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dadc:	1c9a      	adds	r2, r3, #2
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800dae8:	b29b      	uxth	r3, r3
 800daea:	3b02      	subs	r3, #2
 800daec:	b29a      	uxth	r2, r3
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800dafa:	b29b      	uxth	r3, r3
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	d81f      	bhi.n	800db40 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	685a      	ldr	r2, [r3, #4]
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800db0e:	605a      	str	r2, [r3, #4]
 800db10:	e016      	b.n	800db40 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	f103 020c 	add.w	r2, r3, #12
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db1e:	7812      	ldrb	r2, [r2, #0]
 800db20:	b2d2      	uxtb	r2, r2
 800db22:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db28:	1c5a      	adds	r2, r3, #1
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800db34:	b29b      	uxth	r3, r3
 800db36:	3b01      	subs	r3, #1
 800db38:	b29a      	uxth	r2, r3
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800db40:	2301      	movs	r3, #1
 800db42:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800db44:	f7fb fec4 	bl	80098d0 <HAL_GetTick>
 800db48:	4602      	mov	r2, r0
 800db4a:	6a3b      	ldr	r3, [r7, #32]
 800db4c:	1ad3      	subs	r3, r2, r3
 800db4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db50:	429a      	cmp	r2, r3
 800db52:	d803      	bhi.n	800db5c <HAL_SPI_TransmitReceive+0x3c2>
 800db54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800db5a:	d102      	bne.n	800db62 <HAL_SPI_TransmitReceive+0x3c8>
 800db5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d109      	bne.n	800db76 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	2201      	movs	r2, #1
 800db66:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	2200      	movs	r2, #0
 800db6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800db72:	2303      	movs	r3, #3
 800db74:	e02c      	b.n	800dbd0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800db7a:	b29b      	uxth	r3, r3
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	f47f af55 	bne.w	800da2c <HAL_SPI_TransmitReceive+0x292>
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800db88:	b29b      	uxth	r3, r3
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	f47f af4e 	bne.w	800da2c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800db90:	6a3a      	ldr	r2, [r7, #32]
 800db92:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800db94:	68f8      	ldr	r0, [r7, #12]
 800db96:	f000 f93d 	bl	800de14 <SPI_EndRxTxTransaction>
 800db9a:	4603      	mov	r3, r0
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d008      	beq.n	800dbb2 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	2220      	movs	r2, #32
 800dba4:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800dbae:	2301      	movs	r3, #1
 800dbb0:	e00e      	b.n	800dbd0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	2201      	movs	r2, #1
 800dbb6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d001      	beq.n	800dbce <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800dbca:	2301      	movs	r3, #1
 800dbcc:	e000      	b.n	800dbd0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800dbce:	2300      	movs	r3, #0
  }
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	3728      	adds	r7, #40	@ 0x28
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}

0800dbd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b088      	sub	sp, #32
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	60f8      	str	r0, [r7, #12]
 800dbe0:	60b9      	str	r1, [r7, #8]
 800dbe2:	603b      	str	r3, [r7, #0]
 800dbe4:	4613      	mov	r3, r2
 800dbe6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800dbe8:	f7fb fe72 	bl	80098d0 <HAL_GetTick>
 800dbec:	4602      	mov	r2, r0
 800dbee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbf0:	1a9b      	subs	r3, r3, r2
 800dbf2:	683a      	ldr	r2, [r7, #0]
 800dbf4:	4413      	add	r3, r2
 800dbf6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800dbf8:	f7fb fe6a 	bl	80098d0 <HAL_GetTick>
 800dbfc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800dbfe:	4b39      	ldr	r3, [pc, #228]	@ (800dce4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	015b      	lsls	r3, r3, #5
 800dc04:	0d1b      	lsrs	r3, r3, #20
 800dc06:	69fa      	ldr	r2, [r7, #28]
 800dc08:	fb02 f303 	mul.w	r3, r2, r3
 800dc0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dc0e:	e054      	b.n	800dcba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dc16:	d050      	beq.n	800dcba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800dc18:	f7fb fe5a 	bl	80098d0 <HAL_GetTick>
 800dc1c:	4602      	mov	r2, r0
 800dc1e:	69bb      	ldr	r3, [r7, #24]
 800dc20:	1ad3      	subs	r3, r2, r3
 800dc22:	69fa      	ldr	r2, [r7, #28]
 800dc24:	429a      	cmp	r2, r3
 800dc26:	d902      	bls.n	800dc2e <SPI_WaitFlagStateUntilTimeout+0x56>
 800dc28:	69fb      	ldr	r3, [r7, #28]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d13d      	bne.n	800dcaa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	685a      	ldr	r2, [r3, #4]
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800dc3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	685b      	ldr	r3, [r3, #4]
 800dc42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800dc46:	d111      	bne.n	800dc6c <SPI_WaitFlagStateUntilTimeout+0x94>
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	689b      	ldr	r3, [r3, #8]
 800dc4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dc50:	d004      	beq.n	800dc5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	689b      	ldr	r3, [r3, #8]
 800dc56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dc5a:	d107      	bne.n	800dc6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	681a      	ldr	r2, [r3, #0]
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dc6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dc74:	d10f      	bne.n	800dc96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	681a      	ldr	r2, [r3, #0]
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800dc84:	601a      	str	r2, [r3, #0]
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	681a      	ldr	r2, [r3, #0]
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800dc94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	2201      	movs	r2, #1
 800dc9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	2200      	movs	r2, #0
 800dca2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800dca6:	2303      	movs	r3, #3
 800dca8:	e017      	b.n	800dcda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d101      	bne.n	800dcb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800dcb4:	697b      	ldr	r3, [r7, #20]
 800dcb6:	3b01      	subs	r3, #1
 800dcb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	689a      	ldr	r2, [r3, #8]
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	4013      	ands	r3, r2
 800dcc4:	68ba      	ldr	r2, [r7, #8]
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	bf0c      	ite	eq
 800dcca:	2301      	moveq	r3, #1
 800dccc:	2300      	movne	r3, #0
 800dcce:	b2db      	uxtb	r3, r3
 800dcd0:	461a      	mov	r2, r3
 800dcd2:	79fb      	ldrb	r3, [r7, #7]
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d19b      	bne.n	800dc10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800dcd8:	2300      	movs	r3, #0
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3720      	adds	r7, #32
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
 800dce2:	bf00      	nop
 800dce4:	2000005c 	.word	0x2000005c

0800dce8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b08a      	sub	sp, #40	@ 0x28
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	60f8      	str	r0, [r7, #12]
 800dcf0:	60b9      	str	r1, [r7, #8]
 800dcf2:	607a      	str	r2, [r7, #4]
 800dcf4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800dcfa:	f7fb fde9 	bl	80098d0 <HAL_GetTick>
 800dcfe:	4602      	mov	r2, r0
 800dd00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd02:	1a9b      	subs	r3, r3, r2
 800dd04:	683a      	ldr	r2, [r7, #0]
 800dd06:	4413      	add	r3, r2
 800dd08:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800dd0a:	f7fb fde1 	bl	80098d0 <HAL_GetTick>
 800dd0e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	330c      	adds	r3, #12
 800dd16:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800dd18:	4b3d      	ldr	r3, [pc, #244]	@ (800de10 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800dd1a:	681a      	ldr	r2, [r3, #0]
 800dd1c:	4613      	mov	r3, r2
 800dd1e:	009b      	lsls	r3, r3, #2
 800dd20:	4413      	add	r3, r2
 800dd22:	00da      	lsls	r2, r3, #3
 800dd24:	1ad3      	subs	r3, r2, r3
 800dd26:	0d1b      	lsrs	r3, r3, #20
 800dd28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd2a:	fb02 f303 	mul.w	r3, r2, r3
 800dd2e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800dd30:	e060      	b.n	800ddf4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800dd38:	d107      	bne.n	800dd4a <SPI_WaitFifoStateUntilTimeout+0x62>
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d104      	bne.n	800dd4a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800dd40:	69fb      	ldr	r3, [r7, #28]
 800dd42:	781b      	ldrb	r3, [r3, #0]
 800dd44:	b2db      	uxtb	r3, r3
 800dd46:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800dd48:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dd50:	d050      	beq.n	800ddf4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800dd52:	f7fb fdbd 	bl	80098d0 <HAL_GetTick>
 800dd56:	4602      	mov	r2, r0
 800dd58:	6a3b      	ldr	r3, [r7, #32]
 800dd5a:	1ad3      	subs	r3, r2, r3
 800dd5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd5e:	429a      	cmp	r2, r3
 800dd60:	d902      	bls.n	800dd68 <SPI_WaitFifoStateUntilTimeout+0x80>
 800dd62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d13d      	bne.n	800dde4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	685a      	ldr	r2, [r3, #4]
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800dd76:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	685b      	ldr	r3, [r3, #4]
 800dd7c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800dd80:	d111      	bne.n	800dda6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	689b      	ldr	r3, [r3, #8]
 800dd86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dd8a:	d004      	beq.n	800dd96 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	689b      	ldr	r3, [r3, #8]
 800dd90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dd94:	d107      	bne.n	800dda6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	681a      	ldr	r2, [r3, #0]
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dda4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ddae:	d10f      	bne.n	800ddd0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	681a      	ldr	r2, [r3, #0]
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ddbe:	601a      	str	r2, [r3, #0]
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	681a      	ldr	r2, [r3, #0]
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ddce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	2201      	movs	r2, #1
 800ddd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	2200      	movs	r2, #0
 800dddc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800dde0:	2303      	movs	r3, #3
 800dde2:	e010      	b.n	800de06 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800dde4:	69bb      	ldr	r3, [r7, #24]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d101      	bne.n	800ddee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800ddea:	2300      	movs	r3, #0
 800ddec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800ddee:	69bb      	ldr	r3, [r7, #24]
 800ddf0:	3b01      	subs	r3, #1
 800ddf2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	689a      	ldr	r2, [r3, #8]
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	4013      	ands	r3, r2
 800ddfe:	687a      	ldr	r2, [r7, #4]
 800de00:	429a      	cmp	r2, r3
 800de02:	d196      	bne.n	800dd32 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800de04:	2300      	movs	r3, #0
}
 800de06:	4618      	mov	r0, r3
 800de08:	3728      	adds	r7, #40	@ 0x28
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}
 800de0e:	bf00      	nop
 800de10:	2000005c 	.word	0x2000005c

0800de14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b086      	sub	sp, #24
 800de18:	af02      	add	r7, sp, #8
 800de1a:	60f8      	str	r0, [r7, #12]
 800de1c:	60b9      	str	r1, [r7, #8]
 800de1e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	9300      	str	r3, [sp, #0]
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	2200      	movs	r2, #0
 800de28:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800de2c:	68f8      	ldr	r0, [r7, #12]
 800de2e:	f7ff ff5b 	bl	800dce8 <SPI_WaitFifoStateUntilTimeout>
 800de32:	4603      	mov	r3, r0
 800de34:	2b00      	cmp	r3, #0
 800de36:	d007      	beq.n	800de48 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de3c:	f043 0220 	orr.w	r2, r3, #32
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800de44:	2303      	movs	r3, #3
 800de46:	e027      	b.n	800de98 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	9300      	str	r3, [sp, #0]
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	2200      	movs	r2, #0
 800de50:	2180      	movs	r1, #128	@ 0x80
 800de52:	68f8      	ldr	r0, [r7, #12]
 800de54:	f7ff fec0 	bl	800dbd8 <SPI_WaitFlagStateUntilTimeout>
 800de58:	4603      	mov	r3, r0
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d007      	beq.n	800de6e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de62:	f043 0220 	orr.w	r2, r3, #32
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800de6a:	2303      	movs	r3, #3
 800de6c:	e014      	b.n	800de98 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	9300      	str	r3, [sp, #0]
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	2200      	movs	r2, #0
 800de76:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800de7a:	68f8      	ldr	r0, [r7, #12]
 800de7c:	f7ff ff34 	bl	800dce8 <SPI_WaitFifoStateUntilTimeout>
 800de80:	4603      	mov	r3, r0
 800de82:	2b00      	cmp	r3, #0
 800de84:	d007      	beq.n	800de96 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de8a:	f043 0220 	orr.w	r2, r3, #32
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800de92:	2303      	movs	r3, #3
 800de94:	e000      	b.n	800de98 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800de96:	2300      	movs	r3, #0
}
 800de98:	4618      	mov	r0, r3
 800de9a:	3710      	adds	r7, #16
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bd80      	pop	{r7, pc}

0800dea0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b082      	sub	sp, #8
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d101      	bne.n	800deb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800deae:	2301      	movs	r3, #1
 800deb0:	e049      	b.n	800df46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800deb8:	b2db      	uxtb	r3, r3
 800deba:	2b00      	cmp	r3, #0
 800debc:	d106      	bne.n	800decc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2200      	movs	r2, #0
 800dec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	f7fb fba6 	bl	8009618 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2202      	movs	r2, #2
 800ded0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681a      	ldr	r2, [r3, #0]
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	3304      	adds	r3, #4
 800dedc:	4619      	mov	r1, r3
 800dede:	4610      	mov	r0, r2
 800dee0:	f000 f9ba 	bl	800e258 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2201      	movs	r2, #1
 800dee8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2201      	movs	r2, #1
 800def0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2201      	movs	r2, #1
 800def8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2201      	movs	r2, #1
 800df00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2201      	movs	r2, #1
 800df08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2201      	movs	r2, #1
 800df10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2201      	movs	r2, #1
 800df18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2201      	movs	r2, #1
 800df20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2201      	movs	r2, #1
 800df28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2201      	movs	r2, #1
 800df30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2201      	movs	r2, #1
 800df38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2201      	movs	r2, #1
 800df40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800df44:	2300      	movs	r3, #0
}
 800df46:	4618      	mov	r0, r3
 800df48:	3708      	adds	r7, #8
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}
	...

0800df50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800df50:	b480      	push	{r7}
 800df52:	b085      	sub	sp, #20
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800df5e:	b2db      	uxtb	r3, r3
 800df60:	2b01      	cmp	r3, #1
 800df62:	d001      	beq.n	800df68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800df64:	2301      	movs	r3, #1
 800df66:	e03b      	b.n	800dfe0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	2202      	movs	r2, #2
 800df6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	68da      	ldr	r2, [r3, #12]
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	f042 0201 	orr.w	r2, r2, #1
 800df7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	4a19      	ldr	r2, [pc, #100]	@ (800dfec <HAL_TIM_Base_Start_IT+0x9c>)
 800df86:	4293      	cmp	r3, r2
 800df88:	d009      	beq.n	800df9e <HAL_TIM_Base_Start_IT+0x4e>
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df92:	d004      	beq.n	800df9e <HAL_TIM_Base_Start_IT+0x4e>
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	4a15      	ldr	r2, [pc, #84]	@ (800dff0 <HAL_TIM_Base_Start_IT+0xa0>)
 800df9a:	4293      	cmp	r3, r2
 800df9c:	d115      	bne.n	800dfca <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	689a      	ldr	r2, [r3, #8]
 800dfa4:	4b13      	ldr	r3, [pc, #76]	@ (800dff4 <HAL_TIM_Base_Start_IT+0xa4>)
 800dfa6:	4013      	ands	r3, r2
 800dfa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	2b06      	cmp	r3, #6
 800dfae:	d015      	beq.n	800dfdc <HAL_TIM_Base_Start_IT+0x8c>
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dfb6:	d011      	beq.n	800dfdc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	681a      	ldr	r2, [r3, #0]
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	f042 0201 	orr.w	r2, r2, #1
 800dfc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dfc8:	e008      	b.n	800dfdc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	681a      	ldr	r2, [r3, #0]
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	f042 0201 	orr.w	r2, r2, #1
 800dfd8:	601a      	str	r2, [r3, #0]
 800dfda:	e000      	b.n	800dfde <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dfdc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dfde:	2300      	movs	r3, #0
}
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	3714      	adds	r7, #20
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfea:	4770      	bx	lr
 800dfec:	40012c00 	.word	0x40012c00
 800dff0:	40014000 	.word	0x40014000
 800dff4:	00010007 	.word	0x00010007

0800dff8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b084      	sub	sp, #16
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	68db      	ldr	r3, [r3, #12]
 800e006:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	691b      	ldr	r3, [r3, #16]
 800e00e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e010:	68bb      	ldr	r3, [r7, #8]
 800e012:	f003 0302 	and.w	r3, r3, #2
 800e016:	2b00      	cmp	r3, #0
 800e018:	d020      	beq.n	800e05c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	f003 0302 	and.w	r3, r3, #2
 800e020:	2b00      	cmp	r3, #0
 800e022:	d01b      	beq.n	800e05c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	f06f 0202 	mvn.w	r2, #2
 800e02c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	2201      	movs	r2, #1
 800e032:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	699b      	ldr	r3, [r3, #24]
 800e03a:	f003 0303 	and.w	r3, r3, #3
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d003      	beq.n	800e04a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f000 f8e9 	bl	800e21a <HAL_TIM_IC_CaptureCallback>
 800e048:	e005      	b.n	800e056 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e04a:	6878      	ldr	r0, [r7, #4]
 800e04c:	f000 f8db 	bl	800e206 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e050:	6878      	ldr	r0, [r7, #4]
 800e052:	f000 f8ec 	bl	800e22e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	2200      	movs	r2, #0
 800e05a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	f003 0304 	and.w	r3, r3, #4
 800e062:	2b00      	cmp	r3, #0
 800e064:	d020      	beq.n	800e0a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	f003 0304 	and.w	r3, r3, #4
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d01b      	beq.n	800e0a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	f06f 0204 	mvn.w	r2, #4
 800e078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2202      	movs	r2, #2
 800e07e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	699b      	ldr	r3, [r3, #24]
 800e086:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d003      	beq.n	800e096 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e08e:	6878      	ldr	r0, [r7, #4]
 800e090:	f000 f8c3 	bl	800e21a <HAL_TIM_IC_CaptureCallback>
 800e094:	e005      	b.n	800e0a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	f000 f8b5 	bl	800e206 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e09c:	6878      	ldr	r0, [r7, #4]
 800e09e:	f000 f8c6 	bl	800e22e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e0a8:	68bb      	ldr	r3, [r7, #8]
 800e0aa:	f003 0308 	and.w	r3, r3, #8
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d020      	beq.n	800e0f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	f003 0308 	and.w	r3, r3, #8
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d01b      	beq.n	800e0f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	f06f 0208 	mvn.w	r2, #8
 800e0c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	2204      	movs	r2, #4
 800e0ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	69db      	ldr	r3, [r3, #28]
 800e0d2:	f003 0303 	and.w	r3, r3, #3
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d003      	beq.n	800e0e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f000 f89d 	bl	800e21a <HAL_TIM_IC_CaptureCallback>
 800e0e0:	e005      	b.n	800e0ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f000 f88f 	bl	800e206 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f000 f8a0 	bl	800e22e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	f003 0310 	and.w	r3, r3, #16
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d020      	beq.n	800e140 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	f003 0310 	and.w	r3, r3, #16
 800e104:	2b00      	cmp	r3, #0
 800e106:	d01b      	beq.n	800e140 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	f06f 0210 	mvn.w	r2, #16
 800e110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2208      	movs	r2, #8
 800e116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	69db      	ldr	r3, [r3, #28]
 800e11e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e122:	2b00      	cmp	r3, #0
 800e124:	d003      	beq.n	800e12e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e126:	6878      	ldr	r0, [r7, #4]
 800e128:	f000 f877 	bl	800e21a <HAL_TIM_IC_CaptureCallback>
 800e12c:	e005      	b.n	800e13a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f000 f869 	bl	800e206 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f000 f87a 	bl	800e22e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	2200      	movs	r2, #0
 800e13e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e140:	68bb      	ldr	r3, [r7, #8]
 800e142:	f003 0301 	and.w	r3, r3, #1
 800e146:	2b00      	cmp	r3, #0
 800e148:	d00c      	beq.n	800e164 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	f003 0301 	and.w	r3, r3, #1
 800e150:	2b00      	cmp	r3, #0
 800e152:	d007      	beq.n	800e164 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	f06f 0201 	mvn.w	r2, #1
 800e15c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f7fa f94a 	bl	80083f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d104      	bne.n	800e178 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e174:	2b00      	cmp	r3, #0
 800e176:	d00c      	beq.n	800e192 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d007      	beq.n	800e192 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e18a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f000 f943 	bl	800e418 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e192:	68bb      	ldr	r3, [r7, #8]
 800e194:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d00c      	beq.n	800e1b6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d007      	beq.n	800e1b6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e1ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e1b0:	6878      	ldr	r0, [r7, #4]
 800e1b2:	f000 f93b 	bl	800e42c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e1b6:	68bb      	ldr	r3, [r7, #8]
 800e1b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d00c      	beq.n	800e1da <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d007      	beq.n	800e1da <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e1d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	f000 f834 	bl	800e242 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e1da:	68bb      	ldr	r3, [r7, #8]
 800e1dc:	f003 0320 	and.w	r3, r3, #32
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d00c      	beq.n	800e1fe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	f003 0320 	and.w	r3, r3, #32
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d007      	beq.n	800e1fe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	f06f 0220 	mvn.w	r2, #32
 800e1f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e1f8:	6878      	ldr	r0, [r7, #4]
 800e1fa:	f000 f903 	bl	800e404 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e1fe:	bf00      	nop
 800e200:	3710      	adds	r7, #16
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}

0800e206 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e206:	b480      	push	{r7}
 800e208:	b083      	sub	sp, #12
 800e20a:	af00      	add	r7, sp, #0
 800e20c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e20e:	bf00      	nop
 800e210:	370c      	adds	r7, #12
 800e212:	46bd      	mov	sp, r7
 800e214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e218:	4770      	bx	lr

0800e21a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e21a:	b480      	push	{r7}
 800e21c:	b083      	sub	sp, #12
 800e21e:	af00      	add	r7, sp, #0
 800e220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e222:	bf00      	nop
 800e224:	370c      	adds	r7, #12
 800e226:	46bd      	mov	sp, r7
 800e228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22c:	4770      	bx	lr

0800e22e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e22e:	b480      	push	{r7}
 800e230:	b083      	sub	sp, #12
 800e232:	af00      	add	r7, sp, #0
 800e234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e236:	bf00      	nop
 800e238:	370c      	adds	r7, #12
 800e23a:	46bd      	mov	sp, r7
 800e23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e240:	4770      	bx	lr

0800e242 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e242:	b480      	push	{r7}
 800e244:	b083      	sub	sp, #12
 800e246:	af00      	add	r7, sp, #0
 800e248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e24a:	bf00      	nop
 800e24c:	370c      	adds	r7, #12
 800e24e:	46bd      	mov	sp, r7
 800e250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e254:	4770      	bx	lr
	...

0800e258 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e258:	b480      	push	{r7}
 800e25a:	b085      	sub	sp, #20
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
 800e260:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	4a30      	ldr	r2, [pc, #192]	@ (800e32c <TIM_Base_SetConfig+0xd4>)
 800e26c:	4293      	cmp	r3, r2
 800e26e:	d003      	beq.n	800e278 <TIM_Base_SetConfig+0x20>
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e276:	d108      	bne.n	800e28a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e27e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	685b      	ldr	r3, [r3, #4]
 800e284:	68fa      	ldr	r2, [r7, #12]
 800e286:	4313      	orrs	r3, r2
 800e288:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	4a27      	ldr	r2, [pc, #156]	@ (800e32c <TIM_Base_SetConfig+0xd4>)
 800e28e:	4293      	cmp	r3, r2
 800e290:	d00b      	beq.n	800e2aa <TIM_Base_SetConfig+0x52>
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e298:	d007      	beq.n	800e2aa <TIM_Base_SetConfig+0x52>
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	4a24      	ldr	r2, [pc, #144]	@ (800e330 <TIM_Base_SetConfig+0xd8>)
 800e29e:	4293      	cmp	r3, r2
 800e2a0:	d003      	beq.n	800e2aa <TIM_Base_SetConfig+0x52>
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	4a23      	ldr	r2, [pc, #140]	@ (800e334 <TIM_Base_SetConfig+0xdc>)
 800e2a6:	4293      	cmp	r3, r2
 800e2a8:	d108      	bne.n	800e2bc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e2b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	68db      	ldr	r3, [r3, #12]
 800e2b6:	68fa      	ldr	r2, [r7, #12]
 800e2b8:	4313      	orrs	r3, r2
 800e2ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	695b      	ldr	r3, [r3, #20]
 800e2c6:	4313      	orrs	r3, r2
 800e2c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	68fa      	ldr	r2, [r7, #12]
 800e2ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	689a      	ldr	r2, [r3, #8]
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	681a      	ldr	r2, [r3, #0]
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	4a12      	ldr	r2, [pc, #72]	@ (800e32c <TIM_Base_SetConfig+0xd4>)
 800e2e4:	4293      	cmp	r3, r2
 800e2e6:	d007      	beq.n	800e2f8 <TIM_Base_SetConfig+0xa0>
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	4a11      	ldr	r2, [pc, #68]	@ (800e330 <TIM_Base_SetConfig+0xd8>)
 800e2ec:	4293      	cmp	r3, r2
 800e2ee:	d003      	beq.n	800e2f8 <TIM_Base_SetConfig+0xa0>
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	4a10      	ldr	r2, [pc, #64]	@ (800e334 <TIM_Base_SetConfig+0xdc>)
 800e2f4:	4293      	cmp	r3, r2
 800e2f6:	d103      	bne.n	800e300 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	691a      	ldr	r2, [r3, #16]
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2201      	movs	r2, #1
 800e304:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	691b      	ldr	r3, [r3, #16]
 800e30a:	f003 0301 	and.w	r3, r3, #1
 800e30e:	2b01      	cmp	r3, #1
 800e310:	d105      	bne.n	800e31e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	691b      	ldr	r3, [r3, #16]
 800e316:	f023 0201 	bic.w	r2, r3, #1
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	611a      	str	r2, [r3, #16]
  }
}
 800e31e:	bf00      	nop
 800e320:	3714      	adds	r7, #20
 800e322:	46bd      	mov	sp, r7
 800e324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e328:	4770      	bx	lr
 800e32a:	bf00      	nop
 800e32c:	40012c00 	.word	0x40012c00
 800e330:	40014000 	.word	0x40014000
 800e334:	40014400 	.word	0x40014400

0800e338 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e338:	b480      	push	{r7}
 800e33a:	b085      	sub	sp, #20
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
 800e340:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e348:	2b01      	cmp	r3, #1
 800e34a:	d101      	bne.n	800e350 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e34c:	2302      	movs	r3, #2
 800e34e:	e04f      	b.n	800e3f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2201      	movs	r2, #1
 800e354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2202      	movs	r2, #2
 800e35c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	685b      	ldr	r3, [r3, #4]
 800e366:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	689b      	ldr	r3, [r3, #8]
 800e36e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	4a21      	ldr	r2, [pc, #132]	@ (800e3fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800e376:	4293      	cmp	r3, r2
 800e378:	d108      	bne.n	800e38c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e380:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	685b      	ldr	r3, [r3, #4]
 800e386:	68fa      	ldr	r2, [r7, #12]
 800e388:	4313      	orrs	r3, r2
 800e38a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e392:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	68fa      	ldr	r2, [r7, #12]
 800e39a:	4313      	orrs	r3, r2
 800e39c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	68fa      	ldr	r2, [r7, #12]
 800e3a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	4a14      	ldr	r2, [pc, #80]	@ (800e3fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800e3ac:	4293      	cmp	r3, r2
 800e3ae:	d009      	beq.n	800e3c4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e3b8:	d004      	beq.n	800e3c4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	4a10      	ldr	r2, [pc, #64]	@ (800e400 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800e3c0:	4293      	cmp	r3, r2
 800e3c2:	d10c      	bne.n	800e3de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e3c4:	68bb      	ldr	r3, [r7, #8]
 800e3c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e3ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	689b      	ldr	r3, [r3, #8]
 800e3d0:	68ba      	ldr	r2, [r7, #8]
 800e3d2:	4313      	orrs	r3, r2
 800e3d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	68ba      	ldr	r2, [r7, #8]
 800e3dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2201      	movs	r2, #1
 800e3e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e3ee:	2300      	movs	r3, #0
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	3714      	adds	r7, #20
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fa:	4770      	bx	lr
 800e3fc:	40012c00 	.word	0x40012c00
 800e400:	40014000 	.word	0x40014000

0800e404 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e404:	b480      	push	{r7}
 800e406:	b083      	sub	sp, #12
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e40c:	bf00      	nop
 800e40e:	370c      	adds	r7, #12
 800e410:	46bd      	mov	sp, r7
 800e412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e416:	4770      	bx	lr

0800e418 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e418:	b480      	push	{r7}
 800e41a:	b083      	sub	sp, #12
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e420:	bf00      	nop
 800e422:	370c      	adds	r7, #12
 800e424:	46bd      	mov	sp, r7
 800e426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42a:	4770      	bx	lr

0800e42c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e42c:	b480      	push	{r7}
 800e42e:	b083      	sub	sp, #12
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e434:	bf00      	nop
 800e436:	370c      	adds	r7, #12
 800e438:	46bd      	mov	sp, r7
 800e43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43e:	4770      	bx	lr

0800e440 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b082      	sub	sp, #8
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d101      	bne.n	800e452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e44e:	2301      	movs	r3, #1
 800e450:	e040      	b.n	800e4d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e456:	2b00      	cmp	r3, #0
 800e458:	d106      	bne.n	800e468 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2200      	movs	r2, #0
 800e45e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f7fb f94a 	bl	80096fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2224      	movs	r2, #36	@ 0x24
 800e46c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	681a      	ldr	r2, [r3, #0]
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	f022 0201 	bic.w	r2, r2, #1
 800e47c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e482:	2b00      	cmp	r3, #0
 800e484:	d002      	beq.n	800e48c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800e486:	6878      	ldr	r0, [r7, #4]
 800e488:	f000 fade 	bl	800ea48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f000 f8af 	bl	800e5f0 <UART_SetConfig>
 800e492:	4603      	mov	r3, r0
 800e494:	2b01      	cmp	r3, #1
 800e496:	d101      	bne.n	800e49c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800e498:	2301      	movs	r3, #1
 800e49a:	e01b      	b.n	800e4d4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	685a      	ldr	r2, [r3, #4]
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e4aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	689a      	ldr	r2, [r3, #8]
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e4ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	681a      	ldr	r2, [r3, #0]
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	f042 0201 	orr.w	r2, r2, #1
 800e4ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f000 fb5d 	bl	800eb8c <UART_CheckIdleState>
 800e4d2:	4603      	mov	r3, r0
}
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	3708      	adds	r7, #8
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	bd80      	pop	{r7, pc}

0800e4dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b08a      	sub	sp, #40	@ 0x28
 800e4e0:	af02      	add	r7, sp, #8
 800e4e2:	60f8      	str	r0, [r7, #12]
 800e4e4:	60b9      	str	r1, [r7, #8]
 800e4e6:	603b      	str	r3, [r7, #0]
 800e4e8:	4613      	mov	r3, r2
 800e4ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e4f0:	2b20      	cmp	r3, #32
 800e4f2:	d177      	bne.n	800e5e4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800e4f4:	68bb      	ldr	r3, [r7, #8]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d002      	beq.n	800e500 <HAL_UART_Transmit+0x24>
 800e4fa:	88fb      	ldrh	r3, [r7, #6]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d101      	bne.n	800e504 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800e500:	2301      	movs	r3, #1
 800e502:	e070      	b.n	800e5e6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	2200      	movs	r2, #0
 800e508:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	2221      	movs	r2, #33	@ 0x21
 800e510:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e512:	f7fb f9dd 	bl	80098d0 <HAL_GetTick>
 800e516:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	88fa      	ldrh	r2, [r7, #6]
 800e51c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	88fa      	ldrh	r2, [r7, #6]
 800e524:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	689b      	ldr	r3, [r3, #8]
 800e52c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e530:	d108      	bne.n	800e544 <HAL_UART_Transmit+0x68>
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	691b      	ldr	r3, [r3, #16]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d104      	bne.n	800e544 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800e53a:	2300      	movs	r3, #0
 800e53c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e53e:	68bb      	ldr	r3, [r7, #8]
 800e540:	61bb      	str	r3, [r7, #24]
 800e542:	e003      	b.n	800e54c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800e544:	68bb      	ldr	r3, [r7, #8]
 800e546:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e548:	2300      	movs	r3, #0
 800e54a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e54c:	e02f      	b.n	800e5ae <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	9300      	str	r3, [sp, #0]
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	2200      	movs	r2, #0
 800e556:	2180      	movs	r1, #128	@ 0x80
 800e558:	68f8      	ldr	r0, [r7, #12]
 800e55a:	f000 fbbf 	bl	800ecdc <UART_WaitOnFlagUntilTimeout>
 800e55e:	4603      	mov	r3, r0
 800e560:	2b00      	cmp	r3, #0
 800e562:	d004      	beq.n	800e56e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	2220      	movs	r2, #32
 800e568:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800e56a:	2303      	movs	r3, #3
 800e56c:	e03b      	b.n	800e5e6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800e56e:	69fb      	ldr	r3, [r7, #28]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d10b      	bne.n	800e58c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e574:	69bb      	ldr	r3, [r7, #24]
 800e576:	881a      	ldrh	r2, [r3, #0]
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e580:	b292      	uxth	r2, r2
 800e582:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e584:	69bb      	ldr	r3, [r7, #24]
 800e586:	3302      	adds	r3, #2
 800e588:	61bb      	str	r3, [r7, #24]
 800e58a:	e007      	b.n	800e59c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e58c:	69fb      	ldr	r3, [r7, #28]
 800e58e:	781a      	ldrb	r2, [r3, #0]
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e596:	69fb      	ldr	r3, [r7, #28]
 800e598:	3301      	adds	r3, #1
 800e59a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800e5a2:	b29b      	uxth	r3, r3
 800e5a4:	3b01      	subs	r3, #1
 800e5a6:	b29a      	uxth	r2, r3
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800e5b4:	b29b      	uxth	r3, r3
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d1c9      	bne.n	800e54e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	9300      	str	r3, [sp, #0]
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	2140      	movs	r1, #64	@ 0x40
 800e5c4:	68f8      	ldr	r0, [r7, #12]
 800e5c6:	f000 fb89 	bl	800ecdc <UART_WaitOnFlagUntilTimeout>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d004      	beq.n	800e5da <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	2220      	movs	r2, #32
 800e5d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800e5d6:	2303      	movs	r3, #3
 800e5d8:	e005      	b.n	800e5e6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	2220      	movs	r2, #32
 800e5de:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	e000      	b.n	800e5e6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800e5e4:	2302      	movs	r3, #2
  }
}
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	3720      	adds	r7, #32
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}
	...

0800e5f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e5f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e5f4:	b08a      	sub	sp, #40	@ 0x28
 800e5f6:	af00      	add	r7, sp, #0
 800e5f8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	689a      	ldr	r2, [r3, #8]
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	691b      	ldr	r3, [r3, #16]
 800e608:	431a      	orrs	r2, r3
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	695b      	ldr	r3, [r3, #20]
 800e60e:	431a      	orrs	r2, r3
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	69db      	ldr	r3, [r3, #28]
 800e614:	4313      	orrs	r3, r2
 800e616:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	681a      	ldr	r2, [r3, #0]
 800e61e:	4bb4      	ldr	r3, [pc, #720]	@ (800e8f0 <UART_SetConfig+0x300>)
 800e620:	4013      	ands	r3, r2
 800e622:	68fa      	ldr	r2, [r7, #12]
 800e624:	6812      	ldr	r2, [r2, #0]
 800e626:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e628:	430b      	orrs	r3, r1
 800e62a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	685b      	ldr	r3, [r3, #4]
 800e632:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	68da      	ldr	r2, [r3, #12]
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	430a      	orrs	r2, r1
 800e640:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	699b      	ldr	r3, [r3, #24]
 800e646:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	4aa9      	ldr	r2, [pc, #676]	@ (800e8f4 <UART_SetConfig+0x304>)
 800e64e:	4293      	cmp	r3, r2
 800e650:	d004      	beq.n	800e65c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	6a1b      	ldr	r3, [r3, #32]
 800e656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e658:	4313      	orrs	r3, r2
 800e65a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	689b      	ldr	r3, [r3, #8]
 800e662:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e66c:	430a      	orrs	r2, r1
 800e66e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	4aa0      	ldr	r2, [pc, #640]	@ (800e8f8 <UART_SetConfig+0x308>)
 800e676:	4293      	cmp	r3, r2
 800e678:	d126      	bne.n	800e6c8 <UART_SetConfig+0xd8>
 800e67a:	4ba0      	ldr	r3, [pc, #640]	@ (800e8fc <UART_SetConfig+0x30c>)
 800e67c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e680:	f003 0303 	and.w	r3, r3, #3
 800e684:	2b03      	cmp	r3, #3
 800e686:	d81b      	bhi.n	800e6c0 <UART_SetConfig+0xd0>
 800e688:	a201      	add	r2, pc, #4	@ (adr r2, 800e690 <UART_SetConfig+0xa0>)
 800e68a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e68e:	bf00      	nop
 800e690:	0800e6a1 	.word	0x0800e6a1
 800e694:	0800e6b1 	.word	0x0800e6b1
 800e698:	0800e6a9 	.word	0x0800e6a9
 800e69c:	0800e6b9 	.word	0x0800e6b9
 800e6a0:	2301      	movs	r3, #1
 800e6a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e6a6:	e080      	b.n	800e7aa <UART_SetConfig+0x1ba>
 800e6a8:	2302      	movs	r3, #2
 800e6aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e6ae:	e07c      	b.n	800e7aa <UART_SetConfig+0x1ba>
 800e6b0:	2304      	movs	r3, #4
 800e6b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e6b6:	e078      	b.n	800e7aa <UART_SetConfig+0x1ba>
 800e6b8:	2308      	movs	r3, #8
 800e6ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e6be:	e074      	b.n	800e7aa <UART_SetConfig+0x1ba>
 800e6c0:	2310      	movs	r3, #16
 800e6c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e6c6:	e070      	b.n	800e7aa <UART_SetConfig+0x1ba>
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	4a8c      	ldr	r2, [pc, #560]	@ (800e900 <UART_SetConfig+0x310>)
 800e6ce:	4293      	cmp	r3, r2
 800e6d0:	d138      	bne.n	800e744 <UART_SetConfig+0x154>
 800e6d2:	4b8a      	ldr	r3, [pc, #552]	@ (800e8fc <UART_SetConfig+0x30c>)
 800e6d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e6d8:	f003 030c 	and.w	r3, r3, #12
 800e6dc:	2b0c      	cmp	r3, #12
 800e6de:	d82d      	bhi.n	800e73c <UART_SetConfig+0x14c>
 800e6e0:	a201      	add	r2, pc, #4	@ (adr r2, 800e6e8 <UART_SetConfig+0xf8>)
 800e6e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6e6:	bf00      	nop
 800e6e8:	0800e71d 	.word	0x0800e71d
 800e6ec:	0800e73d 	.word	0x0800e73d
 800e6f0:	0800e73d 	.word	0x0800e73d
 800e6f4:	0800e73d 	.word	0x0800e73d
 800e6f8:	0800e72d 	.word	0x0800e72d
 800e6fc:	0800e73d 	.word	0x0800e73d
 800e700:	0800e73d 	.word	0x0800e73d
 800e704:	0800e73d 	.word	0x0800e73d
 800e708:	0800e725 	.word	0x0800e725
 800e70c:	0800e73d 	.word	0x0800e73d
 800e710:	0800e73d 	.word	0x0800e73d
 800e714:	0800e73d 	.word	0x0800e73d
 800e718:	0800e735 	.word	0x0800e735
 800e71c:	2300      	movs	r3, #0
 800e71e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e722:	e042      	b.n	800e7aa <UART_SetConfig+0x1ba>
 800e724:	2302      	movs	r3, #2
 800e726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e72a:	e03e      	b.n	800e7aa <UART_SetConfig+0x1ba>
 800e72c:	2304      	movs	r3, #4
 800e72e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e732:	e03a      	b.n	800e7aa <UART_SetConfig+0x1ba>
 800e734:	2308      	movs	r3, #8
 800e736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e73a:	e036      	b.n	800e7aa <UART_SetConfig+0x1ba>
 800e73c:	2310      	movs	r3, #16
 800e73e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e742:	e032      	b.n	800e7aa <UART_SetConfig+0x1ba>
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	4a6a      	ldr	r2, [pc, #424]	@ (800e8f4 <UART_SetConfig+0x304>)
 800e74a:	4293      	cmp	r3, r2
 800e74c:	d12a      	bne.n	800e7a4 <UART_SetConfig+0x1b4>
 800e74e:	4b6b      	ldr	r3, [pc, #428]	@ (800e8fc <UART_SetConfig+0x30c>)
 800e750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e754:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800e758:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e75c:	d01a      	beq.n	800e794 <UART_SetConfig+0x1a4>
 800e75e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e762:	d81b      	bhi.n	800e79c <UART_SetConfig+0x1ac>
 800e764:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e768:	d00c      	beq.n	800e784 <UART_SetConfig+0x194>
 800e76a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e76e:	d815      	bhi.n	800e79c <UART_SetConfig+0x1ac>
 800e770:	2b00      	cmp	r3, #0
 800e772:	d003      	beq.n	800e77c <UART_SetConfig+0x18c>
 800e774:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e778:	d008      	beq.n	800e78c <UART_SetConfig+0x19c>
 800e77a:	e00f      	b.n	800e79c <UART_SetConfig+0x1ac>
 800e77c:	2300      	movs	r3, #0
 800e77e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e782:	e012      	b.n	800e7aa <UART_SetConfig+0x1ba>
 800e784:	2302      	movs	r3, #2
 800e786:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e78a:	e00e      	b.n	800e7aa <UART_SetConfig+0x1ba>
 800e78c:	2304      	movs	r3, #4
 800e78e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e792:	e00a      	b.n	800e7aa <UART_SetConfig+0x1ba>
 800e794:	2308      	movs	r3, #8
 800e796:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e79a:	e006      	b.n	800e7aa <UART_SetConfig+0x1ba>
 800e79c:	2310      	movs	r3, #16
 800e79e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e7a2:	e002      	b.n	800e7aa <UART_SetConfig+0x1ba>
 800e7a4:	2310      	movs	r3, #16
 800e7a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	4a51      	ldr	r2, [pc, #324]	@ (800e8f4 <UART_SetConfig+0x304>)
 800e7b0:	4293      	cmp	r3, r2
 800e7b2:	d17a      	bne.n	800e8aa <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e7b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e7b8:	2b08      	cmp	r3, #8
 800e7ba:	d824      	bhi.n	800e806 <UART_SetConfig+0x216>
 800e7bc:	a201      	add	r2, pc, #4	@ (adr r2, 800e7c4 <UART_SetConfig+0x1d4>)
 800e7be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7c2:	bf00      	nop
 800e7c4:	0800e7e9 	.word	0x0800e7e9
 800e7c8:	0800e807 	.word	0x0800e807
 800e7cc:	0800e7f1 	.word	0x0800e7f1
 800e7d0:	0800e807 	.word	0x0800e807
 800e7d4:	0800e7f7 	.word	0x0800e7f7
 800e7d8:	0800e807 	.word	0x0800e807
 800e7dc:	0800e807 	.word	0x0800e807
 800e7e0:	0800e807 	.word	0x0800e807
 800e7e4:	0800e7ff 	.word	0x0800e7ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e7e8:	f7fe fbc0 	bl	800cf6c <HAL_RCC_GetPCLK1Freq>
 800e7ec:	61f8      	str	r0, [r7, #28]
        break;
 800e7ee:	e010      	b.n	800e812 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e7f0:	4b44      	ldr	r3, [pc, #272]	@ (800e904 <UART_SetConfig+0x314>)
 800e7f2:	61fb      	str	r3, [r7, #28]
        break;
 800e7f4:	e00d      	b.n	800e812 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e7f6:	f7fe fb21 	bl	800ce3c <HAL_RCC_GetSysClockFreq>
 800e7fa:	61f8      	str	r0, [r7, #28]
        break;
 800e7fc:	e009      	b.n	800e812 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e7fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e802:	61fb      	str	r3, [r7, #28]
        break;
 800e804:	e005      	b.n	800e812 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800e806:	2300      	movs	r3, #0
 800e808:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e80a:	2301      	movs	r3, #1
 800e80c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800e810:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e812:	69fb      	ldr	r3, [r7, #28]
 800e814:	2b00      	cmp	r3, #0
 800e816:	f000 8107 	beq.w	800ea28 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	685a      	ldr	r2, [r3, #4]
 800e81e:	4613      	mov	r3, r2
 800e820:	005b      	lsls	r3, r3, #1
 800e822:	4413      	add	r3, r2
 800e824:	69fa      	ldr	r2, [r7, #28]
 800e826:	429a      	cmp	r2, r3
 800e828:	d305      	bcc.n	800e836 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	685b      	ldr	r3, [r3, #4]
 800e82e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e830:	69fa      	ldr	r2, [r7, #28]
 800e832:	429a      	cmp	r2, r3
 800e834:	d903      	bls.n	800e83e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800e836:	2301      	movs	r3, #1
 800e838:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800e83c:	e0f4      	b.n	800ea28 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800e83e:	69fb      	ldr	r3, [r7, #28]
 800e840:	2200      	movs	r2, #0
 800e842:	461c      	mov	r4, r3
 800e844:	4615      	mov	r5, r2
 800e846:	f04f 0200 	mov.w	r2, #0
 800e84a:	f04f 0300 	mov.w	r3, #0
 800e84e:	022b      	lsls	r3, r5, #8
 800e850:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800e854:	0222      	lsls	r2, r4, #8
 800e856:	68f9      	ldr	r1, [r7, #12]
 800e858:	6849      	ldr	r1, [r1, #4]
 800e85a:	0849      	lsrs	r1, r1, #1
 800e85c:	2000      	movs	r0, #0
 800e85e:	4688      	mov	r8, r1
 800e860:	4681      	mov	r9, r0
 800e862:	eb12 0a08 	adds.w	sl, r2, r8
 800e866:	eb43 0b09 	adc.w	fp, r3, r9
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	685b      	ldr	r3, [r3, #4]
 800e86e:	2200      	movs	r2, #0
 800e870:	603b      	str	r3, [r7, #0]
 800e872:	607a      	str	r2, [r7, #4]
 800e874:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e878:	4650      	mov	r0, sl
 800e87a:	4659      	mov	r1, fp
 800e87c:	f7f2 fa16 	bl	8000cac <__aeabi_uldivmod>
 800e880:	4602      	mov	r2, r0
 800e882:	460b      	mov	r3, r1
 800e884:	4613      	mov	r3, r2
 800e886:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e888:	69bb      	ldr	r3, [r7, #24]
 800e88a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e88e:	d308      	bcc.n	800e8a2 <UART_SetConfig+0x2b2>
 800e890:	69bb      	ldr	r3, [r7, #24]
 800e892:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e896:	d204      	bcs.n	800e8a2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	69ba      	ldr	r2, [r7, #24]
 800e89e:	60da      	str	r2, [r3, #12]
 800e8a0:	e0c2      	b.n	800ea28 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800e8a8:	e0be      	b.n	800ea28 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	69db      	ldr	r3, [r3, #28]
 800e8ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e8b2:	d16a      	bne.n	800e98a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800e8b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e8b8:	2b08      	cmp	r3, #8
 800e8ba:	d834      	bhi.n	800e926 <UART_SetConfig+0x336>
 800e8bc:	a201      	add	r2, pc, #4	@ (adr r2, 800e8c4 <UART_SetConfig+0x2d4>)
 800e8be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8c2:	bf00      	nop
 800e8c4:	0800e8e9 	.word	0x0800e8e9
 800e8c8:	0800e909 	.word	0x0800e909
 800e8cc:	0800e911 	.word	0x0800e911
 800e8d0:	0800e927 	.word	0x0800e927
 800e8d4:	0800e917 	.word	0x0800e917
 800e8d8:	0800e927 	.word	0x0800e927
 800e8dc:	0800e927 	.word	0x0800e927
 800e8e0:	0800e927 	.word	0x0800e927
 800e8e4:	0800e91f 	.word	0x0800e91f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e8e8:	f7fe fb40 	bl	800cf6c <HAL_RCC_GetPCLK1Freq>
 800e8ec:	61f8      	str	r0, [r7, #28]
        break;
 800e8ee:	e020      	b.n	800e932 <UART_SetConfig+0x342>
 800e8f0:	efff69f3 	.word	0xefff69f3
 800e8f4:	40008000 	.word	0x40008000
 800e8f8:	40013800 	.word	0x40013800
 800e8fc:	40021000 	.word	0x40021000
 800e900:	40004400 	.word	0x40004400
 800e904:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e908:	f7fe fb46 	bl	800cf98 <HAL_RCC_GetPCLK2Freq>
 800e90c:	61f8      	str	r0, [r7, #28]
        break;
 800e90e:	e010      	b.n	800e932 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e910:	4b4c      	ldr	r3, [pc, #304]	@ (800ea44 <UART_SetConfig+0x454>)
 800e912:	61fb      	str	r3, [r7, #28]
        break;
 800e914:	e00d      	b.n	800e932 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e916:	f7fe fa91 	bl	800ce3c <HAL_RCC_GetSysClockFreq>
 800e91a:	61f8      	str	r0, [r7, #28]
        break;
 800e91c:	e009      	b.n	800e932 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e91e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e922:	61fb      	str	r3, [r7, #28]
        break;
 800e924:	e005      	b.n	800e932 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800e926:	2300      	movs	r3, #0
 800e928:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e92a:	2301      	movs	r3, #1
 800e92c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800e930:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e932:	69fb      	ldr	r3, [r7, #28]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d077      	beq.n	800ea28 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e938:	69fb      	ldr	r3, [r7, #28]
 800e93a:	005a      	lsls	r2, r3, #1
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	685b      	ldr	r3, [r3, #4]
 800e940:	085b      	lsrs	r3, r3, #1
 800e942:	441a      	add	r2, r3
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	685b      	ldr	r3, [r3, #4]
 800e948:	fbb2 f3f3 	udiv	r3, r2, r3
 800e94c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e94e:	69bb      	ldr	r3, [r7, #24]
 800e950:	2b0f      	cmp	r3, #15
 800e952:	d916      	bls.n	800e982 <UART_SetConfig+0x392>
 800e954:	69bb      	ldr	r3, [r7, #24]
 800e956:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e95a:	d212      	bcs.n	800e982 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e95c:	69bb      	ldr	r3, [r7, #24]
 800e95e:	b29b      	uxth	r3, r3
 800e960:	f023 030f 	bic.w	r3, r3, #15
 800e964:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e966:	69bb      	ldr	r3, [r7, #24]
 800e968:	085b      	lsrs	r3, r3, #1
 800e96a:	b29b      	uxth	r3, r3
 800e96c:	f003 0307 	and.w	r3, r3, #7
 800e970:	b29a      	uxth	r2, r3
 800e972:	8afb      	ldrh	r3, [r7, #22]
 800e974:	4313      	orrs	r3, r2
 800e976:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	8afa      	ldrh	r2, [r7, #22]
 800e97e:	60da      	str	r2, [r3, #12]
 800e980:	e052      	b.n	800ea28 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800e982:	2301      	movs	r3, #1
 800e984:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800e988:	e04e      	b.n	800ea28 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e98a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e98e:	2b08      	cmp	r3, #8
 800e990:	d827      	bhi.n	800e9e2 <UART_SetConfig+0x3f2>
 800e992:	a201      	add	r2, pc, #4	@ (adr r2, 800e998 <UART_SetConfig+0x3a8>)
 800e994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e998:	0800e9bd 	.word	0x0800e9bd
 800e99c:	0800e9c5 	.word	0x0800e9c5
 800e9a0:	0800e9cd 	.word	0x0800e9cd
 800e9a4:	0800e9e3 	.word	0x0800e9e3
 800e9a8:	0800e9d3 	.word	0x0800e9d3
 800e9ac:	0800e9e3 	.word	0x0800e9e3
 800e9b0:	0800e9e3 	.word	0x0800e9e3
 800e9b4:	0800e9e3 	.word	0x0800e9e3
 800e9b8:	0800e9db 	.word	0x0800e9db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e9bc:	f7fe fad6 	bl	800cf6c <HAL_RCC_GetPCLK1Freq>
 800e9c0:	61f8      	str	r0, [r7, #28]
        break;
 800e9c2:	e014      	b.n	800e9ee <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e9c4:	f7fe fae8 	bl	800cf98 <HAL_RCC_GetPCLK2Freq>
 800e9c8:	61f8      	str	r0, [r7, #28]
        break;
 800e9ca:	e010      	b.n	800e9ee <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e9cc:	4b1d      	ldr	r3, [pc, #116]	@ (800ea44 <UART_SetConfig+0x454>)
 800e9ce:	61fb      	str	r3, [r7, #28]
        break;
 800e9d0:	e00d      	b.n	800e9ee <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e9d2:	f7fe fa33 	bl	800ce3c <HAL_RCC_GetSysClockFreq>
 800e9d6:	61f8      	str	r0, [r7, #28]
        break;
 800e9d8:	e009      	b.n	800e9ee <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e9da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e9de:	61fb      	str	r3, [r7, #28]
        break;
 800e9e0:	e005      	b.n	800e9ee <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e9e6:	2301      	movs	r3, #1
 800e9e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800e9ec:	bf00      	nop
    }

    if (pclk != 0U)
 800e9ee:	69fb      	ldr	r3, [r7, #28]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d019      	beq.n	800ea28 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	685b      	ldr	r3, [r3, #4]
 800e9f8:	085a      	lsrs	r2, r3, #1
 800e9fa:	69fb      	ldr	r3, [r7, #28]
 800e9fc:	441a      	add	r2, r3
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	685b      	ldr	r3, [r3, #4]
 800ea02:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea06:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ea08:	69bb      	ldr	r3, [r7, #24]
 800ea0a:	2b0f      	cmp	r3, #15
 800ea0c:	d909      	bls.n	800ea22 <UART_SetConfig+0x432>
 800ea0e:	69bb      	ldr	r3, [r7, #24]
 800ea10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ea14:	d205      	bcs.n	800ea22 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ea16:	69bb      	ldr	r3, [r7, #24]
 800ea18:	b29a      	uxth	r2, r3
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	60da      	str	r2, [r3, #12]
 800ea20:	e002      	b.n	800ea28 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800ea22:	2301      	movs	r3, #1
 800ea24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	2200      	movs	r2, #0
 800ea32:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800ea34:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800ea38:	4618      	mov	r0, r3
 800ea3a:	3728      	adds	r7, #40	@ 0x28
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ea42:	bf00      	nop
 800ea44:	00f42400 	.word	0x00f42400

0800ea48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ea48:	b480      	push	{r7}
 800ea4a:	b083      	sub	sp, #12
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea54:	f003 0308 	and.w	r3, r3, #8
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d00a      	beq.n	800ea72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	685b      	ldr	r3, [r3, #4]
 800ea62:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	430a      	orrs	r2, r1
 800ea70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea76:	f003 0301 	and.w	r3, r3, #1
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d00a      	beq.n	800ea94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	685b      	ldr	r3, [r3, #4]
 800ea84:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	430a      	orrs	r2, r1
 800ea92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea98:	f003 0302 	and.w	r3, r3, #2
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d00a      	beq.n	800eab6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	685b      	ldr	r3, [r3, #4]
 800eaa6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	430a      	orrs	r2, r1
 800eab4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eaba:	f003 0304 	and.w	r3, r3, #4
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d00a      	beq.n	800ead8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	685b      	ldr	r3, [r3, #4]
 800eac8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	430a      	orrs	r2, r1
 800ead6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eadc:	f003 0310 	and.w	r3, r3, #16
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d00a      	beq.n	800eafa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	689b      	ldr	r3, [r3, #8]
 800eaea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	430a      	orrs	r2, r1
 800eaf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eafe:	f003 0320 	and.w	r3, r3, #32
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d00a      	beq.n	800eb1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	689b      	ldr	r3, [r3, #8]
 800eb0c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	430a      	orrs	r2, r1
 800eb1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d01a      	beq.n	800eb5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	685b      	ldr	r3, [r3, #4]
 800eb2e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	430a      	orrs	r2, r1
 800eb3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eb46:	d10a      	bne.n	800eb5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	685b      	ldr	r3, [r3, #4]
 800eb4e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	430a      	orrs	r2, r1
 800eb5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d00a      	beq.n	800eb80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	685b      	ldr	r3, [r3, #4]
 800eb70:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	430a      	orrs	r2, r1
 800eb7e:	605a      	str	r2, [r3, #4]
  }
}
 800eb80:	bf00      	nop
 800eb82:	370c      	adds	r7, #12
 800eb84:	46bd      	mov	sp, r7
 800eb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8a:	4770      	bx	lr

0800eb8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b098      	sub	sp, #96	@ 0x60
 800eb90:	af02      	add	r7, sp, #8
 800eb92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2200      	movs	r2, #0
 800eb98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800eb9c:	f7fa fe98 	bl	80098d0 <HAL_GetTick>
 800eba0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	f003 0308 	and.w	r3, r3, #8
 800ebac:	2b08      	cmp	r3, #8
 800ebae:	d12e      	bne.n	800ec0e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ebb0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ebb4:	9300      	str	r3, [sp, #0]
 800ebb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebb8:	2200      	movs	r2, #0
 800ebba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ebbe:	6878      	ldr	r0, [r7, #4]
 800ebc0:	f000 f88c 	bl	800ecdc <UART_WaitOnFlagUntilTimeout>
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d021      	beq.n	800ec0e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebd2:	e853 3f00 	ldrex	r3, [r3]
 800ebd6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ebd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ebda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ebde:	653b      	str	r3, [r7, #80]	@ 0x50
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	461a      	mov	r2, r3
 800ebe6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ebe8:	647b      	str	r3, [r7, #68]	@ 0x44
 800ebea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ebee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ebf0:	e841 2300 	strex	r3, r2, [r1]
 800ebf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ebf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d1e6      	bne.n	800ebca <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2220      	movs	r2, #32
 800ec00:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2200      	movs	r2, #0
 800ec06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ec0a:	2303      	movs	r3, #3
 800ec0c:	e062      	b.n	800ecd4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	f003 0304 	and.w	r3, r3, #4
 800ec18:	2b04      	cmp	r3, #4
 800ec1a:	d149      	bne.n	800ecb0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ec1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ec20:	9300      	str	r3, [sp, #0]
 800ec22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec24:	2200      	movs	r2, #0
 800ec26:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ec2a:	6878      	ldr	r0, [r7, #4]
 800ec2c:	f000 f856 	bl	800ecdc <UART_WaitOnFlagUntilTimeout>
 800ec30:	4603      	mov	r3, r0
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d03c      	beq.n	800ecb0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec3e:	e853 3f00 	ldrex	r3, [r3]
 800ec42:	623b      	str	r3, [r7, #32]
   return(result);
 800ec44:	6a3b      	ldr	r3, [r7, #32]
 800ec46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ec4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	461a      	mov	r2, r3
 800ec52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ec54:	633b      	str	r3, [r7, #48]	@ 0x30
 800ec56:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ec5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec5c:	e841 2300 	strex	r3, r2, [r1]
 800ec60:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ec62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d1e6      	bne.n	800ec36 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	3308      	adds	r3, #8
 800ec6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec70:	693b      	ldr	r3, [r7, #16]
 800ec72:	e853 3f00 	ldrex	r3, [r3]
 800ec76:	60fb      	str	r3, [r7, #12]
   return(result);
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	f023 0301 	bic.w	r3, r3, #1
 800ec7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	3308      	adds	r3, #8
 800ec86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ec88:	61fa      	str	r2, [r7, #28]
 800ec8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec8c:	69b9      	ldr	r1, [r7, #24]
 800ec8e:	69fa      	ldr	r2, [r7, #28]
 800ec90:	e841 2300 	strex	r3, r2, [r1]
 800ec94:	617b      	str	r3, [r7, #20]
   return(result);
 800ec96:	697b      	ldr	r3, [r7, #20]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d1e5      	bne.n	800ec68 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2220      	movs	r2, #32
 800eca0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2200      	movs	r2, #0
 800eca8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ecac:	2303      	movs	r3, #3
 800ecae:	e011      	b.n	800ecd4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2220      	movs	r2, #32
 800ecb4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2220      	movs	r2, #32
 800ecba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	2200      	movs	r2, #0
 800ecce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800ecd2:	2300      	movs	r3, #0
}
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	3758      	adds	r7, #88	@ 0x58
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bd80      	pop	{r7, pc}

0800ecdc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b084      	sub	sp, #16
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	60f8      	str	r0, [r7, #12]
 800ece4:	60b9      	str	r1, [r7, #8]
 800ece6:	603b      	str	r3, [r7, #0]
 800ece8:	4613      	mov	r3, r2
 800ecea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ecec:	e04f      	b.n	800ed8e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ecee:	69bb      	ldr	r3, [r7, #24]
 800ecf0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ecf4:	d04b      	beq.n	800ed8e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ecf6:	f7fa fdeb 	bl	80098d0 <HAL_GetTick>
 800ecfa:	4602      	mov	r2, r0
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	1ad3      	subs	r3, r2, r3
 800ed00:	69ba      	ldr	r2, [r7, #24]
 800ed02:	429a      	cmp	r2, r3
 800ed04:	d302      	bcc.n	800ed0c <UART_WaitOnFlagUntilTimeout+0x30>
 800ed06:	69bb      	ldr	r3, [r7, #24]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d101      	bne.n	800ed10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ed0c:	2303      	movs	r3, #3
 800ed0e:	e04e      	b.n	800edae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	f003 0304 	and.w	r3, r3, #4
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d037      	beq.n	800ed8e <UART_WaitOnFlagUntilTimeout+0xb2>
 800ed1e:	68bb      	ldr	r3, [r7, #8]
 800ed20:	2b80      	cmp	r3, #128	@ 0x80
 800ed22:	d034      	beq.n	800ed8e <UART_WaitOnFlagUntilTimeout+0xb2>
 800ed24:	68bb      	ldr	r3, [r7, #8]
 800ed26:	2b40      	cmp	r3, #64	@ 0x40
 800ed28:	d031      	beq.n	800ed8e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	69db      	ldr	r3, [r3, #28]
 800ed30:	f003 0308 	and.w	r3, r3, #8
 800ed34:	2b08      	cmp	r3, #8
 800ed36:	d110      	bne.n	800ed5a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	2208      	movs	r2, #8
 800ed3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ed40:	68f8      	ldr	r0, [r7, #12]
 800ed42:	f000 f838 	bl	800edb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	2208      	movs	r2, #8
 800ed4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	2200      	movs	r2, #0
 800ed52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800ed56:	2301      	movs	r3, #1
 800ed58:	e029      	b.n	800edae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	69db      	ldr	r3, [r3, #28]
 800ed60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ed64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ed68:	d111      	bne.n	800ed8e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ed72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ed74:	68f8      	ldr	r0, [r7, #12]
 800ed76:	f000 f81e 	bl	800edb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	2220      	movs	r2, #32
 800ed7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	2200      	movs	r2, #0
 800ed86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800ed8a:	2303      	movs	r3, #3
 800ed8c:	e00f      	b.n	800edae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	69da      	ldr	r2, [r3, #28]
 800ed94:	68bb      	ldr	r3, [r7, #8]
 800ed96:	4013      	ands	r3, r2
 800ed98:	68ba      	ldr	r2, [r7, #8]
 800ed9a:	429a      	cmp	r2, r3
 800ed9c:	bf0c      	ite	eq
 800ed9e:	2301      	moveq	r3, #1
 800eda0:	2300      	movne	r3, #0
 800eda2:	b2db      	uxtb	r3, r3
 800eda4:	461a      	mov	r2, r3
 800eda6:	79fb      	ldrb	r3, [r7, #7]
 800eda8:	429a      	cmp	r2, r3
 800edaa:	d0a0      	beq.n	800ecee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800edac:	2300      	movs	r3, #0
}
 800edae:	4618      	mov	r0, r3
 800edb0:	3710      	adds	r7, #16
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}

0800edb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800edb6:	b480      	push	{r7}
 800edb8:	b095      	sub	sp, #84	@ 0x54
 800edba:	af00      	add	r7, sp, #0
 800edbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800edc6:	e853 3f00 	ldrex	r3, [r3]
 800edca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800edcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800edd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	461a      	mov	r2, r3
 800edda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eddc:	643b      	str	r3, [r7, #64]	@ 0x40
 800edde:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ede0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ede2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ede4:	e841 2300 	strex	r3, r2, [r1]
 800ede8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800edea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edec:	2b00      	cmp	r3, #0
 800edee:	d1e6      	bne.n	800edbe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	3308      	adds	r3, #8
 800edf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edf8:	6a3b      	ldr	r3, [r7, #32]
 800edfa:	e853 3f00 	ldrex	r3, [r3]
 800edfe:	61fb      	str	r3, [r7, #28]
   return(result);
 800ee00:	69fb      	ldr	r3, [r7, #28]
 800ee02:	f023 0301 	bic.w	r3, r3, #1
 800ee06:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	3308      	adds	r3, #8
 800ee0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ee10:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ee12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ee16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee18:	e841 2300 	strex	r3, r2, [r1]
 800ee1c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ee1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d1e5      	bne.n	800edf0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ee28:	2b01      	cmp	r3, #1
 800ee2a:	d118      	bne.n	800ee5e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	e853 3f00 	ldrex	r3, [r3]
 800ee38:	60bb      	str	r3, [r7, #8]
   return(result);
 800ee3a:	68bb      	ldr	r3, [r7, #8]
 800ee3c:	f023 0310 	bic.w	r3, r3, #16
 800ee40:	647b      	str	r3, [r7, #68]	@ 0x44
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	461a      	mov	r2, r3
 800ee48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee4a:	61bb      	str	r3, [r7, #24]
 800ee4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee4e:	6979      	ldr	r1, [r7, #20]
 800ee50:	69ba      	ldr	r2, [r7, #24]
 800ee52:	e841 2300 	strex	r3, r2, [r1]
 800ee56:	613b      	str	r3, [r7, #16]
   return(result);
 800ee58:	693b      	ldr	r3, [r7, #16]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d1e6      	bne.n	800ee2c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	2220      	movs	r2, #32
 800ee62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	2200      	movs	r2, #0
 800ee6a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	2200      	movs	r2, #0
 800ee70:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800ee72:	bf00      	nop
 800ee74:	3754      	adds	r7, #84	@ 0x54
 800ee76:	46bd      	mov	sp, r7
 800ee78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7c:	4770      	bx	lr
	...

0800ee80 <__assert_func>:
 800ee80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ee82:	4614      	mov	r4, r2
 800ee84:	461a      	mov	r2, r3
 800ee86:	4b09      	ldr	r3, [pc, #36]	@ (800eeac <__assert_func+0x2c>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	4605      	mov	r5, r0
 800ee8c:	68d8      	ldr	r0, [r3, #12]
 800ee8e:	b954      	cbnz	r4, 800eea6 <__assert_func+0x26>
 800ee90:	4b07      	ldr	r3, [pc, #28]	@ (800eeb0 <__assert_func+0x30>)
 800ee92:	461c      	mov	r4, r3
 800ee94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ee98:	9100      	str	r1, [sp, #0]
 800ee9a:	462b      	mov	r3, r5
 800ee9c:	4905      	ldr	r1, [pc, #20]	@ (800eeb4 <__assert_func+0x34>)
 800ee9e:	f000 f8b1 	bl	800f004 <fiprintf>
 800eea2:	f000 f94f 	bl	800f144 <abort>
 800eea6:	4b04      	ldr	r3, [pc, #16]	@ (800eeb8 <__assert_func+0x38>)
 800eea8:	e7f4      	b.n	800ee94 <__assert_func+0x14>
 800eeaa:	bf00      	nop
 800eeac:	20000074 	.word	0x20000074
 800eeb0:	08012e93 	.word	0x08012e93
 800eeb4:	08012e65 	.word	0x08012e65
 800eeb8:	08012e58 	.word	0x08012e58

0800eebc <std>:
 800eebc:	2300      	movs	r3, #0
 800eebe:	b510      	push	{r4, lr}
 800eec0:	4604      	mov	r4, r0
 800eec2:	e9c0 3300 	strd	r3, r3, [r0]
 800eec6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eeca:	6083      	str	r3, [r0, #8]
 800eecc:	8181      	strh	r1, [r0, #12]
 800eece:	6643      	str	r3, [r0, #100]	@ 0x64
 800eed0:	81c2      	strh	r2, [r0, #14]
 800eed2:	6183      	str	r3, [r0, #24]
 800eed4:	4619      	mov	r1, r3
 800eed6:	2208      	movs	r2, #8
 800eed8:	305c      	adds	r0, #92	@ 0x5c
 800eeda:	f000 f8c3 	bl	800f064 <memset>
 800eede:	4b0d      	ldr	r3, [pc, #52]	@ (800ef14 <std+0x58>)
 800eee0:	6263      	str	r3, [r4, #36]	@ 0x24
 800eee2:	4b0d      	ldr	r3, [pc, #52]	@ (800ef18 <std+0x5c>)
 800eee4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800eee6:	4b0d      	ldr	r3, [pc, #52]	@ (800ef1c <std+0x60>)
 800eee8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800eeea:	4b0d      	ldr	r3, [pc, #52]	@ (800ef20 <std+0x64>)
 800eeec:	6323      	str	r3, [r4, #48]	@ 0x30
 800eeee:	4b0d      	ldr	r3, [pc, #52]	@ (800ef24 <std+0x68>)
 800eef0:	6224      	str	r4, [r4, #32]
 800eef2:	429c      	cmp	r4, r3
 800eef4:	d006      	beq.n	800ef04 <std+0x48>
 800eef6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800eefa:	4294      	cmp	r4, r2
 800eefc:	d002      	beq.n	800ef04 <std+0x48>
 800eefe:	33d0      	adds	r3, #208	@ 0xd0
 800ef00:	429c      	cmp	r4, r3
 800ef02:	d105      	bne.n	800ef10 <std+0x54>
 800ef04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ef08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef0c:	f000 b8dc 	b.w	800f0c8 <__retarget_lock_init_recursive>
 800ef10:	bd10      	pop	{r4, pc}
 800ef12:	bf00      	nop
 800ef14:	0800f9a5 	.word	0x0800f9a5
 800ef18:	0800f9c7 	.word	0x0800f9c7
 800ef1c:	0800f9ff 	.word	0x0800f9ff
 800ef20:	0800fa23 	.word	0x0800fa23
 800ef24:	200006fc 	.word	0x200006fc

0800ef28 <stdio_exit_handler>:
 800ef28:	4a02      	ldr	r2, [pc, #8]	@ (800ef34 <stdio_exit_handler+0xc>)
 800ef2a:	4903      	ldr	r1, [pc, #12]	@ (800ef38 <stdio_exit_handler+0x10>)
 800ef2c:	4803      	ldr	r0, [pc, #12]	@ (800ef3c <stdio_exit_handler+0x14>)
 800ef2e:	f000 b87b 	b.w	800f028 <_fwalk_sglue>
 800ef32:	bf00      	nop
 800ef34:	20000068 	.word	0x20000068
 800ef38:	0800f93d 	.word	0x0800f93d
 800ef3c:	20000078 	.word	0x20000078

0800ef40 <cleanup_stdio>:
 800ef40:	6841      	ldr	r1, [r0, #4]
 800ef42:	4b0c      	ldr	r3, [pc, #48]	@ (800ef74 <cleanup_stdio+0x34>)
 800ef44:	4299      	cmp	r1, r3
 800ef46:	b510      	push	{r4, lr}
 800ef48:	4604      	mov	r4, r0
 800ef4a:	d001      	beq.n	800ef50 <cleanup_stdio+0x10>
 800ef4c:	f000 fcf6 	bl	800f93c <_fflush_r>
 800ef50:	68a1      	ldr	r1, [r4, #8]
 800ef52:	4b09      	ldr	r3, [pc, #36]	@ (800ef78 <cleanup_stdio+0x38>)
 800ef54:	4299      	cmp	r1, r3
 800ef56:	d002      	beq.n	800ef5e <cleanup_stdio+0x1e>
 800ef58:	4620      	mov	r0, r4
 800ef5a:	f000 fcef 	bl	800f93c <_fflush_r>
 800ef5e:	68e1      	ldr	r1, [r4, #12]
 800ef60:	4b06      	ldr	r3, [pc, #24]	@ (800ef7c <cleanup_stdio+0x3c>)
 800ef62:	4299      	cmp	r1, r3
 800ef64:	d004      	beq.n	800ef70 <cleanup_stdio+0x30>
 800ef66:	4620      	mov	r0, r4
 800ef68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef6c:	f000 bce6 	b.w	800f93c <_fflush_r>
 800ef70:	bd10      	pop	{r4, pc}
 800ef72:	bf00      	nop
 800ef74:	200006fc 	.word	0x200006fc
 800ef78:	20000764 	.word	0x20000764
 800ef7c:	200007cc 	.word	0x200007cc

0800ef80 <global_stdio_init.part.0>:
 800ef80:	b510      	push	{r4, lr}
 800ef82:	4b0b      	ldr	r3, [pc, #44]	@ (800efb0 <global_stdio_init.part.0+0x30>)
 800ef84:	4c0b      	ldr	r4, [pc, #44]	@ (800efb4 <global_stdio_init.part.0+0x34>)
 800ef86:	4a0c      	ldr	r2, [pc, #48]	@ (800efb8 <global_stdio_init.part.0+0x38>)
 800ef88:	601a      	str	r2, [r3, #0]
 800ef8a:	4620      	mov	r0, r4
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	2104      	movs	r1, #4
 800ef90:	f7ff ff94 	bl	800eebc <std>
 800ef94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ef98:	2201      	movs	r2, #1
 800ef9a:	2109      	movs	r1, #9
 800ef9c:	f7ff ff8e 	bl	800eebc <std>
 800efa0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800efa4:	2202      	movs	r2, #2
 800efa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efaa:	2112      	movs	r1, #18
 800efac:	f7ff bf86 	b.w	800eebc <std>
 800efb0:	20000834 	.word	0x20000834
 800efb4:	200006fc 	.word	0x200006fc
 800efb8:	0800ef29 	.word	0x0800ef29

0800efbc <__sfp_lock_acquire>:
 800efbc:	4801      	ldr	r0, [pc, #4]	@ (800efc4 <__sfp_lock_acquire+0x8>)
 800efbe:	f000 b884 	b.w	800f0ca <__retarget_lock_acquire_recursive>
 800efc2:	bf00      	nop
 800efc4:	20000839 	.word	0x20000839

0800efc8 <__sfp_lock_release>:
 800efc8:	4801      	ldr	r0, [pc, #4]	@ (800efd0 <__sfp_lock_release+0x8>)
 800efca:	f000 b87f 	b.w	800f0cc <__retarget_lock_release_recursive>
 800efce:	bf00      	nop
 800efd0:	20000839 	.word	0x20000839

0800efd4 <__sinit>:
 800efd4:	b510      	push	{r4, lr}
 800efd6:	4604      	mov	r4, r0
 800efd8:	f7ff fff0 	bl	800efbc <__sfp_lock_acquire>
 800efdc:	6a23      	ldr	r3, [r4, #32]
 800efde:	b11b      	cbz	r3, 800efe8 <__sinit+0x14>
 800efe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efe4:	f7ff bff0 	b.w	800efc8 <__sfp_lock_release>
 800efe8:	4b04      	ldr	r3, [pc, #16]	@ (800effc <__sinit+0x28>)
 800efea:	6223      	str	r3, [r4, #32]
 800efec:	4b04      	ldr	r3, [pc, #16]	@ (800f000 <__sinit+0x2c>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d1f5      	bne.n	800efe0 <__sinit+0xc>
 800eff4:	f7ff ffc4 	bl	800ef80 <global_stdio_init.part.0>
 800eff8:	e7f2      	b.n	800efe0 <__sinit+0xc>
 800effa:	bf00      	nop
 800effc:	0800ef41 	.word	0x0800ef41
 800f000:	20000834 	.word	0x20000834

0800f004 <fiprintf>:
 800f004:	b40e      	push	{r1, r2, r3}
 800f006:	b503      	push	{r0, r1, lr}
 800f008:	4601      	mov	r1, r0
 800f00a:	ab03      	add	r3, sp, #12
 800f00c:	4805      	ldr	r0, [pc, #20]	@ (800f024 <fiprintf+0x20>)
 800f00e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f012:	6800      	ldr	r0, [r0, #0]
 800f014:	9301      	str	r3, [sp, #4]
 800f016:	f000 f8c5 	bl	800f1a4 <_vfiprintf_r>
 800f01a:	b002      	add	sp, #8
 800f01c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f020:	b003      	add	sp, #12
 800f022:	4770      	bx	lr
 800f024:	20000074 	.word	0x20000074

0800f028 <_fwalk_sglue>:
 800f028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f02c:	4607      	mov	r7, r0
 800f02e:	4688      	mov	r8, r1
 800f030:	4614      	mov	r4, r2
 800f032:	2600      	movs	r6, #0
 800f034:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f038:	f1b9 0901 	subs.w	r9, r9, #1
 800f03c:	d505      	bpl.n	800f04a <_fwalk_sglue+0x22>
 800f03e:	6824      	ldr	r4, [r4, #0]
 800f040:	2c00      	cmp	r4, #0
 800f042:	d1f7      	bne.n	800f034 <_fwalk_sglue+0xc>
 800f044:	4630      	mov	r0, r6
 800f046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f04a:	89ab      	ldrh	r3, [r5, #12]
 800f04c:	2b01      	cmp	r3, #1
 800f04e:	d907      	bls.n	800f060 <_fwalk_sglue+0x38>
 800f050:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f054:	3301      	adds	r3, #1
 800f056:	d003      	beq.n	800f060 <_fwalk_sglue+0x38>
 800f058:	4629      	mov	r1, r5
 800f05a:	4638      	mov	r0, r7
 800f05c:	47c0      	blx	r8
 800f05e:	4306      	orrs	r6, r0
 800f060:	3568      	adds	r5, #104	@ 0x68
 800f062:	e7e9      	b.n	800f038 <_fwalk_sglue+0x10>

0800f064 <memset>:
 800f064:	4402      	add	r2, r0
 800f066:	4603      	mov	r3, r0
 800f068:	4293      	cmp	r3, r2
 800f06a:	d100      	bne.n	800f06e <memset+0xa>
 800f06c:	4770      	bx	lr
 800f06e:	f803 1b01 	strb.w	r1, [r3], #1
 800f072:	e7f9      	b.n	800f068 <memset+0x4>

0800f074 <__errno>:
 800f074:	4b01      	ldr	r3, [pc, #4]	@ (800f07c <__errno+0x8>)
 800f076:	6818      	ldr	r0, [r3, #0]
 800f078:	4770      	bx	lr
 800f07a:	bf00      	nop
 800f07c:	20000074 	.word	0x20000074

0800f080 <__libc_init_array>:
 800f080:	b570      	push	{r4, r5, r6, lr}
 800f082:	4d0d      	ldr	r5, [pc, #52]	@ (800f0b8 <__libc_init_array+0x38>)
 800f084:	4c0d      	ldr	r4, [pc, #52]	@ (800f0bc <__libc_init_array+0x3c>)
 800f086:	1b64      	subs	r4, r4, r5
 800f088:	10a4      	asrs	r4, r4, #2
 800f08a:	2600      	movs	r6, #0
 800f08c:	42a6      	cmp	r6, r4
 800f08e:	d109      	bne.n	800f0a4 <__libc_init_array+0x24>
 800f090:	4d0b      	ldr	r5, [pc, #44]	@ (800f0c0 <__libc_init_array+0x40>)
 800f092:	4c0c      	ldr	r4, [pc, #48]	@ (800f0c4 <__libc_init_array+0x44>)
 800f094:	f002 fa0e 	bl	80114b4 <_init>
 800f098:	1b64      	subs	r4, r4, r5
 800f09a:	10a4      	asrs	r4, r4, #2
 800f09c:	2600      	movs	r6, #0
 800f09e:	42a6      	cmp	r6, r4
 800f0a0:	d105      	bne.n	800f0ae <__libc_init_array+0x2e>
 800f0a2:	bd70      	pop	{r4, r5, r6, pc}
 800f0a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0a8:	4798      	blx	r3
 800f0aa:	3601      	adds	r6, #1
 800f0ac:	e7ee      	b.n	800f08c <__libc_init_array+0xc>
 800f0ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0b2:	4798      	blx	r3
 800f0b4:	3601      	adds	r6, #1
 800f0b6:	e7f2      	b.n	800f09e <__libc_init_array+0x1e>
 800f0b8:	080130b8 	.word	0x080130b8
 800f0bc:	080130b8 	.word	0x080130b8
 800f0c0:	080130b8 	.word	0x080130b8
 800f0c4:	080130bc 	.word	0x080130bc

0800f0c8 <__retarget_lock_init_recursive>:
 800f0c8:	4770      	bx	lr

0800f0ca <__retarget_lock_acquire_recursive>:
 800f0ca:	4770      	bx	lr

0800f0cc <__retarget_lock_release_recursive>:
 800f0cc:	4770      	bx	lr
	...

0800f0d0 <gcvt>:
 800f0d0:	b530      	push	{r4, r5, lr}
 800f0d2:	ed2d 8b02 	vpush	{d8}
 800f0d6:	eeb0 8a40 	vmov.f32	s16, s0
 800f0da:	eef0 8a60 	vmov.f32	s17, s1
 800f0de:	460c      	mov	r4, r1
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	b083      	sub	sp, #12
 800f0e4:	4605      	mov	r5, r0
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	ec51 0b10 	vmov	r0, r1, d0
 800f0ec:	f7f1 fcee 	bl	8000acc <__aeabi_dcmplt>
 800f0f0:	4622      	mov	r2, r4
 800f0f2:	b118      	cbz	r0, 800f0fc <gcvt+0x2c>
 800f0f4:	232d      	movs	r3, #45	@ 0x2d
 800f0f6:	f802 3b01 	strb.w	r3, [r2], #1
 800f0fa:	3d01      	subs	r5, #1
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	4809      	ldr	r0, [pc, #36]	@ (800f124 <gcvt+0x54>)
 800f100:	9300      	str	r3, [sp, #0]
 800f102:	4629      	mov	r1, r5
 800f104:	2367      	movs	r3, #103	@ 0x67
 800f106:	eeb0 0a48 	vmov.f32	s0, s16
 800f10a:	eef0 0a68 	vmov.f32	s1, s17
 800f10e:	6800      	ldr	r0, [r0, #0]
 800f110:	f000 feb2 	bl	800fe78 <_gcvt>
 800f114:	2800      	cmp	r0, #0
 800f116:	bf18      	it	ne
 800f118:	4620      	movne	r0, r4
 800f11a:	b003      	add	sp, #12
 800f11c:	ecbd 8b02 	vpop	{d8}
 800f120:	bd30      	pop	{r4, r5, pc}
 800f122:	bf00      	nop
 800f124:	20000074 	.word	0x20000074

0800f128 <memcpy>:
 800f128:	440a      	add	r2, r1
 800f12a:	4291      	cmp	r1, r2
 800f12c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800f130:	d100      	bne.n	800f134 <memcpy+0xc>
 800f132:	4770      	bx	lr
 800f134:	b510      	push	{r4, lr}
 800f136:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f13a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f13e:	4291      	cmp	r1, r2
 800f140:	d1f9      	bne.n	800f136 <memcpy+0xe>
 800f142:	bd10      	pop	{r4, pc}

0800f144 <abort>:
 800f144:	b508      	push	{r3, lr}
 800f146:	2006      	movs	r0, #6
 800f148:	f000 fdd2 	bl	800fcf0 <raise>
 800f14c:	2001      	movs	r0, #1
 800f14e:	f7fa f933 	bl	80093b8 <_exit>

0800f152 <__sfputc_r>:
 800f152:	6893      	ldr	r3, [r2, #8]
 800f154:	3b01      	subs	r3, #1
 800f156:	2b00      	cmp	r3, #0
 800f158:	b410      	push	{r4}
 800f15a:	6093      	str	r3, [r2, #8]
 800f15c:	da08      	bge.n	800f170 <__sfputc_r+0x1e>
 800f15e:	6994      	ldr	r4, [r2, #24]
 800f160:	42a3      	cmp	r3, r4
 800f162:	db01      	blt.n	800f168 <__sfputc_r+0x16>
 800f164:	290a      	cmp	r1, #10
 800f166:	d103      	bne.n	800f170 <__sfputc_r+0x1e>
 800f168:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f16c:	f000 bc5d 	b.w	800fa2a <__swbuf_r>
 800f170:	6813      	ldr	r3, [r2, #0]
 800f172:	1c58      	adds	r0, r3, #1
 800f174:	6010      	str	r0, [r2, #0]
 800f176:	7019      	strb	r1, [r3, #0]
 800f178:	4608      	mov	r0, r1
 800f17a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f17e:	4770      	bx	lr

0800f180 <__sfputs_r>:
 800f180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f182:	4606      	mov	r6, r0
 800f184:	460f      	mov	r7, r1
 800f186:	4614      	mov	r4, r2
 800f188:	18d5      	adds	r5, r2, r3
 800f18a:	42ac      	cmp	r4, r5
 800f18c:	d101      	bne.n	800f192 <__sfputs_r+0x12>
 800f18e:	2000      	movs	r0, #0
 800f190:	e007      	b.n	800f1a2 <__sfputs_r+0x22>
 800f192:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f196:	463a      	mov	r2, r7
 800f198:	4630      	mov	r0, r6
 800f19a:	f7ff ffda 	bl	800f152 <__sfputc_r>
 800f19e:	1c43      	adds	r3, r0, #1
 800f1a0:	d1f3      	bne.n	800f18a <__sfputs_r+0xa>
 800f1a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f1a4 <_vfiprintf_r>:
 800f1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1a8:	460d      	mov	r5, r1
 800f1aa:	b09d      	sub	sp, #116	@ 0x74
 800f1ac:	4614      	mov	r4, r2
 800f1ae:	4698      	mov	r8, r3
 800f1b0:	4606      	mov	r6, r0
 800f1b2:	b118      	cbz	r0, 800f1bc <_vfiprintf_r+0x18>
 800f1b4:	6a03      	ldr	r3, [r0, #32]
 800f1b6:	b90b      	cbnz	r3, 800f1bc <_vfiprintf_r+0x18>
 800f1b8:	f7ff ff0c 	bl	800efd4 <__sinit>
 800f1bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f1be:	07d9      	lsls	r1, r3, #31
 800f1c0:	d405      	bmi.n	800f1ce <_vfiprintf_r+0x2a>
 800f1c2:	89ab      	ldrh	r3, [r5, #12]
 800f1c4:	059a      	lsls	r2, r3, #22
 800f1c6:	d402      	bmi.n	800f1ce <_vfiprintf_r+0x2a>
 800f1c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f1ca:	f7ff ff7e 	bl	800f0ca <__retarget_lock_acquire_recursive>
 800f1ce:	89ab      	ldrh	r3, [r5, #12]
 800f1d0:	071b      	lsls	r3, r3, #28
 800f1d2:	d501      	bpl.n	800f1d8 <_vfiprintf_r+0x34>
 800f1d4:	692b      	ldr	r3, [r5, #16]
 800f1d6:	b99b      	cbnz	r3, 800f200 <_vfiprintf_r+0x5c>
 800f1d8:	4629      	mov	r1, r5
 800f1da:	4630      	mov	r0, r6
 800f1dc:	f000 fc64 	bl	800faa8 <__swsetup_r>
 800f1e0:	b170      	cbz	r0, 800f200 <_vfiprintf_r+0x5c>
 800f1e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f1e4:	07dc      	lsls	r4, r3, #31
 800f1e6:	d504      	bpl.n	800f1f2 <_vfiprintf_r+0x4e>
 800f1e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f1ec:	b01d      	add	sp, #116	@ 0x74
 800f1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1f2:	89ab      	ldrh	r3, [r5, #12]
 800f1f4:	0598      	lsls	r0, r3, #22
 800f1f6:	d4f7      	bmi.n	800f1e8 <_vfiprintf_r+0x44>
 800f1f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f1fa:	f7ff ff67 	bl	800f0cc <__retarget_lock_release_recursive>
 800f1fe:	e7f3      	b.n	800f1e8 <_vfiprintf_r+0x44>
 800f200:	2300      	movs	r3, #0
 800f202:	9309      	str	r3, [sp, #36]	@ 0x24
 800f204:	2320      	movs	r3, #32
 800f206:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f20a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f20e:	2330      	movs	r3, #48	@ 0x30
 800f210:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f3c0 <_vfiprintf_r+0x21c>
 800f214:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f218:	f04f 0901 	mov.w	r9, #1
 800f21c:	4623      	mov	r3, r4
 800f21e:	469a      	mov	sl, r3
 800f220:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f224:	b10a      	cbz	r2, 800f22a <_vfiprintf_r+0x86>
 800f226:	2a25      	cmp	r2, #37	@ 0x25
 800f228:	d1f9      	bne.n	800f21e <_vfiprintf_r+0x7a>
 800f22a:	ebba 0b04 	subs.w	fp, sl, r4
 800f22e:	d00b      	beq.n	800f248 <_vfiprintf_r+0xa4>
 800f230:	465b      	mov	r3, fp
 800f232:	4622      	mov	r2, r4
 800f234:	4629      	mov	r1, r5
 800f236:	4630      	mov	r0, r6
 800f238:	f7ff ffa2 	bl	800f180 <__sfputs_r>
 800f23c:	3001      	adds	r0, #1
 800f23e:	f000 80a7 	beq.w	800f390 <_vfiprintf_r+0x1ec>
 800f242:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f244:	445a      	add	r2, fp
 800f246:	9209      	str	r2, [sp, #36]	@ 0x24
 800f248:	f89a 3000 	ldrb.w	r3, [sl]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	f000 809f 	beq.w	800f390 <_vfiprintf_r+0x1ec>
 800f252:	2300      	movs	r3, #0
 800f254:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f258:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f25c:	f10a 0a01 	add.w	sl, sl, #1
 800f260:	9304      	str	r3, [sp, #16]
 800f262:	9307      	str	r3, [sp, #28]
 800f264:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f268:	931a      	str	r3, [sp, #104]	@ 0x68
 800f26a:	4654      	mov	r4, sl
 800f26c:	2205      	movs	r2, #5
 800f26e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f272:	4853      	ldr	r0, [pc, #332]	@ (800f3c0 <_vfiprintf_r+0x21c>)
 800f274:	f7f0 ffac 	bl	80001d0 <memchr>
 800f278:	9a04      	ldr	r2, [sp, #16]
 800f27a:	b9d8      	cbnz	r0, 800f2b4 <_vfiprintf_r+0x110>
 800f27c:	06d1      	lsls	r1, r2, #27
 800f27e:	bf44      	itt	mi
 800f280:	2320      	movmi	r3, #32
 800f282:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f286:	0713      	lsls	r3, r2, #28
 800f288:	bf44      	itt	mi
 800f28a:	232b      	movmi	r3, #43	@ 0x2b
 800f28c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f290:	f89a 3000 	ldrb.w	r3, [sl]
 800f294:	2b2a      	cmp	r3, #42	@ 0x2a
 800f296:	d015      	beq.n	800f2c4 <_vfiprintf_r+0x120>
 800f298:	9a07      	ldr	r2, [sp, #28]
 800f29a:	4654      	mov	r4, sl
 800f29c:	2000      	movs	r0, #0
 800f29e:	f04f 0c0a 	mov.w	ip, #10
 800f2a2:	4621      	mov	r1, r4
 800f2a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2a8:	3b30      	subs	r3, #48	@ 0x30
 800f2aa:	2b09      	cmp	r3, #9
 800f2ac:	d94b      	bls.n	800f346 <_vfiprintf_r+0x1a2>
 800f2ae:	b1b0      	cbz	r0, 800f2de <_vfiprintf_r+0x13a>
 800f2b0:	9207      	str	r2, [sp, #28]
 800f2b2:	e014      	b.n	800f2de <_vfiprintf_r+0x13a>
 800f2b4:	eba0 0308 	sub.w	r3, r0, r8
 800f2b8:	fa09 f303 	lsl.w	r3, r9, r3
 800f2bc:	4313      	orrs	r3, r2
 800f2be:	9304      	str	r3, [sp, #16]
 800f2c0:	46a2      	mov	sl, r4
 800f2c2:	e7d2      	b.n	800f26a <_vfiprintf_r+0xc6>
 800f2c4:	9b03      	ldr	r3, [sp, #12]
 800f2c6:	1d19      	adds	r1, r3, #4
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	9103      	str	r1, [sp, #12]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	bfbb      	ittet	lt
 800f2d0:	425b      	neglt	r3, r3
 800f2d2:	f042 0202 	orrlt.w	r2, r2, #2
 800f2d6:	9307      	strge	r3, [sp, #28]
 800f2d8:	9307      	strlt	r3, [sp, #28]
 800f2da:	bfb8      	it	lt
 800f2dc:	9204      	strlt	r2, [sp, #16]
 800f2de:	7823      	ldrb	r3, [r4, #0]
 800f2e0:	2b2e      	cmp	r3, #46	@ 0x2e
 800f2e2:	d10a      	bne.n	800f2fa <_vfiprintf_r+0x156>
 800f2e4:	7863      	ldrb	r3, [r4, #1]
 800f2e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2e8:	d132      	bne.n	800f350 <_vfiprintf_r+0x1ac>
 800f2ea:	9b03      	ldr	r3, [sp, #12]
 800f2ec:	1d1a      	adds	r2, r3, #4
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	9203      	str	r2, [sp, #12]
 800f2f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f2f6:	3402      	adds	r4, #2
 800f2f8:	9305      	str	r3, [sp, #20]
 800f2fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f3d0 <_vfiprintf_r+0x22c>
 800f2fe:	7821      	ldrb	r1, [r4, #0]
 800f300:	2203      	movs	r2, #3
 800f302:	4650      	mov	r0, sl
 800f304:	f7f0 ff64 	bl	80001d0 <memchr>
 800f308:	b138      	cbz	r0, 800f31a <_vfiprintf_r+0x176>
 800f30a:	9b04      	ldr	r3, [sp, #16]
 800f30c:	eba0 000a 	sub.w	r0, r0, sl
 800f310:	2240      	movs	r2, #64	@ 0x40
 800f312:	4082      	lsls	r2, r0
 800f314:	4313      	orrs	r3, r2
 800f316:	3401      	adds	r4, #1
 800f318:	9304      	str	r3, [sp, #16]
 800f31a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f31e:	4829      	ldr	r0, [pc, #164]	@ (800f3c4 <_vfiprintf_r+0x220>)
 800f320:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f324:	2206      	movs	r2, #6
 800f326:	f7f0 ff53 	bl	80001d0 <memchr>
 800f32a:	2800      	cmp	r0, #0
 800f32c:	d03f      	beq.n	800f3ae <_vfiprintf_r+0x20a>
 800f32e:	4b26      	ldr	r3, [pc, #152]	@ (800f3c8 <_vfiprintf_r+0x224>)
 800f330:	bb1b      	cbnz	r3, 800f37a <_vfiprintf_r+0x1d6>
 800f332:	9b03      	ldr	r3, [sp, #12]
 800f334:	3307      	adds	r3, #7
 800f336:	f023 0307 	bic.w	r3, r3, #7
 800f33a:	3308      	adds	r3, #8
 800f33c:	9303      	str	r3, [sp, #12]
 800f33e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f340:	443b      	add	r3, r7
 800f342:	9309      	str	r3, [sp, #36]	@ 0x24
 800f344:	e76a      	b.n	800f21c <_vfiprintf_r+0x78>
 800f346:	fb0c 3202 	mla	r2, ip, r2, r3
 800f34a:	460c      	mov	r4, r1
 800f34c:	2001      	movs	r0, #1
 800f34e:	e7a8      	b.n	800f2a2 <_vfiprintf_r+0xfe>
 800f350:	2300      	movs	r3, #0
 800f352:	3401      	adds	r4, #1
 800f354:	9305      	str	r3, [sp, #20]
 800f356:	4619      	mov	r1, r3
 800f358:	f04f 0c0a 	mov.w	ip, #10
 800f35c:	4620      	mov	r0, r4
 800f35e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f362:	3a30      	subs	r2, #48	@ 0x30
 800f364:	2a09      	cmp	r2, #9
 800f366:	d903      	bls.n	800f370 <_vfiprintf_r+0x1cc>
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d0c6      	beq.n	800f2fa <_vfiprintf_r+0x156>
 800f36c:	9105      	str	r1, [sp, #20]
 800f36e:	e7c4      	b.n	800f2fa <_vfiprintf_r+0x156>
 800f370:	fb0c 2101 	mla	r1, ip, r1, r2
 800f374:	4604      	mov	r4, r0
 800f376:	2301      	movs	r3, #1
 800f378:	e7f0      	b.n	800f35c <_vfiprintf_r+0x1b8>
 800f37a:	ab03      	add	r3, sp, #12
 800f37c:	9300      	str	r3, [sp, #0]
 800f37e:	462a      	mov	r2, r5
 800f380:	4b12      	ldr	r3, [pc, #72]	@ (800f3cc <_vfiprintf_r+0x228>)
 800f382:	a904      	add	r1, sp, #16
 800f384:	4630      	mov	r0, r6
 800f386:	f3af 8000 	nop.w
 800f38a:	4607      	mov	r7, r0
 800f38c:	1c78      	adds	r0, r7, #1
 800f38e:	d1d6      	bne.n	800f33e <_vfiprintf_r+0x19a>
 800f390:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f392:	07d9      	lsls	r1, r3, #31
 800f394:	d405      	bmi.n	800f3a2 <_vfiprintf_r+0x1fe>
 800f396:	89ab      	ldrh	r3, [r5, #12]
 800f398:	059a      	lsls	r2, r3, #22
 800f39a:	d402      	bmi.n	800f3a2 <_vfiprintf_r+0x1fe>
 800f39c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f39e:	f7ff fe95 	bl	800f0cc <__retarget_lock_release_recursive>
 800f3a2:	89ab      	ldrh	r3, [r5, #12]
 800f3a4:	065b      	lsls	r3, r3, #25
 800f3a6:	f53f af1f 	bmi.w	800f1e8 <_vfiprintf_r+0x44>
 800f3aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f3ac:	e71e      	b.n	800f1ec <_vfiprintf_r+0x48>
 800f3ae:	ab03      	add	r3, sp, #12
 800f3b0:	9300      	str	r3, [sp, #0]
 800f3b2:	462a      	mov	r2, r5
 800f3b4:	4b05      	ldr	r3, [pc, #20]	@ (800f3cc <_vfiprintf_r+0x228>)
 800f3b6:	a904      	add	r1, sp, #16
 800f3b8:	4630      	mov	r0, r6
 800f3ba:	f000 f91b 	bl	800f5f4 <_printf_i>
 800f3be:	e7e4      	b.n	800f38a <_vfiprintf_r+0x1e6>
 800f3c0:	08012e94 	.word	0x08012e94
 800f3c4:	08012e9e 	.word	0x08012e9e
 800f3c8:	00000000 	.word	0x00000000
 800f3cc:	0800f181 	.word	0x0800f181
 800f3d0:	08012e9a 	.word	0x08012e9a

0800f3d4 <sbrk_aligned>:
 800f3d4:	b570      	push	{r4, r5, r6, lr}
 800f3d6:	4e0f      	ldr	r6, [pc, #60]	@ (800f414 <sbrk_aligned+0x40>)
 800f3d8:	460c      	mov	r4, r1
 800f3da:	6831      	ldr	r1, [r6, #0]
 800f3dc:	4605      	mov	r5, r0
 800f3de:	b911      	cbnz	r1, 800f3e6 <sbrk_aligned+0x12>
 800f3e0:	f000 fcb4 	bl	800fd4c <_sbrk_r>
 800f3e4:	6030      	str	r0, [r6, #0]
 800f3e6:	4621      	mov	r1, r4
 800f3e8:	4628      	mov	r0, r5
 800f3ea:	f000 fcaf 	bl	800fd4c <_sbrk_r>
 800f3ee:	1c43      	adds	r3, r0, #1
 800f3f0:	d103      	bne.n	800f3fa <sbrk_aligned+0x26>
 800f3f2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800f3f6:	4620      	mov	r0, r4
 800f3f8:	bd70      	pop	{r4, r5, r6, pc}
 800f3fa:	1cc4      	adds	r4, r0, #3
 800f3fc:	f024 0403 	bic.w	r4, r4, #3
 800f400:	42a0      	cmp	r0, r4
 800f402:	d0f8      	beq.n	800f3f6 <sbrk_aligned+0x22>
 800f404:	1a21      	subs	r1, r4, r0
 800f406:	4628      	mov	r0, r5
 800f408:	f000 fca0 	bl	800fd4c <_sbrk_r>
 800f40c:	3001      	adds	r0, #1
 800f40e:	d1f2      	bne.n	800f3f6 <sbrk_aligned+0x22>
 800f410:	e7ef      	b.n	800f3f2 <sbrk_aligned+0x1e>
 800f412:	bf00      	nop
 800f414:	2000083c 	.word	0x2000083c

0800f418 <_malloc_r>:
 800f418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f41c:	1ccd      	adds	r5, r1, #3
 800f41e:	f025 0503 	bic.w	r5, r5, #3
 800f422:	3508      	adds	r5, #8
 800f424:	2d0c      	cmp	r5, #12
 800f426:	bf38      	it	cc
 800f428:	250c      	movcc	r5, #12
 800f42a:	2d00      	cmp	r5, #0
 800f42c:	4606      	mov	r6, r0
 800f42e:	db01      	blt.n	800f434 <_malloc_r+0x1c>
 800f430:	42a9      	cmp	r1, r5
 800f432:	d904      	bls.n	800f43e <_malloc_r+0x26>
 800f434:	230c      	movs	r3, #12
 800f436:	6033      	str	r3, [r6, #0]
 800f438:	2000      	movs	r0, #0
 800f43a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f43e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f514 <_malloc_r+0xfc>
 800f442:	f000 faa3 	bl	800f98c <__malloc_lock>
 800f446:	f8d8 3000 	ldr.w	r3, [r8]
 800f44a:	461c      	mov	r4, r3
 800f44c:	bb44      	cbnz	r4, 800f4a0 <_malloc_r+0x88>
 800f44e:	4629      	mov	r1, r5
 800f450:	4630      	mov	r0, r6
 800f452:	f7ff ffbf 	bl	800f3d4 <sbrk_aligned>
 800f456:	1c43      	adds	r3, r0, #1
 800f458:	4604      	mov	r4, r0
 800f45a:	d158      	bne.n	800f50e <_malloc_r+0xf6>
 800f45c:	f8d8 4000 	ldr.w	r4, [r8]
 800f460:	4627      	mov	r7, r4
 800f462:	2f00      	cmp	r7, #0
 800f464:	d143      	bne.n	800f4ee <_malloc_r+0xd6>
 800f466:	2c00      	cmp	r4, #0
 800f468:	d04b      	beq.n	800f502 <_malloc_r+0xea>
 800f46a:	6823      	ldr	r3, [r4, #0]
 800f46c:	4639      	mov	r1, r7
 800f46e:	4630      	mov	r0, r6
 800f470:	eb04 0903 	add.w	r9, r4, r3
 800f474:	f000 fc6a 	bl	800fd4c <_sbrk_r>
 800f478:	4581      	cmp	r9, r0
 800f47a:	d142      	bne.n	800f502 <_malloc_r+0xea>
 800f47c:	6821      	ldr	r1, [r4, #0]
 800f47e:	1a6d      	subs	r5, r5, r1
 800f480:	4629      	mov	r1, r5
 800f482:	4630      	mov	r0, r6
 800f484:	f7ff ffa6 	bl	800f3d4 <sbrk_aligned>
 800f488:	3001      	adds	r0, #1
 800f48a:	d03a      	beq.n	800f502 <_malloc_r+0xea>
 800f48c:	6823      	ldr	r3, [r4, #0]
 800f48e:	442b      	add	r3, r5
 800f490:	6023      	str	r3, [r4, #0]
 800f492:	f8d8 3000 	ldr.w	r3, [r8]
 800f496:	685a      	ldr	r2, [r3, #4]
 800f498:	bb62      	cbnz	r2, 800f4f4 <_malloc_r+0xdc>
 800f49a:	f8c8 7000 	str.w	r7, [r8]
 800f49e:	e00f      	b.n	800f4c0 <_malloc_r+0xa8>
 800f4a0:	6822      	ldr	r2, [r4, #0]
 800f4a2:	1b52      	subs	r2, r2, r5
 800f4a4:	d420      	bmi.n	800f4e8 <_malloc_r+0xd0>
 800f4a6:	2a0b      	cmp	r2, #11
 800f4a8:	d917      	bls.n	800f4da <_malloc_r+0xc2>
 800f4aa:	1961      	adds	r1, r4, r5
 800f4ac:	42a3      	cmp	r3, r4
 800f4ae:	6025      	str	r5, [r4, #0]
 800f4b0:	bf18      	it	ne
 800f4b2:	6059      	strne	r1, [r3, #4]
 800f4b4:	6863      	ldr	r3, [r4, #4]
 800f4b6:	bf08      	it	eq
 800f4b8:	f8c8 1000 	streq.w	r1, [r8]
 800f4bc:	5162      	str	r2, [r4, r5]
 800f4be:	604b      	str	r3, [r1, #4]
 800f4c0:	4630      	mov	r0, r6
 800f4c2:	f000 fa69 	bl	800f998 <__malloc_unlock>
 800f4c6:	f104 000b 	add.w	r0, r4, #11
 800f4ca:	1d23      	adds	r3, r4, #4
 800f4cc:	f020 0007 	bic.w	r0, r0, #7
 800f4d0:	1ac2      	subs	r2, r0, r3
 800f4d2:	bf1c      	itt	ne
 800f4d4:	1a1b      	subne	r3, r3, r0
 800f4d6:	50a3      	strne	r3, [r4, r2]
 800f4d8:	e7af      	b.n	800f43a <_malloc_r+0x22>
 800f4da:	6862      	ldr	r2, [r4, #4]
 800f4dc:	42a3      	cmp	r3, r4
 800f4de:	bf0c      	ite	eq
 800f4e0:	f8c8 2000 	streq.w	r2, [r8]
 800f4e4:	605a      	strne	r2, [r3, #4]
 800f4e6:	e7eb      	b.n	800f4c0 <_malloc_r+0xa8>
 800f4e8:	4623      	mov	r3, r4
 800f4ea:	6864      	ldr	r4, [r4, #4]
 800f4ec:	e7ae      	b.n	800f44c <_malloc_r+0x34>
 800f4ee:	463c      	mov	r4, r7
 800f4f0:	687f      	ldr	r7, [r7, #4]
 800f4f2:	e7b6      	b.n	800f462 <_malloc_r+0x4a>
 800f4f4:	461a      	mov	r2, r3
 800f4f6:	685b      	ldr	r3, [r3, #4]
 800f4f8:	42a3      	cmp	r3, r4
 800f4fa:	d1fb      	bne.n	800f4f4 <_malloc_r+0xdc>
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	6053      	str	r3, [r2, #4]
 800f500:	e7de      	b.n	800f4c0 <_malloc_r+0xa8>
 800f502:	230c      	movs	r3, #12
 800f504:	6033      	str	r3, [r6, #0]
 800f506:	4630      	mov	r0, r6
 800f508:	f000 fa46 	bl	800f998 <__malloc_unlock>
 800f50c:	e794      	b.n	800f438 <_malloc_r+0x20>
 800f50e:	6005      	str	r5, [r0, #0]
 800f510:	e7d6      	b.n	800f4c0 <_malloc_r+0xa8>
 800f512:	bf00      	nop
 800f514:	20000840 	.word	0x20000840

0800f518 <_printf_common>:
 800f518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f51c:	4616      	mov	r6, r2
 800f51e:	4698      	mov	r8, r3
 800f520:	688a      	ldr	r2, [r1, #8]
 800f522:	690b      	ldr	r3, [r1, #16]
 800f524:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f528:	4293      	cmp	r3, r2
 800f52a:	bfb8      	it	lt
 800f52c:	4613      	movlt	r3, r2
 800f52e:	6033      	str	r3, [r6, #0]
 800f530:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f534:	4607      	mov	r7, r0
 800f536:	460c      	mov	r4, r1
 800f538:	b10a      	cbz	r2, 800f53e <_printf_common+0x26>
 800f53a:	3301      	adds	r3, #1
 800f53c:	6033      	str	r3, [r6, #0]
 800f53e:	6823      	ldr	r3, [r4, #0]
 800f540:	0699      	lsls	r1, r3, #26
 800f542:	bf42      	ittt	mi
 800f544:	6833      	ldrmi	r3, [r6, #0]
 800f546:	3302      	addmi	r3, #2
 800f548:	6033      	strmi	r3, [r6, #0]
 800f54a:	6825      	ldr	r5, [r4, #0]
 800f54c:	f015 0506 	ands.w	r5, r5, #6
 800f550:	d106      	bne.n	800f560 <_printf_common+0x48>
 800f552:	f104 0a19 	add.w	sl, r4, #25
 800f556:	68e3      	ldr	r3, [r4, #12]
 800f558:	6832      	ldr	r2, [r6, #0]
 800f55a:	1a9b      	subs	r3, r3, r2
 800f55c:	42ab      	cmp	r3, r5
 800f55e:	dc26      	bgt.n	800f5ae <_printf_common+0x96>
 800f560:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f564:	6822      	ldr	r2, [r4, #0]
 800f566:	3b00      	subs	r3, #0
 800f568:	bf18      	it	ne
 800f56a:	2301      	movne	r3, #1
 800f56c:	0692      	lsls	r2, r2, #26
 800f56e:	d42b      	bmi.n	800f5c8 <_printf_common+0xb0>
 800f570:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f574:	4641      	mov	r1, r8
 800f576:	4638      	mov	r0, r7
 800f578:	47c8      	blx	r9
 800f57a:	3001      	adds	r0, #1
 800f57c:	d01e      	beq.n	800f5bc <_printf_common+0xa4>
 800f57e:	6823      	ldr	r3, [r4, #0]
 800f580:	6922      	ldr	r2, [r4, #16]
 800f582:	f003 0306 	and.w	r3, r3, #6
 800f586:	2b04      	cmp	r3, #4
 800f588:	bf02      	ittt	eq
 800f58a:	68e5      	ldreq	r5, [r4, #12]
 800f58c:	6833      	ldreq	r3, [r6, #0]
 800f58e:	1aed      	subeq	r5, r5, r3
 800f590:	68a3      	ldr	r3, [r4, #8]
 800f592:	bf0c      	ite	eq
 800f594:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f598:	2500      	movne	r5, #0
 800f59a:	4293      	cmp	r3, r2
 800f59c:	bfc4      	itt	gt
 800f59e:	1a9b      	subgt	r3, r3, r2
 800f5a0:	18ed      	addgt	r5, r5, r3
 800f5a2:	2600      	movs	r6, #0
 800f5a4:	341a      	adds	r4, #26
 800f5a6:	42b5      	cmp	r5, r6
 800f5a8:	d11a      	bne.n	800f5e0 <_printf_common+0xc8>
 800f5aa:	2000      	movs	r0, #0
 800f5ac:	e008      	b.n	800f5c0 <_printf_common+0xa8>
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	4652      	mov	r2, sl
 800f5b2:	4641      	mov	r1, r8
 800f5b4:	4638      	mov	r0, r7
 800f5b6:	47c8      	blx	r9
 800f5b8:	3001      	adds	r0, #1
 800f5ba:	d103      	bne.n	800f5c4 <_printf_common+0xac>
 800f5bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f5c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5c4:	3501      	adds	r5, #1
 800f5c6:	e7c6      	b.n	800f556 <_printf_common+0x3e>
 800f5c8:	18e1      	adds	r1, r4, r3
 800f5ca:	1c5a      	adds	r2, r3, #1
 800f5cc:	2030      	movs	r0, #48	@ 0x30
 800f5ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f5d2:	4422      	add	r2, r4
 800f5d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f5d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f5dc:	3302      	adds	r3, #2
 800f5de:	e7c7      	b.n	800f570 <_printf_common+0x58>
 800f5e0:	2301      	movs	r3, #1
 800f5e2:	4622      	mov	r2, r4
 800f5e4:	4641      	mov	r1, r8
 800f5e6:	4638      	mov	r0, r7
 800f5e8:	47c8      	blx	r9
 800f5ea:	3001      	adds	r0, #1
 800f5ec:	d0e6      	beq.n	800f5bc <_printf_common+0xa4>
 800f5ee:	3601      	adds	r6, #1
 800f5f0:	e7d9      	b.n	800f5a6 <_printf_common+0x8e>
	...

0800f5f4 <_printf_i>:
 800f5f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f5f8:	7e0f      	ldrb	r7, [r1, #24]
 800f5fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f5fc:	2f78      	cmp	r7, #120	@ 0x78
 800f5fe:	4691      	mov	r9, r2
 800f600:	4680      	mov	r8, r0
 800f602:	460c      	mov	r4, r1
 800f604:	469a      	mov	sl, r3
 800f606:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f60a:	d807      	bhi.n	800f61c <_printf_i+0x28>
 800f60c:	2f62      	cmp	r7, #98	@ 0x62
 800f60e:	d80a      	bhi.n	800f626 <_printf_i+0x32>
 800f610:	2f00      	cmp	r7, #0
 800f612:	f000 80d2 	beq.w	800f7ba <_printf_i+0x1c6>
 800f616:	2f58      	cmp	r7, #88	@ 0x58
 800f618:	f000 80b9 	beq.w	800f78e <_printf_i+0x19a>
 800f61c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f620:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f624:	e03a      	b.n	800f69c <_printf_i+0xa8>
 800f626:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f62a:	2b15      	cmp	r3, #21
 800f62c:	d8f6      	bhi.n	800f61c <_printf_i+0x28>
 800f62e:	a101      	add	r1, pc, #4	@ (adr r1, 800f634 <_printf_i+0x40>)
 800f630:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f634:	0800f68d 	.word	0x0800f68d
 800f638:	0800f6a1 	.word	0x0800f6a1
 800f63c:	0800f61d 	.word	0x0800f61d
 800f640:	0800f61d 	.word	0x0800f61d
 800f644:	0800f61d 	.word	0x0800f61d
 800f648:	0800f61d 	.word	0x0800f61d
 800f64c:	0800f6a1 	.word	0x0800f6a1
 800f650:	0800f61d 	.word	0x0800f61d
 800f654:	0800f61d 	.word	0x0800f61d
 800f658:	0800f61d 	.word	0x0800f61d
 800f65c:	0800f61d 	.word	0x0800f61d
 800f660:	0800f7a1 	.word	0x0800f7a1
 800f664:	0800f6cb 	.word	0x0800f6cb
 800f668:	0800f75b 	.word	0x0800f75b
 800f66c:	0800f61d 	.word	0x0800f61d
 800f670:	0800f61d 	.word	0x0800f61d
 800f674:	0800f7c3 	.word	0x0800f7c3
 800f678:	0800f61d 	.word	0x0800f61d
 800f67c:	0800f6cb 	.word	0x0800f6cb
 800f680:	0800f61d 	.word	0x0800f61d
 800f684:	0800f61d 	.word	0x0800f61d
 800f688:	0800f763 	.word	0x0800f763
 800f68c:	6833      	ldr	r3, [r6, #0]
 800f68e:	1d1a      	adds	r2, r3, #4
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	6032      	str	r2, [r6, #0]
 800f694:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f698:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f69c:	2301      	movs	r3, #1
 800f69e:	e09d      	b.n	800f7dc <_printf_i+0x1e8>
 800f6a0:	6833      	ldr	r3, [r6, #0]
 800f6a2:	6820      	ldr	r0, [r4, #0]
 800f6a4:	1d19      	adds	r1, r3, #4
 800f6a6:	6031      	str	r1, [r6, #0]
 800f6a8:	0606      	lsls	r6, r0, #24
 800f6aa:	d501      	bpl.n	800f6b0 <_printf_i+0xbc>
 800f6ac:	681d      	ldr	r5, [r3, #0]
 800f6ae:	e003      	b.n	800f6b8 <_printf_i+0xc4>
 800f6b0:	0645      	lsls	r5, r0, #25
 800f6b2:	d5fb      	bpl.n	800f6ac <_printf_i+0xb8>
 800f6b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f6b8:	2d00      	cmp	r5, #0
 800f6ba:	da03      	bge.n	800f6c4 <_printf_i+0xd0>
 800f6bc:	232d      	movs	r3, #45	@ 0x2d
 800f6be:	426d      	negs	r5, r5
 800f6c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f6c4:	4859      	ldr	r0, [pc, #356]	@ (800f82c <_printf_i+0x238>)
 800f6c6:	230a      	movs	r3, #10
 800f6c8:	e011      	b.n	800f6ee <_printf_i+0xfa>
 800f6ca:	6821      	ldr	r1, [r4, #0]
 800f6cc:	6833      	ldr	r3, [r6, #0]
 800f6ce:	0608      	lsls	r0, r1, #24
 800f6d0:	f853 5b04 	ldr.w	r5, [r3], #4
 800f6d4:	d402      	bmi.n	800f6dc <_printf_i+0xe8>
 800f6d6:	0649      	lsls	r1, r1, #25
 800f6d8:	bf48      	it	mi
 800f6da:	b2ad      	uxthmi	r5, r5
 800f6dc:	2f6f      	cmp	r7, #111	@ 0x6f
 800f6de:	4853      	ldr	r0, [pc, #332]	@ (800f82c <_printf_i+0x238>)
 800f6e0:	6033      	str	r3, [r6, #0]
 800f6e2:	bf14      	ite	ne
 800f6e4:	230a      	movne	r3, #10
 800f6e6:	2308      	moveq	r3, #8
 800f6e8:	2100      	movs	r1, #0
 800f6ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f6ee:	6866      	ldr	r6, [r4, #4]
 800f6f0:	60a6      	str	r6, [r4, #8]
 800f6f2:	2e00      	cmp	r6, #0
 800f6f4:	bfa2      	ittt	ge
 800f6f6:	6821      	ldrge	r1, [r4, #0]
 800f6f8:	f021 0104 	bicge.w	r1, r1, #4
 800f6fc:	6021      	strge	r1, [r4, #0]
 800f6fe:	b90d      	cbnz	r5, 800f704 <_printf_i+0x110>
 800f700:	2e00      	cmp	r6, #0
 800f702:	d04b      	beq.n	800f79c <_printf_i+0x1a8>
 800f704:	4616      	mov	r6, r2
 800f706:	fbb5 f1f3 	udiv	r1, r5, r3
 800f70a:	fb03 5711 	mls	r7, r3, r1, r5
 800f70e:	5dc7      	ldrb	r7, [r0, r7]
 800f710:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f714:	462f      	mov	r7, r5
 800f716:	42bb      	cmp	r3, r7
 800f718:	460d      	mov	r5, r1
 800f71a:	d9f4      	bls.n	800f706 <_printf_i+0x112>
 800f71c:	2b08      	cmp	r3, #8
 800f71e:	d10b      	bne.n	800f738 <_printf_i+0x144>
 800f720:	6823      	ldr	r3, [r4, #0]
 800f722:	07df      	lsls	r7, r3, #31
 800f724:	d508      	bpl.n	800f738 <_printf_i+0x144>
 800f726:	6923      	ldr	r3, [r4, #16]
 800f728:	6861      	ldr	r1, [r4, #4]
 800f72a:	4299      	cmp	r1, r3
 800f72c:	bfde      	ittt	le
 800f72e:	2330      	movle	r3, #48	@ 0x30
 800f730:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f734:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800f738:	1b92      	subs	r2, r2, r6
 800f73a:	6122      	str	r2, [r4, #16]
 800f73c:	f8cd a000 	str.w	sl, [sp]
 800f740:	464b      	mov	r3, r9
 800f742:	aa03      	add	r2, sp, #12
 800f744:	4621      	mov	r1, r4
 800f746:	4640      	mov	r0, r8
 800f748:	f7ff fee6 	bl	800f518 <_printf_common>
 800f74c:	3001      	adds	r0, #1
 800f74e:	d14a      	bne.n	800f7e6 <_printf_i+0x1f2>
 800f750:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f754:	b004      	add	sp, #16
 800f756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f75a:	6823      	ldr	r3, [r4, #0]
 800f75c:	f043 0320 	orr.w	r3, r3, #32
 800f760:	6023      	str	r3, [r4, #0]
 800f762:	4833      	ldr	r0, [pc, #204]	@ (800f830 <_printf_i+0x23c>)
 800f764:	2778      	movs	r7, #120	@ 0x78
 800f766:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f76a:	6823      	ldr	r3, [r4, #0]
 800f76c:	6831      	ldr	r1, [r6, #0]
 800f76e:	061f      	lsls	r7, r3, #24
 800f770:	f851 5b04 	ldr.w	r5, [r1], #4
 800f774:	d402      	bmi.n	800f77c <_printf_i+0x188>
 800f776:	065f      	lsls	r7, r3, #25
 800f778:	bf48      	it	mi
 800f77a:	b2ad      	uxthmi	r5, r5
 800f77c:	6031      	str	r1, [r6, #0]
 800f77e:	07d9      	lsls	r1, r3, #31
 800f780:	bf44      	itt	mi
 800f782:	f043 0320 	orrmi.w	r3, r3, #32
 800f786:	6023      	strmi	r3, [r4, #0]
 800f788:	b11d      	cbz	r5, 800f792 <_printf_i+0x19e>
 800f78a:	2310      	movs	r3, #16
 800f78c:	e7ac      	b.n	800f6e8 <_printf_i+0xf4>
 800f78e:	4827      	ldr	r0, [pc, #156]	@ (800f82c <_printf_i+0x238>)
 800f790:	e7e9      	b.n	800f766 <_printf_i+0x172>
 800f792:	6823      	ldr	r3, [r4, #0]
 800f794:	f023 0320 	bic.w	r3, r3, #32
 800f798:	6023      	str	r3, [r4, #0]
 800f79a:	e7f6      	b.n	800f78a <_printf_i+0x196>
 800f79c:	4616      	mov	r6, r2
 800f79e:	e7bd      	b.n	800f71c <_printf_i+0x128>
 800f7a0:	6833      	ldr	r3, [r6, #0]
 800f7a2:	6825      	ldr	r5, [r4, #0]
 800f7a4:	6961      	ldr	r1, [r4, #20]
 800f7a6:	1d18      	adds	r0, r3, #4
 800f7a8:	6030      	str	r0, [r6, #0]
 800f7aa:	062e      	lsls	r6, r5, #24
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	d501      	bpl.n	800f7b4 <_printf_i+0x1c0>
 800f7b0:	6019      	str	r1, [r3, #0]
 800f7b2:	e002      	b.n	800f7ba <_printf_i+0x1c6>
 800f7b4:	0668      	lsls	r0, r5, #25
 800f7b6:	d5fb      	bpl.n	800f7b0 <_printf_i+0x1bc>
 800f7b8:	8019      	strh	r1, [r3, #0]
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	6123      	str	r3, [r4, #16]
 800f7be:	4616      	mov	r6, r2
 800f7c0:	e7bc      	b.n	800f73c <_printf_i+0x148>
 800f7c2:	6833      	ldr	r3, [r6, #0]
 800f7c4:	1d1a      	adds	r2, r3, #4
 800f7c6:	6032      	str	r2, [r6, #0]
 800f7c8:	681e      	ldr	r6, [r3, #0]
 800f7ca:	6862      	ldr	r2, [r4, #4]
 800f7cc:	2100      	movs	r1, #0
 800f7ce:	4630      	mov	r0, r6
 800f7d0:	f7f0 fcfe 	bl	80001d0 <memchr>
 800f7d4:	b108      	cbz	r0, 800f7da <_printf_i+0x1e6>
 800f7d6:	1b80      	subs	r0, r0, r6
 800f7d8:	6060      	str	r0, [r4, #4]
 800f7da:	6863      	ldr	r3, [r4, #4]
 800f7dc:	6123      	str	r3, [r4, #16]
 800f7de:	2300      	movs	r3, #0
 800f7e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f7e4:	e7aa      	b.n	800f73c <_printf_i+0x148>
 800f7e6:	6923      	ldr	r3, [r4, #16]
 800f7e8:	4632      	mov	r2, r6
 800f7ea:	4649      	mov	r1, r9
 800f7ec:	4640      	mov	r0, r8
 800f7ee:	47d0      	blx	sl
 800f7f0:	3001      	adds	r0, #1
 800f7f2:	d0ad      	beq.n	800f750 <_printf_i+0x15c>
 800f7f4:	6823      	ldr	r3, [r4, #0]
 800f7f6:	079b      	lsls	r3, r3, #30
 800f7f8:	d413      	bmi.n	800f822 <_printf_i+0x22e>
 800f7fa:	68e0      	ldr	r0, [r4, #12]
 800f7fc:	9b03      	ldr	r3, [sp, #12]
 800f7fe:	4298      	cmp	r0, r3
 800f800:	bfb8      	it	lt
 800f802:	4618      	movlt	r0, r3
 800f804:	e7a6      	b.n	800f754 <_printf_i+0x160>
 800f806:	2301      	movs	r3, #1
 800f808:	4632      	mov	r2, r6
 800f80a:	4649      	mov	r1, r9
 800f80c:	4640      	mov	r0, r8
 800f80e:	47d0      	blx	sl
 800f810:	3001      	adds	r0, #1
 800f812:	d09d      	beq.n	800f750 <_printf_i+0x15c>
 800f814:	3501      	adds	r5, #1
 800f816:	68e3      	ldr	r3, [r4, #12]
 800f818:	9903      	ldr	r1, [sp, #12]
 800f81a:	1a5b      	subs	r3, r3, r1
 800f81c:	42ab      	cmp	r3, r5
 800f81e:	dcf2      	bgt.n	800f806 <_printf_i+0x212>
 800f820:	e7eb      	b.n	800f7fa <_printf_i+0x206>
 800f822:	2500      	movs	r5, #0
 800f824:	f104 0619 	add.w	r6, r4, #25
 800f828:	e7f5      	b.n	800f816 <_printf_i+0x222>
 800f82a:	bf00      	nop
 800f82c:	08012ea5 	.word	0x08012ea5
 800f830:	08012eb6 	.word	0x08012eb6

0800f834 <__sflush_r>:
 800f834:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f83c:	0716      	lsls	r6, r2, #28
 800f83e:	4605      	mov	r5, r0
 800f840:	460c      	mov	r4, r1
 800f842:	d454      	bmi.n	800f8ee <__sflush_r+0xba>
 800f844:	684b      	ldr	r3, [r1, #4]
 800f846:	2b00      	cmp	r3, #0
 800f848:	dc02      	bgt.n	800f850 <__sflush_r+0x1c>
 800f84a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	dd48      	ble.n	800f8e2 <__sflush_r+0xae>
 800f850:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f852:	2e00      	cmp	r6, #0
 800f854:	d045      	beq.n	800f8e2 <__sflush_r+0xae>
 800f856:	2300      	movs	r3, #0
 800f858:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f85c:	682f      	ldr	r7, [r5, #0]
 800f85e:	6a21      	ldr	r1, [r4, #32]
 800f860:	602b      	str	r3, [r5, #0]
 800f862:	d030      	beq.n	800f8c6 <__sflush_r+0x92>
 800f864:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f866:	89a3      	ldrh	r3, [r4, #12]
 800f868:	0759      	lsls	r1, r3, #29
 800f86a:	d505      	bpl.n	800f878 <__sflush_r+0x44>
 800f86c:	6863      	ldr	r3, [r4, #4]
 800f86e:	1ad2      	subs	r2, r2, r3
 800f870:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f872:	b10b      	cbz	r3, 800f878 <__sflush_r+0x44>
 800f874:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f876:	1ad2      	subs	r2, r2, r3
 800f878:	2300      	movs	r3, #0
 800f87a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f87c:	6a21      	ldr	r1, [r4, #32]
 800f87e:	4628      	mov	r0, r5
 800f880:	47b0      	blx	r6
 800f882:	1c43      	adds	r3, r0, #1
 800f884:	89a3      	ldrh	r3, [r4, #12]
 800f886:	d106      	bne.n	800f896 <__sflush_r+0x62>
 800f888:	6829      	ldr	r1, [r5, #0]
 800f88a:	291d      	cmp	r1, #29
 800f88c:	d82b      	bhi.n	800f8e6 <__sflush_r+0xb2>
 800f88e:	4a2a      	ldr	r2, [pc, #168]	@ (800f938 <__sflush_r+0x104>)
 800f890:	410a      	asrs	r2, r1
 800f892:	07d6      	lsls	r6, r2, #31
 800f894:	d427      	bmi.n	800f8e6 <__sflush_r+0xb2>
 800f896:	2200      	movs	r2, #0
 800f898:	6062      	str	r2, [r4, #4]
 800f89a:	04d9      	lsls	r1, r3, #19
 800f89c:	6922      	ldr	r2, [r4, #16]
 800f89e:	6022      	str	r2, [r4, #0]
 800f8a0:	d504      	bpl.n	800f8ac <__sflush_r+0x78>
 800f8a2:	1c42      	adds	r2, r0, #1
 800f8a4:	d101      	bne.n	800f8aa <__sflush_r+0x76>
 800f8a6:	682b      	ldr	r3, [r5, #0]
 800f8a8:	b903      	cbnz	r3, 800f8ac <__sflush_r+0x78>
 800f8aa:	6560      	str	r0, [r4, #84]	@ 0x54
 800f8ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f8ae:	602f      	str	r7, [r5, #0]
 800f8b0:	b1b9      	cbz	r1, 800f8e2 <__sflush_r+0xae>
 800f8b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f8b6:	4299      	cmp	r1, r3
 800f8b8:	d002      	beq.n	800f8c0 <__sflush_r+0x8c>
 800f8ba:	4628      	mov	r0, r5
 800f8bc:	f001 f9f4 	bl	8010ca8 <_free_r>
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	6363      	str	r3, [r4, #52]	@ 0x34
 800f8c4:	e00d      	b.n	800f8e2 <__sflush_r+0xae>
 800f8c6:	2301      	movs	r3, #1
 800f8c8:	4628      	mov	r0, r5
 800f8ca:	47b0      	blx	r6
 800f8cc:	4602      	mov	r2, r0
 800f8ce:	1c50      	adds	r0, r2, #1
 800f8d0:	d1c9      	bne.n	800f866 <__sflush_r+0x32>
 800f8d2:	682b      	ldr	r3, [r5, #0]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d0c6      	beq.n	800f866 <__sflush_r+0x32>
 800f8d8:	2b1d      	cmp	r3, #29
 800f8da:	d001      	beq.n	800f8e0 <__sflush_r+0xac>
 800f8dc:	2b16      	cmp	r3, #22
 800f8de:	d11e      	bne.n	800f91e <__sflush_r+0xea>
 800f8e0:	602f      	str	r7, [r5, #0]
 800f8e2:	2000      	movs	r0, #0
 800f8e4:	e022      	b.n	800f92c <__sflush_r+0xf8>
 800f8e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f8ea:	b21b      	sxth	r3, r3
 800f8ec:	e01b      	b.n	800f926 <__sflush_r+0xf2>
 800f8ee:	690f      	ldr	r7, [r1, #16]
 800f8f0:	2f00      	cmp	r7, #0
 800f8f2:	d0f6      	beq.n	800f8e2 <__sflush_r+0xae>
 800f8f4:	0793      	lsls	r3, r2, #30
 800f8f6:	680e      	ldr	r6, [r1, #0]
 800f8f8:	bf08      	it	eq
 800f8fa:	694b      	ldreq	r3, [r1, #20]
 800f8fc:	600f      	str	r7, [r1, #0]
 800f8fe:	bf18      	it	ne
 800f900:	2300      	movne	r3, #0
 800f902:	eba6 0807 	sub.w	r8, r6, r7
 800f906:	608b      	str	r3, [r1, #8]
 800f908:	f1b8 0f00 	cmp.w	r8, #0
 800f90c:	dde9      	ble.n	800f8e2 <__sflush_r+0xae>
 800f90e:	6a21      	ldr	r1, [r4, #32]
 800f910:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f912:	4643      	mov	r3, r8
 800f914:	463a      	mov	r2, r7
 800f916:	4628      	mov	r0, r5
 800f918:	47b0      	blx	r6
 800f91a:	2800      	cmp	r0, #0
 800f91c:	dc08      	bgt.n	800f930 <__sflush_r+0xfc>
 800f91e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f922:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f926:	81a3      	strh	r3, [r4, #12]
 800f928:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f930:	4407      	add	r7, r0
 800f932:	eba8 0800 	sub.w	r8, r8, r0
 800f936:	e7e7      	b.n	800f908 <__sflush_r+0xd4>
 800f938:	dfbffffe 	.word	0xdfbffffe

0800f93c <_fflush_r>:
 800f93c:	b538      	push	{r3, r4, r5, lr}
 800f93e:	690b      	ldr	r3, [r1, #16]
 800f940:	4605      	mov	r5, r0
 800f942:	460c      	mov	r4, r1
 800f944:	b913      	cbnz	r3, 800f94c <_fflush_r+0x10>
 800f946:	2500      	movs	r5, #0
 800f948:	4628      	mov	r0, r5
 800f94a:	bd38      	pop	{r3, r4, r5, pc}
 800f94c:	b118      	cbz	r0, 800f956 <_fflush_r+0x1a>
 800f94e:	6a03      	ldr	r3, [r0, #32]
 800f950:	b90b      	cbnz	r3, 800f956 <_fflush_r+0x1a>
 800f952:	f7ff fb3f 	bl	800efd4 <__sinit>
 800f956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d0f3      	beq.n	800f946 <_fflush_r+0xa>
 800f95e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f960:	07d0      	lsls	r0, r2, #31
 800f962:	d404      	bmi.n	800f96e <_fflush_r+0x32>
 800f964:	0599      	lsls	r1, r3, #22
 800f966:	d402      	bmi.n	800f96e <_fflush_r+0x32>
 800f968:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f96a:	f7ff fbae 	bl	800f0ca <__retarget_lock_acquire_recursive>
 800f96e:	4628      	mov	r0, r5
 800f970:	4621      	mov	r1, r4
 800f972:	f7ff ff5f 	bl	800f834 <__sflush_r>
 800f976:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f978:	07da      	lsls	r2, r3, #31
 800f97a:	4605      	mov	r5, r0
 800f97c:	d4e4      	bmi.n	800f948 <_fflush_r+0xc>
 800f97e:	89a3      	ldrh	r3, [r4, #12]
 800f980:	059b      	lsls	r3, r3, #22
 800f982:	d4e1      	bmi.n	800f948 <_fflush_r+0xc>
 800f984:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f986:	f7ff fba1 	bl	800f0cc <__retarget_lock_release_recursive>
 800f98a:	e7dd      	b.n	800f948 <_fflush_r+0xc>

0800f98c <__malloc_lock>:
 800f98c:	4801      	ldr	r0, [pc, #4]	@ (800f994 <__malloc_lock+0x8>)
 800f98e:	f7ff bb9c 	b.w	800f0ca <__retarget_lock_acquire_recursive>
 800f992:	bf00      	nop
 800f994:	20000838 	.word	0x20000838

0800f998 <__malloc_unlock>:
 800f998:	4801      	ldr	r0, [pc, #4]	@ (800f9a0 <__malloc_unlock+0x8>)
 800f99a:	f7ff bb97 	b.w	800f0cc <__retarget_lock_release_recursive>
 800f99e:	bf00      	nop
 800f9a0:	20000838 	.word	0x20000838

0800f9a4 <__sread>:
 800f9a4:	b510      	push	{r4, lr}
 800f9a6:	460c      	mov	r4, r1
 800f9a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9ac:	f000 f9a8 	bl	800fd00 <_read_r>
 800f9b0:	2800      	cmp	r0, #0
 800f9b2:	bfab      	itete	ge
 800f9b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f9b6:	89a3      	ldrhlt	r3, [r4, #12]
 800f9b8:	181b      	addge	r3, r3, r0
 800f9ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f9be:	bfac      	ite	ge
 800f9c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f9c2:	81a3      	strhlt	r3, [r4, #12]
 800f9c4:	bd10      	pop	{r4, pc}

0800f9c6 <__swrite>:
 800f9c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9ca:	461f      	mov	r7, r3
 800f9cc:	898b      	ldrh	r3, [r1, #12]
 800f9ce:	05db      	lsls	r3, r3, #23
 800f9d0:	4605      	mov	r5, r0
 800f9d2:	460c      	mov	r4, r1
 800f9d4:	4616      	mov	r6, r2
 800f9d6:	d505      	bpl.n	800f9e4 <__swrite+0x1e>
 800f9d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9dc:	2302      	movs	r3, #2
 800f9de:	2200      	movs	r2, #0
 800f9e0:	f000 f94c 	bl	800fc7c <_lseek_r>
 800f9e4:	89a3      	ldrh	r3, [r4, #12]
 800f9e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f9ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f9ee:	81a3      	strh	r3, [r4, #12]
 800f9f0:	4632      	mov	r2, r6
 800f9f2:	463b      	mov	r3, r7
 800f9f4:	4628      	mov	r0, r5
 800f9f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9fa:	f000 b9b7 	b.w	800fd6c <_write_r>

0800f9fe <__sseek>:
 800f9fe:	b510      	push	{r4, lr}
 800fa00:	460c      	mov	r4, r1
 800fa02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa06:	f000 f939 	bl	800fc7c <_lseek_r>
 800fa0a:	1c43      	adds	r3, r0, #1
 800fa0c:	89a3      	ldrh	r3, [r4, #12]
 800fa0e:	bf15      	itete	ne
 800fa10:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fa12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fa16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fa1a:	81a3      	strheq	r3, [r4, #12]
 800fa1c:	bf18      	it	ne
 800fa1e:	81a3      	strhne	r3, [r4, #12]
 800fa20:	bd10      	pop	{r4, pc}

0800fa22 <__sclose>:
 800fa22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa26:	f000 b8f7 	b.w	800fc18 <_close_r>

0800fa2a <__swbuf_r>:
 800fa2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa2c:	460e      	mov	r6, r1
 800fa2e:	4614      	mov	r4, r2
 800fa30:	4605      	mov	r5, r0
 800fa32:	b118      	cbz	r0, 800fa3c <__swbuf_r+0x12>
 800fa34:	6a03      	ldr	r3, [r0, #32]
 800fa36:	b90b      	cbnz	r3, 800fa3c <__swbuf_r+0x12>
 800fa38:	f7ff facc 	bl	800efd4 <__sinit>
 800fa3c:	69a3      	ldr	r3, [r4, #24]
 800fa3e:	60a3      	str	r3, [r4, #8]
 800fa40:	89a3      	ldrh	r3, [r4, #12]
 800fa42:	071a      	lsls	r2, r3, #28
 800fa44:	d501      	bpl.n	800fa4a <__swbuf_r+0x20>
 800fa46:	6923      	ldr	r3, [r4, #16]
 800fa48:	b943      	cbnz	r3, 800fa5c <__swbuf_r+0x32>
 800fa4a:	4621      	mov	r1, r4
 800fa4c:	4628      	mov	r0, r5
 800fa4e:	f000 f82b 	bl	800faa8 <__swsetup_r>
 800fa52:	b118      	cbz	r0, 800fa5c <__swbuf_r+0x32>
 800fa54:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800fa58:	4638      	mov	r0, r7
 800fa5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa5c:	6823      	ldr	r3, [r4, #0]
 800fa5e:	6922      	ldr	r2, [r4, #16]
 800fa60:	1a98      	subs	r0, r3, r2
 800fa62:	6963      	ldr	r3, [r4, #20]
 800fa64:	b2f6      	uxtb	r6, r6
 800fa66:	4283      	cmp	r3, r0
 800fa68:	4637      	mov	r7, r6
 800fa6a:	dc05      	bgt.n	800fa78 <__swbuf_r+0x4e>
 800fa6c:	4621      	mov	r1, r4
 800fa6e:	4628      	mov	r0, r5
 800fa70:	f7ff ff64 	bl	800f93c <_fflush_r>
 800fa74:	2800      	cmp	r0, #0
 800fa76:	d1ed      	bne.n	800fa54 <__swbuf_r+0x2a>
 800fa78:	68a3      	ldr	r3, [r4, #8]
 800fa7a:	3b01      	subs	r3, #1
 800fa7c:	60a3      	str	r3, [r4, #8]
 800fa7e:	6823      	ldr	r3, [r4, #0]
 800fa80:	1c5a      	adds	r2, r3, #1
 800fa82:	6022      	str	r2, [r4, #0]
 800fa84:	701e      	strb	r6, [r3, #0]
 800fa86:	6962      	ldr	r2, [r4, #20]
 800fa88:	1c43      	adds	r3, r0, #1
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	d004      	beq.n	800fa98 <__swbuf_r+0x6e>
 800fa8e:	89a3      	ldrh	r3, [r4, #12]
 800fa90:	07db      	lsls	r3, r3, #31
 800fa92:	d5e1      	bpl.n	800fa58 <__swbuf_r+0x2e>
 800fa94:	2e0a      	cmp	r6, #10
 800fa96:	d1df      	bne.n	800fa58 <__swbuf_r+0x2e>
 800fa98:	4621      	mov	r1, r4
 800fa9a:	4628      	mov	r0, r5
 800fa9c:	f7ff ff4e 	bl	800f93c <_fflush_r>
 800faa0:	2800      	cmp	r0, #0
 800faa2:	d0d9      	beq.n	800fa58 <__swbuf_r+0x2e>
 800faa4:	e7d6      	b.n	800fa54 <__swbuf_r+0x2a>
	...

0800faa8 <__swsetup_r>:
 800faa8:	b538      	push	{r3, r4, r5, lr}
 800faaa:	4b29      	ldr	r3, [pc, #164]	@ (800fb50 <__swsetup_r+0xa8>)
 800faac:	4605      	mov	r5, r0
 800faae:	6818      	ldr	r0, [r3, #0]
 800fab0:	460c      	mov	r4, r1
 800fab2:	b118      	cbz	r0, 800fabc <__swsetup_r+0x14>
 800fab4:	6a03      	ldr	r3, [r0, #32]
 800fab6:	b90b      	cbnz	r3, 800fabc <__swsetup_r+0x14>
 800fab8:	f7ff fa8c 	bl	800efd4 <__sinit>
 800fabc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fac0:	0719      	lsls	r1, r3, #28
 800fac2:	d422      	bmi.n	800fb0a <__swsetup_r+0x62>
 800fac4:	06da      	lsls	r2, r3, #27
 800fac6:	d407      	bmi.n	800fad8 <__swsetup_r+0x30>
 800fac8:	2209      	movs	r2, #9
 800faca:	602a      	str	r2, [r5, #0]
 800facc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fad0:	81a3      	strh	r3, [r4, #12]
 800fad2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fad6:	e033      	b.n	800fb40 <__swsetup_r+0x98>
 800fad8:	0758      	lsls	r0, r3, #29
 800fada:	d512      	bpl.n	800fb02 <__swsetup_r+0x5a>
 800fadc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fade:	b141      	cbz	r1, 800faf2 <__swsetup_r+0x4a>
 800fae0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fae4:	4299      	cmp	r1, r3
 800fae6:	d002      	beq.n	800faee <__swsetup_r+0x46>
 800fae8:	4628      	mov	r0, r5
 800faea:	f001 f8dd 	bl	8010ca8 <_free_r>
 800faee:	2300      	movs	r3, #0
 800faf0:	6363      	str	r3, [r4, #52]	@ 0x34
 800faf2:	89a3      	ldrh	r3, [r4, #12]
 800faf4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800faf8:	81a3      	strh	r3, [r4, #12]
 800fafa:	2300      	movs	r3, #0
 800fafc:	6063      	str	r3, [r4, #4]
 800fafe:	6923      	ldr	r3, [r4, #16]
 800fb00:	6023      	str	r3, [r4, #0]
 800fb02:	89a3      	ldrh	r3, [r4, #12]
 800fb04:	f043 0308 	orr.w	r3, r3, #8
 800fb08:	81a3      	strh	r3, [r4, #12]
 800fb0a:	6923      	ldr	r3, [r4, #16]
 800fb0c:	b94b      	cbnz	r3, 800fb22 <__swsetup_r+0x7a>
 800fb0e:	89a3      	ldrh	r3, [r4, #12]
 800fb10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fb14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fb18:	d003      	beq.n	800fb22 <__swsetup_r+0x7a>
 800fb1a:	4621      	mov	r1, r4
 800fb1c:	4628      	mov	r0, r5
 800fb1e:	f000 f83f 	bl	800fba0 <__smakebuf_r>
 800fb22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb26:	f013 0201 	ands.w	r2, r3, #1
 800fb2a:	d00a      	beq.n	800fb42 <__swsetup_r+0x9a>
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	60a2      	str	r2, [r4, #8]
 800fb30:	6962      	ldr	r2, [r4, #20]
 800fb32:	4252      	negs	r2, r2
 800fb34:	61a2      	str	r2, [r4, #24]
 800fb36:	6922      	ldr	r2, [r4, #16]
 800fb38:	b942      	cbnz	r2, 800fb4c <__swsetup_r+0xa4>
 800fb3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fb3e:	d1c5      	bne.n	800facc <__swsetup_r+0x24>
 800fb40:	bd38      	pop	{r3, r4, r5, pc}
 800fb42:	0799      	lsls	r1, r3, #30
 800fb44:	bf58      	it	pl
 800fb46:	6962      	ldrpl	r2, [r4, #20]
 800fb48:	60a2      	str	r2, [r4, #8]
 800fb4a:	e7f4      	b.n	800fb36 <__swsetup_r+0x8e>
 800fb4c:	2000      	movs	r0, #0
 800fb4e:	e7f7      	b.n	800fb40 <__swsetup_r+0x98>
 800fb50:	20000074 	.word	0x20000074

0800fb54 <__swhatbuf_r>:
 800fb54:	b570      	push	{r4, r5, r6, lr}
 800fb56:	460c      	mov	r4, r1
 800fb58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb5c:	2900      	cmp	r1, #0
 800fb5e:	b096      	sub	sp, #88	@ 0x58
 800fb60:	4615      	mov	r5, r2
 800fb62:	461e      	mov	r6, r3
 800fb64:	da0d      	bge.n	800fb82 <__swhatbuf_r+0x2e>
 800fb66:	89a3      	ldrh	r3, [r4, #12]
 800fb68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fb6c:	f04f 0100 	mov.w	r1, #0
 800fb70:	bf14      	ite	ne
 800fb72:	2340      	movne	r3, #64	@ 0x40
 800fb74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fb78:	2000      	movs	r0, #0
 800fb7a:	6031      	str	r1, [r6, #0]
 800fb7c:	602b      	str	r3, [r5, #0]
 800fb7e:	b016      	add	sp, #88	@ 0x58
 800fb80:	bd70      	pop	{r4, r5, r6, pc}
 800fb82:	466a      	mov	r2, sp
 800fb84:	f000 f858 	bl	800fc38 <_fstat_r>
 800fb88:	2800      	cmp	r0, #0
 800fb8a:	dbec      	blt.n	800fb66 <__swhatbuf_r+0x12>
 800fb8c:	9901      	ldr	r1, [sp, #4]
 800fb8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fb92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fb96:	4259      	negs	r1, r3
 800fb98:	4159      	adcs	r1, r3
 800fb9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fb9e:	e7eb      	b.n	800fb78 <__swhatbuf_r+0x24>

0800fba0 <__smakebuf_r>:
 800fba0:	898b      	ldrh	r3, [r1, #12]
 800fba2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fba4:	079d      	lsls	r5, r3, #30
 800fba6:	4606      	mov	r6, r0
 800fba8:	460c      	mov	r4, r1
 800fbaa:	d507      	bpl.n	800fbbc <__smakebuf_r+0x1c>
 800fbac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fbb0:	6023      	str	r3, [r4, #0]
 800fbb2:	6123      	str	r3, [r4, #16]
 800fbb4:	2301      	movs	r3, #1
 800fbb6:	6163      	str	r3, [r4, #20]
 800fbb8:	b003      	add	sp, #12
 800fbba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbbc:	ab01      	add	r3, sp, #4
 800fbbe:	466a      	mov	r2, sp
 800fbc0:	f7ff ffc8 	bl	800fb54 <__swhatbuf_r>
 800fbc4:	9f00      	ldr	r7, [sp, #0]
 800fbc6:	4605      	mov	r5, r0
 800fbc8:	4639      	mov	r1, r7
 800fbca:	4630      	mov	r0, r6
 800fbcc:	f7ff fc24 	bl	800f418 <_malloc_r>
 800fbd0:	b948      	cbnz	r0, 800fbe6 <__smakebuf_r+0x46>
 800fbd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbd6:	059a      	lsls	r2, r3, #22
 800fbd8:	d4ee      	bmi.n	800fbb8 <__smakebuf_r+0x18>
 800fbda:	f023 0303 	bic.w	r3, r3, #3
 800fbde:	f043 0302 	orr.w	r3, r3, #2
 800fbe2:	81a3      	strh	r3, [r4, #12]
 800fbe4:	e7e2      	b.n	800fbac <__smakebuf_r+0xc>
 800fbe6:	89a3      	ldrh	r3, [r4, #12]
 800fbe8:	6020      	str	r0, [r4, #0]
 800fbea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fbee:	81a3      	strh	r3, [r4, #12]
 800fbf0:	9b01      	ldr	r3, [sp, #4]
 800fbf2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fbf6:	b15b      	cbz	r3, 800fc10 <__smakebuf_r+0x70>
 800fbf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fbfc:	4630      	mov	r0, r6
 800fbfe:	f000 f82d 	bl	800fc5c <_isatty_r>
 800fc02:	b128      	cbz	r0, 800fc10 <__smakebuf_r+0x70>
 800fc04:	89a3      	ldrh	r3, [r4, #12]
 800fc06:	f023 0303 	bic.w	r3, r3, #3
 800fc0a:	f043 0301 	orr.w	r3, r3, #1
 800fc0e:	81a3      	strh	r3, [r4, #12]
 800fc10:	89a3      	ldrh	r3, [r4, #12]
 800fc12:	431d      	orrs	r5, r3
 800fc14:	81a5      	strh	r5, [r4, #12]
 800fc16:	e7cf      	b.n	800fbb8 <__smakebuf_r+0x18>

0800fc18 <_close_r>:
 800fc18:	b538      	push	{r3, r4, r5, lr}
 800fc1a:	4d06      	ldr	r5, [pc, #24]	@ (800fc34 <_close_r+0x1c>)
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	4604      	mov	r4, r0
 800fc20:	4608      	mov	r0, r1
 800fc22:	602b      	str	r3, [r5, #0]
 800fc24:	f7f9 fc0c 	bl	8009440 <_close>
 800fc28:	1c43      	adds	r3, r0, #1
 800fc2a:	d102      	bne.n	800fc32 <_close_r+0x1a>
 800fc2c:	682b      	ldr	r3, [r5, #0]
 800fc2e:	b103      	cbz	r3, 800fc32 <_close_r+0x1a>
 800fc30:	6023      	str	r3, [r4, #0]
 800fc32:	bd38      	pop	{r3, r4, r5, pc}
 800fc34:	20000844 	.word	0x20000844

0800fc38 <_fstat_r>:
 800fc38:	b538      	push	{r3, r4, r5, lr}
 800fc3a:	4d07      	ldr	r5, [pc, #28]	@ (800fc58 <_fstat_r+0x20>)
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	4604      	mov	r4, r0
 800fc40:	4608      	mov	r0, r1
 800fc42:	4611      	mov	r1, r2
 800fc44:	602b      	str	r3, [r5, #0]
 800fc46:	f7f9 fc07 	bl	8009458 <_fstat>
 800fc4a:	1c43      	adds	r3, r0, #1
 800fc4c:	d102      	bne.n	800fc54 <_fstat_r+0x1c>
 800fc4e:	682b      	ldr	r3, [r5, #0]
 800fc50:	b103      	cbz	r3, 800fc54 <_fstat_r+0x1c>
 800fc52:	6023      	str	r3, [r4, #0]
 800fc54:	bd38      	pop	{r3, r4, r5, pc}
 800fc56:	bf00      	nop
 800fc58:	20000844 	.word	0x20000844

0800fc5c <_isatty_r>:
 800fc5c:	b538      	push	{r3, r4, r5, lr}
 800fc5e:	4d06      	ldr	r5, [pc, #24]	@ (800fc78 <_isatty_r+0x1c>)
 800fc60:	2300      	movs	r3, #0
 800fc62:	4604      	mov	r4, r0
 800fc64:	4608      	mov	r0, r1
 800fc66:	602b      	str	r3, [r5, #0]
 800fc68:	f7f9 fc06 	bl	8009478 <_isatty>
 800fc6c:	1c43      	adds	r3, r0, #1
 800fc6e:	d102      	bne.n	800fc76 <_isatty_r+0x1a>
 800fc70:	682b      	ldr	r3, [r5, #0]
 800fc72:	b103      	cbz	r3, 800fc76 <_isatty_r+0x1a>
 800fc74:	6023      	str	r3, [r4, #0]
 800fc76:	bd38      	pop	{r3, r4, r5, pc}
 800fc78:	20000844 	.word	0x20000844

0800fc7c <_lseek_r>:
 800fc7c:	b538      	push	{r3, r4, r5, lr}
 800fc7e:	4d07      	ldr	r5, [pc, #28]	@ (800fc9c <_lseek_r+0x20>)
 800fc80:	4604      	mov	r4, r0
 800fc82:	4608      	mov	r0, r1
 800fc84:	4611      	mov	r1, r2
 800fc86:	2200      	movs	r2, #0
 800fc88:	602a      	str	r2, [r5, #0]
 800fc8a:	461a      	mov	r2, r3
 800fc8c:	f7f9 fbff 	bl	800948e <_lseek>
 800fc90:	1c43      	adds	r3, r0, #1
 800fc92:	d102      	bne.n	800fc9a <_lseek_r+0x1e>
 800fc94:	682b      	ldr	r3, [r5, #0]
 800fc96:	b103      	cbz	r3, 800fc9a <_lseek_r+0x1e>
 800fc98:	6023      	str	r3, [r4, #0]
 800fc9a:	bd38      	pop	{r3, r4, r5, pc}
 800fc9c:	20000844 	.word	0x20000844

0800fca0 <_raise_r>:
 800fca0:	291f      	cmp	r1, #31
 800fca2:	b538      	push	{r3, r4, r5, lr}
 800fca4:	4605      	mov	r5, r0
 800fca6:	460c      	mov	r4, r1
 800fca8:	d904      	bls.n	800fcb4 <_raise_r+0x14>
 800fcaa:	2316      	movs	r3, #22
 800fcac:	6003      	str	r3, [r0, #0]
 800fcae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fcb2:	bd38      	pop	{r3, r4, r5, pc}
 800fcb4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fcb6:	b112      	cbz	r2, 800fcbe <_raise_r+0x1e>
 800fcb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fcbc:	b94b      	cbnz	r3, 800fcd2 <_raise_r+0x32>
 800fcbe:	4628      	mov	r0, r5
 800fcc0:	f000 f842 	bl	800fd48 <_getpid_r>
 800fcc4:	4622      	mov	r2, r4
 800fcc6:	4601      	mov	r1, r0
 800fcc8:	4628      	mov	r0, r5
 800fcca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fcce:	f000 b829 	b.w	800fd24 <_kill_r>
 800fcd2:	2b01      	cmp	r3, #1
 800fcd4:	d00a      	beq.n	800fcec <_raise_r+0x4c>
 800fcd6:	1c59      	adds	r1, r3, #1
 800fcd8:	d103      	bne.n	800fce2 <_raise_r+0x42>
 800fcda:	2316      	movs	r3, #22
 800fcdc:	6003      	str	r3, [r0, #0]
 800fcde:	2001      	movs	r0, #1
 800fce0:	e7e7      	b.n	800fcb2 <_raise_r+0x12>
 800fce2:	2100      	movs	r1, #0
 800fce4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fce8:	4620      	mov	r0, r4
 800fcea:	4798      	blx	r3
 800fcec:	2000      	movs	r0, #0
 800fcee:	e7e0      	b.n	800fcb2 <_raise_r+0x12>

0800fcf0 <raise>:
 800fcf0:	4b02      	ldr	r3, [pc, #8]	@ (800fcfc <raise+0xc>)
 800fcf2:	4601      	mov	r1, r0
 800fcf4:	6818      	ldr	r0, [r3, #0]
 800fcf6:	f7ff bfd3 	b.w	800fca0 <_raise_r>
 800fcfa:	bf00      	nop
 800fcfc:	20000074 	.word	0x20000074

0800fd00 <_read_r>:
 800fd00:	b538      	push	{r3, r4, r5, lr}
 800fd02:	4d07      	ldr	r5, [pc, #28]	@ (800fd20 <_read_r+0x20>)
 800fd04:	4604      	mov	r4, r0
 800fd06:	4608      	mov	r0, r1
 800fd08:	4611      	mov	r1, r2
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	602a      	str	r2, [r5, #0]
 800fd0e:	461a      	mov	r2, r3
 800fd10:	f7f9 fb5d 	bl	80093ce <_read>
 800fd14:	1c43      	adds	r3, r0, #1
 800fd16:	d102      	bne.n	800fd1e <_read_r+0x1e>
 800fd18:	682b      	ldr	r3, [r5, #0]
 800fd1a:	b103      	cbz	r3, 800fd1e <_read_r+0x1e>
 800fd1c:	6023      	str	r3, [r4, #0]
 800fd1e:	bd38      	pop	{r3, r4, r5, pc}
 800fd20:	20000844 	.word	0x20000844

0800fd24 <_kill_r>:
 800fd24:	b538      	push	{r3, r4, r5, lr}
 800fd26:	4d07      	ldr	r5, [pc, #28]	@ (800fd44 <_kill_r+0x20>)
 800fd28:	2300      	movs	r3, #0
 800fd2a:	4604      	mov	r4, r0
 800fd2c:	4608      	mov	r0, r1
 800fd2e:	4611      	mov	r1, r2
 800fd30:	602b      	str	r3, [r5, #0]
 800fd32:	f7f9 fb31 	bl	8009398 <_kill>
 800fd36:	1c43      	adds	r3, r0, #1
 800fd38:	d102      	bne.n	800fd40 <_kill_r+0x1c>
 800fd3a:	682b      	ldr	r3, [r5, #0]
 800fd3c:	b103      	cbz	r3, 800fd40 <_kill_r+0x1c>
 800fd3e:	6023      	str	r3, [r4, #0]
 800fd40:	bd38      	pop	{r3, r4, r5, pc}
 800fd42:	bf00      	nop
 800fd44:	20000844 	.word	0x20000844

0800fd48 <_getpid_r>:
 800fd48:	f7f9 bb1e 	b.w	8009388 <_getpid>

0800fd4c <_sbrk_r>:
 800fd4c:	b538      	push	{r3, r4, r5, lr}
 800fd4e:	4d06      	ldr	r5, [pc, #24]	@ (800fd68 <_sbrk_r+0x1c>)
 800fd50:	2300      	movs	r3, #0
 800fd52:	4604      	mov	r4, r0
 800fd54:	4608      	mov	r0, r1
 800fd56:	602b      	str	r3, [r5, #0]
 800fd58:	f7f9 fba6 	bl	80094a8 <_sbrk>
 800fd5c:	1c43      	adds	r3, r0, #1
 800fd5e:	d102      	bne.n	800fd66 <_sbrk_r+0x1a>
 800fd60:	682b      	ldr	r3, [r5, #0]
 800fd62:	b103      	cbz	r3, 800fd66 <_sbrk_r+0x1a>
 800fd64:	6023      	str	r3, [r4, #0]
 800fd66:	bd38      	pop	{r3, r4, r5, pc}
 800fd68:	20000844 	.word	0x20000844

0800fd6c <_write_r>:
 800fd6c:	b538      	push	{r3, r4, r5, lr}
 800fd6e:	4d07      	ldr	r5, [pc, #28]	@ (800fd8c <_write_r+0x20>)
 800fd70:	4604      	mov	r4, r0
 800fd72:	4608      	mov	r0, r1
 800fd74:	4611      	mov	r1, r2
 800fd76:	2200      	movs	r2, #0
 800fd78:	602a      	str	r2, [r5, #0]
 800fd7a:	461a      	mov	r2, r3
 800fd7c:	f7f9 fb44 	bl	8009408 <_write>
 800fd80:	1c43      	adds	r3, r0, #1
 800fd82:	d102      	bne.n	800fd8a <_write_r+0x1e>
 800fd84:	682b      	ldr	r3, [r5, #0]
 800fd86:	b103      	cbz	r3, 800fd8a <_write_r+0x1e>
 800fd88:	6023      	str	r3, [r4, #0]
 800fd8a:	bd38      	pop	{r3, r4, r5, pc}
 800fd8c:	20000844 	.word	0x20000844

0800fd90 <print_e>:
 800fd90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd92:	b087      	sub	sp, #28
 800fd94:	461e      	mov	r6, r3
 800fd96:	ab04      	add	r3, sp, #16
 800fd98:	9301      	str	r3, [sp, #4]
 800fd9a:	ab03      	add	r3, sp, #12
 800fd9c:	9300      	str	r3, [sp, #0]
 800fd9e:	460c      	mov	r4, r1
 800fda0:	ab05      	add	r3, sp, #20
 800fda2:	2102      	movs	r1, #2
 800fda4:	4615      	mov	r5, r2
 800fda6:	3201      	adds	r2, #1
 800fda8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 800fdaa:	f000 f9b9 	bl	8010120 <_dtoa_r>
 800fdae:	9b05      	ldr	r3, [sp, #20]
 800fdb0:	f242 720f 	movw	r2, #9999	@ 0x270f
 800fdb4:	4293      	cmp	r3, r2
 800fdb6:	4601      	mov	r1, r0
 800fdb8:	d104      	bne.n	800fdc4 <print_e+0x34>
 800fdba:	4620      	mov	r0, r4
 800fdbc:	f000 f920 	bl	8010000 <strcpy>
 800fdc0:	b007      	add	sp, #28
 800fdc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdc4:	7802      	ldrb	r2, [r0, #0]
 800fdc6:	f804 2b01 	strb.w	r2, [r4], #1
 800fdca:	2d00      	cmp	r5, #0
 800fdcc:	bfc8      	it	gt
 800fdce:	2701      	movgt	r7, #1
 800fdd0:	222e      	movs	r2, #46	@ 0x2e
 800fdd2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fdd6:	b108      	cbz	r0, 800fddc <print_e+0x4c>
 800fdd8:	2d00      	cmp	r5, #0
 800fdda:	dc29      	bgt.n	800fe30 <print_e+0xa0>
 800fddc:	2e67      	cmp	r6, #103	@ 0x67
 800fdde:	d038      	beq.n	800fe52 <print_e+0xc2>
 800fde0:	2e47      	cmp	r6, #71	@ 0x47
 800fde2:	d038      	beq.n	800fe56 <print_e+0xc6>
 800fde4:	222e      	movs	r2, #46	@ 0x2e
 800fde6:	2130      	movs	r1, #48	@ 0x30
 800fde8:	2d00      	cmp	r5, #0
 800fdea:	dc2a      	bgt.n	800fe42 <print_e+0xb2>
 800fdec:	1e5a      	subs	r2, r3, #1
 800fdee:	2a00      	cmp	r2, #0
 800fdf0:	bfb8      	it	lt
 800fdf2:	f1c3 0301 	rsblt	r3, r3, #1
 800fdf6:	9205      	str	r2, [sp, #20]
 800fdf8:	bfaa      	itet	ge
 800fdfa:	232b      	movge	r3, #43	@ 0x2b
 800fdfc:	9305      	strlt	r3, [sp, #20]
 800fdfe:	7063      	strbge	r3, [r4, #1]
 800fe00:	9b05      	ldr	r3, [sp, #20]
 800fe02:	7026      	strb	r6, [r4, #0]
 800fe04:	bfbc      	itt	lt
 800fe06:	222d      	movlt	r2, #45	@ 0x2d
 800fe08:	7062      	strblt	r2, [r4, #1]
 800fe0a:	2b63      	cmp	r3, #99	@ 0x63
 800fe0c:	dc25      	bgt.n	800fe5a <print_e+0xca>
 800fe0e:	1ca1      	adds	r1, r4, #2
 800fe10:	9b05      	ldr	r3, [sp, #20]
 800fe12:	220a      	movs	r2, #10
 800fe14:	fb93 f2f2 	sdiv	r2, r3, r2
 800fe18:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 800fe1c:	7008      	strb	r0, [r1, #0]
 800fe1e:	f06f 0009 	mvn.w	r0, #9
 800fe22:	fb00 3302 	mla	r3, r0, r2, r3
 800fe26:	3330      	adds	r3, #48	@ 0x30
 800fe28:	704b      	strb	r3, [r1, #1]
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	708b      	strb	r3, [r1, #2]
 800fe2e:	e7c7      	b.n	800fdc0 <print_e+0x30>
 800fe30:	b10f      	cbz	r7, 800fe36 <print_e+0xa6>
 800fe32:	f804 2b01 	strb.w	r2, [r4], #1
 800fe36:	7808      	ldrb	r0, [r1, #0]
 800fe38:	f804 0b01 	strb.w	r0, [r4], #1
 800fe3c:	3d01      	subs	r5, #1
 800fe3e:	2700      	movs	r7, #0
 800fe40:	e7c7      	b.n	800fdd2 <print_e+0x42>
 800fe42:	b10f      	cbz	r7, 800fe48 <print_e+0xb8>
 800fe44:	f804 2b01 	strb.w	r2, [r4], #1
 800fe48:	f804 1b01 	strb.w	r1, [r4], #1
 800fe4c:	3d01      	subs	r5, #1
 800fe4e:	2700      	movs	r7, #0
 800fe50:	e7ca      	b.n	800fde8 <print_e+0x58>
 800fe52:	2665      	movs	r6, #101	@ 0x65
 800fe54:	e7ca      	b.n	800fdec <print_e+0x5c>
 800fe56:	2645      	movs	r6, #69	@ 0x45
 800fe58:	e7c8      	b.n	800fdec <print_e+0x5c>
 800fe5a:	2264      	movs	r2, #100	@ 0x64
 800fe5c:	fb93 f2f2 	sdiv	r2, r3, r2
 800fe60:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 800fe64:	70a0      	strb	r0, [r4, #2]
 800fe66:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 800fe6a:	fb00 3302 	mla	r3, r0, r2, r3
 800fe6e:	1ce1      	adds	r1, r4, #3
 800fe70:	9305      	str	r3, [sp, #20]
 800fe72:	e7cd      	b.n	800fe10 <print_e+0x80>
 800fe74:	0000      	movs	r0, r0
	...

0800fe78 <_gcvt>:
 800fe78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe7c:	ec59 8b10 	vmov	r8, r9, d0
 800fe80:	b086      	sub	sp, #24
 800fe82:	4605      	mov	r5, r0
 800fe84:	460c      	mov	r4, r1
 800fe86:	4616      	mov	r6, r2
 800fe88:	469a      	mov	sl, r3
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	4640      	mov	r0, r8
 800fe90:	4649      	mov	r1, r9
 800fe92:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 800fe94:	f7f0 fe1a 	bl	8000acc <__aeabi_dcmplt>
 800fe98:	b110      	cbz	r0, 800fea0 <_gcvt+0x28>
 800fe9a:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800fe9e:	4699      	mov	r9, r3
 800fea0:	2200      	movs	r2, #0
 800fea2:	2300      	movs	r3, #0
 800fea4:	4640      	mov	r0, r8
 800fea6:	4649      	mov	r1, r9
 800fea8:	f7f0 fe06 	bl	8000ab8 <__aeabi_dcmpeq>
 800feac:	b138      	cbz	r0, 800febe <_gcvt+0x46>
 800feae:	2330      	movs	r3, #48	@ 0x30
 800feb0:	7033      	strb	r3, [r6, #0]
 800feb2:	2300      	movs	r3, #0
 800feb4:	7073      	strb	r3, [r6, #1]
 800feb6:	4630      	mov	r0, r6
 800feb8:	b006      	add	sp, #24
 800feba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800febe:	a34e      	add	r3, pc, #312	@ (adr r3, 800fff8 <_gcvt+0x180>)
 800fec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fec4:	4640      	mov	r0, r8
 800fec6:	4649      	mov	r1, r9
 800fec8:	f7f0 fe0a 	bl	8000ae0 <__aeabi_dcmple>
 800fecc:	b148      	cbz	r0, 800fee2 <_gcvt+0x6a>
 800fece:	ec49 8b10 	vmov	d0, r8, r9
 800fed2:	9700      	str	r7, [sp, #0]
 800fed4:	4653      	mov	r3, sl
 800fed6:	1e62      	subs	r2, r4, #1
 800fed8:	4631      	mov	r1, r6
 800feda:	4628      	mov	r0, r5
 800fedc:	f7ff ff58 	bl	800fd90 <print_e>
 800fee0:	e7e9      	b.n	800feb6 <_gcvt+0x3e>
 800fee2:	4620      	mov	r0, r4
 800fee4:	f001 fab4 	bl	8011450 <_mprec_log10>
 800fee8:	4642      	mov	r2, r8
 800feea:	ec51 0b10 	vmov	r0, r1, d0
 800feee:	464b      	mov	r3, r9
 800fef0:	f7f0 fdf6 	bl	8000ae0 <__aeabi_dcmple>
 800fef4:	2800      	cmp	r0, #0
 800fef6:	d1ea      	bne.n	800fece <_gcvt+0x56>
 800fef8:	ab05      	add	r3, sp, #20
 800fefa:	9301      	str	r3, [sp, #4]
 800fefc:	ab04      	add	r3, sp, #16
 800fefe:	9300      	str	r3, [sp, #0]
 800ff00:	4622      	mov	r2, r4
 800ff02:	ab03      	add	r3, sp, #12
 800ff04:	2102      	movs	r1, #2
 800ff06:	ec49 8b10 	vmov	d0, r8, r9
 800ff0a:	4628      	mov	r0, r5
 800ff0c:	f000 f908 	bl	8010120 <_dtoa_r>
 800ff10:	9a03      	ldr	r2, [sp, #12]
 800ff12:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ff16:	429a      	cmp	r2, r3
 800ff18:	4601      	mov	r1, r0
 800ff1a:	d00e      	beq.n	800ff3a <_gcvt+0xc2>
 800ff1c:	4633      	mov	r3, r6
 800ff1e:	4608      	mov	r0, r1
 800ff20:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ff24:	9d03      	ldr	r5, [sp, #12]
 800ff26:	b10a      	cbz	r2, 800ff2c <_gcvt+0xb4>
 800ff28:	2d00      	cmp	r5, #0
 800ff2a:	dc0a      	bgt.n	800ff42 <_gcvt+0xca>
 800ff2c:	1931      	adds	r1, r6, r4
 800ff2e:	1ac9      	subs	r1, r1, r3
 800ff30:	462c      	mov	r4, r5
 800ff32:	2200      	movs	r2, #0
 800ff34:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 800ff38:	e00c      	b.n	800ff54 <_gcvt+0xdc>
 800ff3a:	4630      	mov	r0, r6
 800ff3c:	f000 f860 	bl	8010000 <strcpy>
 800ff40:	e7b9      	b.n	800feb6 <_gcvt+0x3e>
 800ff42:	3d01      	subs	r5, #1
 800ff44:	f803 2b01 	strb.w	r2, [r3], #1
 800ff48:	9503      	str	r5, [sp, #12]
 800ff4a:	e7e8      	b.n	800ff1e <_gcvt+0xa6>
 800ff4c:	f803 cb01 	strb.w	ip, [r3], #1
 800ff50:	3901      	subs	r1, #1
 800ff52:	2201      	movs	r2, #1
 800ff54:	2c00      	cmp	r4, #0
 800ff56:	4625      	mov	r5, r4
 800ff58:	dc2e      	bgt.n	800ffb8 <_gcvt+0x140>
 800ff5a:	b102      	cbz	r2, 800ff5e <_gcvt+0xe6>
 800ff5c:	9403      	str	r4, [sp, #12]
 800ff5e:	b90f      	cbnz	r7, 800ff64 <_gcvt+0xec>
 800ff60:	7802      	ldrb	r2, [r0, #0]
 800ff62:	b332      	cbz	r2, 800ffb2 <_gcvt+0x13a>
 800ff64:	42b3      	cmp	r3, r6
 800ff66:	bf04      	itt	eq
 800ff68:	2230      	moveq	r2, #48	@ 0x30
 800ff6a:	f803 2b01 	strbeq.w	r2, [r3], #1
 800ff6e:	222e      	movs	r2, #46	@ 0x2e
 800ff70:	701a      	strb	r2, [r3, #0]
 800ff72:	9a03      	ldr	r2, [sp, #12]
 800ff74:	461c      	mov	r4, r3
 800ff76:	f04f 0c00 	mov.w	ip, #0
 800ff7a:	1ad5      	subs	r5, r2, r3
 800ff7c:	f04f 0e30 	mov.w	lr, #48	@ 0x30
 800ff80:	42e5      	cmn	r5, r4
 800ff82:	d421      	bmi.n	800ffc8 <_gcvt+0x150>
 800ff84:	2a00      	cmp	r2, #0
 800ff86:	f1c2 0400 	rsb	r4, r2, #0
 800ff8a:	bfd4      	ite	le
 800ff8c:	4625      	movle	r5, r4
 800ff8e:	2500      	movgt	r5, #0
 800ff90:	3501      	adds	r5, #1
 800ff92:	442b      	add	r3, r5
 800ff94:	f1bc 0f00 	cmp.w	ip, #0
 800ff98:	d004      	beq.n	800ffa4 <_gcvt+0x12c>
 800ff9a:	2a00      	cmp	r2, #0
 800ff9c:	bfc8      	it	gt
 800ff9e:	2400      	movgt	r4, #0
 800ffa0:	4422      	add	r2, r4
 800ffa2:	9203      	str	r2, [sp, #12]
 800ffa4:	1e42      	subs	r2, r0, #1
 800ffa6:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800ffaa:	b108      	cbz	r0, 800ffb0 <_gcvt+0x138>
 800ffac:	2900      	cmp	r1, #0
 800ffae:	dc10      	bgt.n	800ffd2 <_gcvt+0x15a>
 800ffb0:	b9e7      	cbnz	r7, 800ffec <_gcvt+0x174>
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	701a      	strb	r2, [r3, #0]
 800ffb6:	e77e      	b.n	800feb6 <_gcvt+0x3e>
 800ffb8:	2900      	cmp	r1, #0
 800ffba:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800ffbe:	dcc5      	bgt.n	800ff4c <_gcvt+0xd4>
 800ffc0:	2a00      	cmp	r2, #0
 800ffc2:	d0cc      	beq.n	800ff5e <_gcvt+0xe6>
 800ffc4:	9503      	str	r5, [sp, #12]
 800ffc6:	e7ca      	b.n	800ff5e <_gcvt+0xe6>
 800ffc8:	f804 ef01 	strb.w	lr, [r4, #1]!
 800ffcc:	f04f 0c01 	mov.w	ip, #1
 800ffd0:	e7d6      	b.n	800ff80 <_gcvt+0x108>
 800ffd2:	f803 0b01 	strb.w	r0, [r3], #1
 800ffd6:	3901      	subs	r1, #1
 800ffd8:	e7e5      	b.n	800ffa6 <_gcvt+0x12e>
 800ffda:	f802 5b01 	strb.w	r5, [r2], #1
 800ffde:	1aa0      	subs	r0, r4, r2
 800ffe0:	2800      	cmp	r0, #0
 800ffe2:	dcfa      	bgt.n	800ffda <_gcvt+0x162>
 800ffe4:	2900      	cmp	r1, #0
 800ffe6:	bfa8      	it	ge
 800ffe8:	185b      	addge	r3, r3, r1
 800ffea:	e7e2      	b.n	800ffb2 <_gcvt+0x13a>
 800ffec:	461a      	mov	r2, r3
 800ffee:	185c      	adds	r4, r3, r1
 800fff0:	2530      	movs	r5, #48	@ 0x30
 800fff2:	e7f4      	b.n	800ffde <_gcvt+0x166>
 800fff4:	f3af 8000 	nop.w
 800fff8:	eb1c432d 	.word	0xeb1c432d
 800fffc:	3f1a36e2 	.word	0x3f1a36e2

08010000 <strcpy>:
 8010000:	4603      	mov	r3, r0
 8010002:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010006:	f803 2b01 	strb.w	r2, [r3], #1
 801000a:	2a00      	cmp	r2, #0
 801000c:	d1f9      	bne.n	8010002 <strcpy+0x2>
 801000e:	4770      	bx	lr

08010010 <quorem>:
 8010010:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010014:	6903      	ldr	r3, [r0, #16]
 8010016:	690c      	ldr	r4, [r1, #16]
 8010018:	42a3      	cmp	r3, r4
 801001a:	4607      	mov	r7, r0
 801001c:	db7e      	blt.n	801011c <quorem+0x10c>
 801001e:	3c01      	subs	r4, #1
 8010020:	f101 0814 	add.w	r8, r1, #20
 8010024:	00a3      	lsls	r3, r4, #2
 8010026:	f100 0514 	add.w	r5, r0, #20
 801002a:	9300      	str	r3, [sp, #0]
 801002c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010030:	9301      	str	r3, [sp, #4]
 8010032:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010036:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801003a:	3301      	adds	r3, #1
 801003c:	429a      	cmp	r2, r3
 801003e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010042:	fbb2 f6f3 	udiv	r6, r2, r3
 8010046:	d32e      	bcc.n	80100a6 <quorem+0x96>
 8010048:	f04f 0a00 	mov.w	sl, #0
 801004c:	46c4      	mov	ip, r8
 801004e:	46ae      	mov	lr, r5
 8010050:	46d3      	mov	fp, sl
 8010052:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010056:	b298      	uxth	r0, r3
 8010058:	fb06 a000 	mla	r0, r6, r0, sl
 801005c:	0c02      	lsrs	r2, r0, #16
 801005e:	0c1b      	lsrs	r3, r3, #16
 8010060:	fb06 2303 	mla	r3, r6, r3, r2
 8010064:	f8de 2000 	ldr.w	r2, [lr]
 8010068:	b280      	uxth	r0, r0
 801006a:	b292      	uxth	r2, r2
 801006c:	1a12      	subs	r2, r2, r0
 801006e:	445a      	add	r2, fp
 8010070:	f8de 0000 	ldr.w	r0, [lr]
 8010074:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010078:	b29b      	uxth	r3, r3
 801007a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801007e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010082:	b292      	uxth	r2, r2
 8010084:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010088:	45e1      	cmp	r9, ip
 801008a:	f84e 2b04 	str.w	r2, [lr], #4
 801008e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010092:	d2de      	bcs.n	8010052 <quorem+0x42>
 8010094:	9b00      	ldr	r3, [sp, #0]
 8010096:	58eb      	ldr	r3, [r5, r3]
 8010098:	b92b      	cbnz	r3, 80100a6 <quorem+0x96>
 801009a:	9b01      	ldr	r3, [sp, #4]
 801009c:	3b04      	subs	r3, #4
 801009e:	429d      	cmp	r5, r3
 80100a0:	461a      	mov	r2, r3
 80100a2:	d32f      	bcc.n	8010104 <quorem+0xf4>
 80100a4:	613c      	str	r4, [r7, #16]
 80100a6:	4638      	mov	r0, r7
 80100a8:	f001 f8ca 	bl	8011240 <__mcmp>
 80100ac:	2800      	cmp	r0, #0
 80100ae:	db25      	blt.n	80100fc <quorem+0xec>
 80100b0:	4629      	mov	r1, r5
 80100b2:	2000      	movs	r0, #0
 80100b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80100b8:	f8d1 c000 	ldr.w	ip, [r1]
 80100bc:	fa1f fe82 	uxth.w	lr, r2
 80100c0:	fa1f f38c 	uxth.w	r3, ip
 80100c4:	eba3 030e 	sub.w	r3, r3, lr
 80100c8:	4403      	add	r3, r0
 80100ca:	0c12      	lsrs	r2, r2, #16
 80100cc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80100d0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80100d4:	b29b      	uxth	r3, r3
 80100d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80100da:	45c1      	cmp	r9, r8
 80100dc:	f841 3b04 	str.w	r3, [r1], #4
 80100e0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80100e4:	d2e6      	bcs.n	80100b4 <quorem+0xa4>
 80100e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80100ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80100ee:	b922      	cbnz	r2, 80100fa <quorem+0xea>
 80100f0:	3b04      	subs	r3, #4
 80100f2:	429d      	cmp	r5, r3
 80100f4:	461a      	mov	r2, r3
 80100f6:	d30b      	bcc.n	8010110 <quorem+0x100>
 80100f8:	613c      	str	r4, [r7, #16]
 80100fa:	3601      	adds	r6, #1
 80100fc:	4630      	mov	r0, r6
 80100fe:	b003      	add	sp, #12
 8010100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010104:	6812      	ldr	r2, [r2, #0]
 8010106:	3b04      	subs	r3, #4
 8010108:	2a00      	cmp	r2, #0
 801010a:	d1cb      	bne.n	80100a4 <quorem+0x94>
 801010c:	3c01      	subs	r4, #1
 801010e:	e7c6      	b.n	801009e <quorem+0x8e>
 8010110:	6812      	ldr	r2, [r2, #0]
 8010112:	3b04      	subs	r3, #4
 8010114:	2a00      	cmp	r2, #0
 8010116:	d1ef      	bne.n	80100f8 <quorem+0xe8>
 8010118:	3c01      	subs	r4, #1
 801011a:	e7ea      	b.n	80100f2 <quorem+0xe2>
 801011c:	2000      	movs	r0, #0
 801011e:	e7ee      	b.n	80100fe <quorem+0xee>

08010120 <_dtoa_r>:
 8010120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010124:	69c7      	ldr	r7, [r0, #28]
 8010126:	b099      	sub	sp, #100	@ 0x64
 8010128:	ed8d 0b02 	vstr	d0, [sp, #8]
 801012c:	ec55 4b10 	vmov	r4, r5, d0
 8010130:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8010132:	9109      	str	r1, [sp, #36]	@ 0x24
 8010134:	4683      	mov	fp, r0
 8010136:	920e      	str	r2, [sp, #56]	@ 0x38
 8010138:	9313      	str	r3, [sp, #76]	@ 0x4c
 801013a:	b97f      	cbnz	r7, 801015c <_dtoa_r+0x3c>
 801013c:	2010      	movs	r0, #16
 801013e:	f000 fdfd 	bl	8010d3c <malloc>
 8010142:	4602      	mov	r2, r0
 8010144:	f8cb 001c 	str.w	r0, [fp, #28]
 8010148:	b920      	cbnz	r0, 8010154 <_dtoa_r+0x34>
 801014a:	4ba7      	ldr	r3, [pc, #668]	@ (80103e8 <_dtoa_r+0x2c8>)
 801014c:	21ef      	movs	r1, #239	@ 0xef
 801014e:	48a7      	ldr	r0, [pc, #668]	@ (80103ec <_dtoa_r+0x2cc>)
 8010150:	f7fe fe96 	bl	800ee80 <__assert_func>
 8010154:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010158:	6007      	str	r7, [r0, #0]
 801015a:	60c7      	str	r7, [r0, #12]
 801015c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010160:	6819      	ldr	r1, [r3, #0]
 8010162:	b159      	cbz	r1, 801017c <_dtoa_r+0x5c>
 8010164:	685a      	ldr	r2, [r3, #4]
 8010166:	604a      	str	r2, [r1, #4]
 8010168:	2301      	movs	r3, #1
 801016a:	4093      	lsls	r3, r2
 801016c:	608b      	str	r3, [r1, #8]
 801016e:	4658      	mov	r0, fp
 8010170:	f000 fe2c 	bl	8010dcc <_Bfree>
 8010174:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010178:	2200      	movs	r2, #0
 801017a:	601a      	str	r2, [r3, #0]
 801017c:	1e2b      	subs	r3, r5, #0
 801017e:	bfb9      	ittee	lt
 8010180:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010184:	9303      	strlt	r3, [sp, #12]
 8010186:	2300      	movge	r3, #0
 8010188:	6033      	strge	r3, [r6, #0]
 801018a:	9f03      	ldr	r7, [sp, #12]
 801018c:	4b98      	ldr	r3, [pc, #608]	@ (80103f0 <_dtoa_r+0x2d0>)
 801018e:	bfbc      	itt	lt
 8010190:	2201      	movlt	r2, #1
 8010192:	6032      	strlt	r2, [r6, #0]
 8010194:	43bb      	bics	r3, r7
 8010196:	d112      	bne.n	80101be <_dtoa_r+0x9e>
 8010198:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801019a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801019e:	6013      	str	r3, [r2, #0]
 80101a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80101a4:	4323      	orrs	r3, r4
 80101a6:	f000 854d 	beq.w	8010c44 <_dtoa_r+0xb24>
 80101aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80101ac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8010404 <_dtoa_r+0x2e4>
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	f000 854f 	beq.w	8010c54 <_dtoa_r+0xb34>
 80101b6:	f10a 0303 	add.w	r3, sl, #3
 80101ba:	f000 bd49 	b.w	8010c50 <_dtoa_r+0xb30>
 80101be:	ed9d 7b02 	vldr	d7, [sp, #8]
 80101c2:	2200      	movs	r2, #0
 80101c4:	ec51 0b17 	vmov	r0, r1, d7
 80101c8:	2300      	movs	r3, #0
 80101ca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80101ce:	f7f0 fc73 	bl	8000ab8 <__aeabi_dcmpeq>
 80101d2:	4680      	mov	r8, r0
 80101d4:	b158      	cbz	r0, 80101ee <_dtoa_r+0xce>
 80101d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80101d8:	2301      	movs	r3, #1
 80101da:	6013      	str	r3, [r2, #0]
 80101dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80101de:	b113      	cbz	r3, 80101e6 <_dtoa_r+0xc6>
 80101e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80101e2:	4b84      	ldr	r3, [pc, #528]	@ (80103f4 <_dtoa_r+0x2d4>)
 80101e4:	6013      	str	r3, [r2, #0]
 80101e6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8010408 <_dtoa_r+0x2e8>
 80101ea:	f000 bd33 	b.w	8010c54 <_dtoa_r+0xb34>
 80101ee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80101f2:	aa16      	add	r2, sp, #88	@ 0x58
 80101f4:	a917      	add	r1, sp, #92	@ 0x5c
 80101f6:	4658      	mov	r0, fp
 80101f8:	f001 f8d2 	bl	80113a0 <__d2b>
 80101fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010200:	4681      	mov	r9, r0
 8010202:	2e00      	cmp	r6, #0
 8010204:	d077      	beq.n	80102f6 <_dtoa_r+0x1d6>
 8010206:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010208:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801020c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010210:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010214:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010218:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801021c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010220:	4619      	mov	r1, r3
 8010222:	2200      	movs	r2, #0
 8010224:	4b74      	ldr	r3, [pc, #464]	@ (80103f8 <_dtoa_r+0x2d8>)
 8010226:	f7f0 f827 	bl	8000278 <__aeabi_dsub>
 801022a:	a369      	add	r3, pc, #420	@ (adr r3, 80103d0 <_dtoa_r+0x2b0>)
 801022c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010230:	f7f0 f9da 	bl	80005e8 <__aeabi_dmul>
 8010234:	a368      	add	r3, pc, #416	@ (adr r3, 80103d8 <_dtoa_r+0x2b8>)
 8010236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801023a:	f7f0 f81f 	bl	800027c <__adddf3>
 801023e:	4604      	mov	r4, r0
 8010240:	4630      	mov	r0, r6
 8010242:	460d      	mov	r5, r1
 8010244:	f7f0 f966 	bl	8000514 <__aeabi_i2d>
 8010248:	a365      	add	r3, pc, #404	@ (adr r3, 80103e0 <_dtoa_r+0x2c0>)
 801024a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801024e:	f7f0 f9cb 	bl	80005e8 <__aeabi_dmul>
 8010252:	4602      	mov	r2, r0
 8010254:	460b      	mov	r3, r1
 8010256:	4620      	mov	r0, r4
 8010258:	4629      	mov	r1, r5
 801025a:	f7f0 f80f 	bl	800027c <__adddf3>
 801025e:	4604      	mov	r4, r0
 8010260:	460d      	mov	r5, r1
 8010262:	f7f0 fc5b 	bl	8000b1c <__aeabi_d2iz>
 8010266:	2200      	movs	r2, #0
 8010268:	4607      	mov	r7, r0
 801026a:	2300      	movs	r3, #0
 801026c:	4620      	mov	r0, r4
 801026e:	4629      	mov	r1, r5
 8010270:	f7f0 fc2c 	bl	8000acc <__aeabi_dcmplt>
 8010274:	b140      	cbz	r0, 8010288 <_dtoa_r+0x168>
 8010276:	4638      	mov	r0, r7
 8010278:	f7f0 f94c 	bl	8000514 <__aeabi_i2d>
 801027c:	4622      	mov	r2, r4
 801027e:	462b      	mov	r3, r5
 8010280:	f7f0 fc1a 	bl	8000ab8 <__aeabi_dcmpeq>
 8010284:	b900      	cbnz	r0, 8010288 <_dtoa_r+0x168>
 8010286:	3f01      	subs	r7, #1
 8010288:	2f16      	cmp	r7, #22
 801028a:	d851      	bhi.n	8010330 <_dtoa_r+0x210>
 801028c:	4b5b      	ldr	r3, [pc, #364]	@ (80103fc <_dtoa_r+0x2dc>)
 801028e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010296:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801029a:	f7f0 fc17 	bl	8000acc <__aeabi_dcmplt>
 801029e:	2800      	cmp	r0, #0
 80102a0:	d048      	beq.n	8010334 <_dtoa_r+0x214>
 80102a2:	3f01      	subs	r7, #1
 80102a4:	2300      	movs	r3, #0
 80102a6:	9312      	str	r3, [sp, #72]	@ 0x48
 80102a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80102aa:	1b9b      	subs	r3, r3, r6
 80102ac:	1e5a      	subs	r2, r3, #1
 80102ae:	bf44      	itt	mi
 80102b0:	f1c3 0801 	rsbmi	r8, r3, #1
 80102b4:	2300      	movmi	r3, #0
 80102b6:	9208      	str	r2, [sp, #32]
 80102b8:	bf54      	ite	pl
 80102ba:	f04f 0800 	movpl.w	r8, #0
 80102be:	9308      	strmi	r3, [sp, #32]
 80102c0:	2f00      	cmp	r7, #0
 80102c2:	db39      	blt.n	8010338 <_dtoa_r+0x218>
 80102c4:	9b08      	ldr	r3, [sp, #32]
 80102c6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80102c8:	443b      	add	r3, r7
 80102ca:	9308      	str	r3, [sp, #32]
 80102cc:	2300      	movs	r3, #0
 80102ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80102d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102d2:	2b09      	cmp	r3, #9
 80102d4:	d864      	bhi.n	80103a0 <_dtoa_r+0x280>
 80102d6:	2b05      	cmp	r3, #5
 80102d8:	bfc4      	itt	gt
 80102da:	3b04      	subgt	r3, #4
 80102dc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80102de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102e0:	f1a3 0302 	sub.w	r3, r3, #2
 80102e4:	bfcc      	ite	gt
 80102e6:	2400      	movgt	r4, #0
 80102e8:	2401      	movle	r4, #1
 80102ea:	2b03      	cmp	r3, #3
 80102ec:	d863      	bhi.n	80103b6 <_dtoa_r+0x296>
 80102ee:	e8df f003 	tbb	[pc, r3]
 80102f2:	372a      	.short	0x372a
 80102f4:	5535      	.short	0x5535
 80102f6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80102fa:	441e      	add	r6, r3
 80102fc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010300:	2b20      	cmp	r3, #32
 8010302:	bfc1      	itttt	gt
 8010304:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010308:	409f      	lslgt	r7, r3
 801030a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801030e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010312:	bfd6      	itet	le
 8010314:	f1c3 0320 	rsble	r3, r3, #32
 8010318:	ea47 0003 	orrgt.w	r0, r7, r3
 801031c:	fa04 f003 	lslle.w	r0, r4, r3
 8010320:	f7f0 f8e8 	bl	80004f4 <__aeabi_ui2d>
 8010324:	2201      	movs	r2, #1
 8010326:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801032a:	3e01      	subs	r6, #1
 801032c:	9214      	str	r2, [sp, #80]	@ 0x50
 801032e:	e777      	b.n	8010220 <_dtoa_r+0x100>
 8010330:	2301      	movs	r3, #1
 8010332:	e7b8      	b.n	80102a6 <_dtoa_r+0x186>
 8010334:	9012      	str	r0, [sp, #72]	@ 0x48
 8010336:	e7b7      	b.n	80102a8 <_dtoa_r+0x188>
 8010338:	427b      	negs	r3, r7
 801033a:	930a      	str	r3, [sp, #40]	@ 0x28
 801033c:	2300      	movs	r3, #0
 801033e:	eba8 0807 	sub.w	r8, r8, r7
 8010342:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010344:	e7c4      	b.n	80102d0 <_dtoa_r+0x1b0>
 8010346:	2300      	movs	r3, #0
 8010348:	930b      	str	r3, [sp, #44]	@ 0x2c
 801034a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801034c:	2b00      	cmp	r3, #0
 801034e:	dc35      	bgt.n	80103bc <_dtoa_r+0x29c>
 8010350:	2301      	movs	r3, #1
 8010352:	9300      	str	r3, [sp, #0]
 8010354:	9307      	str	r3, [sp, #28]
 8010356:	461a      	mov	r2, r3
 8010358:	920e      	str	r2, [sp, #56]	@ 0x38
 801035a:	e00b      	b.n	8010374 <_dtoa_r+0x254>
 801035c:	2301      	movs	r3, #1
 801035e:	e7f3      	b.n	8010348 <_dtoa_r+0x228>
 8010360:	2300      	movs	r3, #0
 8010362:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010364:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010366:	18fb      	adds	r3, r7, r3
 8010368:	9300      	str	r3, [sp, #0]
 801036a:	3301      	adds	r3, #1
 801036c:	2b01      	cmp	r3, #1
 801036e:	9307      	str	r3, [sp, #28]
 8010370:	bfb8      	it	lt
 8010372:	2301      	movlt	r3, #1
 8010374:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010378:	2100      	movs	r1, #0
 801037a:	2204      	movs	r2, #4
 801037c:	f102 0514 	add.w	r5, r2, #20
 8010380:	429d      	cmp	r5, r3
 8010382:	d91f      	bls.n	80103c4 <_dtoa_r+0x2a4>
 8010384:	6041      	str	r1, [r0, #4]
 8010386:	4658      	mov	r0, fp
 8010388:	f000 fce0 	bl	8010d4c <_Balloc>
 801038c:	4682      	mov	sl, r0
 801038e:	2800      	cmp	r0, #0
 8010390:	d13c      	bne.n	801040c <_dtoa_r+0x2ec>
 8010392:	4b1b      	ldr	r3, [pc, #108]	@ (8010400 <_dtoa_r+0x2e0>)
 8010394:	4602      	mov	r2, r0
 8010396:	f240 11af 	movw	r1, #431	@ 0x1af
 801039a:	e6d8      	b.n	801014e <_dtoa_r+0x2e>
 801039c:	2301      	movs	r3, #1
 801039e:	e7e0      	b.n	8010362 <_dtoa_r+0x242>
 80103a0:	2401      	movs	r4, #1
 80103a2:	2300      	movs	r3, #0
 80103a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80103a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80103a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80103ac:	9300      	str	r3, [sp, #0]
 80103ae:	9307      	str	r3, [sp, #28]
 80103b0:	2200      	movs	r2, #0
 80103b2:	2312      	movs	r3, #18
 80103b4:	e7d0      	b.n	8010358 <_dtoa_r+0x238>
 80103b6:	2301      	movs	r3, #1
 80103b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80103ba:	e7f5      	b.n	80103a8 <_dtoa_r+0x288>
 80103bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80103be:	9300      	str	r3, [sp, #0]
 80103c0:	9307      	str	r3, [sp, #28]
 80103c2:	e7d7      	b.n	8010374 <_dtoa_r+0x254>
 80103c4:	3101      	adds	r1, #1
 80103c6:	0052      	lsls	r2, r2, #1
 80103c8:	e7d8      	b.n	801037c <_dtoa_r+0x25c>
 80103ca:	bf00      	nop
 80103cc:	f3af 8000 	nop.w
 80103d0:	636f4361 	.word	0x636f4361
 80103d4:	3fd287a7 	.word	0x3fd287a7
 80103d8:	8b60c8b3 	.word	0x8b60c8b3
 80103dc:	3fc68a28 	.word	0x3fc68a28
 80103e0:	509f79fb 	.word	0x509f79fb
 80103e4:	3fd34413 	.word	0x3fd34413
 80103e8:	08012ed6 	.word	0x08012ed6
 80103ec:	08012eed 	.word	0x08012eed
 80103f0:	7ff00000 	.word	0x7ff00000
 80103f4:	08012ed5 	.word	0x08012ed5
 80103f8:	3ff80000 	.word	0x3ff80000
 80103fc:	08012fe8 	.word	0x08012fe8
 8010400:	08012f45 	.word	0x08012f45
 8010404:	08012ed0 	.word	0x08012ed0
 8010408:	08012ed4 	.word	0x08012ed4
 801040c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010410:	6018      	str	r0, [r3, #0]
 8010412:	9b07      	ldr	r3, [sp, #28]
 8010414:	2b0e      	cmp	r3, #14
 8010416:	f200 80a4 	bhi.w	8010562 <_dtoa_r+0x442>
 801041a:	2c00      	cmp	r4, #0
 801041c:	f000 80a1 	beq.w	8010562 <_dtoa_r+0x442>
 8010420:	2f00      	cmp	r7, #0
 8010422:	dd33      	ble.n	801048c <_dtoa_r+0x36c>
 8010424:	4bad      	ldr	r3, [pc, #692]	@ (80106dc <_dtoa_r+0x5bc>)
 8010426:	f007 020f 	and.w	r2, r7, #15
 801042a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801042e:	ed93 7b00 	vldr	d7, [r3]
 8010432:	05f8      	lsls	r0, r7, #23
 8010434:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010438:	ea4f 1427 	mov.w	r4, r7, asr #4
 801043c:	d516      	bpl.n	801046c <_dtoa_r+0x34c>
 801043e:	4ba8      	ldr	r3, [pc, #672]	@ (80106e0 <_dtoa_r+0x5c0>)
 8010440:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010444:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010448:	f7f0 f9f8 	bl	800083c <__aeabi_ddiv>
 801044c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010450:	f004 040f 	and.w	r4, r4, #15
 8010454:	2603      	movs	r6, #3
 8010456:	4da2      	ldr	r5, [pc, #648]	@ (80106e0 <_dtoa_r+0x5c0>)
 8010458:	b954      	cbnz	r4, 8010470 <_dtoa_r+0x350>
 801045a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801045e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010462:	f7f0 f9eb 	bl	800083c <__aeabi_ddiv>
 8010466:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801046a:	e028      	b.n	80104be <_dtoa_r+0x39e>
 801046c:	2602      	movs	r6, #2
 801046e:	e7f2      	b.n	8010456 <_dtoa_r+0x336>
 8010470:	07e1      	lsls	r1, r4, #31
 8010472:	d508      	bpl.n	8010486 <_dtoa_r+0x366>
 8010474:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010478:	e9d5 2300 	ldrd	r2, r3, [r5]
 801047c:	f7f0 f8b4 	bl	80005e8 <__aeabi_dmul>
 8010480:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010484:	3601      	adds	r6, #1
 8010486:	1064      	asrs	r4, r4, #1
 8010488:	3508      	adds	r5, #8
 801048a:	e7e5      	b.n	8010458 <_dtoa_r+0x338>
 801048c:	f000 80d2 	beq.w	8010634 <_dtoa_r+0x514>
 8010490:	427c      	negs	r4, r7
 8010492:	4b92      	ldr	r3, [pc, #584]	@ (80106dc <_dtoa_r+0x5bc>)
 8010494:	4d92      	ldr	r5, [pc, #584]	@ (80106e0 <_dtoa_r+0x5c0>)
 8010496:	f004 020f 	and.w	r2, r4, #15
 801049a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801049e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80104a6:	f7f0 f89f 	bl	80005e8 <__aeabi_dmul>
 80104aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80104ae:	1124      	asrs	r4, r4, #4
 80104b0:	2300      	movs	r3, #0
 80104b2:	2602      	movs	r6, #2
 80104b4:	2c00      	cmp	r4, #0
 80104b6:	f040 80b2 	bne.w	801061e <_dtoa_r+0x4fe>
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d1d3      	bne.n	8010466 <_dtoa_r+0x346>
 80104be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80104c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	f000 80b7 	beq.w	8010638 <_dtoa_r+0x518>
 80104ca:	4b86      	ldr	r3, [pc, #536]	@ (80106e4 <_dtoa_r+0x5c4>)
 80104cc:	2200      	movs	r2, #0
 80104ce:	4620      	mov	r0, r4
 80104d0:	4629      	mov	r1, r5
 80104d2:	f7f0 fafb 	bl	8000acc <__aeabi_dcmplt>
 80104d6:	2800      	cmp	r0, #0
 80104d8:	f000 80ae 	beq.w	8010638 <_dtoa_r+0x518>
 80104dc:	9b07      	ldr	r3, [sp, #28]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	f000 80aa 	beq.w	8010638 <_dtoa_r+0x518>
 80104e4:	9b00      	ldr	r3, [sp, #0]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	dd37      	ble.n	801055a <_dtoa_r+0x43a>
 80104ea:	1e7b      	subs	r3, r7, #1
 80104ec:	9304      	str	r3, [sp, #16]
 80104ee:	4620      	mov	r0, r4
 80104f0:	4b7d      	ldr	r3, [pc, #500]	@ (80106e8 <_dtoa_r+0x5c8>)
 80104f2:	2200      	movs	r2, #0
 80104f4:	4629      	mov	r1, r5
 80104f6:	f7f0 f877 	bl	80005e8 <__aeabi_dmul>
 80104fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80104fe:	9c00      	ldr	r4, [sp, #0]
 8010500:	3601      	adds	r6, #1
 8010502:	4630      	mov	r0, r6
 8010504:	f7f0 f806 	bl	8000514 <__aeabi_i2d>
 8010508:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801050c:	f7f0 f86c 	bl	80005e8 <__aeabi_dmul>
 8010510:	4b76      	ldr	r3, [pc, #472]	@ (80106ec <_dtoa_r+0x5cc>)
 8010512:	2200      	movs	r2, #0
 8010514:	f7ef feb2 	bl	800027c <__adddf3>
 8010518:	4605      	mov	r5, r0
 801051a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801051e:	2c00      	cmp	r4, #0
 8010520:	f040 808d 	bne.w	801063e <_dtoa_r+0x51e>
 8010524:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010528:	4b71      	ldr	r3, [pc, #452]	@ (80106f0 <_dtoa_r+0x5d0>)
 801052a:	2200      	movs	r2, #0
 801052c:	f7ef fea4 	bl	8000278 <__aeabi_dsub>
 8010530:	4602      	mov	r2, r0
 8010532:	460b      	mov	r3, r1
 8010534:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010538:	462a      	mov	r2, r5
 801053a:	4633      	mov	r3, r6
 801053c:	f7f0 fae4 	bl	8000b08 <__aeabi_dcmpgt>
 8010540:	2800      	cmp	r0, #0
 8010542:	f040 828b 	bne.w	8010a5c <_dtoa_r+0x93c>
 8010546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801054a:	462a      	mov	r2, r5
 801054c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010550:	f7f0 fabc 	bl	8000acc <__aeabi_dcmplt>
 8010554:	2800      	cmp	r0, #0
 8010556:	f040 8128 	bne.w	80107aa <_dtoa_r+0x68a>
 801055a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801055e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8010562:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010564:	2b00      	cmp	r3, #0
 8010566:	f2c0 815a 	blt.w	801081e <_dtoa_r+0x6fe>
 801056a:	2f0e      	cmp	r7, #14
 801056c:	f300 8157 	bgt.w	801081e <_dtoa_r+0x6fe>
 8010570:	4b5a      	ldr	r3, [pc, #360]	@ (80106dc <_dtoa_r+0x5bc>)
 8010572:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010576:	ed93 7b00 	vldr	d7, [r3]
 801057a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801057c:	2b00      	cmp	r3, #0
 801057e:	ed8d 7b00 	vstr	d7, [sp]
 8010582:	da03      	bge.n	801058c <_dtoa_r+0x46c>
 8010584:	9b07      	ldr	r3, [sp, #28]
 8010586:	2b00      	cmp	r3, #0
 8010588:	f340 8101 	ble.w	801078e <_dtoa_r+0x66e>
 801058c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010590:	4656      	mov	r6, sl
 8010592:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010596:	4620      	mov	r0, r4
 8010598:	4629      	mov	r1, r5
 801059a:	f7f0 f94f 	bl	800083c <__aeabi_ddiv>
 801059e:	f7f0 fabd 	bl	8000b1c <__aeabi_d2iz>
 80105a2:	4680      	mov	r8, r0
 80105a4:	f7ef ffb6 	bl	8000514 <__aeabi_i2d>
 80105a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105ac:	f7f0 f81c 	bl	80005e8 <__aeabi_dmul>
 80105b0:	4602      	mov	r2, r0
 80105b2:	460b      	mov	r3, r1
 80105b4:	4620      	mov	r0, r4
 80105b6:	4629      	mov	r1, r5
 80105b8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80105bc:	f7ef fe5c 	bl	8000278 <__aeabi_dsub>
 80105c0:	f806 4b01 	strb.w	r4, [r6], #1
 80105c4:	9d07      	ldr	r5, [sp, #28]
 80105c6:	eba6 040a 	sub.w	r4, r6, sl
 80105ca:	42a5      	cmp	r5, r4
 80105cc:	4602      	mov	r2, r0
 80105ce:	460b      	mov	r3, r1
 80105d0:	f040 8117 	bne.w	8010802 <_dtoa_r+0x6e2>
 80105d4:	f7ef fe52 	bl	800027c <__adddf3>
 80105d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105dc:	4604      	mov	r4, r0
 80105de:	460d      	mov	r5, r1
 80105e0:	f7f0 fa92 	bl	8000b08 <__aeabi_dcmpgt>
 80105e4:	2800      	cmp	r0, #0
 80105e6:	f040 80f9 	bne.w	80107dc <_dtoa_r+0x6bc>
 80105ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105ee:	4620      	mov	r0, r4
 80105f0:	4629      	mov	r1, r5
 80105f2:	f7f0 fa61 	bl	8000ab8 <__aeabi_dcmpeq>
 80105f6:	b118      	cbz	r0, 8010600 <_dtoa_r+0x4e0>
 80105f8:	f018 0f01 	tst.w	r8, #1
 80105fc:	f040 80ee 	bne.w	80107dc <_dtoa_r+0x6bc>
 8010600:	4649      	mov	r1, r9
 8010602:	4658      	mov	r0, fp
 8010604:	f000 fbe2 	bl	8010dcc <_Bfree>
 8010608:	2300      	movs	r3, #0
 801060a:	7033      	strb	r3, [r6, #0]
 801060c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801060e:	3701      	adds	r7, #1
 8010610:	601f      	str	r7, [r3, #0]
 8010612:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010614:	2b00      	cmp	r3, #0
 8010616:	f000 831d 	beq.w	8010c54 <_dtoa_r+0xb34>
 801061a:	601e      	str	r6, [r3, #0]
 801061c:	e31a      	b.n	8010c54 <_dtoa_r+0xb34>
 801061e:	07e2      	lsls	r2, r4, #31
 8010620:	d505      	bpl.n	801062e <_dtoa_r+0x50e>
 8010622:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010626:	f7ef ffdf 	bl	80005e8 <__aeabi_dmul>
 801062a:	3601      	adds	r6, #1
 801062c:	2301      	movs	r3, #1
 801062e:	1064      	asrs	r4, r4, #1
 8010630:	3508      	adds	r5, #8
 8010632:	e73f      	b.n	80104b4 <_dtoa_r+0x394>
 8010634:	2602      	movs	r6, #2
 8010636:	e742      	b.n	80104be <_dtoa_r+0x39e>
 8010638:	9c07      	ldr	r4, [sp, #28]
 801063a:	9704      	str	r7, [sp, #16]
 801063c:	e761      	b.n	8010502 <_dtoa_r+0x3e2>
 801063e:	4b27      	ldr	r3, [pc, #156]	@ (80106dc <_dtoa_r+0x5bc>)
 8010640:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010642:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010646:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801064a:	4454      	add	r4, sl
 801064c:	2900      	cmp	r1, #0
 801064e:	d053      	beq.n	80106f8 <_dtoa_r+0x5d8>
 8010650:	4928      	ldr	r1, [pc, #160]	@ (80106f4 <_dtoa_r+0x5d4>)
 8010652:	2000      	movs	r0, #0
 8010654:	f7f0 f8f2 	bl	800083c <__aeabi_ddiv>
 8010658:	4633      	mov	r3, r6
 801065a:	462a      	mov	r2, r5
 801065c:	f7ef fe0c 	bl	8000278 <__aeabi_dsub>
 8010660:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010664:	4656      	mov	r6, sl
 8010666:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801066a:	f7f0 fa57 	bl	8000b1c <__aeabi_d2iz>
 801066e:	4605      	mov	r5, r0
 8010670:	f7ef ff50 	bl	8000514 <__aeabi_i2d>
 8010674:	4602      	mov	r2, r0
 8010676:	460b      	mov	r3, r1
 8010678:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801067c:	f7ef fdfc 	bl	8000278 <__aeabi_dsub>
 8010680:	3530      	adds	r5, #48	@ 0x30
 8010682:	4602      	mov	r2, r0
 8010684:	460b      	mov	r3, r1
 8010686:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801068a:	f806 5b01 	strb.w	r5, [r6], #1
 801068e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010692:	f7f0 fa1b 	bl	8000acc <__aeabi_dcmplt>
 8010696:	2800      	cmp	r0, #0
 8010698:	d171      	bne.n	801077e <_dtoa_r+0x65e>
 801069a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801069e:	4911      	ldr	r1, [pc, #68]	@ (80106e4 <_dtoa_r+0x5c4>)
 80106a0:	2000      	movs	r0, #0
 80106a2:	f7ef fde9 	bl	8000278 <__aeabi_dsub>
 80106a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80106aa:	f7f0 fa0f 	bl	8000acc <__aeabi_dcmplt>
 80106ae:	2800      	cmp	r0, #0
 80106b0:	f040 8095 	bne.w	80107de <_dtoa_r+0x6be>
 80106b4:	42a6      	cmp	r6, r4
 80106b6:	f43f af50 	beq.w	801055a <_dtoa_r+0x43a>
 80106ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80106be:	4b0a      	ldr	r3, [pc, #40]	@ (80106e8 <_dtoa_r+0x5c8>)
 80106c0:	2200      	movs	r2, #0
 80106c2:	f7ef ff91 	bl	80005e8 <__aeabi_dmul>
 80106c6:	4b08      	ldr	r3, [pc, #32]	@ (80106e8 <_dtoa_r+0x5c8>)
 80106c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80106cc:	2200      	movs	r2, #0
 80106ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80106d2:	f7ef ff89 	bl	80005e8 <__aeabi_dmul>
 80106d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80106da:	e7c4      	b.n	8010666 <_dtoa_r+0x546>
 80106dc:	08012fe8 	.word	0x08012fe8
 80106e0:	08012fc0 	.word	0x08012fc0
 80106e4:	3ff00000 	.word	0x3ff00000
 80106e8:	40240000 	.word	0x40240000
 80106ec:	401c0000 	.word	0x401c0000
 80106f0:	40140000 	.word	0x40140000
 80106f4:	3fe00000 	.word	0x3fe00000
 80106f8:	4631      	mov	r1, r6
 80106fa:	4628      	mov	r0, r5
 80106fc:	f7ef ff74 	bl	80005e8 <__aeabi_dmul>
 8010700:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010704:	9415      	str	r4, [sp, #84]	@ 0x54
 8010706:	4656      	mov	r6, sl
 8010708:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801070c:	f7f0 fa06 	bl	8000b1c <__aeabi_d2iz>
 8010710:	4605      	mov	r5, r0
 8010712:	f7ef feff 	bl	8000514 <__aeabi_i2d>
 8010716:	4602      	mov	r2, r0
 8010718:	460b      	mov	r3, r1
 801071a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801071e:	f7ef fdab 	bl	8000278 <__aeabi_dsub>
 8010722:	3530      	adds	r5, #48	@ 0x30
 8010724:	f806 5b01 	strb.w	r5, [r6], #1
 8010728:	4602      	mov	r2, r0
 801072a:	460b      	mov	r3, r1
 801072c:	42a6      	cmp	r6, r4
 801072e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010732:	f04f 0200 	mov.w	r2, #0
 8010736:	d124      	bne.n	8010782 <_dtoa_r+0x662>
 8010738:	4bac      	ldr	r3, [pc, #688]	@ (80109ec <_dtoa_r+0x8cc>)
 801073a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801073e:	f7ef fd9d 	bl	800027c <__adddf3>
 8010742:	4602      	mov	r2, r0
 8010744:	460b      	mov	r3, r1
 8010746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801074a:	f7f0 f9dd 	bl	8000b08 <__aeabi_dcmpgt>
 801074e:	2800      	cmp	r0, #0
 8010750:	d145      	bne.n	80107de <_dtoa_r+0x6be>
 8010752:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010756:	49a5      	ldr	r1, [pc, #660]	@ (80109ec <_dtoa_r+0x8cc>)
 8010758:	2000      	movs	r0, #0
 801075a:	f7ef fd8d 	bl	8000278 <__aeabi_dsub>
 801075e:	4602      	mov	r2, r0
 8010760:	460b      	mov	r3, r1
 8010762:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010766:	f7f0 f9b1 	bl	8000acc <__aeabi_dcmplt>
 801076a:	2800      	cmp	r0, #0
 801076c:	f43f aef5 	beq.w	801055a <_dtoa_r+0x43a>
 8010770:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8010772:	1e73      	subs	r3, r6, #1
 8010774:	9315      	str	r3, [sp, #84]	@ 0x54
 8010776:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801077a:	2b30      	cmp	r3, #48	@ 0x30
 801077c:	d0f8      	beq.n	8010770 <_dtoa_r+0x650>
 801077e:	9f04      	ldr	r7, [sp, #16]
 8010780:	e73e      	b.n	8010600 <_dtoa_r+0x4e0>
 8010782:	4b9b      	ldr	r3, [pc, #620]	@ (80109f0 <_dtoa_r+0x8d0>)
 8010784:	f7ef ff30 	bl	80005e8 <__aeabi_dmul>
 8010788:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801078c:	e7bc      	b.n	8010708 <_dtoa_r+0x5e8>
 801078e:	d10c      	bne.n	80107aa <_dtoa_r+0x68a>
 8010790:	4b98      	ldr	r3, [pc, #608]	@ (80109f4 <_dtoa_r+0x8d4>)
 8010792:	2200      	movs	r2, #0
 8010794:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010798:	f7ef ff26 	bl	80005e8 <__aeabi_dmul>
 801079c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80107a0:	f7f0 f9a8 	bl	8000af4 <__aeabi_dcmpge>
 80107a4:	2800      	cmp	r0, #0
 80107a6:	f000 8157 	beq.w	8010a58 <_dtoa_r+0x938>
 80107aa:	2400      	movs	r4, #0
 80107ac:	4625      	mov	r5, r4
 80107ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80107b0:	43db      	mvns	r3, r3
 80107b2:	9304      	str	r3, [sp, #16]
 80107b4:	4656      	mov	r6, sl
 80107b6:	2700      	movs	r7, #0
 80107b8:	4621      	mov	r1, r4
 80107ba:	4658      	mov	r0, fp
 80107bc:	f000 fb06 	bl	8010dcc <_Bfree>
 80107c0:	2d00      	cmp	r5, #0
 80107c2:	d0dc      	beq.n	801077e <_dtoa_r+0x65e>
 80107c4:	b12f      	cbz	r7, 80107d2 <_dtoa_r+0x6b2>
 80107c6:	42af      	cmp	r7, r5
 80107c8:	d003      	beq.n	80107d2 <_dtoa_r+0x6b2>
 80107ca:	4639      	mov	r1, r7
 80107cc:	4658      	mov	r0, fp
 80107ce:	f000 fafd 	bl	8010dcc <_Bfree>
 80107d2:	4629      	mov	r1, r5
 80107d4:	4658      	mov	r0, fp
 80107d6:	f000 faf9 	bl	8010dcc <_Bfree>
 80107da:	e7d0      	b.n	801077e <_dtoa_r+0x65e>
 80107dc:	9704      	str	r7, [sp, #16]
 80107de:	4633      	mov	r3, r6
 80107e0:	461e      	mov	r6, r3
 80107e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80107e6:	2a39      	cmp	r2, #57	@ 0x39
 80107e8:	d107      	bne.n	80107fa <_dtoa_r+0x6da>
 80107ea:	459a      	cmp	sl, r3
 80107ec:	d1f8      	bne.n	80107e0 <_dtoa_r+0x6c0>
 80107ee:	9a04      	ldr	r2, [sp, #16]
 80107f0:	3201      	adds	r2, #1
 80107f2:	9204      	str	r2, [sp, #16]
 80107f4:	2230      	movs	r2, #48	@ 0x30
 80107f6:	f88a 2000 	strb.w	r2, [sl]
 80107fa:	781a      	ldrb	r2, [r3, #0]
 80107fc:	3201      	adds	r2, #1
 80107fe:	701a      	strb	r2, [r3, #0]
 8010800:	e7bd      	b.n	801077e <_dtoa_r+0x65e>
 8010802:	4b7b      	ldr	r3, [pc, #492]	@ (80109f0 <_dtoa_r+0x8d0>)
 8010804:	2200      	movs	r2, #0
 8010806:	f7ef feef 	bl	80005e8 <__aeabi_dmul>
 801080a:	2200      	movs	r2, #0
 801080c:	2300      	movs	r3, #0
 801080e:	4604      	mov	r4, r0
 8010810:	460d      	mov	r5, r1
 8010812:	f7f0 f951 	bl	8000ab8 <__aeabi_dcmpeq>
 8010816:	2800      	cmp	r0, #0
 8010818:	f43f aebb 	beq.w	8010592 <_dtoa_r+0x472>
 801081c:	e6f0      	b.n	8010600 <_dtoa_r+0x4e0>
 801081e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010820:	2a00      	cmp	r2, #0
 8010822:	f000 80db 	beq.w	80109dc <_dtoa_r+0x8bc>
 8010826:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010828:	2a01      	cmp	r2, #1
 801082a:	f300 80bf 	bgt.w	80109ac <_dtoa_r+0x88c>
 801082e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010830:	2a00      	cmp	r2, #0
 8010832:	f000 80b7 	beq.w	80109a4 <_dtoa_r+0x884>
 8010836:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801083a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801083c:	4646      	mov	r6, r8
 801083e:	9a08      	ldr	r2, [sp, #32]
 8010840:	2101      	movs	r1, #1
 8010842:	441a      	add	r2, r3
 8010844:	4658      	mov	r0, fp
 8010846:	4498      	add	r8, r3
 8010848:	9208      	str	r2, [sp, #32]
 801084a:	f000 fb73 	bl	8010f34 <__i2b>
 801084e:	4605      	mov	r5, r0
 8010850:	b15e      	cbz	r6, 801086a <_dtoa_r+0x74a>
 8010852:	9b08      	ldr	r3, [sp, #32]
 8010854:	2b00      	cmp	r3, #0
 8010856:	dd08      	ble.n	801086a <_dtoa_r+0x74a>
 8010858:	42b3      	cmp	r3, r6
 801085a:	9a08      	ldr	r2, [sp, #32]
 801085c:	bfa8      	it	ge
 801085e:	4633      	movge	r3, r6
 8010860:	eba8 0803 	sub.w	r8, r8, r3
 8010864:	1af6      	subs	r6, r6, r3
 8010866:	1ad3      	subs	r3, r2, r3
 8010868:	9308      	str	r3, [sp, #32]
 801086a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801086c:	b1f3      	cbz	r3, 80108ac <_dtoa_r+0x78c>
 801086e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010870:	2b00      	cmp	r3, #0
 8010872:	f000 80b7 	beq.w	80109e4 <_dtoa_r+0x8c4>
 8010876:	b18c      	cbz	r4, 801089c <_dtoa_r+0x77c>
 8010878:	4629      	mov	r1, r5
 801087a:	4622      	mov	r2, r4
 801087c:	4658      	mov	r0, fp
 801087e:	f000 fc19 	bl	80110b4 <__pow5mult>
 8010882:	464a      	mov	r2, r9
 8010884:	4601      	mov	r1, r0
 8010886:	4605      	mov	r5, r0
 8010888:	4658      	mov	r0, fp
 801088a:	f000 fb69 	bl	8010f60 <__multiply>
 801088e:	4649      	mov	r1, r9
 8010890:	9004      	str	r0, [sp, #16]
 8010892:	4658      	mov	r0, fp
 8010894:	f000 fa9a 	bl	8010dcc <_Bfree>
 8010898:	9b04      	ldr	r3, [sp, #16]
 801089a:	4699      	mov	r9, r3
 801089c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801089e:	1b1a      	subs	r2, r3, r4
 80108a0:	d004      	beq.n	80108ac <_dtoa_r+0x78c>
 80108a2:	4649      	mov	r1, r9
 80108a4:	4658      	mov	r0, fp
 80108a6:	f000 fc05 	bl	80110b4 <__pow5mult>
 80108aa:	4681      	mov	r9, r0
 80108ac:	2101      	movs	r1, #1
 80108ae:	4658      	mov	r0, fp
 80108b0:	f000 fb40 	bl	8010f34 <__i2b>
 80108b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80108b6:	4604      	mov	r4, r0
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	f000 81cf 	beq.w	8010c5c <_dtoa_r+0xb3c>
 80108be:	461a      	mov	r2, r3
 80108c0:	4601      	mov	r1, r0
 80108c2:	4658      	mov	r0, fp
 80108c4:	f000 fbf6 	bl	80110b4 <__pow5mult>
 80108c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108ca:	2b01      	cmp	r3, #1
 80108cc:	4604      	mov	r4, r0
 80108ce:	f300 8095 	bgt.w	80109fc <_dtoa_r+0x8dc>
 80108d2:	9b02      	ldr	r3, [sp, #8]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	f040 8087 	bne.w	80109e8 <_dtoa_r+0x8c8>
 80108da:	9b03      	ldr	r3, [sp, #12]
 80108dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	f040 8089 	bne.w	80109f8 <_dtoa_r+0x8d8>
 80108e6:	9b03      	ldr	r3, [sp, #12]
 80108e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80108ec:	0d1b      	lsrs	r3, r3, #20
 80108ee:	051b      	lsls	r3, r3, #20
 80108f0:	b12b      	cbz	r3, 80108fe <_dtoa_r+0x7de>
 80108f2:	9b08      	ldr	r3, [sp, #32]
 80108f4:	3301      	adds	r3, #1
 80108f6:	9308      	str	r3, [sp, #32]
 80108f8:	f108 0801 	add.w	r8, r8, #1
 80108fc:	2301      	movs	r3, #1
 80108fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8010900:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010902:	2b00      	cmp	r3, #0
 8010904:	f000 81b0 	beq.w	8010c68 <_dtoa_r+0xb48>
 8010908:	6923      	ldr	r3, [r4, #16]
 801090a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801090e:	6918      	ldr	r0, [r3, #16]
 8010910:	f000 fac4 	bl	8010e9c <__hi0bits>
 8010914:	f1c0 0020 	rsb	r0, r0, #32
 8010918:	9b08      	ldr	r3, [sp, #32]
 801091a:	4418      	add	r0, r3
 801091c:	f010 001f 	ands.w	r0, r0, #31
 8010920:	d077      	beq.n	8010a12 <_dtoa_r+0x8f2>
 8010922:	f1c0 0320 	rsb	r3, r0, #32
 8010926:	2b04      	cmp	r3, #4
 8010928:	dd6b      	ble.n	8010a02 <_dtoa_r+0x8e2>
 801092a:	9b08      	ldr	r3, [sp, #32]
 801092c:	f1c0 001c 	rsb	r0, r0, #28
 8010930:	4403      	add	r3, r0
 8010932:	4480      	add	r8, r0
 8010934:	4406      	add	r6, r0
 8010936:	9308      	str	r3, [sp, #32]
 8010938:	f1b8 0f00 	cmp.w	r8, #0
 801093c:	dd05      	ble.n	801094a <_dtoa_r+0x82a>
 801093e:	4649      	mov	r1, r9
 8010940:	4642      	mov	r2, r8
 8010942:	4658      	mov	r0, fp
 8010944:	f000 fc10 	bl	8011168 <__lshift>
 8010948:	4681      	mov	r9, r0
 801094a:	9b08      	ldr	r3, [sp, #32]
 801094c:	2b00      	cmp	r3, #0
 801094e:	dd05      	ble.n	801095c <_dtoa_r+0x83c>
 8010950:	4621      	mov	r1, r4
 8010952:	461a      	mov	r2, r3
 8010954:	4658      	mov	r0, fp
 8010956:	f000 fc07 	bl	8011168 <__lshift>
 801095a:	4604      	mov	r4, r0
 801095c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801095e:	2b00      	cmp	r3, #0
 8010960:	d059      	beq.n	8010a16 <_dtoa_r+0x8f6>
 8010962:	4621      	mov	r1, r4
 8010964:	4648      	mov	r0, r9
 8010966:	f000 fc6b 	bl	8011240 <__mcmp>
 801096a:	2800      	cmp	r0, #0
 801096c:	da53      	bge.n	8010a16 <_dtoa_r+0x8f6>
 801096e:	1e7b      	subs	r3, r7, #1
 8010970:	9304      	str	r3, [sp, #16]
 8010972:	4649      	mov	r1, r9
 8010974:	2300      	movs	r3, #0
 8010976:	220a      	movs	r2, #10
 8010978:	4658      	mov	r0, fp
 801097a:	f000 fa49 	bl	8010e10 <__multadd>
 801097e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010980:	4681      	mov	r9, r0
 8010982:	2b00      	cmp	r3, #0
 8010984:	f000 8172 	beq.w	8010c6c <_dtoa_r+0xb4c>
 8010988:	2300      	movs	r3, #0
 801098a:	4629      	mov	r1, r5
 801098c:	220a      	movs	r2, #10
 801098e:	4658      	mov	r0, fp
 8010990:	f000 fa3e 	bl	8010e10 <__multadd>
 8010994:	9b00      	ldr	r3, [sp, #0]
 8010996:	2b00      	cmp	r3, #0
 8010998:	4605      	mov	r5, r0
 801099a:	dc67      	bgt.n	8010a6c <_dtoa_r+0x94c>
 801099c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801099e:	2b02      	cmp	r3, #2
 80109a0:	dc41      	bgt.n	8010a26 <_dtoa_r+0x906>
 80109a2:	e063      	b.n	8010a6c <_dtoa_r+0x94c>
 80109a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80109a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80109aa:	e746      	b.n	801083a <_dtoa_r+0x71a>
 80109ac:	9b07      	ldr	r3, [sp, #28]
 80109ae:	1e5c      	subs	r4, r3, #1
 80109b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80109b2:	42a3      	cmp	r3, r4
 80109b4:	bfbf      	itttt	lt
 80109b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80109b8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80109ba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80109bc:	1ae3      	sublt	r3, r4, r3
 80109be:	bfb4      	ite	lt
 80109c0:	18d2      	addlt	r2, r2, r3
 80109c2:	1b1c      	subge	r4, r3, r4
 80109c4:	9b07      	ldr	r3, [sp, #28]
 80109c6:	bfbc      	itt	lt
 80109c8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80109ca:	2400      	movlt	r4, #0
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	bfb5      	itete	lt
 80109d0:	eba8 0603 	sublt.w	r6, r8, r3
 80109d4:	9b07      	ldrge	r3, [sp, #28]
 80109d6:	2300      	movlt	r3, #0
 80109d8:	4646      	movge	r6, r8
 80109da:	e730      	b.n	801083e <_dtoa_r+0x71e>
 80109dc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80109de:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80109e0:	4646      	mov	r6, r8
 80109e2:	e735      	b.n	8010850 <_dtoa_r+0x730>
 80109e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80109e6:	e75c      	b.n	80108a2 <_dtoa_r+0x782>
 80109e8:	2300      	movs	r3, #0
 80109ea:	e788      	b.n	80108fe <_dtoa_r+0x7de>
 80109ec:	3fe00000 	.word	0x3fe00000
 80109f0:	40240000 	.word	0x40240000
 80109f4:	40140000 	.word	0x40140000
 80109f8:	9b02      	ldr	r3, [sp, #8]
 80109fa:	e780      	b.n	80108fe <_dtoa_r+0x7de>
 80109fc:	2300      	movs	r3, #0
 80109fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8010a00:	e782      	b.n	8010908 <_dtoa_r+0x7e8>
 8010a02:	d099      	beq.n	8010938 <_dtoa_r+0x818>
 8010a04:	9a08      	ldr	r2, [sp, #32]
 8010a06:	331c      	adds	r3, #28
 8010a08:	441a      	add	r2, r3
 8010a0a:	4498      	add	r8, r3
 8010a0c:	441e      	add	r6, r3
 8010a0e:	9208      	str	r2, [sp, #32]
 8010a10:	e792      	b.n	8010938 <_dtoa_r+0x818>
 8010a12:	4603      	mov	r3, r0
 8010a14:	e7f6      	b.n	8010a04 <_dtoa_r+0x8e4>
 8010a16:	9b07      	ldr	r3, [sp, #28]
 8010a18:	9704      	str	r7, [sp, #16]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	dc20      	bgt.n	8010a60 <_dtoa_r+0x940>
 8010a1e:	9300      	str	r3, [sp, #0]
 8010a20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a22:	2b02      	cmp	r3, #2
 8010a24:	dd1e      	ble.n	8010a64 <_dtoa_r+0x944>
 8010a26:	9b00      	ldr	r3, [sp, #0]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	f47f aec0 	bne.w	80107ae <_dtoa_r+0x68e>
 8010a2e:	4621      	mov	r1, r4
 8010a30:	2205      	movs	r2, #5
 8010a32:	4658      	mov	r0, fp
 8010a34:	f000 f9ec 	bl	8010e10 <__multadd>
 8010a38:	4601      	mov	r1, r0
 8010a3a:	4604      	mov	r4, r0
 8010a3c:	4648      	mov	r0, r9
 8010a3e:	f000 fbff 	bl	8011240 <__mcmp>
 8010a42:	2800      	cmp	r0, #0
 8010a44:	f77f aeb3 	ble.w	80107ae <_dtoa_r+0x68e>
 8010a48:	4656      	mov	r6, sl
 8010a4a:	2331      	movs	r3, #49	@ 0x31
 8010a4c:	f806 3b01 	strb.w	r3, [r6], #1
 8010a50:	9b04      	ldr	r3, [sp, #16]
 8010a52:	3301      	adds	r3, #1
 8010a54:	9304      	str	r3, [sp, #16]
 8010a56:	e6ae      	b.n	80107b6 <_dtoa_r+0x696>
 8010a58:	9c07      	ldr	r4, [sp, #28]
 8010a5a:	9704      	str	r7, [sp, #16]
 8010a5c:	4625      	mov	r5, r4
 8010a5e:	e7f3      	b.n	8010a48 <_dtoa_r+0x928>
 8010a60:	9b07      	ldr	r3, [sp, #28]
 8010a62:	9300      	str	r3, [sp, #0]
 8010a64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	f000 8104 	beq.w	8010c74 <_dtoa_r+0xb54>
 8010a6c:	2e00      	cmp	r6, #0
 8010a6e:	dd05      	ble.n	8010a7c <_dtoa_r+0x95c>
 8010a70:	4629      	mov	r1, r5
 8010a72:	4632      	mov	r2, r6
 8010a74:	4658      	mov	r0, fp
 8010a76:	f000 fb77 	bl	8011168 <__lshift>
 8010a7a:	4605      	mov	r5, r0
 8010a7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d05a      	beq.n	8010b38 <_dtoa_r+0xa18>
 8010a82:	6869      	ldr	r1, [r5, #4]
 8010a84:	4658      	mov	r0, fp
 8010a86:	f000 f961 	bl	8010d4c <_Balloc>
 8010a8a:	4606      	mov	r6, r0
 8010a8c:	b928      	cbnz	r0, 8010a9a <_dtoa_r+0x97a>
 8010a8e:	4b84      	ldr	r3, [pc, #528]	@ (8010ca0 <_dtoa_r+0xb80>)
 8010a90:	4602      	mov	r2, r0
 8010a92:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010a96:	f7ff bb5a 	b.w	801014e <_dtoa_r+0x2e>
 8010a9a:	692a      	ldr	r2, [r5, #16]
 8010a9c:	3202      	adds	r2, #2
 8010a9e:	0092      	lsls	r2, r2, #2
 8010aa0:	f105 010c 	add.w	r1, r5, #12
 8010aa4:	300c      	adds	r0, #12
 8010aa6:	f7fe fb3f 	bl	800f128 <memcpy>
 8010aaa:	2201      	movs	r2, #1
 8010aac:	4631      	mov	r1, r6
 8010aae:	4658      	mov	r0, fp
 8010ab0:	f000 fb5a 	bl	8011168 <__lshift>
 8010ab4:	f10a 0301 	add.w	r3, sl, #1
 8010ab8:	9307      	str	r3, [sp, #28]
 8010aba:	9b00      	ldr	r3, [sp, #0]
 8010abc:	4453      	add	r3, sl
 8010abe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010ac0:	9b02      	ldr	r3, [sp, #8]
 8010ac2:	f003 0301 	and.w	r3, r3, #1
 8010ac6:	462f      	mov	r7, r5
 8010ac8:	930a      	str	r3, [sp, #40]	@ 0x28
 8010aca:	4605      	mov	r5, r0
 8010acc:	9b07      	ldr	r3, [sp, #28]
 8010ace:	4621      	mov	r1, r4
 8010ad0:	3b01      	subs	r3, #1
 8010ad2:	4648      	mov	r0, r9
 8010ad4:	9300      	str	r3, [sp, #0]
 8010ad6:	f7ff fa9b 	bl	8010010 <quorem>
 8010ada:	4639      	mov	r1, r7
 8010adc:	9002      	str	r0, [sp, #8]
 8010ade:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010ae2:	4648      	mov	r0, r9
 8010ae4:	f000 fbac 	bl	8011240 <__mcmp>
 8010ae8:	462a      	mov	r2, r5
 8010aea:	9008      	str	r0, [sp, #32]
 8010aec:	4621      	mov	r1, r4
 8010aee:	4658      	mov	r0, fp
 8010af0:	f000 fbc2 	bl	8011278 <__mdiff>
 8010af4:	68c2      	ldr	r2, [r0, #12]
 8010af6:	4606      	mov	r6, r0
 8010af8:	bb02      	cbnz	r2, 8010b3c <_dtoa_r+0xa1c>
 8010afa:	4601      	mov	r1, r0
 8010afc:	4648      	mov	r0, r9
 8010afe:	f000 fb9f 	bl	8011240 <__mcmp>
 8010b02:	4602      	mov	r2, r0
 8010b04:	4631      	mov	r1, r6
 8010b06:	4658      	mov	r0, fp
 8010b08:	920e      	str	r2, [sp, #56]	@ 0x38
 8010b0a:	f000 f95f 	bl	8010dcc <_Bfree>
 8010b0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010b12:	9e07      	ldr	r6, [sp, #28]
 8010b14:	ea43 0102 	orr.w	r1, r3, r2
 8010b18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b1a:	4319      	orrs	r1, r3
 8010b1c:	d110      	bne.n	8010b40 <_dtoa_r+0xa20>
 8010b1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010b22:	d029      	beq.n	8010b78 <_dtoa_r+0xa58>
 8010b24:	9b08      	ldr	r3, [sp, #32]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	dd02      	ble.n	8010b30 <_dtoa_r+0xa10>
 8010b2a:	9b02      	ldr	r3, [sp, #8]
 8010b2c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010b30:	9b00      	ldr	r3, [sp, #0]
 8010b32:	f883 8000 	strb.w	r8, [r3]
 8010b36:	e63f      	b.n	80107b8 <_dtoa_r+0x698>
 8010b38:	4628      	mov	r0, r5
 8010b3a:	e7bb      	b.n	8010ab4 <_dtoa_r+0x994>
 8010b3c:	2201      	movs	r2, #1
 8010b3e:	e7e1      	b.n	8010b04 <_dtoa_r+0x9e4>
 8010b40:	9b08      	ldr	r3, [sp, #32]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	db04      	blt.n	8010b50 <_dtoa_r+0xa30>
 8010b46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010b48:	430b      	orrs	r3, r1
 8010b4a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010b4c:	430b      	orrs	r3, r1
 8010b4e:	d120      	bne.n	8010b92 <_dtoa_r+0xa72>
 8010b50:	2a00      	cmp	r2, #0
 8010b52:	dded      	ble.n	8010b30 <_dtoa_r+0xa10>
 8010b54:	4649      	mov	r1, r9
 8010b56:	2201      	movs	r2, #1
 8010b58:	4658      	mov	r0, fp
 8010b5a:	f000 fb05 	bl	8011168 <__lshift>
 8010b5e:	4621      	mov	r1, r4
 8010b60:	4681      	mov	r9, r0
 8010b62:	f000 fb6d 	bl	8011240 <__mcmp>
 8010b66:	2800      	cmp	r0, #0
 8010b68:	dc03      	bgt.n	8010b72 <_dtoa_r+0xa52>
 8010b6a:	d1e1      	bne.n	8010b30 <_dtoa_r+0xa10>
 8010b6c:	f018 0f01 	tst.w	r8, #1
 8010b70:	d0de      	beq.n	8010b30 <_dtoa_r+0xa10>
 8010b72:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010b76:	d1d8      	bne.n	8010b2a <_dtoa_r+0xa0a>
 8010b78:	9a00      	ldr	r2, [sp, #0]
 8010b7a:	2339      	movs	r3, #57	@ 0x39
 8010b7c:	7013      	strb	r3, [r2, #0]
 8010b7e:	4633      	mov	r3, r6
 8010b80:	461e      	mov	r6, r3
 8010b82:	3b01      	subs	r3, #1
 8010b84:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010b88:	2a39      	cmp	r2, #57	@ 0x39
 8010b8a:	d052      	beq.n	8010c32 <_dtoa_r+0xb12>
 8010b8c:	3201      	adds	r2, #1
 8010b8e:	701a      	strb	r2, [r3, #0]
 8010b90:	e612      	b.n	80107b8 <_dtoa_r+0x698>
 8010b92:	2a00      	cmp	r2, #0
 8010b94:	dd07      	ble.n	8010ba6 <_dtoa_r+0xa86>
 8010b96:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010b9a:	d0ed      	beq.n	8010b78 <_dtoa_r+0xa58>
 8010b9c:	9a00      	ldr	r2, [sp, #0]
 8010b9e:	f108 0301 	add.w	r3, r8, #1
 8010ba2:	7013      	strb	r3, [r2, #0]
 8010ba4:	e608      	b.n	80107b8 <_dtoa_r+0x698>
 8010ba6:	9b07      	ldr	r3, [sp, #28]
 8010ba8:	9a07      	ldr	r2, [sp, #28]
 8010baa:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010bae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010bb0:	4293      	cmp	r3, r2
 8010bb2:	d028      	beq.n	8010c06 <_dtoa_r+0xae6>
 8010bb4:	4649      	mov	r1, r9
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	220a      	movs	r2, #10
 8010bba:	4658      	mov	r0, fp
 8010bbc:	f000 f928 	bl	8010e10 <__multadd>
 8010bc0:	42af      	cmp	r7, r5
 8010bc2:	4681      	mov	r9, r0
 8010bc4:	f04f 0300 	mov.w	r3, #0
 8010bc8:	f04f 020a 	mov.w	r2, #10
 8010bcc:	4639      	mov	r1, r7
 8010bce:	4658      	mov	r0, fp
 8010bd0:	d107      	bne.n	8010be2 <_dtoa_r+0xac2>
 8010bd2:	f000 f91d 	bl	8010e10 <__multadd>
 8010bd6:	4607      	mov	r7, r0
 8010bd8:	4605      	mov	r5, r0
 8010bda:	9b07      	ldr	r3, [sp, #28]
 8010bdc:	3301      	adds	r3, #1
 8010bde:	9307      	str	r3, [sp, #28]
 8010be0:	e774      	b.n	8010acc <_dtoa_r+0x9ac>
 8010be2:	f000 f915 	bl	8010e10 <__multadd>
 8010be6:	4629      	mov	r1, r5
 8010be8:	4607      	mov	r7, r0
 8010bea:	2300      	movs	r3, #0
 8010bec:	220a      	movs	r2, #10
 8010bee:	4658      	mov	r0, fp
 8010bf0:	f000 f90e 	bl	8010e10 <__multadd>
 8010bf4:	4605      	mov	r5, r0
 8010bf6:	e7f0      	b.n	8010bda <_dtoa_r+0xaba>
 8010bf8:	9b00      	ldr	r3, [sp, #0]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	bfcc      	ite	gt
 8010bfe:	461e      	movgt	r6, r3
 8010c00:	2601      	movle	r6, #1
 8010c02:	4456      	add	r6, sl
 8010c04:	2700      	movs	r7, #0
 8010c06:	4649      	mov	r1, r9
 8010c08:	2201      	movs	r2, #1
 8010c0a:	4658      	mov	r0, fp
 8010c0c:	f000 faac 	bl	8011168 <__lshift>
 8010c10:	4621      	mov	r1, r4
 8010c12:	4681      	mov	r9, r0
 8010c14:	f000 fb14 	bl	8011240 <__mcmp>
 8010c18:	2800      	cmp	r0, #0
 8010c1a:	dcb0      	bgt.n	8010b7e <_dtoa_r+0xa5e>
 8010c1c:	d102      	bne.n	8010c24 <_dtoa_r+0xb04>
 8010c1e:	f018 0f01 	tst.w	r8, #1
 8010c22:	d1ac      	bne.n	8010b7e <_dtoa_r+0xa5e>
 8010c24:	4633      	mov	r3, r6
 8010c26:	461e      	mov	r6, r3
 8010c28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010c2c:	2a30      	cmp	r2, #48	@ 0x30
 8010c2e:	d0fa      	beq.n	8010c26 <_dtoa_r+0xb06>
 8010c30:	e5c2      	b.n	80107b8 <_dtoa_r+0x698>
 8010c32:	459a      	cmp	sl, r3
 8010c34:	d1a4      	bne.n	8010b80 <_dtoa_r+0xa60>
 8010c36:	9b04      	ldr	r3, [sp, #16]
 8010c38:	3301      	adds	r3, #1
 8010c3a:	9304      	str	r3, [sp, #16]
 8010c3c:	2331      	movs	r3, #49	@ 0x31
 8010c3e:	f88a 3000 	strb.w	r3, [sl]
 8010c42:	e5b9      	b.n	80107b8 <_dtoa_r+0x698>
 8010c44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010c46:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010ca4 <_dtoa_r+0xb84>
 8010c4a:	b11b      	cbz	r3, 8010c54 <_dtoa_r+0xb34>
 8010c4c:	f10a 0308 	add.w	r3, sl, #8
 8010c50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010c52:	6013      	str	r3, [r2, #0]
 8010c54:	4650      	mov	r0, sl
 8010c56:	b019      	add	sp, #100	@ 0x64
 8010c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c5e:	2b01      	cmp	r3, #1
 8010c60:	f77f ae37 	ble.w	80108d2 <_dtoa_r+0x7b2>
 8010c64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c66:	930a      	str	r3, [sp, #40]	@ 0x28
 8010c68:	2001      	movs	r0, #1
 8010c6a:	e655      	b.n	8010918 <_dtoa_r+0x7f8>
 8010c6c:	9b00      	ldr	r3, [sp, #0]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	f77f aed6 	ble.w	8010a20 <_dtoa_r+0x900>
 8010c74:	4656      	mov	r6, sl
 8010c76:	4621      	mov	r1, r4
 8010c78:	4648      	mov	r0, r9
 8010c7a:	f7ff f9c9 	bl	8010010 <quorem>
 8010c7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010c82:	f806 8b01 	strb.w	r8, [r6], #1
 8010c86:	9b00      	ldr	r3, [sp, #0]
 8010c88:	eba6 020a 	sub.w	r2, r6, sl
 8010c8c:	4293      	cmp	r3, r2
 8010c8e:	ddb3      	ble.n	8010bf8 <_dtoa_r+0xad8>
 8010c90:	4649      	mov	r1, r9
 8010c92:	2300      	movs	r3, #0
 8010c94:	220a      	movs	r2, #10
 8010c96:	4658      	mov	r0, fp
 8010c98:	f000 f8ba 	bl	8010e10 <__multadd>
 8010c9c:	4681      	mov	r9, r0
 8010c9e:	e7ea      	b.n	8010c76 <_dtoa_r+0xb56>
 8010ca0:	08012f45 	.word	0x08012f45
 8010ca4:	08012ec7 	.word	0x08012ec7

08010ca8 <_free_r>:
 8010ca8:	b538      	push	{r3, r4, r5, lr}
 8010caa:	4605      	mov	r5, r0
 8010cac:	2900      	cmp	r1, #0
 8010cae:	d041      	beq.n	8010d34 <_free_r+0x8c>
 8010cb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010cb4:	1f0c      	subs	r4, r1, #4
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	bfb8      	it	lt
 8010cba:	18e4      	addlt	r4, r4, r3
 8010cbc:	f7fe fe66 	bl	800f98c <__malloc_lock>
 8010cc0:	4a1d      	ldr	r2, [pc, #116]	@ (8010d38 <_free_r+0x90>)
 8010cc2:	6813      	ldr	r3, [r2, #0]
 8010cc4:	b933      	cbnz	r3, 8010cd4 <_free_r+0x2c>
 8010cc6:	6063      	str	r3, [r4, #4]
 8010cc8:	6014      	str	r4, [r2, #0]
 8010cca:	4628      	mov	r0, r5
 8010ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010cd0:	f7fe be62 	b.w	800f998 <__malloc_unlock>
 8010cd4:	42a3      	cmp	r3, r4
 8010cd6:	d908      	bls.n	8010cea <_free_r+0x42>
 8010cd8:	6820      	ldr	r0, [r4, #0]
 8010cda:	1821      	adds	r1, r4, r0
 8010cdc:	428b      	cmp	r3, r1
 8010cde:	bf01      	itttt	eq
 8010ce0:	6819      	ldreq	r1, [r3, #0]
 8010ce2:	685b      	ldreq	r3, [r3, #4]
 8010ce4:	1809      	addeq	r1, r1, r0
 8010ce6:	6021      	streq	r1, [r4, #0]
 8010ce8:	e7ed      	b.n	8010cc6 <_free_r+0x1e>
 8010cea:	461a      	mov	r2, r3
 8010cec:	685b      	ldr	r3, [r3, #4]
 8010cee:	b10b      	cbz	r3, 8010cf4 <_free_r+0x4c>
 8010cf0:	42a3      	cmp	r3, r4
 8010cf2:	d9fa      	bls.n	8010cea <_free_r+0x42>
 8010cf4:	6811      	ldr	r1, [r2, #0]
 8010cf6:	1850      	adds	r0, r2, r1
 8010cf8:	42a0      	cmp	r0, r4
 8010cfa:	d10b      	bne.n	8010d14 <_free_r+0x6c>
 8010cfc:	6820      	ldr	r0, [r4, #0]
 8010cfe:	4401      	add	r1, r0
 8010d00:	1850      	adds	r0, r2, r1
 8010d02:	4283      	cmp	r3, r0
 8010d04:	6011      	str	r1, [r2, #0]
 8010d06:	d1e0      	bne.n	8010cca <_free_r+0x22>
 8010d08:	6818      	ldr	r0, [r3, #0]
 8010d0a:	685b      	ldr	r3, [r3, #4]
 8010d0c:	6053      	str	r3, [r2, #4]
 8010d0e:	4408      	add	r0, r1
 8010d10:	6010      	str	r0, [r2, #0]
 8010d12:	e7da      	b.n	8010cca <_free_r+0x22>
 8010d14:	d902      	bls.n	8010d1c <_free_r+0x74>
 8010d16:	230c      	movs	r3, #12
 8010d18:	602b      	str	r3, [r5, #0]
 8010d1a:	e7d6      	b.n	8010cca <_free_r+0x22>
 8010d1c:	6820      	ldr	r0, [r4, #0]
 8010d1e:	1821      	adds	r1, r4, r0
 8010d20:	428b      	cmp	r3, r1
 8010d22:	bf04      	itt	eq
 8010d24:	6819      	ldreq	r1, [r3, #0]
 8010d26:	685b      	ldreq	r3, [r3, #4]
 8010d28:	6063      	str	r3, [r4, #4]
 8010d2a:	bf04      	itt	eq
 8010d2c:	1809      	addeq	r1, r1, r0
 8010d2e:	6021      	streq	r1, [r4, #0]
 8010d30:	6054      	str	r4, [r2, #4]
 8010d32:	e7ca      	b.n	8010cca <_free_r+0x22>
 8010d34:	bd38      	pop	{r3, r4, r5, pc}
 8010d36:	bf00      	nop
 8010d38:	20000840 	.word	0x20000840

08010d3c <malloc>:
 8010d3c:	4b02      	ldr	r3, [pc, #8]	@ (8010d48 <malloc+0xc>)
 8010d3e:	4601      	mov	r1, r0
 8010d40:	6818      	ldr	r0, [r3, #0]
 8010d42:	f7fe bb69 	b.w	800f418 <_malloc_r>
 8010d46:	bf00      	nop
 8010d48:	20000074 	.word	0x20000074

08010d4c <_Balloc>:
 8010d4c:	b570      	push	{r4, r5, r6, lr}
 8010d4e:	69c6      	ldr	r6, [r0, #28]
 8010d50:	4604      	mov	r4, r0
 8010d52:	460d      	mov	r5, r1
 8010d54:	b976      	cbnz	r6, 8010d74 <_Balloc+0x28>
 8010d56:	2010      	movs	r0, #16
 8010d58:	f7ff fff0 	bl	8010d3c <malloc>
 8010d5c:	4602      	mov	r2, r0
 8010d5e:	61e0      	str	r0, [r4, #28]
 8010d60:	b920      	cbnz	r0, 8010d6c <_Balloc+0x20>
 8010d62:	4b18      	ldr	r3, [pc, #96]	@ (8010dc4 <_Balloc+0x78>)
 8010d64:	4818      	ldr	r0, [pc, #96]	@ (8010dc8 <_Balloc+0x7c>)
 8010d66:	216b      	movs	r1, #107	@ 0x6b
 8010d68:	f7fe f88a 	bl	800ee80 <__assert_func>
 8010d6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010d70:	6006      	str	r6, [r0, #0]
 8010d72:	60c6      	str	r6, [r0, #12]
 8010d74:	69e6      	ldr	r6, [r4, #28]
 8010d76:	68f3      	ldr	r3, [r6, #12]
 8010d78:	b183      	cbz	r3, 8010d9c <_Balloc+0x50>
 8010d7a:	69e3      	ldr	r3, [r4, #28]
 8010d7c:	68db      	ldr	r3, [r3, #12]
 8010d7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010d82:	b9b8      	cbnz	r0, 8010db4 <_Balloc+0x68>
 8010d84:	2101      	movs	r1, #1
 8010d86:	fa01 f605 	lsl.w	r6, r1, r5
 8010d8a:	1d72      	adds	r2, r6, #5
 8010d8c:	0092      	lsls	r2, r2, #2
 8010d8e:	4620      	mov	r0, r4
 8010d90:	f000 fb7c 	bl	801148c <_calloc_r>
 8010d94:	b160      	cbz	r0, 8010db0 <_Balloc+0x64>
 8010d96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010d9a:	e00e      	b.n	8010dba <_Balloc+0x6e>
 8010d9c:	2221      	movs	r2, #33	@ 0x21
 8010d9e:	2104      	movs	r1, #4
 8010da0:	4620      	mov	r0, r4
 8010da2:	f000 fb73 	bl	801148c <_calloc_r>
 8010da6:	69e3      	ldr	r3, [r4, #28]
 8010da8:	60f0      	str	r0, [r6, #12]
 8010daa:	68db      	ldr	r3, [r3, #12]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d1e4      	bne.n	8010d7a <_Balloc+0x2e>
 8010db0:	2000      	movs	r0, #0
 8010db2:	bd70      	pop	{r4, r5, r6, pc}
 8010db4:	6802      	ldr	r2, [r0, #0]
 8010db6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010dba:	2300      	movs	r3, #0
 8010dbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010dc0:	e7f7      	b.n	8010db2 <_Balloc+0x66>
 8010dc2:	bf00      	nop
 8010dc4:	08012ed6 	.word	0x08012ed6
 8010dc8:	08012f56 	.word	0x08012f56

08010dcc <_Bfree>:
 8010dcc:	b570      	push	{r4, r5, r6, lr}
 8010dce:	69c6      	ldr	r6, [r0, #28]
 8010dd0:	4605      	mov	r5, r0
 8010dd2:	460c      	mov	r4, r1
 8010dd4:	b976      	cbnz	r6, 8010df4 <_Bfree+0x28>
 8010dd6:	2010      	movs	r0, #16
 8010dd8:	f7ff ffb0 	bl	8010d3c <malloc>
 8010ddc:	4602      	mov	r2, r0
 8010dde:	61e8      	str	r0, [r5, #28]
 8010de0:	b920      	cbnz	r0, 8010dec <_Bfree+0x20>
 8010de2:	4b09      	ldr	r3, [pc, #36]	@ (8010e08 <_Bfree+0x3c>)
 8010de4:	4809      	ldr	r0, [pc, #36]	@ (8010e0c <_Bfree+0x40>)
 8010de6:	218f      	movs	r1, #143	@ 0x8f
 8010de8:	f7fe f84a 	bl	800ee80 <__assert_func>
 8010dec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010df0:	6006      	str	r6, [r0, #0]
 8010df2:	60c6      	str	r6, [r0, #12]
 8010df4:	b13c      	cbz	r4, 8010e06 <_Bfree+0x3a>
 8010df6:	69eb      	ldr	r3, [r5, #28]
 8010df8:	6862      	ldr	r2, [r4, #4]
 8010dfa:	68db      	ldr	r3, [r3, #12]
 8010dfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010e00:	6021      	str	r1, [r4, #0]
 8010e02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010e06:	bd70      	pop	{r4, r5, r6, pc}
 8010e08:	08012ed6 	.word	0x08012ed6
 8010e0c:	08012f56 	.word	0x08012f56

08010e10 <__multadd>:
 8010e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e14:	690d      	ldr	r5, [r1, #16]
 8010e16:	4607      	mov	r7, r0
 8010e18:	460c      	mov	r4, r1
 8010e1a:	461e      	mov	r6, r3
 8010e1c:	f101 0c14 	add.w	ip, r1, #20
 8010e20:	2000      	movs	r0, #0
 8010e22:	f8dc 3000 	ldr.w	r3, [ip]
 8010e26:	b299      	uxth	r1, r3
 8010e28:	fb02 6101 	mla	r1, r2, r1, r6
 8010e2c:	0c1e      	lsrs	r6, r3, #16
 8010e2e:	0c0b      	lsrs	r3, r1, #16
 8010e30:	fb02 3306 	mla	r3, r2, r6, r3
 8010e34:	b289      	uxth	r1, r1
 8010e36:	3001      	adds	r0, #1
 8010e38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010e3c:	4285      	cmp	r5, r0
 8010e3e:	f84c 1b04 	str.w	r1, [ip], #4
 8010e42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010e46:	dcec      	bgt.n	8010e22 <__multadd+0x12>
 8010e48:	b30e      	cbz	r6, 8010e8e <__multadd+0x7e>
 8010e4a:	68a3      	ldr	r3, [r4, #8]
 8010e4c:	42ab      	cmp	r3, r5
 8010e4e:	dc19      	bgt.n	8010e84 <__multadd+0x74>
 8010e50:	6861      	ldr	r1, [r4, #4]
 8010e52:	4638      	mov	r0, r7
 8010e54:	3101      	adds	r1, #1
 8010e56:	f7ff ff79 	bl	8010d4c <_Balloc>
 8010e5a:	4680      	mov	r8, r0
 8010e5c:	b928      	cbnz	r0, 8010e6a <__multadd+0x5a>
 8010e5e:	4602      	mov	r2, r0
 8010e60:	4b0c      	ldr	r3, [pc, #48]	@ (8010e94 <__multadd+0x84>)
 8010e62:	480d      	ldr	r0, [pc, #52]	@ (8010e98 <__multadd+0x88>)
 8010e64:	21ba      	movs	r1, #186	@ 0xba
 8010e66:	f7fe f80b 	bl	800ee80 <__assert_func>
 8010e6a:	6922      	ldr	r2, [r4, #16]
 8010e6c:	3202      	adds	r2, #2
 8010e6e:	f104 010c 	add.w	r1, r4, #12
 8010e72:	0092      	lsls	r2, r2, #2
 8010e74:	300c      	adds	r0, #12
 8010e76:	f7fe f957 	bl	800f128 <memcpy>
 8010e7a:	4621      	mov	r1, r4
 8010e7c:	4638      	mov	r0, r7
 8010e7e:	f7ff ffa5 	bl	8010dcc <_Bfree>
 8010e82:	4644      	mov	r4, r8
 8010e84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010e88:	3501      	adds	r5, #1
 8010e8a:	615e      	str	r6, [r3, #20]
 8010e8c:	6125      	str	r5, [r4, #16]
 8010e8e:	4620      	mov	r0, r4
 8010e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e94:	08012f45 	.word	0x08012f45
 8010e98:	08012f56 	.word	0x08012f56

08010e9c <__hi0bits>:
 8010e9c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010ea0:	4603      	mov	r3, r0
 8010ea2:	bf36      	itet	cc
 8010ea4:	0403      	lslcc	r3, r0, #16
 8010ea6:	2000      	movcs	r0, #0
 8010ea8:	2010      	movcc	r0, #16
 8010eaa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010eae:	bf3c      	itt	cc
 8010eb0:	021b      	lslcc	r3, r3, #8
 8010eb2:	3008      	addcc	r0, #8
 8010eb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010eb8:	bf3c      	itt	cc
 8010eba:	011b      	lslcc	r3, r3, #4
 8010ebc:	3004      	addcc	r0, #4
 8010ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010ec2:	bf3c      	itt	cc
 8010ec4:	009b      	lslcc	r3, r3, #2
 8010ec6:	3002      	addcc	r0, #2
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	db05      	blt.n	8010ed8 <__hi0bits+0x3c>
 8010ecc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010ed0:	f100 0001 	add.w	r0, r0, #1
 8010ed4:	bf08      	it	eq
 8010ed6:	2020      	moveq	r0, #32
 8010ed8:	4770      	bx	lr

08010eda <__lo0bits>:
 8010eda:	6803      	ldr	r3, [r0, #0]
 8010edc:	4602      	mov	r2, r0
 8010ede:	f013 0007 	ands.w	r0, r3, #7
 8010ee2:	d00b      	beq.n	8010efc <__lo0bits+0x22>
 8010ee4:	07d9      	lsls	r1, r3, #31
 8010ee6:	d421      	bmi.n	8010f2c <__lo0bits+0x52>
 8010ee8:	0798      	lsls	r0, r3, #30
 8010eea:	bf49      	itett	mi
 8010eec:	085b      	lsrmi	r3, r3, #1
 8010eee:	089b      	lsrpl	r3, r3, #2
 8010ef0:	2001      	movmi	r0, #1
 8010ef2:	6013      	strmi	r3, [r2, #0]
 8010ef4:	bf5c      	itt	pl
 8010ef6:	6013      	strpl	r3, [r2, #0]
 8010ef8:	2002      	movpl	r0, #2
 8010efa:	4770      	bx	lr
 8010efc:	b299      	uxth	r1, r3
 8010efe:	b909      	cbnz	r1, 8010f04 <__lo0bits+0x2a>
 8010f00:	0c1b      	lsrs	r3, r3, #16
 8010f02:	2010      	movs	r0, #16
 8010f04:	b2d9      	uxtb	r1, r3
 8010f06:	b909      	cbnz	r1, 8010f0c <__lo0bits+0x32>
 8010f08:	3008      	adds	r0, #8
 8010f0a:	0a1b      	lsrs	r3, r3, #8
 8010f0c:	0719      	lsls	r1, r3, #28
 8010f0e:	bf04      	itt	eq
 8010f10:	091b      	lsreq	r3, r3, #4
 8010f12:	3004      	addeq	r0, #4
 8010f14:	0799      	lsls	r1, r3, #30
 8010f16:	bf04      	itt	eq
 8010f18:	089b      	lsreq	r3, r3, #2
 8010f1a:	3002      	addeq	r0, #2
 8010f1c:	07d9      	lsls	r1, r3, #31
 8010f1e:	d403      	bmi.n	8010f28 <__lo0bits+0x4e>
 8010f20:	085b      	lsrs	r3, r3, #1
 8010f22:	f100 0001 	add.w	r0, r0, #1
 8010f26:	d003      	beq.n	8010f30 <__lo0bits+0x56>
 8010f28:	6013      	str	r3, [r2, #0]
 8010f2a:	4770      	bx	lr
 8010f2c:	2000      	movs	r0, #0
 8010f2e:	4770      	bx	lr
 8010f30:	2020      	movs	r0, #32
 8010f32:	4770      	bx	lr

08010f34 <__i2b>:
 8010f34:	b510      	push	{r4, lr}
 8010f36:	460c      	mov	r4, r1
 8010f38:	2101      	movs	r1, #1
 8010f3a:	f7ff ff07 	bl	8010d4c <_Balloc>
 8010f3e:	4602      	mov	r2, r0
 8010f40:	b928      	cbnz	r0, 8010f4e <__i2b+0x1a>
 8010f42:	4b05      	ldr	r3, [pc, #20]	@ (8010f58 <__i2b+0x24>)
 8010f44:	4805      	ldr	r0, [pc, #20]	@ (8010f5c <__i2b+0x28>)
 8010f46:	f240 1145 	movw	r1, #325	@ 0x145
 8010f4a:	f7fd ff99 	bl	800ee80 <__assert_func>
 8010f4e:	2301      	movs	r3, #1
 8010f50:	6144      	str	r4, [r0, #20]
 8010f52:	6103      	str	r3, [r0, #16]
 8010f54:	bd10      	pop	{r4, pc}
 8010f56:	bf00      	nop
 8010f58:	08012f45 	.word	0x08012f45
 8010f5c:	08012f56 	.word	0x08012f56

08010f60 <__multiply>:
 8010f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f64:	4614      	mov	r4, r2
 8010f66:	690a      	ldr	r2, [r1, #16]
 8010f68:	6923      	ldr	r3, [r4, #16]
 8010f6a:	429a      	cmp	r2, r3
 8010f6c:	bfa8      	it	ge
 8010f6e:	4623      	movge	r3, r4
 8010f70:	460f      	mov	r7, r1
 8010f72:	bfa4      	itt	ge
 8010f74:	460c      	movge	r4, r1
 8010f76:	461f      	movge	r7, r3
 8010f78:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010f7c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010f80:	68a3      	ldr	r3, [r4, #8]
 8010f82:	6861      	ldr	r1, [r4, #4]
 8010f84:	eb0a 0609 	add.w	r6, sl, r9
 8010f88:	42b3      	cmp	r3, r6
 8010f8a:	b085      	sub	sp, #20
 8010f8c:	bfb8      	it	lt
 8010f8e:	3101      	addlt	r1, #1
 8010f90:	f7ff fedc 	bl	8010d4c <_Balloc>
 8010f94:	b930      	cbnz	r0, 8010fa4 <__multiply+0x44>
 8010f96:	4602      	mov	r2, r0
 8010f98:	4b44      	ldr	r3, [pc, #272]	@ (80110ac <__multiply+0x14c>)
 8010f9a:	4845      	ldr	r0, [pc, #276]	@ (80110b0 <__multiply+0x150>)
 8010f9c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010fa0:	f7fd ff6e 	bl	800ee80 <__assert_func>
 8010fa4:	f100 0514 	add.w	r5, r0, #20
 8010fa8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010fac:	462b      	mov	r3, r5
 8010fae:	2200      	movs	r2, #0
 8010fb0:	4543      	cmp	r3, r8
 8010fb2:	d321      	bcc.n	8010ff8 <__multiply+0x98>
 8010fb4:	f107 0114 	add.w	r1, r7, #20
 8010fb8:	f104 0214 	add.w	r2, r4, #20
 8010fbc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010fc0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010fc4:	9302      	str	r3, [sp, #8]
 8010fc6:	1b13      	subs	r3, r2, r4
 8010fc8:	3b15      	subs	r3, #21
 8010fca:	f023 0303 	bic.w	r3, r3, #3
 8010fce:	3304      	adds	r3, #4
 8010fd0:	f104 0715 	add.w	r7, r4, #21
 8010fd4:	42ba      	cmp	r2, r7
 8010fd6:	bf38      	it	cc
 8010fd8:	2304      	movcc	r3, #4
 8010fda:	9301      	str	r3, [sp, #4]
 8010fdc:	9b02      	ldr	r3, [sp, #8]
 8010fde:	9103      	str	r1, [sp, #12]
 8010fe0:	428b      	cmp	r3, r1
 8010fe2:	d80c      	bhi.n	8010ffe <__multiply+0x9e>
 8010fe4:	2e00      	cmp	r6, #0
 8010fe6:	dd03      	ble.n	8010ff0 <__multiply+0x90>
 8010fe8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d05b      	beq.n	80110a8 <__multiply+0x148>
 8010ff0:	6106      	str	r6, [r0, #16]
 8010ff2:	b005      	add	sp, #20
 8010ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ff8:	f843 2b04 	str.w	r2, [r3], #4
 8010ffc:	e7d8      	b.n	8010fb0 <__multiply+0x50>
 8010ffe:	f8b1 a000 	ldrh.w	sl, [r1]
 8011002:	f1ba 0f00 	cmp.w	sl, #0
 8011006:	d024      	beq.n	8011052 <__multiply+0xf2>
 8011008:	f104 0e14 	add.w	lr, r4, #20
 801100c:	46a9      	mov	r9, r5
 801100e:	f04f 0c00 	mov.w	ip, #0
 8011012:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011016:	f8d9 3000 	ldr.w	r3, [r9]
 801101a:	fa1f fb87 	uxth.w	fp, r7
 801101e:	b29b      	uxth	r3, r3
 8011020:	fb0a 330b 	mla	r3, sl, fp, r3
 8011024:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011028:	f8d9 7000 	ldr.w	r7, [r9]
 801102c:	4463      	add	r3, ip
 801102e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011032:	fb0a c70b 	mla	r7, sl, fp, ip
 8011036:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801103a:	b29b      	uxth	r3, r3
 801103c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011040:	4572      	cmp	r2, lr
 8011042:	f849 3b04 	str.w	r3, [r9], #4
 8011046:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801104a:	d8e2      	bhi.n	8011012 <__multiply+0xb2>
 801104c:	9b01      	ldr	r3, [sp, #4]
 801104e:	f845 c003 	str.w	ip, [r5, r3]
 8011052:	9b03      	ldr	r3, [sp, #12]
 8011054:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011058:	3104      	adds	r1, #4
 801105a:	f1b9 0f00 	cmp.w	r9, #0
 801105e:	d021      	beq.n	80110a4 <__multiply+0x144>
 8011060:	682b      	ldr	r3, [r5, #0]
 8011062:	f104 0c14 	add.w	ip, r4, #20
 8011066:	46ae      	mov	lr, r5
 8011068:	f04f 0a00 	mov.w	sl, #0
 801106c:	f8bc b000 	ldrh.w	fp, [ip]
 8011070:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011074:	fb09 770b 	mla	r7, r9, fp, r7
 8011078:	4457      	add	r7, sl
 801107a:	b29b      	uxth	r3, r3
 801107c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011080:	f84e 3b04 	str.w	r3, [lr], #4
 8011084:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011088:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801108c:	f8be 3000 	ldrh.w	r3, [lr]
 8011090:	fb09 330a 	mla	r3, r9, sl, r3
 8011094:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011098:	4562      	cmp	r2, ip
 801109a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801109e:	d8e5      	bhi.n	801106c <__multiply+0x10c>
 80110a0:	9f01      	ldr	r7, [sp, #4]
 80110a2:	51eb      	str	r3, [r5, r7]
 80110a4:	3504      	adds	r5, #4
 80110a6:	e799      	b.n	8010fdc <__multiply+0x7c>
 80110a8:	3e01      	subs	r6, #1
 80110aa:	e79b      	b.n	8010fe4 <__multiply+0x84>
 80110ac:	08012f45 	.word	0x08012f45
 80110b0:	08012f56 	.word	0x08012f56

080110b4 <__pow5mult>:
 80110b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110b8:	4615      	mov	r5, r2
 80110ba:	f012 0203 	ands.w	r2, r2, #3
 80110be:	4607      	mov	r7, r0
 80110c0:	460e      	mov	r6, r1
 80110c2:	d007      	beq.n	80110d4 <__pow5mult+0x20>
 80110c4:	4c25      	ldr	r4, [pc, #148]	@ (801115c <__pow5mult+0xa8>)
 80110c6:	3a01      	subs	r2, #1
 80110c8:	2300      	movs	r3, #0
 80110ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80110ce:	f7ff fe9f 	bl	8010e10 <__multadd>
 80110d2:	4606      	mov	r6, r0
 80110d4:	10ad      	asrs	r5, r5, #2
 80110d6:	d03d      	beq.n	8011154 <__pow5mult+0xa0>
 80110d8:	69fc      	ldr	r4, [r7, #28]
 80110da:	b97c      	cbnz	r4, 80110fc <__pow5mult+0x48>
 80110dc:	2010      	movs	r0, #16
 80110de:	f7ff fe2d 	bl	8010d3c <malloc>
 80110e2:	4602      	mov	r2, r0
 80110e4:	61f8      	str	r0, [r7, #28]
 80110e6:	b928      	cbnz	r0, 80110f4 <__pow5mult+0x40>
 80110e8:	4b1d      	ldr	r3, [pc, #116]	@ (8011160 <__pow5mult+0xac>)
 80110ea:	481e      	ldr	r0, [pc, #120]	@ (8011164 <__pow5mult+0xb0>)
 80110ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80110f0:	f7fd fec6 	bl	800ee80 <__assert_func>
 80110f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80110f8:	6004      	str	r4, [r0, #0]
 80110fa:	60c4      	str	r4, [r0, #12]
 80110fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011100:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011104:	b94c      	cbnz	r4, 801111a <__pow5mult+0x66>
 8011106:	f240 2171 	movw	r1, #625	@ 0x271
 801110a:	4638      	mov	r0, r7
 801110c:	f7ff ff12 	bl	8010f34 <__i2b>
 8011110:	2300      	movs	r3, #0
 8011112:	f8c8 0008 	str.w	r0, [r8, #8]
 8011116:	4604      	mov	r4, r0
 8011118:	6003      	str	r3, [r0, #0]
 801111a:	f04f 0900 	mov.w	r9, #0
 801111e:	07eb      	lsls	r3, r5, #31
 8011120:	d50a      	bpl.n	8011138 <__pow5mult+0x84>
 8011122:	4631      	mov	r1, r6
 8011124:	4622      	mov	r2, r4
 8011126:	4638      	mov	r0, r7
 8011128:	f7ff ff1a 	bl	8010f60 <__multiply>
 801112c:	4631      	mov	r1, r6
 801112e:	4680      	mov	r8, r0
 8011130:	4638      	mov	r0, r7
 8011132:	f7ff fe4b 	bl	8010dcc <_Bfree>
 8011136:	4646      	mov	r6, r8
 8011138:	106d      	asrs	r5, r5, #1
 801113a:	d00b      	beq.n	8011154 <__pow5mult+0xa0>
 801113c:	6820      	ldr	r0, [r4, #0]
 801113e:	b938      	cbnz	r0, 8011150 <__pow5mult+0x9c>
 8011140:	4622      	mov	r2, r4
 8011142:	4621      	mov	r1, r4
 8011144:	4638      	mov	r0, r7
 8011146:	f7ff ff0b 	bl	8010f60 <__multiply>
 801114a:	6020      	str	r0, [r4, #0]
 801114c:	f8c0 9000 	str.w	r9, [r0]
 8011150:	4604      	mov	r4, r0
 8011152:	e7e4      	b.n	801111e <__pow5mult+0x6a>
 8011154:	4630      	mov	r0, r6
 8011156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801115a:	bf00      	nop
 801115c:	08012fb0 	.word	0x08012fb0
 8011160:	08012ed6 	.word	0x08012ed6
 8011164:	08012f56 	.word	0x08012f56

08011168 <__lshift>:
 8011168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801116c:	460c      	mov	r4, r1
 801116e:	6849      	ldr	r1, [r1, #4]
 8011170:	6923      	ldr	r3, [r4, #16]
 8011172:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011176:	68a3      	ldr	r3, [r4, #8]
 8011178:	4607      	mov	r7, r0
 801117a:	4691      	mov	r9, r2
 801117c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011180:	f108 0601 	add.w	r6, r8, #1
 8011184:	42b3      	cmp	r3, r6
 8011186:	db0b      	blt.n	80111a0 <__lshift+0x38>
 8011188:	4638      	mov	r0, r7
 801118a:	f7ff fddf 	bl	8010d4c <_Balloc>
 801118e:	4605      	mov	r5, r0
 8011190:	b948      	cbnz	r0, 80111a6 <__lshift+0x3e>
 8011192:	4602      	mov	r2, r0
 8011194:	4b28      	ldr	r3, [pc, #160]	@ (8011238 <__lshift+0xd0>)
 8011196:	4829      	ldr	r0, [pc, #164]	@ (801123c <__lshift+0xd4>)
 8011198:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801119c:	f7fd fe70 	bl	800ee80 <__assert_func>
 80111a0:	3101      	adds	r1, #1
 80111a2:	005b      	lsls	r3, r3, #1
 80111a4:	e7ee      	b.n	8011184 <__lshift+0x1c>
 80111a6:	2300      	movs	r3, #0
 80111a8:	f100 0114 	add.w	r1, r0, #20
 80111ac:	f100 0210 	add.w	r2, r0, #16
 80111b0:	4618      	mov	r0, r3
 80111b2:	4553      	cmp	r3, sl
 80111b4:	db33      	blt.n	801121e <__lshift+0xb6>
 80111b6:	6920      	ldr	r0, [r4, #16]
 80111b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80111bc:	f104 0314 	add.w	r3, r4, #20
 80111c0:	f019 091f 	ands.w	r9, r9, #31
 80111c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80111c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80111cc:	d02b      	beq.n	8011226 <__lshift+0xbe>
 80111ce:	f1c9 0e20 	rsb	lr, r9, #32
 80111d2:	468a      	mov	sl, r1
 80111d4:	2200      	movs	r2, #0
 80111d6:	6818      	ldr	r0, [r3, #0]
 80111d8:	fa00 f009 	lsl.w	r0, r0, r9
 80111dc:	4310      	orrs	r0, r2
 80111de:	f84a 0b04 	str.w	r0, [sl], #4
 80111e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80111e6:	459c      	cmp	ip, r3
 80111e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80111ec:	d8f3      	bhi.n	80111d6 <__lshift+0x6e>
 80111ee:	ebac 0304 	sub.w	r3, ip, r4
 80111f2:	3b15      	subs	r3, #21
 80111f4:	f023 0303 	bic.w	r3, r3, #3
 80111f8:	3304      	adds	r3, #4
 80111fa:	f104 0015 	add.w	r0, r4, #21
 80111fe:	4584      	cmp	ip, r0
 8011200:	bf38      	it	cc
 8011202:	2304      	movcc	r3, #4
 8011204:	50ca      	str	r2, [r1, r3]
 8011206:	b10a      	cbz	r2, 801120c <__lshift+0xa4>
 8011208:	f108 0602 	add.w	r6, r8, #2
 801120c:	3e01      	subs	r6, #1
 801120e:	4638      	mov	r0, r7
 8011210:	612e      	str	r6, [r5, #16]
 8011212:	4621      	mov	r1, r4
 8011214:	f7ff fdda 	bl	8010dcc <_Bfree>
 8011218:	4628      	mov	r0, r5
 801121a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801121e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011222:	3301      	adds	r3, #1
 8011224:	e7c5      	b.n	80111b2 <__lshift+0x4a>
 8011226:	3904      	subs	r1, #4
 8011228:	f853 2b04 	ldr.w	r2, [r3], #4
 801122c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011230:	459c      	cmp	ip, r3
 8011232:	d8f9      	bhi.n	8011228 <__lshift+0xc0>
 8011234:	e7ea      	b.n	801120c <__lshift+0xa4>
 8011236:	bf00      	nop
 8011238:	08012f45 	.word	0x08012f45
 801123c:	08012f56 	.word	0x08012f56

08011240 <__mcmp>:
 8011240:	690a      	ldr	r2, [r1, #16]
 8011242:	4603      	mov	r3, r0
 8011244:	6900      	ldr	r0, [r0, #16]
 8011246:	1a80      	subs	r0, r0, r2
 8011248:	b530      	push	{r4, r5, lr}
 801124a:	d10e      	bne.n	801126a <__mcmp+0x2a>
 801124c:	3314      	adds	r3, #20
 801124e:	3114      	adds	r1, #20
 8011250:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011254:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011258:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801125c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011260:	4295      	cmp	r5, r2
 8011262:	d003      	beq.n	801126c <__mcmp+0x2c>
 8011264:	d205      	bcs.n	8011272 <__mcmp+0x32>
 8011266:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801126a:	bd30      	pop	{r4, r5, pc}
 801126c:	42a3      	cmp	r3, r4
 801126e:	d3f3      	bcc.n	8011258 <__mcmp+0x18>
 8011270:	e7fb      	b.n	801126a <__mcmp+0x2a>
 8011272:	2001      	movs	r0, #1
 8011274:	e7f9      	b.n	801126a <__mcmp+0x2a>
	...

08011278 <__mdiff>:
 8011278:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801127c:	4689      	mov	r9, r1
 801127e:	4606      	mov	r6, r0
 8011280:	4611      	mov	r1, r2
 8011282:	4648      	mov	r0, r9
 8011284:	4614      	mov	r4, r2
 8011286:	f7ff ffdb 	bl	8011240 <__mcmp>
 801128a:	1e05      	subs	r5, r0, #0
 801128c:	d112      	bne.n	80112b4 <__mdiff+0x3c>
 801128e:	4629      	mov	r1, r5
 8011290:	4630      	mov	r0, r6
 8011292:	f7ff fd5b 	bl	8010d4c <_Balloc>
 8011296:	4602      	mov	r2, r0
 8011298:	b928      	cbnz	r0, 80112a6 <__mdiff+0x2e>
 801129a:	4b3f      	ldr	r3, [pc, #252]	@ (8011398 <__mdiff+0x120>)
 801129c:	f240 2137 	movw	r1, #567	@ 0x237
 80112a0:	483e      	ldr	r0, [pc, #248]	@ (801139c <__mdiff+0x124>)
 80112a2:	f7fd fded 	bl	800ee80 <__assert_func>
 80112a6:	2301      	movs	r3, #1
 80112a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80112ac:	4610      	mov	r0, r2
 80112ae:	b003      	add	sp, #12
 80112b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112b4:	bfbc      	itt	lt
 80112b6:	464b      	movlt	r3, r9
 80112b8:	46a1      	movlt	r9, r4
 80112ba:	4630      	mov	r0, r6
 80112bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80112c0:	bfba      	itte	lt
 80112c2:	461c      	movlt	r4, r3
 80112c4:	2501      	movlt	r5, #1
 80112c6:	2500      	movge	r5, #0
 80112c8:	f7ff fd40 	bl	8010d4c <_Balloc>
 80112cc:	4602      	mov	r2, r0
 80112ce:	b918      	cbnz	r0, 80112d8 <__mdiff+0x60>
 80112d0:	4b31      	ldr	r3, [pc, #196]	@ (8011398 <__mdiff+0x120>)
 80112d2:	f240 2145 	movw	r1, #581	@ 0x245
 80112d6:	e7e3      	b.n	80112a0 <__mdiff+0x28>
 80112d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80112dc:	6926      	ldr	r6, [r4, #16]
 80112de:	60c5      	str	r5, [r0, #12]
 80112e0:	f109 0310 	add.w	r3, r9, #16
 80112e4:	f109 0514 	add.w	r5, r9, #20
 80112e8:	f104 0e14 	add.w	lr, r4, #20
 80112ec:	f100 0b14 	add.w	fp, r0, #20
 80112f0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80112f4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80112f8:	9301      	str	r3, [sp, #4]
 80112fa:	46d9      	mov	r9, fp
 80112fc:	f04f 0c00 	mov.w	ip, #0
 8011300:	9b01      	ldr	r3, [sp, #4]
 8011302:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011306:	f853 af04 	ldr.w	sl, [r3, #4]!
 801130a:	9301      	str	r3, [sp, #4]
 801130c:	fa1f f38a 	uxth.w	r3, sl
 8011310:	4619      	mov	r1, r3
 8011312:	b283      	uxth	r3, r0
 8011314:	1acb      	subs	r3, r1, r3
 8011316:	0c00      	lsrs	r0, r0, #16
 8011318:	4463      	add	r3, ip
 801131a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801131e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011322:	b29b      	uxth	r3, r3
 8011324:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011328:	4576      	cmp	r6, lr
 801132a:	f849 3b04 	str.w	r3, [r9], #4
 801132e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011332:	d8e5      	bhi.n	8011300 <__mdiff+0x88>
 8011334:	1b33      	subs	r3, r6, r4
 8011336:	3b15      	subs	r3, #21
 8011338:	f023 0303 	bic.w	r3, r3, #3
 801133c:	3415      	adds	r4, #21
 801133e:	3304      	adds	r3, #4
 8011340:	42a6      	cmp	r6, r4
 8011342:	bf38      	it	cc
 8011344:	2304      	movcc	r3, #4
 8011346:	441d      	add	r5, r3
 8011348:	445b      	add	r3, fp
 801134a:	461e      	mov	r6, r3
 801134c:	462c      	mov	r4, r5
 801134e:	4544      	cmp	r4, r8
 8011350:	d30e      	bcc.n	8011370 <__mdiff+0xf8>
 8011352:	f108 0103 	add.w	r1, r8, #3
 8011356:	1b49      	subs	r1, r1, r5
 8011358:	f021 0103 	bic.w	r1, r1, #3
 801135c:	3d03      	subs	r5, #3
 801135e:	45a8      	cmp	r8, r5
 8011360:	bf38      	it	cc
 8011362:	2100      	movcc	r1, #0
 8011364:	440b      	add	r3, r1
 8011366:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801136a:	b191      	cbz	r1, 8011392 <__mdiff+0x11a>
 801136c:	6117      	str	r7, [r2, #16]
 801136e:	e79d      	b.n	80112ac <__mdiff+0x34>
 8011370:	f854 1b04 	ldr.w	r1, [r4], #4
 8011374:	46e6      	mov	lr, ip
 8011376:	0c08      	lsrs	r0, r1, #16
 8011378:	fa1c fc81 	uxtah	ip, ip, r1
 801137c:	4471      	add	r1, lr
 801137e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011382:	b289      	uxth	r1, r1
 8011384:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011388:	f846 1b04 	str.w	r1, [r6], #4
 801138c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011390:	e7dd      	b.n	801134e <__mdiff+0xd6>
 8011392:	3f01      	subs	r7, #1
 8011394:	e7e7      	b.n	8011366 <__mdiff+0xee>
 8011396:	bf00      	nop
 8011398:	08012f45 	.word	0x08012f45
 801139c:	08012f56 	.word	0x08012f56

080113a0 <__d2b>:
 80113a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80113a4:	460f      	mov	r7, r1
 80113a6:	2101      	movs	r1, #1
 80113a8:	ec59 8b10 	vmov	r8, r9, d0
 80113ac:	4616      	mov	r6, r2
 80113ae:	f7ff fccd 	bl	8010d4c <_Balloc>
 80113b2:	4604      	mov	r4, r0
 80113b4:	b930      	cbnz	r0, 80113c4 <__d2b+0x24>
 80113b6:	4602      	mov	r2, r0
 80113b8:	4b23      	ldr	r3, [pc, #140]	@ (8011448 <__d2b+0xa8>)
 80113ba:	4824      	ldr	r0, [pc, #144]	@ (801144c <__d2b+0xac>)
 80113bc:	f240 310f 	movw	r1, #783	@ 0x30f
 80113c0:	f7fd fd5e 	bl	800ee80 <__assert_func>
 80113c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80113c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80113cc:	b10d      	cbz	r5, 80113d2 <__d2b+0x32>
 80113ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80113d2:	9301      	str	r3, [sp, #4]
 80113d4:	f1b8 0300 	subs.w	r3, r8, #0
 80113d8:	d023      	beq.n	8011422 <__d2b+0x82>
 80113da:	4668      	mov	r0, sp
 80113dc:	9300      	str	r3, [sp, #0]
 80113de:	f7ff fd7c 	bl	8010eda <__lo0bits>
 80113e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80113e6:	b1d0      	cbz	r0, 801141e <__d2b+0x7e>
 80113e8:	f1c0 0320 	rsb	r3, r0, #32
 80113ec:	fa02 f303 	lsl.w	r3, r2, r3
 80113f0:	430b      	orrs	r3, r1
 80113f2:	40c2      	lsrs	r2, r0
 80113f4:	6163      	str	r3, [r4, #20]
 80113f6:	9201      	str	r2, [sp, #4]
 80113f8:	9b01      	ldr	r3, [sp, #4]
 80113fa:	61a3      	str	r3, [r4, #24]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	bf0c      	ite	eq
 8011400:	2201      	moveq	r2, #1
 8011402:	2202      	movne	r2, #2
 8011404:	6122      	str	r2, [r4, #16]
 8011406:	b1a5      	cbz	r5, 8011432 <__d2b+0x92>
 8011408:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801140c:	4405      	add	r5, r0
 801140e:	603d      	str	r5, [r7, #0]
 8011410:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011414:	6030      	str	r0, [r6, #0]
 8011416:	4620      	mov	r0, r4
 8011418:	b003      	add	sp, #12
 801141a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801141e:	6161      	str	r1, [r4, #20]
 8011420:	e7ea      	b.n	80113f8 <__d2b+0x58>
 8011422:	a801      	add	r0, sp, #4
 8011424:	f7ff fd59 	bl	8010eda <__lo0bits>
 8011428:	9b01      	ldr	r3, [sp, #4]
 801142a:	6163      	str	r3, [r4, #20]
 801142c:	3020      	adds	r0, #32
 801142e:	2201      	movs	r2, #1
 8011430:	e7e8      	b.n	8011404 <__d2b+0x64>
 8011432:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011436:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801143a:	6038      	str	r0, [r7, #0]
 801143c:	6918      	ldr	r0, [r3, #16]
 801143e:	f7ff fd2d 	bl	8010e9c <__hi0bits>
 8011442:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011446:	e7e5      	b.n	8011414 <__d2b+0x74>
 8011448:	08012f45 	.word	0x08012f45
 801144c:	08012f56 	.word	0x08012f56

08011450 <_mprec_log10>:
 8011450:	2817      	cmp	r0, #23
 8011452:	b5d0      	push	{r4, r6, r7, lr}
 8011454:	4604      	mov	r4, r0
 8011456:	dc07      	bgt.n	8011468 <_mprec_log10+0x18>
 8011458:	4b09      	ldr	r3, [pc, #36]	@ (8011480 <_mprec_log10+0x30>)
 801145a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 801145e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011462:	ec41 0b10 	vmov	d0, r0, r1
 8011466:	bdd0      	pop	{r4, r6, r7, pc}
 8011468:	4906      	ldr	r1, [pc, #24]	@ (8011484 <_mprec_log10+0x34>)
 801146a:	4f07      	ldr	r7, [pc, #28]	@ (8011488 <_mprec_log10+0x38>)
 801146c:	2000      	movs	r0, #0
 801146e:	2600      	movs	r6, #0
 8011470:	4632      	mov	r2, r6
 8011472:	463b      	mov	r3, r7
 8011474:	f7ef f8b8 	bl	80005e8 <__aeabi_dmul>
 8011478:	3c01      	subs	r4, #1
 801147a:	d1f9      	bne.n	8011470 <_mprec_log10+0x20>
 801147c:	e7f1      	b.n	8011462 <_mprec_log10+0x12>
 801147e:	bf00      	nop
 8011480:	08012fe8 	.word	0x08012fe8
 8011484:	3ff00000 	.word	0x3ff00000
 8011488:	40240000 	.word	0x40240000

0801148c <_calloc_r>:
 801148c:	b570      	push	{r4, r5, r6, lr}
 801148e:	fba1 5402 	umull	r5, r4, r1, r2
 8011492:	b93c      	cbnz	r4, 80114a4 <_calloc_r+0x18>
 8011494:	4629      	mov	r1, r5
 8011496:	f7fd ffbf 	bl	800f418 <_malloc_r>
 801149a:	4606      	mov	r6, r0
 801149c:	b928      	cbnz	r0, 80114aa <_calloc_r+0x1e>
 801149e:	2600      	movs	r6, #0
 80114a0:	4630      	mov	r0, r6
 80114a2:	bd70      	pop	{r4, r5, r6, pc}
 80114a4:	220c      	movs	r2, #12
 80114a6:	6002      	str	r2, [r0, #0]
 80114a8:	e7f9      	b.n	801149e <_calloc_r+0x12>
 80114aa:	462a      	mov	r2, r5
 80114ac:	4621      	mov	r1, r4
 80114ae:	f7fd fdd9 	bl	800f064 <memset>
 80114b2:	e7f5      	b.n	80114a0 <_calloc_r+0x14>

080114b4 <_init>:
 80114b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114b6:	bf00      	nop
 80114b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80114ba:	bc08      	pop	{r3}
 80114bc:	469e      	mov	lr, r3
 80114be:	4770      	bx	lr

080114c0 <_fini>:
 80114c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114c2:	bf00      	nop
 80114c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80114c6:	bc08      	pop	{r3}
 80114c8:	469e      	mov	lr, r3
 80114ca:	4770      	bx	lr
