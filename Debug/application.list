
application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e690  08000190  08000190  00001190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000156c  0800e820  0800e820  0000f820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd8c  0800fd8c  00011068  2**0
                  CONTENTS
  4 .ARM          00000008  0800fd8c  0800fd8c  00010d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd94  0800fd94  00011068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd94  0800fd94  00010d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fd98  0800fd98  00010d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800fd9c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000604  20000068  0800fe04  00011068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000066c  0800fe04  0001166c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000231c0  00000000  00000000  00011098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004aaa  00000000  00000000  00034258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f00  00000000  00000000  00038d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001841  00000000  00000000  0003ac08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025e87  00000000  00000000  0003c449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002425a  00000000  00000000  000622d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e58f2  00000000  00000000  0008652a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016be1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008584  00000000  00000000  0016be60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001743e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e808 	.word	0x0800e808

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800e808 	.word	0x0800e808

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_ldivmod>:
 8000a0c:	b97b      	cbnz	r3, 8000a2e <__aeabi_ldivmod+0x22>
 8000a0e:	b972      	cbnz	r2, 8000a2e <__aeabi_ldivmod+0x22>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bfbe      	ittt	lt
 8000a14:	2000      	movlt	r0, #0
 8000a16:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000a1a:	e006      	blt.n	8000a2a <__aeabi_ldivmod+0x1e>
 8000a1c:	bf08      	it	eq
 8000a1e:	2800      	cmpeq	r0, #0
 8000a20:	bf1c      	itt	ne
 8000a22:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000a26:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a2a:	f000 b9b5 	b.w	8000d98 <__aeabi_idiv0>
 8000a2e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a32:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a36:	2900      	cmp	r1, #0
 8000a38:	db09      	blt.n	8000a4e <__aeabi_ldivmod+0x42>
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	db1a      	blt.n	8000a74 <__aeabi_ldivmod+0x68>
 8000a3e:	f000 f84d 	bl	8000adc <__udivmoddi4>
 8000a42:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a4a:	b004      	add	sp, #16
 8000a4c:	4770      	bx	lr
 8000a4e:	4240      	negs	r0, r0
 8000a50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	db1b      	blt.n	8000a90 <__aeabi_ldivmod+0x84>
 8000a58:	f000 f840 	bl	8000adc <__udivmoddi4>
 8000a5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a64:	b004      	add	sp, #16
 8000a66:	4240      	negs	r0, r0
 8000a68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a6c:	4252      	negs	r2, r2
 8000a6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a72:	4770      	bx	lr
 8000a74:	4252      	negs	r2, r2
 8000a76:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a7a:	f000 f82f 	bl	8000adc <__udivmoddi4>
 8000a7e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a86:	b004      	add	sp, #16
 8000a88:	4240      	negs	r0, r0
 8000a8a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a8e:	4770      	bx	lr
 8000a90:	4252      	negs	r2, r2
 8000a92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a96:	f000 f821 	bl	8000adc <__udivmoddi4>
 8000a9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa2:	b004      	add	sp, #16
 8000aa4:	4252      	negs	r2, r2
 8000aa6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	f000 b96a 	b.w	8000d98 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	460c      	mov	r4, r1
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d14e      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000ae8:	4694      	mov	ip, r2
 8000aea:	458c      	cmp	ip, r1
 8000aec:	4686      	mov	lr, r0
 8000aee:	fab2 f282 	clz	r2, r2
 8000af2:	d962      	bls.n	8000bba <__udivmoddi4+0xde>
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	4091      	lsls	r1, r2
 8000afc:	fa20 f303 	lsr.w	r3, r0, r3
 8000b00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b04:	4319      	orrs	r1, r3
 8000b06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0e:	fa1f f68c 	uxth.w	r6, ip
 8000b12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb04 f106 	mul.w	r1, r4, r6
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b32:	f080 8112 	bcs.w	8000d5a <__udivmoddi4+0x27e>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 810f 	bls.w	8000d5a <__udivmoddi4+0x27e>
 8000b3c:	3c02      	subs	r4, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a59      	subs	r1, r3, r1
 8000b42:	fa1f f38e 	uxth.w	r3, lr
 8000b46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b52:	fb00 f606 	mul.w	r6, r0, r6
 8000b56:	429e      	cmp	r6, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x94>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b62:	f080 80fc 	bcs.w	8000d5e <__udivmoddi4+0x282>
 8000b66:	429e      	cmp	r6, r3
 8000b68:	f240 80f9 	bls.w	8000d5e <__udivmoddi4+0x282>
 8000b6c:	4463      	add	r3, ip
 8000b6e:	3802      	subs	r0, #2
 8000b70:	1b9b      	subs	r3, r3, r6
 8000b72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b76:	2100      	movs	r1, #0
 8000b78:	b11d      	cbz	r5, 8000b82 <__udivmoddi4+0xa6>
 8000b7a:	40d3      	lsrs	r3, r2
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d905      	bls.n	8000b96 <__udivmoddi4+0xba>
 8000b8a:	b10d      	cbz	r5, 8000b90 <__udivmoddi4+0xb4>
 8000b8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b90:	2100      	movs	r1, #0
 8000b92:	4608      	mov	r0, r1
 8000b94:	e7f5      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000b96:	fab3 f183 	clz	r1, r3
 8000b9a:	2900      	cmp	r1, #0
 8000b9c:	d146      	bne.n	8000c2c <__udivmoddi4+0x150>
 8000b9e:	42a3      	cmp	r3, r4
 8000ba0:	d302      	bcc.n	8000ba8 <__udivmoddi4+0xcc>
 8000ba2:	4290      	cmp	r0, r2
 8000ba4:	f0c0 80f0 	bcc.w	8000d88 <__udivmoddi4+0x2ac>
 8000ba8:	1a86      	subs	r6, r0, r2
 8000baa:	eb64 0303 	sbc.w	r3, r4, r3
 8000bae:	2001      	movs	r0, #1
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d0e6      	beq.n	8000b82 <__udivmoddi4+0xa6>
 8000bb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb8:	e7e3      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	f040 8090 	bne.w	8000ce0 <__udivmoddi4+0x204>
 8000bc0:	eba1 040c 	sub.w	r4, r1, ip
 8000bc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc8:	fa1f f78c 	uxth.w	r7, ip
 8000bcc:	2101      	movs	r1, #1
 8000bce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bde:	fb07 f006 	mul.w	r0, r7, r6
 8000be2:	4298      	cmp	r0, r3
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x11c>
 8000be6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bea:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x11a>
 8000bf0:	4298      	cmp	r0, r3
 8000bf2:	f200 80cd 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bf6:	4626      	mov	r6, r4
 8000bf8:	1a1c      	subs	r4, r3, r0
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c02:	fb08 4410 	mls	r4, r8, r0, r4
 8000c06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c0a:	fb00 f707 	mul.w	r7, r0, r7
 8000c0e:	429f      	cmp	r7, r3
 8000c10:	d908      	bls.n	8000c24 <__udivmoddi4+0x148>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c1a:	d202      	bcs.n	8000c22 <__udivmoddi4+0x146>
 8000c1c:	429f      	cmp	r7, r3
 8000c1e:	f200 80b0 	bhi.w	8000d82 <__udivmoddi4+0x2a6>
 8000c22:	4620      	mov	r0, r4
 8000c24:	1bdb      	subs	r3, r3, r7
 8000c26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2a:	e7a5      	b.n	8000b78 <__udivmoddi4+0x9c>
 8000c2c:	f1c1 0620 	rsb	r6, r1, #32
 8000c30:	408b      	lsls	r3, r1
 8000c32:	fa22 f706 	lsr.w	r7, r2, r6
 8000c36:	431f      	orrs	r7, r3
 8000c38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c40:	ea43 030c 	orr.w	r3, r3, ip
 8000c44:	40f4      	lsrs	r4, r6
 8000c46:	fa00 f801 	lsl.w	r8, r0, r1
 8000c4a:	0c38      	lsrs	r0, r7, #16
 8000c4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c50:	fbb4 fef0 	udiv	lr, r4, r0
 8000c54:	fa1f fc87 	uxth.w	ip, r7
 8000c58:	fb00 441e 	mls	r4, r0, lr, r4
 8000c5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c60:	fb0e f90c 	mul.w	r9, lr, ip
 8000c64:	45a1      	cmp	r9, r4
 8000c66:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6a:	d90a      	bls.n	8000c82 <__udivmoddi4+0x1a6>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c72:	f080 8084 	bcs.w	8000d7e <__udivmoddi4+0x2a2>
 8000c76:	45a1      	cmp	r9, r4
 8000c78:	f240 8081 	bls.w	8000d7e <__udivmoddi4+0x2a2>
 8000c7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c80:	443c      	add	r4, r7
 8000c82:	eba4 0409 	sub.w	r4, r4, r9
 8000c86:	fa1f f983 	uxth.w	r9, r3
 8000c8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	d907      	bls.n	8000cae <__udivmoddi4+0x1d2>
 8000c9e:	193c      	adds	r4, r7, r4
 8000ca0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ca4:	d267      	bcs.n	8000d76 <__udivmoddi4+0x29a>
 8000ca6:	45a4      	cmp	ip, r4
 8000ca8:	d965      	bls.n	8000d76 <__udivmoddi4+0x29a>
 8000caa:	3b02      	subs	r3, #2
 8000cac:	443c      	add	r4, r7
 8000cae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cb2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cb6:	eba4 040c 	sub.w	r4, r4, ip
 8000cba:	429c      	cmp	r4, r3
 8000cbc:	46ce      	mov	lr, r9
 8000cbe:	469c      	mov	ip, r3
 8000cc0:	d351      	bcc.n	8000d66 <__udivmoddi4+0x28a>
 8000cc2:	d04e      	beq.n	8000d62 <__udivmoddi4+0x286>
 8000cc4:	b155      	cbz	r5, 8000cdc <__udivmoddi4+0x200>
 8000cc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cca:	eb64 040c 	sbc.w	r4, r4, ip
 8000cce:	fa04 f606 	lsl.w	r6, r4, r6
 8000cd2:	40cb      	lsrs	r3, r1
 8000cd4:	431e      	orrs	r6, r3
 8000cd6:	40cc      	lsrs	r4, r1
 8000cd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e750      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000ce0:	f1c2 0320 	rsb	r3, r2, #32
 8000ce4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cec:	fa24 f303 	lsr.w	r3, r4, r3
 8000cf0:	4094      	lsls	r4, r2
 8000cf2:	430c      	orrs	r4, r1
 8000cf4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cfc:	fa1f f78c 	uxth.w	r7, ip
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3110 	mls	r1, r8, r0, r3
 8000d08:	0c23      	lsrs	r3, r4, #16
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f107 	mul.w	r1, r0, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x24c>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d1e:	d22c      	bcs.n	8000d7a <__udivmoddi4+0x29e>
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d92a      	bls.n	8000d7a <__udivmoddi4+0x29e>
 8000d24:	3802      	subs	r0, #2
 8000d26:	4463      	add	r3, ip
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d30:	fb08 3311 	mls	r3, r8, r1, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb01 f307 	mul.w	r3, r1, r7
 8000d3c:	42a3      	cmp	r3, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x276>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d48:	d213      	bcs.n	8000d72 <__udivmoddi4+0x296>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d911      	bls.n	8000d72 <__udivmoddi4+0x296>
 8000d4e:	3902      	subs	r1, #2
 8000d50:	4464      	add	r4, ip
 8000d52:	1ae4      	subs	r4, r4, r3
 8000d54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d58:	e739      	b.n	8000bce <__udivmoddi4+0xf2>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	e6f0      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e706      	b.n	8000b70 <__udivmoddi4+0x94>
 8000d62:	45c8      	cmp	r8, r9
 8000d64:	d2ae      	bcs.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d6e:	3801      	subs	r0, #1
 8000d70:	e7a8      	b.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d72:	4631      	mov	r1, r6
 8000d74:	e7ed      	b.n	8000d52 <__udivmoddi4+0x276>
 8000d76:	4603      	mov	r3, r0
 8000d78:	e799      	b.n	8000cae <__udivmoddi4+0x1d2>
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	e7d4      	b.n	8000d28 <__udivmoddi4+0x24c>
 8000d7e:	46d6      	mov	lr, sl
 8000d80:	e77f      	b.n	8000c82 <__udivmoddi4+0x1a6>
 8000d82:	4463      	add	r3, ip
 8000d84:	3802      	subs	r0, #2
 8000d86:	e74d      	b.n	8000c24 <__udivmoddi4+0x148>
 8000d88:	4606      	mov	r6, r0
 8000d8a:	4623      	mov	r3, r4
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e70f      	b.n	8000bb0 <__udivmoddi4+0xd4>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	e730      	b.n	8000bf8 <__udivmoddi4+0x11c>
 8000d96:	bf00      	nop

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000da2:	463b      	mov	r3, r7
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
 8000db0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000db2:	4b29      	ldr	r3, [pc, #164]	@ (8000e58 <MX_ADC1_Init+0xbc>)
 8000db4:	4a29      	ldr	r2, [pc, #164]	@ (8000e5c <MX_ADC1_Init+0xc0>)
 8000db6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 8000db8:	4b27      	ldr	r3, [pc, #156]	@ (8000e58 <MX_ADC1_Init+0xbc>)
 8000dba:	f44f 12e0 	mov.w	r2, #1835008	@ 0x1c0000
 8000dbe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dc0:	4b25      	ldr	r3, [pc, #148]	@ (8000e58 <MX_ADC1_Init+0xbc>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dc6:	4b24      	ldr	r3, [pc, #144]	@ (8000e58 <MX_ADC1_Init+0xbc>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dcc:	4b22      	ldr	r3, [pc, #136]	@ (8000e58 <MX_ADC1_Init+0xbc>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dd2:	4b21      	ldr	r3, [pc, #132]	@ (8000e58 <MX_ADC1_Init+0xbc>)
 8000dd4:	2204      	movs	r2, #4
 8000dd6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e58 <MX_ADC1_Init+0xbc>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dde:	4b1e      	ldr	r3, [pc, #120]	@ (8000e58 <MX_ADC1_Init+0xbc>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000de4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e58 <MX_ADC1_Init+0xbc>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dea:	4b1b      	ldr	r3, [pc, #108]	@ (8000e58 <MX_ADC1_Init+0xbc>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000df2:	4b19      	ldr	r3, [pc, #100]	@ (8000e58 <MX_ADC1_Init+0xbc>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000df8:	4b17      	ldr	r3, [pc, #92]	@ (8000e58 <MX_ADC1_Init+0xbc>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dfe:	4b16      	ldr	r3, [pc, #88]	@ (8000e58 <MX_ADC1_Init+0xbc>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e06:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <MX_ADC1_Init+0xbc>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e0c:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <MX_ADC1_Init+0xbc>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e14:	4810      	ldr	r0, [pc, #64]	@ (8000e58 <MX_ADC1_Init+0xbc>)
 8000e16:	f008 fc15 	bl	8009644 <HAL_ADC_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000e20:	f007 f89a 	bl	8007f58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000e24:	4b0e      	ldr	r3, [pc, #56]	@ (8000e60 <MX_ADC1_Init+0xc4>)
 8000e26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e28:	2306      	movs	r3, #6
 8000e2a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000e2c:	2307      	movs	r3, #7
 8000e2e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e30:	237f      	movs	r3, #127	@ 0x7f
 8000e32:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e34:	2304      	movs	r3, #4
 8000e36:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e3c:	463b      	mov	r3, r7
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4805      	ldr	r0, [pc, #20]	@ (8000e58 <MX_ADC1_Init+0xbc>)
 8000e42:	f008 ffcb 	bl	8009ddc <HAL_ADC_ConfigChannel>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000e4c:	f007 f884 	bl	8007f58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000084 	.word	0x20000084
 8000e5c:	50040000 	.word	0x50040000
 8000e60:	3ef08000 	.word	0x3ef08000

08000e64 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b09e      	sub	sp, #120	@ 0x78
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e7c:	f107 0310 	add.w	r3, r7, #16
 8000e80:	2254      	movs	r2, #84	@ 0x54
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f00d fc84 	bl	800e792 <memset>
  if(adcHandle->Instance==ADC1)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a29      	ldr	r2, [pc, #164]	@ (8000f34 <HAL_ADC_MspInit+0xd0>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d14a      	bne.n	8000f2a <HAL_ADC_MspInit+0xc6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e94:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e98:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000e9a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e9e:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000ea8:	2308      	movs	r3, #8
 8000eaa:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000eac:	2307      	movs	r3, #7
 8000eae:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000eb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ebe:	f107 0310 	add.w	r3, r7, #16
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f00b fd68 	bl	800c998 <HAL_RCCEx_PeriphCLKConfig>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000ece:	f007 f843 	bl	8007f58 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ed2:	4b19      	ldr	r3, [pc, #100]	@ (8000f38 <HAL_ADC_MspInit+0xd4>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed6:	4a18      	ldr	r2, [pc, #96]	@ (8000f38 <HAL_ADC_MspInit+0xd4>)
 8000ed8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000edc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ede:	4b16      	ldr	r3, [pc, #88]	@ (8000f38 <HAL_ADC_MspInit+0xd4>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eea:	4b13      	ldr	r3, [pc, #76]	@ (8000f38 <HAL_ADC_MspInit+0xd4>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eee:	4a12      	ldr	r2, [pc, #72]	@ (8000f38 <HAL_ADC_MspInit+0xd4>)
 8000ef0:	f043 0302 	orr.w	r3, r3, #2
 8000ef4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ef6:	4b10      	ldr	r3, [pc, #64]	@ (8000f38 <HAL_ADC_MspInit+0xd4>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f02:	2301      	movs	r3, #1
 8000f04:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f06:	230b      	movs	r3, #11
 8000f08:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f12:	4619      	mov	r1, r3
 8000f14:	4809      	ldr	r0, [pc, #36]	@ (8000f3c <HAL_ADC_MspInit+0xd8>)
 8000f16:	f009 fdf9 	bl	800ab0c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	2012      	movs	r0, #18
 8000f20:	f009 fdbd 	bl	800aa9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000f24:	2012      	movs	r0, #18
 8000f26:	f009 fdd6 	bl	800aad6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	3778      	adds	r7, #120	@ 0x78
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	50040000 	.word	0x50040000
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	48000400 	.word	0x48000400

08000f40 <aesroundkeys>:
u4_t AESKEY[11 * 16 / sizeof(u4_t)];

// generate 1+10 roundkeys for encryption with 128-bit key
// read 128-bit key from AESKEY in MSBF, generate roundkey words in place
static void aesroundkeys()
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
	int i;
	u4_t b;

	for (i = 0; i < 4; i++) {
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	e021      	b.n	8000f90 <aesroundkeys+0x50>
		AESKEY[i] = swapmsbf(AESKEY[i]);
 8000f4c:	4a37      	ldr	r2, [pc, #220]	@ (800102c <aesroundkeys+0xec>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f54:	061a      	lsls	r2, r3, #24
 8000f56:	4935      	ldr	r1, [pc, #212]	@ (800102c <aesroundkeys+0xec>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f5e:	021b      	lsls	r3, r3, #8
 8000f60:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8000f64:	431a      	orrs	r2, r3
 8000f66:	4931      	ldr	r1, [pc, #196]	@ (800102c <aesroundkeys+0xec>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f6e:	0a1b      	lsrs	r3, r3, #8
 8000f70:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8000f74:	431a      	orrs	r2, r3
 8000f76:	492d      	ldr	r1, [pc, #180]	@ (800102c <aesroundkeys+0xec>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f7e:	0e1b      	lsrs	r3, r3, #24
 8000f80:	431a      	orrs	r2, r3
 8000f82:	492a      	ldr	r1, [pc, #168]	@ (800102c <aesroundkeys+0xec>)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i = 0; i < 4; i++) {
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	ddda      	ble.n	8000f4c <aesroundkeys+0xc>
	}

	b = AESKEY[3];
 8000f96:	4b25      	ldr	r3, [pc, #148]	@ (800102c <aesroundkeys+0xec>)
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	603b      	str	r3, [r7, #0]
	for (; i < 44; i++) {
 8000f9c:	e03c      	b.n	8001018 <aesroundkeys+0xd8>
		if (i % 4 == 0) {
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d127      	bne.n	8000ff8 <aesroundkeys+0xb8>
			// b = SubWord(RotWord(b)) xor Rcon[i/4]
			b = (AES_S[u1(b >> 16)] << 24) ^ (AES_S[u1(b >> 8)] << 16)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	0c1b      	lsrs	r3, r3, #16
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	461a      	mov	r2, r3
 8000fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001030 <aesroundkeys+0xf0>)
 8000fb2:	5c9b      	ldrb	r3, [r3, r2]
 8000fb4:	061a      	lsls	r2, r3, #24
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	@ (8001030 <aesroundkeys+0xf0>)
 8000fc0:	5c5b      	ldrb	r3, [r3, r1]
 8000fc2:	041b      	lsls	r3, r3, #16
 8000fc4:	405a      	eors	r2, r3
					^ (AES_S[u1(b)] << 8) ^ (AES_S[b >> 24])
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4b18      	ldr	r3, [pc, #96]	@ (8001030 <aesroundkeys+0xf0>)
 8000fce:	5c5b      	ldrb	r3, [r3, r1]
 8000fd0:	021b      	lsls	r3, r3, #8
 8000fd2:	4053      	eors	r3, r2
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	0e12      	lsrs	r2, r2, #24
 8000fd8:	4915      	ldr	r1, [pc, #84]	@ (8001030 <aesroundkeys+0xf0>)
 8000fda:	5c8a      	ldrb	r2, [r1, r2]
 8000fdc:	4053      	eors	r3, r2
 8000fde:	461a      	mov	r2, r3
					^ AES_RCON[(i - 4) / 4];
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3b04      	subs	r3, #4
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	da00      	bge.n	8000fea <aesroundkeys+0xaa>
 8000fe8:	3303      	adds	r3, #3
 8000fea:	109b      	asrs	r3, r3, #2
 8000fec:	4619      	mov	r1, r3
 8000fee:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <aesroundkeys+0xf4>)
 8000ff0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			b = (AES_S[u1(b >> 16)] << 24) ^ (AES_S[u1(b >> 8)] << 16)
 8000ff4:	4053      	eors	r3, r2
 8000ff6:	603b      	str	r3, [r7, #0]
		}
		AESKEY[i] = b ^= AESKEY[i - 4];
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b04      	subs	r3, #4
 8000ffc:	4a0b      	ldr	r2, [pc, #44]	@ (800102c <aesroundkeys+0xec>)
 8000ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	4053      	eors	r3, r2
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	4908      	ldr	r1, [pc, #32]	@ (800102c <aesroundkeys+0xec>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	683a      	ldr	r2, [r7, #0]
 800100e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (; i < 44; i++) {
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3301      	adds	r3, #1
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b2b      	cmp	r3, #43	@ 0x2b
 800101c:	ddbf      	ble.n	8000f9e <aesroundkeys+0x5e>
	}
}
 800101e:	bf00      	nop
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	200000f8 	.word	0x200000f8
 8001030:	0800eb80 	.word	0x0800eb80
 8001034:	0800eb58 	.word	0x0800eb58

08001038 <os_aes>:

u4_t os_aes(u1_t mode, xref2u1_t buf, u2_t len)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08c      	sub	sp, #48	@ 0x30
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	6039      	str	r1, [r7, #0]
 8001042:	71fb      	strb	r3, [r7, #7]
 8001044:	4613      	mov	r3, r2
 8001046:	80bb      	strh	r3, [r7, #4]

	aesroundkeys();
 8001048:	f7ff ff7a 	bl	8000f40 <aesroundkeys>

	if (mode & AES_MICNOAUX) {
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	f003 0308 	and.w	r3, r3, #8
 8001052:	2b00      	cmp	r3, #0
 8001054:	d010      	beq.n	8001078 <os_aes+0x40>
		AESAUX[0] = AESAUX[1] = AESAUX[2] = AESAUX[3] = 0;
 8001056:	4b5a      	ldr	r3, [pc, #360]	@ (80011c0 <os_aes+0x188>)
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	4b58      	ldr	r3, [pc, #352]	@ (80011c0 <os_aes+0x188>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	4a57      	ldr	r2, [pc, #348]	@ (80011c0 <os_aes+0x188>)
 8001062:	6093      	str	r3, [r2, #8]
 8001064:	4b56      	ldr	r3, [pc, #344]	@ (80011c0 <os_aes+0x188>)
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	4a55      	ldr	r2, [pc, #340]	@ (80011c0 <os_aes+0x188>)
 800106a:	6053      	str	r3, [r2, #4]
 800106c:	4b54      	ldr	r3, [pc, #336]	@ (80011c0 <os_aes+0x188>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	4a53      	ldr	r2, [pc, #332]	@ (80011c0 <os_aes+0x188>)
 8001072:	6013      	str	r3, [r2, #0]
 8001074:	f000 bc97 	b.w	80019a6 <os_aes+0x96e>
	} else {
		AESAUX[0] = swapmsbf(AESAUX[0]);
 8001078:	4b51      	ldr	r3, [pc, #324]	@ (80011c0 <os_aes+0x188>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	061a      	lsls	r2, r3, #24
 800107e:	4b50      	ldr	r3, [pc, #320]	@ (80011c0 <os_aes+0x188>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	021b      	lsls	r3, r3, #8
 8001084:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001088:	431a      	orrs	r2, r3
 800108a:	4b4d      	ldr	r3, [pc, #308]	@ (80011c0 <os_aes+0x188>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001094:	431a      	orrs	r2, r3
 8001096:	4b4a      	ldr	r3, [pc, #296]	@ (80011c0 <os_aes+0x188>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	0e1b      	lsrs	r3, r3, #24
 800109c:	4313      	orrs	r3, r2
 800109e:	4a48      	ldr	r2, [pc, #288]	@ (80011c0 <os_aes+0x188>)
 80010a0:	6013      	str	r3, [r2, #0]
		AESAUX[1] = swapmsbf(AESAUX[1]);
 80010a2:	4b47      	ldr	r3, [pc, #284]	@ (80011c0 <os_aes+0x188>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	061a      	lsls	r2, r3, #24
 80010a8:	4b45      	ldr	r3, [pc, #276]	@ (80011c0 <os_aes+0x188>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	021b      	lsls	r3, r3, #8
 80010ae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80010b2:	431a      	orrs	r2, r3
 80010b4:	4b42      	ldr	r3, [pc, #264]	@ (80011c0 <os_aes+0x188>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80010be:	431a      	orrs	r2, r3
 80010c0:	4b3f      	ldr	r3, [pc, #252]	@ (80011c0 <os_aes+0x188>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	0e1b      	lsrs	r3, r3, #24
 80010c6:	4313      	orrs	r3, r2
 80010c8:	4a3d      	ldr	r2, [pc, #244]	@ (80011c0 <os_aes+0x188>)
 80010ca:	6053      	str	r3, [r2, #4]
		AESAUX[2] = swapmsbf(AESAUX[2]);
 80010cc:	4b3c      	ldr	r3, [pc, #240]	@ (80011c0 <os_aes+0x188>)
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	061a      	lsls	r2, r3, #24
 80010d2:	4b3b      	ldr	r3, [pc, #236]	@ (80011c0 <os_aes+0x188>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80010dc:	431a      	orrs	r2, r3
 80010de:	4b38      	ldr	r3, [pc, #224]	@ (80011c0 <os_aes+0x188>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	0a1b      	lsrs	r3, r3, #8
 80010e4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80010e8:	431a      	orrs	r2, r3
 80010ea:	4b35      	ldr	r3, [pc, #212]	@ (80011c0 <os_aes+0x188>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	0e1b      	lsrs	r3, r3, #24
 80010f0:	4313      	orrs	r3, r2
 80010f2:	4a33      	ldr	r2, [pc, #204]	@ (80011c0 <os_aes+0x188>)
 80010f4:	6093      	str	r3, [r2, #8]
		AESAUX[3] = swapmsbf(AESAUX[3]);
 80010f6:	4b32      	ldr	r3, [pc, #200]	@ (80011c0 <os_aes+0x188>)
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	061a      	lsls	r2, r3, #24
 80010fc:	4b30      	ldr	r3, [pc, #192]	@ (80011c0 <os_aes+0x188>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	021b      	lsls	r3, r3, #8
 8001102:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001106:	431a      	orrs	r2, r3
 8001108:	4b2d      	ldr	r3, [pc, #180]	@ (80011c0 <os_aes+0x188>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001112:	431a      	orrs	r2, r3
 8001114:	4b2a      	ldr	r3, [pc, #168]	@ (80011c0 <os_aes+0x188>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	0e1b      	lsrs	r3, r3, #24
 800111a:	4313      	orrs	r3, r2
 800111c:	4a28      	ldr	r2, [pc, #160]	@ (80011c0 <os_aes+0x188>)
 800111e:	60d3      	str	r3, [r2, #12]
	}

	while ((signed char) len > 0) {
 8001120:	f000 bc41 	b.w	80019a6 <os_aes+0x96e>
		u4_t a0, a1, a2, a3;
		u4_t t0, t1, t2, t3;
		u4_t *ki, *ke;

		// load input block
		if ((mode & AES_CTR)
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	f003 0304 	and.w	r3, r3, #4
 800112a:	2b00      	cmp	r3, #0
 800112c:	d109      	bne.n	8001142 <os_aes+0x10a>
				|| ((mode & AES_MIC) && (mode & AES_MICNOAUX) == 0)) { // load CTR block or first MIC block
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d011      	beq.n	800115c <os_aes+0x124>
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 0308 	and.w	r3, r3, #8
 800113e:	2b00      	cmp	r3, #0
 8001140:	d10c      	bne.n	800115c <os_aes+0x124>
			a0 = AESAUX[0];
 8001142:	4b1f      	ldr	r3, [pc, #124]	@ (80011c0 <os_aes+0x188>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	62fb      	str	r3, [r7, #44]	@ 0x2c
			a1 = AESAUX[1];
 8001148:	4b1d      	ldr	r3, [pc, #116]	@ (80011c0 <os_aes+0x188>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	62bb      	str	r3, [r7, #40]	@ 0x28
			a2 = AESAUX[2];
 800114e:	4b1c      	ldr	r3, [pc, #112]	@ (80011c0 <os_aes+0x188>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	627b      	str	r3, [r7, #36]	@ 0x24
			a3 = AESAUX[3];
 8001154:	4b1a      	ldr	r3, [pc, #104]	@ (80011c0 <os_aes+0x188>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	623b      	str	r3, [r7, #32]
 800115a:	e062      	b.n	8001222 <os_aes+0x1ea>
		} else if ((mode & AES_MIC) && len <= 16) { // last MIC block
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d016      	beq.n	8001194 <os_aes+0x15c>
 8001166:	88bb      	ldrh	r3, [r7, #4]
 8001168:	2b10      	cmp	r3, #16
 800116a:	d813      	bhi.n	8001194 <os_aes+0x15c>
			a0 = a1 = a2 = a3 = 0; // load null block
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
 8001170:	6a3b      	ldr	r3, [r7, #32]
 8001172:	627b      	str	r3, [r7, #36]	@ 0x24
 8001174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001176:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800117a:	62fb      	str	r3, [r7, #44]	@ 0x2c
			mode |= ((len == 16) ? 1 : 2) << 4; // set MICSUB: CMAC subkey K1 or K2
 800117c:	88bb      	ldrh	r3, [r7, #4]
 800117e:	2b10      	cmp	r3, #16
 8001180:	d101      	bne.n	8001186 <os_aes+0x14e>
 8001182:	2210      	movs	r2, #16
 8001184:	e000      	b.n	8001188 <os_aes+0x150>
 8001186:	2220      	movs	r2, #32
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	4313      	orrs	r3, r2
 800118e:	b25b      	sxtb	r3, r3
 8001190:	71fb      	strb	r3, [r7, #7]
 8001192:	e046      	b.n	8001222 <os_aes+0x1ea>
		} else
			LOADDATA: { // load data block (partially)
 8001194:	bf00      	nop
				for (t0 = 0; t0 < 16; t0++) {
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
 800119a:	e026      	b.n	80011ea <os_aes+0x1b2>
					t1 =
							(t1 << 8)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	021a      	lsls	r2, r3, #8
									| ((t0 < len) ? buf[t0] :
 80011a0:	88bb      	ldrh	r3, [r7, #4]
 80011a2:	69f9      	ldr	r1, [r7, #28]
 80011a4:	4299      	cmp	r1, r3
 80011a6:	d204      	bcs.n	80011b2 <os_aes+0x17a>
 80011a8:	6839      	ldr	r1, [r7, #0]
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	440b      	add	r3, r1
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	e009      	b.n	80011c6 <os_aes+0x18e>
										(t0 == len) ? 0x80 : 0x00);
 80011b2:	88bb      	ldrh	r3, [r7, #4]
									| ((t0 < len) ? buf[t0] :
 80011b4:	69f9      	ldr	r1, [r7, #28]
 80011b6:	4299      	cmp	r1, r3
 80011b8:	d104      	bne.n	80011c4 <os_aes+0x18c>
 80011ba:	2380      	movs	r3, #128	@ 0x80
 80011bc:	e003      	b.n	80011c6 <os_aes+0x18e>
 80011be:	bf00      	nop
 80011c0:	200000e8 	.word	0x200000e8
 80011c4:	2300      	movs	r3, #0
					t1 =
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
					if ((t0 & 3) == 3) {
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	f003 0303 	and.w	r3, r3, #3
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	d107      	bne.n	80011e4 <os_aes+0x1ac>
						a0 = a1;
 80011d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
						a1 = a2;
 80011d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011da:	62bb      	str	r3, [r7, #40]	@ 0x28
						a2 = a3;
 80011dc:	6a3b      	ldr	r3, [r7, #32]
 80011de:	627b      	str	r3, [r7, #36]	@ 0x24
						a3 = t1;
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	623b      	str	r3, [r7, #32]
				for (t0 = 0; t0 < 16; t0++) {
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	3301      	adds	r3, #1
 80011e8:	61fb      	str	r3, [r7, #28]
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	2b0f      	cmp	r3, #15
 80011ee:	d9d5      	bls.n	800119c <os_aes+0x164>
					}
				}
				if (mode & AES_MIC) {
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d013      	beq.n	8001222 <os_aes+0x1ea>
					a0 ^= AESAUX[0];
 80011fa:	4ba0      	ldr	r3, [pc, #640]	@ (800147c <os_aes+0x444>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001200:	4053      	eors	r3, r2
 8001202:	62fb      	str	r3, [r7, #44]	@ 0x2c
					a1 ^= AESAUX[1];
 8001204:	4b9d      	ldr	r3, [pc, #628]	@ (800147c <os_aes+0x444>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800120a:	4053      	eors	r3, r2
 800120c:	62bb      	str	r3, [r7, #40]	@ 0x28
					a2 ^= AESAUX[2];
 800120e:	4b9b      	ldr	r3, [pc, #620]	@ (800147c <os_aes+0x444>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001214:	4053      	eors	r3, r2
 8001216:	627b      	str	r3, [r7, #36]	@ 0x24
					a3 ^= AESAUX[3];
 8001218:	4b98      	ldr	r3, [pc, #608]	@ (800147c <os_aes+0x444>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	6a3a      	ldr	r2, [r7, #32]
 800121e:	4053      	eors	r3, r2
 8001220:	623b      	str	r3, [r7, #32]
				}
			}

		// perform AES encryption on block in a0-a3
		ki = AESKEY;
 8001222:	4b97      	ldr	r3, [pc, #604]	@ (8001480 <os_aes+0x448>)
 8001224:	617b      	str	r3, [r7, #20]
		ke = ki + 8 * 4;
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	3380      	adds	r3, #128	@ 0x80
 800122a:	613b      	str	r3, [r7, #16]
		a0 ^= ki[0];
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001232:	4053      	eors	r3, r2
 8001234:	62fb      	str	r3, [r7, #44]	@ 0x2c
		a1 ^= ki[1];
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	3304      	adds	r3, #4
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800123e:	4053      	eors	r3, r2
 8001240:	62bb      	str	r3, [r7, #40]	@ 0x28
		a2 ^= ki[2];
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	3308      	adds	r3, #8
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800124a:	4053      	eors	r3, r2
 800124c:	627b      	str	r3, [r7, #36]	@ 0x24
		a3 ^= ki[3];
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	330c      	adds	r3, #12
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6a3a      	ldr	r2, [r7, #32]
 8001256:	4053      	eors	r3, r2
 8001258:	623b      	str	r3, [r7, #32]
		do {
			AES_key4(t1, t2, t3, t0, 4);
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	61bb      	str	r3, [r7, #24]
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	61fb      	str	r3, [r7, #28]
			AES_expr4(t1, t2, t3, t0, a0);
 8001272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001274:	b2db      	uxtb	r3, r3
 8001276:	461a      	mov	r2, r3
 8001278:	4b82      	ldr	r3, [pc, #520]	@ (8001484 <os_aes+0x44c>)
 800127a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4053      	eors	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
 8001284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001286:	0a1b      	lsrs	r3, r3, #8
 8001288:	b2db      	uxtb	r3, r3
 800128a:	461a      	mov	r2, r3
 800128c:	4b7e      	ldr	r3, [pc, #504]	@ (8001488 <os_aes+0x450>)
 800128e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	4053      	eors	r3, r2
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800129a:	0c1b      	lsrs	r3, r3, #16
 800129c:	b2db      	uxtb	r3, r3
 800129e:	461a      	mov	r2, r3
 80012a0:	4b7a      	ldr	r3, [pc, #488]	@ (800148c <os_aes+0x454>)
 80012a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	4053      	eors	r3, r2
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012ae:	0e1b      	lsrs	r3, r3, #24
 80012b0:	4a77      	ldr	r2, [pc, #476]	@ (8001490 <os_aes+0x458>)
 80012b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b6:	69fa      	ldr	r2, [r7, #28]
 80012b8:	4053      	eors	r3, r2
 80012ba:	61fb      	str	r3, [r7, #28]
			AES_expr4(t2, t3, t0, t1, a1);
 80012bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b70      	ldr	r3, [pc, #448]	@ (8001484 <os_aes+0x44c>)
 80012c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c8:	68fa      	ldr	r2, [r7, #12]
 80012ca:	4053      	eors	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012d0:	0a1b      	lsrs	r3, r3, #8
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b6c      	ldr	r3, [pc, #432]	@ (8001488 <os_aes+0x450>)
 80012d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012dc:	68ba      	ldr	r2, [r7, #8]
 80012de:	4053      	eors	r3, r2
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012e4:	0c1b      	lsrs	r3, r3, #16
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b68      	ldr	r3, [pc, #416]	@ (800148c <os_aes+0x454>)
 80012ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f0:	69fa      	ldr	r2, [r7, #28]
 80012f2:	4053      	eors	r3, r2
 80012f4:	61fb      	str	r3, [r7, #28]
 80012f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012f8:	0e1b      	lsrs	r3, r3, #24
 80012fa:	4a65      	ldr	r2, [pc, #404]	@ (8001490 <os_aes+0x458>)
 80012fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4053      	eors	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
			AES_expr4(t3, t0, t1, t2, a2);
 8001306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001308:	b2db      	uxtb	r3, r3
 800130a:	461a      	mov	r2, r3
 800130c:	4b5d      	ldr	r3, [pc, #372]	@ (8001484 <os_aes+0x44c>)
 800130e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	4053      	eors	r3, r2
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131a:	0a1b      	lsrs	r3, r3, #8
 800131c:	b2db      	uxtb	r3, r3
 800131e:	461a      	mov	r2, r3
 8001320:	4b59      	ldr	r3, [pc, #356]	@ (8001488 <os_aes+0x450>)
 8001322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001326:	69fa      	ldr	r2, [r7, #28]
 8001328:	4053      	eors	r3, r2
 800132a:	61fb      	str	r3, [r7, #28]
 800132c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132e:	0c1b      	lsrs	r3, r3, #16
 8001330:	b2db      	uxtb	r3, r3
 8001332:	461a      	mov	r2, r3
 8001334:	4b55      	ldr	r3, [pc, #340]	@ (800148c <os_aes+0x454>)
 8001336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4053      	eors	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
 8001340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001342:	0e1b      	lsrs	r3, r3, #24
 8001344:	4a52      	ldr	r2, [pc, #328]	@ (8001490 <os_aes+0x458>)
 8001346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	4053      	eors	r3, r2
 800134e:	60fb      	str	r3, [r7, #12]
			AES_expr4(t0, t1, t2, t3, a3);
 8001350:	6a3b      	ldr	r3, [r7, #32]
 8001352:	b2db      	uxtb	r3, r3
 8001354:	461a      	mov	r2, r3
 8001356:	4b4b      	ldr	r3, [pc, #300]	@ (8001484 <os_aes+0x44c>)
 8001358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800135c:	69fa      	ldr	r2, [r7, #28]
 800135e:	4053      	eors	r3, r2
 8001360:	61fb      	str	r3, [r7, #28]
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	0a1b      	lsrs	r3, r3, #8
 8001366:	b2db      	uxtb	r3, r3
 8001368:	461a      	mov	r2, r3
 800136a:	4b47      	ldr	r3, [pc, #284]	@ (8001488 <os_aes+0x450>)
 800136c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4053      	eors	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	0c1b      	lsrs	r3, r3, #16
 800137a:	b2db      	uxtb	r3, r3
 800137c:	461a      	mov	r2, r3
 800137e:	4b43      	ldr	r3, [pc, #268]	@ (800148c <os_aes+0x454>)
 8001380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001384:	68fa      	ldr	r2, [r7, #12]
 8001386:	4053      	eors	r3, r2
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	6a3b      	ldr	r3, [r7, #32]
 800138c:	0e1b      	lsrs	r3, r3, #24
 800138e:	4a40      	ldr	r2, [pc, #256]	@ (8001490 <os_aes+0x458>)
 8001390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	4053      	eors	r3, r2
 8001398:	60bb      	str	r3, [r7, #8]

			AES_key4(a1, a2, a3, a0, 8);
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800139e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013aa:	623b      	str	r3, [r7, #32]
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			AES_expr4(a1, a2, a3, a0, t0);
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	461a      	mov	r2, r3
 80013b8:	4b32      	ldr	r3, [pc, #200]	@ (8001484 <os_aes+0x44c>)
 80013ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80013c0:	4053      	eors	r3, r2
 80013c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	0a1b      	lsrs	r3, r3, #8
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001488 <os_aes+0x450>)
 80013ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013d4:	4053      	eors	r3, r2
 80013d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	0c1b      	lsrs	r3, r3, #16
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	461a      	mov	r2, r3
 80013e0:	4b2a      	ldr	r3, [pc, #168]	@ (800148c <os_aes+0x454>)
 80013e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e6:	6a3a      	ldr	r2, [r7, #32]
 80013e8:	4053      	eors	r3, r2
 80013ea:	623b      	str	r3, [r7, #32]
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	0e1b      	lsrs	r3, r3, #24
 80013f0:	4a27      	ldr	r2, [pc, #156]	@ (8001490 <os_aes+0x458>)
 80013f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013f8:	4053      	eors	r3, r2
 80013fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
			AES_expr4(a2, a3, a0, a1, t1);
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	461a      	mov	r2, r3
 8001402:	4b20      	ldr	r3, [pc, #128]	@ (8001484 <os_aes+0x44c>)
 8001404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800140a:	4053      	eors	r3, r2
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	0a1b      	lsrs	r3, r3, #8
 8001412:	b2db      	uxtb	r3, r3
 8001414:	461a      	mov	r2, r3
 8001416:	4b1c      	ldr	r3, [pc, #112]	@ (8001488 <os_aes+0x450>)
 8001418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800141c:	6a3a      	ldr	r2, [r7, #32]
 800141e:	4053      	eors	r3, r2
 8001420:	623b      	str	r3, [r7, #32]
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	0c1b      	lsrs	r3, r3, #16
 8001426:	b2db      	uxtb	r3, r3
 8001428:	461a      	mov	r2, r3
 800142a:	4b18      	ldr	r3, [pc, #96]	@ (800148c <os_aes+0x454>)
 800142c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001430:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001432:	4053      	eors	r3, r2
 8001434:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	0e1b      	lsrs	r3, r3, #24
 800143a:	4a15      	ldr	r2, [pc, #84]	@ (8001490 <os_aes+0x458>)
 800143c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001440:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001442:	4053      	eors	r3, r2
 8001444:	62bb      	str	r3, [r7, #40]	@ 0x28
			AES_expr4(a3, a0, a1, a2, t2);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	461a      	mov	r2, r3
 800144c:	4b0d      	ldr	r3, [pc, #52]	@ (8001484 <os_aes+0x44c>)
 800144e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001452:	6a3a      	ldr	r2, [r7, #32]
 8001454:	4053      	eors	r3, r2
 8001456:	623b      	str	r3, [r7, #32]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	0a1b      	lsrs	r3, r3, #8
 800145c:	b2db      	uxtb	r3, r3
 800145e:	461a      	mov	r2, r3
 8001460:	4b09      	ldr	r3, [pc, #36]	@ (8001488 <os_aes+0x450>)
 8001462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001466:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001468:	4053      	eors	r3, r2
 800146a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	0c1b      	lsrs	r3, r3, #16
 8001470:	b2db      	uxtb	r3, r3
 8001472:	461a      	mov	r2, r3
 8001474:	4b05      	ldr	r3, [pc, #20]	@ (800148c <os_aes+0x454>)
 8001476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800147a:	e00b      	b.n	8001494 <os_aes+0x45c>
 800147c:	200000e8 	.word	0x200000e8
 8001480:	200000f8 	.word	0x200000f8
 8001484:	0800f880 	.word	0x0800f880
 8001488:	0800f480 	.word	0x0800f480
 800148c:	0800f080 	.word	0x0800f080
 8001490:	0800ec80 	.word	0x0800ec80
 8001494:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001496:	4053      	eors	r3, r2
 8001498:	62bb      	str	r3, [r7, #40]	@ 0x28
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	0e1b      	lsrs	r3, r3, #24
 800149e:	4aa1      	ldr	r2, [pc, #644]	@ (8001724 <os_aes+0x6ec>)
 80014a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014a6:	4053      	eors	r3, r2
 80014a8:	627b      	str	r3, [r7, #36]	@ 0x24
			AES_expr4(a0, a1, a2, a3, t3);
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b9d      	ldr	r3, [pc, #628]	@ (8001728 <os_aes+0x6f0>)
 80014b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014b8:	4053      	eors	r3, r2
 80014ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	0a1b      	lsrs	r3, r3, #8
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	461a      	mov	r2, r3
 80014c4:	4b99      	ldr	r3, [pc, #612]	@ (800172c <os_aes+0x6f4>)
 80014c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80014cc:	4053      	eors	r3, r2
 80014ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	0c1b      	lsrs	r3, r3, #16
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	461a      	mov	r2, r3
 80014d8:	4b95      	ldr	r3, [pc, #596]	@ (8001730 <os_aes+0x6f8>)
 80014da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014e0:	4053      	eors	r3, r2
 80014e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	0e1b      	lsrs	r3, r3, #24
 80014e8:	4a8e      	ldr	r2, [pc, #568]	@ (8001724 <os_aes+0x6ec>)
 80014ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ee:	6a3a      	ldr	r2, [r7, #32]
 80014f0:	4053      	eors	r3, r2
 80014f2:	623b      	str	r3, [r7, #32]
		} while ((ki += 8) < ke);
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	3320      	adds	r3, #32
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	429a      	cmp	r2, r3
 8001500:	f4ff aeab 	bcc.w	800125a <os_aes+0x222>

		AES_key4(t1, t2, t3, t0, 4);
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	695b      	ldr	r3, [r3, #20]
 8001508:	61bb      	str	r3, [r7, #24]
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	61fb      	str	r3, [r7, #28]
		AES_expr4(t1, t2, t3, t0, a0);
 800151c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800151e:	b2db      	uxtb	r3, r3
 8001520:	461a      	mov	r2, r3
 8001522:	4b81      	ldr	r3, [pc, #516]	@ (8001728 <os_aes+0x6f0>)
 8001524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4053      	eors	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
 800152e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001530:	0a1b      	lsrs	r3, r3, #8
 8001532:	b2db      	uxtb	r3, r3
 8001534:	461a      	mov	r2, r3
 8001536:	4b7d      	ldr	r3, [pc, #500]	@ (800172c <os_aes+0x6f4>)
 8001538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	4053      	eors	r3, r2
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001544:	0c1b      	lsrs	r3, r3, #16
 8001546:	b2db      	uxtb	r3, r3
 8001548:	461a      	mov	r2, r3
 800154a:	4b79      	ldr	r3, [pc, #484]	@ (8001730 <os_aes+0x6f8>)
 800154c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001550:	68ba      	ldr	r2, [r7, #8]
 8001552:	4053      	eors	r3, r2
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001558:	0e1b      	lsrs	r3, r3, #24
 800155a:	4a72      	ldr	r2, [pc, #456]	@ (8001724 <os_aes+0x6ec>)
 800155c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001560:	69fa      	ldr	r2, [r7, #28]
 8001562:	4053      	eors	r3, r2
 8001564:	61fb      	str	r3, [r7, #28]
		AES_expr4(t2, t3, t0, t1, a1);
 8001566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001568:	b2db      	uxtb	r3, r3
 800156a:	461a      	mov	r2, r3
 800156c:	4b6e      	ldr	r3, [pc, #440]	@ (8001728 <os_aes+0x6f0>)
 800156e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	4053      	eors	r3, r2
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800157a:	0a1b      	lsrs	r3, r3, #8
 800157c:	b2db      	uxtb	r3, r3
 800157e:	461a      	mov	r2, r3
 8001580:	4b6a      	ldr	r3, [pc, #424]	@ (800172c <os_aes+0x6f4>)
 8001582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	4053      	eors	r3, r2
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800158e:	0c1b      	lsrs	r3, r3, #16
 8001590:	b2db      	uxtb	r3, r3
 8001592:	461a      	mov	r2, r3
 8001594:	4b66      	ldr	r3, [pc, #408]	@ (8001730 <os_aes+0x6f8>)
 8001596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800159a:	69fa      	ldr	r2, [r7, #28]
 800159c:	4053      	eors	r3, r2
 800159e:	61fb      	str	r3, [r7, #28]
 80015a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015a2:	0e1b      	lsrs	r3, r3, #24
 80015a4:	4a5f      	ldr	r2, [pc, #380]	@ (8001724 <os_aes+0x6ec>)
 80015a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4053      	eors	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
		AES_expr4(t3, t0, t1, t2, a2);
 80015b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b5c      	ldr	r3, [pc, #368]	@ (8001728 <os_aes+0x6f0>)
 80015b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015bc:	68ba      	ldr	r2, [r7, #8]
 80015be:	4053      	eors	r3, r2
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c4:	0a1b      	lsrs	r3, r3, #8
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b58      	ldr	r3, [pc, #352]	@ (800172c <os_aes+0x6f4>)
 80015cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d0:	69fa      	ldr	r2, [r7, #28]
 80015d2:	4053      	eors	r3, r2
 80015d4:	61fb      	str	r3, [r7, #28]
 80015d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d8:	0c1b      	lsrs	r3, r3, #16
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	461a      	mov	r2, r3
 80015de:	4b54      	ldr	r3, [pc, #336]	@ (8001730 <os_aes+0x6f8>)
 80015e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4053      	eors	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
 80015ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ec:	0e1b      	lsrs	r3, r3, #24
 80015ee:	4a4d      	ldr	r2, [pc, #308]	@ (8001724 <os_aes+0x6ec>)
 80015f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	4053      	eors	r3, r2
 80015f8:	60fb      	str	r3, [r7, #12]
		AES_expr4(t0, t1, t2, t3, a3);
 80015fa:	6a3b      	ldr	r3, [r7, #32]
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	461a      	mov	r2, r3
 8001600:	4b49      	ldr	r3, [pc, #292]	@ (8001728 <os_aes+0x6f0>)
 8001602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001606:	69fa      	ldr	r2, [r7, #28]
 8001608:	4053      	eors	r3, r2
 800160a:	61fb      	str	r3, [r7, #28]
 800160c:	6a3b      	ldr	r3, [r7, #32]
 800160e:	0a1b      	lsrs	r3, r3, #8
 8001610:	b2db      	uxtb	r3, r3
 8001612:	461a      	mov	r2, r3
 8001614:	4b45      	ldr	r3, [pc, #276]	@ (800172c <os_aes+0x6f4>)
 8001616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4053      	eors	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
 8001620:	6a3b      	ldr	r3, [r7, #32]
 8001622:	0c1b      	lsrs	r3, r3, #16
 8001624:	b2db      	uxtb	r3, r3
 8001626:	461a      	mov	r2, r3
 8001628:	4b41      	ldr	r3, [pc, #260]	@ (8001730 <os_aes+0x6f8>)
 800162a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	4053      	eors	r3, r2
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	6a3b      	ldr	r3, [r7, #32]
 8001636:	0e1b      	lsrs	r3, r3, #24
 8001638:	4a3a      	ldr	r2, [pc, #232]	@ (8001724 <os_aes+0x6ec>)
 800163a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	4053      	eors	r3, r2
 8001642:	60bb      	str	r3, [r7, #8]

		AES_expr(a0, t0, t1, t2, t3, 8);
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	0e1b      	lsrs	r3, r3, #24
 800164e:	4a39      	ldr	r2, [pc, #228]	@ (8001734 <os_aes+0x6fc>)
 8001650:	5cd3      	ldrb	r3, [r2, r3]
 8001652:	061b      	lsls	r3, r3, #24
 8001654:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001656:	4053      	eors	r3, r2
 8001658:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	0c1b      	lsrs	r3, r3, #16
 800165e:	b2db      	uxtb	r3, r3
 8001660:	461a      	mov	r2, r3
 8001662:	4b34      	ldr	r3, [pc, #208]	@ (8001734 <os_aes+0x6fc>)
 8001664:	5c9b      	ldrb	r3, [r3, r2]
 8001666:	041b      	lsls	r3, r3, #16
 8001668:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800166a:	4053      	eors	r3, r2
 800166c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	b2db      	uxtb	r3, r3
 8001674:	461a      	mov	r2, r3
 8001676:	4b2f      	ldr	r3, [pc, #188]	@ (8001734 <os_aes+0x6fc>)
 8001678:	5c9b      	ldrb	r3, [r3, r2]
 800167a:	021b      	lsls	r3, r3, #8
 800167c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800167e:	4053      	eors	r3, r2
 8001680:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	b2db      	uxtb	r3, r3
 8001686:	461a      	mov	r2, r3
 8001688:	4b2a      	ldr	r3, [pc, #168]	@ (8001734 <os_aes+0x6fc>)
 800168a:	5c9b      	ldrb	r3, [r3, r2]
 800168c:	461a      	mov	r2, r3
 800168e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001690:	4053      	eors	r3, r2
 8001692:	62fb      	str	r3, [r7, #44]	@ 0x2c
		AES_expr(a1, t1, t2, t3, t0, 9);
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001698:	62bb      	str	r3, [r7, #40]	@ 0x28
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	0e1b      	lsrs	r3, r3, #24
 800169e:	4a25      	ldr	r2, [pc, #148]	@ (8001734 <os_aes+0x6fc>)
 80016a0:	5cd3      	ldrb	r3, [r2, r3]
 80016a2:	061b      	lsls	r3, r3, #24
 80016a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80016a6:	4053      	eors	r3, r2
 80016a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	0c1b      	lsrs	r3, r3, #16
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b20      	ldr	r3, [pc, #128]	@ (8001734 <os_aes+0x6fc>)
 80016b4:	5c9b      	ldrb	r3, [r3, r2]
 80016b6:	041b      	lsls	r3, r3, #16
 80016b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80016ba:	4053      	eors	r3, r2
 80016bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	0a1b      	lsrs	r3, r3, #8
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	461a      	mov	r2, r3
 80016c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001734 <os_aes+0x6fc>)
 80016c8:	5c9b      	ldrb	r3, [r3, r2]
 80016ca:	021b      	lsls	r3, r3, #8
 80016cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80016ce:	4053      	eors	r3, r2
 80016d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	461a      	mov	r2, r3
 80016d8:	4b16      	ldr	r3, [pc, #88]	@ (8001734 <os_aes+0x6fc>)
 80016da:	5c9b      	ldrb	r3, [r3, r2]
 80016dc:	461a      	mov	r2, r3
 80016de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016e0:	4053      	eors	r3, r2
 80016e2:	62bb      	str	r3, [r7, #40]	@ 0x28
		AES_expr(a2, t2, t3, t0, t1, 10);
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	0e1b      	lsrs	r3, r3, #24
 80016ee:	4a11      	ldr	r2, [pc, #68]	@ (8001734 <os_aes+0x6fc>)
 80016f0:	5cd3      	ldrb	r3, [r2, r3]
 80016f2:	061b      	lsls	r3, r3, #24
 80016f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016f6:	4053      	eors	r3, r2
 80016f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	0c1b      	lsrs	r3, r3, #16
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	461a      	mov	r2, r3
 8001702:	4b0c      	ldr	r3, [pc, #48]	@ (8001734 <os_aes+0x6fc>)
 8001704:	5c9b      	ldrb	r3, [r3, r2]
 8001706:	041b      	lsls	r3, r3, #16
 8001708:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800170a:	4053      	eors	r3, r2
 800170c:	627b      	str	r3, [r7, #36]	@ 0x24
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	0a1b      	lsrs	r3, r3, #8
 8001712:	b2db      	uxtb	r3, r3
 8001714:	461a      	mov	r2, r3
 8001716:	4b07      	ldr	r3, [pc, #28]	@ (8001734 <os_aes+0x6fc>)
 8001718:	5c9b      	ldrb	r3, [r3, r2]
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800171e:	4053      	eors	r3, r2
 8001720:	e00a      	b.n	8001738 <os_aes+0x700>
 8001722:	bf00      	nop
 8001724:	0800ec80 	.word	0x0800ec80
 8001728:	0800f880 	.word	0x0800f880
 800172c:	0800f480 	.word	0x0800f480
 8001730:	0800f080 	.word	0x0800f080
 8001734:	0800eb80 	.word	0x0800eb80
 8001738:	627b      	str	r3, [r7, #36]	@ 0x24
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	461a      	mov	r2, r3
 8001740:	4b5f      	ldr	r3, [pc, #380]	@ (80018c0 <os_aes+0x888>)
 8001742:	5c9b      	ldrb	r3, [r3, r2]
 8001744:	461a      	mov	r2, r3
 8001746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001748:	4053      	eors	r3, r2
 800174a:	627b      	str	r3, [r7, #36]	@ 0x24
		AES_expr(a3, t3, t0, t1, t2, 11);
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001750:	623b      	str	r3, [r7, #32]
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	0e1b      	lsrs	r3, r3, #24
 8001756:	4a5a      	ldr	r2, [pc, #360]	@ (80018c0 <os_aes+0x888>)
 8001758:	5cd3      	ldrb	r3, [r2, r3]
 800175a:	061b      	lsls	r3, r3, #24
 800175c:	6a3a      	ldr	r2, [r7, #32]
 800175e:	4053      	eors	r3, r2
 8001760:	623b      	str	r3, [r7, #32]
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	0c1b      	lsrs	r3, r3, #16
 8001766:	b2db      	uxtb	r3, r3
 8001768:	461a      	mov	r2, r3
 800176a:	4b55      	ldr	r3, [pc, #340]	@ (80018c0 <os_aes+0x888>)
 800176c:	5c9b      	ldrb	r3, [r3, r2]
 800176e:	041b      	lsls	r3, r3, #16
 8001770:	6a3a      	ldr	r2, [r7, #32]
 8001772:	4053      	eors	r3, r2
 8001774:	623b      	str	r3, [r7, #32]
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	0a1b      	lsrs	r3, r3, #8
 800177a:	b2db      	uxtb	r3, r3
 800177c:	461a      	mov	r2, r3
 800177e:	4b50      	ldr	r3, [pc, #320]	@ (80018c0 <os_aes+0x888>)
 8001780:	5c9b      	ldrb	r3, [r3, r2]
 8001782:	021b      	lsls	r3, r3, #8
 8001784:	6a3a      	ldr	r2, [r7, #32]
 8001786:	4053      	eors	r3, r2
 8001788:	623b      	str	r3, [r7, #32]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	b2db      	uxtb	r3, r3
 800178e:	461a      	mov	r2, r3
 8001790:	4b4b      	ldr	r3, [pc, #300]	@ (80018c0 <os_aes+0x888>)
 8001792:	5c9b      	ldrb	r3, [r3, r2]
 8001794:	461a      	mov	r2, r3
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	4053      	eors	r3, r2
 800179a:	623b      	str	r3, [r7, #32]
		// result of AES encryption in a0-a3

		if (mode & AES_MIC) {
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d056      	beq.n	8001854 <os_aes+0x81c>
			if ((t1 = (mode & AES_MICSUB) >> 4) != 0) { // last block
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	111b      	asrs	r3, r3, #4
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	61bb      	str	r3, [r7, #24]
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d041      	beq.n	800183a <os_aes+0x802>
				do {
					// compute CMAC subkey K1 and K2
					t0 = a0 >> 31; // save MSB
 80017b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017b8:	0fdb      	lsrs	r3, r3, #31
 80017ba:	61fb      	str	r3, [r7, #28]
					a0 = (a0 << 1) | (a1 >> 31);
 80017bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017be:	005a      	lsls	r2, r3, #1
 80017c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017c2:	0fdb      	lsrs	r3, r3, #31
 80017c4:	4313      	orrs	r3, r2
 80017c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
					a1 = (a1 << 1) | (a2 >> 31);
 80017c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017ca:	005a      	lsls	r2, r3, #1
 80017cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ce:	0fdb      	lsrs	r3, r3, #31
 80017d0:	4313      	orrs	r3, r2
 80017d2:	62bb      	str	r3, [r7, #40]	@ 0x28
					a2 = (a2 << 1) | (a3 >> 31);
 80017d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d6:	005a      	lsls	r2, r3, #1
 80017d8:	6a3b      	ldr	r3, [r7, #32]
 80017da:	0fdb      	lsrs	r3, r3, #31
 80017dc:	4313      	orrs	r3, r2
 80017de:	627b      	str	r3, [r7, #36]	@ 0x24
					a3 = (a3 << 1);
 80017e0:	6a3b      	ldr	r3, [r7, #32]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	623b      	str	r3, [r7, #32]
					if (t0)
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <os_aes+0x7bc>
						a3 ^= 0x87;
 80017ec:	6a3b      	ldr	r3, [r7, #32]
 80017ee:	f083 0387 	eor.w	r3, r3, #135	@ 0x87
 80017f2:	623b      	str	r3, [r7, #32]
				} while (--t1);
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	61bb      	str	r3, [r7, #24]
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1da      	bne.n	80017b6 <os_aes+0x77e>

				AESAUX[0] ^= a0;
 8001800:	4b30      	ldr	r3, [pc, #192]	@ (80018c4 <os_aes+0x88c>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001806:	4053      	eors	r3, r2
 8001808:	4a2e      	ldr	r2, [pc, #184]	@ (80018c4 <os_aes+0x88c>)
 800180a:	6013      	str	r3, [r2, #0]
				AESAUX[1] ^= a1;
 800180c:	4b2d      	ldr	r3, [pc, #180]	@ (80018c4 <os_aes+0x88c>)
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001812:	4053      	eors	r3, r2
 8001814:	4a2b      	ldr	r2, [pc, #172]	@ (80018c4 <os_aes+0x88c>)
 8001816:	6053      	str	r3, [r2, #4]
				AESAUX[2] ^= a2;
 8001818:	4b2a      	ldr	r3, [pc, #168]	@ (80018c4 <os_aes+0x88c>)
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181e:	4053      	eors	r3, r2
 8001820:	4a28      	ldr	r2, [pc, #160]	@ (80018c4 <os_aes+0x88c>)
 8001822:	6093      	str	r3, [r2, #8]
				AESAUX[3] ^= a3;
 8001824:	4b27      	ldr	r3, [pc, #156]	@ (80018c4 <os_aes+0x88c>)
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	6a3b      	ldr	r3, [r7, #32]
 800182a:	4053      	eors	r3, r2
 800182c:	4a25      	ldr	r2, [pc, #148]	@ (80018c4 <os_aes+0x88c>)
 800182e:	60d3      	str	r3, [r2, #12]
				mode &= ~AES_MICSUB;
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001836:	71fb      	strb	r3, [r7, #7]
				goto LOADDATA;
 8001838:	e4ad      	b.n	8001196 <os_aes+0x15e>
			} else {
				// save cipher block as new iv
				AESAUX[0] = a0;
 800183a:	4a22      	ldr	r2, [pc, #136]	@ (80018c4 <os_aes+0x88c>)
 800183c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800183e:	6013      	str	r3, [r2, #0]
				AESAUX[1] = a1;
 8001840:	4a20      	ldr	r2, [pc, #128]	@ (80018c4 <os_aes+0x88c>)
 8001842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001844:	6053      	str	r3, [r2, #4]
				AESAUX[2] = a2;
 8001846:	4a1f      	ldr	r2, [pc, #124]	@ (80018c4 <os_aes+0x88c>)
 8001848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184a:	6093      	str	r3, [r2, #8]
				AESAUX[3] = a3;
 800184c:	4a1d      	ldr	r2, [pc, #116]	@ (80018c4 <os_aes+0x88c>)
 800184e:	6a3b      	ldr	r3, [r7, #32]
 8001850:	60d3      	str	r3, [r2, #12]
 8001852:	e094      	b.n	800197e <os_aes+0x946>
			}
		} else { // CIPHER
			if (mode & AES_CTR) { // xor block (partially)
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	2b00      	cmp	r3, #0
 800185c:	d034      	beq.n	80018c8 <os_aes+0x890>
				t0 = (len > 16) ? 16 : len;
 800185e:	88bb      	ldrh	r3, [r7, #4]
 8001860:	2b10      	cmp	r3, #16
 8001862:	bf28      	it	cs
 8001864:	2310      	movcs	r3, #16
 8001866:	b29b      	uxth	r3, r3
 8001868:	61fb      	str	r3, [r7, #28]
				for (t1 = 0; t1 < t0; t1++) {
 800186a:	2300      	movs	r3, #0
 800186c:	61bb      	str	r3, [r7, #24]
 800186e:	e01d      	b.n	80018ac <os_aes+0x874>
					buf[t1] ^= (a0 >> 24);
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	4413      	add	r3, r2
 8001876:	7819      	ldrb	r1, [r3, #0]
 8001878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800187a:	0e1b      	lsrs	r3, r3, #24
 800187c:	b2da      	uxtb	r2, r3
 800187e:	6838      	ldr	r0, [r7, #0]
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	4403      	add	r3, r0
 8001884:	404a      	eors	r2, r1
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	701a      	strb	r2, [r3, #0]
					a0 <<= 8;
 800188a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800188c:	021b      	lsls	r3, r3, #8
 800188e:	62fb      	str	r3, [r7, #44]	@ 0x2c
					if ((t1 & 3) == 3) {
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	2b03      	cmp	r3, #3
 8001898:	d105      	bne.n	80018a6 <os_aes+0x86e>
						a0 = a1;
 800189a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800189c:	62fb      	str	r3, [r7, #44]	@ 0x2c
						a1 = a2;
 800189e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a0:	62bb      	str	r3, [r7, #40]	@ 0x28
						a2 = a3;
 80018a2:	6a3b      	ldr	r3, [r7, #32]
 80018a4:	627b      	str	r3, [r7, #36]	@ 0x24
				for (t1 = 0; t1 < t0; t1++) {
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	3301      	adds	r3, #1
 80018aa:	61bb      	str	r3, [r7, #24]
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d3dd      	bcc.n	8001870 <os_aes+0x838>
					}
				}
				// update counter
				AESAUX[3]++;
 80018b4:	4b03      	ldr	r3, [pc, #12]	@ (80018c4 <os_aes+0x88c>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	3301      	adds	r3, #1
 80018ba:	4a02      	ldr	r2, [pc, #8]	@ (80018c4 <os_aes+0x88c>)
 80018bc:	60d3      	str	r3, [r2, #12]
 80018be:	e05e      	b.n	800197e <os_aes+0x946>
 80018c0:	0800eb80 	.word	0x0800eb80
 80018c4:	200000e8 	.word	0x200000e8
			} else { // ECB
				// store block
				msbf4_write(buf + 0, a0);
 80018c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ca:	0e1b      	lsrs	r3, r3, #24
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	701a      	strb	r2, [r3, #0]
 80018d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018d4:	0c1a      	lsrs	r2, r3, #16
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	3301      	adds	r3, #1
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	701a      	strb	r2, [r3, #0]
 80018de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018e0:	0a1a      	lsrs	r2, r3, #8
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	3302      	adds	r3, #2
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	701a      	strb	r2, [r3, #0]
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	3303      	adds	r3, #3
 80018ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	701a      	strb	r2, [r3, #0]
				msbf4_write(buf + 4, a1);
 80018f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018f6:	0e1a      	lsrs	r2, r3, #24
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	3304      	adds	r3, #4
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	701a      	strb	r2, [r3, #0]
 8001900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001902:	0c1a      	lsrs	r2, r3, #16
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	3305      	adds	r3, #5
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	701a      	strb	r2, [r3, #0]
 800190c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800190e:	0a1a      	lsrs	r2, r3, #8
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	3306      	adds	r3, #6
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	701a      	strb	r2, [r3, #0]
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	3307      	adds	r3, #7
 800191c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	701a      	strb	r2, [r3, #0]
				msbf4_write(buf + 8, a2);
 8001922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001924:	0e1a      	lsrs	r2, r3, #24
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	3308      	adds	r3, #8
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	701a      	strb	r2, [r3, #0]
 800192e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001930:	0c1a      	lsrs	r2, r3, #16
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	3309      	adds	r3, #9
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	701a      	strb	r2, [r3, #0]
 800193a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193c:	0a1a      	lsrs	r2, r3, #8
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	330a      	adds	r3, #10
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	701a      	strb	r2, [r3, #0]
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	330b      	adds	r3, #11
 800194a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	701a      	strb	r2, [r3, #0]
				msbf4_write(buf + 12, a3);
 8001950:	6a3b      	ldr	r3, [r7, #32]
 8001952:	0e1a      	lsrs	r2, r3, #24
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	330c      	adds	r3, #12
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	701a      	strb	r2, [r3, #0]
 800195c:	6a3b      	ldr	r3, [r7, #32]
 800195e:	0c1a      	lsrs	r2, r3, #16
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	330d      	adds	r3, #13
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	701a      	strb	r2, [r3, #0]
 8001968:	6a3b      	ldr	r3, [r7, #32]
 800196a:	0a1a      	lsrs	r2, r3, #8
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	330e      	adds	r3, #14
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	701a      	strb	r2, [r3, #0]
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	330f      	adds	r3, #15
 8001978:	6a3a      	ldr	r2, [r7, #32]
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	701a      	strb	r2, [r3, #0]
			}
		}

		// update block state
		if ((mode & AES_MIC) == 0 || (mode & AES_MICNOAUX)) {
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d004      	beq.n	8001992 <os_aes+0x95a>
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	2b00      	cmp	r3, #0
 8001990:	d005      	beq.n	800199e <os_aes+0x966>
			buf += 16;
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	3310      	adds	r3, #16
 8001996:	603b      	str	r3, [r7, #0]
			len -= 16;
 8001998:	88bb      	ldrh	r3, [r7, #4]
 800199a:	3b10      	subs	r3, #16
 800199c:	80bb      	strh	r3, [r7, #4]
		}
		mode |= AES_MICNOAUX;
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	f043 0308 	orr.w	r3, r3, #8
 80019a4:	71fb      	strb	r3, [r7, #7]
	while ((signed char) len > 0) {
 80019a6:	88bb      	ldrh	r3, [r7, #4]
 80019a8:	b25b      	sxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f73f abba 	bgt.w	8001124 <os_aes+0xec>
	}
	return AESAUX[0];
 80019b0:	4b02      	ldr	r3, [pc, #8]	@ (80019bc <os_aes+0x984>)
 80019b2:	681b      	ldr	r3, [r3, #0]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3730      	adds	r7, #48	@ 0x30
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	200000e8 	.word	0x200000e8

080019c0 <bme68x_init>:
/* @brief This API reads the chip-id of the sensor which is the first step to
 * verify the sensor and also calibrates the sensor
 * As this API is the entry point, call this API before using other APIs.
 */
int8_t bme68x_init(struct bme68x_dev *dev)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	rslt = bme68x_soft_reset(dev);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 f901 	bl	8001bd0 <bme68x_soft_reset>
 80019ce:	4603      	mov	r3, r0
 80019d0:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME68X_OK) {
 80019d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d120      	bne.n	8001a1c <bme68x_init+0x5c>
		rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	20d0      	movs	r0, #208	@ 0xd0
 80019e2:	f000 f8b1 	bl	8001b48 <bme68x_get_regs>
 80019e6:	4603      	mov	r3, r0
 80019e8:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME68X_OK) {
 80019ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d114      	bne.n	8001a1c <bme68x_init+0x5c>
			if (dev->chip_id == BME68X_CHIP_ID) {
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b61      	cmp	r3, #97	@ 0x61
 80019f8:	d10e      	bne.n	8001a18 <bme68x_init+0x58>
				/* Read Variant ID */
				rslt = read_variant_id(dev);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f002 f84c 	bl	8003a98 <read_variant_id>
 8001a00:	4603      	mov	r3, r0
 8001a02:	73fb      	strb	r3, [r7, #15]

				if (rslt == BME68X_OK) {
 8001a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d107      	bne.n	8001a1c <bme68x_init+0x5c>
					/* Get the Calibration data */
					rslt = get_calib_data(dev);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f001 ff3f 	bl	8003890 <get_calib_data>
 8001a12:	4603      	mov	r3, r0
 8001a14:	73fb      	strb	r3, [r7, #15]
 8001a16:	e001      	b.n	8001a1c <bme68x_init+0x5c>
				}
			} else {
				rslt = BME68X_E_DEV_NOT_FOUND;
 8001a18:	23fd      	movs	r3, #253	@ 0xfd
 8001a1a:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return rslt;
 8001a1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <bme68x_set_regs>:
/*
 * @brief This API writes the given data to the register address of the sensor
 */
int8_t bme68x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data,
		uint32_t len, struct bme68x_dev *dev)
{
 8001a28:	b5b0      	push	{r4, r5, r7, lr}
 8001a2a:	b08a      	sub	sp, #40	@ 0x28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
 8001a34:	603b      	str	r3, [r7, #0]
	int8_t rslt;

	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	60da      	str	r2, [r3, #12]
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001a48:	6838      	ldr	r0, [r7, #0]
 8001a4a:	f001 fcfb 	bl	8003444 <null_ptr_check>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if ((rslt == BME68X_OK) && reg_addr && reg_data) {
 8001a54:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d16c      	bne.n	8001b36 <bme68x_set_regs+0x10e>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d069      	beq.n	8001b36 <bme68x_set_regs+0x10e>
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d066      	beq.n	8001b36 <bme68x_set_regs+0x10e>
		if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2))) {
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d05d      	beq.n	8001b2a <bme68x_set_regs+0x102>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b0a      	cmp	r3, #10
 8001a72:	d85a      	bhi.n	8001b2a <bme68x_set_regs+0x102>
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
 8001a74:	2300      	movs	r3, #0
 8001a76:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001a78:	e034      	b.n	8001ae4 <bme68x_set_regs+0xbc>
				if (dev->intf == BME68X_SPI_INTF) {
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	7b1b      	ldrb	r3, [r3, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d118      	bne.n	8001ab4 <bme68x_set_regs+0x8c>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 8001a82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	4413      	add	r3, r2
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	6839      	ldr	r1, [r7, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f001 fc18 	bl	80032c2 <set_mem_page>
 8001a92:	4603      	mov	r3, r0
 8001a94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8001a98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	781a      	ldrb	r2, [r3, #0]
 8001aa0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	3328      	adds	r3, #40	@ 0x28
 8001aac:	443b      	add	r3, r7
 8001aae:	f803 2c18 	strb.w	r2, [r3, #-24]
 8001ab2:	e009      	b.n	8001ac8 <bme68x_set_regs+0xa0>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
 8001ab4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	441a      	add	r2, r3
 8001aba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	7812      	ldrb	r2, [r2, #0]
 8001ac0:	3328      	adds	r3, #40	@ 0x28
 8001ac2:	443b      	add	r3, r7
 8001ac4:	f803 2c18 	strb.w	r2, [r3, #-24]
				}

				tmp_buff[(2 * index) + 1] = reg_data[index];
 8001ac8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	441a      	add	r2, r3
 8001ace:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	7812      	ldrb	r2, [r2, #0]
 8001ad6:	3328      	adds	r3, #40	@ 0x28
 8001ad8:	443b      	add	r3, r7
 8001ada:	f803 2c18 	strb.w	r2, [r3, #-24]
			for (index = 0; index < len; index++) {
 8001ade:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001ae4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d8c6      	bhi.n	8001a7a <bme68x_set_regs+0x52>
			}

			/* Write the interleaved array */
			if (rslt == BME68X_OK) {
 8001aec:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d11e      	bne.n	8001b32 <bme68x_set_regs+0x10a>
				dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1],
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8001af8:	7c38      	ldrb	r0, [r7, #16]
						(2 * len) - 1, dev->intf_ptr);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	005b      	lsls	r3, r3, #1
				dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1],
 8001afe:	1e5a      	subs	r2, r3, #1
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685d      	ldr	r5, [r3, #4]
 8001b04:	f107 0310 	add.w	r3, r7, #16
 8001b08:	1c59      	adds	r1, r3, #1
 8001b0a:	462b      	mov	r3, r5
 8001b0c:	47a0      	blx	r4
 8001b0e:	4603      	mov	r3, r0
 8001b10:	461a      	mov	r2, r3
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
				if (dev->intf_rslt != 0) {
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d007      	beq.n	8001b32 <bme68x_set_regs+0x10a>
					rslt = BME68X_E_COM_FAIL;
 8001b22:	23fe      	movs	r3, #254	@ 0xfe
 8001b24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (rslt == BME68X_OK) {
 8001b28:	e003      	b.n	8001b32 <bme68x_set_regs+0x10a>
				}
			}
		} else {
			rslt = BME68X_E_INVALID_LENGTH;
 8001b2a:	23fc      	movs	r3, #252	@ 0xfc
 8001b2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2))) {
 8001b30:	e004      	b.n	8001b3c <bme68x_set_regs+0x114>
			if (rslt == BME68X_OK) {
 8001b32:	bf00      	nop
		if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2))) {
 8001b34:	e002      	b.n	8001b3c <bme68x_set_regs+0x114>
		}
	} else {
		rslt = BME68X_E_NULL_PTR;
 8001b36:	23ff      	movs	r3, #255	@ 0xff
 8001b38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return rslt;
 8001b3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3728      	adds	r7, #40	@ 0x28
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bdb0      	pop	{r4, r5, r7, pc}

08001b48 <bme68x_get_regs>:
/*
 * @brief This API reads the data from the given register address of sensor.
 */
int8_t bme68x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len,
		struct bme68x_dev *dev)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b087      	sub	sp, #28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	603b      	str	r3, [r7, #0]
 8001b54:	4603      	mov	r3, r0
 8001b56:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001b58:	6838      	ldr	r0, [r7, #0]
 8001b5a:	f001 fc73 	bl	8003444 <null_ptr_check>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	75fb      	strb	r3, [r7, #23]
	if ((rslt == BME68X_OK) && reg_data) {
 8001b62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d12a      	bne.n	8001bc0 <bme68x_get_regs+0x78>
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d027      	beq.n	8001bc0 <bme68x_get_regs+0x78>
		if (dev->intf == BME68X_SPI_INTF) {
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	7b1b      	ldrb	r3, [r3, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d10e      	bne.n	8001b96 <bme68x_get_regs+0x4e>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
 8001b7a:	6839      	ldr	r1, [r7, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f001 fba0 	bl	80032c2 <set_mem_page>
 8001b82:	4603      	mov	r3, r0
 8001b84:	75fb      	strb	r3, [r7, #23]
			if (rslt == BME68X_OK) {
 8001b86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d103      	bne.n	8001b96 <bme68x_get_regs+0x4e>
				reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001b94:	73fb      	strb	r3, [r7, #15]
			}
		}

		dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	7bf8      	ldrb	r0, [r7, #15]
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	68b9      	ldr	r1, [r7, #8]
 8001ba4:	47a0      	blx	r4
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	461a      	mov	r2, r3
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		if (dev->intf_rslt != 0) {
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d004      	beq.n	8001bc4 <bme68x_get_regs+0x7c>
			rslt = BME68X_E_COM_FAIL;
 8001bba:	23fe      	movs	r3, #254	@ 0xfe
 8001bbc:	75fb      	strb	r3, [r7, #23]
		if (dev->intf_rslt != 0) {
 8001bbe:	e001      	b.n	8001bc4 <bme68x_get_regs+0x7c>
		}
	} else {
		rslt = BME68X_E_NULL_PTR;
 8001bc0:	23ff      	movs	r3, #255	@ 0xff
 8001bc2:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001bc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	371c      	adds	r7, #28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd90      	pop	{r4, r7, pc}

08001bd0 <bme68x_soft_reset>:

/*
 * @brief This API soft-resets the sensor.
 */
int8_t bme68x_soft_reset(struct bme68x_dev *dev)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 8001bd8:	23e0      	movs	r3, #224	@ 0xe0
 8001bda:	73bb      	strb	r3, [r7, #14]

	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 8001bdc:	23b6      	movs	r3, #182	@ 0xb6
 8001bde:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f001 fc2f 	bl	8003444 <null_ptr_check>
 8001be6:	4603      	mov	r3, r0
 8001be8:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME68X_OK) {
 8001bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d12b      	bne.n	8001c4a <bme68x_soft_reset+0x7a>
		if (dev->intf == BME68X_SPI_INTF) {
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	7b1b      	ldrb	r3, [r3, #12]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d104      	bne.n	8001c04 <bme68x_soft_reset+0x34>
			rslt = get_mem_page(dev);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f001 fbc6 	bl	800338c <get_mem_page>
 8001c00:	4603      	mov	r3, r0
 8001c02:	73fb      	strb	r3, [r7, #15]
		}

		/* Reset the device */
		if (rslt == BME68X_OK) {
 8001c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d11e      	bne.n	8001c4a <bme68x_soft_reset+0x7a>
			rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001c0c:	f107 010d 	add.w	r1, r7, #13
 8001c10:	f107 000e 	add.w	r0, r7, #14
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f7ff ff06 	bl	8001a28 <bme68x_set_regs>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	73fb      	strb	r3, [r7, #15]

			/* Wait for 5ms */
			dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	6852      	ldr	r2, [r2, #4]
 8001c28:	4611      	mov	r1, r2
 8001c2a:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001c2e:	4798      	blx	r3
			if (rslt == BME68X_OK) {
 8001c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d108      	bne.n	8001c4a <bme68x_soft_reset+0x7a>
				/* After reset get the memory page */
				if (dev->intf == BME68X_SPI_INTF) {
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	7b1b      	ldrb	r3, [r3, #12]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d104      	bne.n	8001c4a <bme68x_soft_reset+0x7a>
					rslt = get_mem_page(dev);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f001 fba3 	bl	800338c <get_mem_page>
 8001c46:	4603      	mov	r3, r0
 8001c48:	73fb      	strb	r3, [r7, #15]
				}
			}
		}
	}

	return rslt;
 8001c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <bme68x_set_conf>:

/*
 * @brief This API is used to set the oversampling, filter and odr configuration
 */
int8_t bme68x_set_conf(struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b088      	sub	sp, #32
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t odr20 = 0, odr3 = 1;
 8001c62:	2300      	movs	r3, #0
 8001c64:	77bb      	strb	r3, [r7, #30]
 8001c66:	2301      	movs	r3, #1
 8001c68:	777b      	strb	r3, [r7, #29]
	uint8_t current_op_mode;

	/* Register data starting from BME68X_REG_CTRL_GAS_1(0x71) up to BME68X_REG_CONFIG(0x75) */
	uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 8001c6a:	4a7c      	ldr	r2, [pc, #496]	@ (8001e5c <bme68x_set_conf+0x204>)
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c74:	6018      	str	r0, [r3, #0]
 8001c76:	3304      	adds	r3, #4
 8001c78:	7019      	strb	r1, [r3, #0]
	uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	2300      	movs	r3, #0
 8001c80:	743b      	strb	r3, [r7, #16]

	rslt = bme68x_get_op_mode(&current_op_mode, dev);
 8001c82:	f107 031c 	add.w	r3, r7, #28
 8001c86:	6839      	ldr	r1, [r7, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f000 f94a 	bl	8001f22 <bme68x_get_op_mode>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	77fb      	strb	r3, [r7, #31]
	if (rslt == BME68X_OK) {
 8001c92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d105      	bne.n	8001ca6 <bme68x_set_conf+0x4e>
		/* Configure only in the sleep mode */
		rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8001c9a:	6839      	ldr	r1, [r7, #0]
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	f000 f8df 	bl	8001e60 <bme68x_set_op_mode>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	77fb      	strb	r3, [r7, #31]
	}

	if (conf == NULL) {
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d102      	bne.n	8001cb2 <bme68x_set_conf+0x5a>
		rslt = BME68X_E_NULL_PTR;
 8001cac:	23ff      	movs	r3, #255	@ 0xff
 8001cae:	77fb      	strb	r3, [r7, #31]
 8001cb0:	e0b2      	b.n	8001e18 <bme68x_set_conf+0x1c0>
	} else if (rslt == BME68X_OK) {
 8001cb2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f040 80ae 	bne.w	8001e18 <bme68x_set_conf+0x1c0>
		/* Read the whole configuration and write it back once later */
		rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG,
 8001cbc:	7d38      	ldrb	r0, [r7, #20]
 8001cbe:	f107 010c 	add.w	r1, r7, #12
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	2205      	movs	r2, #5
 8001cc6:	f7ff ff3f 	bl	8001b48 <bme68x_get_regs>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	77fb      	strb	r3, [r7, #31]
				dev);
		dev->info_msg = BME68X_OK;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
		if (rslt == BME68X_OK) {
 8001cd6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d108      	bne.n	8001cf0 <bme68x_set_conf+0x98>
			rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3303      	adds	r3, #3
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	2107      	movs	r1, #7
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f001 fb7f 	bl	80033ea <boundary_check>
 8001cec:	4603      	mov	r3, r0
 8001cee:	77fb      	strb	r3, [r7, #31]
		}

		if (rslt == BME68X_OK) {
 8001cf0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d108      	bne.n	8001d0a <bme68x_set_conf+0xb2>
			rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	2105      	movs	r1, #5
 8001d00:	4618      	mov	r0, r3
 8001d02:	f001 fb72 	bl	80033ea <boundary_check>
 8001d06:	4603      	mov	r3, r0
 8001d08:	77fb      	strb	r3, [r7, #31]
		}

		if (rslt == BME68X_OK) {
 8001d0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d108      	bne.n	8001d24 <bme68x_set_conf+0xcc>
			rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	3302      	adds	r3, #2
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	2105      	movs	r1, #5
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f001 fb65 	bl	80033ea <boundary_check>
 8001d20:	4603      	mov	r3, r0
 8001d22:	77fb      	strb	r3, [r7, #31]
		}

		if (rslt == BME68X_OK) {
 8001d24:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d107      	bne.n	8001d3c <bme68x_set_conf+0xe4>
			rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	2105      	movs	r1, #5
 8001d32:	4618      	mov	r0, r3
 8001d34:	f001 fb59 	bl	80033ea <boundary_check>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	77fb      	strb	r3, [r7, #31]
		}

		if (rslt == BME68X_OK) {
 8001d3c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d108      	bne.n	8001d56 <bme68x_set_conf+0xfe>
			rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3304      	adds	r3, #4
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	2108      	movs	r1, #8
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f001 fb4c 	bl	80033ea <boundary_check>
 8001d52:	4603      	mov	r3, r0
 8001d54:	77fb      	strb	r3, [r7, #31]
		}

		if (rslt == BME68X_OK) {
 8001d56:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d15c      	bne.n	8001e18 <bme68x_set_conf+0x1c0>
			data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER,
 8001d5e:	7c3b      	ldrb	r3, [r7, #16]
 8001d60:	b25b      	sxtb	r3, r3
 8001d62:	f023 031c 	bic.w	r3, r3, #28
 8001d66:	b25a      	sxtb	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	78db      	ldrb	r3, [r3, #3]
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	b25b      	sxtb	r3, r3
 8001d70:	f003 031c 	and.w	r3, r3, #28
 8001d74:	b25b      	sxtb	r3, r3
 8001d76:	4313      	orrs	r3, r2
 8001d78:	b25b      	sxtb	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	743b      	strb	r3, [r7, #16]
					conf->filter);
			data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST,
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
 8001d80:	b25b      	sxtb	r3, r3
 8001d82:	f003 031f 	and.w	r3, r3, #31
 8001d86:	b25a      	sxtb	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	785b      	ldrb	r3, [r3, #1]
 8001d8c:	015b      	lsls	r3, r3, #5
 8001d8e:	b25b      	sxtb	r3, r3
 8001d90:	4313      	orrs	r3, r2
 8001d92:	b25b      	sxtb	r3, r3
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	73fb      	strb	r3, [r7, #15]
					conf->os_temp);
			data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP,
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
 8001d9a:	b25b      	sxtb	r3, r3
 8001d9c:	f023 031c 	bic.w	r3, r3, #28
 8001da0:	b25a      	sxtb	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	789b      	ldrb	r3, [r3, #2]
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	b25b      	sxtb	r3, r3
 8001daa:	f003 031c 	and.w	r3, r3, #28
 8001dae:	b25b      	sxtb	r3, r3
 8001db0:	4313      	orrs	r3, r2
 8001db2:	b25b      	sxtb	r3, r3
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	73fb      	strb	r3, [r7, #15]
					conf->os_pres);
			data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH,
 8001db8:	7b7b      	ldrb	r3, [r7, #13]
 8001dba:	b25b      	sxtb	r3, r3
 8001dbc:	f023 0307 	bic.w	r3, r3, #7
 8001dc0:	b25a      	sxtb	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	b25b      	sxtb	r3, r3
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	b25b      	sxtb	r3, r3
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	b25b      	sxtb	r3, r3
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	737b      	strb	r3, [r7, #13]
					conf->os_hum);
			if (conf->odr != BME68X_ODR_NONE) {
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	791b      	ldrb	r3, [r3, #4]
 8001dda:	2b08      	cmp	r3, #8
 8001ddc:	d004      	beq.n	8001de8 <bme68x_set_conf+0x190>
				odr20 = conf->odr;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	791b      	ldrb	r3, [r3, #4]
 8001de2:	77bb      	strb	r3, [r7, #30]
				odr3 = 0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	777b      	strb	r3, [r7, #29]
			}

			data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 8001de8:	7c3b      	ldrb	r3, [r7, #16]
 8001dea:	b25b      	sxtb	r3, r3
 8001dec:	f003 031f 	and.w	r3, r3, #31
 8001df0:	b25a      	sxtb	r2, r3
 8001df2:	7fbb      	ldrb	r3, [r7, #30]
 8001df4:	015b      	lsls	r3, r3, #5
 8001df6:	b25b      	sxtb	r3, r3
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	b25b      	sxtb	r3, r3
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	743b      	strb	r3, [r7, #16]
			data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8001e00:	7b3b      	ldrb	r3, [r7, #12]
 8001e02:	b25b      	sxtb	r3, r3
 8001e04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e08:	b25a      	sxtb	r2, r3
 8001e0a:	7f7b      	ldrb	r3, [r7, #29]
 8001e0c:	01db      	lsls	r3, r3, #7
 8001e0e:	b25b      	sxtb	r3, r3
 8001e10:	4313      	orrs	r3, r2
 8001e12:	b25b      	sxtb	r3, r3
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	733b      	strb	r3, [r7, #12]
		}
	}

	if (rslt == BME68X_OK) {
 8001e18:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d109      	bne.n	8001e34 <bme68x_set_conf+0x1dc>
		rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
 8001e20:	f107 010c 	add.w	r1, r7, #12
 8001e24:	f107 0014 	add.w	r0, r7, #20
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	2205      	movs	r2, #5
 8001e2c:	f7ff fdfc 	bl	8001a28 <bme68x_set_regs>
 8001e30:	4603      	mov	r3, r0
 8001e32:	77fb      	strb	r3, [r7, #31]
	}

	if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK)) {
 8001e34:	7f3b      	ldrb	r3, [r7, #28]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00a      	beq.n	8001e50 <bme68x_set_conf+0x1f8>
 8001e3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d106      	bne.n	8001e50 <bme68x_set_conf+0x1f8>
		rslt = bme68x_set_op_mode(current_op_mode, dev);
 8001e42:	7f3b      	ldrb	r3, [r7, #28]
 8001e44:	6839      	ldr	r1, [r7, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 f80a 	bl	8001e60 <bme68x_set_op_mode>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	77fb      	strb	r3, [r7, #31]
	}

	return rslt;
 8001e50:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3720      	adds	r7, #32
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	0800e820 	.word	0x0800e820

08001e60 <bme68x_set_op_mode>:

/*
 * @brief This API is used to set the operation mode of the sensor
 */
int8_t bme68x_set_op_mode(const uint8_t op_mode, struct bme68x_dev *dev)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	6039      	str	r1, [r7, #0]
 8001e6a:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	73bb      	strb	r3, [r7, #14]
	uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 8001e70:	2374      	movs	r3, #116	@ 0x74
 8001e72:	733b      	strb	r3, [r7, #12]

	/* Call until in sleep */
	do {
		rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 8001e74:	f107 010d 	add.w	r1, r7, #13
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	2074      	movs	r0, #116	@ 0x74
 8001e7e:	f7ff fe63 	bl	8001b48 <bme68x_get_regs>
 8001e82:	4603      	mov	r3, r0
 8001e84:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME68X_OK) {
 8001e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d11d      	bne.n	8001eca <bme68x_set_op_mode+0x6a>
			/* Put to sleep before changing mode */
			pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 8001e8e:	7b7b      	ldrb	r3, [r7, #13]
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	73bb      	strb	r3, [r7, #14]
			if (pow_mode != BME68X_SLEEP_MODE) {
 8001e96:	7bbb      	ldrb	r3, [r7, #14]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d016      	beq.n	8001eca <bme68x_set_op_mode+0x6a>
				tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 8001e9c:	7b7b      	ldrb	r3, [r7, #13]
 8001e9e:	f023 0303 	bic.w	r3, r3, #3
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	737b      	strb	r3, [r7, #13]
				rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8001ea6:	f107 010d 	add.w	r1, r7, #13
 8001eaa:	f107 000c 	add.w	r0, r7, #12
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f7ff fdb9 	bl	8001a28 <bme68x_set_regs>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	73fb      	strb	r3, [r7, #15]
				dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	6852      	ldr	r2, [r2, #4]
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001ec8:	4798      	blx	r3
			}
		}
	} while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 8001eca:	7bbb      	ldrb	r3, [r7, #14]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <bme68x_set_op_mode+0x78>
 8001ed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0cd      	beq.n	8001e74 <bme68x_set_op_mode+0x14>

	/* Already in sleep */
	if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK)) {
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d01b      	beq.n	8001f16 <bme68x_set_op_mode+0xb6>
 8001ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d117      	bne.n	8001f16 <bme68x_set_op_mode+0xb6>
		tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK)
 8001ee6:	7b7b      	ldrb	r3, [r7, #13]
 8001ee8:	b25b      	sxtb	r3, r3
 8001eea:	f023 0303 	bic.w	r3, r3, #3
 8001eee:	b25a      	sxtb	r2, r3
				| (op_mode & BME68X_MODE_MSK);
 8001ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	b25b      	sxtb	r3, r3
 8001efa:	4313      	orrs	r3, r2
 8001efc:	b25b      	sxtb	r3, r3
 8001efe:	b2db      	uxtb	r3, r3
		tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK)
 8001f00:	737b      	strb	r3, [r7, #13]
		rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8001f02:	f107 010d 	add.w	r1, r7, #13
 8001f06:	f107 000c 	add.w	r0, r7, #12
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f7ff fd8b 	bl	8001a28 <bme68x_set_regs>
 8001f12:	4603      	mov	r3, r0
 8001f14:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <bme68x_get_op_mode>:

/*
 * @brief This API is used to get the operation mode of the sensor.
 */
int8_t bme68x_get_op_mode(uint8_t *op_mode, struct bme68x_dev *dev)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b084      	sub	sp, #16
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t mode;

	if (op_mode) {
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00f      	beq.n	8001f52 <bme68x_get_op_mode+0x30>
		rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
 8001f32:	f107 010e 	add.w	r1, r7, #14
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	2074      	movs	r0, #116	@ 0x74
 8001f3c:	f7ff fe04 	bl	8001b48 <bme68x_get_regs>
 8001f40:	4603      	mov	r3, r0
 8001f42:	73fb      	strb	r3, [r7, #15]

		/* Masking the other register bit info*/
		*op_mode = mode & BME68X_MODE_MSK;
 8001f44:	7bbb      	ldrb	r3, [r7, #14]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	701a      	strb	r2, [r3, #0]
 8001f50:	e001      	b.n	8001f56 <bme68x_get_op_mode+0x34>
	} else {
		rslt = BME68X_E_NULL_PTR;
 8001f52:	23ff      	movs	r3, #255	@ 0xff
 8001f54:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
	...

08001f64 <bme68x_get_meas_dur>:
/*
 * @brief This API is used to get the remaining duration that can be used for heating.
 */
uint32_t bme68x_get_meas_dur(const uint8_t op_mode, struct bme68x_conf *conf,
		struct bme68x_dev *dev)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b08a      	sub	sp, #40	@ 0x28
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
 8001f70:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint32_t meas_dur = 0; /* Calculate in us */
 8001f72:	2300      	movs	r3, #0
 8001f74:	623b      	str	r3, [r7, #32]
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = { 0, 1, 2, 4, 8, 16 };
 8001f76:	4a34      	ldr	r2, [pc, #208]	@ (8002048 <bme68x_get_meas_dur+0xe4>)
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f80:	6018      	str	r0, [r3, #0]
 8001f82:	3304      	adds	r3, #4
 8001f84:	8019      	strh	r1, [r3, #0]

	if (conf != NULL) {
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d058      	beq.n	800203e <bme68x_get_meas_dur+0xda>
		/* Boundary check for temperature oversampling */
		rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	2105      	movs	r1, #5
 8001f94:	4618      	mov	r0, r3
 8001f96:	f001 fa28 	bl	80033ea <boundary_check>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		if (rslt == BME68X_OK) {
 8001fa0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d109      	bne.n	8001fbc <bme68x_get_meas_dur+0x58>
			/* Boundary check for pressure oversampling */
			rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	3302      	adds	r3, #2
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	2105      	movs	r1, #5
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f001 fa1a 	bl	80033ea <boundary_check>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}

		if (rslt == BME68X_OK) {
 8001fbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d108      	bne.n	8001fd6 <bme68x_get_meas_dur+0x72>
			/* Boundary check for humidity oversampling */
			rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	2105      	movs	r1, #5
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f001 fa0d 	bl	80033ea <boundary_check>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}

		if (rslt == BME68X_OK) {
 8001fd6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d12f      	bne.n	800203e <bme68x_get_meas_dur+0xda>
			meas_cycles = os_to_meas_cycles[conf->os_temp];
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	785b      	ldrb	r3, [r3, #1]
 8001fe2:	3328      	adds	r3, #40	@ 0x28
 8001fe4:	443b      	add	r3, r7
 8001fe6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001fea:	61fb      	str	r3, [r7, #28]
			meas_cycles += os_to_meas_cycles[conf->os_pres];
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	789b      	ldrb	r3, [r3, #2]
 8001ff0:	3328      	adds	r3, #40	@ 0x28
 8001ff2:	443b      	add	r3, r7
 8001ff4:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	61fb      	str	r3, [r7, #28]
			meas_cycles += os_to_meas_cycles[conf->os_hum];
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	3328      	adds	r3, #40	@ 0x28
 8002006:	443b      	add	r3, r7
 8002008:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800200c:	461a      	mov	r2, r3
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	4413      	add	r3, r2
 8002012:	61fb      	str	r3, [r7, #28]

			/* TPH measurement duration */
			meas_dur = meas_cycles * UINT32_C(1963);
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f240 72ab 	movw	r2, #1963	@ 0x7ab
 800201a:	fb02 f303 	mul.w	r3, r2, r3
 800201e:	623b      	str	r3, [r7, #32]
			meas_dur += UINT32_C(477 * 4); /* TPH switching duration */
 8002020:	6a3b      	ldr	r3, [r7, #32]
 8002022:	f203 7374 	addw	r3, r3, #1908	@ 0x774
 8002026:	623b      	str	r3, [r7, #32]
			meas_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 8002028:	6a3b      	ldr	r3, [r7, #32]
 800202a:	f603 1351 	addw	r3, r3, #2385	@ 0x951
 800202e:	623b      	str	r3, [r7, #32]

			if (op_mode != BME68X_PARALLEL_MODE) {
 8002030:	7bfb      	ldrb	r3, [r7, #15]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d003      	beq.n	800203e <bme68x_get_meas_dur+0xda>
				meas_dur += UINT32_C(1000); /* Wake up duration of 1ms */
 8002036:	6a3b      	ldr	r3, [r7, #32]
 8002038:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800203c:	623b      	str	r3, [r7, #32]
			}
		}
	}

	return meas_dur;
 800203e:	6a3b      	ldr	r3, [r7, #32]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3728      	adds	r7, #40	@ 0x28
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	0800e828 	.word	0x0800e828

0800204c <bme68x_get_data>:
 * from the sensor, compensates the data and store it in the bme68x_data
 * structure instance passed by the user.
 */
int8_t bme68x_get_data(uint8_t op_mode, struct bme68x_data *data,
		uint8_t *n_data, struct bme68x_dev *dev)
{
 800204c:	b5b0      	push	{r4, r5, r7, lr}
 800204e:	b09e      	sub	sp, #120	@ 0x78
 8002050:	af00      	add	r7, sp, #0
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
 8002056:	603b      	str	r3, [r7, #0]
 8002058:	4603      	mov	r3, r0
 800205a:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t i = 0, j = 0, new_fields = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8002062:	2300      	movs	r3, #0
 8002064:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8002068:	2300      	movs	r3, #0
 800206a:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
	struct bme68x_data *field_ptr[3] = { 0 };
 800206e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	605a      	str	r2, [r3, #4]
 8002078:	609a      	str	r2, [r3, #8]
	struct bme68x_data field_data[3] = { { 0 } };
 800207a:	f107 0314 	add.w	r3, r7, #20
 800207e:	2254      	movs	r2, #84	@ 0x54
 8002080:	2100      	movs	r1, #0
 8002082:	4618      	mov	r0, r3
 8002084:	f00c fb85 	bl	800e792 <memset>

	field_ptr[0] = &field_data[0];
 8002088:	f107 0314 	add.w	r3, r7, #20
 800208c:	66bb      	str	r3, [r7, #104]	@ 0x68
	field_ptr[1] = &field_data[1];
 800208e:	f107 0314 	add.w	r3, r7, #20
 8002092:	331c      	adds	r3, #28
 8002094:	66fb      	str	r3, [r7, #108]	@ 0x6c
	field_ptr[2] = &field_data[2];
 8002096:	f107 0314 	add.w	r3, r7, #20
 800209a:	3338      	adds	r3, #56	@ 0x38
 800209c:	673b      	str	r3, [r7, #112]	@ 0x70

	rslt = null_ptr_check(dev);
 800209e:	6838      	ldr	r0, [r7, #0]
 80020a0:	f001 f9d0 	bl	8003444 <null_ptr_check>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	if ((rslt == BME68X_OK) && (data != NULL)) {
 80020aa:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f040 80c1 	bne.w	8002236 <bme68x_get_data+0x1ea>
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 80bd 	beq.w	8002236 <bme68x_get_data+0x1ea>
		/* Reading the sensor data in forced mode only */
		if (op_mode == BME68X_FORCED_MODE) {
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d11c      	bne.n	80020fc <bme68x_get_data+0xb0>
			rslt = read_field_data(0, data, dev);
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	68b9      	ldr	r1, [r7, #8]
 80020c6:	2000      	movs	r0, #0
 80020c8:	f000 fd8b 	bl	8002be2 <read_field_data>
 80020cc:	4603      	mov	r3, r0
 80020ce:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			if (rslt == BME68X_OK) {
 80020d2:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f040 80a1 	bne.w	800221e <bme68x_get_data+0x1d2>
				if (data->status & BME68X_NEW_DATA_MSK) {
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	b25b      	sxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	da03      	bge.n	80020ee <bme68x_get_data+0xa2>
					new_fields = 1;
 80020e6:	2301      	movs	r3, #1
 80020e8:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 80020ec:	e097      	b.n	800221e <bme68x_get_data+0x1d2>
				} else {
					new_fields = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
					rslt = BME68X_W_NO_NEW_DATA;
 80020f4:	2302      	movs	r3, #2
 80020f6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80020fa:	e090      	b.n	800221e <bme68x_get_data+0x1d2>
				}
			}
		} else if ((op_mode == BME68X_PARALLEL_MODE)
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d003      	beq.n	800210a <bme68x_get_data+0xbe>
				|| (op_mode == BME68X_SEQUENTIAL_MODE)) {
 8002102:	7bfb      	ldrb	r3, [r7, #15]
 8002104:	2b03      	cmp	r3, #3
 8002106:	f040 8087 	bne.w	8002218 <bme68x_get_data+0x1cc>
			/* Read the 3 fields and count the number of new data fields */
			rslt = read_all_field_data(field_ptr, dev);
 800210a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800210e:	6839      	ldr	r1, [r7, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f000 feaa 	bl	8002e6a <read_all_field_data>
 8002116:	4603      	mov	r3, r0
 8002118:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

			new_fields = 0;
 800211c:	2300      	movs	r3, #0
 800211e:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
			for (i = 0; (i < 3) && (rslt == BME68X_OK); i++) {
 8002122:	2300      	movs	r3, #0
 8002124:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8002128:	e014      	b.n	8002154 <bme68x_get_data+0x108>
				if (field_ptr[i]->status & BME68X_NEW_DATA_MSK) {
 800212a:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	3378      	adds	r3, #120	@ 0x78
 8002132:	443b      	add	r3, r7
 8002134:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	b25b      	sxtb	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	da04      	bge.n	800214a <bme68x_get_data+0xfe>
					new_fields++;
 8002140:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8002144:	3301      	adds	r3, #1
 8002146:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
			for (i = 0; (i < 3) && (rslt == BME68X_OK); i++) {
 800214a:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800214e:	3301      	adds	r3, #1
 8002150:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8002154:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002158:	2b02      	cmp	r3, #2
 800215a:	d803      	bhi.n	8002164 <bme68x_get_data+0x118>
 800215c:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0e2      	beq.n	800212a <bme68x_get_data+0xde>
				}
			}

			/* Sort the sensor data in parallel & sequential modes*/
			for (i = 0; (i < 2) && (rslt == BME68X_OK); i++) {
 8002164:	2300      	movs	r3, #0
 8002166:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 800216a:	e01c      	b.n	80021a6 <bme68x_get_data+0x15a>
				for (j = i + 1; j < 3; j++) {
 800216c:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002170:	3301      	adds	r3, #1
 8002172:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8002176:	e00d      	b.n	8002194 <bme68x_get_data+0x148>
					sort_sensor_data(i, j, field_ptr);
 8002178:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800217c:	f897 1075 	ldrb.w	r1, [r7, #117]	@ 0x75
 8002180:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002184:	4618      	mov	r0, r3
 8002186:	f001 fb09 	bl	800379c <sort_sensor_data>
				for (j = i + 1; j < 3; j++) {
 800218a:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 800218e:	3301      	adds	r3, #1
 8002190:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8002194:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8002198:	2b02      	cmp	r3, #2
 800219a:	d9ed      	bls.n	8002178 <bme68x_get_data+0x12c>
			for (i = 0; (i < 2) && (rslt == BME68X_OK); i++) {
 800219c:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80021a0:	3301      	adds	r3, #1
 80021a2:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80021a6:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d803      	bhi.n	80021b6 <bme68x_get_data+0x16a>
 80021ae:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0da      	beq.n	800216c <bme68x_get_data+0x120>
				}
			}

			/* Copy the sorted data */
			for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++) {
 80021b6:	2300      	movs	r3, #0
 80021b8:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80021bc:	e01c      	b.n	80021f8 <bme68x_get_data+0x1ac>
				data[i] = *field_ptr[i];
 80021be:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	3378      	adds	r3, #120	@ 0x78
 80021c6:	443b      	add	r3, r7
 80021c8:	f853 1c10 	ldr.w	r1, [r3, #-16]
 80021cc:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 80021d0:	4613      	mov	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	1a9b      	subs	r3, r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	461a      	mov	r2, r3
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	4413      	add	r3, r2
 80021de:	461c      	mov	r4, r3
 80021e0:	460d      	mov	r5, r1
 80021e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++) {
 80021ee:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80021f2:	3301      	adds	r3, #1
 80021f4:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80021f8:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d803      	bhi.n	8002208 <bme68x_get_data+0x1bc>
 8002200:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0da      	beq.n	80021be <bme68x_get_data+0x172>
			}

			if (new_fields == 0) {
 8002208:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800220c:	2b00      	cmp	r3, #0
 800220e:	d106      	bne.n	800221e <bme68x_get_data+0x1d2>
				rslt = BME68X_W_NO_NEW_DATA;
 8002210:	2302      	movs	r3, #2
 8002212:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			if (new_fields == 0) {
 8002216:	e002      	b.n	800221e <bme68x_get_data+0x1d2>
			}
		} else {
			rslt = BME68X_W_DEFINE_OP_MODE;
 8002218:	2301      	movs	r3, #1
 800221a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		}

		if (n_data == NULL) {
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d103      	bne.n	800222c <bme68x_get_data+0x1e0>
			rslt = BME68X_E_NULL_PTR;
 8002224:	23ff      	movs	r3, #255	@ 0xff
 8002226:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (n_data == NULL) {
 800222a:	e007      	b.n	800223c <bme68x_get_data+0x1f0>
		} else {
			*n_data = new_fields;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f897 2074 	ldrb.w	r2, [r7, #116]	@ 0x74
 8002232:	701a      	strb	r2, [r3, #0]
		if (n_data == NULL) {
 8002234:	e002      	b.n	800223c <bme68x_get_data+0x1f0>
		}
	} else {
		rslt = BME68X_E_NULL_PTR;
 8002236:	23ff      	movs	r3, #255	@ 0xff
 8002238:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	}

	return rslt;
 800223c:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
}
 8002240:	4618      	mov	r0, r3
 8002242:	3778      	adds	r7, #120	@ 0x78
 8002244:	46bd      	mov	sp, r7
 8002246:	bdb0      	pop	{r4, r5, r7, pc}

08002248 <bme68x_set_heatr_conf>:
/*
 * @brief This API is used to set the gas configuration of the sensor.
 */
int8_t bme68x_set_heatr_conf(uint8_t op_mode,
		const struct bme68x_heatr_conf *conf, struct bme68x_dev *dev)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
 8002254:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t nb_conv = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	773b      	strb	r3, [r7, #28]
	uint8_t hctrl, run_gas = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	777b      	strb	r3, [r7, #29]
	uint8_t ctrl_gas_data[2];
	uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 800225e:	f247 1370 	movw	r3, #29040	@ 0x7170
 8002262:	82bb      	strh	r3, [r7, #20]

	if (conf != NULL) {
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d06e      	beq.n	8002348 <bme68x_set_heatr_conf+0x100>
		rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	2000      	movs	r0, #0
 800226e:	f7ff fdf7 	bl	8001e60 <bme68x_set_op_mode>
 8002272:	4603      	mov	r3, r0
 8002274:	77fb      	strb	r3, [r7, #31]
		if (rslt == BME68X_OK) {
 8002276:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d108      	bne.n	8002290 <bme68x_set_heatr_conf+0x48>
			rslt = set_conf(conf, op_mode, &nb_conv, dev);
 800227e:	f107 021c 	add.w	r2, r7, #28
 8002282:	7bf9      	ldrb	r1, [r7, #15]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68b8      	ldr	r0, [r7, #8]
 8002288:	f001 f8fc 	bl	8003484 <set_conf>
 800228c:	4603      	mov	r3, r0
 800228e:	77fb      	strb	r3, [r7, #31]
		}

		if (rslt == BME68X_OK) {
 8002290:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d159      	bne.n	800234c <bme68x_set_heatr_conf+0x104>
			rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2,
 8002298:	f107 0118 	add.w	r1, r7, #24
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2202      	movs	r2, #2
 80022a0:	2070      	movs	r0, #112	@ 0x70
 80022a2:	f7ff fc51 	bl	8001b48 <bme68x_get_regs>
 80022a6:	4603      	mov	r3, r0
 80022a8:	77fb      	strb	r3, [r7, #31]
					dev);
			if (rslt == BME68X_OK) {
 80022aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d14c      	bne.n	800234c <bme68x_set_heatr_conf+0x104>
				if (conf->enable == BME68X_ENABLE) {
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d10b      	bne.n	80022d2 <bme68x_set_heatr_conf+0x8a>
					hctrl = BME68X_ENABLE_HEATER;
 80022ba:	2300      	movs	r3, #0
 80022bc:	77bb      	strb	r3, [r7, #30]
					if (dev->variant_id == BME68X_VARIANT_GAS_HIGH) {
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d102      	bne.n	80022cc <bme68x_set_heatr_conf+0x84>
						run_gas = BME68X_ENABLE_GAS_MEAS_H;
 80022c6:	2302      	movs	r3, #2
 80022c8:	777b      	strb	r3, [r7, #29]
 80022ca:	e006      	b.n	80022da <bme68x_set_heatr_conf+0x92>
					} else {
						run_gas = BME68X_ENABLE_GAS_MEAS_L;
 80022cc:	2301      	movs	r3, #1
 80022ce:	777b      	strb	r3, [r7, #29]
 80022d0:	e003      	b.n	80022da <bme68x_set_heatr_conf+0x92>
					}
				} else {
					hctrl = BME68X_DISABLE_HEATER;
 80022d2:	2301      	movs	r3, #1
 80022d4:	77bb      	strb	r3, [r7, #30]
					run_gas = BME68X_DISABLE_GAS_MEAS;
 80022d6:	2300      	movs	r3, #0
 80022d8:	777b      	strb	r3, [r7, #29]
				}

				ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0],
 80022da:	7e3b      	ldrb	r3, [r7, #24]
 80022dc:	b25b      	sxtb	r3, r3
 80022de:	f023 0308 	bic.w	r3, r3, #8
 80022e2:	b25a      	sxtb	r2, r3
 80022e4:	7fbb      	ldrb	r3, [r7, #30]
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	b25b      	sxtb	r3, r3
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	b25b      	sxtb	r3, r3
 80022f0:	4313      	orrs	r3, r2
 80022f2:	b25b      	sxtb	r3, r3
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	763b      	strb	r3, [r7, #24]
						BME68X_HCTRL, hctrl);
				ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1],
 80022f8:	7e7b      	ldrb	r3, [r7, #25]
 80022fa:	b25b      	sxtb	r3, r3
 80022fc:	f023 030f 	bic.w	r3, r3, #15
 8002300:	b25a      	sxtb	r2, r3
 8002302:	7f3b      	ldrb	r3, [r7, #28]
 8002304:	b25b      	sxtb	r3, r3
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	b25b      	sxtb	r3, r3
 800230c:	4313      	orrs	r3, r2
 800230e:	b25b      	sxtb	r3, r3
 8002310:	b2db      	uxtb	r3, r3
 8002312:	767b      	strb	r3, [r7, #25]
						BME68X_NBCONV, nb_conv);
				ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1],
 8002314:	7e7b      	ldrb	r3, [r7, #25]
 8002316:	b25b      	sxtb	r3, r3
 8002318:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800231c:	b25a      	sxtb	r2, r3
 800231e:	7f7b      	ldrb	r3, [r7, #29]
 8002320:	011b      	lsls	r3, r3, #4
 8002322:	b25b      	sxtb	r3, r3
 8002324:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002328:	b25b      	sxtb	r3, r3
 800232a:	4313      	orrs	r3, r2
 800232c:	b25b      	sxtb	r3, r3
 800232e:	b2db      	uxtb	r3, r3
 8002330:	767b      	strb	r3, [r7, #25]
						BME68X_RUN_GAS, run_gas);
				rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 8002332:	f107 0118 	add.w	r1, r7, #24
 8002336:	f107 0014 	add.w	r0, r7, #20
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2202      	movs	r2, #2
 800233e:	f7ff fb73 	bl	8001a28 <bme68x_set_regs>
 8002342:	4603      	mov	r3, r0
 8002344:	77fb      	strb	r3, [r7, #31]
 8002346:	e001      	b.n	800234c <bme68x_set_heatr_conf+0x104>
			}
		}
	} else {
		rslt = BME68X_E_NULL_PTR;
 8002348:	23ff      	movs	r3, #255	@ 0xff
 800234a:	77fb      	strb	r3, [r7, #31]
	}

	return rslt;
 800234c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3720      	adds	r7, #32
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <calc_temperature>:

#else

/* @brief This internal API is used to calculate the temperature value. */
static float calc_temperature(uint32_t temp_adc, struct bme68x_dev *dev)
{
 8002358:	b480      	push	{r7}
 800235a:	b087      	sub	sp, #28
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
	float var1;
	float var2;
	float calc_temp;

	/* calculate var1 data */
	var1 = ((((float) temp_adc / 16384.0f)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	ee07 3a90 	vmov	s15, r3
 8002368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800236c:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002450 <calc_temperature+0xf8>
 8002370:	ee87 7aa6 	vdiv.f32	s14, s15, s13
			- ((float) dev->calib.par_t1 / 1024.0f))
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	8bdb      	ldrh	r3, [r3, #30]
 8002378:	ee07 3a90 	vmov	s15, r3
 800237c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002380:	ed9f 6a34 	vldr	s12, [pc, #208]	@ 8002454 <calc_temperature+0xfc>
 8002384:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002388:	ee37 7a67 	vsub.f32	s14, s14, s15
			* ((float) dev->calib.par_t2));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002392:	ee07 3a90 	vmov	s15, r3
 8002396:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	var1 = ((((float) temp_adc / 16384.0f)
 800239a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800239e:	edc7 7a05 	vstr	s15, [r7, #20]

	/* calculate var2 data */
	var2 = (((((float) temp_adc / 131072.0f)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	ee07 3a90 	vmov	s15, r3
 80023a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ac:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8002458 <calc_temperature+0x100>
 80023b0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
			- ((float) dev->calib.par_t1 / 8192.0f))
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	8bdb      	ldrh	r3, [r3, #30]
 80023b8:	ee07 3a90 	vmov	s15, r3
 80023bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023c0:	ed9f 6a26 	vldr	s12, [pc, #152]	@ 800245c <calc_temperature+0x104>
 80023c4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80023c8:	ee37 7a67 	vsub.f32	s14, s14, s15
			* (((float) temp_adc / 131072.0f)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	ee07 3a90 	vmov	s15, r3
 80023d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023d6:	ed9f 6a20 	vldr	s12, [pc, #128]	@ 8002458 <calc_temperature+0x100>
 80023da:	eec7 6a86 	vdiv.f32	s13, s15, s12
					- ((float) dev->calib.par_t1 / 8192.0f)))
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	8bdb      	ldrh	r3, [r3, #30]
 80023e2:	ee07 3a90 	vmov	s15, r3
 80023e6:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80023ea:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 800245c <calc_temperature+0x104>
 80023ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023f2:	ee76 7ae7 	vsub.f32	s15, s13, s15
			* (((float) temp_adc / 131072.0f)
 80023f6:	ee27 7a27 	vmul.f32	s14, s14, s15
			* ((float) dev->calib.par_t3 * 16.0f));
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	f993 3022 	ldrsb.w	r3, [r3, #34]	@ 0x22
 8002400:	ee07 3a90 	vmov	s15, r3
 8002404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002408:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800240c:	ee67 7aa6 	vmul.f32	s15, s15, s13
	var2 = (((((float) temp_adc / 131072.0f)
 8002410:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002414:	edc7 7a04 	vstr	s15, [r7, #16]

	/* t_fine value*/
	dev->calib.t_fine = (var1 + var2);
 8002418:	ed97 7a05 	vldr	s14, [r7, #20]
 800241c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002420:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

	/* compensated temperature data*/
	calc_temp = ((dev->calib.t_fine) / 5120.0f);
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8002430:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8002460 <calc_temperature+0x108>
 8002434:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002438:	edc7 7a03 	vstr	s15, [r7, #12]

	return calc_temp;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	ee07 3a90 	vmov	s15, r3
}
 8002442:	eeb0 0a67 	vmov.f32	s0, s15
 8002446:	371c      	adds	r7, #28
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	46800000 	.word	0x46800000
 8002454:	44800000 	.word	0x44800000
 8002458:	48000000 	.word	0x48000000
 800245c:	46000000 	.word	0x46000000
 8002460:	45a00000 	.word	0x45a00000

08002464 <calc_pressure>:

/* @brief This internal API is used to calculate the pressure value. */
static float calc_pressure(uint32_t pres_adc, const struct bme68x_dev *dev)
{
 8002464:	b480      	push	{r7}
 8002466:	b087      	sub	sp, #28
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
	float var1;
	float var2;
	float var3;
	float calc_pres;

	var1 = (((float) dev->calib.t_fine / 2.0f) - 64000.0f);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8002474:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002478:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800247c:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 80026b8 <calc_pressure+0x254>
 8002480:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002484:	edc7 7a04 	vstr	s15, [r7, #16]
	var2 = var1 * var1 * (((float) dev->calib.par_p6) / (131072.0f));
 8002488:	edd7 7a04 	vldr	s15, [r7, #16]
 800248c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	f993 302e 	ldrsb.w	r3, [r3, #46]	@ 0x2e
 8002496:	ee07 3a90 	vmov	s15, r3
 800249a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800249e:	ed9f 6a87 	vldr	s12, [pc, #540]	@ 80026bc <calc_pressure+0x258>
 80024a2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80024a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024aa:	edc7 7a03 	vstr	s15, [r7, #12]
	var2 = var2 + (var1 * ((float) dev->calib.par_p5) * 2.0f);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 80024b4:	ee07 3a90 	vmov	s15, r3
 80024b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80024c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024c8:	ed97 7a03 	vldr	s14, [r7, #12]
 80024cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d0:	edc7 7a03 	vstr	s15, [r7, #12]
	var2 = (var2 / 4.0f) + (((float) dev->calib.par_p4) * 65536.0f);
 80024d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80024d8:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80024dc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 80024e6:	ee07 3a90 	vmov	s15, r3
 80024ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ee:	eddf 6a74 	vldr	s13, [pc, #464]	@ 80026c0 <calc_pressure+0x25c>
 80024f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80024f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024fa:	edc7 7a03 	vstr	s15, [r7, #12]
	var1 = (((((float) dev->calib.par_p3 * var1 * var1) / 16384.0f)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	f993 3028 	ldrsb.w	r3, [r3, #40]	@ 0x28
 8002504:	ee07 3a90 	vmov	s15, r3
 8002508:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800250c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002510:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002514:	edd7 7a04 	vldr	s15, [r7, #16]
 8002518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800251c:	eddf 6a69 	vldr	s13, [pc, #420]	@ 80026c4 <calc_pressure+0x260>
 8002520:	ee87 7aa6 	vdiv.f32	s14, s15, s13
			+ ((float) dev->calib.par_p2 * var1)) / 524288.0f);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800252a:	ee07 3a90 	vmov	s15, r3
 800252e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002532:	edd7 7a04 	vldr	s15, [r7, #16]
 8002536:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800253a:	ee37 7a27 	vadd.f32	s14, s14, s15
	var1 = (((((float) dev->calib.par_p3 * var1 * var1) / 16384.0f)
 800253e:	eddf 6a62 	vldr	s13, [pc, #392]	@ 80026c8 <calc_pressure+0x264>
 8002542:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002546:	edc7 7a04 	vstr	s15, [r7, #16]
	var1 = ((1.0f + (var1 / 32768.0f)) * ((float) dev->calib.par_p1));
 800254a:	ed97 7a04 	vldr	s14, [r7, #16]
 800254e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80026cc <calc_pressure+0x268>
 8002552:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002556:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800255a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002562:	ee07 3a90 	vmov	s15, r3
 8002566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800256a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800256e:	edc7 7a04 	vstr	s15, [r7, #16]
	calc_pres = (1048576.0f - ((float) pres_adc));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	ee07 3a90 	vmov	s15, r3
 8002578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800257c:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 80026d0 <calc_pressure+0x26c>
 8002580:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002584:	edc7 7a05 	vstr	s15, [r7, #20]

	/* Avoid exception caused by division by zero */
	if ((int) var1 != 0) {
 8002588:	edd7 7a04 	vldr	s15, [r7, #16]
 800258c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002590:	ee17 3a90 	vmov	r3, s15
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 8081 	beq.w	800269c <calc_pressure+0x238>
		calc_pres = (((calc_pres - (var2 / 4096.0f)) * 6250.0f) / var1);
 800259a:	ed97 7a03 	vldr	s14, [r7, #12]
 800259e:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 80026d4 <calc_pressure+0x270>
 80025a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025a6:	ed97 7a05 	vldr	s14, [r7, #20]
 80025aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025ae:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80026d8 <calc_pressure+0x274>
 80025b2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80025b6:	ed97 7a04 	vldr	s14, [r7, #16]
 80025ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025be:	edc7 7a05 	vstr	s15, [r7, #20]
		var1 = (((float) dev->calib.par_p9) * calc_pres * calc_pres)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 80025c8:	ee07 3a90 	vmov	s15, r3
 80025cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80025d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80025dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025e0:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 80026dc <calc_pressure+0x278>
 80025e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025e8:	edc7 7a04 	vstr	s15, [r7, #16]
				/ 2147483648.0f;
		var2 = calc_pres * (((float) dev->calib.par_p8) / 32768.0f);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80025f2:	ee07 3a90 	vmov	s15, r3
 80025f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025fa:	eddf 6a34 	vldr	s13, [pc, #208]	@ 80026cc <calc_pressure+0x268>
 80025fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002602:	ed97 7a05 	vldr	s14, [r7, #20]
 8002606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800260a:	edc7 7a03 	vstr	s15, [r7, #12]
		var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f)
 800260e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002612:	eddf 6a33 	vldr	s13, [pc, #204]	@ 80026e0 <calc_pressure+0x27c>
 8002616:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800261a:	edd7 6a05 	vldr	s13, [r7, #20]
 800261e:	ed9f 6a30 	vldr	s12, [pc, #192]	@ 80026e0 <calc_pressure+0x27c>
 8002622:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002626:	ee27 7a27 	vmul.f32	s14, s14, s15
				* (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
 800262a:	edd7 6a05 	vldr	s13, [r7, #20]
 800262e:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 80026e0 <calc_pressure+0x27c>
 8002632:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002636:	ee27 7a27 	vmul.f32	s14, s14, s15
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002640:	ee07 3a90 	vmov	s15, r3
 8002644:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002648:	ed9f 6a1c 	vldr	s12, [pc, #112]	@ 80026bc <calc_pressure+0x258>
 800264c:	eec6 7a86 	vdiv.f32	s15, s13, s12
		var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f)
 8002650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002654:	edc7 7a02 	vstr	s15, [r7, #8]
		calc_pres = (calc_pres
				+ (var1 + var2 + var3 + ((float) dev->calib.par_p7 * 128.0f))
 8002658:	ed97 7a04 	vldr	s14, [r7, #16]
 800265c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002660:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002664:	edd7 7a02 	vldr	s15, [r7, #8]
 8002668:	ee37 7a27 	vadd.f32	s14, s14, s15
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	f993 302f 	ldrsb.w	r3, [r3, #47]	@ 0x2f
 8002672:	ee07 3a90 	vmov	s15, r3
 8002676:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800267a:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 80026e4 <calc_pressure+0x280>
 800267e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002682:	ee37 7a27 	vadd.f32	s14, s14, s15
						/ 16.0f);
 8002686:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800268a:	eec7 7a26 	vdiv.f32	s15, s14, s13
		calc_pres = (calc_pres
 800268e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002696:	edc7 7a05 	vstr	s15, [r7, #20]
 800269a:	e002      	b.n	80026a2 <calc_pressure+0x23e>
	} else {
		calc_pres = 0;
 800269c:	f04f 0300 	mov.w	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]
	}

	return calc_pres;
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	ee07 3a90 	vmov	s15, r3
}
 80026a8:	eeb0 0a67 	vmov.f32	s0, s15
 80026ac:	371c      	adds	r7, #28
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	477a0000 	.word	0x477a0000
 80026bc:	48000000 	.word	0x48000000
 80026c0:	47800000 	.word	0x47800000
 80026c4:	46800000 	.word	0x46800000
 80026c8:	49000000 	.word	0x49000000
 80026cc:	47000000 	.word	0x47000000
 80026d0:	49800000 	.word	0x49800000
 80026d4:	45800000 	.word	0x45800000
 80026d8:	45c35000 	.word	0x45c35000
 80026dc:	4f000000 	.word	0x4f000000
 80026e0:	43800000 	.word	0x43800000
 80026e4:	43000000 	.word	0x43000000

080026e8 <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static float calc_humidity(uint16_t hum_adc, const struct bme68x_dev *dev)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b089      	sub	sp, #36	@ 0x24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	6039      	str	r1, [r7, #0]
 80026f2:	80fb      	strh	r3, [r7, #6]
	float var3;
	float var4;
	float temp_comp;

	/* compensated temperature data*/
	temp_comp = ((dev->calib.t_fine) / 5120.0f);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80026fa:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8002864 <calc_humidity+0x17c>
 80026fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002702:	edc7 7a06 	vstr	s15, [r7, #24]
	var1 = (float) ((float) hum_adc)
 8002706:	88fb      	ldrh	r3, [r7, #6]
 8002708:	ee07 3a90 	vmov	s15, r3
 800270c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
			- (((float) dev->calib.par_h1 * 16.0f)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	8a1b      	ldrh	r3, [r3, #16]
 8002714:	ee07 3a90 	vmov	s15, r3
 8002718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800271c:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8002720:	ee67 6aa6 	vmul.f32	s13, s15, s13
					+ (((float) dev->calib.par_h3 / 2.0f) * temp_comp));
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800272a:	ee07 3a90 	vmov	s15, r3
 800272e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002732:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 8002736:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800273a:	edd7 7a06 	vldr	s15, [r7, #24]
 800273e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002742:	ee76 7aa7 	vadd.f32	s15, s13, s15
	var1 = (float) ((float) hum_adc)
 8002746:	ee77 7a67 	vsub.f32	s15, s14, s15
 800274a:	edc7 7a05 	vstr	s15, [r7, #20]
	var2 = var1
			* ((float) (((float) dev->calib.par_h2 / 262144.0f)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	8a5b      	ldrh	r3, [r3, #18]
 8002752:	ee07 3a90 	vmov	s15, r3
 8002756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800275a:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8002868 <calc_humidity+0x180>
 800275e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					* (1.0f
							+ (((float) dev->calib.par_h4 / 16384.0f)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8002768:	ee07 3a90 	vmov	s15, r3
 800276c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002770:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 800286c <calc_humidity+0x184>
 8002774:	eec7 6a86 	vdiv.f32	s13, s15, s12
									* temp_comp)
 8002778:	edd7 7a06 	vldr	s15, [r7, #24]
 800277c:	ee66 7aa7 	vmul.f32	s15, s13, s15
							+ (((float) dev->calib.par_h4 / 16384.0f)
 8002780:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002784:	ee77 6aa6 	vadd.f32	s13, s15, s13
							+ (((float) dev->calib.par_h5 / 1048576.0f)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	f993 3016 	ldrsb.w	r3, [r3, #22]
 800278e:	ee07 3a90 	vmov	s15, r3
 8002792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002796:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8002870 <calc_humidity+0x188>
 800279a:	ee87 6aa5 	vdiv.f32	s12, s15, s11
									* temp_comp * temp_comp))));
 800279e:	edd7 7a06 	vldr	s15, [r7, #24]
 80027a2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80027a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80027aa:	ee66 7a27 	vmul.f32	s15, s12, s15
							+ (((float) dev->calib.par_h5 / 1048576.0f)
 80027ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
			* ((float) (((float) dev->calib.par_h2 / 262144.0f)
 80027b2:	ee67 7a27 	vmul.f32	s15, s14, s15
	var2 = var1
 80027b6:	ed97 7a05 	vldr	s14, [r7, #20]
 80027ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027be:	edc7 7a04 	vstr	s15, [r7, #16]
	var3 = (float) dev->calib.par_h6 / 16384.0f;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	7ddb      	ldrb	r3, [r3, #23]
 80027c6:	ee07 3a90 	vmov	s15, r3
 80027ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027ce:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800286c <calc_humidity+0x184>
 80027d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027d6:	edc7 7a03 	vstr	s15, [r7, #12]
	var4 = (float) dev->calib.par_h7 / 2097152.0f;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	f993 3018 	ldrsb.w	r3, [r3, #24]
 80027e0:	ee07 3a90 	vmov	s15, r3
 80027e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027e8:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8002874 <calc_humidity+0x18c>
 80027ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027f0:	edc7 7a02 	vstr	s15, [r7, #8]
	calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
 80027f4:	ed97 7a02 	vldr	s14, [r7, #8]
 80027f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80027fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002800:	edd7 7a03 	vldr	s15, [r7, #12]
 8002804:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002808:	edd7 7a04 	vldr	s15, [r7, #16]
 800280c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002810:	edd7 7a04 	vldr	s15, [r7, #16]
 8002814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002818:	ed97 7a04 	vldr	s14, [r7, #16]
 800281c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002820:	edc7 7a07 	vstr	s15, [r7, #28]
	if (calc_hum > 100.0f) {
 8002824:	edd7 7a07 	vldr	s15, [r7, #28]
 8002828:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8002878 <calc_humidity+0x190>
 800282c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002834:	dd02      	ble.n	800283c <calc_humidity+0x154>
		calc_hum = 100.0f;
 8002836:	4b11      	ldr	r3, [pc, #68]	@ (800287c <calc_humidity+0x194>)
 8002838:	61fb      	str	r3, [r7, #28]
 800283a:	e009      	b.n	8002850 <calc_humidity+0x168>
	} else if (calc_hum < 0.0f) {
 800283c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002840:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002848:	d502      	bpl.n	8002850 <calc_humidity+0x168>
		calc_hum = 0.0f;
 800284a:	f04f 0300 	mov.w	r3, #0
 800284e:	61fb      	str	r3, [r7, #28]
	}

	return calc_hum;
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	ee07 3a90 	vmov	s15, r3
}
 8002856:	eeb0 0a67 	vmov.f32	s0, s15
 800285a:	3724      	adds	r7, #36	@ 0x24
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	45a00000 	.word	0x45a00000
 8002868:	48800000 	.word	0x48800000
 800286c:	46800000 	.word	0x46800000
 8002870:	49800000 	.word	0x49800000
 8002874:	4a000000 	.word	0x4a000000
 8002878:	42c80000 	.word	0x42c80000
 800287c:	42c80000 	.word	0x42c80000

08002880 <calc_gas_resistance_low>:

/* This internal API is used to calculate the gas resistance low value in float */
static float calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range,
		const struct bme68x_dev *dev)
{
 8002880:	b4b0      	push	{r4, r5, r7}
 8002882:	b0a9      	sub	sp, #164	@ 0xa4
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	603a      	str	r2, [r7, #0]
 800288a:	80fb      	strh	r3, [r7, #6]
 800288c:	460b      	mov	r3, r1
 800288e:	717b      	strb	r3, [r7, #5]
	float calc_gas_res;
	float var1;
	float var2;
	float var3;
	float gas_res_f = gas_res_adc;
 8002890:	88fb      	ldrh	r3, [r7, #6]
 8002892:	ee07 3a90 	vmov	s15, r3
 8002896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800289a:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
	float gas_range_f = (1U << gas_range); /*lint !e790 / Suspicious truncation, integral to float */
 800289e:	797b      	ldrb	r3, [r7, #5]
 80028a0:	2201      	movs	r2, #1
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	ee07 3a90 	vmov	s15, r3
 80028aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028ae:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
	const float lookup_k1_range[16] = { 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -1.0f,
 80028b2:	4b3e      	ldr	r3, [pc, #248]	@ (80029ac <calc_gas_resistance_low+0x12c>)
 80028b4:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 80028b8:	461d      	mov	r5, r3
 80028ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80028ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0.0f, -0.8f, 0.0f, 0.0f, -0.2f, -0.5f, 0.0f, -1.0f, 0.0f, 0.0f };
	const float lookup_k2_range[16] = { 0.0f, 0.0f, 0.0f, 0.0f, 0.1f, 0.7f,
 80028ce:	4b38      	ldr	r3, [pc, #224]	@ (80029b0 <calc_gas_resistance_low+0x130>)
 80028d0:	f107 0408 	add.w	r4, r7, #8
 80028d4:	461d      	mov	r5, r3
 80028d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028e2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80028e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0.0f, -0.8f, -0.1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f };

	var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	f993 303e 	ldrsb.w	r3, [r3, #62]	@ 0x3e
 80028f0:	ee07 3a90 	vmov	s15, r3
 80028f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028f8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80028fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002900:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80029b4 <calc_gas_resistance_low+0x134>
 8002904:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002908:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
	var2 = (var1) * (1.0f + lookup_k1_range[gas_range] / 100.0f);
 800290c:	797b      	ldrb	r3, [r7, #5]
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	33a0      	adds	r3, #160	@ 0xa0
 8002912:	443b      	add	r3, r7
 8002914:	3b58      	subs	r3, #88	@ 0x58
 8002916:	ed93 7a00 	vldr	s14, [r3]
 800291a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80029b8 <calc_gas_resistance_low+0x138>
 800291e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002922:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002926:	ee77 7a87 	vadd.f32	s15, s15, s14
 800292a:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800292e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002932:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
	var3 = 1.0f + (lookup_k2_range[gas_range] / 100.0f);
 8002936:	797b      	ldrb	r3, [r7, #5]
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	33a0      	adds	r3, #160	@ 0xa0
 800293c:	443b      	add	r3, r7
 800293e:	3b98      	subs	r3, #152	@ 0x98
 8002940:	ed93 7a00 	vldr	s14, [r3]
 8002944:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 80029b8 <calc_gas_resistance_low+0x138>
 8002948:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800294c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002950:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002954:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
	calc_gas_res = 1.0f
			/ (float) (var3 * (0.000000125f) * gas_range_f
 8002958:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800295c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80029bc <calc_gas_resistance_low+0x13c>
 8002960:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002964:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8002968:	ee27 7a27 	vmul.f32	s14, s14, s15
					* (((gas_res_f - 512.0f) / var2) + 1.0f));
 800296c:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8002970:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80029c0 <calc_gas_resistance_low+0x140>
 8002974:	ee37 6ae6 	vsub.f32	s12, s15, s13
 8002978:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 800297c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002980:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002984:	ee77 7aa6 	vadd.f32	s15, s15, s13
			/ (float) (var3 * (0.000000125f) * gas_range_f
 8002988:	ee27 7a27 	vmul.f32	s14, s14, s15
	calc_gas_res = 1.0f
 800298c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002990:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002994:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

	return calc_gas_res;
 8002998:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800299c:	ee07 3a90 	vmov	s15, r3
}
 80029a0:	eeb0 0a67 	vmov.f32	s0, s15
 80029a4:	37a4      	adds	r7, #164	@ 0xa4
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bcb0      	pop	{r4, r5, r7}
 80029aa:	4770      	bx	lr
 80029ac:	0800e830 	.word	0x0800e830
 80029b0:	0800e870 	.word	0x0800e870
 80029b4:	44a78000 	.word	0x44a78000
 80029b8:	42c80000 	.word	0x42c80000
 80029bc:	340637bd 	.word	0x340637bd
 80029c0:	44000000 	.word	0x44000000

080029c4 <calc_gas_resistance_high>:

/* This internal API is used to calculate the gas resistance value in float */
static float calc_gas_resistance_high(uint16_t gas_res_adc, uint8_t gas_range)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b087      	sub	sp, #28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	460a      	mov	r2, r1
 80029ce:	80fb      	strh	r3, [r7, #6]
 80029d0:	4613      	mov	r3, r2
 80029d2:	717b      	strb	r3, [r7, #5]
	float calc_gas_res;
	uint32_t var1 = UINT32_C(262144) >> gas_range;
 80029d4:	797b      	ldrb	r3, [r7, #5]
 80029d6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80029da:	fa22 f303 	lsr.w	r3, r2, r3
 80029de:	617b      	str	r3, [r7, #20]
	int32_t var2 = (int32_t) gas_res_adc - INT32_C(512);
 80029e0:	88fb      	ldrh	r3, [r7, #6]
 80029e2:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80029e6:	613b      	str	r3, [r7, #16]

	var2 *= INT32_C(3);
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	4613      	mov	r3, r2
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	4413      	add	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
	var2 = INT32_C(4096) + var2;
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029f8:	613b      	str	r3, [r7, #16]

	calc_gas_res = 1000000.0f * (float) var1 / (float) var2;
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	ee07 3a90 	vmov	s15, r3
 8002a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a04:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002a34 <calc_gas_resistance_high+0x70>
 8002a08:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	ee07 3a90 	vmov	s15, r3
 8002a12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a1a:	edc7 7a03 	vstr	s15, [r7, #12]

	return calc_gas_res;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	ee07 3a90 	vmov	s15, r3
}
 8002a24:	eeb0 0a67 	vmov.f32	s0, s15
 8002a28:	371c      	adds	r7, #28
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	49742400 	.word	0x49742400

08002a38 <calc_res_heat>:

/* This internal API is used to calculate the heater resistance value */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b08b      	sub	sp, #44	@ 0x2c
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	81fb      	strh	r3, [r7, #14]
	float var3;
	float var4;
	float var5;
	uint8_t res_heat;

	if (temp > 400) /* Cap temperature */
 8002a44:	89fb      	ldrh	r3, [r7, #14]
 8002a46:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002a4a:	d902      	bls.n	8002a52 <calc_res_heat+0x1a>
	{
		temp = 400;
 8002a4c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002a50:	81fb      	strh	r3, [r7, #14]
	}

	var1 = (((float) dev->calib.par_gh1 / (16.0f)) + 49.0f);
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	f993 3019 	ldrsb.w	r3, [r3, #25]
 8002a58:	ee07 3a90 	vmov	s15, r3
 8002a5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a60:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8002a64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a68:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8002b7c <calc_res_heat+0x144>
 8002a6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a70:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	var2 = ((((float) dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002a7a:	ee07 3a90 	vmov	s15, r3
 8002a7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a82:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8002b80 <calc_res_heat+0x148>
 8002a86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a8a:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8002b84 <calc_res_heat+0x14c>
 8002a8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a92:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8002b88 <calc_res_heat+0x150>
 8002a96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a9a:	edc7 7a08 	vstr	s15, [r7, #32]
	var3 = ((float) dev->calib.par_gh3 / (1024.0f));
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8002aa4:	ee07 3a90 	vmov	s15, r3
 8002aa8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002aac:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8002b8c <calc_res_heat+0x154>
 8002ab0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ab4:	edc7 7a07 	vstr	s15, [r7, #28]
	var4 = (var1 * (1.0f + (var2 * (float) temp)));
 8002ab8:	89fb      	ldrh	r3, [r7, #14]
 8002aba:	ee07 3a90 	vmov	s15, r3
 8002abe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ac2:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002ace:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ad2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ada:	edc7 7a06 	vstr	s15, [r7, #24]
	var5 = (var4 + (var3 * (float) dev->amb_temp));
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8002ae4:	ee07 3a90 	vmov	s15, r3
 8002ae8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002aec:	edd7 7a07 	vldr	s15, [r7, #28]
 8002af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002af4:	ed97 7a06 	vldr	s14, [r7, #24]
 8002af8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002afc:	edc7 7a05 	vstr	s15, [r7, #20]
	res_heat = (uint8_t) (3.4f
			* ((var5 * (4 / (4 + (float) dev->calib.res_heat_range))
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b06:	ee07 3a90 	vmov	s15, r3
 8002b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b0e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002b12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b16:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8002b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b22:	ee27 7a27 	vmul.f32	s14, s14, s15
					* (1 / (1 + ((float) dev->calib.res_heat_val * 0.002f))))
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	f993 303d 	ldrsb.w	r3, [r3, #61]	@ 0x3d
 8002b2c:	ee07 3a90 	vmov	s15, r3
 8002b30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b34:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8002b90 <calc_res_heat+0x158>
 8002b38:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b40:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8002b44:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8002b48:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
					- 25));
 8002b50:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8002b54:	ee77 7ac7 	vsub.f32	s15, s15, s14
			* ((var5 * (4 / (4 + (float) dev->calib.res_heat_range))
 8002b58:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002b94 <calc_res_heat+0x15c>
 8002b5c:	ee67 7a87 	vmul.f32	s15, s15, s14
	res_heat = (uint8_t) (3.4f
 8002b60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b64:	edc7 7a01 	vstr	s15, [r7, #4]
 8002b68:	793b      	ldrb	r3, [r7, #4]
 8002b6a:	74fb      	strb	r3, [r7, #19]

	return res_heat;
 8002b6c:	7cfb      	ldrb	r3, [r7, #19]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	372c      	adds	r7, #44	@ 0x2c
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	42440000 	.word	0x42440000
 8002b80:	47000000 	.word	0x47000000
 8002b84:	3a03126f 	.word	0x3a03126f
 8002b88:	3b1a0275 	.word	0x3b1a0275
 8002b8c:	44800000 	.word	0x44800000
 8002b90:	3b03126f 	.word	0x3b03126f
 8002b94:	4059999a 	.word	0x4059999a

08002b98 <calc_gas_wait>:

#endif

/* This internal API is used to calculate the gas wait */
static uint8_t calc_gas_wait(uint16_t dur)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	80fb      	strh	r3, [r7, #6]
	uint8_t factor = 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	73fb      	strb	r3, [r7, #15]
	uint8_t durval;

	if (dur >= 0xfc0) {
 8002ba6:	88fb      	ldrh	r3, [r7, #6]
 8002ba8:	f5b3 6f7c 	cmp.w	r3, #4032	@ 0xfc0
 8002bac:	d308      	bcc.n	8002bc0 <calc_gas_wait+0x28>
		durval = 0xff; /* Max duration*/
 8002bae:	23ff      	movs	r3, #255	@ 0xff
 8002bb0:	73bb      	strb	r3, [r7, #14]
 8002bb2:	e00f      	b.n	8002bd4 <calc_gas_wait+0x3c>
	} else {
		while (dur > 0x3F) {
			dur = dur / 4;
 8002bb4:	88fb      	ldrh	r3, [r7, #6]
 8002bb6:	089b      	lsrs	r3, r3, #2
 8002bb8:	80fb      	strh	r3, [r7, #6]
			factor += 1;
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	73fb      	strb	r3, [r7, #15]
		while (dur > 0x3F) {
 8002bc0:	88fb      	ldrh	r3, [r7, #6]
 8002bc2:	2b3f      	cmp	r3, #63	@ 0x3f
 8002bc4:	d8f6      	bhi.n	8002bb4 <calc_gas_wait+0x1c>
		}

		durval = (uint8_t) (dur + (factor * 64));
 8002bc6:	88fb      	ldrh	r3, [r7, #6]
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
 8002bcc:	019b      	lsls	r3, r3, #6
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	73bb      	strb	r3, [r7, #14]
	}

	return durval;
 8002bd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <read_field_data>:

/* This internal API is used to read a single data of the sensor */
static int8_t read_field_data(uint8_t index, struct bme68x_data *data,
		struct bme68x_dev *dev)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b08e      	sub	sp, #56	@ 0x38
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	4603      	mov	r3, r0
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
 8002bee:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME68X_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t buff[BME68X_LEN_FIELD] = { 0 };
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	f107 0314 	add.w	r3, r7, #20
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	605a      	str	r2, [r3, #4]
 8002c04:	609a      	str	r2, [r3, #8]
 8002c06:	731a      	strb	r2, [r3, #12]
	uint8_t gas_range_l, gas_range_h;
	uint32_t adc_temp;
	uint32_t adc_pres;
	uint16_t adc_hum;
	uint16_t adc_gas_res_low, adc_gas_res_high;
	uint8_t tries = 5;
 8002c08:	2305      	movs	r3, #5
 8002c0a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

	while ((tries) && (rslt == BME68X_OK)) {
 8002c0e:	e11d      	b.n	8002e4c <read_field_data+0x26a>
		rslt = bme68x_get_regs(
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
 8002c12:	461a      	mov	r2, r3
 8002c14:	0112      	lsls	r2, r2, #4
 8002c16:	4413      	add	r3, r2
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	331d      	adds	r3, #29
 8002c1c:	b2d8      	uxtb	r0, r3
 8002c1e:	f107 0110 	add.w	r1, r7, #16
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2211      	movs	r2, #17
 8002c26:	f7fe ff8f 	bl	8001b48 <bme68x_get_regs>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				((uint8_t) (BME68X_REG_FIELD0
						+ (index * BME68X_LEN_FIELD_OFFSET))), buff,
				(uint16_t) BME68X_LEN_FIELD, dev);
		if (!data) {
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d103      	bne.n	8002c3e <read_field_data+0x5c>
			rslt = BME68X_E_NULL_PTR;
 8002c36:	23ff      	movs	r3, #255	@ 0xff
 8002c38:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			break;
 8002c3c:	e10f      	b.n	8002e5e <read_field_data+0x27c>
		}

		data->status = buff[0] & BME68X_NEW_DATA_MSK;
 8002c3e:	7c3b      	ldrb	r3, [r7, #16]
 8002c40:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	701a      	strb	r2, [r3, #0]
		data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
 8002c4a:	7c3b      	ldrb	r3, [r7, #16]
 8002c4c:	f003 030f 	and.w	r3, r3, #15
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	705a      	strb	r2, [r3, #1]
		data->meas_index = buff[1];
 8002c56:	7c7a      	ldrb	r2, [r7, #17]
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	709a      	strb	r2, [r3, #2]

		/* read the raw data from the sensor */
		adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096)
 8002c5c:	7cbb      	ldrb	r3, [r7, #18]
 8002c5e:	031a      	lsls	r2, r3, #12
				| ((uint32_t) buff[3] * 16) | ((uint32_t) buff[4] / 16));
 8002c60:	7cfb      	ldrb	r3, [r7, #19]
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	4313      	orrs	r3, r2
 8002c66:	7d3a      	ldrb	r2, [r7, #20]
 8002c68:	0912      	lsrs	r2, r2, #4
 8002c6a:	b2d2      	uxtb	r2, r2
		adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	633b      	str	r3, [r7, #48]	@ 0x30
		adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096)
 8002c70:	7d7b      	ldrb	r3, [r7, #21]
 8002c72:	031a      	lsls	r2, r3, #12
				| ((uint32_t) buff[6] * 16) | ((uint32_t) buff[7] / 16));
 8002c74:	7dbb      	ldrb	r3, [r7, #22]
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	7dfa      	ldrb	r2, [r7, #23]
 8002c7c:	0912      	lsrs	r2, r2, #4
 8002c7e:	b2d2      	uxtb	r2, r2
		adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
		adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8002c84:	7e3b      	ldrb	r3, [r7, #24]
 8002c86:	021b      	lsls	r3, r3, #8
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	7e7a      	ldrb	r2, [r7, #25]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	857b      	strh	r3, [r7, #42]	@ 0x2a
		adc_gas_res_low = (uint16_t) ((uint32_t) buff[13] * 4
 8002c90:	7f7b      	ldrb	r3, [r7, #29]
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	b29b      	uxth	r3, r3
				| (((uint32_t) buff[14]) / 64));
 8002c96:	7fba      	ldrb	r2, [r7, #30]
		adc_gas_res_low = (uint16_t) ((uint32_t) buff[13] * 4
 8002c98:	0992      	lsrs	r2, r2, #6
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	853b      	strh	r3, [r7, #40]	@ 0x28
		adc_gas_res_high = (uint16_t) ((uint32_t) buff[15] * 4
 8002ca0:	7ffb      	ldrb	r3, [r7, #31]
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	b29b      	uxth	r3, r3
				| (((uint32_t) buff[16]) / 64));
 8002ca6:	f897 2020 	ldrb.w	r2, [r7, #32]
		adc_gas_res_high = (uint16_t) ((uint32_t) buff[15] * 4
 8002caa:	0992      	lsrs	r2, r2, #6
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	84fb      	strh	r3, [r7, #38]	@ 0x26
		gas_range_l = buff[14] & BME68X_GAS_RANGE_MSK;
 8002cb2:	7fbb      	ldrb	r3, [r7, #30]
 8002cb4:	f003 030f 	and.w	r3, r3, #15
 8002cb8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		gas_range_h = buff[16] & BME68X_GAS_RANGE_MSK;
 8002cbc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002cc0:	f003 030f 	and.w	r3, r3, #15
 8002cc4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		if (dev->variant_id == BME68X_VARIANT_GAS_HIGH) {
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d11c      	bne.n	8002d0a <read_field_data+0x128>
			data->status |= buff[16] & BME68X_GASM_VALID_MSK;
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	b25a      	sxtb	r2, r3
 8002cd6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002cda:	b25b      	sxtb	r3, r3
 8002cdc:	f003 0320 	and.w	r3, r3, #32
 8002ce0:	b25b      	sxtb	r3, r3
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	b25b      	sxtb	r3, r3
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	701a      	strb	r2, [r3, #0]
			data->status |= buff[16] & BME68X_HEAT_STAB_MSK;
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	b25a      	sxtb	r2, r3
 8002cf2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002cf6:	b25b      	sxtb	r3, r3
 8002cf8:	f003 0310 	and.w	r3, r3, #16
 8002cfc:	b25b      	sxtb	r3, r3
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	b25b      	sxtb	r3, r3
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	701a      	strb	r2, [r3, #0]
 8002d08:	e019      	b.n	8002d3e <read_field_data+0x15c>
		} else {
			data->status |= buff[14] & BME68X_GASM_VALID_MSK;
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	b25a      	sxtb	r2, r3
 8002d10:	7fbb      	ldrb	r3, [r7, #30]
 8002d12:	b25b      	sxtb	r3, r3
 8002d14:	f003 0320 	and.w	r3, r3, #32
 8002d18:	b25b      	sxtb	r3, r3
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	b25b      	sxtb	r3, r3
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	701a      	strb	r2, [r3, #0]
			data->status |= buff[14] & BME68X_HEAT_STAB_MSK;
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	b25a      	sxtb	r2, r3
 8002d2a:	7fbb      	ldrb	r3, [r7, #30]
 8002d2c:	b25b      	sxtb	r3, r3
 8002d2e:	f003 0310 	and.w	r3, r3, #16
 8002d32:	b25b      	sxtb	r3, r3
 8002d34:	4313      	orrs	r3, r2
 8002d36:	b25b      	sxtb	r3, r3
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	701a      	strb	r2, [r3, #0]
		}

		if ((data->status & BME68X_NEW_DATA_MSK) && (rslt == BME68X_OK)) {
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	b25b      	sxtb	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	da70      	bge.n	8002e2a <read_field_data+0x248>
 8002d48:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d16c      	bne.n	8002e2a <read_field_data+0x248>
			rslt = bme68x_get_regs(BME68X_REG_RES_HEAT0 + data->gas_index,
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	785b      	ldrb	r3, [r3, #1]
 8002d54:	335a      	adds	r3, #90	@ 0x5a
 8002d56:	b2d8      	uxtb	r0, r3
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	1cd9      	adds	r1, r3, #3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f7fe fef2 	bl	8001b48 <bme68x_get_regs>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					&data->res_heat, 1, dev);
			if (rslt == BME68X_OK) {
 8002d6a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10c      	bne.n	8002d8c <read_field_data+0x1aa>
				rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0 + data->gas_index,
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	785b      	ldrb	r3, [r3, #1]
 8002d76:	3350      	adds	r3, #80	@ 0x50
 8002d78:	b2d8      	uxtb	r0, r3
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	1d19      	adds	r1, r3, #4
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f7fe fee1 	bl	8001b48 <bme68x_get_regs>
 8002d86:	4603      	mov	r3, r0
 8002d88:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						&data->idac, 1, dev);
			}

			if (rslt == BME68X_OK) {
 8002d8c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10c      	bne.n	8002dae <read_field_data+0x1cc>
				rslt = bme68x_get_regs(BME68X_REG_GAS_WAIT0 + data->gas_index,
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	785b      	ldrb	r3, [r3, #1]
 8002d98:	3364      	adds	r3, #100	@ 0x64
 8002d9a:	b2d8      	uxtb	r0, r3
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	1d59      	adds	r1, r3, #5
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f7fe fed0 	bl	8001b48 <bme68x_get_regs>
 8002da8:	4603      	mov	r3, r0
 8002daa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						&data->gas_wait, 1, dev);
			}

			if (rslt == BME68X_OK) {
 8002dae:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d139      	bne.n	8002e2a <read_field_data+0x248>
				data->temperature = calc_temperature(adc_temp, dev);
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002dba:	f7ff facd 	bl	8002358 <calc_temperature>
 8002dbe:	eef0 7a40 	vmov.f32	s15, s0
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	edc3 7a03 	vstr	s15, [r3, #12]
				data->pressure = calc_pressure(adc_pres, dev);
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002dcc:	f7ff fb4a 	bl	8002464 <calc_pressure>
 8002dd0:	eef0 7a40 	vmov.f32	s15, s0
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	edc3 7a04 	vstr	s15, [r3, #16]
				data->humidity = calc_humidity(adc_hum, dev);
 8002dda:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff fc82 	bl	80026e8 <calc_humidity>
 8002de4:	eef0 7a40 	vmov.f32	s15, s0
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	edc3 7a05 	vstr	s15, [r3, #20]
				if (dev->variant_id == BME68X_VARIANT_GAS_HIGH) {
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d10c      	bne.n	8002e10 <read_field_data+0x22e>
					data->gas_resistance = calc_gas_resistance_high(
 8002df6:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002dfa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002dfc:	4611      	mov	r1, r2
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff fde0 	bl	80029c4 <calc_gas_resistance_high>
 8002e04:	eef0 7a40 	vmov.f32	s15, s0
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	edc3 7a06 	vstr	s15, [r3, #24]
				} else {
					data->gas_resistance = calc_gas_resistance_low(
							adc_gas_res_low, gas_range_l, dev);
				}

				break;
 8002e0e:	e026      	b.n	8002e5e <read_field_data+0x27c>
					data->gas_resistance = calc_gas_resistance_low(
 8002e10:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8002e14:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff fd31 	bl	8002880 <calc_gas_resistance_low>
 8002e1e:	eef0 7a40 	vmov.f32	s15, s0
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	edc3 7a06 	vstr	s15, [r3, #24]
				break;
 8002e28:	e019      	b.n	8002e5e <read_field_data+0x27c>
			}
		}

		if (rslt == BME68X_OK) {
 8002e2a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d107      	bne.n	8002e42 <read_field_data+0x260>
			dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6852      	ldr	r2, [r2, #4]
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8002e40:	4798      	blx	r3
		}

		tries--;
 8002e42:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002e46:	3b01      	subs	r3, #1
 8002e48:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	while ((tries) && (rslt == BME68X_OK)) {
 8002e4c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d004      	beq.n	8002e5e <read_field_data+0x27c>
 8002e54:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f43f aed9 	beq.w	8002c10 <read_field_data+0x2e>
	}

	return rslt;
 8002e5e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3738      	adds	r7, #56	@ 0x38
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <read_all_field_data>:

/* This internal API is used to read all data fields of the sensor */
static int8_t read_all_field_data(struct bme68x_data *const data[],
		struct bme68x_dev *dev)
{
 8002e6a:	b590      	push	{r4, r7, lr}
 8002e6c:	b09d      	sub	sp, #116	@ 0x74
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
 8002e72:	6039      	str	r1, [r7, #0]
	int8_t rslt = BME68X_OK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	uint8_t buff[BME68X_LEN_FIELD * 3] = { 0 };
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e82:	222f      	movs	r2, #47	@ 0x2f
 8002e84:	2100      	movs	r1, #0
 8002e86:	4618      	mov	r0, r3
 8002e88:	f00b fc83 	bl	800e792 <memset>
	uint32_t adc_temp;
	uint32_t adc_pres;
	uint16_t adc_hum;
	uint16_t adc_gas_res_low, adc_gas_res_high;
	uint8_t off;
	uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60bb      	str	r3, [r7, #8]
 8002e90:	f107 030c 	add.w	r3, r7, #12
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	611a      	str	r2, [r3, #16]
 8002ea0:	615a      	str	r2, [r3, #20]
 8002ea2:	831a      	strh	r2, [r3, #24]
	uint8_t i;

	if (!data[0] && !data[1] && !data[2]) {
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10c      	bne.n	8002ec6 <read_all_field_data+0x5c>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3304      	adds	r3, #4
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d107      	bne.n	8002ec6 <read_all_field_data+0x5c>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3308      	adds	r3, #8
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d102      	bne.n	8002ec6 <read_all_field_data+0x5c>
		rslt = BME68X_E_NULL_PTR;
 8002ec0:	23ff      	movs	r3, #255	@ 0xff
 8002ec2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	}

	if (rslt == BME68X_OK) {
 8002ec6:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d109      	bne.n	8002ee2 <read_all_field_data+0x78>
		rslt = bme68x_get_regs(BME68X_REG_FIELD0, buff,
 8002ece:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	2233      	movs	r2, #51	@ 0x33
 8002ed6:	201d      	movs	r0, #29
 8002ed8:	f7fe fe36 	bl	8001b48 <bme68x_get_regs>
 8002edc:	4603      	mov	r3, r0
 8002ede:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				(uint32_t) BME68X_LEN_FIELD * 3, dev);
	}

	if (rslt == BME68X_OK) {
 8002ee2:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d109      	bne.n	8002efe <read_all_field_data+0x94>
		rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0, set_val, 30, dev);
 8002eea:	f107 0108 	add.w	r1, r7, #8
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	221e      	movs	r2, #30
 8002ef2:	2050      	movs	r0, #80	@ 0x50
 8002ef4:	f7fe fe28 	bl	8001b48 <bme68x_get_regs>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	}

	for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++) {
 8002efe:	2300      	movs	r3, #0
 8002f00:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8002f04:	e1ce      	b.n	80032a4 <read_all_field_data+0x43a>
		off = (uint8_t) (i * BME68X_LEN_FIELD);
 8002f06:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	0112      	lsls	r2, r2, #4
 8002f0e:	4413      	add	r3, r2
 8002f10:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
		data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 8002f14:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002f18:	3370      	adds	r3, #112	@ 0x70
 8002f1a:	443b      	add	r3, r7
 8002f1c:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 8002f20:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	440b      	add	r3, r1
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	701a      	strb	r2, [r3, #0]
		data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 8002f34:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002f38:	3370      	adds	r3, #112	@ 0x70
 8002f3a:	443b      	add	r3, r7
 8002f3c:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 8002f40:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	440b      	add	r3, r1
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f002 020f 	and.w	r2, r2, #15
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	705a      	strb	r2, [r3, #1]
		data[i]->meas_index = buff[off + 1];
 8002f54:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002f58:	1c5a      	adds	r2, r3, #1
 8002f5a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	440b      	add	r3, r1
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	3270      	adds	r2, #112	@ 0x70
 8002f68:	443a      	add	r2, r7
 8002f6a:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8002f6e:	709a      	strb	r2, [r3, #2]

		/* read the raw data from the sensor */
		adc_pres = (uint32_t) (((uint32_t) buff[off + 2] * 4096)
 8002f70:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002f74:	3302      	adds	r3, #2
 8002f76:	3370      	adds	r3, #112	@ 0x70
 8002f78:	443b      	add	r3, r7
 8002f7a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002f7e:	031a      	lsls	r2, r3, #12
				| ((uint32_t) buff[off + 3] * 16)
 8002f80:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002f84:	3303      	adds	r3, #3
 8002f86:	3370      	adds	r3, #112	@ 0x70
 8002f88:	443b      	add	r3, r7
 8002f8a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	4313      	orrs	r3, r2
				| ((uint32_t) buff[off + 4] / 16));
 8002f92:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002f96:	3204      	adds	r2, #4
 8002f98:	3270      	adds	r2, #112	@ 0x70
 8002f9a:	443a      	add	r2, r7
 8002f9c:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8002fa0:	0912      	lsrs	r2, r2, #4
 8002fa2:	b2d2      	uxtb	r2, r2
		adc_pres = (uint32_t) (((uint32_t) buff[off + 2] * 4096)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	66bb      	str	r3, [r7, #104]	@ 0x68
		adc_temp = (uint32_t) (((uint32_t) buff[off + 5] * 4096)
 8002fa8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002fac:	3305      	adds	r3, #5
 8002fae:	3370      	adds	r3, #112	@ 0x70
 8002fb0:	443b      	add	r3, r7
 8002fb2:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002fb6:	031a      	lsls	r2, r3, #12
				| ((uint32_t) buff[off + 6] * 16)
 8002fb8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002fbc:	3306      	adds	r3, #6
 8002fbe:	3370      	adds	r3, #112	@ 0x70
 8002fc0:	443b      	add	r3, r7
 8002fc2:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	4313      	orrs	r3, r2
				| ((uint32_t) buff[off + 7] / 16));
 8002fca:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002fce:	3207      	adds	r2, #7
 8002fd0:	3270      	adds	r2, #112	@ 0x70
 8002fd2:	443a      	add	r2, r7
 8002fd4:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8002fd8:	0912      	lsrs	r2, r2, #4
 8002fda:	b2d2      	uxtb	r2, r2
		adc_temp = (uint32_t) (((uint32_t) buff[off + 5] * 4096)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	667b      	str	r3, [r7, #100]	@ 0x64
		adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256)
 8002fe0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002fe4:	3308      	adds	r3, #8
 8002fe6:	3370      	adds	r3, #112	@ 0x70
 8002fe8:	443b      	add	r3, r7
 8002fea:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002fee:	021b      	lsls	r3, r3, #8
 8002ff0:	b29b      	uxth	r3, r3
				| (uint32_t) buff[off + 9]);
 8002ff2:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002ff6:	3209      	adds	r2, #9
 8002ff8:	3270      	adds	r2, #112	@ 0x70
 8002ffa:	443a      	add	r2, r7
 8002ffc:	f812 2c48 	ldrb.w	r2, [r2, #-72]
		adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256)
 8003000:	4313      	orrs	r3, r2
 8003002:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
		adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4
 8003006:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800300a:	330d      	adds	r3, #13
 800300c:	3370      	adds	r3, #112	@ 0x70
 800300e:	443b      	add	r3, r7
 8003010:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	b29b      	uxth	r3, r3
				| (((uint32_t) buff[off + 14]) / 64));
 8003018:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 800301c:	320e      	adds	r2, #14
 800301e:	3270      	adds	r2, #112	@ 0x70
 8003020:	443a      	add	r2, r7
 8003022:	f812 2c48 	ldrb.w	r2, [r2, #-72]
		adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4
 8003026:	0992      	lsrs	r2, r2, #6
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	4313      	orrs	r3, r2
 800302c:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
		adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4
 8003030:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003034:	330f      	adds	r3, #15
 8003036:	3370      	adds	r3, #112	@ 0x70
 8003038:	443b      	add	r3, r7
 800303a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	b29b      	uxth	r3, r3
				| (((uint32_t) buff[off + 16]) / 64));
 8003042:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8003046:	3210      	adds	r2, #16
 8003048:	3270      	adds	r2, #112	@ 0x70
 800304a:	443a      	add	r2, r7
 800304c:	f812 2c48 	ldrb.w	r2, [r2, #-72]
		adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4
 8003050:	0992      	lsrs	r2, r2, #6
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	4313      	orrs	r3, r2
 8003056:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		gas_range_l = buff[off + 14] & BME68X_GAS_RANGE_MSK;
 800305a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800305e:	330e      	adds	r3, #14
 8003060:	3370      	adds	r3, #112	@ 0x70
 8003062:	443b      	add	r3, r7
 8003064:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8003068:	f003 030f 	and.w	r3, r3, #15
 800306c:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
		gas_range_h = buff[off + 16] & BME68X_GAS_RANGE_MSK;
 8003070:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003074:	3310      	adds	r3, #16
 8003076:	3370      	adds	r3, #112	@ 0x70
 8003078:	443b      	add	r3, r7
 800307a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
		if (dev->variant_id == BME68X_VARIANT_GAS_HIGH) {
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d13a      	bne.n	8003104 <read_all_field_data+0x29a>
			data[i]->status |= buff[off + 16] & BME68X_GASM_VALID_MSK;
 800308e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	4413      	add	r3, r2
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	b25a      	sxtb	r2, r3
 800309e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80030a2:	3310      	adds	r3, #16
 80030a4:	3370      	adds	r3, #112	@ 0x70
 80030a6:	443b      	add	r3, r7
 80030a8:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80030ac:	b25b      	sxtb	r3, r3
 80030ae:	f003 0320 	and.w	r3, r3, #32
 80030b2:	b25b      	sxtb	r3, r3
 80030b4:	4313      	orrs	r3, r2
 80030b6:	b259      	sxtb	r1, r3
 80030b8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	4413      	add	r3, r2
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	b2ca      	uxtb	r2, r1
 80030c6:	701a      	strb	r2, [r3, #0]
			data[i]->status |= buff[off + 16] & BME68X_HEAT_STAB_MSK;
 80030c8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	4413      	add	r3, r2
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	b25a      	sxtb	r2, r3
 80030d8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80030dc:	3310      	adds	r3, #16
 80030de:	3370      	adds	r3, #112	@ 0x70
 80030e0:	443b      	add	r3, r7
 80030e2:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80030e6:	b25b      	sxtb	r3, r3
 80030e8:	f003 0310 	and.w	r3, r3, #16
 80030ec:	b25b      	sxtb	r3, r3
 80030ee:	4313      	orrs	r3, r2
 80030f0:	b259      	sxtb	r1, r3
 80030f2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	4413      	add	r3, r2
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	b2ca      	uxtb	r2, r1
 8003100:	701a      	strb	r2, [r3, #0]
 8003102:	e039      	b.n	8003178 <read_all_field_data+0x30e>
		} else {
			data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
 8003104:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	4413      	add	r3, r2
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	b25a      	sxtb	r2, r3
 8003114:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003118:	330e      	adds	r3, #14
 800311a:	3370      	adds	r3, #112	@ 0x70
 800311c:	443b      	add	r3, r7
 800311e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8003122:	b25b      	sxtb	r3, r3
 8003124:	f003 0320 	and.w	r3, r3, #32
 8003128:	b25b      	sxtb	r3, r3
 800312a:	4313      	orrs	r3, r2
 800312c:	b259      	sxtb	r1, r3
 800312e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	4413      	add	r3, r2
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	b2ca      	uxtb	r2, r1
 800313c:	701a      	strb	r2, [r3, #0]
			data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
 800313e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	4413      	add	r3, r2
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	b25a      	sxtb	r2, r3
 800314e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003152:	330e      	adds	r3, #14
 8003154:	3370      	adds	r3, #112	@ 0x70
 8003156:	443b      	add	r3, r7
 8003158:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800315c:	b25b      	sxtb	r3, r3
 800315e:	f003 0310 	and.w	r3, r3, #16
 8003162:	b25b      	sxtb	r3, r3
 8003164:	4313      	orrs	r3, r2
 8003166:	b259      	sxtb	r1, r3
 8003168:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	4413      	add	r3, r2
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	b2ca      	uxtb	r2, r1
 8003176:	701a      	strb	r2, [r3, #0]
		}

		data[i]->idac = set_val[data[i]->gas_index];
 8003178:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	4413      	add	r3, r2
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	785b      	ldrb	r3, [r3, #1]
 8003186:	4619      	mov	r1, r3
 8003188:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	4413      	add	r3, r2
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f101 0270 	add.w	r2, r1, #112	@ 0x70
 8003198:	443a      	add	r2, r7
 800319a:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 800319e:	711a      	strb	r2, [r3, #4]
		data[i]->res_heat = set_val[10 + data[i]->gas_index];
 80031a0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	4413      	add	r3, r2
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	785b      	ldrb	r3, [r3, #1]
 80031ae:	f103 020a 	add.w	r2, r3, #10
 80031b2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	440b      	add	r3, r1
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	3270      	adds	r2, #112	@ 0x70
 80031c0:	443a      	add	r2, r7
 80031c2:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 80031c6:	70da      	strb	r2, [r3, #3]
		data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 80031c8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	4413      	add	r3, r2
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	785b      	ldrb	r3, [r3, #1]
 80031d6:	f103 0214 	add.w	r2, r3, #20
 80031da:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	440b      	add	r3, r1
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	3270      	adds	r2, #112	@ 0x70
 80031e8:	443a      	add	r2, r7
 80031ea:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 80031ee:	715a      	strb	r2, [r3, #5]
		data[i]->temperature = calc_temperature(adc_temp, dev);
 80031f0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	4413      	add	r3, r2
 80031fa:	681c      	ldr	r4, [r3, #0]
 80031fc:	6839      	ldr	r1, [r7, #0]
 80031fe:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003200:	f7ff f8aa 	bl	8002358 <calc_temperature>
 8003204:	eef0 7a40 	vmov.f32	s15, s0
 8003208:	edc4 7a03 	vstr	s15, [r4, #12]
		data[i]->pressure = calc_pressure(adc_pres, dev);
 800320c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	4413      	add	r3, r2
 8003216:	681c      	ldr	r4, [r3, #0]
 8003218:	6839      	ldr	r1, [r7, #0]
 800321a:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800321c:	f7ff f922 	bl	8002464 <calc_pressure>
 8003220:	eef0 7a40 	vmov.f32	s15, s0
 8003224:	edc4 7a04 	vstr	s15, [r4, #16]
		data[i]->humidity = calc_humidity(adc_hum, dev);
 8003228:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	4413      	add	r3, r2
 8003232:	681c      	ldr	r4, [r3, #0]
 8003234:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8003238:	6839      	ldr	r1, [r7, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff fa54 	bl	80026e8 <calc_humidity>
 8003240:	eef0 7a40 	vmov.f32	s15, s0
 8003244:	edc4 7a05 	vstr	s15, [r4, #20]
		if (dev->variant_id == BME68X_VARIANT_GAS_HIGH) {
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d112      	bne.n	8003276 <read_all_field_data+0x40c>
			data[i]->gas_resistance = calc_gas_resistance_high(adc_gas_res_high,
 8003250:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	4413      	add	r3, r2
 800325a:	681c      	ldr	r4, [r3, #0]
 800325c:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8003260:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8003264:	4611      	mov	r1, r2
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff fbac 	bl	80029c4 <calc_gas_resistance_high>
 800326c:	eef0 7a40 	vmov.f32	s15, s0
 8003270:	edc4 7a06 	vstr	s15, [r4, #24]
 8003274:	e011      	b.n	800329a <read_all_field_data+0x430>
					gas_range_h);
		} else {
			data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low,
 8003276:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	4413      	add	r3, r2
 8003280:	681c      	ldr	r4, [r3, #0]
 8003282:	f897 105d 	ldrb.w	r1, [r7, #93]	@ 0x5d
 8003286:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff faf7 	bl	8002880 <calc_gas_resistance_low>
 8003292:	eef0 7a40 	vmov.f32	s15, s0
 8003296:	edc4 7a06 	vstr	s15, [r4, #24]
	for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++) {
 800329a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800329e:	3301      	adds	r3, #1
 80032a0:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80032a4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d804      	bhi.n	80032b6 <read_all_field_data+0x44c>
 80032ac:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f43f ae28 	beq.w	8002f06 <read_all_field_data+0x9c>
					gas_range_l, dev);
		}
	}

	return rslt;
 80032b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3774      	adds	r7, #116	@ 0x74
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd90      	pop	{r4, r7, pc}

080032c2 <set_mem_page>:

/* This internal API is used to switch between SPI memory pages */
static int8_t set_mem_page(uint8_t reg_addr, struct bme68x_dev *dev)
{
 80032c2:	b590      	push	{r4, r7, lr}
 80032c4:	b085      	sub	sp, #20
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	4603      	mov	r3, r0
 80032ca:	6039      	str	r1, [r7, #0]
 80032cc:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 80032ce:	6838      	ldr	r0, [r7, #0]
 80032d0:	f000 f8b8 	bl	8003444 <null_ptr_check>
 80032d4:	4603      	mov	r3, r0
 80032d6:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME68X_OK) {
 80032d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d14f      	bne.n	8003380 <set_mem_page+0xbe>
		if (reg_addr > 0x7f) {
 80032e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	da02      	bge.n	80032ee <set_mem_page+0x2c>
			mem_page = BME68X_MEM_PAGE1;
 80032e8:	2300      	movs	r3, #0
 80032ea:	73bb      	strb	r3, [r7, #14]
 80032ec:	e001      	b.n	80032f2 <set_mem_page+0x30>
		} else {
			mem_page = BME68X_MEM_PAGE0;
 80032ee:	2310      	movs	r3, #16
 80032f0:	73bb      	strb	r3, [r7, #14]
		}

		if (mem_page != dev->mem_page) {
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	7b5b      	ldrb	r3, [r3, #13]
 80032f6:	7bba      	ldrb	r2, [r7, #14]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d041      	beq.n	8003380 <set_mem_page+0xbe>
			dev->mem_page = mem_page;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	7bba      	ldrb	r2, [r7, #14]
 8003300:	735a      	strb	r2, [r3, #13]
			dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK,
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f107 010d 	add.w	r1, r7, #13
 800330e:	2201      	movs	r2, #1
 8003310:	20f3      	movs	r0, #243	@ 0xf3
 8003312:	47a0      	blx	r4
 8003314:	4603      	mov	r3, r0
 8003316:	461a      	mov	r2, r3
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
					&reg, 1, dev->intf_ptr);
			if (dev->intf_rslt != 0) {
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <set_mem_page+0x6a>
				rslt = BME68X_E_COM_FAIL;
 8003328:	23fe      	movs	r3, #254	@ 0xfe
 800332a:	73fb      	strb	r3, [r7, #15]
			}

			if (rslt == BME68X_OK) {
 800332c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d125      	bne.n	8003380 <set_mem_page+0xbe>
				reg = reg & (~BME68X_MEM_PAGE_MSK);
 8003334:	7b7b      	ldrb	r3, [r7, #13]
 8003336:	f023 0310 	bic.w	r3, r3, #16
 800333a:	b2db      	uxtb	r3, r3
 800333c:	737b      	strb	r3, [r7, #13]
				reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	7b5b      	ldrb	r3, [r3, #13]
 8003342:	b25b      	sxtb	r3, r3
 8003344:	f003 0310 	and.w	r3, r3, #16
 8003348:	b25a      	sxtb	r2, r3
 800334a:	7b7b      	ldrb	r3, [r7, #13]
 800334c:	b25b      	sxtb	r3, r3
 800334e:	4313      	orrs	r3, r2
 8003350:	b25b      	sxtb	r3, r3
 8003352:	b2db      	uxtb	r3, r3
 8003354:	737b      	strb	r3, [r7, #13]
				dev->intf_rslt = dev->write(
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f107 010d 	add.w	r1, r7, #13
 8003362:	2201      	movs	r2, #1
 8003364:	2073      	movs	r0, #115	@ 0x73
 8003366:	47a0      	blx	r4
 8003368:	4603      	mov	r3, r0
 800336a:	461a      	mov	r2, r3
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
						BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1,
						dev->intf_ptr);
				if (dev->intf_rslt != 0) {
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <set_mem_page+0xbe>
					rslt = BME68X_E_COM_FAIL;
 800337c:	23fe      	movs	r3, #254	@ 0xfe
 800337e:	73fb      	strb	r3, [r7, #15]
				}
			}
		}
	}

	return rslt;
 8003380:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	bd90      	pop	{r4, r7, pc}

0800338c <get_mem_page>:

/* This internal API is used to get the current SPI memory page */
static int8_t get_mem_page(struct bme68x_dev *dev)
{
 800338c:	b590      	push	{r4, r7, lr}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f855 	bl	8003444 <null_ptr_check>
 800339a:	4603      	mov	r3, r0
 800339c:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME68X_OK) {
 800339e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d11b      	bne.n	80033de <get_mem_page+0x52>
		dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK,
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f107 010e 	add.w	r1, r7, #14
 80033b2:	2201      	movs	r2, #1
 80033b4:	20f3      	movs	r0, #243	@ 0xf3
 80033b6:	47a0      	blx	r4
 80033b8:	4603      	mov	r3, r0
 80033ba:	461a      	mov	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
				&reg, 1, dev->intf_ptr);
		if (dev->intf_rslt != 0) {
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d002      	beq.n	80033d2 <get_mem_page+0x46>
			rslt = BME68X_E_COM_FAIL;
 80033cc:	23fe      	movs	r3, #254	@ 0xfe
 80033ce:	73fb      	strb	r3, [r7, #15]
 80033d0:	e005      	b.n	80033de <get_mem_page+0x52>
		} else {
			dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 80033d2:	7bbb      	ldrb	r3, [r7, #14]
 80033d4:	f003 0310 	and.w	r3, r3, #16
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	735a      	strb	r2, [r3, #13]
		}
	}

	return rslt;
 80033de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd90      	pop	{r4, r7, pc}

080033ea <boundary_check>:

/* This internal API is used to limit the max value of a parameter */
static int8_t boundary_check(uint8_t *value, uint8_t max,
		struct bme68x_dev *dev)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b086      	sub	sp, #24
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	60f8      	str	r0, [r7, #12]
 80033f2:	460b      	mov	r3, r1
 80033f4:	607a      	str	r2, [r7, #4]
 80033f6:	72fb      	strb	r3, [r7, #11]
	int8_t rslt;

	rslt = null_ptr_check(dev);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 f823 	bl	8003444 <null_ptr_check>
 80033fe:	4603      	mov	r3, r0
 8003400:	75fb      	strb	r3, [r7, #23]
	if ((value != NULL) && (rslt == BME68X_OK)) {
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d015      	beq.n	8003434 <boundary_check+0x4a>
 8003408:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d111      	bne.n	8003434 <boundary_check+0x4a>
		/* Check if value is above maximum value */
		if (*value > max) {
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	7afa      	ldrb	r2, [r7, #11]
 8003416:	429a      	cmp	r2, r3
 8003418:	d20e      	bcs.n	8003438 <boundary_check+0x4e>
			/* Auto correct the invalid value to maximum value */
			*value = max;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	7afa      	ldrb	r2, [r7, #11]
 800341e:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME68X_I_PARAM_CORR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	b2da      	uxtb	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
		if (*value > max) {
 8003432:	e001      	b.n	8003438 <boundary_check+0x4e>
		}
	} else {
		rslt = BME68X_E_NULL_PTR;
 8003434:	23ff      	movs	r3, #255	@ 0xff
 8003436:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8003438:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3718      	adds	r7, #24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <null_ptr_check>:

/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
	int8_t rslt = BME68X_OK;
 800344c:	2300      	movs	r3, #0
 800344e:	73fb      	strb	r3, [r7, #15]

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00b      	beq.n	800346e <null_ptr_check+0x2a>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345a:	2b00      	cmp	r3, #0
 800345c:	d007      	beq.n	800346e <null_ptr_check+0x2a>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <null_ptr_check+0x2a>
			|| (dev->delay_us == NULL)) {
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <null_ptr_check+0x2e>
		/* Device structure pointer is not valid */
		rslt = BME68X_E_NULL_PTR;
 800346e:	23ff      	movs	r3, #255	@ 0xff
 8003470:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8003472:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
	...

08003484 <set_conf>:

/* This internal API is used to set heater configurations */
static int8_t set_conf(const struct bme68x_heatr_conf *conf, uint8_t op_mode,
		uint8_t *nb_conv, struct bme68x_dev *dev)
{
 8003484:	b590      	push	{r4, r7, lr}
 8003486:	b093      	sub	sp, #76	@ 0x4c
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	607a      	str	r2, [r7, #4]
 800348e:	603b      	str	r3, [r7, #0]
 8003490:	460b      	mov	r3, r1
 8003492:	72fb      	strb	r3, [r7, #11]
	int8_t rslt = BME68X_OK;
 8003494:	2300      	movs	r3, #0
 8003496:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	uint8_t i;
	uint8_t shared_dur;
	uint8_t write_len = 0;
 800349a:	2300      	movs	r3, #0
 800349c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
	uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 80034a0:	236e      	movs	r3, #110	@ 0x6e
 80034a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80034a6:	4aa1      	ldr	r2, [pc, #644]	@ (800372c <set_conf+0x2a8>)
 80034a8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80034ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80034ae:	c303      	stmia	r3!, {r0, r1}
 80034b0:	801a      	strh	r2, [r3, #0]
	uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80034b2:	4a9e      	ldr	r2, [pc, #632]	@ (800372c <set_conf+0x2a8>)
 80034b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80034ba:	c303      	stmia	r3!, {r0, r1}
 80034bc:	801a      	strh	r2, [r3, #0]
	uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80034be:	4a9b      	ldr	r2, [pc, #620]	@ (800372c <set_conf+0x2a8>)
 80034c0:	f107 0320 	add.w	r3, r7, #32
 80034c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80034c6:	c303      	stmia	r3!, {r0, r1}
 80034c8:	801a      	strh	r2, [r3, #0]
	uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80034ca:	4a98      	ldr	r2, [pc, #608]	@ (800372c <set_conf+0x2a8>)
 80034cc:	f107 0314 	add.w	r3, r7, #20
 80034d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80034d2:	c303      	stmia	r3!, {r0, r1}
 80034d4:	801a      	strh	r2, [r3, #0]

	switch (op_mode) {
 80034d6:	7afb      	ldrb	r3, [r7, #11]
 80034d8:	2b03      	cmp	r3, #3
 80034da:	d024      	beq.n	8003526 <set_conf+0xa2>
 80034dc:	2b03      	cmp	r3, #3
 80034de:	f300 80f9 	bgt.w	80036d4 <set_conf+0x250>
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d002      	beq.n	80034ec <set_conf+0x68>
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d07c      	beq.n	80035e4 <set_conf+0x160>
 80034ea:	e0f3      	b.n	80036d4 <set_conf+0x250>
	case BME68X_FORCED_MODE:
		rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 80034ec:	235a      	movs	r3, #90	@ 0x5a
 80034ee:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
		rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	885b      	ldrh	r3, [r3, #2]
 80034f6:	6839      	ldr	r1, [r7, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff fa9d 	bl	8002a38 <calc_res_heat>
 80034fe:	4603      	mov	r3, r0
 8003500:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
		gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 8003504:	2364      	movs	r3, #100	@ 0x64
 8003506:	f887 3020 	strb.w	r3, [r7, #32]
		gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	889b      	ldrh	r3, [r3, #4]
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff fb42 	bl	8002b98 <calc_gas_wait>
 8003514:	4603      	mov	r3, r0
 8003516:	753b      	strb	r3, [r7, #20]
		(*nb_conv) = 0;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	701a      	strb	r2, [r3, #0]
		write_len = 1;
 800351e:	2301      	movs	r3, #1
 8003520:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
		break;
 8003524:	e0db      	b.n	80036de <set_conf+0x25a>
	case BME68X_SEQUENTIAL_MODE:
		if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof)) {
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <set_conf+0xb2>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d103      	bne.n	800353e <set_conf+0xba>
			rslt = BME68X_E_NULL_PTR;
 8003536:	23ff      	movs	r3, #255	@ 0xff
 8003538:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			break;
 800353c:	e0cf      	b.n	80036de <set_conf+0x25a>
		}

		for (i = 0; i < conf->profile_len; i++) {
 800353e:	2300      	movs	r3, #0
 8003540:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8003544:	e03f      	b.n	80035c6 <set_conf+0x142>
			rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8003546:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800354a:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800354e:	325a      	adds	r2, #90	@ 0x5a
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	3348      	adds	r3, #72	@ 0x48
 8003554:	443b      	add	r3, r7
 8003556:	f803 2c10 	strb.w	r2, [r3, #-16]
			rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	689a      	ldr	r2, [r3, #8]
 800355e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	4413      	add	r3, r2
 8003566:	881b      	ldrh	r3, [r3, #0]
 8003568:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 800356c:	6839      	ldr	r1, [r7, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff fa62 	bl	8002a38 <calc_res_heat>
 8003574:	4603      	mov	r3, r0
 8003576:	461a      	mov	r2, r3
 8003578:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 800357c:	443b      	add	r3, r7
 800357e:	f803 2c1c 	strb.w	r2, [r3, #-28]
			gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8003582:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003586:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800358a:	3264      	adds	r2, #100	@ 0x64
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	3348      	adds	r3, #72	@ 0x48
 8003590:	443b      	add	r3, r7
 8003592:	f803 2c28 	strb.w	r2, [r3, #-40]
			gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	4413      	add	r3, r2
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff faf5 	bl	8002b98 <calc_gas_wait>
 80035ae:	4603      	mov	r3, r0
 80035b0:	461a      	mov	r2, r3
 80035b2:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 80035b6:	443b      	add	r3, r7
 80035b8:	f803 2c34 	strb.w	r2, [r3, #-52]
		for (i = 0; i < conf->profile_len; i++) {
 80035bc:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80035c0:	3301      	adds	r3, #1
 80035c2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	7c1b      	ldrb	r3, [r3, #16]
 80035ca:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d3b9      	bcc.n	8003546 <set_conf+0xc2>
		}

		(*nb_conv) = conf->profile_len;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	7c1a      	ldrb	r2, [r3, #16]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	701a      	strb	r2, [r3, #0]
		write_len = conf->profile_len;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	7c1b      	ldrb	r3, [r3, #16]
 80035de:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
		break;
 80035e2:	e07c      	b.n	80036de <set_conf+0x25a>
	case BME68X_PARALLEL_MODE:
		if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof)) {
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <set_conf+0x170>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d103      	bne.n	80035fc <set_conf+0x178>
			rslt = BME68X_E_NULL_PTR;
 80035f4:	23ff      	movs	r3, #255	@ 0xff
 80035f6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			break;
 80035fa:	e070      	b.n	80036de <set_conf+0x25a>
		}

		if (conf->shared_heatr_dur == 0) {
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8a5b      	ldrh	r3, [r3, #18]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d102      	bne.n	800360a <set_conf+0x186>
			rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
 8003604:	2303      	movs	r3, #3
 8003606:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		}

		for (i = 0; i < conf->profile_len; i++) {
 800360a:	2300      	movs	r3, #0
 800360c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8003610:	e03a      	b.n	8003688 <set_conf+0x204>
			rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8003612:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003616:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800361a:	325a      	adds	r2, #90	@ 0x5a
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	3348      	adds	r3, #72	@ 0x48
 8003620:	443b      	add	r3, r7
 8003622:	f803 2c10 	strb.w	r2, [r3, #-16]
			rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	689a      	ldr	r2, [r3, #8]
 800362a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	4413      	add	r3, r2
 8003632:	881b      	ldrh	r3, [r3, #0]
 8003634:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 8003638:	6839      	ldr	r1, [r7, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff f9fc 	bl	8002a38 <calc_res_heat>
 8003640:	4603      	mov	r3, r0
 8003642:	461a      	mov	r2, r3
 8003644:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8003648:	443b      	add	r3, r7
 800364a:	f803 2c1c 	strb.w	r2, [r3, #-28]
			gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 800364e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003652:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8003656:	3264      	adds	r2, #100	@ 0x64
 8003658:	b2d2      	uxtb	r2, r2
 800365a:	3348      	adds	r3, #72	@ 0x48
 800365c:	443b      	add	r3, r7
 800365e:	f803 2c28 	strb.w	r2, [r3, #-40]
			gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	4413      	add	r3, r2
 800366e:	881a      	ldrh	r2, [r3, #0]
 8003670:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003674:	b2d2      	uxtb	r2, r2
 8003676:	3348      	adds	r3, #72	@ 0x48
 8003678:	443b      	add	r3, r7
 800367a:	f803 2c34 	strb.w	r2, [r3, #-52]
		for (i = 0; i < conf->profile_len; i++) {
 800367e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003682:	3301      	adds	r3, #1
 8003684:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	7c1b      	ldrb	r3, [r3, #16]
 800368c:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8003690:	429a      	cmp	r2, r3
 8003692:	d3be      	bcc.n	8003612 <set_conf+0x18e>
		}

		(*nb_conv) = conf->profile_len;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	7c1a      	ldrb	r2, [r3, #16]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	701a      	strb	r2, [r3, #0]
		write_len = conf->profile_len;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	7c1b      	ldrb	r3, [r3, #16]
 80036a0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
		shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8a5b      	ldrh	r3, [r3, #18]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 f841 	bl	8003730 <calc_heatr_dur_shared>
 80036ae:	4603      	mov	r3, r0
 80036b0:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
		if (rslt == BME68X_OK) {
 80036b4:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10f      	bne.n	80036dc <set_conf+0x258>
			rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1,
 80036bc:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80036c0:	f107 0043 	add.w	r0, r7, #67	@ 0x43
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f7fe f9ae 	bl	8001a28 <bme68x_set_regs>
 80036cc:	4603      	mov	r3, r0
 80036ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
					dev);
		}

		break;
 80036d2:	e003      	b.n	80036dc <set_conf+0x258>
	default:
		rslt = BME68X_W_DEFINE_OP_MODE;
 80036d4:	2301      	movs	r3, #1
 80036d6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80036da:	e000      	b.n	80036de <set_conf+0x25a>
		break;
 80036dc:	bf00      	nop
	}

	if (rslt == BME68X_OK) {
 80036de:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10b      	bne.n	80036fe <set_conf+0x27a>
		rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 80036e6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80036ea:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80036ee:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	f7fe f998 	bl	8001a28 <bme68x_set_regs>
 80036f8:	4603      	mov	r3, r0
 80036fa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	}

	if (rslt == BME68X_OK) {
 80036fe:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10b      	bne.n	800371e <set_conf+0x29a>
		rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 8003706:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800370a:	f107 0114 	add.w	r1, r7, #20
 800370e:	f107 0020 	add.w	r0, r7, #32
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	f7fe f988 	bl	8001a28 <bme68x_set_regs>
 8003718:	4603      	mov	r3, r0
 800371a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	}

	return rslt;
 800371e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 8003722:	4618      	mov	r0, r3
 8003724:	374c      	adds	r7, #76	@ 0x4c
 8003726:	46bd      	mov	sp, r7
 8003728:	bd90      	pop	{r4, r7, pc}
 800372a:	bf00      	nop
 800372c:	0800e8b0 	.word	0x0800e8b0

08003730 <calc_heatr_dur_shared>:

/* This internal API is used to calculate the register value for
 * shared heater duration */
static uint8_t calc_heatr_dur_shared(uint16_t dur)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	80fb      	strh	r3, [r7, #6]
	uint8_t factor = 0;
 800373a:	2300      	movs	r3, #0
 800373c:	73fb      	strb	r3, [r7, #15]
	uint8_t heatdurval;

	if (dur >= 0x783) {
 800373e:	88fb      	ldrh	r3, [r7, #6]
 8003740:	f240 7282 	movw	r2, #1922	@ 0x782
 8003744:	4293      	cmp	r3, r2
 8003746:	d902      	bls.n	800374e <calc_heatr_dur_shared+0x1e>
		heatdurval = 0xff; /* Max duration */
 8003748:	23ff      	movs	r3, #255	@ 0xff
 800374a:	73bb      	strb	r3, [r7, #14]
 800374c:	e01d      	b.n	800378a <calc_heatr_dur_shared+0x5a>
	} else {
		/* Step size of 0.477ms */
		dur = (uint16_t) (((uint32_t) dur * 1000) / 477);
 800374e:	88fb      	ldrh	r3, [r7, #6]
 8003750:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003754:	fb03 f202 	mul.w	r2, r3, r2
 8003758:	4b0f      	ldr	r3, [pc, #60]	@ (8003798 <calc_heatr_dur_shared+0x68>)
 800375a:	fba3 1302 	umull	r1, r3, r3, r2
 800375e:	1ad2      	subs	r2, r2, r3
 8003760:	0852      	lsrs	r2, r2, #1
 8003762:	4413      	add	r3, r2
 8003764:	0a1b      	lsrs	r3, r3, #8
 8003766:	80fb      	strh	r3, [r7, #6]
		while (dur > 0x3F) {
 8003768:	e005      	b.n	8003776 <calc_heatr_dur_shared+0x46>
			dur = dur >> 2;
 800376a:	88fb      	ldrh	r3, [r7, #6]
 800376c:	089b      	lsrs	r3, r3, #2
 800376e:	80fb      	strh	r3, [r7, #6]
			factor += 1;
 8003770:	7bfb      	ldrb	r3, [r7, #15]
 8003772:	3301      	adds	r3, #1
 8003774:	73fb      	strb	r3, [r7, #15]
		while (dur > 0x3F) {
 8003776:	88fb      	ldrh	r3, [r7, #6]
 8003778:	2b3f      	cmp	r3, #63	@ 0x3f
 800377a:	d8f6      	bhi.n	800376a <calc_heatr_dur_shared+0x3a>
		}

		heatdurval = (uint8_t) (dur + (factor * 64));
 800377c:	88fb      	ldrh	r3, [r7, #6]
 800377e:	b2da      	uxtb	r2, r3
 8003780:	7bfb      	ldrb	r3, [r7, #15]
 8003782:	019b      	lsls	r3, r3, #6
 8003784:	b2db      	uxtb	r3, r3
 8003786:	4413      	add	r3, r2
 8003788:	73bb      	strb	r3, [r7, #14]
	}

	return heatdurval;
 800378a:	7bbb      	ldrb	r3, [r7, #14]
}
 800378c:	4618      	mov	r0, r3
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	12c8b89f 	.word	0x12c8b89f

0800379c <sort_sensor_data>:

/* This internal API is used sort the sensor data */
static void sort_sensor_data(uint8_t low_index, uint8_t high_index,
		struct bme68x_data *field[])
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	4603      	mov	r3, r0
 80037a4:	603a      	str	r2, [r7, #0]
 80037a6:	71fb      	strb	r3, [r7, #7]
 80037a8:	460b      	mov	r3, r1
 80037aa:	71bb      	strb	r3, [r7, #6]
	int16_t meas_index1;
	int16_t meas_index2;

	meas_index1 = (int16_t) field[low_index]->meas_index;
 80037ac:	79fb      	ldrb	r3, [r7, #7]
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	4413      	add	r3, r2
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	789b      	ldrb	r3, [r3, #2]
 80037b8:	81fb      	strh	r3, [r7, #14]
	meas_index2 = (int16_t) field[high_index]->meas_index;
 80037ba:	79bb      	ldrb	r3, [r7, #6]
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	4413      	add	r3, r2
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	789b      	ldrb	r3, [r3, #2]
 80037c6:	81bb      	strh	r3, [r7, #12]
	if ((field[low_index]->status & BME68X_NEW_DATA_MSK)
 80037c8:	79fb      	ldrb	r3, [r7, #7]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	4413      	add	r3, r2
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	b25b      	sxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	da21      	bge.n	800381e <sort_sensor_data+0x82>
			&& (field[high_index]->status & BME68X_NEW_DATA_MSK)) {
 80037da:	79bb      	ldrb	r3, [r7, #6]
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	4413      	add	r3, r2
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	b25b      	sxtb	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	da18      	bge.n	800381e <sort_sensor_data+0x82>
		int16_t diff = meas_index2 - meas_index1;
 80037ec:	89ba      	ldrh	r2, [r7, #12]
 80037ee:	89fb      	ldrh	r3, [r7, #14]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	817b      	strh	r3, [r7, #10]
		if (((diff > -3) && (diff < 0)) || (diff > 2)) {
 80037f6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80037fa:	f113 0f02 	cmn.w	r3, #2
 80037fe:	db03      	blt.n	8003808 <sort_sensor_data+0x6c>
 8003800:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003804:	2b00      	cmp	r3, #0
 8003806:	db03      	blt.n	8003810 <sort_sensor_data+0x74>
 8003808:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800380c:	2b02      	cmp	r3, #2
 800380e:	dd16      	ble.n	800383e <sort_sensor_data+0xa2>
			swap_fields(low_index, high_index, field);
 8003810:	79b9      	ldrb	r1, [r7, #6]
 8003812:	79fb      	ldrb	r3, [r7, #7]
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f000 f816 	bl	8003848 <swap_fields>
			&& (field[high_index]->status & BME68X_NEW_DATA_MSK)) {
 800381c:	e00f      	b.n	800383e <sort_sensor_data+0xa2>
		}
	} else if (field[high_index]->status & BME68X_NEW_DATA_MSK) {
 800381e:	79bb      	ldrb	r3, [r7, #6]
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	4413      	add	r3, r2
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	b25b      	sxtb	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	da07      	bge.n	8003840 <sort_sensor_data+0xa4>
		swap_fields(low_index, high_index, field);
 8003830:	79b9      	ldrb	r1, [r7, #6]
 8003832:	79fb      	ldrb	r3, [r7, #7]
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f000 f806 	bl	8003848 <swap_fields>
	 *         - diff > 2, case 4.
	 *
	 *     Here the limits of -3 and 2 derive from the fact that there are 3 fields.
	 *     These values decrease or increase respectively if the number of fields increases.
	 */
}
 800383c:	e000      	b.n	8003840 <sort_sensor_data+0xa4>
			&& (field[high_index]->status & BME68X_NEW_DATA_MSK)) {
 800383e:	bf00      	nop
}
 8003840:	bf00      	nop
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <swap_fields>:

/* This internal API is used sort the sensor data */
static void swap_fields(uint8_t index1, uint8_t index2,
		struct bme68x_data *field[])
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	4603      	mov	r3, r0
 8003850:	603a      	str	r2, [r7, #0]
 8003852:	71fb      	strb	r3, [r7, #7]
 8003854:	460b      	mov	r3, r1
 8003856:	71bb      	strb	r3, [r7, #6]
	struct bme68x_data *temp;

	temp = field[index1];
 8003858:	79fb      	ldrb	r3, [r7, #7]
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	4413      	add	r3, r2
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	60fb      	str	r3, [r7, #12]
	field[index1] = field[index2];
 8003864:	79bb      	ldrb	r3, [r7, #6]
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	441a      	add	r2, r3
 800386c:	79fb      	ldrb	r3, [r7, #7]
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	6839      	ldr	r1, [r7, #0]
 8003872:	440b      	add	r3, r1
 8003874:	6812      	ldr	r2, [r2, #0]
 8003876:	601a      	str	r2, [r3, #0]
	field[index2] = temp;
 8003878:	79bb      	ldrb	r3, [r7, #6]
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	4413      	add	r3, r2
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	601a      	str	r2, [r3, #0]
}
 8003884:	bf00      	nop
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <get_calib_data>:
	return rslt;
}

/* This internal API is used to read the calibration coefficients */
static int8_t get_calib_data(struct bme68x_dev *dev)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b08e      	sub	sp, #56	@ 0x38
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t coeff_array[BME68X_LEN_COEFF_ALL];

	rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1,
 8003898:	f107 010c 	add.w	r1, r7, #12
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2217      	movs	r2, #23
 80038a0:	208a      	movs	r0, #138	@ 0x8a
 80038a2:	f7fe f951 	bl	8001b48 <bme68x_get_regs>
 80038a6:	4603      	mov	r3, r0
 80038a8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			dev);
	if (rslt == BME68X_OK) {
 80038ac:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10b      	bne.n	80038cc <get_calib_data+0x3c>
		rslt = bme68x_get_regs(BME68X_REG_COEFF2,
 80038b4:	f107 030c 	add.w	r3, r7, #12
 80038b8:	f103 0117 	add.w	r1, r3, #23
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	220e      	movs	r2, #14
 80038c0:	20e1      	movs	r0, #225	@ 0xe1
 80038c2:	f7fe f941 	bl	8001b48 <bme68x_get_regs>
 80038c6:	4603      	mov	r3, r0
 80038c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				&coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
	}

	if (rslt == BME68X_OK) {
 80038cc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10b      	bne.n	80038ec <get_calib_data+0x5c>
		rslt = bme68x_get_regs(BME68X_REG_COEFF3,
 80038d4:	f107 030c 	add.w	r3, r7, #12
 80038d8:	f103 0125 	add.w	r1, r3, #37	@ 0x25
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2205      	movs	r2, #5
 80038e0:	2000      	movs	r0, #0
 80038e2:	f7fe f931 	bl	8001b48 <bme68x_get_regs>
 80038e6:	4603      	mov	r3, r0
 80038e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				&coeff_array[BME68X_LEN_COEFF1 + BME68X_LEN_COEFF2],
				BME68X_LEN_COEFF3, dev);
	}

	if (rslt == BME68X_OK) {
 80038ec:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f040 80cb 	bne.w	8003a8c <get_calib_data+0x1fc>
		/* Temperature related coefficients */
		dev->calib.par_t1 =
				(uint16_t) (BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T1_MSB],
 80038f6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80038fa:	021b      	lsls	r3, r3, #8
 80038fc:	b21a      	sxth	r2, r3
 80038fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003902:	b21b      	sxth	r3, r3
 8003904:	4313      	orrs	r3, r2
 8003906:	b21b      	sxth	r3, r3
 8003908:	b29a      	uxth	r2, r3
		dev->calib.par_t1 =
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	83da      	strh	r2, [r3, #30]
						coeff_array[BME68X_IDX_T1_LSB]));
		dev->calib.par_t2 =
				(int16_t) (BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T2_MSB],
 800390e:	7b7b      	ldrb	r3, [r7, #13]
 8003910:	021b      	lsls	r3, r3, #8
 8003912:	b21a      	sxth	r2, r3
 8003914:	7b3b      	ldrb	r3, [r7, #12]
 8003916:	b21b      	sxth	r3, r3
 8003918:	4313      	orrs	r3, r2
 800391a:	b21a      	sxth	r2, r3
		dev->calib.par_t2 =
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	841a      	strh	r2, [r3, #32]
						coeff_array[BME68X_IDX_T2_LSB]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME68X_IDX_T3]);
 8003920:	7bbb      	ldrb	r3, [r7, #14]
 8003922:	b25a      	sxtb	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

		/* Pressure related coefficients */
		dev->calib.par_p1 =
				(uint16_t) (BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P1_MSB],
 800392a:	7c7b      	ldrb	r3, [r7, #17]
 800392c:	021b      	lsls	r3, r3, #8
 800392e:	b21a      	sxth	r2, r3
 8003930:	7c3b      	ldrb	r3, [r7, #16]
 8003932:	b21b      	sxth	r3, r3
 8003934:	4313      	orrs	r3, r2
 8003936:	b21b      	sxth	r3, r3
 8003938:	b29a      	uxth	r2, r3
		dev->calib.par_p1 =
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	849a      	strh	r2, [r3, #36]	@ 0x24
						coeff_array[BME68X_IDX_P1_LSB]));
		dev->calib.par_p2 =
				(int16_t) (BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P2_MSB],
 800393e:	7cfb      	ldrb	r3, [r7, #19]
 8003940:	021b      	lsls	r3, r3, #8
 8003942:	b21a      	sxth	r2, r3
 8003944:	7cbb      	ldrb	r3, [r7, #18]
 8003946:	b21b      	sxth	r3, r3
 8003948:	4313      	orrs	r3, r2
 800394a:	b21a      	sxth	r2, r3
		dev->calib.par_p2 =
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	84da      	strh	r2, [r3, #38]	@ 0x26
						coeff_array[BME68X_IDX_P2_LSB]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME68X_IDX_P3];
 8003950:	7d3b      	ldrb	r3, [r7, #20]
 8003952:	b25a      	sxtb	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		dev->calib.par_p4 =
				(int16_t) (BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB],
 800395a:	7dfb      	ldrb	r3, [r7, #23]
 800395c:	021b      	lsls	r3, r3, #8
 800395e:	b21a      	sxth	r2, r3
 8003960:	7dbb      	ldrb	r3, [r7, #22]
 8003962:	b21b      	sxth	r3, r3
 8003964:	4313      	orrs	r3, r2
 8003966:	b21a      	sxth	r2, r3
		dev->calib.par_p4 =
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	855a      	strh	r2, [r3, #42]	@ 0x2a
						coeff_array[BME68X_IDX_P4_LSB]));
		dev->calib.par_p5 =
				(int16_t) (BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P5_MSB],
 800396c:	7e7b      	ldrb	r3, [r7, #25]
 800396e:	021b      	lsls	r3, r3, #8
 8003970:	b21a      	sxth	r2, r3
 8003972:	7e3b      	ldrb	r3, [r7, #24]
 8003974:	b21b      	sxth	r3, r3
 8003976:	4313      	orrs	r3, r2
 8003978:	b21a      	sxth	r2, r3
		dev->calib.par_p5 =
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	859a      	strh	r2, [r3, #44]	@ 0x2c
						coeff_array[BME68X_IDX_P5_LSB]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME68X_IDX_P6]);
 800397e:	7efb      	ldrb	r3, [r7, #27]
 8003980:	b25a      	sxtb	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		dev->calib.par_p7 = (int8_t) (coeff_array[BME68X_IDX_P7]);
 8003988:	7ebb      	ldrb	r3, [r7, #26]
 800398a:	b25a      	sxtb	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		dev->calib.par_p8 =
				(int16_t) (BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB],
 8003992:	7ffb      	ldrb	r3, [r7, #31]
 8003994:	021b      	lsls	r3, r3, #8
 8003996:	b21a      	sxth	r2, r3
 8003998:	7fbb      	ldrb	r3, [r7, #30]
 800399a:	b21b      	sxth	r3, r3
 800399c:	4313      	orrs	r3, r2
 800399e:	b21a      	sxth	r2, r3
		dev->calib.par_p8 =
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	861a      	strh	r2, [r3, #48]	@ 0x30
						coeff_array[BME68X_IDX_P8_LSB]));
		dev->calib.par_p9 =
				(int16_t) (BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P9_MSB],
 80039a4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80039a8:	021b      	lsls	r3, r3, #8
 80039aa:	b21a      	sxth	r2, r3
 80039ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80039b0:	b21b      	sxth	r3, r3
 80039b2:	4313      	orrs	r3, r2
 80039b4:	b21a      	sxth	r2, r3
		dev->calib.par_p9 =
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	865a      	strh	r2, [r3, #50]	@ 0x32
						coeff_array[BME68X_IDX_P9_LSB]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME68X_IDX_P10]);
 80039ba:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

		/* Humidity related coefficients */
		dev->calib.par_h1 =
				(uint16_t) (((uint16_t) coeff_array[BME68X_IDX_H1_MSB] << 4)
 80039c4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80039c8:	011b      	lsls	r3, r3, #4
						| (coeff_array[BME68X_IDX_H1_LSB]
 80039ca:	b21a      	sxth	r2, r3
 80039cc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80039d0:	b21b      	sxth	r3, r3
								& BME68X_BIT_H1_DATA_MSK));
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	b21b      	sxth	r3, r3
						| (coeff_array[BME68X_IDX_H1_LSB]
 80039d8:	4313      	orrs	r3, r2
 80039da:	b21b      	sxth	r3, r3
				(uint16_t) (((uint16_t) coeff_array[BME68X_IDX_H1_MSB] << 4)
 80039dc:	b29a      	uxth	r2, r3
		dev->calib.par_h1 =
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	821a      	strh	r2, [r3, #16]
		dev->calib.par_h2 =
				(uint16_t) (((uint16_t) coeff_array[BME68X_IDX_H2_MSB] << 4)
 80039e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80039e6:	011b      	lsls	r3, r3, #4
						| ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 80039e8:	b21a      	sxth	r2, r3
 80039ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80039ee:	091b      	lsrs	r3, r3, #4
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	b21b      	sxth	r3, r3
 80039f4:	4313      	orrs	r3, r2
 80039f6:	b21b      	sxth	r3, r3
				(uint16_t) (((uint16_t) coeff_array[BME68X_IDX_H2_MSB] << 4)
 80039f8:	b29a      	uxth	r2, r3
		dev->calib.par_h2 =
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	825a      	strh	r2, [r3, #18]
		dev->calib.par_h3 = (int8_t) coeff_array[BME68X_IDX_H3];
 80039fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003a02:	b25a      	sxtb	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	751a      	strb	r2, [r3, #20]
		dev->calib.par_h4 = (int8_t) coeff_array[BME68X_IDX_H4];
 8003a08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a0c:	b25a      	sxtb	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	755a      	strb	r2, [r3, #21]
		dev->calib.par_h5 = (int8_t) coeff_array[BME68X_IDX_H5];
 8003a12:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003a16:	b25a      	sxtb	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	759a      	strb	r2, [r3, #22]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME68X_IDX_H6];
 8003a1c:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	75da      	strb	r2, [r3, #23]
		dev->calib.par_h7 = (int8_t) coeff_array[BME68X_IDX_H7];
 8003a24:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003a28:	b25a      	sxtb	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	761a      	strb	r2, [r3, #24]

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME68X_IDX_GH1];
 8003a2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003a32:	b25a      	sxtb	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	765a      	strb	r2, [r3, #25]
		dev->calib.par_gh2 = (int16_t) (BME68X_CONCAT_BYTES(
 8003a38:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003a3c:	021b      	lsls	r3, r3, #8
 8003a3e:	b21a      	sxth	r2, r3
 8003a40:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003a44:	b21b      	sxth	r3, r3
 8003a46:	4313      	orrs	r3, r2
 8003a48:	b21a      	sxth	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	835a      	strh	r2, [r3, #26]
				coeff_array[BME68X_IDX_GH2_MSB],
				coeff_array[BME68X_IDX_GH2_LSB]));
		dev->calib.par_gh3 = (int8_t) coeff_array[BME68X_IDX_GH3];
 8003a4e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003a52:	b25a      	sxtb	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	771a      	strb	r2, [r3, #28]

		/* Other coefficients */
		dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE]
 8003a58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
				& BME68X_RHRANGE_MSK) / 16);
 8003a5c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	da00      	bge.n	8003a66 <get_calib_data+0x1d6>
 8003a64:	330f      	adds	r3, #15
 8003a66:	111b      	asrs	r3, r3, #4
		dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE]
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		dev->calib.res_heat_val = (int8_t) coeff_array[BME68X_IDX_RES_HEAT_VAL];
 8003a70:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8003a74:	b25a      	sxtb	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
		dev->calib.range_sw_err =
				((int8_t) (coeff_array[BME68X_IDX_RANGE_SW_ERR]
 8003a7c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003a80:	b25b      	sxtb	r3, r3
		dev->calib.range_sw_err =
 8003a82:	111b      	asrs	r3, r3, #4
 8003a84:	b25a      	sxtb	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
						& BME68X_RSERROR_MSK)) / 16;
	}

	return rslt;
 8003a8c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3738      	adds	r7, #56	@ 0x38
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <read_variant_id>:

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme68x_dev *dev)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data = 0;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	73bb      	strb	r3, [r7, #14]

	/* Read variant ID information register */
	rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 8003aa4:	f107 010e 	add.w	r1, r7, #14
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	20f0      	movs	r0, #240	@ 0xf0
 8003aae:	f7fe f84b 	bl	8001b48 <bme68x_get_regs>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME68X_OK) {
 8003ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d103      	bne.n	8003ac6 <read_variant_id+0x2e>
		dev->variant_id = reg_data;
 8003abe:	7bbb      	ldrb	r3, [r7, #14]
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	609a      	str	r2, [r3, #8]
	}

	return rslt;
 8003ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
	...

08003ad4 <bme68x_start>:
float gas_lower_limit = 5000;   // Bad air quality limit
float gas_upper_limit = 50000;  // Good air quality limit

/* Complete init. function. */
int8_t bme68x_start(struct bme68x_data *dataPtr, I2C_HandleTypeDef *handler)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]

	// I2C handler copy
	memcpy(&BME68x_I2C_Handler, handler, sizeof(*handler));
 8003ade:	2254      	movs	r2, #84	@ 0x54
 8003ae0:	6839      	ldr	r1, [r7, #0]
 8003ae2:	481e      	ldr	r0, [pc, #120]	@ (8003b5c <bme68x_start+0x88>)
 8003ae4:	f00a fe82 	bl	800e7ec <memcpy>

	// Init.
	bme68x_interface_init(&bme, BME68X_I2C_INTF);
 8003ae8:	2101      	movs	r1, #1
 8003aea:	481d      	ldr	r0, [pc, #116]	@ (8003b60 <bme68x_start+0x8c>)
 8003aec:	f000 f8ea 	bl	8003cc4 <bme68x_interface_init>
	bme68x_init(&bme);
 8003af0:	481b      	ldr	r0, [pc, #108]	@ (8003b60 <bme68x_start+0x8c>)
 8003af2:	f7fd ff65 	bl	80019c0 <bme68x_init>

	// Init. for data variable
	BME68x_DATA = dataPtr;
 8003af6:	4a1b      	ldr	r2, [pc, #108]	@ (8003b64 <bme68x_start+0x90>)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6013      	str	r3, [r2, #0]

	// Configuration
	/* Check if rslt == BME68X_OK, report or handle if otherwise */
	conf.filter = BME68X_FILTER_SIZE_3;
 8003afc:	4b1a      	ldr	r3, [pc, #104]	@ (8003b68 <bme68x_start+0x94>)
 8003afe:	2202      	movs	r2, #2
 8003b00:	70da      	strb	r2, [r3, #3]
	conf.odr = BME68X_ODR_NONE;
 8003b02:	4b19      	ldr	r3, [pc, #100]	@ (8003b68 <bme68x_start+0x94>)
 8003b04:	2208      	movs	r2, #8
 8003b06:	711a      	strb	r2, [r3, #4]
	conf.os_hum = BME68X_OS_2X;
 8003b08:	4b17      	ldr	r3, [pc, #92]	@ (8003b68 <bme68x_start+0x94>)
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	701a      	strb	r2, [r3, #0]
	conf.os_pres = BME68X_OS_4X;
 8003b0e:	4b16      	ldr	r3, [pc, #88]	@ (8003b68 <bme68x_start+0x94>)
 8003b10:	2203      	movs	r2, #3
 8003b12:	709a      	strb	r2, [r3, #2]
	conf.os_temp = BME68X_OS_8X;
 8003b14:	4b14      	ldr	r3, [pc, #80]	@ (8003b68 <bme68x_start+0x94>)
 8003b16:	2204      	movs	r2, #4
 8003b18:	705a      	strb	r2, [r3, #1]
	bme68x_set_conf(&conf, &bme);
 8003b1a:	4911      	ldr	r1, [pc, #68]	@ (8003b60 <bme68x_start+0x8c>)
 8003b1c:	4812      	ldr	r0, [pc, #72]	@ (8003b68 <bme68x_start+0x94>)
 8003b1e:	f7fe f89b 	bl	8001c58 <bme68x_set_conf>

	// Heat conf.
	/* Check if rslt == BME68X_OK, report or handle if otherwise */
	heatr_conf.enable = BME68X_ENABLE;
 8003b22:	4b12      	ldr	r3, [pc, #72]	@ (8003b6c <bme68x_start+0x98>)
 8003b24:	2201      	movs	r2, #1
 8003b26:	701a      	strb	r2, [r3, #0]
	heatr_conf.heatr_temp = 320;
 8003b28:	4b10      	ldr	r3, [pc, #64]	@ (8003b6c <bme68x_start+0x98>)
 8003b2a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003b2e:	805a      	strh	r2, [r3, #2]
	heatr_conf.heatr_dur = 150;
 8003b30:	4b0e      	ldr	r3, [pc, #56]	@ (8003b6c <bme68x_start+0x98>)
 8003b32:	2296      	movs	r2, #150	@ 0x96
 8003b34:	809a      	strh	r2, [r3, #4]
	rslt = bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heatr_conf, &bme);
 8003b36:	4a0a      	ldr	r2, [pc, #40]	@ (8003b60 <bme68x_start+0x8c>)
 8003b38:	490c      	ldr	r1, [pc, #48]	@ (8003b6c <bme68x_start+0x98>)
 8003b3a:	2001      	movs	r0, #1
 8003b3c:	f7fe fb84 	bl	8002248 <bme68x_set_heatr_conf>
 8003b40:	4603      	mov	r3, r0
 8003b42:	461a      	mov	r2, r3
 8003b44:	4b0a      	ldr	r3, [pc, #40]	@ (8003b70 <bme68x_start+0x9c>)
 8003b46:	701a      	strb	r2, [r3, #0]

	// Gather gas reference for the IAQ calculation
	bme68x_GetGasReference();
 8003b48:	f000 f906 	bl	8003d58 <bme68x_GetGasReference>

	return rslt;
 8003b4c:	4b08      	ldr	r3, [pc, #32]	@ (8003b70 <bme68x_start+0x9c>)
 8003b4e:	f993 3000 	ldrsb.w	r3, [r3]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	200001a8 	.word	0x200001a8
 8003b60:	200001fc 	.word	0x200001fc
 8003b64:	2000024c 	.word	0x2000024c
 8003b68:	20000254 	.word	0x20000254
 8003b6c:	2000025c 	.word	0x2000025c
 8003b70:	20000250 	.word	0x20000250

08003b74 <bme68x_single_measure>:

/* Force mode measurement. */
int8_t bme68x_single_measure(struct bme68x_data *dataPtr)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]

	bme68x_set_op_mode(BME68X_FORCED_MODE, &bme);
 8003b7c:	4916      	ldr	r1, [pc, #88]	@ (8003bd8 <bme68x_single_measure+0x64>)
 8003b7e:	2001      	movs	r0, #1
 8003b80:	f7fe f96e 	bl	8001e60 <bme68x_set_op_mode>

	/* Calculate delay period in microseconds */
	del_period = bme68x_get_meas_dur(BME68X_FORCED_MODE, &conf, &bme)
 8003b84:	4a14      	ldr	r2, [pc, #80]	@ (8003bd8 <bme68x_single_measure+0x64>)
 8003b86:	4915      	ldr	r1, [pc, #84]	@ (8003bdc <bme68x_single_measure+0x68>)
 8003b88:	2001      	movs	r0, #1
 8003b8a:	f7fe f9eb 	bl	8001f64 <bme68x_get_meas_dur>
 8003b8e:	4603      	mov	r3, r0
			+ (heatr_conf.heatr_dur * 1000);
 8003b90:	4a13      	ldr	r2, [pc, #76]	@ (8003be0 <bme68x_single_measure+0x6c>)
 8003b92:	8892      	ldrh	r2, [r2, #4]
 8003b94:	4611      	mov	r1, r2
 8003b96:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003b9a:	fb01 f202 	mul.w	r2, r1, r2
 8003b9e:	4413      	add	r3, r2
	del_period = bme68x_get_meas_dur(BME68X_FORCED_MODE, &conf, &bme)
 8003ba0:	4a10      	ldr	r2, [pc, #64]	@ (8003be4 <bme68x_single_measure+0x70>)
 8003ba2:	6013      	str	r3, [r2, #0]
	// bme.delay_us(del_period, bme.intf_ptr);
	HAL_Delay(del_period / 1000);
 8003ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8003be4 <bme68x_single_measure+0x70>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a0f      	ldr	r2, [pc, #60]	@ (8003be8 <bme68x_single_measure+0x74>)
 8003baa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bae:	099b      	lsrs	r3, r3, #6
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f005 fb23 	bl	80091fc <HAL_Delay>

	/* Check if rslt == BME68X_OK, report or handle if otherwise */
	rslt = bme68x_get_data(BME68X_FORCED_MODE, dataPtr, &n_fields, &bme);
 8003bb6:	4b08      	ldr	r3, [pc, #32]	@ (8003bd8 <bme68x_single_measure+0x64>)
 8003bb8:	4a0c      	ldr	r2, [pc, #48]	@ (8003bec <bme68x_single_measure+0x78>)
 8003bba:	6879      	ldr	r1, [r7, #4]
 8003bbc:	2001      	movs	r0, #1
 8003bbe:	f7fe fa45 	bl	800204c <bme68x_get_data>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8003bf0 <bme68x_single_measure+0x7c>)
 8003bc8:	701a      	strb	r2, [r3, #0]

	return rslt;
 8003bca:	4b09      	ldr	r3, [pc, #36]	@ (8003bf0 <bme68x_single_measure+0x7c>)
 8003bcc:	f993 3000 	ldrsb.w	r3, [r3]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	200001fc 	.word	0x200001fc
 8003bdc:	20000254 	.word	0x20000254
 8003be0:	2000025c 	.word	0x2000025c
 8003be4:	20000270 	.word	0x20000270
 8003be8:	10624dd3 	.word	0x10624dd3
 8003bec:	20000274 	.word	0x20000274
 8003bf0:	20000250 	.word	0x20000250

08003bf4 <bme68x_i2c_write>:

/* Necessary functions. */
// I2C write function.
BME68X_INTF_RET_TYPE bme68x_i2c_write(uint8_t reg_addr, const uint8_t *reg_data,
		uint32_t len, void *intf_ptr)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b08a      	sub	sp, #40	@ 0x28
 8003bf8:	af04      	add	r7, sp, #16
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	607a      	str	r2, [r7, #4]
 8003bfe:	603b      	str	r3, [r7, #0]
 8003c00:	4603      	mov	r3, r0
 8003c02:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t*) intf_ptr;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	75fb      	strb	r3, [r7, #23]

	if (HAL_I2C_Mem_Write(&BME68x_I2C_Handler, (uint16_t) (dev_addr << 1),
 8003c0a:	7dfb      	ldrb	r3, [r7, #23]
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	b299      	uxth	r1, r3
 8003c12:	7bfb      	ldrb	r3, [r7, #15]
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	200f      	movs	r0, #15
 8003c1c:	9002      	str	r0, [sp, #8]
 8003c1e:	9301      	str	r3, [sp, #4]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	2301      	movs	r3, #1
 8003c26:	4806      	ldr	r0, [pc, #24]	@ (8003c40 <bme68x_i2c_write+0x4c>)
 8003c28:	f007 f9a6 	bl	800af78 <HAL_I2C_Mem_Write>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <bme68x_i2c_write+0x42>
			reg_addr, 1, (uint8_t*) reg_data, len, 15) == HAL_OK)
		return 0;
 8003c32:	2300      	movs	r3, #0
 8003c34:	e000      	b.n	8003c38 <bme68x_i2c_write+0x44>

	return 1;
 8003c36:	2301      	movs	r3, #1
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	200001a8 	.word	0x200001a8

08003c44 <bme68x_i2c_read>:

// I2C read function.
BME68X_INTF_RET_TYPE bme68x_i2c_read(uint8_t reg_addr, uint8_t *reg_data,
		uint32_t len, void *intf_ptr)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08a      	sub	sp, #40	@ 0x28
 8003c48:	af04      	add	r7, sp, #16
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	607a      	str	r2, [r7, #4]
 8003c4e:	603b      	str	r3, [r7, #0]
 8003c50:	4603      	mov	r3, r0
 8003c52:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t*) intf_ptr;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	75fb      	strb	r3, [r7, #23]

	if (HAL_I2C_Mem_Read(&BME68x_I2C_Handler,
			(uint16_t) ((dev_addr << 1) | 0x1), reg_addr, 1, reg_data, len, 15)
 8003c5a:	7dfb      	ldrb	r3, [r7, #23]
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	b21b      	sxth	r3, r3
 8003c60:	f043 0301 	orr.w	r3, r3, #1
 8003c64:	b21b      	sxth	r3, r3
	if (HAL_I2C_Mem_Read(&BME68x_I2C_Handler,
 8003c66:	b299      	uxth	r1, r3
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	200f      	movs	r0, #15
 8003c72:	9002      	str	r0, [sp, #8]
 8003c74:	9301      	str	r3, [sp, #4]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	4806      	ldr	r0, [pc, #24]	@ (8003c98 <bme68x_i2c_read+0x54>)
 8003c7e:	f007 fa8f 	bl	800b1a0 <HAL_I2C_Mem_Read>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <bme68x_i2c_read+0x48>
			== HAL_OK)
		return 0;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	e000      	b.n	8003c8e <bme68x_i2c_read+0x4a>

	return 1;
 8003c8c:	2301      	movs	r3, #1
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	200001a8 	.word	0x200001a8

08003c9c <bme68x_delay_us>:

// BME68x delay function
void bme68x_delay_us(uint32_t period, void *intf_ptr)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
	HAL_Delay(period / 1000);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a05      	ldr	r2, [pc, #20]	@ (8003cc0 <bme68x_delay_us+0x24>)
 8003caa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cae:	099b      	lsrs	r3, r3, #6
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f005 faa3 	bl	80091fc <HAL_Delay>
}
 8003cb6:	bf00      	nop
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	10624dd3 	.word	0x10624dd3

08003cc4 <bme68x_interface_init>:

// BME68x interface function
int8_t bme68x_interface_init(struct bme68x_dev *bme, uint8_t intf)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	70fb      	strb	r3, [r7, #3]
	int8_t rslt = BME68X_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	73fb      	strb	r3, [r7, #15]

	if (bme != NULL) {
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d02c      	beq.n	8003d34 <bme68x_interface_init+0x70>

		// Check for the device on the I2C line
		if (HAL_I2C_IsDeviceReady(&BME68x_I2C_Handler,
 8003cda:	4b1a      	ldr	r3, [pc, #104]	@ (8003d44 <bme68x_interface_init+0x80>)
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	b299      	uxth	r1, r3
 8003ce2:	2305      	movs	r3, #5
 8003ce4:	2205      	movs	r2, #5
 8003ce6:	4818      	ldr	r0, [pc, #96]	@ (8003d48 <bme68x_interface_init+0x84>)
 8003ce8:	f007 fb74 	bl	800b3d4 <HAL_I2C_IsDeviceReady>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d105      	bne.n	8003cfe <bme68x_interface_init+0x3a>
				(uint16_t) (dev_addr << 1), 5, 5) == HAL_OK) {
			// Device found at the I2C line.
			rslt = 0;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	73fb      	strb	r3, [r7, #15]
			rslt = -2; // Communication error.
			return rslt;
		}

		/* Bus configuration : I2C */
		if (intf == BME68X_I2C_INTF) {
 8003cf6:	78fb      	ldrb	r3, [r7, #3]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d118      	bne.n	8003d2e <bme68x_interface_init+0x6a>
 8003cfc:	e004      	b.n	8003d08 <bme68x_interface_init+0x44>
			rslt = -2; // Communication error.
 8003cfe:	23fe      	movs	r3, #254	@ 0xfe
 8003d00:	73fb      	strb	r3, [r7, #15]
			return rslt;
 8003d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d06:	e019      	b.n	8003d3c <bme68x_interface_init+0x78>
			bme->read = bme68x_i2c_read;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a10      	ldr	r2, [pc, #64]	@ (8003d4c <bme68x_interface_init+0x88>)
 8003d0c:	641a      	str	r2, [r3, #64]	@ 0x40
			bme->write = bme68x_i2c_write;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a0f      	ldr	r2, [pc, #60]	@ (8003d50 <bme68x_interface_init+0x8c>)
 8003d12:	645a      	str	r2, [r3, #68]	@ 0x44
			bme->intf = BME68X_I2C_INTF;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	731a      	strb	r2, [r3, #12]
		} else {
			return -2;
		}

		bme->delay_us = bme68x_delay_us;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8003d54 <bme68x_interface_init+0x90>)
 8003d1e:	649a      	str	r2, [r3, #72]	@ 0x48
		bme->intf_ptr = &dev_addr;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a08      	ldr	r2, [pc, #32]	@ (8003d44 <bme68x_interface_init+0x80>)
 8003d24:	605a      	str	r2, [r3, #4]
		bme->amb_temp = 30; /* The ambient temperature in deg C is used for defining the heater temperature */
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	221e      	movs	r2, #30
 8003d2a:	739a      	strb	r2, [r3, #14]
 8003d2c:	e004      	b.n	8003d38 <bme68x_interface_init+0x74>
			return -2;
 8003d2e:	f06f 0301 	mvn.w	r3, #1
 8003d32:	e003      	b.n	8003d3c <bme68x_interface_init+0x78>
	} else {
		rslt = BME68X_E_NULL_PTR;
 8003d34:	23ff      	movs	r3, #255	@ 0xff
 8003d36:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8003d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	20000000 	.word	0x20000000
 8003d48:	200001a8 	.word	0x200001a8
 8003d4c:	08003c45 	.word	0x08003c45
 8003d50:	08003bf5 	.word	0x08003bf5
 8003d54:	08003c9d 	.word	0x08003c9d

08003d58 <bme68x_GetGasReference>:
 See more at http://www.dsbird.org.uk
 */

/* IAQ functions */
void bme68x_GetGasReference()
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
	// Now run the sensor for a burn-in period, then use combination of relative humidity and gas resistance to estimate indoor air quality as a percentage.

	int readings = 10;
 8003d5e:	230a      	movs	r3, #10
 8003d60:	603b      	str	r3, [r7, #0]
	for (int i = 1; i <= readings; i++) { // read gas for 10 x 0.150mS = 1.5secs
 8003d62:	2301      	movs	r3, #1
 8003d64:	607b      	str	r3, [r7, #4]
 8003d66:	e013      	b.n	8003d90 <bme68x_GetGasReference+0x38>
		bme68x_single_measure(BME68x_DATA);
 8003d68:	4b14      	ldr	r3, [pc, #80]	@ (8003dbc <bme68x_GetGasReference+0x64>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff ff01 	bl	8003b74 <bme68x_single_measure>
		gas_reference += BME68x_DATA->gas_resistance;
 8003d72:	4b12      	ldr	r3, [pc, #72]	@ (8003dbc <bme68x_GetGasReference+0x64>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	ed93 7a06 	vldr	s14, [r3, #24]
 8003d7a:	4b11      	ldr	r3, [pc, #68]	@ (8003dc0 <bme68x_GetGasReference+0x68>)
 8003d7c:	edd3 7a00 	vldr	s15, [r3]
 8003d80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d84:	4b0e      	ldr	r3, [pc, #56]	@ (8003dc0 <bme68x_GetGasReference+0x68>)
 8003d86:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 1; i <= readings; i++) { // read gas for 10 x 0.150mS = 1.5secs
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	607b      	str	r3, [r7, #4]
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	dde7      	ble.n	8003d68 <bme68x_GetGasReference+0x10>
	}
	gas_reference = gas_reference / readings;
 8003d98:	4b09      	ldr	r3, [pc, #36]	@ (8003dc0 <bme68x_GetGasReference+0x68>)
 8003d9a:	edd3 6a00 	vldr	s13, [r3]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	ee07 3a90 	vmov	s15, r3
 8003da4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003da8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dac:	4b04      	ldr	r3, [pc, #16]	@ (8003dc0 <bme68x_GetGasReference+0x68>)
 8003dae:	edc3 7a00 	vstr	s15, [r3]

}
 8003db2:	bf00      	nop
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	2000024c 	.word	0x2000024c
 8003dc0:	20000004 	.word	0x20000004
 8003dc4:	00000000 	.word	0x00000000

08003dc8 <bme68x_GetHumidityScore>:

//Calculate humidity contribution to IAQ index
int8_t bme68x_GetHumidityScore()
{
 8003dc8:	b5b0      	push	{r4, r5, r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0

	if (BME68x_DATA->humidity >= 38 && BME68x_DATA->humidity <= 42) // Humidity +/-5% around optimum
 8003dce:	4b52      	ldr	r3, [pc, #328]	@ (8003f18 <bme68x_GetHumidityScore+0x150>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	edd3 7a05 	vldr	s15, [r3, #20]
 8003dd6:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8003f1c <bme68x_GetHumidityScore+0x154>
 8003dda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003de2:	db0e      	blt.n	8003e02 <bme68x_GetHumidityScore+0x3a>
 8003de4:	4b4c      	ldr	r3, [pc, #304]	@ (8003f18 <bme68x_GetHumidityScore+0x150>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	edd3 7a05 	vldr	s15, [r3, #20]
 8003dec:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8003f20 <bme68x_GetHumidityScore+0x158>
 8003df0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003df8:	d803      	bhi.n	8003e02 <bme68x_GetHumidityScore+0x3a>
		humidity_score = 0.25 * 100;
 8003dfa:	4b4a      	ldr	r3, [pc, #296]	@ (8003f24 <bme68x_GetHumidityScore+0x15c>)
 8003dfc:	4a4a      	ldr	r2, [pc, #296]	@ (8003f28 <bme68x_GetHumidityScore+0x160>)
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	e076      	b.n	8003ef0 <bme68x_GetHumidityScore+0x128>
	else { // Humidity is sub-optimal
		if (BME68x_DATA->humidity < 38)
 8003e02:	4b45      	ldr	r3, [pc, #276]	@ (8003f18 <bme68x_GetHumidityScore+0x150>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	edd3 7a05 	vldr	s15, [r3, #20]
 8003e0a:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8003f1c <bme68x_GetHumidityScore+0x154>
 8003e0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e16:	d52e      	bpl.n	8003e76 <bme68x_GetHumidityScore+0xae>
			humidity_score = 0.25 / hum_reference * BME68x_DATA->humidity * 100;
 8003e18:	4b44      	ldr	r3, [pc, #272]	@ (8003f2c <bme68x_GetHumidityScore+0x164>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7fc fb3b 	bl	8000498 <__aeabi_f2d>
 8003e22:	4602      	mov	r2, r0
 8003e24:	460b      	mov	r3, r1
 8003e26:	f04f 0000 	mov.w	r0, #0
 8003e2a:	4941      	ldr	r1, [pc, #260]	@ (8003f30 <bme68x_GetHumidityScore+0x168>)
 8003e2c:	f7fc fcb6 	bl	800079c <__aeabi_ddiv>
 8003e30:	4602      	mov	r2, r0
 8003e32:	460b      	mov	r3, r1
 8003e34:	4614      	mov	r4, r2
 8003e36:	461d      	mov	r5, r3
 8003e38:	4b37      	ldr	r3, [pc, #220]	@ (8003f18 <bme68x_GetHumidityScore+0x150>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fc fb2a 	bl	8000498 <__aeabi_f2d>
 8003e44:	4602      	mov	r2, r0
 8003e46:	460b      	mov	r3, r1
 8003e48:	4620      	mov	r0, r4
 8003e4a:	4629      	mov	r1, r5
 8003e4c:	f7fc fb7c 	bl	8000548 <__aeabi_dmul>
 8003e50:	4602      	mov	r2, r0
 8003e52:	460b      	mov	r3, r1
 8003e54:	4610      	mov	r0, r2
 8003e56:	4619      	mov	r1, r3
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	4b35      	ldr	r3, [pc, #212]	@ (8003f34 <bme68x_GetHumidityScore+0x16c>)
 8003e5e:	f7fc fb73 	bl	8000548 <__aeabi_dmul>
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	4610      	mov	r0, r2
 8003e68:	4619      	mov	r1, r3
 8003e6a:	f7fc fd7f 	bl	800096c <__aeabi_d2f>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	4a2c      	ldr	r2, [pc, #176]	@ (8003f24 <bme68x_GetHumidityScore+0x15c>)
 8003e72:	6013      	str	r3, [r2, #0]
 8003e74:	e03c      	b.n	8003ef0 <bme68x_GetHumidityScore+0x128>
		else {
			humidity_score = ((-0.25 / (100 - hum_reference)
 8003e76:	4b2d      	ldr	r3, [pc, #180]	@ (8003f2c <bme68x_GetHumidityScore+0x164>)
 8003e78:	edd3 7a00 	vldr	s15, [r3]
 8003e7c:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8003f38 <bme68x_GetHumidityScore+0x170>
 8003e80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e84:	ee17 0a90 	vmov	r0, s15
 8003e88:	f7fc fb06 	bl	8000498 <__aeabi_f2d>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	f04f 0000 	mov.w	r0, #0
 8003e94:	4929      	ldr	r1, [pc, #164]	@ (8003f3c <bme68x_GetHumidityScore+0x174>)
 8003e96:	f7fc fc81 	bl	800079c <__aeabi_ddiv>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	4614      	mov	r4, r2
 8003ea0:	461d      	mov	r5, r3
					* BME68x_DATA->humidity) + 0.416666) * 100;
 8003ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8003f18 <bme68x_GetHumidityScore+0x150>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7fc faf5 	bl	8000498 <__aeabi_f2d>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	4620      	mov	r0, r4
 8003eb4:	4629      	mov	r1, r5
 8003eb6:	f7fc fb47 	bl	8000548 <__aeabi_dmul>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	4610      	mov	r0, r2
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	a313      	add	r3, pc, #76	@ (adr r3, 8003f10 <bme68x_GetHumidityScore+0x148>)
 8003ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec8:	f7fc f988 	bl	80001dc <__adddf3>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4610      	mov	r0, r2
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	f04f 0200 	mov.w	r2, #0
 8003ed8:	4b16      	ldr	r3, [pc, #88]	@ (8003f34 <bme68x_GetHumidityScore+0x16c>)
 8003eda:	f7fc fb35 	bl	8000548 <__aeabi_dmul>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	4610      	mov	r0, r2
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	f7fc fd41 	bl	800096c <__aeabi_d2f>
 8003eea:	4603      	mov	r3, r0
			humidity_score = ((-0.25 / (100 - hum_reference)
 8003eec:	4a0d      	ldr	r2, [pc, #52]	@ (8003f24 <bme68x_GetHumidityScore+0x15c>)
 8003eee:	6013      	str	r3, [r2, #0]
		}
	}

	return humidity_score;
 8003ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8003f24 <bme68x_GetHumidityScore+0x15c>)
 8003ef2:	edd3 7a00 	vldr	s15, [r3]
 8003ef6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003efa:	edc7 7a01 	vstr	s15, [r7, #4]
 8003efe:	793b      	ldrb	r3, [r7, #4]
 8003f00:	b25b      	sxtb	r3, r3
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bdb0      	pop	{r4, r5, r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	f3af 8000 	nop.w
 8003f10:	ded6ba8c 	.word	0xded6ba8c
 8003f14:	3fdaaaa7 	.word	0x3fdaaaa7
 8003f18:	2000024c 	.word	0x2000024c
 8003f1c:	42180000 	.word	0x42180000
 8003f20:	42280000 	.word	0x42280000
 8003f24:	20000278 	.word	0x20000278
 8003f28:	41c80000 	.word	0x41c80000
 8003f2c:	20000008 	.word	0x20000008
 8003f30:	3fd00000 	.word	0x3fd00000
 8003f34:	40590000 	.word	0x40590000
 8003f38:	42c80000 	.word	0x42c80000
 8003f3c:	bfd00000 	.word	0xbfd00000

08003f40 <bme68x_GetGasScore>:

//Calculate gas contribution to IAQ index
int8_t bme68x_GetGasScore()
{
 8003f40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003f44:	b082      	sub	sp, #8
 8003f46:	af00      	add	r7, sp, #0

	gas_score = (0.75 / (gas_upper_limit - gas_lower_limit) * gas_reference
 8003f48:	4b42      	ldr	r3, [pc, #264]	@ (8004054 <bme68x_GetGasScore+0x114>)
 8003f4a:	ed93 7a00 	vldr	s14, [r3]
 8003f4e:	4b42      	ldr	r3, [pc, #264]	@ (8004058 <bme68x_GetGasScore+0x118>)
 8003f50:	edd3 7a00 	vldr	s15, [r3]
 8003f54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f58:	ee17 0a90 	vmov	r0, s15
 8003f5c:	f7fc fa9c 	bl	8000498 <__aeabi_f2d>
 8003f60:	4602      	mov	r2, r0
 8003f62:	460b      	mov	r3, r1
 8003f64:	f04f 0000 	mov.w	r0, #0
 8003f68:	493c      	ldr	r1, [pc, #240]	@ (800405c <bme68x_GetGasScore+0x11c>)
 8003f6a:	f7fc fc17 	bl	800079c <__aeabi_ddiv>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	4614      	mov	r4, r2
 8003f74:	461d      	mov	r5, r3
 8003f76:	4b3a      	ldr	r3, [pc, #232]	@ (8004060 <bme68x_GetGasScore+0x120>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fc fa8c 	bl	8000498 <__aeabi_f2d>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	4620      	mov	r0, r4
 8003f86:	4629      	mov	r1, r5
 8003f88:	f7fc fade 	bl	8000548 <__aeabi_dmul>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4690      	mov	r8, r2
 8003f92:	4699      	mov	r9, r3
			- (gas_lower_limit * (0.75 / (gas_upper_limit - gas_lower_limit))))
 8003f94:	4b30      	ldr	r3, [pc, #192]	@ (8004058 <bme68x_GetGasScore+0x118>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7fc fa7d 	bl	8000498 <__aeabi_f2d>
 8003f9e:	4604      	mov	r4, r0
 8003fa0:	460d      	mov	r5, r1
 8003fa2:	4b2c      	ldr	r3, [pc, #176]	@ (8004054 <bme68x_GetGasScore+0x114>)
 8003fa4:	ed93 7a00 	vldr	s14, [r3]
 8003fa8:	4b2b      	ldr	r3, [pc, #172]	@ (8004058 <bme68x_GetGasScore+0x118>)
 8003faa:	edd3 7a00 	vldr	s15, [r3]
 8003fae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fb2:	ee17 0a90 	vmov	r0, s15
 8003fb6:	f7fc fa6f 	bl	8000498 <__aeabi_f2d>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	f04f 0000 	mov.w	r0, #0
 8003fc2:	4926      	ldr	r1, [pc, #152]	@ (800405c <bme68x_GetGasScore+0x11c>)
 8003fc4:	f7fc fbea 	bl	800079c <__aeabi_ddiv>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4620      	mov	r0, r4
 8003fce:	4629      	mov	r1, r5
 8003fd0:	f7fc faba 	bl	8000548 <__aeabi_dmul>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4640      	mov	r0, r8
 8003fda:	4649      	mov	r1, r9
 8003fdc:	f7fc f8fc 	bl	80001d8 <__aeabi_dsub>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	4610      	mov	r0, r2
 8003fe6:	4619      	mov	r1, r3
			* 100.00;
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	4b1d      	ldr	r3, [pc, #116]	@ (8004064 <bme68x_GetGasScore+0x124>)
 8003fee:	f7fc faab 	bl	8000548 <__aeabi_dmul>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	f7fc fcb7 	bl	800096c <__aeabi_d2f>
 8003ffe:	4603      	mov	r3, r0
	gas_score = (0.75 / (gas_upper_limit - gas_lower_limit) * gas_reference
 8004000:	4a19      	ldr	r2, [pc, #100]	@ (8004068 <bme68x_GetGasScore+0x128>)
 8004002:	6013      	str	r3, [r2, #0]
	if (gas_score > 75)
 8004004:	4b18      	ldr	r3, [pc, #96]	@ (8004068 <bme68x_GetGasScore+0x128>)
 8004006:	edd3 7a00 	vldr	s15, [r3]
 800400a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800406c <bme68x_GetGasScore+0x12c>
 800400e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004016:	dd02      	ble.n	800401e <bme68x_GetGasScore+0xde>
		gas_score = 75; // Sometimes gas readings can go outside of expected scale maximum
 8004018:	4b13      	ldr	r3, [pc, #76]	@ (8004068 <bme68x_GetGasScore+0x128>)
 800401a:	4a15      	ldr	r2, [pc, #84]	@ (8004070 <bme68x_GetGasScore+0x130>)
 800401c:	601a      	str	r2, [r3, #0]
	if (gas_score < 0)
 800401e:	4b12      	ldr	r3, [pc, #72]	@ (8004068 <bme68x_GetGasScore+0x128>)
 8004020:	edd3 7a00 	vldr	s15, [r3]
 8004024:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800402c:	d503      	bpl.n	8004036 <bme68x_GetGasScore+0xf6>
		gas_score = 0; // Sometimes gas readings can go outside of expected scale minimum
 800402e:	4b0e      	ldr	r3, [pc, #56]	@ (8004068 <bme68x_GetGasScore+0x128>)
 8004030:	f04f 0200 	mov.w	r2, #0
 8004034:	601a      	str	r2, [r3, #0]

	return gas_score;
 8004036:	4b0c      	ldr	r3, [pc, #48]	@ (8004068 <bme68x_GetGasScore+0x128>)
 8004038:	edd3 7a00 	vldr	s15, [r3]
 800403c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004040:	edc7 7a01 	vstr	s15, [r7, #4]
 8004044:	793b      	ldrb	r3, [r7, #4]
 8004046:	b25b      	sxtb	r3, r3
}
 8004048:	4618      	mov	r0, r3
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004052:	bf00      	nop
 8004054:	20000010 	.word	0x20000010
 8004058:	2000000c 	.word	0x2000000c
 800405c:	3fe80000 	.word	0x3fe80000
 8004060:	20000004 	.word	0x20000004
 8004064:	40590000 	.word	0x40590000
 8004068:	2000027c 	.word	0x2000027c
 800406c:	42960000 	.word	0x42960000
 8004070:	42960000 	.word	0x42960000

08004074 <bme68x_iaq>:

float bme68x_iaq()
{
 8004074:	b590      	push	{r4, r7, lr}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0

	float air_quality_score = (100
			- (bme68x_GetHumidityScore(BME68x_DATA)
 800407a:	4b1e      	ldr	r3, [pc, #120]	@ (80040f4 <bme68x_iaq+0x80>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff fea2 	bl	8003dc8 <bme68x_GetHumidityScore>
 8004084:	4603      	mov	r3, r0
 8004086:	461c      	mov	r4, r3
					+ bme68x_GetGasScore(BME68x_DATA))) * 5;
 8004088:	4b1a      	ldr	r3, [pc, #104]	@ (80040f4 <bme68x_iaq+0x80>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff ff57 	bl	8003f40 <bme68x_GetGasScore>
 8004092:	4603      	mov	r3, r0
 8004094:	4423      	add	r3, r4
			- (bme68x_GetHumidityScore(BME68x_DATA)
 8004096:	f1c3 0264 	rsb	r2, r3, #100	@ 0x64
					+ bme68x_GetGasScore(BME68x_DATA))) * 5;
 800409a:	4613      	mov	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
	float air_quality_score = (100
 80040a0:	ee07 3a90 	vmov	s15, r3
 80040a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040a8:	edc7 7a01 	vstr	s15, [r7, #4]

	// If 5 measurements passed, recalculate the gas reference.
	if ((getgasreference_count++) % 5 == 0)
 80040ac:	4b12      	ldr	r3, [pc, #72]	@ (80040f8 <bme68x_iaq+0x84>)
 80040ae:	f993 2000 	ldrsb.w	r2, [r3]
 80040b2:	b2d3      	uxtb	r3, r2
 80040b4:	3301      	adds	r3, #1
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	b259      	sxtb	r1, r3
 80040ba:	4b0f      	ldr	r3, [pc, #60]	@ (80040f8 <bme68x_iaq+0x84>)
 80040bc:	7019      	strb	r1, [r3, #0]
 80040be:	4b0f      	ldr	r3, [pc, #60]	@ (80040fc <bme68x_iaq+0x88>)
 80040c0:	fb83 1302 	smull	r1, r3, r3, r2
 80040c4:	1059      	asrs	r1, r3, #1
 80040c6:	17d3      	asrs	r3, r2, #31
 80040c8:	1ac9      	subs	r1, r1, r3
 80040ca:	460b      	mov	r3, r1
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	440b      	add	r3, r1
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	b25b      	sxtb	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d104      	bne.n	80040e2 <bme68x_iaq+0x6e>
		bme68x_GetGasReference(BME68x_DATA);
 80040d8:	4b06      	ldr	r3, [pc, #24]	@ (80040f4 <bme68x_iaq+0x80>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff fe3b 	bl	8003d58 <bme68x_GetGasReference>

	return air_quality_score;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	ee07 3a90 	vmov	s15, r3

}
 80040e8:	eeb0 0a67 	vmov.f32	s0, s15
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd90      	pop	{r4, r7, pc}
 80040f2:	bf00      	nop
 80040f4:	2000024c 	.word	0x2000024c
 80040f8:	20000280 	.word	0x20000280
 80040fc:	66666667 	.word	0x66666667

08004100 <debug_init>:
/*  ************************************** */
/*    DO NOT CHANGE BELOW THIS LINE        */
/*  ************************************** */

void debug_init()
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
//    debug_led(0);

// configure USART1 (115200/8N1, tx-only)

// print banner
	debug_str("\r\n============== DEBUG STARTED ==============\r\n");
 8004104:	4802      	ldr	r0, [pc, #8]	@ (8004110 <debug_init+0x10>)
 8004106:	f000 f88d 	bl	8004224 <debug_str>
}
 800410a:	bf00      	nop
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	0800e8bc 	.word	0x0800e8bc

08004114 <debug_led>:

void debug_led(int val)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, val);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	b2db      	uxtb	r3, r3
 8004120:	461a      	mov	r2, r3
 8004122:	2102      	movs	r1, #2
 8004124:	4803      	ldr	r0, [pc, #12]	@ (8004134 <debug_led+0x20>)
 8004126:	f006 fe5b 	bl	800ade0 <HAL_GPIO_WritePin>
}
 800412a:	bf00      	nop
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	48000400 	.word	0x48000400

08004138 <debug_char>:

void debug_char(char c)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	4603      	mov	r3, r0
 8004140:	71fb      	strb	r3, [r7, #7]
	char buffer[] = "";
 8004142:	2300      	movs	r3, #0
 8004144:	733b      	strb	r3, [r7, #12]
	buffer[0] = c;
 8004146:	79fb      	ldrb	r3, [r7, #7]
 8004148:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&myUART, buffer, sizeof(buffer), HAL_MAX_DELAY);
 800414a:	f107 010c 	add.w	r1, r7, #12
 800414e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004152:	2201      	movs	r2, #1
 8004154:	4803      	ldr	r0, [pc, #12]	@ (8004164 <debug_char+0x2c>)
 8004156:	f009 fe4b 	bl	800ddf0 <HAL_UART_Transmit>
}
 800415a:	bf00      	nop
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	200005e0 	.word	0x200005e0

08004168 <debug_hex>:

void debug_hex(u1_t b)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	71fb      	strb	r3, [r7, #7]
	debug_char("0123456789ABCDEF"[b >> 4]);
 8004172:	79fb      	ldrb	r3, [r7, #7]
 8004174:	091b      	lsrs	r3, r3, #4
 8004176:	b2db      	uxtb	r3, r3
 8004178:	461a      	mov	r2, r3
 800417a:	4b08      	ldr	r3, [pc, #32]	@ (800419c <debug_hex+0x34>)
 800417c:	5c9b      	ldrb	r3, [r3, r2]
 800417e:	4618      	mov	r0, r3
 8004180:	f7ff ffda 	bl	8004138 <debug_char>
	debug_char("0123456789ABCDEF"[b & 0xF]);
 8004184:	79fb      	ldrb	r3, [r7, #7]
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	4a04      	ldr	r2, [pc, #16]	@ (800419c <debug_hex+0x34>)
 800418c:	5cd3      	ldrb	r3, [r2, r3]
 800418e:	4618      	mov	r0, r3
 8004190:	f7ff ffd2 	bl	8004138 <debug_char>
}
 8004194:	bf00      	nop
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	0800e8ec 	.word	0x0800e8ec

080041a0 <debug_uint>:
	debug_char('\r');
	debug_char('\n');
}

void debug_uint(u4_t v)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
	for (s1_t n = 24; n >= 0; n -= 8) {
 80041a8:	2318      	movs	r3, #24
 80041aa:	73fb      	strb	r3, [r7, #15]
 80041ac:	e00c      	b.n	80041c8 <debug_uint+0x28>
		debug_hex(v >> n);
 80041ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	fa22 f303 	lsr.w	r3, r2, r3
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff ffd4 	bl	8004168 <debug_hex>
	for (s1_t n = 24; n >= 0; n -= 8) {
 80041c0:	7bfb      	ldrb	r3, [r7, #15]
 80041c2:	3b08      	subs	r3, #8
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	73fb      	strb	r3, [r7, #15]
 80041c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	daee      	bge.n	80041ae <debug_uint+0xe>
	}
}
 80041d0:	bf00      	nop
 80041d2:	bf00      	nop
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <debug_int>:

void debug_int(s4_t v)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b08a      	sub	sp, #40	@ 0x28
 80041de:	af02      	add	r7, sp, #8
 80041e0:	6078      	str	r0, [r7, #4]
	char buf[10], *p = buf;
 80041e2:	f107 030c 	add.w	r3, r7, #12
 80041e6:	61fb      	str	r3, [r7, #28]
	int n = debug_fmt(buf, sizeof(buf), v, 10, 0, 0);
 80041e8:	f107 000c 	add.w	r0, r7, #12
 80041ec:	2300      	movs	r3, #0
 80041ee:	9301      	str	r3, [sp, #4]
 80041f0:	2300      	movs	r3, #0
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	230a      	movs	r3, #10
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	210a      	movs	r1, #10
 80041fa:	f000 f852 	bl	80042a2 <debug_fmt>
 80041fe:	61b8      	str	r0, [r7, #24]
	while (n--)
 8004200:	e006      	b.n	8004210 <debug_int+0x36>
		debug_char(*p++);
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	1c5a      	adds	r2, r3, #1
 8004206:	61fa      	str	r2, [r7, #28]
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f7ff ff94 	bl	8004138 <debug_char>
	while (n--)
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	1e5a      	subs	r2, r3, #1
 8004214:	61ba      	str	r2, [r7, #24]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1f3      	bne.n	8004202 <debug_int+0x28>
}
 800421a:	bf00      	nop
 800421c:	bf00      	nop
 800421e:	3720      	adds	r7, #32
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <debug_str>:

void debug_str(const char *str)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
	while (*str) {
 800422c:	e006      	b.n	800423c <debug_str+0x18>
		debug_char(*str++);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff ff7e 	bl	8004138 <debug_char>
	while (*str) {
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1f4      	bne.n	800422e <debug_str+0xa>
	}
}
 8004244:	bf00      	nop
 8004246:	bf00      	nop
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <debug_val>:
	debug_char('\r');
	debug_char('\n');
}

void debug_val(const char *label, u4_t val)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b082      	sub	sp, #8
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
 8004256:	6039      	str	r1, [r7, #0]
	debug_str(label);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f7ff ffe3 	bl	8004224 <debug_str>
	debug_uint(val);
 800425e:	6838      	ldr	r0, [r7, #0]
 8004260:	f7ff ff9e 	bl	80041a0 <debug_uint>
	debug_char('\r');
 8004264:	200d      	movs	r0, #13
 8004266:	f7ff ff67 	bl	8004138 <debug_char>
	debug_char('\n');
 800426a:	200a      	movs	r0, #10
 800426c:	f7ff ff64 	bl	8004138 <debug_char>
}
 8004270:	bf00      	nop
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <debug_valdec>:

void debug_valdec(const char *label, s4_t val)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
	debug_str(label);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7ff ffce 	bl	8004224 <debug_str>
	debug_int(val);
 8004288:	6838      	ldr	r0, [r7, #0]
 800428a:	f7ff ffa6 	bl	80041da <debug_int>
	debug_char('\r');
 800428e:	200d      	movs	r0, #13
 8004290:	f7ff ff52 	bl	8004138 <debug_char>
	debug_char('\n');
 8004294:	200a      	movs	r0, #10
 8004296:	f7ff ff4f 	bl	8004138 <debug_char>
}
 800429a:	bf00      	nop
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <debug_fmt>:

int debug_fmt(char *buf, int max, s4_t val, int base, int width, char pad)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b093      	sub	sp, #76	@ 0x4c
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	607a      	str	r2, [r7, #4]
 80042ae:	603b      	str	r3, [r7, #0]
	char num[33], *p = num, *b = buf;
 80042b0:	f107 0314 	add.w	r3, r7, #20
 80042b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	643b      	str	r3, [r7, #64]	@ 0x40
	u4_t m, v;
	// special handling of negative decimals
	v = (base == 10 && val < 0) ? -val : val;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b0a      	cmp	r3, #10
 80042be:	d105      	bne.n	80042cc <debug_fmt+0x2a>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	da02      	bge.n	80042cc <debug_fmt+0x2a>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	425b      	negs	r3, r3
 80042ca:	e000      	b.n	80042ce <debug_fmt+0x2c>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
	// generate digits backwards
	do {
		*p++ = ((m = v % base) <= 9) ? m + '0' : m + 'A' - 10;
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80042d8:	fb01 f202 	mul.w	r2, r1, r2
 80042dc:	1a9b      	subs	r3, r3, r2
 80042de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80042e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042e2:	2b09      	cmp	r3, #9
 80042e4:	d804      	bhi.n	80042f0 <debug_fmt+0x4e>
 80042e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	3330      	adds	r3, #48	@ 0x30
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	e003      	b.n	80042f8 <debug_fmt+0x56>
 80042f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	3337      	adds	r3, #55	@ 0x37
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042fa:	1c59      	adds	r1, r3, #1
 80042fc:	6479      	str	r1, [r7, #68]	@ 0x44
 80042fe:	701a      	strb	r2, [r3, #0]
	} while (v /= base);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004304:	fbb2 f3f3 	udiv	r3, r2, r3
 8004308:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800430a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1df      	bne.n	80042d0 <debug_fmt+0x2e>
	// prefix negative decimals with '-'
	if (base == 10 && val < 0) {
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	2b0a      	cmp	r3, #10
 8004314:	d10e      	bne.n	8004334 <debug_fmt+0x92>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	da0b      	bge.n	8004334 <debug_fmt+0x92>
		*p++ = '-';
 800431c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800431e:	1c5a      	adds	r2, r3, #1
 8004320:	647a      	str	r2, [r7, #68]	@ 0x44
 8004322:	222d      	movs	r2, #45	@ 0x2d
 8004324:	701a      	strb	r2, [r3, #0]
	}
	// add leading zeroes or spaces
	while (b - buf < max - 1 && b - buf < width - (p - num)) {
 8004326:	e005      	b.n	8004334 <debug_fmt+0x92>
		*b++ = pad;
 8004328:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800432a:	1c5a      	adds	r2, r3, #1
 800432c:	643a      	str	r2, [r7, #64]	@ 0x40
 800432e:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8004332:	701a      	strb	r2, [r3, #0]
	while (b - buf < max - 1 && b - buf < width - (p - num)) {
 8004334:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	1ad2      	subs	r2, r2, r3
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	3b01      	subs	r3, #1
 800433e:	429a      	cmp	r2, r3
 8004340:	da0a      	bge.n	8004358 <debug_fmt+0xb6>
 8004342:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	1ad2      	subs	r2, r2, r3
 8004348:	f107 0314 	add.w	r3, r7, #20
 800434c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800434e:	1acb      	subs	r3, r1, r3
 8004350:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004352:	1acb      	subs	r3, r1, r3
 8004354:	429a      	cmp	r2, r3
 8004356:	dbe7      	blt.n	8004328 <debug_fmt+0x86>
	}
	// copy digits and sign forwards
	do
		*b++ = *--p;
 8004358:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800435a:	3b01      	subs	r3, #1
 800435c:	647b      	str	r3, [r7, #68]	@ 0x44
 800435e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	643a      	str	r2, [r7, #64]	@ 0x40
 8004364:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004366:	7812      	ldrb	r2, [r2, #0]
 8004368:	701a      	strb	r2, [r3, #0]
	while (b - buf < max && p > num);
 800436a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	429a      	cmp	r2, r3
 8004374:	dd04      	ble.n	8004380 <debug_fmt+0xde>
 8004376:	f107 0314 	add.w	r3, r7, #20
 800437a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800437c:	429a      	cmp	r2, r3
 800437e:	d8eb      	bhi.n	8004358 <debug_fmt+0xb6>
	// return number of characters written
	return b - buf;
 8004380:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	1ad3      	subs	r3, r2, r3
}
 8004386:	4618      	mov	r0, r3
 8004388:	374c      	adds	r7, #76	@ 0x4c
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
	...

08004394 <debug_event>:

void debug_event(int ev)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
			[EV_TXCOMPLETE] = "TXCOMPLETE", [EV_LOST_TSYNC] = "LOST_TSYNC",
			[EV_RESET] = "RESET", [EV_RXCOMPLETE] = "RXCOMPLETE", [EV_LINK_DEAD
					] = "LINK_DEAD", [EV_LINK_ALIVE] = "LINK_ALIVE",
			[EV_SCAN_FOUND] = "SCAN_FOUND", [EV_TXSTART] = "EV_TXSTART", };
	debug_str(
			(ev < sizeof(evnames) / sizeof(evnames[0])) ?
 800439c:	687b      	ldr	r3, [r7, #4]
	debug_str(
 800439e:	2b11      	cmp	r3, #17
 80043a0:	d804      	bhi.n	80043ac <debug_event+0x18>
 80043a2:	4a09      	ldr	r2, [pc, #36]	@ (80043c8 <debug_event+0x34>)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043aa:	e000      	b.n	80043ae <debug_event+0x1a>
 80043ac:	4b07      	ldr	r3, [pc, #28]	@ (80043cc <debug_event+0x38>)
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7ff ff38 	bl	8004224 <debug_str>
					evnames[ev] : "EV_UNKNOWN");
	debug_char('\r');
 80043b4:	200d      	movs	r0, #13
 80043b6:	f7ff febf 	bl	8004138 <debug_char>
	debug_char('\n');
 80043ba:	200a      	movs	r0, #10
 80043bc:	f7ff febc 	bl	8004138 <debug_char>
}
 80043c0:	bf00      	nop
 80043c2:	3708      	adds	r7, #8
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	20000014 	.word	0x20000014
 80043cc:	0800e900 	.word	0x0800e900

080043d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b088      	sub	sp, #32
 80043d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043d6:	f107 030c 	add.w	r3, r7, #12
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]
 80043de:	605a      	str	r2, [r3, #4]
 80043e0:	609a      	str	r2, [r3, #8]
 80043e2:	60da      	str	r2, [r3, #12]
 80043e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80043e6:	4b33      	ldr	r3, [pc, #204]	@ (80044b4 <MX_GPIO_Init+0xe4>)
 80043e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043ea:	4a32      	ldr	r2, [pc, #200]	@ (80044b4 <MX_GPIO_Init+0xe4>)
 80043ec:	f043 0304 	orr.w	r3, r3, #4
 80043f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043f2:	4b30      	ldr	r3, [pc, #192]	@ (80044b4 <MX_GPIO_Init+0xe4>)
 80043f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043f6:	f003 0304 	and.w	r3, r3, #4
 80043fa:	60bb      	str	r3, [r7, #8]
 80043fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043fe:	4b2d      	ldr	r3, [pc, #180]	@ (80044b4 <MX_GPIO_Init+0xe4>)
 8004400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004402:	4a2c      	ldr	r2, [pc, #176]	@ (80044b4 <MX_GPIO_Init+0xe4>)
 8004404:	f043 0301 	orr.w	r3, r3, #1
 8004408:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800440a:	4b2a      	ldr	r3, [pc, #168]	@ (80044b4 <MX_GPIO_Init+0xe4>)
 800440c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	607b      	str	r3, [r7, #4]
 8004414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004416:	4b27      	ldr	r3, [pc, #156]	@ (80044b4 <MX_GPIO_Init+0xe4>)
 8004418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800441a:	4a26      	ldr	r2, [pc, #152]	@ (80044b4 <MX_GPIO_Init+0xe4>)
 800441c:	f043 0302 	orr.w	r3, r3, #2
 8004420:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004422:	4b24      	ldr	r3, [pc, #144]	@ (80044b4 <MX_GPIO_Init+0xe4>)
 8004424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	603b      	str	r3, [r7, #0]
 800442c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Alim_temp_Pin|RST_Pin|NSS_Pin, GPIO_PIN_RESET);
 800442e:	2200      	movs	r2, #0
 8004430:	f648 0180 	movw	r1, #34944	@ 0x8880
 8004434:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004438:	f006 fcd2 	bl	800ade0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800443c:	2200      	movs	r2, #0
 800443e:	2102      	movs	r1, #2
 8004440:	481d      	ldr	r0, [pc, #116]	@ (80044b8 <MX_GPIO_Init+0xe8>)
 8004442:	f006 fccd 	bl	800ade0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Alim_temp_Pin RST_Pin NSS_Pin */
  GPIO_InitStruct.Pin = Alim_temp_Pin|RST_Pin|NSS_Pin;
 8004446:	f648 0380 	movw	r3, #34944	@ 0x8880
 800444a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800444c:	2301      	movs	r3, #1
 800444e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004450:	2300      	movs	r3, #0
 8004452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004454:	2300      	movs	r3, #0
 8004456:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004458:	f107 030c 	add.w	r3, r7, #12
 800445c:	4619      	mov	r1, r3
 800445e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004462:	f006 fb53 	bl	800ab0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8004466:	2302      	movs	r3, #2
 8004468:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800446a:	2301      	movs	r3, #1
 800446c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800446e:	2300      	movs	r3, #0
 8004470:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004472:	2300      	movs	r3, #0
 8004474:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8004476:	f107 030c 	add.w	r3, r7, #12
 800447a:	4619      	mov	r1, r3
 800447c:	480e      	ldr	r0, [pc, #56]	@ (80044b8 <MX_GPIO_Init+0xe8>)
 800447e:	f006 fb45 	bl	800ab0c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO0_Pin DIO1_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin|DIO1_Pin;
 8004482:	23c0      	movs	r3, #192	@ 0xc0
 8004484:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004486:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800448a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800448c:	2300      	movs	r3, #0
 800448e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004490:	f107 030c 	add.w	r3, r7, #12
 8004494:	4619      	mov	r1, r3
 8004496:	4808      	ldr	r0, [pc, #32]	@ (80044b8 <MX_GPIO_Init+0xe8>)
 8004498:	f006 fb38 	bl	800ab0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800449c:	2200      	movs	r2, #0
 800449e:	2100      	movs	r1, #0
 80044a0:	2017      	movs	r0, #23
 80044a2:	f006 fafc 	bl	800aa9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80044a6:	2017      	movs	r0, #23
 80044a8:	f006 fb15 	bl	800aad6 <HAL_NVIC_EnableIRQ>

}
 80044ac:	bf00      	nop
 80044ae:	3720      	adds	r7, #32
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	40021000 	.word	0x40021000
 80044b8:	48000400 	.word	0x48000400

080044bc <hal_io_init>:

// -----------------------------------------------------------------------------
// I/O

static void hal_io_init()
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
	//already done by cubemx
}
 80044c0:	bf00      	nop
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <hal_pin_rxtx>:

// val ==1  => tx 1, rx 0 ; val == 0 => tx 0, rx 1
void hal_pin_rxtx(u1_t val)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	4603      	mov	r3, r0
 80044d2:	71fb      	strb	r3, [r7, #7]
  #ifdef TX_GPIO_Port
    HAL_GPIO_WritePin(RX_GPIO_Port,RX_Pin,~val);
    HAL_GPIO_WritePin(TX_GPIO_Port,TX_Pin,val);
  #endif
#endif
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <hal_pin_nss>:

// set radio NSS pin to given value
void hal_pin_nss(u1_t val)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	4603      	mov	r3, r0
 80044e8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, val);
 80044ea:	79fb      	ldrb	r3, [r7, #7]
 80044ec:	461a      	mov	r2, r3
 80044ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80044f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80044f6:	f006 fc73 	bl	800ade0 <HAL_GPIO_WritePin>
}
 80044fa:	bf00      	nop
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <hal_pin_rst>:

// set radio RST pin to given value (or keep floating!)
void hal_pin_rst(u1_t val)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b08c      	sub	sp, #48	@ 0x30
 8004506:	af00      	add	r7, sp, #0
 8004508:	4603      	mov	r3, r0
 800450a:	71fb      	strb	r3, [r7, #7]
	if (val == 0 || val == 1) { // drive pin
 800450c:	79fb      	ldrb	r3, [r7, #7]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <hal_pin_rst+0x16>
 8004512:	79fb      	ldrb	r3, [r7, #7]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d116      	bne.n	8004546 <hal_pin_rst+0x44>
		GPIO_InitTypeDef GPIO_InitStruct;
		GPIO_InitStruct.Pin = RST_Pin;
 8004518:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800451c:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800451e:	2301      	movs	r3, #1
 8004520:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004522:	2300      	movs	r3, #0
 8004524:	62bb      	str	r3, [r7, #40]	@ 0x28
		HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8004526:	f107 031c 	add.w	r3, r7, #28
 800452a:	4619      	mov	r1, r3
 800452c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004530:	f006 faec 	bl	800ab0c <HAL_GPIO_Init>

		HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, val);
 8004534:	79fb      	ldrb	r3, [r7, #7]
 8004536:	461a      	mov	r2, r3
 8004538:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800453c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004540:	f006 fc4e 	bl	800ade0 <HAL_GPIO_WritePin>
	if (val == 0 || val == 1) { // drive pin
 8004544:	e00e      	b.n	8004564 <hal_pin_rst+0x62>

	} else { // keep pin floating
		GPIO_InitTypeDef GPIO_InitStruct;
		GPIO_InitStruct.Pin = RST_Pin;
 8004546:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800454a:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800454c:	2300      	movs	r3, #0
 800454e:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004550:	2300      	movs	r3, #0
 8004552:	613b      	str	r3, [r7, #16]
		HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8004554:	f107 0308 	add.w	r3, r7, #8
 8004558:	4619      	mov	r1, r3
 800455a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800455e:	f006 fad5 	bl	800ab0c <HAL_GPIO_Init>
	}
}
 8004562:	bf00      	nop
 8004564:	bf00      	nop
 8004566:	3730      	adds	r7, #48	@ 0x30
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <HAL_GPIO_EXTI_Callback>:

extern void radio_irq_handler(u1_t dio);

// generic EXTI IRQ handler for all channels
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin_int)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	4603      	mov	r3, r0
 8004574:	80fb      	strh	r3, [r7, #6]
	// DIO 0
	if (GPIO_Pin_int == DIO0_Pin) {
 8004576:	88fb      	ldrh	r3, [r7, #6]
 8004578:	2b40      	cmp	r3, #64	@ 0x40
 800457a:	d102      	bne.n	8004582 <HAL_GPIO_EXTI_Callback+0x16>
		// invoke radio handler (on IRQ!)
		radio_irq_handler(0);
 800457c:	2000      	movs	r0, #0
 800457e:	f004 fa53 	bl	8008a28 <radio_irq_handler>
	}
	// DIO 1
	if (GPIO_Pin_int == DIO1_Pin) {
 8004582:	88fb      	ldrh	r3, [r7, #6]
 8004584:	2b80      	cmp	r3, #128	@ 0x80
 8004586:	d102      	bne.n	800458e <HAL_GPIO_EXTI_Callback+0x22>
		// invoke radio handler (on IRQ!)
		radio_irq_handler(1);
 8004588:	2001      	movs	r0, #1
 800458a:	f004 fa4d 	bl	8008a28 <radio_irq_handler>
	// DIO 2
//	if(GPIO_Pin_int == DIO2_Pin) {
	//    // invoke radio handler (on IRQ!)
//	    radio_irq_handler(2);
//	}
}
 800458e:	bf00      	nop
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <hal_spi_init>:

// -----------------------------------------------------------------------------
// SPI
void hal_spi_init()
{
 8004596:	b480      	push	{r7}
 8004598:	af00      	add	r7, sp, #0
	// already done by cube mx
}
 800459a:	bf00      	nop
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <hal_spi>:

// perform SPI transaction with radio
u1_t hal_spi(u1_t out)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af02      	add	r7, sp, #8
 80045aa:	4603      	mov	r3, r0
 80045ac:	71fb      	strb	r3, [r7, #7]
	char outbuffer[] = "";
 80045ae:	2300      	movs	r3, #0
 80045b0:	733b      	strb	r3, [r7, #12]
	char inbuffer[] = "";
 80045b2:	2300      	movs	r3, #0
 80045b4:	723b      	strb	r3, [r7, #8]
	outbuffer[0] = out;
 80045b6:	79fb      	ldrb	r3, [r7, #7]
 80045b8:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&mySPI, outbuffer, inbuffer, sizeof(outbuffer),
 80045ba:	f107 0208 	add.w	r2, r7, #8
 80045be:	f107 010c 	add.w	r1, r7, #12
 80045c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	2301      	movs	r3, #1
 80045ca:	4804      	ldr	r0, [pc, #16]	@ (80045dc <hal_spi+0x38>)
 80045cc:	f008 fd6f 	bl	800d0ae <HAL_SPI_TransmitReceive>
	HAL_MAX_DELAY);
	return inbuffer[0];
 80045d0:	7a3b      	ldrb	r3, [r7, #8]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	200004e4 	.word	0x200004e4

080045e0 <hal_time_init>:

// -----------------------------------------------------------------------------
// TIME
static void hal_time_init()
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
	// already done by cubemx
}
 80045e4:	bf00      	nop
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
	...

080045f0 <hal_ticks>:

u4_t hal_ticks()
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
	hal_disableIRQs();
 80045f6:	f000 f8a5 	bl	8004744 <hal_disableIRQs>
	u4_t t = HAL.ticks;
 80045fa:	4b13      	ldr	r3, [pc, #76]	@ (8004648 <hal_ticks+0x58>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	607b      	str	r3, [r7, #4]
	u2_t cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 8004600:	4b12      	ldr	r3, [pc, #72]	@ (800464c <hal_ticks+0x5c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004606:	807b      	strh	r3, [r7, #2]
	if (__HAL_TIM_GET_FLAG(&myTIMER, TIM_FLAG_CC1) != RESET) {
 8004608:	4b10      	ldr	r3, [pc, #64]	@ (800464c <hal_ticks+0x5c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b02      	cmp	r3, #2
 8004614:	d10d      	bne.n	8004632 <hal_ticks+0x42>
		if (__HAL_TIM_GET_IT_SOURCE(&myTIMER, TIM_IT_CC1) != RESET) {
 8004616:	4b0d      	ldr	r3, [pc, #52]	@ (800464c <hal_ticks+0x5c>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b02      	cmp	r3, #2
 8004622:	d106      	bne.n	8004632 <hal_ticks+0x42>
			cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 8004624:	4b09      	ldr	r3, [pc, #36]	@ (800464c <hal_ticks+0x5c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462a:	807b      	strh	r3, [r7, #2]
			t++;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3301      	adds	r3, #1
 8004630:	607b      	str	r3, [r7, #4]
		}
	}
	hal_enableIRQs();
 8004632:	f000 f897 	bl	8004764 <hal_enableIRQs>
	return (t << 16) | cnt;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	041a      	lsls	r2, r3, #16
 800463a:	887b      	ldrh	r3, [r7, #2]
 800463c:	4313      	orrs	r3, r2
}
 800463e:	4618      	mov	r0, r3
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	20000284 	.word	0x20000284
 800464c:	20000594 	.word	0x20000594

08004650 <hal_ticksplusplus>:

void hal_ticksplusplus(void)
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
	HAL.ticks++;
 8004654:	4b04      	ldr	r3, [pc, #16]	@ (8004668 <hal_ticksplusplus+0x18>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	3301      	adds	r3, #1
 800465a:	4a03      	ldr	r2, [pc, #12]	@ (8004668 <hal_ticksplusplus+0x18>)
 800465c:	6053      	str	r3, [r2, #4]
}
 800465e:	bf00      	nop
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	20000284 	.word	0x20000284

0800466c <deltaticks>:

// return modified delta ticks from now to specified ticktime (0 for past, FFFF for far future)
static u2_t deltaticks(u4_t time)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
	u4_t t = hal_ticks();
 8004674:	f7ff ffbc 	bl	80045f0 <hal_ticks>
 8004678:	60f8      	str	r0, [r7, #12]
	s4_t d = time - t;
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	60bb      	str	r3, [r7, #8]
	if (d <= 0)
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	2b00      	cmp	r3, #0
 8004686:	dc01      	bgt.n	800468c <deltaticks+0x20>
		return 0;    // in the past
 8004688:	2300      	movs	r3, #0
 800468a:	e008      	b.n	800469e <deltaticks+0x32>
	if ((d >> 16) != 0)
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	141b      	asrs	r3, r3, #16
 8004690:	2b00      	cmp	r3, #0
 8004692:	d002      	beq.n	800469a <deltaticks+0x2e>
		return 0xFFFF; // far ahead
 8004694:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004698:	e001      	b.n	800469e <deltaticks+0x32>
	return (u2_t) d;
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	b29b      	uxth	r3, r3
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <hal_waitUntil>:

void hal_waitUntil(u4_t time)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b082      	sub	sp, #8
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
	while (deltaticks(time) != 0)
 80046ae:	bf00      	nop
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7ff ffdb 	bl	800466c <deltaticks>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1f9      	bne.n	80046b0 <hal_waitUntil+0xa>
		; // busy wait until timestamp is reached
}
 80046bc:	bf00      	nop
 80046be:	bf00      	nop
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
	...

080046c8 <hal_checkTimer>:

// check and rewind for target time
u1_t hal_checkTimer(u4_t time)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
	u2_t dt;
	myTIMER.Instance->SR &= ~TIM_SR_CC1IF; // clear any pending interrupts
 80046d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004740 <hal_checkTimer+0x78>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	691a      	ldr	r2, [r3, #16]
 80046d6:	4b1a      	ldr	r3, [pc, #104]	@ (8004740 <hal_checkTimer+0x78>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0202 	bic.w	r2, r2, #2
 80046de:	611a      	str	r2, [r3, #16]
	if ((dt = deltaticks(time)) < 5) { // event is now (a few ticks ahead)
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f7ff ffc3 	bl	800466c <deltaticks>
 80046e6:	4603      	mov	r3, r0
 80046e8:	81fb      	strh	r3, [r7, #14]
 80046ea:	89fb      	ldrh	r3, [r7, #14]
 80046ec:	2b04      	cmp	r3, #4
 80046ee:	d809      	bhi.n	8004704 <hal_checkTimer+0x3c>
		myTIMER.Instance->DIER &= ~TIM_DIER_CC1IE; // disable IE
 80046f0:	4b13      	ldr	r3, [pc, #76]	@ (8004740 <hal_checkTimer+0x78>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	4b12      	ldr	r3, [pc, #72]	@ (8004740 <hal_checkTimer+0x78>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 0202 	bic.w	r2, r2, #2
 80046fe:	60da      	str	r2, [r3, #12]
		return 1;
 8004700:	2301      	movs	r3, #1
 8004702:	e018      	b.n	8004736 <hal_checkTimer+0x6e>
	} else { // rewind timer (fully or to exact time))
		myTIMER.Instance->CCR1 = myTIMER.Instance->CNT + dt;   // set comparator
 8004704:	4b0e      	ldr	r3, [pc, #56]	@ (8004740 <hal_checkTimer+0x78>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800470a:	89fa      	ldrh	r2, [r7, #14]
 800470c:	4b0c      	ldr	r3, [pc, #48]	@ (8004740 <hal_checkTimer+0x78>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	440a      	add	r2, r1
 8004712:	635a      	str	r2, [r3, #52]	@ 0x34
		myTIMER.Instance->DIER |= TIM_DIER_CC1IE;  // enable IE
 8004714:	4b0a      	ldr	r3, [pc, #40]	@ (8004740 <hal_checkTimer+0x78>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	4b09      	ldr	r3, [pc, #36]	@ (8004740 <hal_checkTimer+0x78>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0202 	orr.w	r2, r2, #2
 8004722:	60da      	str	r2, [r3, #12]
		myTIMER.Instance->CCER |= TIM_CCER_CC1E; // enable capture/compare uint 2
 8004724:	4b06      	ldr	r3, [pc, #24]	@ (8004740 <hal_checkTimer+0x78>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6a1a      	ldr	r2, [r3, #32]
 800472a:	4b05      	ldr	r3, [pc, #20]	@ (8004740 <hal_checkTimer+0x78>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0201 	orr.w	r2, r2, #1
 8004732:	621a      	str	r2, [r3, #32]
		return 0;
 8004734:	2300      	movs	r3, #0
	}
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	20000594 	.word	0x20000594

08004744 <hal_disableIRQs>:

// -----------------------------------------------------------------------------
// IRQ
void hal_disableIRQs()
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004748:	b672      	cpsid	i
}
 800474a:	bf00      	nop
	__disable_irq();
	//__set_BASEPRI(1 << 4);
	HAL.irqlevel++;
 800474c:	4b04      	ldr	r3, [pc, #16]	@ (8004760 <hal_disableIRQs+0x1c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	3301      	adds	r3, #1
 8004752:	4a03      	ldr	r2, [pc, #12]	@ (8004760 <hal_disableIRQs+0x1c>)
 8004754:	6013      	str	r3, [r2, #0]
}
 8004756:	bf00      	nop
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr
 8004760:	20000284 	.word	0x20000284

08004764 <hal_enableIRQs>:

void hal_enableIRQs()
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
	if (--HAL.irqlevel == 0) {
 8004768:	4b07      	ldr	r3, [pc, #28]	@ (8004788 <hal_enableIRQs+0x24>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3b01      	subs	r3, #1
 800476e:	4a06      	ldr	r2, [pc, #24]	@ (8004788 <hal_enableIRQs+0x24>)
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	4b05      	ldr	r3, [pc, #20]	@ (8004788 <hal_enableIRQs+0x24>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <hal_enableIRQs+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 800477a:	b662      	cpsie	i
}
 800477c:	bf00      	nop
		__enable_irq();
		//__set_BASEPRI(0);
	}
}
 800477e:	bf00      	nop
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	20000284 	.word	0x20000284

0800478c <hal_sleep>:

void hal_sleep()
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
	// low power sleep mode
#ifndef CFG_no_low_power_sleep_mode
	// PWR->CR |= PWR_CR_LPSDSR;
#endif
	// suspend execution until IRQ, regardless of the CPSR I-bit
	__WFI();
 8004790:	bf30      	wfi
}
 8004792:	bf00      	nop
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <hal_init>:

// -----------------------------------------------------------------------------

void hal_init()
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
	memset(&HAL, 0x00, sizeof(HAL));
 80047a0:	2208      	movs	r2, #8
 80047a2:	2100      	movs	r1, #0
 80047a4:	4807      	ldr	r0, [pc, #28]	@ (80047c4 <hal_init+0x28>)
 80047a6:	f009 fff4 	bl	800e792 <memset>
	hal_disableIRQs();
 80047aa:	f7ff ffcb 	bl	8004744 <hal_disableIRQs>
	// configure radio I/O and interrupt handler
	hal_io_init();
 80047ae:	f7ff fe85 	bl	80044bc <hal_io_init>
	// configure radio SPI
	hal_spi_init();
 80047b2:	f7ff fef0 	bl	8004596 <hal_spi_init>
	// configure timer and interrupt handler
	hal_time_init();
 80047b6:	f7ff ff13 	bl	80045e0 <hal_time_init>
	hal_enableIRQs();
 80047ba:	f7ff ffd3 	bl	8004764 <hal_enableIRQs>
}
 80047be:	bf00      	nop
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	20000284 	.word	0x20000284

080047c8 <hal_failed>:

void hal_failed()
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
	// HALT...
	hal_disableIRQs();
 80047cc:	f7ff ffba 	bl	8004744 <hal_disableIRQs>
	hal_sleep();
 80047d0:	f7ff ffdc 	bl	800478c <hal_sleep>
	while (1)
 80047d4:	bf00      	nop
 80047d6:	e7fd      	b.n	80047d4 <hal_failed+0xc>

080047d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80047dc:	4b1b      	ldr	r3, [pc, #108]	@ (800484c <MX_I2C1_Init+0x74>)
 80047de:	4a1c      	ldr	r2, [pc, #112]	@ (8004850 <MX_I2C1_Init+0x78>)
 80047e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 80047e2:	4b1a      	ldr	r3, [pc, #104]	@ (800484c <MX_I2C1_Init+0x74>)
 80047e4:	4a1b      	ldr	r2, [pc, #108]	@ (8004854 <MX_I2C1_Init+0x7c>)
 80047e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80047e8:	4b18      	ldr	r3, [pc, #96]	@ (800484c <MX_I2C1_Init+0x74>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80047ee:	4b17      	ldr	r3, [pc, #92]	@ (800484c <MX_I2C1_Init+0x74>)
 80047f0:	2201      	movs	r2, #1
 80047f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80047f4:	4b15      	ldr	r3, [pc, #84]	@ (800484c <MX_I2C1_Init+0x74>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80047fa:	4b14      	ldr	r3, [pc, #80]	@ (800484c <MX_I2C1_Init+0x74>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004800:	4b12      	ldr	r3, [pc, #72]	@ (800484c <MX_I2C1_Init+0x74>)
 8004802:	2200      	movs	r2, #0
 8004804:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004806:	4b11      	ldr	r3, [pc, #68]	@ (800484c <MX_I2C1_Init+0x74>)
 8004808:	2200      	movs	r2, #0
 800480a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800480c:	4b0f      	ldr	r3, [pc, #60]	@ (800484c <MX_I2C1_Init+0x74>)
 800480e:	2200      	movs	r2, #0
 8004810:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004812:	480e      	ldr	r0, [pc, #56]	@ (800484c <MX_I2C1_Init+0x74>)
 8004814:	f006 fb14 	bl	800ae40 <HAL_I2C_Init>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800481e:	f003 fb9b 	bl	8007f58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004822:	2100      	movs	r1, #0
 8004824:	4809      	ldr	r0, [pc, #36]	@ (800484c <MX_I2C1_Init+0x74>)
 8004826:	f007 f983 	bl	800bb30 <HAL_I2CEx_ConfigAnalogFilter>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004830:	f003 fb92 	bl	8007f58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004834:	2100      	movs	r1, #0
 8004836:	4805      	ldr	r0, [pc, #20]	@ (800484c <MX_I2C1_Init+0x74>)
 8004838:	f007 f9c5 	bl	800bbc6 <HAL_I2CEx_ConfigDigitalFilter>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004842:	f003 fb89 	bl	8007f58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004846:	bf00      	nop
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	2000028c 	.word	0x2000028c
 8004850:	40005400 	.word	0x40005400
 8004854:	10d19ce4 	.word	0x10d19ce4

08004858 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b09e      	sub	sp, #120	@ 0x78
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004860:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	605a      	str	r2, [r3, #4]
 800486a:	609a      	str	r2, [r3, #8]
 800486c:	60da      	str	r2, [r3, #12]
 800486e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004870:	f107 0310 	add.w	r3, r7, #16
 8004874:	2254      	movs	r2, #84	@ 0x54
 8004876:	2100      	movs	r1, #0
 8004878:	4618      	mov	r0, r3
 800487a:	f009 ff8a 	bl	800e792 <memset>
  if(i2cHandle->Instance==I2C1)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a1f      	ldr	r2, [pc, #124]	@ (8004900 <HAL_I2C_MspInit+0xa8>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d137      	bne.n	80048f8 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004888:	2340      	movs	r3, #64	@ 0x40
 800488a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800488c:	2300      	movs	r3, #0
 800488e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004890:	f107 0310 	add.w	r3, r7, #16
 8004894:	4618      	mov	r0, r3
 8004896:	f008 f87f 	bl	800c998 <HAL_RCCEx_PeriphCLKConfig>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d001      	beq.n	80048a4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80048a0:	f003 fb5a 	bl	8007f58 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048a4:	4b17      	ldr	r3, [pc, #92]	@ (8004904 <HAL_I2C_MspInit+0xac>)
 80048a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048a8:	4a16      	ldr	r2, [pc, #88]	@ (8004904 <HAL_I2C_MspInit+0xac>)
 80048aa:	f043 0301 	orr.w	r3, r3, #1
 80048ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048b0:	4b14      	ldr	r3, [pc, #80]	@ (8004904 <HAL_I2C_MspInit+0xac>)
 80048b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80048bc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80048c0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80048c2:	2312      	movs	r3, #18
 80048c4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048c6:	2300      	movs	r3, #0
 80048c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048ca:	2303      	movs	r3, #3
 80048cc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80048ce:	2304      	movs	r3, #4
 80048d0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048d2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80048d6:	4619      	mov	r1, r3
 80048d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80048dc:	f006 f916 	bl	800ab0c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80048e0:	4b08      	ldr	r3, [pc, #32]	@ (8004904 <HAL_I2C_MspInit+0xac>)
 80048e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e4:	4a07      	ldr	r2, [pc, #28]	@ (8004904 <HAL_I2C_MspInit+0xac>)
 80048e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80048ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80048ec:	4b05      	ldr	r3, [pc, #20]	@ (8004904 <HAL_I2C_MspInit+0xac>)
 80048ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048f4:	60bb      	str	r3, [r7, #8]
 80048f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80048f8:	bf00      	nop
 80048fa:	3778      	adds	r7, #120	@ 0x78
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	40005400 	.word	0x40005400
 8004904:	40021000 	.word	0x40021000

08004908 <getSf>:
enum {
	RSSI_OFF = 64, SNR_SCALEUP = 4
};

inline sf_t getSf(rps_t params)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	4603      	mov	r3, r0
 8004910:	80fb      	strh	r3, [r7, #6]
	return (sf_t) (params & 0x7);
 8004912:	88fb      	ldrh	r3, [r7, #6]
 8004914:	b2db      	uxtb	r3, r3
 8004916:	f003 0307 	and.w	r3, r3, #7
 800491a:	b2db      	uxtb	r3, r3
}
 800491c:	4618      	mov	r0, r3
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <getBw>:
inline rps_t setSf(rps_t params, sf_t sf)
{
	return (rps_t) ((params & ~0x7) | sf);
}
inline bw_t getBw(rps_t params)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	4603      	mov	r3, r0
 8004930:	80fb      	strh	r3, [r7, #6]
	return (bw_t) ((params >> 3) & 0x3);
 8004932:	88fb      	ldrh	r3, [r7, #6]
 8004934:	08db      	lsrs	r3, r3, #3
 8004936:	b29b      	uxth	r3, r3
 8004938:	b2db      	uxtb	r3, r3
 800493a:	f003 0303 	and.w	r3, r3, #3
 800493e:	b2db      	uxtb	r3, r3
}
 8004940:	4618      	mov	r0, r3
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <getCr>:
inline rps_t setBw(rps_t params, bw_t cr)
{
	return (rps_t) ((params & ~0x18) | (cr << 3));
}
inline cr_t getCr(rps_t params)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	4603      	mov	r3, r0
 8004954:	80fb      	strh	r3, [r7, #6]
	return (cr_t) ((params >> 5) & 0x3);
 8004956:	88fb      	ldrh	r3, [r7, #6]
 8004958:	095b      	lsrs	r3, r3, #5
 800495a:	b29b      	uxth	r3, r3
 800495c:	b2db      	uxtb	r3, r3
 800495e:	f003 0303 	and.w	r3, r3, #3
 8004962:	b2db      	uxtb	r3, r3
}
 8004964:	4618      	mov	r0, r3
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <setCr>:
inline rps_t setCr(rps_t params, cr_t cr)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	4603      	mov	r3, r0
 8004978:	460a      	mov	r2, r1
 800497a:	80fb      	strh	r3, [r7, #6]
 800497c:	4613      	mov	r3, r2
 800497e:	717b      	strb	r3, [r7, #5]
	return (rps_t) ((params & ~0x60) | (cr << 5));
 8004980:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004984:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8004988:	b21a      	sxth	r2, r3
 800498a:	797b      	ldrb	r3, [r7, #5]
 800498c:	015b      	lsls	r3, r3, #5
 800498e:	b21b      	sxth	r3, r3
 8004990:	4313      	orrs	r3, r2
 8004992:	b21b      	sxth	r3, r3
 8004994:	b29b      	uxth	r3, r3
}
 8004996:	4618      	mov	r0, r3
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <getNocrc>:
inline int getNocrc(rps_t params)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	4603      	mov	r3, r0
 80049aa:	80fb      	strh	r3, [r7, #6]
	return ((params >> 7) & 0x1);
 80049ac:	88fb      	ldrh	r3, [r7, #6]
 80049ae:	09db      	lsrs	r3, r3, #7
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	f003 0301 	and.w	r3, r3, #1
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <setNocrc>:
inline rps_t setNocrc(rps_t params, int nocrc)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b083      	sub	sp, #12
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	4603      	mov	r3, r0
 80049ca:	6039      	str	r1, [r7, #0]
 80049cc:	80fb      	strh	r3, [r7, #6]
	return (rps_t) ((params & ~0x80) | (nocrc << 7));
 80049ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049d6:	b21a      	sxth	r2, r3
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	01db      	lsls	r3, r3, #7
 80049dc:	b21b      	sxth	r3, r3
 80049de:	4313      	orrs	r3, r2
 80049e0:	b21b      	sxth	r3, r3
 80049e2:	b29b      	uxth	r3, r3
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <getIh>:
inline int getIh(rps_t params)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	4603      	mov	r3, r0
 80049f8:	80fb      	strh	r3, [r7, #6]
	return ((params >> 8) & 0xFF);
 80049fa:	88fb      	ldrh	r3, [r7, #6]
 80049fc:	0a1b      	lsrs	r3, r3, #8
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	b2db      	uxtb	r3, r3
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <setIh>:
inline rps_t setIh(rps_t params, int ih)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b083      	sub	sp, #12
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	4603      	mov	r3, r0
 8004a16:	6039      	str	r1, [r7, #0]
 8004a18:	80fb      	strh	r3, [r7, #6]
	return (rps_t) ((params & ~0xFF00) | (ih << 8));
 8004a1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	b21a      	sxth	r2, r3
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	021b      	lsls	r3, r3, #8
 8004a26:	b21b      	sxth	r3, r3
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	b21b      	sxth	r3, r3
 8004a2c:	b29b      	uxth	r3, r3
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
	...

08004a3c <updr2rps>:
	return ((r1 ^ r2) & 0x1F) == 0;
}

extern const u1_t _DR2RPS_CRC[];
inline rps_t updr2rps(dr_t dr)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	4603      	mov	r3, r0
 8004a44:	71fb      	strb	r3, [r7, #7]
	return (rps_t) _DR2RPS_CRC[dr + 1];
 8004a46:	79fb      	ldrb	r3, [r7, #7]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	4a04      	ldr	r2, [pc, #16]	@ (8004a5c <updr2rps+0x20>)
 8004a4c:	5cd3      	ldrb	r3, [r2, r3]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	0800fc80 	.word	0x0800fc80

08004a60 <dndr2rps>:
inline rps_t dndr2rps(dr_t dr)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	4603      	mov	r3, r0
 8004a68:	71fb      	strb	r3, [r7, #7]
	return setNocrc(updr2rps(dr), 1);
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7ff ffe5 	bl	8004a3c <updr2rps>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2101      	movs	r1, #1
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7ff ffa3 	bl	80049c2 <setNocrc>
 8004a7c:	4603      	mov	r3, r0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
	...

08004a88 <decDR>:
inline dr_t incDR(dr_t dr)
{
	return _DR2RPS_CRC[dr + 2] == ILLEGAL_RPS ? dr : (dr_t) (dr + 1);
} // increase data rate
inline dr_t decDR(dr_t dr)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	4603      	mov	r3, r0
 8004a90:	71fb      	strb	r3, [r7, #7]
	return _DR2RPS_CRC[dr] == ILLEGAL_RPS ? dr : (dr_t) (dr - 1);
 8004a92:	79fb      	ldrb	r3, [r7, #7]
 8004a94:	4a07      	ldr	r2, [pc, #28]	@ (8004ab4 <decDR+0x2c>)
 8004a96:	5cd3      	ldrb	r3, [r2, r3]
 8004a98:	2bff      	cmp	r3, #255	@ 0xff
 8004a9a:	d003      	beq.n	8004aa4 <decDR+0x1c>
 8004a9c:	79fb      	ldrb	r3, [r7, #7]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	e000      	b.n	8004aa6 <decDR+0x1e>
 8004aa4:	79fb      	ldrb	r3, [r7, #7]
} // decrease data rate
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	0800fc80 	.word	0x0800fc80

08004ab8 <validDR>:
inline dr_t assertDR(dr_t dr)
{
	return _DR2RPS_CRC[dr + 1] == ILLEGAL_RPS ? DR_DFLTMIN : dr;
}   // force into a valid DR
inline bit_t validDR(dr_t dr)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	4603      	mov	r3, r0
 8004ac0:	71fb      	strb	r3, [r7, #7]
	return _DR2RPS_CRC[dr + 1] != ILLEGAL_RPS;
 8004ac2:	79fb      	ldrb	r3, [r7, #7]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	4a06      	ldr	r2, [pc, #24]	@ (8004ae0 <validDR+0x28>)
 8004ac8:	5cd3      	ldrb	r3, [r2, r3]
 8004aca:	2bff      	cmp	r3, #255	@ 0xff
 8004acc:	bf14      	ite	ne
 8004ace:	2301      	movne	r3, #1
 8004ad0:	2300      	moveq	r3, #0
 8004ad2:	b2db      	uxtb	r3, r3
} // in range
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	0800fc80 	.word	0x0800fc80

08004ae4 <lowerDR>:
inline dr_t lowerDR(dr_t dr, u1_t n)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	4603      	mov	r3, r0
 8004aec:	460a      	mov	r2, r1
 8004aee:	71fb      	strb	r3, [r7, #7]
 8004af0:	4613      	mov	r3, r2
 8004af2:	71bb      	strb	r3, [r7, #6]
	while (n--) {
 8004af4:	e005      	b.n	8004b02 <lowerDR+0x1e>
		dr = decDR(dr);
 8004af6:	79fb      	ldrb	r3, [r7, #7]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7ff ffc5 	bl	8004a88 <decDR>
 8004afe:	4603      	mov	r3, r0
 8004b00:	71fb      	strb	r3, [r7, #7]
	while (n--) {
 8004b02:	79bb      	ldrb	r3, [r7, #6]
 8004b04:	1e5a      	subs	r2, r3, #1
 8004b06:	71ba      	strb	r2, [r7, #6]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1f4      	bne.n	8004af6 <lowerDR+0x12>
	}
	return dr;
 8004b0c:	79fb      	ldrb	r3, [r7, #7]
} // decrease data rate by n steps
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <os_rlsbf2>:

#if !defined(HAS_os_calls)

#if !defined(os_rlsbf2)
u2_t os_rlsbf2(xref2cu1_t buf)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
	return (u2_t) (buf[0] | (buf[1] << 8));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	b21a      	sxth	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	3301      	adds	r3, #1
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	021b      	lsls	r3, r3, #8
 8004b2c:	b21b      	sxth	r3, r3
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	b21b      	sxth	r3, r3
 8004b32:	b29b      	uxth	r3, r3
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <os_rlsbf4>:
#endif

#if !defined(os_rlsbf4)
u4_t os_rlsbf4(xref2cu1_t buf)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
	return (u4_t) (buf[0] | (buf[1] << 8) | ((u4_t) buf[2] << 16)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	3301      	adds	r3, #1
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	021b      	lsls	r3, r3, #8
 8004b56:	4313      	orrs	r3, r2
 8004b58:	461a      	mov	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	3302      	adds	r3, #2
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	041b      	lsls	r3, r3, #16
 8004b62:	431a      	orrs	r2, r3
			| ((u4_t) buf[3] << 24));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3303      	adds	r3, #3
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	061b      	lsls	r3, r3, #24
	return (u4_t) (buf[0] | (buf[1] << 8) | ((u4_t) buf[2] << 16)
 8004b6c:	4313      	orrs	r3, r2
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <os_rmsbf4>:
#endif

#if !defined(os_rmsbf4)
u4_t os_rmsbf4(xref2cu1_t buf)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
	return (u4_t) (buf[3] | (buf[2] << 8) | ((u4_t) buf[1] << 16)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	3303      	adds	r3, #3
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	461a      	mov	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	3302      	adds	r3, #2
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	021b      	lsls	r3, r3, #8
 8004b92:	4313      	orrs	r3, r2
 8004b94:	461a      	mov	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	041b      	lsls	r3, r3, #16
 8004b9e:	431a      	orrs	r2, r3
			| ((u4_t) buf[0] << 24));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	061b      	lsls	r3, r3, #24
	return (u4_t) (buf[3] | (buf[2] << 8) | ((u4_t) buf[1] << 16)
 8004ba6:	4313      	orrs	r3, r2
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <os_wlsbf2>:
#endif

#if !defined(os_wlsbf2)
void os_wlsbf2(xref2u1_t buf, u2_t v)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	807b      	strh	r3, [r7, #2]
	buf[0] = v;
 8004bc0:	887b      	ldrh	r3, [r7, #2]
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	701a      	strb	r2, [r3, #0]
	buf[1] = v >> 8;
 8004bc8:	887b      	ldrh	r3, [r7, #2]
 8004bca:	0a1b      	lsrs	r3, r3, #8
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	b2d2      	uxtb	r2, r2
 8004bd4:	701a      	strb	r2, [r3, #0]
}
 8004bd6:	bf00      	nop
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <os_wlsbf4>:
#endif

#if !defined(os_wlsbf4)
void os_wlsbf4(xref2u1_t buf, u4_t v)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b083      	sub	sp, #12
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
 8004bea:	6039      	str	r1, [r7, #0]
	buf[0] = v;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	701a      	strb	r2, [r3, #0]
	buf[1] = v >> 8;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	0a1a      	lsrs	r2, r3, #8
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	b2d2      	uxtb	r2, r2
 8004bfe:	701a      	strb	r2, [r3, #0]
	buf[2] = v >> 16;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	0c1a      	lsrs	r2, r3, #16
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3302      	adds	r3, #2
 8004c08:	b2d2      	uxtb	r2, r2
 8004c0a:	701a      	strb	r2, [r3, #0]
	buf[3] = v >> 24;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	0e1a      	lsrs	r2, r3, #24
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3303      	adds	r3, #3
 8004c14:	b2d2      	uxtb	r2, r2
 8004c16:	701a      	strb	r2, [r3, #0]
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <os_wmsbf4>:
#endif

#if !defined(os_wmsbf4)
void os_wmsbf4(xref2u1_t buf, u4_t v)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
	buf[3] = v;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	3303      	adds	r3, #3
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	b2d2      	uxtb	r2, r2
 8004c36:	701a      	strb	r2, [r3, #0]
	buf[2] = v >> 8;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	0a1a      	lsrs	r2, r3, #8
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	3302      	adds	r3, #2
 8004c40:	b2d2      	uxtb	r2, r2
 8004c42:	701a      	strb	r2, [r3, #0]
	buf[1] = v >> 16;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	0c1a      	lsrs	r2, r3, #16
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	b2d2      	uxtb	r2, r2
 8004c4e:	701a      	strb	r2, [r3, #0]
	buf[0] = v >> 24;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	0e1b      	lsrs	r3, r3, #24
 8004c54:	b2da      	uxtb	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	701a      	strb	r2, [r3, #0]
}
 8004c5a:	bf00      	nop
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <os_getBattLevel>:
#endif

#if !defined(os_getBattLevel)
u1_t os_getBattLevel(void)
{
 8004c66:	b480      	push	{r7}
 8004c68:	af00      	add	r7, sp, #0
	return MCMD_DEVS_BATT_NOINFO;
 8004c6a:	23ff      	movs	r3, #255	@ 0xff
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <os_crc16>:
#endif

#if !defined(os_crc16)
// New CRC-16 CCITT(XMODEM) checksum for beacons:
u2_t os_crc16(xref2u1_t data, uint len)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b087      	sub	sp, #28
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
 8004c7e:	6039      	str	r1, [r7, #0]
	u2_t remainder = 0;
 8004c80:	2300      	movs	r3, #0
 8004c82:	82fb      	strh	r3, [r7, #22]
	u2_t polynomial = 0x1021;
 8004c84:	f241 0321 	movw	r3, #4129	@ 0x1021
 8004c88:	81bb      	strh	r3, [r7, #12]
	for (uint i = 0; i < len; i++) {
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	613b      	str	r3, [r7, #16]
 8004c8e:	e026      	b.n	8004cde <os_crc16+0x68>
		remainder ^= data[i] << 8;
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	4413      	add	r3, r2
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	021b      	lsls	r3, r3, #8
 8004c9a:	b21a      	sxth	r2, r3
 8004c9c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004ca0:	4053      	eors	r3, r2
 8004ca2:	b21b      	sxth	r3, r3
 8004ca4:	82fb      	strh	r3, [r7, #22]
		for (u1_t bit = 8; bit > 0; bit--) {
 8004ca6:	2308      	movs	r3, #8
 8004ca8:	73fb      	strb	r3, [r7, #15]
 8004caa:	e012      	b.n	8004cd2 <os_crc16+0x5c>
			if ((remainder & 0x8000))
 8004cac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	da08      	bge.n	8004cc6 <os_crc16+0x50>
				remainder = (remainder << 1) ^ polynomial;
 8004cb4:	8afb      	ldrh	r3, [r7, #22]
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	b21a      	sxth	r2, r3
 8004cba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004cbe:	4053      	eors	r3, r2
 8004cc0:	b21b      	sxth	r3, r3
 8004cc2:	82fb      	strh	r3, [r7, #22]
 8004cc4:	e002      	b.n	8004ccc <os_crc16+0x56>
			else
				remainder <<= 1;
 8004cc6:	8afb      	ldrh	r3, [r7, #22]
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	82fb      	strh	r3, [r7, #22]
		for (u1_t bit = 8; bit > 0; bit--) {
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	73fb      	strb	r3, [r7, #15]
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1e9      	bne.n	8004cac <os_crc16+0x36>
	for (uint i = 0; i < len; i++) {
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	613b      	str	r3, [r7, #16]
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d3d4      	bcc.n	8004c90 <os_crc16+0x1a>
		}
	}
	return remainder;
 8004ce6:	8afb      	ldrh	r3, [r7, #22]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	371c      	adds	r7, #28
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <micB0>:

// ================================================================================
// BEG AES

static void micB0(u4_t devaddr, u4_t seqno, int dndir, int len)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
 8004d00:	603b      	str	r3, [r7, #0]
	os_clearMem(AESaux, 16);
 8004d02:	2210      	movs	r2, #16
 8004d04:	2100      	movs	r1, #0
 8004d06:	4810      	ldr	r0, [pc, #64]	@ (8004d48 <micB0+0x54>)
 8004d08:	f009 fd43 	bl	800e792 <memset>
	AESaux[0] = 0x49;
 8004d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8004d48 <micB0+0x54>)
 8004d0e:	2249      	movs	r2, #73	@ 0x49
 8004d10:	701a      	strb	r2, [r3, #0]
	AESaux[5] = dndir ? 1 : 0;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	bf14      	ite	ne
 8004d18:	2301      	movne	r3, #1
 8004d1a:	2300      	moveq	r3, #0
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d4c <micB0+0x58>)
 8004d20:	701a      	strb	r2, [r3, #0]
	AESaux[15] = len;
 8004d22:	4b0b      	ldr	r3, [pc, #44]	@ (8004d50 <micB0+0x5c>)
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	b2d2      	uxtb	r2, r2
 8004d28:	701a      	strb	r2, [r3, #0]
	os_wlsbf4(AESaux + 6, devaddr);
 8004d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8004d54 <micB0+0x60>)
 8004d2c:	68f9      	ldr	r1, [r7, #12]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7ff ff57 	bl	8004be2 <os_wlsbf4>
	os_wlsbf4(AESaux + 10, seqno);
 8004d34:	4b08      	ldr	r3, [pc, #32]	@ (8004d58 <micB0+0x64>)
 8004d36:	68b9      	ldr	r1, [r7, #8]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7ff ff52 	bl	8004be2 <os_wlsbf4>
}
 8004d3e:	bf00      	nop
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	200000e8 	.word	0x200000e8
 8004d4c:	200000ed 	.word	0x200000ed
 8004d50:	200000f7 	.word	0x200000f7
 8004d54:	200000ee 	.word	0x200000ee
 8004d58:	200000f2 	.word	0x200000f2

08004d5c <aes_verifyMic>:

static int aes_verifyMic(xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir,
		xref2u1_t pdu, int len)
{
 8004d5c:	b590      	push	{r4, r7, lr}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
 8004d68:	603b      	str	r3, [r7, #0]
	micB0(devaddr, seqno, dndir, len);
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	6879      	ldr	r1, [r7, #4]
 8004d70:	68b8      	ldr	r0, [r7, #8]
 8004d72:	f7ff ffbf 	bl	8004cf4 <micB0>
	os_copyMem(AESkey, key, 16);
 8004d76:	2210      	movs	r2, #16
 8004d78:	68f9      	ldr	r1, [r7, #12]
 8004d7a:	480d      	ldr	r0, [pc, #52]	@ (8004db0 <aes_verifyMic+0x54>)
 8004d7c:	f009 fd36 	bl	800e7ec <memcpy>
	return os_aes(AES_MIC, pdu, len) == os_rmsbf4(pdu + len);
 8004d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	461a      	mov	r2, r3
 8004d86:	6a39      	ldr	r1, [r7, #32]
 8004d88:	2002      	movs	r0, #2
 8004d8a:	f7fc f955 	bl	8001038 <os_aes>
 8004d8e:	4604      	mov	r4, r0
 8004d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d92:	6a3a      	ldr	r2, [r7, #32]
 8004d94:	4413      	add	r3, r2
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7ff feef 	bl	8004b7a <os_rmsbf4>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	429c      	cmp	r4, r3
 8004da0:	bf0c      	ite	eq
 8004da2:	2301      	moveq	r3, #1
 8004da4:	2300      	movne	r3, #0
 8004da6:	b2db      	uxtb	r3, r3
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd90      	pop	{r4, r7, pc}
 8004db0:	200000f8 	.word	0x200000f8

08004db4 <aes_appendMic>:

static void aes_appendMic(xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir,
		xref2u1_t pdu, int len)
{
 8004db4:	b590      	push	{r4, r7, lr}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
 8004dc0:	603b      	str	r3, [r7, #0]
	micB0(devaddr, seqno, dndir, len);
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	6879      	ldr	r1, [r7, #4]
 8004dc8:	68b8      	ldr	r0, [r7, #8]
 8004dca:	f7ff ff93 	bl	8004cf4 <micB0>
	os_copyMem(AESkey, key, 16);
 8004dce:	2210      	movs	r2, #16
 8004dd0:	68f9      	ldr	r1, [r7, #12]
 8004dd2:	480b      	ldr	r0, [pc, #44]	@ (8004e00 <aes_appendMic+0x4c>)
 8004dd4:	f009 fd0a 	bl	800e7ec <memcpy>
	// MSB because of internal structure of AES
	os_wmsbf4(pdu + len, os_aes(AES_MIC, pdu, len));
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dda:	6a3a      	ldr	r2, [r7, #32]
 8004ddc:	18d4      	adds	r4, r2, r3
 8004dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	461a      	mov	r2, r3
 8004de4:	6a39      	ldr	r1, [r7, #32]
 8004de6:	2002      	movs	r0, #2
 8004de8:	f7fc f926 	bl	8001038 <os_aes>
 8004dec:	4603      	mov	r3, r0
 8004dee:	4619      	mov	r1, r3
 8004df0:	4620      	mov	r0, r4
 8004df2:	f7ff ff17 	bl	8004c24 <os_wmsbf4>
}
 8004df6:	bf00      	nop
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd90      	pop	{r4, r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	200000f8 	.word	0x200000f8

08004e04 <aes_appendMic0>:

static void aes_appendMic0(xref2u1_t pdu, int len)
{
 8004e04:	b590      	push	{r4, r7, lr}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
	os_getDevKey(AESkey);
 8004e0e:	480b      	ldr	r0, [pc, #44]	@ (8004e3c <aes_appendMic0+0x38>)
 8004e10:	f002 fe38 	bl	8007a84 <os_getDevKey>
	os_wmsbf4(pdu + len, os_aes(AES_MIC | AES_MICNOAUX, pdu, len)); // MSB because of internal structure of AES
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	18d4      	adds	r4, r2, r3
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	461a      	mov	r2, r3
 8004e20:	6879      	ldr	r1, [r7, #4]
 8004e22:	200a      	movs	r0, #10
 8004e24:	f7fc f908 	bl	8001038 <os_aes>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	f7ff fef9 	bl	8004c24 <os_wmsbf4>
}
 8004e32:	bf00      	nop
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd90      	pop	{r4, r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	200000f8 	.word	0x200000f8

08004e40 <aes_verifyMic0>:

static int aes_verifyMic0(xref2u1_t pdu, int len)
{
 8004e40:	b590      	push	{r4, r7, lr}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
	os_getDevKey(AESkey);
 8004e4a:	480d      	ldr	r0, [pc, #52]	@ (8004e80 <aes_verifyMic0+0x40>)
 8004e4c:	f002 fe1a 	bl	8007a84 <os_getDevKey>
	return os_aes(AES_MIC | AES_MICNOAUX, pdu, len) == os_rmsbf4(pdu + len);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	461a      	mov	r2, r3
 8004e56:	6879      	ldr	r1, [r7, #4]
 8004e58:	200a      	movs	r0, #10
 8004e5a:	f7fc f8ed 	bl	8001038 <os_aes>
 8004e5e:	4604      	mov	r4, r0
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	4413      	add	r3, r2
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7ff fe87 	bl	8004b7a <os_rmsbf4>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	429c      	cmp	r4, r3
 8004e70:	bf0c      	ite	eq
 8004e72:	2301      	moveq	r3, #1
 8004e74:	2300      	movne	r3, #0
 8004e76:	b2db      	uxtb	r3, r3
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd90      	pop	{r4, r7, pc}
 8004e80:	200000f8 	.word	0x200000f8

08004e84 <aes_encrypt>:

static void aes_encrypt(xref2u1_t pdu, int len)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
	os_getDevKey(AESkey);
 8004e8e:	4807      	ldr	r0, [pc, #28]	@ (8004eac <aes_encrypt+0x28>)
 8004e90:	f002 fdf8 	bl	8007a84 <os_getDevKey>
	os_aes(AES_ENC, pdu, len);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	461a      	mov	r2, r3
 8004e9a:	6879      	ldr	r1, [r7, #4]
 8004e9c:	2000      	movs	r0, #0
 8004e9e:	f7fc f8cb 	bl	8001038 <os_aes>
}
 8004ea2:	bf00      	nop
 8004ea4:	3708      	adds	r7, #8
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	200000f8 	.word	0x200000f8

08004eb0 <aes_cipher>:

static void aes_cipher(xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir,
		xref2u1_t payload, int len)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
 8004ebc:	603b      	str	r3, [r7, #0]
	if (len <= 0)
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	dd29      	ble.n	8004f18 <aes_cipher+0x68>
		return;
	os_clearMem(AESaux, 16);
 8004ec4:	2210      	movs	r2, #16
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	4815      	ldr	r0, [pc, #84]	@ (8004f20 <aes_cipher+0x70>)
 8004eca:	f009 fc62 	bl	800e792 <memset>
	AESaux[0] = AESaux[15] = 1; // mode=cipher / dir=down / block counter=1
 8004ece:	4b15      	ldr	r3, [pc, #84]	@ (8004f24 <aes_cipher+0x74>)
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	701a      	strb	r2, [r3, #0]
 8004ed4:	4a12      	ldr	r2, [pc, #72]	@ (8004f20 <aes_cipher+0x70>)
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	7013      	strb	r3, [r2, #0]
	AESaux[5] = dndir ? 1 : 0;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	bf14      	ite	ne
 8004ee0:	2301      	movne	r3, #1
 8004ee2:	2300      	moveq	r3, #0
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	4b10      	ldr	r3, [pc, #64]	@ (8004f28 <aes_cipher+0x78>)
 8004ee8:	701a      	strb	r2, [r3, #0]
	os_wlsbf4(AESaux + 6, devaddr);
 8004eea:	4b10      	ldr	r3, [pc, #64]	@ (8004f2c <aes_cipher+0x7c>)
 8004eec:	68b9      	ldr	r1, [r7, #8]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7ff fe77 	bl	8004be2 <os_wlsbf4>
	os_wlsbf4(AESaux + 10, seqno);
 8004ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8004f30 <aes_cipher+0x80>)
 8004ef6:	6879      	ldr	r1, [r7, #4]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7ff fe72 	bl	8004be2 <os_wlsbf4>
	os_copyMem(AESkey, key, 16);
 8004efe:	2210      	movs	r2, #16
 8004f00:	68f9      	ldr	r1, [r7, #12]
 8004f02:	480c      	ldr	r0, [pc, #48]	@ (8004f34 <aes_cipher+0x84>)
 8004f04:	f009 fc72 	bl	800e7ec <memcpy>
	os_aes(AES_CTR, payload, len);
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	69b9      	ldr	r1, [r7, #24]
 8004f10:	2004      	movs	r0, #4
 8004f12:	f7fc f891 	bl	8001038 <os_aes>
 8004f16:	e000      	b.n	8004f1a <aes_cipher+0x6a>
		return;
 8004f18:	bf00      	nop
}
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	200000e8 	.word	0x200000e8
 8004f24:	200000f7 	.word	0x200000f7
 8004f28:	200000ed 	.word	0x200000ed
 8004f2c:	200000ee 	.word	0x200000ee
 8004f30:	200000f2 	.word	0x200000f2
 8004f34:	200000f8 	.word	0x200000f8

08004f38 <aes_sessKeys>:

static void aes_sessKeys(u2_t devnonce, xref2cu1_t artnonce, xref2u1_t nwkkey,
		xref2u1_t artkey)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60b9      	str	r1, [r7, #8]
 8004f40:	607a      	str	r2, [r7, #4]
 8004f42:	603b      	str	r3, [r7, #0]
 8004f44:	4603      	mov	r3, r0
 8004f46:	81fb      	strh	r3, [r7, #14]
	os_clearMem(nwkkey, 16);
 8004f48:	2210      	movs	r2, #16
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f009 fc20 	bl	800e792 <memset>
	nwkkey[0] = 0x01;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	701a      	strb	r2, [r3, #0]
	os_copyMem(nwkkey + 1, artnonce, LEN_ARTNONCE + LEN_NETID);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	2206      	movs	r2, #6
 8004f5e:	68b9      	ldr	r1, [r7, #8]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f009 fc43 	bl	800e7ec <memcpy>
	os_wlsbf2(nwkkey + 1 + LEN_ARTNONCE + LEN_NETID, devnonce);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	3307      	adds	r3, #7
 8004f6a:	89fa      	ldrh	r2, [r7, #14]
 8004f6c:	4611      	mov	r1, r2
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7ff fe20 	bl	8004bb4 <os_wlsbf2>
	os_copyMem(artkey, nwkkey, 16);
 8004f74:	2210      	movs	r2, #16
 8004f76:	6879      	ldr	r1, [r7, #4]
 8004f78:	6838      	ldr	r0, [r7, #0]
 8004f7a:	f009 fc37 	bl	800e7ec <memcpy>
	artkey[0] = 0x02;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2202      	movs	r2, #2
 8004f82:	701a      	strb	r2, [r3, #0]

	os_getDevKey(AESkey);
 8004f84:	4809      	ldr	r0, [pc, #36]	@ (8004fac <aes_sessKeys+0x74>)
 8004f86:	f002 fd7d 	bl	8007a84 <os_getDevKey>
	os_aes(AES_ENC, nwkkey, 16);
 8004f8a:	2210      	movs	r2, #16
 8004f8c:	6879      	ldr	r1, [r7, #4]
 8004f8e:	2000      	movs	r0, #0
 8004f90:	f7fc f852 	bl	8001038 <os_aes>
	os_getDevKey(AESkey);
 8004f94:	4805      	ldr	r0, [pc, #20]	@ (8004fac <aes_sessKeys+0x74>)
 8004f96:	f002 fd75 	bl	8007a84 <os_getDevKey>
	os_aes(AES_ENC, artkey, 16);
 8004f9a:	2210      	movs	r2, #16
 8004f9c:	6839      	ldr	r1, [r7, #0]
 8004f9e:	2000      	movs	r0, #0
 8004fa0:	f7fc f84a 	bl	8001038 <os_aes>
}
 8004fa4:	bf00      	nop
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	200000f8 	.word	0x200000f8

08004fb0 <getSensitivity>:
		{ 141 - 138, 141 - 135, 141 - 132 },  // SF11
		{ 141 - 141, 141 - 138, 141 - 135 }   // SF12
};

int getSensitivity(rps_t rps)
{
 8004fb0:	b590      	push	{r4, r7, lr}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	80fb      	strh	r3, [r7, #6]
	return -141 + SENSITIVITY[getSf(rps)][getBw(rps)];
 8004fba:	88fb      	ldrh	r3, [r7, #6]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7ff fca3 	bl	8004908 <getSf>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	461c      	mov	r4, r3
 8004fc6:	88fb      	ldrh	r3, [r7, #6]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7ff fcad 	bl	8004928 <getBw>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	4a06      	ldr	r2, [pc, #24]	@ (8004fec <getSensitivity+0x3c>)
 8004fd4:	4623      	mov	r3, r4
 8004fd6:	005b      	lsls	r3, r3, #1
 8004fd8:	4423      	add	r3, r4
 8004fda:	4413      	add	r3, r2
 8004fdc:	440b      	add	r3, r1
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	3b8d      	subs	r3, #141	@ 0x8d
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd90      	pop	{r4, r7, pc}
 8004fea:	bf00      	nop
 8004fec:	0800fc9c 	.word	0x0800fc9c

08004ff0 <calcAirTime>:

ostime_t calcAirTime(rps_t rps, u1_t plen)
{
 8004ff0:	b590      	push	{r4, r7, lr}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	460a      	mov	r2, r1
 8004ffa:	80fb      	strh	r3, [r7, #6]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	717b      	strb	r3, [r7, #5]
	u1_t bw = getBw(rps);  // 0,1,2 = 125,250,500kHz
 8005000:	88fb      	ldrh	r3, [r7, #6]
 8005002:	4618      	mov	r0, r3
 8005004:	f7ff fc90 	bl	8004928 <getBw>
 8005008:	4603      	mov	r3, r0
 800500a:	72fb      	strb	r3, [r7, #11]
	u1_t sf = getSf(rps);  // 0=FSK, 1..6 = SF7..12
 800500c:	88fb      	ldrh	r3, [r7, #6]
 800500e:	4618      	mov	r0, r3
 8005010:	f7ff fc7a 	bl	8004908 <getSf>
 8005014:	4603      	mov	r3, r0
 8005016:	72bb      	strb	r3, [r7, #10]
	if (sf == FSK) {
 8005018:	7abb      	ldrb	r3, [r7, #10]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10c      	bne.n	8005038 <calcAirTime+0x48>
		return (plen + /*preamble*/5 + /*syncword*/3 + /*len*/1 + /*crc*/2)
 800501e:	797b      	ldrb	r3, [r7, #5]
 8005020:	330b      	adds	r3, #11
				* /*bits/byte*/8 * (s4_t) OSTICKS_PER_SEC / /*kbit/s*/50000;
 8005022:	f44f 327a 	mov.w	r2, #256000	@ 0x3e800
 8005026:	fb02 f303 	mul.w	r3, r2, r3
 800502a:	4a3c      	ldr	r2, [pc, #240]	@ (800511c <calcAirTime+0x12c>)
 800502c:	fb82 1203 	smull	r1, r2, r2, r3
 8005030:	1312      	asrs	r2, r2, #12
 8005032:	17db      	asrs	r3, r3, #31
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	e06d      	b.n	8005114 <calcAirTime+0x124>
	}
	u1_t sfx = 4 * (sf + (7 - SF7));
 8005038:	7abb      	ldrb	r3, [r7, #10]
 800503a:	3306      	adds	r3, #6
 800503c:	b2db      	uxtb	r3, r3
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	75fb      	strb	r3, [r7, #23]
	u1_t q = sfx - (sf >= SF11 ? 8 : 0);
 8005042:	7abb      	ldrb	r3, [r7, #10]
 8005044:	2b04      	cmp	r3, #4
 8005046:	d901      	bls.n	800504c <calcAirTime+0x5c>
 8005048:	2308      	movs	r3, #8
 800504a:	e000      	b.n	800504e <calcAirTime+0x5e>
 800504c:	2300      	movs	r3, #0
 800504e:	7dfa      	ldrb	r2, [r7, #23]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	727b      	strb	r3, [r7, #9]
	int tmp = 8 * plen - sfx + 28 + (getNocrc(rps) ? 0 : 16)
 8005054:	797b      	ldrb	r3, [r7, #5]
 8005056:	00da      	lsls	r2, r3, #3
 8005058:	7dfb      	ldrb	r3, [r7, #23]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	f103 041c 	add.w	r4, r3, #28
 8005060:	88fb      	ldrh	r3, [r7, #6]
 8005062:	4618      	mov	r0, r3
 8005064:	f7ff fc9d 	bl	80049a2 <getNocrc>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <calcAirTime+0x82>
 800506e:	2300      	movs	r3, #0
 8005070:	e000      	b.n	8005074 <calcAirTime+0x84>
 8005072:	2310      	movs	r3, #16
 8005074:	441c      	add	r4, r3
			- (getIh(rps) ? 20 : 0);
 8005076:	88fb      	ldrh	r3, [r7, #6]
 8005078:	4618      	mov	r0, r3
 800507a:	f7ff fcb9 	bl	80049f0 <getIh>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d001      	beq.n	8005088 <calcAirTime+0x98>
 8005084:	2314      	movs	r3, #20
 8005086:	e000      	b.n	800508a <calcAirTime+0x9a>
 8005088:	2300      	movs	r3, #0
	int tmp = 8 * plen - sfx + 28 + (getNocrc(rps) ? 0 : 16)
 800508a:	1ae3      	subs	r3, r4, r3
 800508c:	613b      	str	r3, [r7, #16]
	if (tmp > 0) {
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	2b00      	cmp	r3, #0
 8005092:	dd15      	ble.n	80050c0 <calcAirTime+0xd0>
		tmp = (tmp + q - 1) / q;
 8005094:	7a7a      	ldrb	r2, [r7, #9]
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	4413      	add	r3, r2
 800509a:	1e5a      	subs	r2, r3, #1
 800509c:	7a7b      	ldrb	r3, [r7, #9]
 800509e:	fb92 f3f3 	sdiv	r3, r2, r3
 80050a2:	613b      	str	r3, [r7, #16]
		tmp *= getCr(rps) + 5;
 80050a4:	88fb      	ldrh	r3, [r7, #6]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7ff fc50 	bl	800494c <getCr>
 80050ac:	4603      	mov	r3, r0
 80050ae:	1d5a      	adds	r2, r3, #5
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	fb02 f303 	mul.w	r3, r2, r3
 80050b6:	613b      	str	r3, [r7, #16]
		tmp += 8;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	3308      	adds	r3, #8
 80050bc:	613b      	str	r3, [r7, #16]
 80050be:	e001      	b.n	80050c4 <calcAirTime+0xd4>
	} else {
		tmp = 8;
 80050c0:	2308      	movs	r3, #8
 80050c2:	613b      	str	r3, [r7, #16]
	}
	tmp = (tmp << 2) + /*preamble*/49 /* 4 * (8 + 4.25) */;
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	3331      	adds	r3, #49	@ 0x31
 80050ca:	613b      	str	r3, [r7, #16]
	//
	// osticks =  tmp * OSTICKS_PER_SEC * 1<<sf / bw
	//
	// 3 => counter reduced divisor 125000/8 => 15625
	// 2 => counter 2 shift on tmp
	sfx = sf + (7 - SF7) - (3 + 2) - bw;
 80050cc:	7aba      	ldrb	r2, [r7, #10]
 80050ce:	7afb      	ldrb	r3, [r7, #11]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	3301      	adds	r3, #1
 80050d6:	75fb      	strb	r3, [r7, #23]
	int div = 15625;
 80050d8:	f643 5309 	movw	r3, #15625	@ 0x3d09
 80050dc:	60fb      	str	r3, [r7, #12]
	if (sfx > 4) {
 80050de:	7dfb      	ldrb	r3, [r7, #23]
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	d907      	bls.n	80050f4 <calcAirTime+0x104>
		// prevent 32bit signed int overflow in last step
		div >>= sfx - 4;
 80050e4:	7dfb      	ldrb	r3, [r7, #23]
 80050e6:	3b04      	subs	r3, #4
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	fa42 f303 	asr.w	r3, r2, r3
 80050ee:	60fb      	str	r3, [r7, #12]
		sfx = 4;
 80050f0:	2304      	movs	r3, #4
 80050f2:	75fb      	strb	r3, [r7, #23]
	}
	// Need 32bit arithmetic for this last step
	return (((ostime_t) tmp << sfx) * OSTICKS_PER_SEC + div / 2) / div;
 80050f4:	7dfb      	ldrb	r3, [r7, #23]
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	fa02 f303 	lsl.w	r3, r2, r3
 80050fc:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8005100:	fb03 f202 	mul.w	r2, r3, r2
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	0fd9      	lsrs	r1, r3, #31
 8005108:	440b      	add	r3, r1
 800510a:	105b      	asrs	r3, r3, #1
 800510c:	441a      	add	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8005114:	4618      	mov	r0, r3
 8005116:	371c      	adds	r7, #28
 8005118:	46bd      	mov	sp, r7
 800511a:	bd90      	pop	{r4, r7, pc}
 800511c:	14f8b589 	.word	0x14f8b589

08005120 <calcRxWindow>:
    us2osticksRound(128<<0)   // ------    DR_SF7CR
#endif
		};

static ostime_t calcRxWindow(u1_t secs, dr_t dr)
{
 8005120:	b480      	push	{r7}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	4603      	mov	r3, r0
 8005128:	460a      	mov	r2, r1
 800512a:	71fb      	strb	r3, [r7, #7]
 800512c:	4613      	mov	r3, r2
 800512e:	71bb      	strb	r3, [r7, #6]
	ostime_t rxoff, err;
	if (secs == 0) {
 8005130:	79fb      	ldrb	r3, [r7, #7]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d108      	bne.n	8005148 <calcRxWindow+0x28>
		// aka 128 secs (next becaon)
		rxoff = LMIC.drift;
 8005136:	4b22      	ldr	r3, [pc, #136]	@ (80051c0 <calcRxWindow+0xa0>)
 8005138:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 800513c:	617b      	str	r3, [r7, #20]
		err = LMIC.lastDriftDiff;
 800513e:	4b20      	ldr	r3, [pc, #128]	@ (80051c0 <calcRxWindow+0xa0>)
 8005140:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 8005144:	613b      	str	r3, [r7, #16]
 8005146:	e011      	b.n	800516c <calcRxWindow+0x4c>
	} else {
		// scheduled RX window within secs into current beacon period
		rxoff = (LMIC.drift * (ostime_t) secs) >> BCN_INTV_exp;
 8005148:	4b1d      	ldr	r3, [pc, #116]	@ (80051c0 <calcRxWindow+0xa0>)
 800514a:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 800514e:	461a      	mov	r2, r3
 8005150:	79fb      	ldrb	r3, [r7, #7]
 8005152:	fb02 f303 	mul.w	r3, r2, r3
 8005156:	11db      	asrs	r3, r3, #7
 8005158:	617b      	str	r3, [r7, #20]
		err = (LMIC.lastDriftDiff * (ostime_t) secs) >> BCN_INTV_exp;
 800515a:	4b19      	ldr	r3, [pc, #100]	@ (80051c0 <calcRxWindow+0xa0>)
 800515c:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 8005160:	461a      	mov	r2, r3
 8005162:	79fb      	ldrb	r3, [r7, #7]
 8005164:	fb02 f303 	mul.w	r3, r2, r3
 8005168:	11db      	asrs	r3, r3, #7
 800516a:	613b      	str	r3, [r7, #16]
	}
	u1_t rxsyms = MINRX_SYMS;
 800516c:	2305      	movs	r3, #5
 800516e:	73fb      	strb	r3, [r7, #15]
	err += (ostime_t) LMIC.maxDriftDiff * LMIC.missedBcns;
 8005170:	4b13      	ldr	r3, [pc, #76]	@ (80051c0 <calcRxWindow+0xa0>)
 8005172:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 8005176:	461a      	mov	r2, r3
 8005178:	4b11      	ldr	r3, [pc, #68]	@ (80051c0 <calcRxWindow+0xa0>)
 800517a:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 800517e:	fb02 f303 	mul.w	r3, r2, r3
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	4413      	add	r3, r2
 8005186:	613b      	str	r3, [r7, #16]
	LMIC.rxsyms = MINRX_SYMS + (err / dr2hsym(dr));
 8005188:	79bb      	ldrb	r3, [r7, #6]
 800518a:	4a0e      	ldr	r2, [pc, #56]	@ (80051c4 <calcRxWindow+0xa4>)
 800518c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	fb92 f3f3 	sdiv	r3, r2, r3
 8005196:	b2db      	uxtb	r3, r3
 8005198:	3305      	adds	r3, #5
 800519a:	b2da      	uxtb	r2, r3
 800519c:	4b08      	ldr	r3, [pc, #32]	@ (80051c0 <calcRxWindow+0xa0>)
 800519e:	741a      	strb	r2, [r3, #16]

	return (rxsyms - PAMBL_SYMS) * dr2hsym(dr) + rxoff;
 80051a0:	7bfb      	ldrb	r3, [r7, #15]
 80051a2:	3b08      	subs	r3, #8
 80051a4:	79ba      	ldrb	r2, [r7, #6]
 80051a6:	4907      	ldr	r1, [pc, #28]	@ (80051c4 <calcRxWindow+0xa4>)
 80051a8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80051ac:	fb03 f202 	mul.w	r2, r3, r2
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	4413      	add	r3, r2
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	371c      	adds	r7, #28
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	200002e0 	.word	0x200002e0
 80051c4:	0800fcc0 	.word	0x0800fcc0

080051c8 <calcBcnRxWindowFromMillis>:

// Setup beacon RX parameters assuming we have an error of ms (aka +/-(ms/2))
static void calcBcnRxWindowFromMillis(u1_t ms, bit_t ini)
{
 80051c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051cc:	b087      	sub	sp, #28
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	4606      	mov	r6, r0
 80051d2:	4608      	mov	r0, r1
 80051d4:	4631      	mov	r1, r6
 80051d6:	73f9      	strb	r1, [r7, #15]
 80051d8:	4601      	mov	r1, r0
 80051da:	73b9      	strb	r1, [r7, #14]
	if (ini) {
 80051dc:	7bb9      	ldrb	r1, [r7, #14]
 80051de:	2900      	cmp	r1, #0
 80051e0:	d014      	beq.n	800520c <calcBcnRxWindowFromMillis+0x44>
		LMIC.drift = 0;
 80051e2:	493b      	ldr	r1, [pc, #236]	@ (80052d0 <calcBcnRxWindowFromMillis+0x108>)
 80051e4:	2000      	movs	r0, #0
 80051e6:	f8a1 00b4 	strh.w	r0, [r1, #180]	@ 0xb4
		LMIC.maxDriftDiff = 0;
 80051ea:	4939      	ldr	r1, [pc, #228]	@ (80052d0 <calcBcnRxWindowFromMillis+0x108>)
 80051ec:	2000      	movs	r0, #0
 80051ee:	f8a1 00b8 	strh.w	r0, [r1, #184]	@ 0xb8
		LMIC.missedBcns = 0;
 80051f2:	4937      	ldr	r1, [pc, #220]	@ (80052d0 <calcBcnRxWindowFromMillis+0x108>)
 80051f4:	2000      	movs	r0, #0
 80051f6:	f881 0131 	strb.w	r0, [r1, #305]	@ 0x131
		LMIC.bcninfo.flags |= BCN_NODRIFT | BCN_NODDIFF;
 80051fa:	4935      	ldr	r1, [pc, #212]	@ (80052d0 <calcBcnRxWindowFromMillis+0x108>)
 80051fc:	f891 1196 	ldrb.w	r1, [r1, #406]	@ 0x196
 8005200:	f041 010c 	orr.w	r1, r1, #12
 8005204:	b2c8      	uxtb	r0, r1
 8005206:	4932      	ldr	r1, [pc, #200]	@ (80052d0 <calcBcnRxWindowFromMillis+0x108>)
 8005208:	f881 0196 	strb.w	r0, [r1, #406]	@ 0x196
	}
	ostime_t hsym = dr2hsym(DR_BCN);
 800520c:	2142      	movs	r1, #66	@ 0x42
 800520e:	6179      	str	r1, [r7, #20]
	LMIC.bcnRxsyms = MINRX_SYMS + ms2osticksCeil(ms) / hsym;
 8005210:	7bf9      	ldrb	r1, [r7, #15]
 8005212:	2000      	movs	r0, #0
 8005214:	460c      	mov	r4, r1
 8005216:	4605      	mov	r5, r0
 8005218:	4620      	mov	r0, r4
 800521a:	4629      	mov	r1, r5
 800521c:	f04f 0a00 	mov.w	sl, #0
 8005220:	f04f 0b00 	mov.w	fp, #0
 8005224:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8005228:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 800522c:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8005230:	4650      	mov	r0, sl
 8005232:	4659      	mov	r1, fp
 8005234:	1b02      	subs	r2, r0, r4
 8005236:	eb61 0305 	sbc.w	r3, r1, r5
 800523a:	f04f 0000 	mov.w	r0, #0
 800523e:	f04f 0100 	mov.w	r1, #0
 8005242:	0099      	lsls	r1, r3, #2
 8005244:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8005248:	0090      	lsls	r0, r2, #2
 800524a:	4602      	mov	r2, r0
 800524c:	460b      	mov	r3, r1
 800524e:	eb12 0804 	adds.w	r8, r2, r4
 8005252:	eb43 0905 	adc.w	r9, r3, r5
 8005256:	f04f 0200 	mov.w	r2, #0
 800525a:	f04f 0300 	mov.w	r3, #0
 800525e:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8005262:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 8005266:	ea4f 2208 	mov.w	r2, r8, lsl #8
 800526a:	4690      	mov	r8, r2
 800526c:	4699      	mov	r9, r3
 800526e:	4642      	mov	r2, r8
 8005270:	464b      	mov	r3, r9
 8005272:	f240 31e7 	movw	r1, #999	@ 0x3e7
 8005276:	1851      	adds	r1, r2, r1
 8005278:	6039      	str	r1, [r7, #0]
 800527a:	f143 0300 	adc.w	r3, r3, #0
 800527e:	607b      	str	r3, [r7, #4]
 8005280:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005284:	f04f 0300 	mov.w	r3, #0
 8005288:	e9d7 0100 	ldrd	r0, r1, [r7]
 800528c:	f7fb fbbe 	bl	8000a0c <__aeabi_ldivmod>
 8005290:	4602      	mov	r2, r0
 8005292:	460b      	mov	r3, r1
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	fb92 f3f3 	sdiv	r3, r2, r3
 800529a:	b2db      	uxtb	r3, r3
 800529c:	3305      	adds	r3, #5
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	4b0b      	ldr	r3, [pc, #44]	@ (80052d0 <calcBcnRxWindowFromMillis+0x108>)
 80052a2:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
	LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks
 80052a6:	4b0a      	ldr	r3, [pc, #40]	@ (80052d0 <calcBcnRxWindowFromMillis+0x108>)
 80052a8:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80052ac:	f503 127a 	add.w	r2, r3, #4096000	@ 0x3e8000
			- (LMIC.bcnRxsyms - PAMBL_SYMS) * hsym;
 80052b0:	4b07      	ldr	r3, [pc, #28]	@ (80052d0 <calcBcnRxWindowFromMillis+0x108>)
 80052b2:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 80052b6:	3b08      	subs	r3, #8
 80052b8:	6979      	ldr	r1, [r7, #20]
 80052ba:	fb01 f303 	mul.w	r3, r1, r3
 80052be:	1ad3      	subs	r3, r2, r3
	LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks
 80052c0:	4a03      	ldr	r2, [pc, #12]	@ (80052d0 <calcBcnRxWindowFromMillis+0x108>)
 80052c2:	f8c2 318c 	str.w	r3, [r2, #396]	@ 0x18c
}
 80052c6:	bf00      	nop
 80052c8:	371c      	adds	r7, #28
 80052ca:	46bd      	mov	sp, r7
 80052cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052d0:	200002e0 	.word	0x200002e0

080052d4 <rxschedInit>:

// Setup scheduled RX window (ping/multicast slot)
static void rxschedInit(xref2rxsched_t rxsched)
{
 80052d4:	b590      	push	{r4, r7, lr}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
	os_clearMem(AESkey, 16);
 80052dc:	2210      	movs	r2, #16
 80052de:	2100      	movs	r1, #0
 80052e0:	482e      	ldr	r0, [pc, #184]	@ (800539c <rxschedInit+0xc8>)
 80052e2:	f009 fa56 	bl	800e792 <memset>
	os_clearMem(LMIC.frame + 8, 8);
 80052e6:	4b2e      	ldr	r3, [pc, #184]	@ (80053a0 <rxschedInit+0xcc>)
 80052e8:	2208      	movs	r2, #8
 80052ea:	2100      	movs	r1, #0
 80052ec:	4618      	mov	r0, r3
 80052ee:	f009 fa50 	bl	800e792 <memset>
	os_wlsbf4(LMIC.frame, LMIC.bcninfo.time);
 80052f2:	4b2c      	ldr	r3, [pc, #176]	@ (80053a4 <rxschedInit+0xd0>)
 80052f4:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 80052f8:	4619      	mov	r1, r3
 80052fa:	482b      	ldr	r0, [pc, #172]	@ (80053a8 <rxschedInit+0xd4>)
 80052fc:	f7ff fc71 	bl	8004be2 <os_wlsbf4>
	os_wlsbf4(LMIC.frame + 4, LMIC.devaddr);
 8005300:	4a2a      	ldr	r2, [pc, #168]	@ (80053ac <rxschedInit+0xd8>)
 8005302:	4b28      	ldr	r3, [pc, #160]	@ (80053a4 <rxschedInit+0xd0>)
 8005304:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005308:	4619      	mov	r1, r3
 800530a:	4610      	mov	r0, r2
 800530c:	f7ff fc69 	bl	8004be2 <os_wlsbf4>
	os_aes(AES_ENC, LMIC.frame, 16);
 8005310:	2210      	movs	r2, #16
 8005312:	4925      	ldr	r1, [pc, #148]	@ (80053a8 <rxschedInit+0xd4>)
 8005314:	2000      	movs	r0, #0
 8005316:	f7fb fe8f 	bl	8001038 <os_aes>
	u1_t intvExp = rxsched->intvExp;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	785b      	ldrb	r3, [r3, #1]
 800531e:	73fb      	strb	r3, [r7, #15]
	ostime_t off = os_rlsbf2(LMIC.frame) & (0x0FFF >> (7 - intvExp)); // random offset (slot units)
 8005320:	4821      	ldr	r0, [pc, #132]	@ (80053a8 <rxschedInit+0xd4>)
 8005322:	f7ff fbf8 	bl	8004b16 <os_rlsbf2>
 8005326:	4603      	mov	r3, r0
 8005328:	4619      	mov	r1, r3
 800532a:	7bfb      	ldrb	r3, [r7, #15]
 800532c:	f1c3 0307 	rsb	r3, r3, #7
 8005330:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8005334:	fa42 f303 	asr.w	r3, r2, r3
 8005338:	400b      	ands	r3, r1
 800533a:	60bb      	str	r3, [r7, #8]
	rxsched->rxbase = (LMIC.bcninfo.txtime +
 800533c:	4b19      	ldr	r3, [pc, #100]	@ (80053a4 <rxschedInit+0xd0>)
 800533e:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
	BCN_RESERVE_osticks + ms2osticks(BCN_SLOT_SPAN_ms * off)); // random offset osticks
 8005342:	4619      	mov	r1, r3
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	4613      	mov	r3, r2
 8005348:	011b      	lsls	r3, r3, #4
 800534a:	1a9b      	subs	r3, r3, r2
 800534c:	019b      	lsls	r3, r3, #6
 800534e:	440b      	add	r3, r1
 8005350:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 8005354:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005358:	461a      	mov	r2, r3
	rxsched->rxbase = (LMIC.bcninfo.txtime +
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	605a      	str	r2, [r3, #4]
	rxsched->slot = 0;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	709a      	strb	r2, [r3, #2]
	rxsched->rxtime = rxsched->rxbase
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685c      	ldr	r4, [r3, #4]
			- calcRxWindow(/*secs BCN_RESERVE*/2 + (1 << intvExp), rxsched->dr);
 8005368:	7bfb      	ldrb	r3, [r7, #15]
 800536a:	2201      	movs	r2, #1
 800536c:	fa02 f303 	lsl.w	r3, r2, r3
 8005370:	b2db      	uxtb	r3, r3
 8005372:	3302      	adds	r3, #2
 8005374:	b2da      	uxtb	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	4619      	mov	r1, r3
 800537c:	4610      	mov	r0, r2
 800537e:	f7ff fecf 	bl	8005120 <calcRxWindow>
 8005382:	4603      	mov	r3, r0
 8005384:	1ae2      	subs	r2, r4, r3
	rxsched->rxtime = rxsched->rxbase
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	609a      	str	r2, [r3, #8]
	rxsched->rxsyms = LMIC.rxsyms;
 800538a:	4b06      	ldr	r3, [pc, #24]	@ (80053a4 <rxschedInit+0xd0>)
 800538c:	7c1a      	ldrb	r2, [r3, #16]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	70da      	strb	r2, [r3, #3]
}
 8005392:	bf00      	nop
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	bd90      	pop	{r4, r7, pc}
 800539a:	bf00      	nop
 800539c:	200000f8 	.word	0x200000f8
 80053a0:	20000430 	.word	0x20000430
 80053a4:	200002e0 	.word	0x200002e0
 80053a8:	20000428 	.word	0x20000428
 80053ac:	2000042c 	.word	0x2000042c

080053b0 <rxschedNext>:

static bit_t rxschedNext(xref2rxsched_t rxsched, ostime_t cando)
{
 80053b0:	b590      	push	{r4, r7, lr}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
	again: if (rxsched->rxtime - cando >= 0)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689a      	ldr	r2, [r3, #8]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	db01      	blt.n	80053ca <rxschedNext+0x1a>
		return 1;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e03a      	b.n	8005440 <rxschedNext+0x90>
	u1_t slot;
	if ((slot = rxsched->slot) >= 128)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	789b      	ldrb	r3, [r3, #2]
 80053ce:	73fb      	strb	r3, [r7, #15]
 80053d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	da01      	bge.n	80053dc <rxschedNext+0x2c>
		return 0;
 80053d8:	2300      	movs	r3, #0
 80053da:	e031      	b.n	8005440 <rxschedNext+0x90>
	u1_t intv = 1 << rxsched->intvExp;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	785b      	ldrb	r3, [r3, #1]
 80053e0:	461a      	mov	r2, r3
 80053e2:	2301      	movs	r3, #1
 80053e4:	4093      	lsls	r3, r2
 80053e6:	73bb      	strb	r3, [r7, #14]
	if ((rxsched->slot = (slot += (intv))) >= 128)
 80053e8:	7bfa      	ldrb	r2, [r7, #15]
 80053ea:	7bbb      	ldrb	r3, [r7, #14]
 80053ec:	4413      	add	r3, r2
 80053ee:	73fb      	strb	r3, [r7, #15]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	7bfa      	ldrb	r2, [r7, #15]
 80053f4:	709a      	strb	r2, [r3, #2]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	789b      	ldrb	r3, [r3, #2]
 80053fa:	b25b      	sxtb	r3, r3
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	da01      	bge.n	8005404 <rxschedNext+0x54>
		return 0;
 8005400:	2300      	movs	r3, #0
 8005402:	e01d      	b.n	8005440 <rxschedNext+0x90>
	rxsched->rxtime = rxsched->rxbase
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6859      	ldr	r1, [r3, #4]
			+ ((BCN_WINDOW_osticks * (ostime_t) slot) >> BCN_INTV_exp)
 8005408:	7bfa      	ldrb	r2, [r7, #15]
 800540a:	4613      	mov	r3, r2
 800540c:	011b      	lsls	r3, r3, #4
 800540e:	1a9b      	subs	r3, r3, r2
 8005410:	049b      	lsls	r3, r3, #18
 8005412:	11db      	asrs	r3, r3, #7
 8005414:	18cc      	adds	r4, r1, r3
			- calcRxWindow(/*secs BCN_RESERVE*/2 + slot + intv, rxsched->dr);
 8005416:	7bfa      	ldrb	r2, [r7, #15]
 8005418:	7bbb      	ldrb	r3, [r7, #14]
 800541a:	4413      	add	r3, r2
 800541c:	b2db      	uxtb	r3, r3
 800541e:	3302      	adds	r3, #2
 8005420:	b2da      	uxtb	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	4619      	mov	r1, r3
 8005428:	4610      	mov	r0, r2
 800542a:	f7ff fe79 	bl	8005120 <calcRxWindow>
 800542e:	4603      	mov	r3, r0
 8005430:	1ae2      	subs	r2, r4, r3
	rxsched->rxtime = rxsched->rxbase
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	609a      	str	r2, [r3, #8]
	rxsched->rxsyms = LMIC.rxsyms;
 8005436:	4b04      	ldr	r3, [pc, #16]	@ (8005448 <rxschedNext+0x98>)
 8005438:	7c1a      	ldrb	r2, [r3, #16]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	70da      	strb	r2, [r3, #3]
	goto again;
 800543e:	e7bc      	b.n	80053ba <rxschedNext+0xa>
}
 8005440:	4618      	mov	r0, r3
 8005442:	3714      	adds	r7, #20
 8005444:	46bd      	mov	sp, r7
 8005446:	bd90      	pop	{r4, r7, pc}
 8005448:	200002e0 	.word	0x200002e0

0800544c <rndDelay>:

static ostime_t rndDelay(u1_t secSpan)
{
 800544c:	b590      	push	{r4, r7, lr}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	4603      	mov	r3, r0
 8005454:	71fb      	strb	r3, [r7, #7]
	u2_t r = os_getRndU2();
 8005456:	f003 fac1 	bl	80089dc <radio_rand1>
 800545a:	4603      	mov	r3, r0
 800545c:	021b      	lsls	r3, r3, #8
 800545e:	b21c      	sxth	r4, r3
 8005460:	f003 fabc 	bl	80089dc <radio_rand1>
 8005464:	4603      	mov	r3, r0
 8005466:	b21b      	sxth	r3, r3
 8005468:	4323      	orrs	r3, r4
 800546a:	b21b      	sxth	r3, r3
 800546c:	817b      	strh	r3, [r7, #10]
	ostime_t delay = r;
 800546e:	897b      	ldrh	r3, [r7, #10]
 8005470:	60fb      	str	r3, [r7, #12]
	if (delay > OSTICKS_PER_SEC)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8005478:	dd0b      	ble.n	8005492 <rndDelay+0x46>
		delay = r % (u2_t) OSTICKS_PER_SEC;
 800547a:	897b      	ldrh	r3, [r7, #10]
 800547c:	4a11      	ldr	r2, [pc, #68]	@ (80054c4 <rndDelay+0x78>)
 800547e:	fba2 1203 	umull	r1, r2, r2, r3
 8005482:	0ad2      	lsrs	r2, r2, #11
 8005484:	f44f 41fa 	mov.w	r1, #32000	@ 0x7d00
 8005488:	fb01 f202 	mul.w	r2, r1, r2
 800548c:	1a9b      	subs	r3, r3, r2
 800548e:	b29b      	uxth	r3, r3
 8005490:	60fb      	str	r3, [r7, #12]
	if (secSpan > 0)
 8005492:	79fb      	ldrb	r3, [r7, #7]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d010      	beq.n	80054ba <rndDelay+0x6e>
		delay += ((u1_t) r % secSpan) * OSTICKS_PER_SEC;
 8005498:	897b      	ldrh	r3, [r7, #10]
 800549a:	b2db      	uxtb	r3, r3
 800549c:	79fa      	ldrb	r2, [r7, #7]
 800549e:	fbb3 f1f2 	udiv	r1, r3, r2
 80054a2:	fb01 f202 	mul.w	r2, r1, r2
 80054a6:	1a9b      	subs	r3, r3, r2
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	461a      	mov	r2, r3
 80054ac:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80054b0:	fb02 f303 	mul.w	r3, r2, r3
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4413      	add	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]
	return delay;
 80054ba:	68fb      	ldr	r3, [r7, #12]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3714      	adds	r7, #20
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd90      	pop	{r4, r7, pc}
 80054c4:	10624dd3 	.word	0x10624dd3

080054c8 <txDelay>:

static void txDelay(ostime_t reftime, u1_t secSpan)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	460b      	mov	r3, r1
 80054d2:	70fb      	strb	r3, [r7, #3]
	reftime += rndDelay(secSpan);
 80054d4:	78fb      	ldrb	r3, [r7, #3]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7ff ffb8 	bl	800544c <rndDelay>
 80054dc:	4602      	mov	r2, r0
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4413      	add	r3, r2
 80054e2:	607b      	str	r3, [r7, #4]
	if (LMIC.globalDutyRate == 0 || (reftime - LMIC.globalDutyAvail) > 0) {
 80054e4:	4b0e      	ldr	r3, [pc, #56]	@ (8005520 <txDelay+0x58>)
 80054e6:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d006      	beq.n	80054fc <txDelay+0x34>
 80054ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005520 <txDelay+0x58>)
 80054f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	dd0c      	ble.n	8005516 <txDelay+0x4e>
		LMIC.globalDutyAvail = reftime;
 80054fc:	4a08      	ldr	r2, [pc, #32]	@ (8005520 <txDelay+0x58>)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
		LMIC.opmode |= OP_RNDTX;
 8005504:	4b06      	ldr	r3, [pc, #24]	@ (8005520 <txDelay+0x58>)
 8005506:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800550a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800550e:	b29a      	uxth	r2, r3
 8005510:	4b03      	ldr	r3, [pc, #12]	@ (8005520 <txDelay+0x58>)
 8005512:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	}
}
 8005516:	bf00      	nop
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	200002e0 	.word	0x200002e0

08005524 <setDrJoin>:

static void setDrJoin(u1_t reason, u1_t dr)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	4603      	mov	r3, r0
 800552c:	460a      	mov	r2, r1
 800552e:	71fb      	strb	r3, [r7, #7]
 8005530:	4613      	mov	r3, r2
 8005532:	71bb      	strb	r3, [r7, #6]
					e_.deveui = MAIN::CDEV->getEui(),
					e_.dr = dr|DR_PAGE,
					e_.txpow = LMIC.adrTxPow,
					e_.prevdr = LMIC.datarate|DR_PAGE,
					e_.prevtxpow = LMIC.adrTxPow));
	LMIC.datarate = dr;
 8005534:	4a04      	ldr	r2, [pc, #16]	@ (8005548 <setDrJoin+0x24>)
 8005536:	79bb      	ldrb	r3, [r7, #6]
 8005538:	f882 30b0 	strb.w	r3, [r2, #176]	@ 0xb0
	DO_DEVDB(LMIC.datarate,datarate);
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr
 8005548:	200002e0 	.word	0x200002e0

0800554c <setDrTxpow>:

static void setDrTxpow(u1_t reason, u1_t dr, s1_t pow)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	4603      	mov	r3, r0
 8005554:	71fb      	strb	r3, [r7, #7]
 8005556:	460b      	mov	r3, r1
 8005558:	71bb      	strb	r3, [r7, #6]
 800555a:	4613      	mov	r3, r2
 800555c:	717b      	strb	r3, [r7, #5]
					e_.dr = dr|DR_PAGE,
					e_.txpow = pow,
					e_.prevdr = LMIC.datarate|DR_PAGE,
					e_.prevtxpow = LMIC.adrTxPow));

	if (pow != KEEP_TXPOW)
 800555e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005562:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 8005566:	d003      	beq.n	8005570 <setDrTxpow+0x24>
		LMIC.adrTxPow = pow;
 8005568:	4a0e      	ldr	r2, [pc, #56]	@ (80055a4 <setDrTxpow+0x58>)
 800556a:	797b      	ldrb	r3, [r7, #5]
 800556c:	f882 30af 	strb.w	r3, [r2, #175]	@ 0xaf
	if (LMIC.datarate != dr) {
 8005570:	4b0c      	ldr	r3, [pc, #48]	@ (80055a4 <setDrTxpow+0x58>)
 8005572:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8005576:	79ba      	ldrb	r2, [r7, #6]
 8005578:	429a      	cmp	r2, r3
 800557a:	d00c      	beq.n	8005596 <setDrTxpow+0x4a>
		LMIC.datarate = dr;
 800557c:	4a09      	ldr	r2, [pc, #36]	@ (80055a4 <setDrTxpow+0x58>)
 800557e:	79bb      	ldrb	r3, [r7, #6]
 8005580:	f882 30b0 	strb.w	r3, [r2, #176]	@ 0xb0
		DO_DEVDB(LMIC.datarate,datarate);
		LMIC.opmode |= OP_NEXTCHNL;
 8005584:	4b07      	ldr	r3, [pc, #28]	@ (80055a4 <setDrTxpow+0x58>)
 8005586:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800558a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800558e:	b29a      	uxth	r2, r3
 8005590:	4b04      	ldr	r3, [pc, #16]	@ (80055a4 <setDrTxpow+0x58>)
 8005592:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	}
}
 8005596:	bf00      	nop
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	200002e0 	.word	0x200002e0

080055a8 <initDefaultChannels>:
		// Default operational frequencies
		EU868_F1 | BAND_CENTI, EU868_F2 | BAND_CENTI, EU868_F3 | BAND_CENTI,
		EU868_F4 | BAND_MILLI, EU868_F5 | BAND_MILLI, EU868_F6 | BAND_DECI };

static void initDefaultChannels(bit_t join)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	4603      	mov	r3, r0
 80055b0:	71fb      	strb	r3, [r7, #7]
	os_clearMem(&LMIC.channelFreq, sizeof(LMIC.channelFreq));
 80055b2:	2240      	movs	r2, #64	@ 0x40
 80055b4:	2100      	movs	r1, #0
 80055b6:	483a      	ldr	r0, [pc, #232]	@ (80056a0 <initDefaultChannels+0xf8>)
 80055b8:	f009 f8eb 	bl	800e792 <memset>
	os_clearMem(&LMIC.channelDrMap, sizeof(LMIC.channelDrMap));
 80055bc:	2220      	movs	r2, #32
 80055be:	2100      	movs	r1, #0
 80055c0:	4838      	ldr	r0, [pc, #224]	@ (80056a4 <initDefaultChannels+0xfc>)
 80055c2:	f009 f8e6 	bl	800e792 <memset>
	os_clearMem(&LMIC.bands, sizeof(LMIC.bands));
 80055c6:	2220      	movs	r2, #32
 80055c8:	2100      	movs	r1, #0
 80055ca:	4837      	ldr	r0, [pc, #220]	@ (80056a8 <initDefaultChannels+0x100>)
 80055cc:	f009 f8e1 	bl	800e792 <memset>

	LMIC.channelMap = (1 << NUM_DEFAULT_CHANNELS) - 1;
 80055d0:	4b36      	ldr	r3, [pc, #216]	@ (80056ac <initDefaultChannels+0x104>)
 80055d2:	223f      	movs	r2, #63	@ 0x3f
 80055d4:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	u1_t su = join ? 0 : NUM_DEFAULT_CHANNELS;
 80055d8:	79fb      	ldrb	r3, [r7, #7]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <initDefaultChannels+0x3a>
 80055de:	2300      	movs	r3, #0
 80055e0:	e000      	b.n	80055e4 <initDefaultChannels+0x3c>
 80055e2:	2306      	movs	r3, #6
 80055e4:	73fb      	strb	r3, [r7, #15]
	for (u1_t fu = 0; fu < NUM_DEFAULT_CHANNELS; fu++, su++) {
 80055e6:	2300      	movs	r3, #0
 80055e8:	73bb      	strb	r3, [r7, #14]
 80055ea:	e014      	b.n	8005616 <initDefaultChannels+0x6e>
		LMIC.channelFreq[fu] = iniChannelFreq[su];
 80055ec:	7bfa      	ldrb	r2, [r7, #15]
 80055ee:	7bbb      	ldrb	r3, [r7, #14]
 80055f0:	492f      	ldr	r1, [pc, #188]	@ (80056b0 <initDefaultChannels+0x108>)
 80055f2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80055f6:	492d      	ldr	r1, [pc, #180]	@ (80056ac <initDefaultChannels+0x104>)
 80055f8:	3310      	adds	r3, #16
 80055fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		LMIC.channelDrMap[fu] = DR_RANGE_MAP(DR_SF12, DR_SF7);
 80055fe:	7bbb      	ldrb	r3, [r7, #14]
 8005600:	4a2a      	ldr	r2, [pc, #168]	@ (80056ac <initDefaultChannels+0x104>)
 8005602:	3340      	adds	r3, #64	@ 0x40
 8005604:	213f      	movs	r1, #63	@ 0x3f
 8005606:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (u1_t fu = 0; fu < NUM_DEFAULT_CHANNELS; fu++, su++) {
 800560a:	7bbb      	ldrb	r3, [r7, #14]
 800560c:	3301      	adds	r3, #1
 800560e:	73bb      	strb	r3, [r7, #14]
 8005610:	7bfb      	ldrb	r3, [r7, #15]
 8005612:	3301      	adds	r3, #1
 8005614:	73fb      	strb	r3, [r7, #15]
 8005616:	7bbb      	ldrb	r3, [r7, #14]
 8005618:	2b05      	cmp	r3, #5
 800561a:	d9e7      	bls.n	80055ec <initDefaultChannels+0x44>
//    if( !join ) {
//        LMIC.channelDrMap[5] = DR_RANGE_MAP(DR_SF12,DR_SF7);
//        LMIC.channelDrMap[1] = DR_RANGE_MAP(DR_SF12,DR_FSK);
//    }

	LMIC.bands[BAND_MILLI].txcap = 1000;  // 0.1%
 800561c:	4b23      	ldr	r3, [pc, #140]	@ (80056ac <initDefaultChannels+0x104>)
 800561e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005622:	841a      	strh	r2, [r3, #32]
	LMIC.bands[BAND_MILLI].txpow = 14;
 8005624:	4b21      	ldr	r3, [pc, #132]	@ (80056ac <initDefaultChannels+0x104>)
 8005626:	220e      	movs	r2, #14
 8005628:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	LMIC.bands[BAND_MILLI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 800562c:	f003 f9d6 	bl	80089dc <radio_rand1>
 8005630:	4603      	mov	r3, r0
 8005632:	f003 030f 	and.w	r3, r3, #15
 8005636:	b2da      	uxtb	r2, r3
 8005638:	4b1c      	ldr	r3, [pc, #112]	@ (80056ac <initDefaultChannels+0x104>)
 800563a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	LMIC.bands[BAND_CENTI].txcap = 100;   // 1%
 800563e:	4b1b      	ldr	r3, [pc, #108]	@ (80056ac <initDefaultChannels+0x104>)
 8005640:	2264      	movs	r2, #100	@ 0x64
 8005642:	851a      	strh	r2, [r3, #40]	@ 0x28
	LMIC.bands[BAND_CENTI].txpow = 14;
 8005644:	4b19      	ldr	r3, [pc, #100]	@ (80056ac <initDefaultChannels+0x104>)
 8005646:	220e      	movs	r2, #14
 8005648:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	LMIC.bands[BAND_CENTI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 800564c:	f003 f9c6 	bl	80089dc <radio_rand1>
 8005650:	4603      	mov	r3, r0
 8005652:	f003 030f 	and.w	r3, r3, #15
 8005656:	b2da      	uxtb	r2, r3
 8005658:	4b14      	ldr	r3, [pc, #80]	@ (80056ac <initDefaultChannels+0x104>)
 800565a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	LMIC.bands[BAND_DECI].txcap = 10;    // 10%
 800565e:	4b13      	ldr	r3, [pc, #76]	@ (80056ac <initDefaultChannels+0x104>)
 8005660:	220a      	movs	r2, #10
 8005662:	861a      	strh	r2, [r3, #48]	@ 0x30
	LMIC.bands[BAND_DECI].txpow = 27;
 8005664:	4b11      	ldr	r3, [pc, #68]	@ (80056ac <initDefaultChannels+0x104>)
 8005666:	221b      	movs	r2, #27
 8005668:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
	LMIC.bands[BAND_DECI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 800566c:	f003 f9b6 	bl	80089dc <radio_rand1>
 8005670:	4603      	mov	r3, r0
 8005672:	f003 030f 	and.w	r3, r3, #15
 8005676:	b2da      	uxtb	r2, r3
 8005678:	4b0c      	ldr	r3, [pc, #48]	@ (80056ac <initDefaultChannels+0x104>)
 800567a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
	LMIC.bands[BAND_MILLI].avail = LMIC.bands[BAND_CENTI].avail =
			LMIC.bands[BAND_DECI].avail = os_getTime();
 800567e:	f002 fc83 	bl	8007f88 <os_getTime>
 8005682:	4603      	mov	r3, r0
 8005684:	4a09      	ldr	r2, [pc, #36]	@ (80056ac <initDefaultChannels+0x104>)
 8005686:	6353      	str	r3, [r2, #52]	@ 0x34
 8005688:	4b08      	ldr	r3, [pc, #32]	@ (80056ac <initDefaultChannels+0x104>)
 800568a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
	LMIC.bands[BAND_MILLI].avail = LMIC.bands[BAND_CENTI].avail =
 800568c:	4a07      	ldr	r2, [pc, #28]	@ (80056ac <initDefaultChannels+0x104>)
 800568e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005690:	4b06      	ldr	r3, [pc, #24]	@ (80056ac <initDefaultChannels+0x104>)
 8005692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005694:	4a05      	ldr	r2, [pc, #20]	@ (80056ac <initDefaultChannels+0x104>)
 8005696:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8005698:	bf00      	nop
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	20000320 	.word	0x20000320
 80056a4:	20000360 	.word	0x20000360
 80056a8:	20000300 	.word	0x20000300
 80056ac:	200002e0 	.word	0x200002e0
 80056b0:	0800fce0 	.word	0x0800fce0

080056b4 <LMIC_setupChannel>:
	b->lastchnl = os_getRndU1() % MAX_CHANNELS;
	return 1;
}

bit_t LMIC_setupChannel(u1_t chidx, u4_t freq, u2_t drmap, s1_t band)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6039      	str	r1, [r7, #0]
 80056bc:	4611      	mov	r1, r2
 80056be:	461a      	mov	r2, r3
 80056c0:	4603      	mov	r3, r0
 80056c2:	71fb      	strb	r3, [r7, #7]
 80056c4:	460b      	mov	r3, r1
 80056c6:	80bb      	strh	r3, [r7, #4]
 80056c8:	4613      	mov	r3, r2
 80056ca:	71bb      	strb	r3, [r7, #6]
	if (chidx >= MAX_CHANNELS)
 80056cc:	79fb      	ldrb	r3, [r7, #7]
 80056ce:	2b0f      	cmp	r3, #15
 80056d0:	d901      	bls.n	80056d6 <LMIC_setupChannel+0x22>
		return 0;
 80056d2:	2300      	movs	r3, #0
 80056d4:	e054      	b.n	8005780 <LMIC_setupChannel+0xcc>
	if (band == -1) {
 80056d6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80056da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056de:	d121      	bne.n	8005724 <LMIC_setupChannel+0x70>
		if (freq >= 869400000 && freq <= 869650000)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	4a2a      	ldr	r2, [pc, #168]	@ (800578c <LMIC_setupChannel+0xd8>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d908      	bls.n	80056fa <LMIC_setupChannel+0x46>
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	4a29      	ldr	r2, [pc, #164]	@ (8005790 <LMIC_setupChannel+0xdc>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d804      	bhi.n	80056fa <LMIC_setupChannel+0x46>
			freq |= BAND_DECI;   // 10% 27dBm
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	f043 0302 	orr.w	r3, r3, #2
 80056f6:	603b      	str	r3, [r7, #0]
 80056f8:	e021      	b.n	800573e <LMIC_setupChannel+0x8a>
		else if ((freq >= 868000000 && freq <= 868600000)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	4a25      	ldr	r2, [pc, #148]	@ (8005794 <LMIC_setupChannel+0xe0>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d903      	bls.n	800570a <LMIC_setupChannel+0x56>
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	4a24      	ldr	r2, [pc, #144]	@ (8005798 <LMIC_setupChannel+0xe4>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d907      	bls.n	800571a <LMIC_setupChannel+0x66>
				|| (freq >= 869700000 && freq <= 870000000))
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	4a23      	ldr	r2, [pc, #140]	@ (800579c <LMIC_setupChannel+0xe8>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d315      	bcc.n	800573e <LMIC_setupChannel+0x8a>
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	4a22      	ldr	r2, [pc, #136]	@ (80057a0 <LMIC_setupChannel+0xec>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d811      	bhi.n	800573e <LMIC_setupChannel+0x8a>
			freq |= BAND_CENTI;  // 1% 14dBm 
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	f043 0301 	orr.w	r3, r3, #1
 8005720:	603b      	str	r3, [r7, #0]
 8005722:	e00c      	b.n	800573e <LMIC_setupChannel+0x8a>
		else
			freq |= BAND_MILLI;  // 0.1% 14dBm
	} else {
		if (band > BAND_AUX)
 8005724:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005728:	2b03      	cmp	r3, #3
 800572a:	dd01      	ble.n	8005730 <LMIC_setupChannel+0x7c>
			return 0;
 800572c:	2300      	movs	r3, #0
 800572e:	e027      	b.n	8005780 <LMIC_setupChannel+0xcc>
		freq = (freq & ~3) | band;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	f023 0203 	bic.w	r2, r3, #3
 8005736:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800573a:	4313      	orrs	r3, r2
 800573c:	603b      	str	r3, [r7, #0]
	}
	LMIC.channelFreq[chidx] = freq;
 800573e:	79fb      	ldrb	r3, [r7, #7]
 8005740:	4918      	ldr	r1, [pc, #96]	@ (80057a4 <LMIC_setupChannel+0xf0>)
 8005742:	3310      	adds	r3, #16
 8005744:	683a      	ldr	r2, [r7, #0]
 8005746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	LMIC.channelDrMap[chidx] =
 800574a:	88bb      	ldrh	r3, [r7, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d001      	beq.n	8005754 <LMIC_setupChannel+0xa0>
 8005750:	88ba      	ldrh	r2, [r7, #4]
 8005752:	e000      	b.n	8005756 <LMIC_setupChannel+0xa2>
 8005754:	223f      	movs	r2, #63	@ 0x3f
 8005756:	79fb      	ldrb	r3, [r7, #7]
 8005758:	4912      	ldr	r1, [pc, #72]	@ (80057a4 <LMIC_setupChannel+0xf0>)
 800575a:	3340      	adds	r3, #64	@ 0x40
 800575c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			drmap == 0 ? DR_RANGE_MAP(DR_SF12, DR_SF7) : drmap;
	LMIC.channelMap |= 1 << chidx;  // enabled right away
 8005760:	4b10      	ldr	r3, [pc, #64]	@ (80057a4 <LMIC_setupChannel+0xf0>)
 8005762:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8005766:	b21a      	sxth	r2, r3
 8005768:	79fb      	ldrb	r3, [r7, #7]
 800576a:	2101      	movs	r1, #1
 800576c:	fa01 f303 	lsl.w	r3, r1, r3
 8005770:	b21b      	sxth	r3, r3
 8005772:	4313      	orrs	r3, r2
 8005774:	b21b      	sxth	r3, r3
 8005776:	b29a      	uxth	r2, r3
 8005778:	4b0a      	ldr	r3, [pc, #40]	@ (80057a4 <LMIC_setupChannel+0xf0>)
 800577a:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	return 1;
 800577e:	2301      	movs	r3, #1
}
 8005780:	4618      	mov	r0, r3
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	33d1fdbf 	.word	0x33d1fdbf
 8005790:	33d5ce50 	.word	0x33d5ce50
 8005794:	33bca0ff 	.word	0x33bca0ff
 8005798:	33c5c8c0 	.word	0x33c5c8c0
 800579c:	33d691a0 	.word	0x33d691a0
 80057a0:	33db2580 	.word	0x33db2580
 80057a4:	200002e0 	.word	0x200002e0

080057a8 <convFreq>:
	LMIC.channelDrMap[channel] = 0;
	LMIC.channelMap &= ~(1 << channel);
}

static u4_t convFreq(xref2u1_t ptr)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
	u4_t freq = (os_rlsbf4(ptr - 1) >> 8) * 100;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	3b01      	subs	r3, #1
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7ff f9c3 	bl	8004b40 <os_rlsbf4>
 80057ba:	4603      	mov	r3, r0
 80057bc:	0a1b      	lsrs	r3, r3, #8
 80057be:	2264      	movs	r2, #100	@ 0x64
 80057c0:	fb02 f303 	mul.w	r3, r2, r3
 80057c4:	60fb      	str	r3, [r7, #12]
	if (freq < EU868_FREQ_MIN || freq > EU868_FREQ_MAX)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	4a06      	ldr	r2, [pc, #24]	@ (80057e4 <convFreq+0x3c>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d303      	bcc.n	80057d6 <convFreq+0x2e>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	4a05      	ldr	r2, [pc, #20]	@ (80057e8 <convFreq+0x40>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d901      	bls.n	80057da <convFreq+0x32>
		freq = 0;
 80057d6:	2300      	movs	r3, #0
 80057d8:	60fb      	str	r3, [r7, #12]
	return freq;
 80057da:	68fb      	ldr	r3, [r7, #12]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	337055c0 	.word	0x337055c0
 80057e8:	33db2580 	.word	0x33db2580

080057ec <mapChannels>:

static u1_t mapChannels(u1_t chpage, u2_t chmap)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	4603      	mov	r3, r0
 80057f4:	460a      	mov	r2, r1
 80057f6:	71fb      	strb	r3, [r7, #7]
 80057f8:	4613      	mov	r3, r2
 80057fa:	80bb      	strh	r3, [r7, #4]
	// Bad page, disable all channel, enable non-existent
	if (chpage != 0 || chmap == 0 || (chmap & ~LMIC.channelMap) != 0)
 80057fc:	79fb      	ldrb	r3, [r7, #7]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10a      	bne.n	8005818 <mapChannels+0x2c>
 8005802:	88bb      	ldrh	r3, [r7, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d007      	beq.n	8005818 <mapChannels+0x2c>
 8005808:	88ba      	ldrh	r2, [r7, #4]
 800580a:	4b1c      	ldr	r3, [pc, #112]	@ (800587c <mapChannels+0x90>)
 800580c:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8005810:	43db      	mvns	r3, r3
 8005812:	4013      	ands	r3, r2
 8005814:	2b00      	cmp	r3, #0
 8005816:	d001      	beq.n	800581c <mapChannels+0x30>
		return 0;  // illegal input
 8005818:	2300      	movs	r3, #0
 800581a:	e028      	b.n	800586e <mapChannels+0x82>
	for (u1_t chnl = 0; chnl < MAX_CHANNELS; chnl++) {
 800581c:	2300      	movs	r3, #0
 800581e:	73fb      	strb	r3, [r7, #15]
 8005820:	e01d      	b.n	800585e <mapChannels+0x72>
		if ((chmap & (1 << chnl)) != 0 && LMIC.channelFreq[chnl] == 0)
 8005822:	88ba      	ldrh	r2, [r7, #4]
 8005824:	7bfb      	ldrb	r3, [r7, #15]
 8005826:	fa42 f303 	asr.w	r3, r2, r3
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b00      	cmp	r3, #0
 8005830:	d012      	beq.n	8005858 <mapChannels+0x6c>
 8005832:	7bfb      	ldrb	r3, [r7, #15]
 8005834:	4a11      	ldr	r2, [pc, #68]	@ (800587c <mapChannels+0x90>)
 8005836:	3310      	adds	r3, #16
 8005838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10b      	bne.n	8005858 <mapChannels+0x6c>
			chmap &= ~(1 << chnl); // ignore - channel is not defined
 8005840:	7bfb      	ldrb	r3, [r7, #15]
 8005842:	2201      	movs	r2, #1
 8005844:	fa02 f303 	lsl.w	r3, r2, r3
 8005848:	b21b      	sxth	r3, r3
 800584a:	43db      	mvns	r3, r3
 800584c:	b21a      	sxth	r2, r3
 800584e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005852:	4013      	ands	r3, r2
 8005854:	b21b      	sxth	r3, r3
 8005856:	80bb      	strh	r3, [r7, #4]
	for (u1_t chnl = 0; chnl < MAX_CHANNELS; chnl++) {
 8005858:	7bfb      	ldrb	r3, [r7, #15]
 800585a:	3301      	adds	r3, #1
 800585c:	73fb      	strb	r3, [r7, #15]
 800585e:	7bfb      	ldrb	r3, [r7, #15]
 8005860:	2b0f      	cmp	r3, #15
 8005862:	d9de      	bls.n	8005822 <mapChannels+0x36>
	}
	LMIC.channelMap = chmap;
 8005864:	4a05      	ldr	r2, [pc, #20]	@ (800587c <mapChannels+0x90>)
 8005866:	88bb      	ldrh	r3, [r7, #4]
 8005868:	f8a2 30a0 	strh.w	r3, [r2, #160]	@ 0xa0
	return 1;
 800586c:	2301      	movs	r3, #1
}
 800586e:	4618      	mov	r0, r3
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	200002e0 	.word	0x200002e0

08005880 <updateTx>:

static void updateTx(ostime_t txbeg)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
	u4_t freq = LMIC.channelFreq[LMIC.txChnl];
 8005888:	4b21      	ldr	r3, [pc, #132]	@ (8005910 <updateTx+0x90>)
 800588a:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 800588e:	4a20      	ldr	r2, [pc, #128]	@ (8005910 <updateTx+0x90>)
 8005890:	3310      	adds	r3, #16
 8005892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005896:	617b      	str	r3, [r7, #20]
	// Update global/band specific duty cycle stats
	ostime_t airtime = calcAirTime(LMIC.rps, LMIC.dataLen);
 8005898:	4b1d      	ldr	r3, [pc, #116]	@ (8005910 <updateTx+0x90>)
 800589a:	89db      	ldrh	r3, [r3, #14]
 800589c:	4a1c      	ldr	r2, [pc, #112]	@ (8005910 <updateTx+0x90>)
 800589e:	f892 2147 	ldrb.w	r2, [r2, #327]	@ 0x147
 80058a2:	4611      	mov	r1, r2
 80058a4:	4618      	mov	r0, r3
 80058a6:	f7ff fba3 	bl	8004ff0 <calcAirTime>
 80058aa:	6138      	str	r0, [r7, #16]
	// Update channel/global duty cycle stats
	xref2band_t band = &LMIC.bands[freq & 0x3];
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f003 0303 	and.w	r3, r3, #3
 80058b2:	3304      	adds	r3, #4
 80058b4:	00db      	lsls	r3, r3, #3
 80058b6:	4a16      	ldr	r2, [pc, #88]	@ (8005910 <updateTx+0x90>)
 80058b8:	4413      	add	r3, r2
 80058ba:	60fb      	str	r3, [r7, #12]
	LMIC.freq = freq & ~(u4_t) 3;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	f023 0303 	bic.w	r3, r3, #3
 80058c2:	4a13      	ldr	r2, [pc, #76]	@ (8005910 <updateTx+0x90>)
 80058c4:	6093      	str	r3, [r2, #8]
	LMIC.txpow = band->txpow;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80058cc:	4b10      	ldr	r3, [pc, #64]	@ (8005910 <updateTx+0x90>)
 80058ce:	749a      	strb	r2, [r3, #18]
	band->avail = txbeg + airtime * band->txcap;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	881b      	ldrh	r3, [r3, #0]
 80058d4:	461a      	mov	r2, r3
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	fb03 f202 	mul.w	r2, r3, r2
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	441a      	add	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	605a      	str	r2, [r3, #4]
	if (LMIC.globalDutyRate != 0)
 80058e4:	4b0a      	ldr	r3, [pc, #40]	@ (8005910 <updateTx+0x90>)
 80058e6:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00b      	beq.n	8005906 <updateTx+0x86>
		LMIC.globalDutyAvail = txbeg + (airtime << LMIC.globalDutyRate);
 80058ee:	4b08      	ldr	r3, [pc, #32]	@ (8005910 <updateTx+0x90>)
 80058f0:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 80058f4:	461a      	mov	r2, r3
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	fa03 f202 	lsl.w	r2, r3, r2
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4413      	add	r3, r2
 8005900:	4a03      	ldr	r2, [pc, #12]	@ (8005910 <updateTx+0x90>)
 8005902:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
}
 8005906:	bf00      	nop
 8005908:	3718      	adds	r7, #24
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	200002e0 	.word	0x200002e0

08005914 <nextTx>:

static ostime_t nextTx(ostime_t now)
{
 8005914:	b480      	push	{r7}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
	u1_t bmap = 0xF;
 800591c:	230f      	movs	r3, #15
 800591e:	75fb      	strb	r3, [r7, #23]
	do {
		ostime_t mintime = now + /*10h*/36000 * OSTICKS_PER_SEC;
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	4b48      	ldr	r3, [pc, #288]	@ (8005a44 <nextTx+0x130>)
 8005924:	4413      	add	r3, r2
 8005926:	613b      	str	r3, [r7, #16]
		u1_t band = 0;
 8005928:	2300      	movs	r3, #0
 800592a:	73fb      	strb	r3, [r7, #15]
		for (u1_t bi = 0; bi < 4; bi++) {
 800592c:	2300      	movs	r3, #0
 800592e:	73bb      	strb	r3, [r7, #14]
 8005930:	e01d      	b.n	800596e <nextTx+0x5a>
			if ((bmap & (1 << bi)) && mintime - LMIC.bands[bi].avail > 0)
 8005932:	7dfa      	ldrb	r2, [r7, #23]
 8005934:	7bbb      	ldrb	r3, [r7, #14]
 8005936:	fa42 f303 	asr.w	r3, r2, r3
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	d012      	beq.n	8005968 <nextTx+0x54>
 8005942:	7bbb      	ldrb	r3, [r7, #14]
 8005944:	4a40      	ldr	r2, [pc, #256]	@ (8005a48 <nextTx+0x134>)
 8005946:	3304      	adds	r3, #4
 8005948:	00db      	lsls	r3, r3, #3
 800594a:	4413      	add	r3, r2
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b00      	cmp	r3, #0
 8005954:	dd08      	ble.n	8005968 <nextTx+0x54>
				mintime = LMIC.bands[band = bi].avail;
 8005956:	7bbb      	ldrb	r3, [r7, #14]
 8005958:	73fb      	strb	r3, [r7, #15]
 800595a:	7bfb      	ldrb	r3, [r7, #15]
 800595c:	4a3a      	ldr	r2, [pc, #232]	@ (8005a48 <nextTx+0x134>)
 800595e:	3304      	adds	r3, #4
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	4413      	add	r3, r2
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	613b      	str	r3, [r7, #16]
		for (u1_t bi = 0; bi < 4; bi++) {
 8005968:	7bbb      	ldrb	r3, [r7, #14]
 800596a:	3301      	adds	r3, #1
 800596c:	73bb      	strb	r3, [r7, #14]
 800596e:	7bbb      	ldrb	r3, [r7, #14]
 8005970:	2b03      	cmp	r3, #3
 8005972:	d9de      	bls.n	8005932 <nextTx+0x1e>
		}
		// Find next channel in given band
		u1_t chnl = LMIC.bands[band].lastchnl;
 8005974:	7bfb      	ldrb	r3, [r7, #15]
 8005976:	4a34      	ldr	r2, [pc, #208]	@ (8005a48 <nextTx+0x134>)
 8005978:	3304      	adds	r3, #4
 800597a:	00db      	lsls	r3, r3, #3
 800597c:	4413      	add	r3, r2
 800597e:	78db      	ldrb	r3, [r3, #3]
 8005980:	737b      	strb	r3, [r7, #13]
		for (u1_t ci = 0; ci < MAX_CHANNELS; ci++) {
 8005982:	2300      	movs	r3, #0
 8005984:	733b      	strb	r3, [r7, #12]
 8005986:	e042      	b.n	8005a0e <nextTx+0xfa>
			if ((chnl = (chnl + 1)) >= MAX_CHANNELS)
 8005988:	7b7b      	ldrb	r3, [r7, #13]
 800598a:	3301      	adds	r3, #1
 800598c:	737b      	strb	r3, [r7, #13]
 800598e:	7b7b      	ldrb	r3, [r7, #13]
 8005990:	2b0f      	cmp	r3, #15
 8005992:	d902      	bls.n	800599a <nextTx+0x86>
				chnl -= MAX_CHANNELS;
 8005994:	7b7b      	ldrb	r3, [r7, #13]
 8005996:	3b10      	subs	r3, #16
 8005998:	737b      	strb	r3, [r7, #13]
			if ((LMIC.channelMap & (1 << chnl)) != 0 &&  // channel enabled
 800599a:	4b2b      	ldr	r3, [pc, #172]	@ (8005a48 <nextTx+0x134>)
 800599c:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80059a0:	461a      	mov	r2, r3
 80059a2:	7b7b      	ldrb	r3, [r7, #13]
 80059a4:	fa42 f303 	asr.w	r3, r2, r3
 80059a8:	f003 0301 	and.w	r3, r3, #1
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d02b      	beq.n	8005a08 <nextTx+0xf4>
					(LMIC.channelDrMap[chnl] & (1 << (LMIC.datarate & 0xF)))
 80059b0:	7b7b      	ldrb	r3, [r7, #13]
 80059b2:	4a25      	ldr	r2, [pc, #148]	@ (8005a48 <nextTx+0x134>)
 80059b4:	3340      	adds	r3, #64	@ 0x40
 80059b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059ba:	461a      	mov	r2, r3
 80059bc:	4b22      	ldr	r3, [pc, #136]	@ (8005a48 <nextTx+0x134>)
 80059be:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80059c2:	f003 030f 	and.w	r3, r3, #15
							!= 0 && band == (LMIC.channelFreq[chnl] & 0x3)) { // in selected band
 80059c6:	fa42 f303 	asr.w	r3, r2, r3
 80059ca:	f003 0301 	and.w	r3, r3, #1
			if ((LMIC.channelMap & (1 << chnl)) != 0 &&  // channel enabled
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d01a      	beq.n	8005a08 <nextTx+0xf4>
							!= 0 && band == (LMIC.channelFreq[chnl] & 0x3)) { // in selected band
 80059d2:	7bfa      	ldrb	r2, [r7, #15]
 80059d4:	7b7b      	ldrb	r3, [r7, #13]
 80059d6:	491c      	ldr	r1, [pc, #112]	@ (8005a48 <nextTx+0x134>)
 80059d8:	3310      	adds	r3, #16
 80059da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80059de:	f003 0303 	and.w	r3, r3, #3
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d110      	bne.n	8005a08 <nextTx+0xf4>
				LMIC.txChnl = LMIC.bands[band].lastchnl = chnl;
 80059e6:	7bfa      	ldrb	r2, [r7, #15]
 80059e8:	4917      	ldr	r1, [pc, #92]	@ (8005a48 <nextTx+0x134>)
 80059ea:	1d13      	adds	r3, r2, #4
 80059ec:	00db      	lsls	r3, r3, #3
 80059ee:	440b      	add	r3, r1
 80059f0:	7b79      	ldrb	r1, [r7, #13]
 80059f2:	70d9      	strb	r1, [r3, #3]
 80059f4:	4914      	ldr	r1, [pc, #80]	@ (8005a48 <nextTx+0x134>)
 80059f6:	1d13      	adds	r3, r2, #4
 80059f8:	00db      	lsls	r3, r3, #3
 80059fa:	440b      	add	r3, r1
 80059fc:	78da      	ldrb	r2, [r3, #3]
 80059fe:	4b12      	ldr	r3, [pc, #72]	@ (8005a48 <nextTx+0x134>)
 8005a00:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
				return mintime;
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	e016      	b.n	8005a36 <nextTx+0x122>
		for (u1_t ci = 0; ci < MAX_CHANNELS; ci++) {
 8005a08:	7b3b      	ldrb	r3, [r7, #12]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	733b      	strb	r3, [r7, #12]
 8005a0e:	7b3b      	ldrb	r3, [r7, #12]
 8005a10:	2b0f      	cmp	r3, #15
 8005a12:	d9b9      	bls.n	8005988 <nextTx+0x74>
			}
		}
		if ((bmap &= ~(1 << band)) == 0) {
 8005a14:	7bfb      	ldrb	r3, [r7, #15]
 8005a16:	2201      	movs	r2, #1
 8005a18:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1c:	b25b      	sxtb	r3, r3
 8005a1e:	43db      	mvns	r3, r3
 8005a20:	b25a      	sxtb	r2, r3
 8005a22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a26:	4013      	ands	r3, r2
 8005a28:	b25b      	sxtb	r3, r3
 8005a2a:	75fb      	strb	r3, [r7, #23]
 8005a2c:	7dfb      	ldrb	r3, [r7, #23]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f47f af76 	bne.w	8005920 <nextTx+0xc>
			// No feasible channel  found!
			return mintime;
 8005a34:	693b      	ldr	r3, [r7, #16]
		}
	} while (1);
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	371c      	adds	r7, #28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	44aa2000 	.word	0x44aa2000
 8005a48:	200002e0 	.word	0x200002e0

08005a4c <setBcnRxParams>:

static void setBcnRxParams(void)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	af00      	add	r7, sp, #0
	LMIC.dataLen = 0;
 8005a50:	4b10      	ldr	r3, [pc, #64]	@ (8005a94 <setBcnRxParams+0x48>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
	LMIC.freq = LMIC.channelFreq[LMIC.bcnChnl] & ~(u4_t) 3;
 8005a58:	4b0e      	ldr	r3, [pc, #56]	@ (8005a94 <setBcnRxParams+0x48>)
 8005a5a:	f893 3188 	ldrb.w	r3, [r3, #392]	@ 0x188
 8005a5e:	4a0d      	ldr	r2, [pc, #52]	@ (8005a94 <setBcnRxParams+0x48>)
 8005a60:	3310      	adds	r3, #16
 8005a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a66:	f023 0303 	bic.w	r3, r3, #3
 8005a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8005a94 <setBcnRxParams+0x48>)
 8005a6c:	6093      	str	r3, [r2, #8]
	LMIC.rps = setIh(setNocrc(dndr2rps((dr_t) DR_BCN), 1), LEN_BCN);
 8005a6e:	2003      	movs	r0, #3
 8005a70:	f7fe fff6 	bl	8004a60 <dndr2rps>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2101      	movs	r1, #1
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7fe ffa2 	bl	80049c2 <setNocrc>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2111      	movs	r1, #17
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7fe ffc3 	bl	8004a0e <setIh>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	4b01      	ldr	r3, [pc, #4]	@ (8005a94 <setBcnRxParams+0x48>)
 8005a8e:	81da      	strh	r2, [r3, #14]
}
 8005a90:	bf00      	nop
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	200002e0 	.word	0x200002e0

08005a98 <initJoinLoop>:

#define setRx1Params() /*LMIC.freq/rps remain unchanged*/

static void initJoinLoop(void)
{
 8005a98:	b598      	push	{r3, r4, r7, lr}
 8005a9a:	af00      	add	r7, sp, #0
#if CFG_TxContinuousMode
  LMIC.txChnl = 0;
#else
	LMIC.txChnl = os_getRndU1() % NUM_DEFAULT_CHANNELS;
 8005a9c:	f002 ff9e 	bl	80089dc <radio_rand1>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	4b15      	ldr	r3, [pc, #84]	@ (8005afc <initJoinLoop+0x64>)
 8005aa6:	fba3 1302 	umull	r1, r3, r3, r2
 8005aaa:	0899      	lsrs	r1, r3, #2
 8005aac:	460b      	mov	r3, r1
 8005aae:	005b      	lsls	r3, r3, #1
 8005ab0:	440b      	add	r3, r1
 8005ab2:	005b      	lsls	r3, r3, #1
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	4b11      	ldr	r3, [pc, #68]	@ (8005b00 <initJoinLoop+0x68>)
 8005aba:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
#endif
	LMIC.adrTxPow = 14;
 8005abe:	4b10      	ldr	r3, [pc, #64]	@ (8005b00 <initJoinLoop+0x68>)
 8005ac0:	220e      	movs	r2, #14
 8005ac2:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf
	setDrJoin(DRCHG_SET, DR_SF7);
 8005ac6:	2105      	movs	r1, #5
 8005ac8:	2000      	movs	r0, #0
 8005aca:	f7ff fd2b 	bl	8005524 <setDrJoin>
	initDefaultChannels(1);
 8005ace:	2001      	movs	r0, #1
 8005ad0:	f7ff fd6a 	bl	80055a8 <initDefaultChannels>
	ASSERT((LMIC.opmode & OP_NEXTCHNL) == 0);
 8005ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8005b00 <initJoinLoop+0x68>)
 8005ad6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8005ada:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <initJoinLoop+0x4e>
 8005ae2:	f7fe fe71 	bl	80047c8 <hal_failed>
	LMIC.txend = LMIC.bands[BAND_MILLI].avail + rndDelay(8);
 8005ae6:	4b06      	ldr	r3, [pc, #24]	@ (8005b00 <initJoinLoop+0x68>)
 8005ae8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8005aea:	2008      	movs	r0, #8
 8005aec:	f7ff fcae 	bl	800544c <rndDelay>
 8005af0:	4603      	mov	r3, r0
 8005af2:	4423      	add	r3, r4
 8005af4:	4a02      	ldr	r2, [pc, #8]	@ (8005b00 <initJoinLoop+0x68>)
 8005af6:	6013      	str	r3, [r2, #0]
}
 8005af8:	bf00      	nop
 8005afa:	bd98      	pop	{r3, r4, r7, pc}
 8005afc:	aaaaaaab 	.word	0xaaaaaaab
 8005b00:	200002e0 	.word	0x200002e0

08005b04 <nextJoinState>:

static ostime_t nextJoinState(void)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
	u1_t failed = 0;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	71fb      	strb	r3, [r7, #7]

	// Try 869.x and then 864.x with same DR
	// If both fail try next lower datarate
	if (++LMIC.txChnl == NUM_DEFAULT_CHANNELS)
 8005b0e:	4b30      	ldr	r3, [pc, #192]	@ (8005bd0 <nextJoinState+0xcc>)
 8005b10:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8005b14:	3301      	adds	r3, #1
 8005b16:	b2da      	uxtb	r2, r3
 8005b18:	4b2d      	ldr	r3, [pc, #180]	@ (8005bd0 <nextJoinState+0xcc>)
 8005b1a:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
 8005b1e:	4b2c      	ldr	r3, [pc, #176]	@ (8005bd0 <nextJoinState+0xcc>)
 8005b20:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8005b24:	2b06      	cmp	r3, #6
 8005b26:	d103      	bne.n	8005b30 <nextJoinState+0x2c>
		LMIC.txChnl = 0;
 8005b28:	4b29      	ldr	r3, [pc, #164]	@ (8005bd0 <nextJoinState+0xcc>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
	if ((++LMIC.txCnt & 1) == 0) {
 8005b30:	4b27      	ldr	r3, [pc, #156]	@ (8005bd0 <nextJoinState+0xcc>)
 8005b32:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8005b36:	3301      	adds	r3, #1
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	4b25      	ldr	r3, [pc, #148]	@ (8005bd0 <nextJoinState+0xcc>)
 8005b3c:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
 8005b40:	4b23      	ldr	r3, [pc, #140]	@ (8005bd0 <nextJoinState+0xcc>)
 8005b42:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d112      	bne.n	8005b74 <nextJoinState+0x70>
		// Lower DR every 2nd try (having tried 868.x and 864.x with the same DR)
		if (LMIC.datarate == DR_SF12)
 8005b4e:	4b20      	ldr	r3, [pc, #128]	@ (8005bd0 <nextJoinState+0xcc>)
 8005b50:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d102      	bne.n	8005b5e <nextJoinState+0x5a>
			failed = 1; // we have tried all DR - signal EV_JOIN_FAILED
 8005b58:	2301      	movs	r3, #1
 8005b5a:	71fb      	strb	r3, [r7, #7]
 8005b5c:	e00a      	b.n	8005b74 <nextJoinState+0x70>
		else
			setDrJoin(DRCHG_NOJACC, decDR((dr_t) LMIC.datarate));
 8005b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8005bd0 <nextJoinState+0xcc>)
 8005b60:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7fe ff8f 	bl	8004a88 <decDR>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	2001      	movs	r0, #1
 8005b70:	f7ff fcd8 	bl	8005524 <setDrJoin>
	}
	// Clear NEXTCHNL because join state engine controls channel hopping
	LMIC.opmode &= ~OP_NEXTCHNL;
 8005b74:	4b16      	ldr	r3, [pc, #88]	@ (8005bd0 <nextJoinState+0xcc>)
 8005b76:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8005b7a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	4b13      	ldr	r3, [pc, #76]	@ (8005bd0 <nextJoinState+0xcc>)
 8005b82:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	// Move txend to randomize synchronized concurrent joins.
	// Duty cycle is based on txend.
	ostime_t time = os_getTime();
 8005b86:	f002 f9ff 	bl	8007f88 <os_getTime>
 8005b8a:	6038      	str	r0, [r7, #0]
	if (time - LMIC.bands[BAND_MILLI].avail < 0)
 8005b8c:	4b10      	ldr	r3, [pc, #64]	@ (8005bd0 <nextJoinState+0xcc>)
 8005b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b90:	683a      	ldr	r2, [r7, #0]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	da02      	bge.n	8005b9e <nextJoinState+0x9a>
		time = LMIC.bands[BAND_MILLI].avail;
 8005b98:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd0 <nextJoinState+0xcc>)
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9c:	603b      	str	r3, [r7, #0]
	// Avoid collision with JOIN ACCEPT @ SF12 being sent by GW (but we missed it)
			? DNW2_SAFETY_ZONE
			// Otherwise: randomize join (street lamp case):
			// SF12:255, SF11:127, .., SF7:8secs
			:
				DNW2_SAFETY_ZONE + rndDelay(255 >> LMIC.datarate));
 8005b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8005bd0 <nextJoinState+0xcc>)
 8005ba0:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	23ff      	movs	r3, #255	@ 0xff
 8005ba8:	4113      	asrs	r3, r2
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7ff fc4d 	bl	800544c <rndDelay>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	f503 33bb 	add.w	r3, r3, #95744	@ 0x17600
 8005bb8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
	LMIC.txend = time + (isTESTMODE()
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	4a03      	ldr	r2, [pc, #12]	@ (8005bd0 <nextJoinState+0xcc>)
 8005bc2:	6013      	str	r3, [r2, #0]
	// 1 - triggers EV_JOIN_FAILED event
	return failed;
 8005bc4:	79fb      	ldrb	r3, [r7, #7]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	200002e0 	.word	0x200002e0

08005bd4 <runEngineUpdate>:
#else
#error Unsupported frequency band!
#endif

static void runEngineUpdate(xref2osjob_t osjob)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
	engineUpdate();
 8005bdc:	f001 fcb6 	bl	800754c <engineUpdate>
}
 8005be0:	bf00      	nop
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <reportEvent>:

static void reportEvent(ev_t ev)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	4603      	mov	r3, r0
 8005bf0:	71fb      	strb	r3, [r7, #7]
	EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
					e_.eui = MAIN::CDEV->getEui(),
					e_.info = ev));
	ON_LMIC_EVENT(ev);
 8005bf2:	79fb      	ldrb	r3, [r7, #7]
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f002 f805 	bl	8007c04 <onEvent>
	engineUpdate();
 8005bfa:	f001 fca7 	bl	800754c <engineUpdate>
}
 8005bfe:	bf00      	nop
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <runReset>:

static void runReset(xref2osjob_t osjob)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b082      	sub	sp, #8
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
	// Disable session
	LMIC_reset();
 8005c0e:	f001 fe67 	bl	80078e0 <LMIC_reset>
	LMIC_startJoining();
 8005c12:	f001 fa0f 	bl	8007034 <LMIC_startJoining>
	reportEvent(EV_RESET);
 8005c16:	200c      	movs	r0, #12
 8005c18:	f7ff ffe6 	bl	8005be8 <reportEvent>
}
 8005c1c:	bf00      	nop
 8005c1e:	3708      	adds	r7, #8
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <stateJustJoined>:

static void stateJustJoined(void)
{
 8005c24:	b480      	push	{r7}
 8005c26:	af00      	add	r7, sp, #0
	LMIC.seqnoDn = LMIC.seqnoUp = 0;
 8005c28:	4b2f      	ldr	r3, [pc, #188]	@ (8005ce8 <stateJustJoined+0xc4>)
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
 8005c30:	4b2d      	ldr	r3, [pc, #180]	@ (8005ce8 <stateJustJoined+0xc4>)
 8005c32:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8005c36:	4a2c      	ldr	r2, [pc, #176]	@ (8005ce8 <stateJustJoined+0xc4>)
 8005c38:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
	LMIC.rejoinCnt = 0;
 8005c3c:	4b2a      	ldr	r3, [pc, #168]	@ (8005ce8 <stateJustJoined+0xc4>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
	LMIC.dnConf = LMIC.adrChanged = LMIC.ladrAns = LMIC.devsAns = 0;
 8005c44:	4b28      	ldr	r3, [pc, #160]	@ (8005ce8 <stateJustJoined+0xc4>)
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
 8005c4c:	4b26      	ldr	r3, [pc, #152]	@ (8005ce8 <stateJustJoined+0xc4>)
 8005c4e:	f893 2126 	ldrb.w	r2, [r3, #294]	@ 0x126
 8005c52:	4b25      	ldr	r3, [pc, #148]	@ (8005ce8 <stateJustJoined+0xc4>)
 8005c54:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
 8005c58:	4b23      	ldr	r3, [pc, #140]	@ (8005ce8 <stateJustJoined+0xc4>)
 8005c5a:	f893 2125 	ldrb.w	r2, [r3, #293]	@ 0x125
 8005c5e:	4b22      	ldr	r3, [pc, #136]	@ (8005ce8 <stateJustJoined+0xc4>)
 8005c60:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
 8005c64:	4b20      	ldr	r3, [pc, #128]	@ (8005ce8 <stateJustJoined+0xc4>)
 8005c66:	f893 2122 	ldrb.w	r2, [r3, #290]	@ 0x122
 8005c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8005ce8 <stateJustJoined+0xc4>)
 8005c6c:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
	LMIC.moreData = LMIC.dn2Ans = LMIC.snchAns = LMIC.dutyCapAns = 0;
 8005c70:	4b1d      	ldr	r3, [pc, #116]	@ (8005ce8 <stateJustJoined+0xc4>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
 8005c78:	4b1b      	ldr	r3, [pc, #108]	@ (8005ce8 <stateJustJoined+0xc4>)
 8005c7a:	f893 2129 	ldrb.w	r2, [r3, #297]	@ 0x129
 8005c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ce8 <stateJustJoined+0xc4>)
 8005c80:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
 8005c84:	4b18      	ldr	r3, [pc, #96]	@ (8005ce8 <stateJustJoined+0xc4>)
 8005c86:	f893 212a 	ldrb.w	r2, [r3, #298]	@ 0x12a
 8005c8a:	4b17      	ldr	r3, [pc, #92]	@ (8005ce8 <stateJustJoined+0xc4>)
 8005c8c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
 8005c90:	4b15      	ldr	r3, [pc, #84]	@ (8005ce8 <stateJustJoined+0xc4>)
 8005c92:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8005c96:	4b14      	ldr	r3, [pc, #80]	@ (8005ce8 <stateJustJoined+0xc4>)
 8005c98:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
	LMIC.pingSetAns = 0;
 8005c9c:	4b12      	ldr	r3, [pc, #72]	@ (8005ce8 <stateJustJoined+0xc4>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
	LMIC.upRepeat = 0;
 8005ca4:	4b10      	ldr	r3, [pc, #64]	@ (8005ce8 <stateJustJoined+0xc4>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
	LMIC.adrAckReq = LINK_CHECK_INIT;
 8005cac:	4b0e      	ldr	r3, [pc, #56]	@ (8005ce8 <stateJustJoined+0xc4>)
 8005cae:	22f4      	movs	r2, #244	@ 0xf4
 8005cb0:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
	LMIC.dn2Dr = DR_DNW2;
 8005cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8005ce8 <stateJustJoined+0xc4>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
	LMIC.dn2Freq = FREQ_DNW2;
 8005cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8005ce8 <stateJustJoined+0xc4>)
 8005cbe:	4a0b      	ldr	r2, [pc, #44]	@ (8005cec <stateJustJoined+0xc8>)
 8005cc0:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
	LMIC.bcnChnl = CHNL_BCN;
 8005cc4:	4b08      	ldr	r3, [pc, #32]	@ (8005ce8 <stateJustJoined+0xc4>)
 8005cc6:	2205      	movs	r2, #5
 8005cc8:	f883 2188 	strb.w	r2, [r3, #392]	@ 0x188
	LMIC.ping.freq = FREQ_PING;
 8005ccc:	4b06      	ldr	r3, [pc, #24]	@ (8005ce8 <stateJustJoined+0xc4>)
 8005cce:	4a07      	ldr	r2, [pc, #28]	@ (8005cec <stateJustJoined+0xc8>)
 8005cd0:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
	LMIC.ping.dr = DR_PING;
 8005cd4:	4b04      	ldr	r3, [pc, #16]	@ (8005ce8 <stateJustJoined+0xc4>)
 8005cd6:	2203      	movs	r2, #3
 8005cd8:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
}
 8005cdc:	bf00      	nop
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	200002e0 	.word	0x200002e0
 8005cec:	33d3e608 	.word	0x33d3e608

08005cf0 <decodeBeacon>:
// ================================================================================
// Decoding frames

// Decode beacon  - do not overwrite bcninfo unless we have a match!
static int decodeBeacon(void)
{
 8005cf0:	b590      	push	{r4, r7, lr}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
	ASSERT(LMIC.dataLen == LEN_BCN); // implicit header RX guarantees this
 8005cf6:	4b46      	ldr	r3, [pc, #280]	@ (8005e10 <decodeBeacon+0x120>)
 8005cf8:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8005cfc:	2b11      	cmp	r3, #17
 8005cfe:	d001      	beq.n	8005d04 <decodeBeacon+0x14>
 8005d00:	f7fe fd62 	bl	80047c8 <hal_failed>
	xref2u1_t d = LMIC.frame;
 8005d04:	4b43      	ldr	r3, [pc, #268]	@ (8005e14 <decodeBeacon+0x124>)
 8005d06:	607b      	str	r3, [r7, #4]
	if (
#if defined CFG_eu868
	d[OFF_BCN_CRC1] != (u1_t) os_crc16(d, OFF_BCN_CRC1)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	3307      	adds	r3, #7
 8005d0c:	781c      	ldrb	r4, [r3, #0]
 8005d0e:	2107      	movs	r1, #7
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f7fe ffb0 	bl	8004c76 <os_crc16>
 8005d16:	4603      	mov	r3, r0
 8005d18:	b2db      	uxtb	r3, r3
	if (
 8005d1a:	429c      	cmp	r4, r3
 8005d1c:	d001      	beq.n	8005d22 <decodeBeacon+0x32>
#elif CFG_us915
        os_rlsbf2(&d[OFF_BCN_CRC1]) != os_crc16(d,OFF_BCN_CRC1)
#endif
			)
		return 0;   // first (common) part fails CRC check
 8005d1e:	2300      	movs	r3, #0
 8005d20:	e071      	b.n	8005e06 <decodeBeacon+0x116>
	// First set of fields is ok
	u4_t bcnnetid = os_rlsbf4(&d[OFF_BCN_NETID]) & 0xFFFFFF;
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7fe ff0c 	bl	8004b40 <os_rlsbf4>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005d2e:	603b      	str	r3, [r7, #0]
	if (bcnnetid != LMIC.netid)
 8005d30:	4b37      	ldr	r3, [pc, #220]	@ (8005e10 <decodeBeacon+0x120>)
 8005d32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005d36:	683a      	ldr	r2, [r7, #0]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d002      	beq.n	8005d42 <decodeBeacon+0x52>
		return -1;  // not the beacon we're looking for
 8005d3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005d40:	e061      	b.n	8005e06 <decodeBeacon+0x116>

	LMIC.bcninfo.flags &= ~(BCN_PARTIAL | BCN_FULL);
 8005d42:	4b33      	ldr	r3, [pc, #204]	@ (8005e10 <decodeBeacon+0x120>)
 8005d44:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8005d48:	f023 0303 	bic.w	r3, r3, #3
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	4b30      	ldr	r3, [pc, #192]	@ (8005e10 <decodeBeacon+0x120>)
 8005d50:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
	// Match - update bcninfo structure
	LMIC.bcninfo.snr = LMIC.snr;
 8005d54:	4b2e      	ldr	r3, [pc, #184]	@ (8005e10 <decodeBeacon+0x120>)
 8005d56:	f993 200d 	ldrsb.w	r2, [r3, #13]
 8005d5a:	4b2d      	ldr	r3, [pc, #180]	@ (8005e10 <decodeBeacon+0x120>)
 8005d5c:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
	LMIC.bcninfo.rssi = LMIC.rssi;
 8005d60:	4b2b      	ldr	r3, [pc, #172]	@ (8005e10 <decodeBeacon+0x120>)
 8005d62:	f993 200c 	ldrsb.w	r2, [r3, #12]
 8005d66:	4b2a      	ldr	r3, [pc, #168]	@ (8005e10 <decodeBeacon+0x120>)
 8005d68:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
	LMIC.bcninfo.txtime = LMIC.rxtime - AIRTIME_BCN_osticks;
 8005d6c:	4b28      	ldr	r3, [pc, #160]	@ (8005e10 <decodeBeacon+0x120>)
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f5a3 5390 	sub.w	r3, r3, #4608	@ 0x1200
 8005d74:	3b0c      	subs	r3, #12
 8005d76:	4a26      	ldr	r2, [pc, #152]	@ (8005e10 <decodeBeacon+0x120>)
 8005d78:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
	LMIC.bcninfo.time = os_rlsbf4(&d[OFF_BCN_TIME]);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	3303      	adds	r3, #3
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7fe fedd 	bl	8004b40 <os_rlsbf4>
 8005d86:	4603      	mov	r3, r0
 8005d88:	4a21      	ldr	r2, [pc, #132]	@ (8005e10 <decodeBeacon+0x120>)
 8005d8a:	f8c2 3198 	str.w	r3, [r2, #408]	@ 0x198
	LMIC.bcninfo.flags |= BCN_PARTIAL;
 8005d8e:	4b20      	ldr	r3, [pc, #128]	@ (8005e10 <decodeBeacon+0x120>)
 8005d90:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8005d94:	f043 0301 	orr.w	r3, r3, #1
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8005e10 <decodeBeacon+0x120>)
 8005d9c:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196

	// Check 2nd set
	if (os_rlsbf2(&d[OFF_BCN_CRC2]) != os_crc16(d, OFF_BCN_CRC2))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	330f      	adds	r3, #15
 8005da4:	4618      	mov	r0, r3
 8005da6:	f7fe feb6 	bl	8004b16 <os_rlsbf2>
 8005daa:	4603      	mov	r3, r0
 8005dac:	461c      	mov	r4, r3
 8005dae:	210f      	movs	r1, #15
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f7fe ff60 	bl	8004c76 <os_crc16>
 8005db6:	4603      	mov	r3, r0
 8005db8:	429c      	cmp	r4, r3
 8005dba:	d001      	beq.n	8005dc0 <decodeBeacon+0xd0>
		return 1;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e022      	b.n	8005e06 <decodeBeacon+0x116>
	// Second set of fields is ok
	LMIC.bcninfo.lat = (s4_t) os_rlsbf4(&d[OFF_BCN_LAT - 1]) >> 8; // read as signed 24-bit
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	3308      	adds	r3, #8
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7fe febb 	bl	8004b40 <os_rlsbf4>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	121b      	asrs	r3, r3, #8
 8005dce:	4a10      	ldr	r2, [pc, #64]	@ (8005e10 <decodeBeacon+0x120>)
 8005dd0:	f8c2 31a0 	str.w	r3, [r2, #416]	@ 0x1a0
	LMIC.bcninfo.lon = (s4_t) os_rlsbf4(&d[OFF_BCN_LON - 1]) >> 8; // ditto
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	330b      	adds	r3, #11
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7fe feb1 	bl	8004b40 <os_rlsbf4>
 8005dde:	4603      	mov	r3, r0
 8005de0:	121b      	asrs	r3, r3, #8
 8005de2:	4a0b      	ldr	r2, [pc, #44]	@ (8005e10 <decodeBeacon+0x120>)
 8005de4:	f8c2 31a4 	str.w	r3, [r2, #420]	@ 0x1a4
	LMIC.bcninfo.info = d[OFF_BCN_INFO];
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	7a1a      	ldrb	r2, [r3, #8]
 8005dec:	4b08      	ldr	r3, [pc, #32]	@ (8005e10 <decodeBeacon+0x120>)
 8005dee:	f883 219c 	strb.w	r2, [r3, #412]	@ 0x19c
	LMIC.bcninfo.flags |= BCN_FULL;
 8005df2:	4b07      	ldr	r3, [pc, #28]	@ (8005e10 <decodeBeacon+0x120>)
 8005df4:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8005df8:	f043 0302 	orr.w	r3, r3, #2
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	4b04      	ldr	r3, [pc, #16]	@ (8005e10 <decodeBeacon+0x120>)
 8005e00:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
	return 2;
 8005e04:	2302      	movs	r3, #2
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd90      	pop	{r4, r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	200002e0 	.word	0x200002e0
 8005e14:	20000428 	.word	0x20000428

08005e18 <decodeFrame>:

static bit_t decodeFrame(void)
{
 8005e18:	b590      	push	{r4, r7, lr}
 8005e1a:	b09b      	sub	sp, #108	@ 0x6c
 8005e1c:	af02      	add	r7, sp, #8
	xref2u1_t d = LMIC.frame;
 8005e1e:	4b98      	ldr	r3, [pc, #608]	@ (8006080 <decodeFrame+0x268>)
 8005e20:	64bb      	str	r3, [r7, #72]	@ 0x48
	u1_t hdr = d[0];
 8005e22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	u1_t ftype = hdr & HDR_FTYPE;
 8005e2a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005e2e:	f023 031f 	bic.w	r3, r3, #31
 8005e32:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	int dlen = LMIC.dataLen;
 8005e36:	4b93      	ldr	r3, [pc, #588]	@ (8006084 <decodeFrame+0x26c>)
 8005e38:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8005e3c:	643b      	str	r3, [r7, #64]	@ 0x40
	if (dlen < OFF_DAT_OPTS + 4 || (hdr & HDR_MAJOR) != HDR_MAJOR_V1
 8005e3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e40:	2b0b      	cmp	r3, #11
 8005e42:	dd0d      	ble.n	8005e60 <decodeFrame+0x48>
 8005e44:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005e48:	f003 0303 	and.w	r3, r3, #3
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d107      	bne.n	8005e60 <decodeFrame+0x48>
			|| (ftype != HDR_FTYPE_DADN && ftype != HDR_FTYPE_DCDN)) {
 8005e50:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005e54:	2b60      	cmp	r3, #96	@ 0x60
 8005e56:	d014      	beq.n	8005e82 <decodeFrame+0x6a>
 8005e58:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005e5c:	2ba0      	cmp	r3, #160	@ 0xa0
 8005e5e:	d010      	beq.n	8005e82 <decodeFrame+0x6a>
		// Basic sanity checks failed
		EV(specCond, WARN, (e_.reason = EV::specCond_t::UNEXPECTED_FRAME,
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = dlen < 4 ? 0 : os_rlsbf4(&d[dlen-4]),
						e_.info2 = hdr + (dlen<<8)));
		norx: LMIC.dataLen = 0;
 8005e60:	bf00      	nop
 8005e62:	e008      	b.n	8005e76 <decodeFrame+0x5e>
	if (addr != LMIC.devaddr) {
		EV(specCond, WARN, (e_.reason = EV::specCond_t::ALIEN_ADDRESS,
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = addr,
						e_.info2 = LMIC.devaddr));
		goto norx;
 8005e64:	bf00      	nop
 8005e66:	e006      	b.n	8005e76 <decodeFrame+0x5e>
	}
	if (poff > pend) {
		EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = 0x1000000 + (poff-pend) + (fct<<8) + (dlen<<16)));
		goto norx;
 8005e68:	bf00      	nop
 8005e6a:	e004      	b.n	8005e76 <decodeFrame+0x5e>
		EV(spe3Cond, ERR, (e_.reason = EV::spe3Cond_t::CORRUPTED_MIC,
						e_.eui1 = MAIN::CDEV->getEui(),
						e_.info1 = Base::lsbf4(&d[pend]),
						e_.info2 = seqno,
						e_.info3 = LMIC.devaddr));
		goto norx;
 8005e6c:	bf00      	nop
 8005e6e:	e002      	b.n	8005e76 <decodeFrame+0x5e>
		if ((s4_t) seqno > (s4_t) LMIC.seqnoDn) {
			EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_ROLL_OVER,
							e_.eui = MAIN::CDEV->getEui(),
							e_.info = LMIC.seqnoDn,
							e_.info2 = seqno));
			goto norx;
 8005e70:	bf00      	nop
 8005e72:	e000      	b.n	8005e76 <decodeFrame+0x5e>
				|| ftype != HDR_FTYPE_DCDN) {
			EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_OBSOLETE,
							e_.eui = MAIN::CDEV->getEui(),
							e_.info = LMIC.seqnoDn,
							e_.info2 = seqno));
			goto norx;
 8005e74:	bf00      	nop
		norx: LMIC.dataLen = 0;
 8005e76:	4b83      	ldr	r3, [pc, #524]	@ (8006084 <decodeFrame+0x26c>)
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
		return 0;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	e2f6      	b.n	8006470 <decodeFrame+0x658>
	int fct = d[OFF_DAT_FCT];
 8005e82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e84:	3305      	adds	r3, #5
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
	u4_t addr = os_rlsbf4(&d[OFF_DAT_ADDR]);
 8005e8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fe fe56 	bl	8004b40 <os_rlsbf4>
 8005e94:	63b8      	str	r0, [r7, #56]	@ 0x38
	u4_t seqno = os_rlsbf2(&d[OFF_DAT_SEQNO]);
 8005e96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e98:	3306      	adds	r3, #6
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7fe fe3b 	bl	8004b16 <os_rlsbf2>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	637b      	str	r3, [r7, #52]	@ 0x34
	int olen = fct & FCT_OPTLEN;
 8005ea4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ea6:	f003 030f 	and.w	r3, r3, #15
 8005eaa:	633b      	str	r3, [r7, #48]	@ 0x30
	int ackup = (fct & FCT_ACK) != 0 ? 1 : 0;   // ACK last up frame
 8005eac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eae:	115b      	asrs	r3, r3, #5
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int poff = OFF_DAT_OPTS + olen;
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb8:	3308      	adds	r3, #8
 8005eba:	65fb      	str	r3, [r7, #92]	@ 0x5c
	int pend = dlen - 4;  // MIC
 8005ebc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ebe:	3b04      	subs	r3, #4
 8005ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (addr != LMIC.devaddr) {
 8005ec2:	4b70      	ldr	r3, [pc, #448]	@ (8006084 <decodeFrame+0x26c>)
 8005ec4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8005ec8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d1ca      	bne.n	8005e64 <decodeFrame+0x4c>
	if (poff > pend) {
 8005ece:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	dcc8      	bgt.n	8005e68 <decodeFrame+0x50>
	int port = -1;
 8005ed6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005eda:	65bb      	str	r3, [r7, #88]	@ 0x58
	int replayConf = 0;
 8005edc:	2300      	movs	r3, #0
 8005ede:	657b      	str	r3, [r7, #84]	@ 0x54
	if (pend > poff)
 8005ee0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ee2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	dd07      	ble.n	8005ef8 <decodeFrame+0xe0>
		port = d[poff++];
 8005ee8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005eea:	1c5a      	adds	r2, r3, #1
 8005eec:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005eee:	461a      	mov	r2, r3
 8005ef0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ef2:	4413      	add	r3, r2
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	65bb      	str	r3, [r7, #88]	@ 0x58
	seqno = LMIC.seqnoDn + (u2_t) (seqno - LMIC.seqnoDn);
 8005ef8:	4b62      	ldr	r3, [pc, #392]	@ (8006084 <decodeFrame+0x26c>)
 8005efa:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8005efe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f00:	b291      	uxth	r1, r2
 8005f02:	4a60      	ldr	r2, [pc, #384]	@ (8006084 <decodeFrame+0x26c>)
 8005f04:	f8d2 2118 	ldr.w	r2, [r2, #280]	@ 0x118
 8005f08:	b292      	uxth	r2, r2
 8005f0a:	1a8a      	subs	r2, r1, r2
 8005f0c:	b292      	uxth	r2, r2
 8005f0e:	4413      	add	r3, r2
 8005f10:	637b      	str	r3, [r7, #52]	@ 0x34
	if (!aes_verifyMic(LMIC.nwkKey, LMIC.devaddr, seqno, /*dn*/1, d, pend)) {
 8005f12:	4b5c      	ldr	r3, [pc, #368]	@ (8006084 <decodeFrame+0x26c>)
 8005f14:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 8005f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f1a:	9301      	str	r3, [sp, #4]
 8005f1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	2301      	movs	r3, #1
 8005f22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f24:	4858      	ldr	r0, [pc, #352]	@ (8006088 <decodeFrame+0x270>)
 8005f26:	f7fe ff19 	bl	8004d5c <aes_verifyMic>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d09d      	beq.n	8005e6c <decodeFrame+0x54>
	if (seqno < LMIC.seqnoDn) {
 8005f30:	4b54      	ldr	r3, [pc, #336]	@ (8006084 <decodeFrame+0x26c>)
 8005f32:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8005f36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d219      	bcs.n	8005f70 <decodeFrame+0x158>
		if ((s4_t) seqno > (s4_t) LMIC.seqnoDn) {
 8005f3c:	4b51      	ldr	r3, [pc, #324]	@ (8006084 <decodeFrame+0x26c>)
 8005f3e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8005f42:	461a      	mov	r2, r3
 8005f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f46:	429a      	cmp	r2, r3
 8005f48:	db92      	blt.n	8005e70 <decodeFrame+0x58>
		if (seqno != LMIC.seqnoDn - 1 || !LMIC.dnConf
 8005f4a:	4b4e      	ldr	r3, [pc, #312]	@ (8006084 <decodeFrame+0x26c>)
 8005f4c:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8005f50:	3b01      	subs	r3, #1
 8005f52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d18d      	bne.n	8005e74 <decodeFrame+0x5c>
 8005f58:	4b4a      	ldr	r3, [pc, #296]	@ (8006084 <decodeFrame+0x26c>)
 8005f5a:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d088      	beq.n	8005e74 <decodeFrame+0x5c>
				|| ftype != HDR_FTYPE_DCDN) {
 8005f62:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005f66:	2ba0      	cmp	r3, #160	@ 0xa0
 8005f68:	d184      	bne.n	8005e74 <decodeFrame+0x5c>
		}
		// Replay of previous sequence number allowed only if
		// previous frame and repeated both requested confirmation
		replayConf = 1;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f6e:	e00e      	b.n	8005f8e <decodeFrame+0x176>
			EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_SKIP,
							e_.eui = MAIN::CDEV->getEui(),
							e_.info = LMIC.seqnoDn,
							e_.info2 = seqno));
		}
		LMIC.seqnoDn = seqno + 1;  // next number to be expected
 8005f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f72:	3301      	adds	r3, #1
 8005f74:	4a43      	ldr	r2, [pc, #268]	@ (8006084 <decodeFrame+0x26c>)
 8005f76:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
		DO_DEVDB(LMIC.seqnoDn,seqnoDn);
		// DN frame requested confirmation - provide ACK once with next UP frame
		LMIC.dnConf = (ftype == HDR_FTYPE_DCDN ? FCT_ACK : 0);
 8005f7a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005f7e:	2ba0      	cmp	r3, #160	@ 0xa0
 8005f80:	d101      	bne.n	8005f86 <decodeFrame+0x16e>
 8005f82:	2220      	movs	r2, #32
 8005f84:	e000      	b.n	8005f88 <decodeFrame+0x170>
 8005f86:	2200      	movs	r2, #0
 8005f88:	4b3e      	ldr	r3, [pc, #248]	@ (8006084 <decodeFrame+0x26c>)
 8005f8a:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
	}

	if (LMIC.dnConf || (fct & FCT_MORE))
 8005f8e:	4b3d      	ldr	r3, [pc, #244]	@ (8006084 <decodeFrame+0x26c>)
 8005f90:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d104      	bne.n	8005fa2 <decodeFrame+0x18a>
 8005f98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f9a:	f003 0310 	and.w	r3, r3, #16
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d008      	beq.n	8005fb4 <decodeFrame+0x19c>
		LMIC.opmode |= OP_POLL;
 8005fa2:	4b38      	ldr	r3, [pc, #224]	@ (8006084 <decodeFrame+0x26c>)
 8005fa4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8005fa8:	f043 0310 	orr.w	r3, r3, #16
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	4b35      	ldr	r3, [pc, #212]	@ (8006084 <decodeFrame+0x26c>)
 8005fb0:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac

	// We heard from network
	LMIC.adrChanged = LMIC.rejoinCnt = 0;
 8005fb4:	4b33      	ldr	r3, [pc, #204]	@ (8006084 <decodeFrame+0x26c>)
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
 8005fbc:	4b31      	ldr	r3, [pc, #196]	@ (8006084 <decodeFrame+0x26c>)
 8005fbe:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 8005fc2:	4b30      	ldr	r3, [pc, #192]	@ (8006084 <decodeFrame+0x26c>)
 8005fc4:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
	if (LMIC.adrAckReq != LINK_CHECK_OFF)
 8005fc8:	4b2e      	ldr	r3, [pc, #184]	@ (8006084 <decodeFrame+0x26c>)
 8005fca:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 8005fce:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 8005fd2:	d003      	beq.n	8005fdc <decodeFrame+0x1c4>
		LMIC.adrAckReq = LINK_CHECK_INIT;
 8005fd4:	4b2b      	ldr	r3, [pc, #172]	@ (8006084 <decodeFrame+0x26c>)
 8005fd6:	22f4      	movs	r2, #244	@ 0xf4
 8005fd8:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121

	// Process OPTS
	int m = LMIC.rssi - RSSI_OFF - getSensitivity(LMIC.rps);
 8005fdc:	4b29      	ldr	r3, [pc, #164]	@ (8006084 <decodeFrame+0x26c>)
 8005fde:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8005fe2:	f1a3 0440 	sub.w	r4, r3, #64	@ 0x40
 8005fe6:	4b27      	ldr	r3, [pc, #156]	@ (8006084 <decodeFrame+0x26c>)
 8005fe8:	89db      	ldrh	r3, [r3, #14]
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7fe ffe0 	bl	8004fb0 <getSensitivity>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	1ae3      	subs	r3, r4, r3
 8005ff4:	627b      	str	r3, [r7, #36]	@ 0x24
	LMIC.margin = m < 0 ? 0 : m > 254 ? 254 : m;
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	db05      	blt.n	8006008 <decodeFrame+0x1f0>
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffe:	2bfe      	cmp	r3, #254	@ 0xfe
 8006000:	bfa8      	it	ge
 8006002:	23fe      	movge	r3, #254	@ 0xfe
 8006004:	b2db      	uxtb	r3, r3
 8006006:	e000      	b.n	800600a <decodeFrame+0x1f2>
 8006008:	2300      	movs	r3, #0
 800600a:	4a1e      	ldr	r2, [pc, #120]	@ (8006084 <decodeFrame+0x26c>)
 800600c:	f882 3124 	strb.w	r3, [r2, #292]	@ 0x124

	xref2u1_t opts = &d[OFF_DAT_OPTS];
 8006010:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006012:	3308      	adds	r3, #8
 8006014:	623b      	str	r3, [r7, #32]
	int oidx = 0;
 8006016:	2300      	movs	r3, #0
 8006018:	653b      	str	r3, [r7, #80]	@ 0x50
	while (oidx < olen) {
 800601a:	e1b5      	b.n	8006388 <decodeFrame+0x570>
		switch (opts[oidx]) {
 800601c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800601e:	6a3a      	ldr	r2, [r7, #32]
 8006020:	4413      	add	r3, r2
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	3b02      	subs	r3, #2
 8006026:	2b10      	cmp	r3, #16
 8006028:	f200 81ba 	bhi.w	80063a0 <decodeFrame+0x588>
 800602c:	a201      	add	r2, pc, #4	@ (adr r2, 8006034 <decodeFrame+0x21c>)
 800602e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006032:	bf00      	nop
 8006034:	08006079 	.word	0x08006079
 8006038:	0800608d 	.word	0x0800608d
 800603c:	080061eb 	.word	0x080061eb
 8006040:	08006167 	.word	0x08006167
 8006044:	08006157 	.word	0x08006157
 8006048:	08006239 	.word	0x08006239
 800604c:	080063a1 	.word	0x080063a1
 8006050:	080063a1 	.word	0x080063a1
 8006054:	080063a1 	.word	0x080063a1
 8006058:	080063a1 	.word	0x080063a1
 800605c:	080063a1 	.word	0x080063a1
 8006060:	080063a1 	.word	0x080063a1
 8006064:	080063a1 	.word	0x080063a1
 8006068:	080063a1 	.word	0x080063a1
 800606c:	080063a1 	.word	0x080063a1
 8006070:	080062c5 	.word	0x080062c5
 8006074:	08006307 	.word	0x08006307
		case MCMD_LCHK_ANS: {
			//int gwmargin = opts[oidx+1];
			//int ngws = opts[oidx+2];
			oidx += 3;
 8006078:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800607a:	3303      	adds	r3, #3
 800607c:	653b      	str	r3, [r7, #80]	@ 0x50
			continue;
 800607e:	e183      	b.n	8006388 <decodeFrame+0x570>
 8006080:	20000428 	.word	0x20000428
 8006084:	200002e0 	.word	0x200002e0
 8006088:	200003d4 	.word	0x200003d4
		}
		case MCMD_LADR_REQ: {
			u1_t p1 = opts[oidx + 1];            // txpow + DR
 800608c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800608e:	3301      	adds	r3, #1
 8006090:	6a3a      	ldr	r2, [r7, #32]
 8006092:	4413      	add	r3, r2
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	72bb      	strb	r3, [r7, #10]
			u2_t chmap = os_rlsbf2(&opts[oidx + 2]); // list of enabled channels
 8006098:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800609a:	3302      	adds	r3, #2
 800609c:	6a3a      	ldr	r2, [r7, #32]
 800609e:	4413      	add	r3, r2
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7fe fd38 	bl	8004b16 <os_rlsbf2>
 80060a6:	4603      	mov	r3, r0
 80060a8:	813b      	strh	r3, [r7, #8]
			u1_t chpage = opts[oidx + 4] & MCMD_LADR_CHPAGE_MASK; // channel page
 80060aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060ac:	3304      	adds	r3, #4
 80060ae:	6a3a      	ldr	r2, [r7, #32]
 80060b0:	4413      	add	r3, r2
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	f023 030f 	bic.w	r3, r3, #15
 80060b8:	71fb      	strb	r3, [r7, #7]
			u1_t uprpt = opts[oidx + 4] & MCMD_LADR_REPEAT_MASK; // up repeat count
 80060ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060bc:	3304      	adds	r3, #4
 80060be:	6a3a      	ldr	r2, [r7, #32]
 80060c0:	4413      	add	r3, r2
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	f003 030f 	and.w	r3, r3, #15
 80060c8:	71bb      	strb	r3, [r7, #6]
			oidx += 5;
 80060ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060cc:	3305      	adds	r3, #5
 80060ce:	653b      	str	r3, [r7, #80]	@ 0x50

			LMIC.ladrAns = 0x80
 80060d0:	4bb0      	ldr	r3, [pc, #704]	@ (8006394 <decodeFrame+0x57c>)
 80060d2:	2287      	movs	r2, #135	@ 0x87
 80060d4:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
					|     // Include an answer into next frame up
					MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK
					| MCMD_LADR_ANS_DRACK;
			if (!mapChannels(chpage, chmap))
 80060d8:	893a      	ldrh	r2, [r7, #8]
 80060da:	79fb      	ldrb	r3, [r7, #7]
 80060dc:	4611      	mov	r1, r2
 80060de:	4618      	mov	r0, r3
 80060e0:	f7ff fb84 	bl	80057ec <mapChannels>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d108      	bne.n	80060fc <decodeFrame+0x2e4>
				LMIC.ladrAns &= ~MCMD_LADR_ANS_CHACK;
 80060ea:	4baa      	ldr	r3, [pc, #680]	@ (8006394 <decodeFrame+0x57c>)
 80060ec:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 80060f0:	f023 0301 	bic.w	r3, r3, #1
 80060f4:	b2da      	uxtb	r2, r3
 80060f6:	4ba7      	ldr	r3, [pc, #668]	@ (8006394 <decodeFrame+0x57c>)
 80060f8:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
			dr_t dr = (dr_t) (p1 >> MCMD_LADR_DR_SHIFT);
 80060fc:	7abb      	ldrb	r3, [r7, #10]
 80060fe:	091b      	lsrs	r3, r3, #4
 8006100:	717b      	strb	r3, [r7, #5]
			if (!validDR(dr)) {
 8006102:	797b      	ldrb	r3, [r7, #5]
 8006104:	4618      	mov	r0, r3
 8006106:	f7fe fcd7 	bl	8004ab8 <validDR>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d108      	bne.n	8006122 <decodeFrame+0x30a>
				LMIC.ladrAns &= ~MCMD_LADR_ANS_DRACK;
 8006110:	4ba0      	ldr	r3, [pc, #640]	@ (8006394 <decodeFrame+0x57c>)
 8006112:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8006116:	f023 0302 	bic.w	r3, r3, #2
 800611a:	b2da      	uxtb	r2, r3
 800611c:	4b9d      	ldr	r3, [pc, #628]	@ (8006394 <decodeFrame+0x57c>)
 800611e:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
				EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
								e_.eui = MAIN::CDEV->getEui(),
								e_.info = Base::lsbf4(&d[pend]),
								e_.info2 = Base::msbf4(&opts[oidx-4])));
			}
			if ((LMIC.ladrAns & 0x7F)
 8006122:	4b9c      	ldr	r3, [pc, #624]	@ (8006394 <decodeFrame+0x57c>)
 8006124:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8006128:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800612c:	2b07      	cmp	r3, #7
 800612e:	d10d      	bne.n	800614c <decodeFrame+0x334>
					== (MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK
							| MCMD_LADR_ANS_DRACK)) {
				// Nothing went wrong - use settings
				LMIC.upRepeat = uprpt;
 8006130:	4a98      	ldr	r2, [pc, #608]	@ (8006394 <decodeFrame+0x57c>)
 8006132:	79bb      	ldrb	r3, [r7, #6]
 8006134:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
				setDrTxpow(DRCHG_NWKCMD, dr, pow2dBm(p1));
 8006138:	7abb      	ldrb	r3, [r7, #10]
 800613a:	f003 030f 	and.w	r3, r3, #15
 800613e:	4a96      	ldr	r2, [pc, #600]	@ (8006398 <decodeFrame+0x580>)
 8006140:	56d2      	ldrsb	r2, [r2, r3]
 8006142:	797b      	ldrb	r3, [r7, #5]
 8006144:	4619      	mov	r1, r3
 8006146:	2004      	movs	r0, #4
 8006148:	f7ff fa00 	bl	800554c <setDrTxpow>
			}
			LMIC.adrChanged = 1;  // Trigger an ACK to NWK
 800614c:	4b91      	ldr	r3, [pc, #580]	@ (8006394 <decodeFrame+0x57c>)
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
			continue;
 8006154:	e118      	b.n	8006388 <decodeFrame+0x570>
		}
		case MCMD_DEVS_REQ: {
			LMIC.devsAns = 1;
 8006156:	4b8f      	ldr	r3, [pc, #572]	@ (8006394 <decodeFrame+0x57c>)
 8006158:	2201      	movs	r2, #1
 800615a:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
			oidx += 1;
 800615e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006160:	3301      	adds	r3, #1
 8006162:	653b      	str	r3, [r7, #80]	@ 0x50
			continue;
 8006164:	e110      	b.n	8006388 <decodeFrame+0x570>
		}
		case MCMD_DN2P_SET: {
			dr_t dr = (dr_t) (opts[oidx + 1] & 0x0F);
 8006166:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006168:	3301      	adds	r3, #1
 800616a:	6a3a      	ldr	r2, [r7, #32]
 800616c:	4413      	add	r3, r2
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	f003 030f 	and.w	r3, r3, #15
 8006174:	74bb      	strb	r3, [r7, #18]
			u4_t freq = convFreq(&opts[oidx + 2]);
 8006176:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006178:	3302      	adds	r3, #2
 800617a:	6a3a      	ldr	r2, [r7, #32]
 800617c:	4413      	add	r3, r2
 800617e:	4618      	mov	r0, r3
 8006180:	f7ff fb12 	bl	80057a8 <convFreq>
 8006184:	60f8      	str	r0, [r7, #12]
			oidx += 5;
 8006186:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006188:	3305      	adds	r3, #5
 800618a:	653b      	str	r3, [r7, #80]	@ 0x50
			LMIC.dn2Ans = 0x80;   // answer pending
 800618c:	4b81      	ldr	r3, [pc, #516]	@ (8006394 <decodeFrame+0x57c>)
 800618e:	2280      	movs	r2, #128	@ 0x80
 8006190:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
			if (validDR(dr))
 8006194:	7cbb      	ldrb	r3, [r7, #18]
 8006196:	4618      	mov	r0, r3
 8006198:	f7fe fc8e 	bl	8004ab8 <validDR>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d008      	beq.n	80061b4 <decodeFrame+0x39c>
				LMIC.dn2Ans |= MCMD_DN2P_ANS_DRACK;
 80061a2:	4b7c      	ldr	r3, [pc, #496]	@ (8006394 <decodeFrame+0x57c>)
 80061a4:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80061a8:	f043 0302 	orr.w	r3, r3, #2
 80061ac:	b2da      	uxtb	r2, r3
 80061ae:	4b79      	ldr	r3, [pc, #484]	@ (8006394 <decodeFrame+0x57c>)
 80061b0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
			if (freq != 0)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d008      	beq.n	80061cc <decodeFrame+0x3b4>
				LMIC.dn2Ans |= MCMD_DN2P_ANS_CHACK;
 80061ba:	4b76      	ldr	r3, [pc, #472]	@ (8006394 <decodeFrame+0x57c>)
 80061bc:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80061c0:	f043 0301 	orr.w	r3, r3, #1
 80061c4:	b2da      	uxtb	r2, r3
 80061c6:	4b73      	ldr	r3, [pc, #460]	@ (8006394 <decodeFrame+0x57c>)
 80061c8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
			if (LMIC.dn2Ans
 80061cc:	4b71      	ldr	r3, [pc, #452]	@ (8006394 <decodeFrame+0x57c>)
 80061ce:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80061d2:	2b83      	cmp	r3, #131	@ 0x83
 80061d4:	f040 80d7 	bne.w	8006386 <decodeFrame+0x56e>
					== (0x80 | MCMD_DN2P_ANS_DRACK | MCMD_DN2P_ANS_CHACK)) {
				LMIC.dn2Dr = dr;
 80061d8:	4a6e      	ldr	r2, [pc, #440]	@ (8006394 <decodeFrame+0x57c>)
 80061da:	7cbb      	ldrb	r3, [r7, #18]
 80061dc:	f882 312b 	strb.w	r3, [r2, #299]	@ 0x12b
				LMIC.dn2Freq = freq;
 80061e0:	4a6c      	ldr	r2, [pc, #432]	@ (8006394 <decodeFrame+0x57c>)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
				DO_DEVDB(LMIC.dn2Dr,dn2Dr);DO_DEVDB(LMIC.dn2Freq,dn2Freq);
			}
			continue;
 80061e8:	e0cd      	b.n	8006386 <decodeFrame+0x56e>
		}
		case MCMD_DCAP_REQ: {
			u1_t cap = opts[oidx + 1];
 80061ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061ec:	3301      	adds	r3, #1
 80061ee:	6a3a      	ldr	r2, [r7, #32]
 80061f0:	4413      	add	r3, r2
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	72fb      	strb	r3, [r7, #11]
			oidx += 2;
 80061f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061f8:	3302      	adds	r3, #2
 80061fa:	653b      	str	r3, [r7, #80]	@ 0x50
			// A value cap=0xFF means device is OFF unless enabled again manually.
			if (cap == 0xFF)
 80061fc:	7afb      	ldrb	r3, [r7, #11]
 80061fe:	2bff      	cmp	r3, #255	@ 0xff
 8006200:	d108      	bne.n	8006214 <decodeFrame+0x3fc>
				LMIC.opmode |= OP_SHUTDOWN;  // stop any sending
 8006202:	4b64      	ldr	r3, [pc, #400]	@ (8006394 <decodeFrame+0x57c>)
 8006204:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006208:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800620c:	b29a      	uxth	r2, r3
 800620e:	4b61      	ldr	r3, [pc, #388]	@ (8006394 <decodeFrame+0x57c>)
 8006210:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			LMIC.globalDutyRate = cap & 0xF;
 8006214:	7afb      	ldrb	r3, [r7, #11]
 8006216:	f003 030f 	and.w	r3, r3, #15
 800621a:	b2da      	uxtb	r2, r3
 800621c:	4b5d      	ldr	r3, [pc, #372]	@ (8006394 <decodeFrame+0x57c>)
 800621e:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
			LMIC.globalDutyAvail = os_getTime();
 8006222:	f001 feb1 	bl	8007f88 <os_getTime>
 8006226:	4603      	mov	r3, r0
 8006228:	4a5a      	ldr	r2, [pc, #360]	@ (8006394 <decodeFrame+0x57c>)
 800622a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
			DO_DEVDB(cap,dutyCap);
			LMIC.dutyCapAns = 1;
 800622e:	4b59      	ldr	r3, [pc, #356]	@ (8006394 <decodeFrame+0x57c>)
 8006230:	2201      	movs	r2, #1
 8006232:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
			continue;
 8006236:	e0a7      	b.n	8006388 <decodeFrame+0x570>
		}
		case MCMD_SNCH_REQ: {
			u1_t chidx = opts[oidx + 1];  // channel
 8006238:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800623a:	3301      	adds	r3, #1
 800623c:	6a3a      	ldr	r2, [r7, #32]
 800623e:	4413      	add	r3, r2
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	76fb      	strb	r3, [r7, #27]
			u4_t freq = convFreq(&opts[oidx + 2]); // freq
 8006244:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006246:	3302      	adds	r3, #2
 8006248:	6a3a      	ldr	r2, [r7, #32]
 800624a:	4413      	add	r3, r2
 800624c:	4618      	mov	r0, r3
 800624e:	f7ff faab 	bl	80057a8 <convFreq>
 8006252:	6178      	str	r0, [r7, #20]
			u1_t drs = opts[oidx + 5];  // datarate span
 8006254:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006256:	3305      	adds	r3, #5
 8006258:	6a3a      	ldr	r2, [r7, #32]
 800625a:	4413      	add	r3, r2
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	74fb      	strb	r3, [r7, #19]
			LMIC.snchAns = 0x80;
 8006260:	4b4c      	ldr	r3, [pc, #304]	@ (8006394 <decodeFrame+0x57c>)
 8006262:	2280      	movs	r2, #128	@ 0x80
 8006264:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
			if (freq != 0
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d026      	beq.n	80062bc <decodeFrame+0x4a4>
					&& LMIC_setupChannel(chidx, freq,
							DR_RANGE_MAP(drs & 0xF, drs >> 4), -1))
 800626e:	7cfb      	ldrb	r3, [r7, #19]
 8006270:	f003 030f 	and.w	r3, r3, #15
 8006274:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006278:	fa02 f303 	lsl.w	r3, r2, r3
 800627c:	b21a      	sxth	r2, r3
 800627e:	7cfb      	ldrb	r3, [r7, #19]
 8006280:	091b      	lsrs	r3, r3, #4
 8006282:	b2db      	uxtb	r3, r3
 8006284:	f1c3 030f 	rsb	r3, r3, #15
 8006288:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800628c:	fa41 f303 	asr.w	r3, r1, r3
 8006290:	b21b      	sxth	r3, r3
 8006292:	4013      	ands	r3, r2
 8006294:	b21b      	sxth	r3, r3
					&& LMIC_setupChannel(chidx, freq,
 8006296:	b29a      	uxth	r2, r3
 8006298:	7ef8      	ldrb	r0, [r7, #27]
 800629a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800629e:	6979      	ldr	r1, [r7, #20]
 80062a0:	f7ff fa08 	bl	80056b4 <LMIC_setupChannel>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d008      	beq.n	80062bc <decodeFrame+0x4a4>
				LMIC.snchAns |= MCMD_SNCH_ANS_DRACK | MCMD_SNCH_ANS_FQACK;
 80062aa:	4b3a      	ldr	r3, [pc, #232]	@ (8006394 <decodeFrame+0x57c>)
 80062ac:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 80062b0:	f043 0303 	orr.w	r3, r3, #3
 80062b4:	b2da      	uxtb	r2, r3
 80062b6:	4b37      	ldr	r3, [pc, #220]	@ (8006394 <decodeFrame+0x57c>)
 80062b8:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
			oidx += 6;
 80062bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062be:	3306      	adds	r3, #6
 80062c0:	653b      	str	r3, [r7, #80]	@ 0x50
			continue;
 80062c2:	e061      	b.n	8006388 <decodeFrame+0x570>
		}
		case MCMD_PING_SET: {
			u4_t freq = convFreq(&opts[oidx + 1]);
 80062c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062c6:	3301      	adds	r3, #1
 80062c8:	6a3a      	ldr	r2, [r7, #32]
 80062ca:	4413      	add	r3, r2
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7ff fa6b 	bl	80057a8 <convFreq>
 80062d2:	61f8      	str	r0, [r7, #28]
			oidx += 4;
 80062d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062d6:	3304      	adds	r3, #4
 80062d8:	653b      	str	r3, [r7, #80]	@ 0x50
			u1_t flags = 0x80;
 80062da:	2380      	movs	r3, #128	@ 0x80
 80062dc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			if (freq != 0) {
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d009      	beq.n	80062fa <decodeFrame+0x4e2>
				flags |= MCMD_PING_ANS_FQACK;
 80062e6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80062ea:	f043 0301 	orr.w	r3, r3, #1
 80062ee:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
				LMIC.ping.freq = freq;
 80062f2:	4a28      	ldr	r2, [pc, #160]	@ (8006394 <decodeFrame+0x57c>)
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
				DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);DO_DEVDB(LMIC.ping.freq, pingFreq);DO_DEVDB(LMIC.ping.dr, pingDr);
			}
			LMIC.pingSetAns = flags;
 80062fa:	4a26      	ldr	r2, [pc, #152]	@ (8006394 <decodeFrame+0x57c>)
 80062fc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006300:	f882 3133 	strb.w	r3, [r2, #307]	@ 0x133
			continue;
 8006304:	e040      	b.n	8006388 <decodeFrame+0x570>
		}
		case MCMD_BCNI_ANS: {
			// Ignore if tracking already enabled
			if ((LMIC.opmode & OP_TRACK) == 0) {
 8006306:	4b23      	ldr	r3, [pc, #140]	@ (8006394 <decodeFrame+0x57c>)
 8006308:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800630c:	f003 0302 	and.w	r3, r3, #2
 8006310:	2b00      	cmp	r3, #0
 8006312:	d134      	bne.n	800637e <decodeFrame+0x566>
				LMIC.bcnChnl = opts[oidx + 3];
 8006314:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006316:	3303      	adds	r3, #3
 8006318:	6a3a      	ldr	r2, [r7, #32]
 800631a:	4413      	add	r3, r2
 800631c:	781a      	ldrb	r2, [r3, #0]
 800631e:	4b1d      	ldr	r3, [pc, #116]	@ (8006394 <decodeFrame+0x57c>)
 8006320:	f883 2188 	strb.w	r2, [r3, #392]	@ 0x188
				// Enable tracking - bcninfoTries
				LMIC.opmode |= OP_TRACK;
 8006324:	4b1b      	ldr	r3, [pc, #108]	@ (8006394 <decodeFrame+0x57c>)
 8006326:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800632a:	f043 0302 	orr.w	r3, r3, #2
 800632e:	b29a      	uxth	r2, r3
 8006330:	4b18      	ldr	r3, [pc, #96]	@ (8006394 <decodeFrame+0x57c>)
 8006332:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
				// Cleared later in txComplete handling - triggers EV_BEACON_FOUND
				ASSERT(LMIC.bcninfoTries != 0);
 8006336:	4b17      	ldr	r3, [pc, #92]	@ (8006394 <decodeFrame+0x57c>)
 8006338:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 800633c:	2b00      	cmp	r3, #0
 800633e:	d101      	bne.n	8006344 <decodeFrame+0x52c>
 8006340:	f7fe fa42 	bl	80047c8 <hal_failed>
				// Setup RX parameters
				LMIC.bcninfo.txtime =
						(LMIC.rxtime
 8006344:	4b13      	ldr	r3, [pc, #76]	@ (8006394 <decodeFrame+0x57c>)
 8006346:	685c      	ldr	r4, [r3, #4]
								+ ms2osticks(
 8006348:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800634a:	3301      	adds	r3, #1
 800634c:	6a3a      	ldr	r2, [r7, #32]
 800634e:	4413      	add	r3, r2
 8006350:	4618      	mov	r0, r3
 8006352:	f7fe fbe0 	bl	8004b16 <os_rlsbf2>
 8006356:	4603      	mov	r3, r0
 8006358:	461a      	mov	r2, r3
 800635a:	4613      	mov	r3, r2
 800635c:	011b      	lsls	r3, r3, #4
 800635e:	1a9b      	subs	r3, r3, r2
 8006360:	019b      	lsls	r3, r3, #6
 8006362:	18e2      	adds	r2, r4, r3
										os_rlsbf2(&opts[oidx + 1])
												* MCMD_BCNI_TUNIT)
								+ ms2osticksCeil(MCMD_BCNI_TUNIT / 2)
								- BCN_INTV_osticks);
 8006364:	4b0d      	ldr	r3, [pc, #52]	@ (800639c <decodeFrame+0x584>)
 8006366:	4413      	add	r3, r2
				LMIC.bcninfo.txtime =
 8006368:	4a0a      	ldr	r2, [pc, #40]	@ (8006394 <decodeFrame+0x57c>)
 800636a:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
				LMIC.bcninfo.flags = 0; // txtime above cannot be used as reference (BCN_PARTIAL|BCN_FULL cleared)
 800636e:	4b09      	ldr	r3, [pc, #36]	@ (8006394 <decodeFrame+0x57c>)
 8006370:	2200      	movs	r2, #0
 8006372:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
				calcBcnRxWindowFromMillis(MCMD_BCNI_TUNIT, 1); // error of +/-N ms 
 8006376:	2101      	movs	r1, #1
 8006378:	201e      	movs	r0, #30
 800637a:	f7fe ff25 	bl	80051c8 <calcBcnRxWindowFromMillis>
								e_.info = (LMIC.missedBcns |
										(osticks2us(LMIC.bcninfo.txtime + BCN_INTV_osticks
														- LMIC.bcnRxtime) << 8)),
								e_.time = MAIN::CDEV->ostime2ustime(LMIC.bcninfo.txtime + BCN_INTV_osticks)));
			}
			oidx += 4;
 800637e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006380:	3304      	adds	r3, #4
 8006382:	653b      	str	r3, [r7, #80]	@ 0x50
			continue;
 8006384:	e000      	b.n	8006388 <decodeFrame+0x570>
			continue;
 8006386:	bf00      	nop
	while (oidx < olen) {
 8006388:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800638a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800638c:	429a      	cmp	r2, r3
 800638e:	f6ff ae45 	blt.w	800601c <decodeFrame+0x204>
 8006392:	e006      	b.n	80063a2 <decodeFrame+0x58a>
 8006394:	200002e0 	.word	0x200002e0
 8006398:	0800fc8c 	.word	0x0800fc8c
 800639c:	ffc181e0 	.word	0xffc181e0
		}
		}EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = Base::lsbf4(&d[pend]),
						e_.info2 = Base::msbf4(&opts[oidx])));
		break;
 80063a0:	bf00      	nop
		EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = 0x1000000 + (oidx) + (olen<<8)));
	}

	if (!replayConf) {
 80063a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d11d      	bne.n	80063e4 <decodeFrame+0x5cc>
		// Handle payload only if not a replay
		// Decrypt payload - if any
		if (port >= 0 && pend - poff > 0)
 80063a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	db1a      	blt.n	80063e4 <decodeFrame+0x5cc>
 80063ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	dd15      	ble.n	80063e4 <decodeFrame+0x5cc>
			aes_cipher(port <= 0 ? LMIC.nwkKey : LMIC.artKey, LMIC.devaddr,
 80063b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	dc01      	bgt.n	80063c2 <decodeFrame+0x5aa>
 80063be:	482e      	ldr	r0, [pc, #184]	@ (8006478 <decodeFrame+0x660>)
 80063c0:	e000      	b.n	80063c4 <decodeFrame+0x5ac>
 80063c2:	482e      	ldr	r0, [pc, #184]	@ (800647c <decodeFrame+0x664>)
 80063c4:	4b2e      	ldr	r3, [pc, #184]	@ (8006480 <decodeFrame+0x668>)
 80063c6:	f8d3 4114 	ldr.w	r4, [r3, #276]	@ 0x114
 80063ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063ce:	4413      	add	r3, r2
 80063d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063d2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80063d4:	1a8a      	subs	r2, r1, r2
 80063d6:	9201      	str	r2, [sp, #4]
 80063d8:	9300      	str	r3, [sp, #0]
 80063da:	2301      	movs	r3, #1
 80063dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063de:	4621      	mov	r1, r4
 80063e0:	f7fe fd66 	bl	8004eb0 <aes_cipher>
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = Base::lsbf4(&d[pend]),
						e_.info2 = seqno));
	}

	if ( // NWK acks but we don't have a frame pending
 80063e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063e6:	2b00      	cmp	r3, #0
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = seqno,
						e_.info2 = ackup));
	}

	if (LMIC.txCnt != 0) // we requested an ACK
 80063e8:	4b25      	ldr	r3, [pc, #148]	@ (8006480 <decodeFrame+0x668>)
 80063ea:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d010      	beq.n	8006414 <decodeFrame+0x5fc>
		LMIC.txrxFlags |= ackup ? TXRX_ACK : TXRX_NACK;
 80063f2:	4b23      	ldr	r3, [pc, #140]	@ (8006480 <decodeFrame+0x668>)
 80063f4:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 80063f8:	b25b      	sxtb	r3, r3
 80063fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063fc:	2a00      	cmp	r2, #0
 80063fe:	d002      	beq.n	8006406 <decodeFrame+0x5ee>
 8006400:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 8006404:	e000      	b.n	8006408 <decodeFrame+0x5f0>
 8006406:	2240      	movs	r2, #64	@ 0x40
 8006408:	4313      	orrs	r3, r2
 800640a:	b25b      	sxtb	r3, r3
 800640c:	b2da      	uxtb	r2, r3
 800640e:	4b1c      	ldr	r3, [pc, #112]	@ (8006480 <decodeFrame+0x668>)
 8006410:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145

	if (port < 0) {
 8006414:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006416:	2b00      	cmp	r3, #0
 8006418:	da12      	bge.n	8006440 <decodeFrame+0x628>
		LMIC.txrxFlags |= TXRX_NOPORT;
 800641a:	4b19      	ldr	r3, [pc, #100]	@ (8006480 <decodeFrame+0x668>)
 800641c:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8006420:	f043 0320 	orr.w	r3, r3, #32
 8006424:	b2da      	uxtb	r2, r3
 8006426:	4b16      	ldr	r3, [pc, #88]	@ (8006480 <decodeFrame+0x668>)
 8006428:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		LMIC.dataBeg = poff;
 800642c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800642e:	b2da      	uxtb	r2, r3
 8006430:	4b13      	ldr	r3, [pc, #76]	@ (8006480 <decodeFrame+0x668>)
 8006432:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
		LMIC.dataLen = 0;
 8006436:	4b12      	ldr	r3, [pc, #72]	@ (8006480 <decodeFrame+0x668>)
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 800643e:	e016      	b.n	800646e <decodeFrame+0x656>
	} else {
		LMIC.txrxFlags |= TXRX_PORT;
 8006440:	4b0f      	ldr	r3, [pc, #60]	@ (8006480 <decodeFrame+0x668>)
 8006442:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8006446:	f043 0310 	orr.w	r3, r3, #16
 800644a:	b2da      	uxtb	r2, r3
 800644c:	4b0c      	ldr	r3, [pc, #48]	@ (8006480 <decodeFrame+0x668>)
 800644e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		LMIC.dataBeg = poff;
 8006452:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006454:	b2da      	uxtb	r2, r3
 8006456:	4b0a      	ldr	r3, [pc, #40]	@ (8006480 <decodeFrame+0x668>)
 8006458:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
		LMIC.dataLen = pend - poff;
 800645c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800645e:	b2da      	uxtb	r2, r3
 8006460:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006462:	b2db      	uxtb	r3, r3
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	b2da      	uxtb	r2, r3
 8006468:	4b05      	ldr	r3, [pc, #20]	@ (8006480 <decodeFrame+0x668>)
 800646a:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
	}
	return 1;
 800646e:	2301      	movs	r3, #1
}
 8006470:	4618      	mov	r0, r3
 8006472:	3764      	adds	r7, #100	@ 0x64
 8006474:	46bd      	mov	sp, r7
 8006476:	bd90      	pop	{r4, r7, pc}
 8006478:	200003d4 	.word	0x200003d4
 800647c:	200003e4 	.word	0x200003e4
 8006480:	200002e0 	.word	0x200002e0

08006484 <setupRx2>:

// ================================================================================
// TX/RX transaction support

static void setupRx2(void)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	af00      	add	r7, sp, #0
	LMIC.txrxFlags = TXRX_DNW2;
 8006488:	4b0d      	ldr	r3, [pc, #52]	@ (80064c0 <setupRx2+0x3c>)
 800648a:	2202      	movs	r2, #2
 800648c:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	LMIC.rps = dndr2rps(LMIC.dn2Dr);
 8006490:	4b0b      	ldr	r3, [pc, #44]	@ (80064c0 <setupRx2+0x3c>)
 8006492:	f893 312b 	ldrb.w	r3, [r3, #299]	@ 0x12b
 8006496:	4618      	mov	r0, r3
 8006498:	f7fe fae2 	bl	8004a60 <dndr2rps>
 800649c:	4603      	mov	r3, r0
 800649e:	461a      	mov	r2, r3
 80064a0:	4b07      	ldr	r3, [pc, #28]	@ (80064c0 <setupRx2+0x3c>)
 80064a2:	81da      	strh	r2, [r3, #14]
	LMIC.freq = LMIC.dn2Freq;
 80064a4:	4b06      	ldr	r3, [pc, #24]	@ (80064c0 <setupRx2+0x3c>)
 80064a6:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80064aa:	4a05      	ldr	r2, [pc, #20]	@ (80064c0 <setupRx2+0x3c>)
 80064ac:	6093      	str	r3, [r2, #8]
	LMIC.dataLen = 0;
 80064ae:	4b04      	ldr	r3, [pc, #16]	@ (80064c0 <setupRx2+0x3c>)
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
	os_radio(RADIO_RX);
 80064b6:	2002      	movs	r0, #2
 80064b8:	f002 fb8c 	bl	8008bd4 <os_radio>
}
 80064bc:	bf00      	nop
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	200002e0 	.word	0x200002e0

080064c4 <schedRx2>:

static void schedRx2(ostime_t delay, osjobcb_t func)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
	// Add 1.5 symbols we need 5 out of 8. Try to sync 1.5 symbols into the preamble.
	LMIC.rxtime = LMIC.txend + delay
 80064ce:	4b0e      	ldr	r3, [pc, #56]	@ (8006508 <schedRx2+0x44>)
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	18d1      	adds	r1, r2, r3
			+ (PAMBL_SYMS - MINRX_SYMS) * dr2hsym(LMIC.dn2Dr);
 80064d6:	4b0c      	ldr	r3, [pc, #48]	@ (8006508 <schedRx2+0x44>)
 80064d8:	f893 312b 	ldrb.w	r3, [r3, #299]	@ 0x12b
 80064dc:	461a      	mov	r2, r3
 80064de:	4b0b      	ldr	r3, [pc, #44]	@ (800650c <schedRx2+0x48>)
 80064e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80064e4:	4613      	mov	r3, r2
 80064e6:	005b      	lsls	r3, r3, #1
 80064e8:	4413      	add	r3, r2
 80064ea:	440b      	add	r3, r1
	LMIC.rxtime = LMIC.txend + delay
 80064ec:	4a06      	ldr	r2, [pc, #24]	@ (8006508 <schedRx2+0x44>)
 80064ee:	6053      	str	r3, [r2, #4]
	os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 80064f0:	4b05      	ldr	r3, [pc, #20]	@ (8006508 <schedRx2+0x44>)
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	3b40      	subs	r3, #64	@ 0x40
 80064f6:	683a      	ldr	r2, [r7, #0]
 80064f8:	4619      	mov	r1, r3
 80064fa:	4805      	ldr	r0, [pc, #20]	@ (8006510 <schedRx2+0x4c>)
 80064fc:	f001 fdae 	bl	800805c <os_setTimedCallback>
}
 8006500:	bf00      	nop
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	200002e0 	.word	0x200002e0
 800650c:	0800fcc0 	.word	0x0800fcc0
 8006510:	200002f4 	.word	0x200002f4

08006514 <setupRx1>:

static void setupRx1(osjobcb_t func)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
	LMIC.txrxFlags = TXRX_DNW1;
 800651c:	4b0d      	ldr	r3, [pc, #52]	@ (8006554 <setupRx1+0x40>)
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	// Turn LMIC.rps from TX over to RX
	LMIC.rps = setNocrc(LMIC.rps, 1);
 8006524:	4b0b      	ldr	r3, [pc, #44]	@ (8006554 <setupRx1+0x40>)
 8006526:	89db      	ldrh	r3, [r3, #14]
 8006528:	2101      	movs	r1, #1
 800652a:	4618      	mov	r0, r3
 800652c:	f7fe fa49 	bl	80049c2 <setNocrc>
 8006530:	4603      	mov	r3, r0
 8006532:	461a      	mov	r2, r3
 8006534:	4b07      	ldr	r3, [pc, #28]	@ (8006554 <setupRx1+0x40>)
 8006536:	81da      	strh	r2, [r3, #14]
	LMIC.dataLen = 0;
 8006538:	4b06      	ldr	r3, [pc, #24]	@ (8006554 <setupRx1+0x40>)
 800653a:	2200      	movs	r2, #0
 800653c:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
	LMIC.osjob.func = func;
 8006540:	4a04      	ldr	r2, [pc, #16]	@ (8006554 <setupRx1+0x40>)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	61d3      	str	r3, [r2, #28]
	os_radio(RADIO_RX);
 8006546:	2002      	movs	r0, #2
 8006548:	f002 fb44 	bl	8008bd4 <os_radio>
}
 800654c:	bf00      	nop
 800654e:	3708      	adds	r7, #8
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	200002e0 	.word	0x200002e0

08006558 <txDone>:

// Called by HAL once TX complete and delivers exact end of TX time stamp in LMIC.rxtime
static void txDone(ostime_t delay, osjobcb_t func)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
	if ((LMIC.opmode & (OP_TRACK | OP_PINGABLE | OP_PINGINI))
 8006562:	4b22      	ldr	r3, [pc, #136]	@ (80065ec <txDone+0x94>)
 8006564:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006568:	461a      	mov	r2, r3
 800656a:	f240 6302 	movw	r3, #1538	@ 0x602
 800656e:	4013      	ands	r3, r2
 8006570:	f240 4202 	movw	r2, #1026	@ 0x402
 8006574:	4293      	cmp	r3, r2
 8006576:	d10b      	bne.n	8006590 <txDone+0x38>
			== (OP_TRACK | OP_PINGABLE)) {
		rxschedInit(&LMIC.ping);    // note: reuses LMIC.frame buffer!
 8006578:	481d      	ldr	r0, [pc, #116]	@ (80065f0 <txDone+0x98>)
 800657a:	f7fe feab 	bl	80052d4 <rxschedInit>
		LMIC.opmode |= OP_PINGINI;
 800657e:	4b1b      	ldr	r3, [pc, #108]	@ (80065ec <txDone+0x94>)
 8006580:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006584:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006588:	b29a      	uxth	r2, r3
 800658a:	4b18      	ldr	r3, [pc, #96]	@ (80065ec <txDone+0x94>)
 800658c:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	setRx1Params();
	// LMIC.rxsyms carries the TX datarate (can be != LMIC.datarate [confirm retries etc.])
	// Setup receive - LMIC.rxtime is preloaded with 1.5 symbols offset to tune
	// into the middle of the 8 symbols preamble.
#if defined(CFG_eu868)
	if ( /* TX datarate */LMIC.rxsyms == DR_FSK) {
 8006590:	4b16      	ldr	r3, [pc, #88]	@ (80065ec <txDone+0x94>)
 8006592:	7c1b      	ldrb	r3, [r3, #16]
 8006594:	2b07      	cmp	r3, #7
 8006596:	d10a      	bne.n	80065ae <txDone+0x56>
		LMIC.rxtime = LMIC.txend + delay - PRERX_FSK * us2osticksRound(160);
 8006598:	4b14      	ldr	r3, [pc, #80]	@ (80065ec <txDone+0x94>)
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4413      	add	r3, r2
 80065a0:	3b05      	subs	r3, #5
 80065a2:	4a12      	ldr	r2, [pc, #72]	@ (80065ec <txDone+0x94>)
 80065a4:	6053      	str	r3, [r2, #4]
		LMIC.rxsyms = RXLEN_FSK;
 80065a6:	4b11      	ldr	r3, [pc, #68]	@ (80065ec <txDone+0x94>)
 80065a8:	2208      	movs	r2, #8
 80065aa:	741a      	strb	r2, [r3, #16]
 80065ac:	e012      	b.n	80065d4 <txDone+0x7c>
	} else
#endif
	{
		LMIC.rxtime = LMIC.txend + delay
 80065ae:	4b0f      	ldr	r3, [pc, #60]	@ (80065ec <txDone+0x94>)
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	18d1      	adds	r1, r2, r3
				+ (PAMBL_SYMS - MINRX_SYMS) * dr2hsym(LMIC.dndr);
 80065b6:	4b0d      	ldr	r3, [pc, #52]	@ (80065ec <txDone+0x94>)
 80065b8:	7c5b      	ldrb	r3, [r3, #17]
 80065ba:	461a      	mov	r2, r3
 80065bc:	4b0d      	ldr	r3, [pc, #52]	@ (80065f4 <txDone+0x9c>)
 80065be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80065c2:	4613      	mov	r3, r2
 80065c4:	005b      	lsls	r3, r3, #1
 80065c6:	4413      	add	r3, r2
 80065c8:	440b      	add	r3, r1
		LMIC.rxtime = LMIC.txend + delay
 80065ca:	4a08      	ldr	r2, [pc, #32]	@ (80065ec <txDone+0x94>)
 80065cc:	6053      	str	r3, [r2, #4]
		LMIC.rxsyms = MINRX_SYMS;
 80065ce:	4b07      	ldr	r3, [pc, #28]	@ (80065ec <txDone+0x94>)
 80065d0:	2205      	movs	r2, #5
 80065d2:	741a      	strb	r2, [r3, #16]
	}
	os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 80065d4:	4b05      	ldr	r3, [pc, #20]	@ (80065ec <txDone+0x94>)
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	3b40      	subs	r3, #64	@ 0x40
 80065da:	683a      	ldr	r2, [r7, #0]
 80065dc:	4619      	mov	r1, r3
 80065de:	4806      	ldr	r0, [pc, #24]	@ (80065f8 <txDone+0xa0>)
 80065e0:	f001 fd3c 	bl	800805c <os_setTimedCallback>
}
 80065e4:	bf00      	nop
 80065e6:	3708      	adds	r7, #8
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	200002e0 	.word	0x200002e0
 80065f0:	20000414 	.word	0x20000414
 80065f4:	0800fcc0 	.word	0x0800fcc0
 80065f8:	200002f4 	.word	0x200002f4

080065fc <onJoinFailed>:

// ======================================== Join frames

static void onJoinFailed(xref2osjob_t osjob)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
	// Notify app - must call LMIC_reset() to stop joining
	// otherwise join procedure continues.
	reportEvent(EV_JOIN_FAILED);
 8006604:	2008      	movs	r0, #8
 8006606:	f7ff faef 	bl	8005be8 <reportEvent>
}
 800660a:	bf00      	nop
 800660c:	3708      	adds	r7, #8
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
	...

08006614 <processJoinAccept>:

static bit_t processJoinAccept(void)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
	ASSERT(LMIC.txrxFlags != TXRX_DNW1 || LMIC.dataLen != 0);
 800661a:	4b99      	ldr	r3, [pc, #612]	@ (8006880 <processJoinAccept+0x26c>)
 800661c:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8006620:	2b01      	cmp	r3, #1
 8006622:	d106      	bne.n	8006632 <processJoinAccept+0x1e>
 8006624:	4b96      	ldr	r3, [pc, #600]	@ (8006880 <processJoinAccept+0x26c>)
 8006626:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 800662a:	2b00      	cmp	r3, #0
 800662c:	d101      	bne.n	8006632 <processJoinAccept+0x1e>
 800662e:	f7fe f8cb 	bl	80047c8 <hal_failed>
	ASSERT((LMIC.opmode & OP_TXRXPEND) != 0);
 8006632:	4b93      	ldr	r3, [pc, #588]	@ (8006880 <processJoinAccept+0x26c>)
 8006634:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006638:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800663c:	2b00      	cmp	r3, #0
 800663e:	d101      	bne.n	8006644 <processJoinAccept+0x30>
 8006640:	f7fe f8c2 	bl	80047c8 <hal_failed>

	if (LMIC.dataLen == 0) {
 8006644:	4b8e      	ldr	r3, [pc, #568]	@ (8006880 <processJoinAccept+0x26c>)
 8006646:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 800664a:	2b00      	cmp	r3, #0
 800664c:	d14c      	bne.n	80066e8 <processJoinAccept+0xd4>
		nojoinframe: if ((LMIC.opmode & OP_JOINING) == 0) {
 800664e:	bf00      	nop
 8006650:	e000      	b.n	8006654 <processJoinAccept+0x40>
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = dlen < 4 ? 0 : mic,
						e_.info2 = hdr + (dlen<<8)));
		badframe: if ((LMIC.txrxFlags & TXRX_DNW1) != 0)
			return 0;
		goto nojoinframe;
 8006652:	bf00      	nop
		nojoinframe: if ((LMIC.opmode & OP_JOINING) == 0) {
 8006654:	4b8a      	ldr	r3, [pc, #552]	@ (8006880 <processJoinAccept+0x26c>)
 8006656:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800665a:	f003 0304 	and.w	r3, r3, #4
 800665e:	2b00      	cmp	r3, #0
 8006660:	d123      	bne.n	80066aa <processJoinAccept+0x96>
			ASSERT((LMIC.opmode & OP_REJOIN) != 0);
 8006662:	4b87      	ldr	r3, [pc, #540]	@ (8006880 <processJoinAccept+0x26c>)
 8006664:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006668:	f003 0320 	and.w	r3, r3, #32
 800666c:	2b00      	cmp	r3, #0
 800666e:	d101      	bne.n	8006674 <processJoinAccept+0x60>
 8006670:	f7fe f8aa 	bl	80047c8 <hal_failed>
			LMIC.opmode &= ~(OP_REJOIN | OP_TXRXPEND);
 8006674:	4b82      	ldr	r3, [pc, #520]	@ (8006880 <processJoinAccept+0x26c>)
 8006676:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800667a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800667e:	b29a      	uxth	r2, r3
 8006680:	4b7f      	ldr	r3, [pc, #508]	@ (8006880 <processJoinAccept+0x26c>)
 8006682:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			if (LMIC.rejoinCnt < 10)
 8006686:	4b7e      	ldr	r3, [pc, #504]	@ (8006880 <processJoinAccept+0x26c>)
 8006688:	f893 30b2 	ldrb.w	r3, [r3, #178]	@ 0xb2
 800668c:	2b09      	cmp	r3, #9
 800668e:	d807      	bhi.n	80066a0 <processJoinAccept+0x8c>
				LMIC.rejoinCnt++;
 8006690:	4b7b      	ldr	r3, [pc, #492]	@ (8006880 <processJoinAccept+0x26c>)
 8006692:	f893 30b2 	ldrb.w	r3, [r3, #178]	@ 0xb2
 8006696:	3301      	adds	r3, #1
 8006698:	b2da      	uxtb	r2, r3
 800669a:	4b79      	ldr	r3, [pc, #484]	@ (8006880 <processJoinAccept+0x26c>)
 800669c:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
			reportEvent(EV_REJOIN_FAILED);
 80066a0:	2009      	movs	r0, #9
 80066a2:	f7ff faa1 	bl	8005be8 <reportEvent>
			return 1;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e0e6      	b.n	8006878 <processJoinAccept+0x264>
		LMIC.opmode &= ~OP_TXRXPEND;
 80066aa:	4b75      	ldr	r3, [pc, #468]	@ (8006880 <processJoinAccept+0x26c>)
 80066ac:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80066b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	4b72      	ldr	r3, [pc, #456]	@ (8006880 <processJoinAccept+0x26c>)
 80066b8:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		ostime_t delay = nextJoinState();
 80066bc:	f7ff fa22 	bl	8005b04 <nextJoinState>
 80066c0:	6078      	str	r0, [r7, #4]
		os_setTimedCallback(&LMIC.osjob, os_getTime() + delay,
 80066c2:	f001 fc61 	bl	8007f88 <os_getTime>
 80066c6:	4602      	mov	r2, r0
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	18d1      	adds	r1, r2, r3
				(delay & 1) != 0 ? FUNC_ADDR(onJoinFailed) // one JOIN iteration done and failed
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f003 0301 	and.w	r3, r3, #1
		os_setTimedCallback(&LMIC.osjob, os_getTime() + delay,
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d001      	beq.n	80066da <processJoinAccept+0xc6>
 80066d6:	4b6b      	ldr	r3, [pc, #428]	@ (8006884 <processJoinAccept+0x270>)
 80066d8:	e000      	b.n	80066dc <processJoinAccept+0xc8>
 80066da:	4b6b      	ldr	r3, [pc, #428]	@ (8006888 <processJoinAccept+0x274>)
 80066dc:	461a      	mov	r2, r3
 80066de:	486b      	ldr	r0, [pc, #428]	@ (800688c <processJoinAccept+0x278>)
 80066e0:	f001 fcbc 	bl	800805c <os_setTimedCallback>
		return 1;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e0c7      	b.n	8006878 <processJoinAccept+0x264>
	u1_t hdr = LMIC.frame[0];
 80066e8:	4b65      	ldr	r3, [pc, #404]	@ (8006880 <processJoinAccept+0x26c>)
 80066ea:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 80066ee:	757b      	strb	r3, [r7, #21]
	u1_t dlen = LMIC.dataLen;
 80066f0:	4b63      	ldr	r3, [pc, #396]	@ (8006880 <processJoinAccept+0x26c>)
 80066f2:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80066f6:	75fb      	strb	r3, [r7, #23]
	u4_t mic = os_rlsbf4(&LMIC.frame[dlen - 4]); // safe before modified by encrypt!
 80066f8:	7dfb      	ldrb	r3, [r7, #23]
 80066fa:	3b04      	subs	r3, #4
 80066fc:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006700:	4a5f      	ldr	r2, [pc, #380]	@ (8006880 <processJoinAccept+0x26c>)
 8006702:	4413      	add	r3, r2
 8006704:	4618      	mov	r0, r3
 8006706:	f7fe fa1b 	bl	8004b40 <os_rlsbf4>
 800670a:	6138      	str	r0, [r7, #16]
	if ((dlen != LEN_JA && dlen != LEN_JAEXT)
 800670c:	7dfb      	ldrb	r3, [r7, #23]
 800670e:	2b11      	cmp	r3, #17
 8006710:	d002      	beq.n	8006718 <processJoinAccept+0x104>
 8006712:	7dfb      	ldrb	r3, [r7, #23]
 8006714:	2b21      	cmp	r3, #33	@ 0x21
 8006716:	d104      	bne.n	8006722 <processJoinAccept+0x10e>
			|| (hdr & (HDR_FTYPE | HDR_MAJOR))
 8006718:	7d7b      	ldrb	r3, [r7, #21]
 800671a:	f003 03e3 	and.w	r3, r3, #227	@ 0xe3
 800671e:	2b20      	cmp	r3, #32
 8006720:	d00b      	beq.n	800673a <processJoinAccept+0x126>
		badframe: if ((LMIC.txrxFlags & TXRX_DNW1) != 0)
 8006722:	bf00      	nop
 8006724:	e000      	b.n	8006728 <processJoinAccept+0x114>
	}
	aes_encrypt(LMIC.frame + 1, dlen - 1);
	if (!aes_verifyMic0(LMIC.frame, dlen - 4)) {
		EV(specCond, ERR, (e_.reason = EV::specCond_t::JOIN_BAD_MIC,
						e_.info = mic));
		goto badframe;
 8006726:	bf00      	nop
		badframe: if ((LMIC.txrxFlags & TXRX_DNW1) != 0)
 8006728:	4b55      	ldr	r3, [pc, #340]	@ (8006880 <processJoinAccept+0x26c>)
 800672a:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 800672e:	f003 0301 	and.w	r3, r3, #1
 8006732:	2b00      	cmp	r3, #0
 8006734:	d08d      	beq.n	8006652 <processJoinAccept+0x3e>
			return 0;
 8006736:	2300      	movs	r3, #0
 8006738:	e09e      	b.n	8006878 <processJoinAccept+0x264>
	aes_encrypt(LMIC.frame + 1, dlen - 1);
 800673a:	4a55      	ldr	r2, [pc, #340]	@ (8006890 <processJoinAccept+0x27c>)
 800673c:	7dfb      	ldrb	r3, [r7, #23]
 800673e:	3b01      	subs	r3, #1
 8006740:	4619      	mov	r1, r3
 8006742:	4610      	mov	r0, r2
 8006744:	f7fe fb9e 	bl	8004e84 <aes_encrypt>
	if (!aes_verifyMic0(LMIC.frame, dlen - 4)) {
 8006748:	7dfb      	ldrb	r3, [r7, #23]
 800674a:	3b04      	subs	r3, #4
 800674c:	4619      	mov	r1, r3
 800674e:	4851      	ldr	r0, [pc, #324]	@ (8006894 <processJoinAccept+0x280>)
 8006750:	f7fe fb76 	bl	8004e40 <aes_verifyMic0>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d0e5      	beq.n	8006726 <processJoinAccept+0x112>
	}

	u4_t addr = os_rlsbf4(LMIC.frame + OFF_JA_DEVADDR);
 800675a:	4b4f      	ldr	r3, [pc, #316]	@ (8006898 <processJoinAccept+0x284>)
 800675c:	4618      	mov	r0, r3
 800675e:	f7fe f9ef 	bl	8004b40 <os_rlsbf4>
 8006762:	60f8      	str	r0, [r7, #12]
	LMIC.devaddr = addr;
 8006764:	4a46      	ldr	r2, [pc, #280]	@ (8006880 <processJoinAccept+0x26c>)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
	LMIC.netid = os_rlsbf4(&LMIC.frame[OFF_JA_NETID]) & 0xFFFFFF;
 800676c:	484b      	ldr	r0, [pc, #300]	@ (800689c <processJoinAccept+0x288>)
 800676e:	f7fe f9e7 	bl	8004b40 <os_rlsbf4>
 8006772:	4603      	mov	r3, r0
 8006774:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006778:	4a41      	ldr	r2, [pc, #260]	@ (8006880 <processJoinAccept+0x26c>)
 800677a:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

#if defined(CFG_eu868)
	initDefaultChannels(0);
 800677e:	2000      	movs	r0, #0
 8006780:	f7fe ff12 	bl	80055a8 <initDefaultChannels>
#endif
	if (dlen > LEN_JA) {
 8006784:	7dfb      	ldrb	r3, [r7, #23]
 8006786:	2b11      	cmp	r3, #17
 8006788:	d920      	bls.n	80067cc <processJoinAccept+0x1b8>
#if defined(CFG_us915)
        goto badframe;
#endif
		dlen = OFF_CFLIST;
 800678a:	230d      	movs	r3, #13
 800678c:	75fb      	strb	r3, [r7, #23]
		for (u1_t chidx = 3; chidx < 8; chidx++, dlen += 3) {
 800678e:	2303      	movs	r3, #3
 8006790:	75bb      	strb	r3, [r7, #22]
 8006792:	e018      	b.n	80067c6 <processJoinAccept+0x1b2>
			u4_t freq = convFreq(&LMIC.frame[dlen]);
 8006794:	7dfb      	ldrb	r3, [r7, #23]
 8006796:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800679a:	4a39      	ldr	r2, [pc, #228]	@ (8006880 <processJoinAccept+0x26c>)
 800679c:	4413      	add	r3, r2
 800679e:	4618      	mov	r0, r3
 80067a0:	f7ff f802 	bl	80057a8 <convFreq>
 80067a4:	60b8      	str	r0, [r7, #8]
			if (freq)
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d006      	beq.n	80067ba <processJoinAccept+0x1a6>
				LMIC_setupChannel(chidx, freq, 0, -1);
 80067ac:	7db8      	ldrb	r0, [r7, #22]
 80067ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80067b2:	2200      	movs	r2, #0
 80067b4:	68b9      	ldr	r1, [r7, #8]
 80067b6:	f7fe ff7d 	bl	80056b4 <LMIC_setupChannel>
		for (u1_t chidx = 3; chidx < 8; chidx++, dlen += 3) {
 80067ba:	7dbb      	ldrb	r3, [r7, #22]
 80067bc:	3301      	adds	r3, #1
 80067be:	75bb      	strb	r3, [r7, #22]
 80067c0:	7dfb      	ldrb	r3, [r7, #23]
 80067c2:	3303      	adds	r3, #3
 80067c4:	75fb      	strb	r3, [r7, #23]
 80067c6:	7dbb      	ldrb	r3, [r7, #22]
 80067c8:	2b07      	cmp	r3, #7
 80067ca:	d9e3      	bls.n	8006794 <processJoinAccept+0x180>
		}
	}

	// already incremented when JOIN REQ got sent off
	aes_sessKeys(LMIC.devNonce - 1, &LMIC.frame[OFF_JA_ARTNONCE], LMIC.nwkKey,
 80067cc:	4b2c      	ldr	r3, [pc, #176]	@ (8006880 <processJoinAccept+0x26c>)
 80067ce:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 80067d2:	3b01      	subs	r3, #1
 80067d4:	b298      	uxth	r0, r3
 80067d6:	4b32      	ldr	r3, [pc, #200]	@ (80068a0 <processJoinAccept+0x28c>)
 80067d8:	4a32      	ldr	r2, [pc, #200]	@ (80068a4 <processJoinAccept+0x290>)
 80067da:	492d      	ldr	r1, [pc, #180]	@ (8006890 <processJoinAccept+0x27c>)
 80067dc:	f7fe fbac 	bl	8004f38 <aes_sessKeys>
					e_.mic = mic,
					e_.reason = ((LMIC.opmode & OP_REJOIN) != 0
							? EV::joininfo_t::REJOIN_ACCEPT
							: EV::joininfo_t::ACCEPT)));

	ASSERT((LMIC.opmode & (OP_JOINING | OP_REJOIN)) != 0);
 80067e0:	4b27      	ldr	r3, [pc, #156]	@ (8006880 <processJoinAccept+0x26c>)
 80067e2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80067e6:	f003 0324 	and.w	r3, r3, #36	@ 0x24
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <processJoinAccept+0x1de>
 80067ee:	f7fd ffeb 	bl	80047c8 <hal_failed>
	if ((LMIC.opmode & OP_REJOIN) != 0) {
 80067f2:	4b23      	ldr	r3, [pc, #140]	@ (8006880 <processJoinAccept+0x26c>)
 80067f4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80067f8:	f003 0320 	and.w	r3, r3, #32
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00e      	beq.n	800681e <processJoinAccept+0x20a>
		// Lower DR every try below current UP DR
		LMIC.datarate = lowerDR(LMIC.datarate, LMIC.rejoinCnt);
 8006800:	4b1f      	ldr	r3, [pc, #124]	@ (8006880 <processJoinAccept+0x26c>)
 8006802:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8006806:	4a1e      	ldr	r2, [pc, #120]	@ (8006880 <processJoinAccept+0x26c>)
 8006808:	f892 20b2 	ldrb.w	r2, [r2, #178]	@ 0xb2
 800680c:	4611      	mov	r1, r2
 800680e:	4618      	mov	r0, r3
 8006810:	f7fe f968 	bl	8004ae4 <lowerDR>
 8006814:	4603      	mov	r3, r0
 8006816:	461a      	mov	r2, r3
 8006818:	4b19      	ldr	r3, [pc, #100]	@ (8006880 <processJoinAccept+0x26c>)
 800681a:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
	}
	LMIC.opmode &= ~(OP_JOINING | OP_TRACK | OP_REJOIN | OP_TXRXPEND
 800681e:	4b18      	ldr	r3, [pc, #96]	@ (8006880 <processJoinAccept+0x26c>)
 8006820:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006824:	f423 7329 	bic.w	r3, r3, #676	@ 0x2a4
 8006828:	f023 0302 	bic.w	r3, r3, #2
 800682c:	b29a      	uxth	r2, r3
 800682e:	4b14      	ldr	r3, [pc, #80]	@ (8006880 <processJoinAccept+0x26c>)
 8006830:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			| OP_PINGINI) | OP_NEXTCHNL;
	LMIC.txCnt = 0;
 8006834:	4b12      	ldr	r3, [pc, #72]	@ (8006880 <processJoinAccept+0x26c>)
 8006836:	2200      	movs	r2, #0
 8006838:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	stateJustJoined();
 800683c:	f7ff f9f2 	bl	8005c24 <stateJustJoined>
	LMIC.dn2Dr = LMIC.frame[OFF_JA_DLSET] & 0x0F;
 8006840:	4b0f      	ldr	r3, [pc, #60]	@ (8006880 <processJoinAccept+0x26c>)
 8006842:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 8006846:	f003 030f 	and.w	r3, r3, #15
 800684a:	b2da      	uxtb	r2, r3
 800684c:	4b0c      	ldr	r3, [pc, #48]	@ (8006880 <processJoinAccept+0x26c>)
 800684e:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
	LMIC.rxDelay = LMIC.frame[OFF_JA_RXDLY];
 8006852:	4b0b      	ldr	r3, [pc, #44]	@ (8006880 <processJoinAccept+0x26c>)
 8006854:	f893 2154 	ldrb.w	r2, [r3, #340]	@ 0x154
 8006858:	4b09      	ldr	r3, [pc, #36]	@ (8006880 <processJoinAccept+0x26c>)
 800685a:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
	if (LMIC.rxDelay == 0)
 800685e:	4b08      	ldr	r3, [pc, #32]	@ (8006880 <processJoinAccept+0x26c>)
 8006860:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 8006864:	2b00      	cmp	r3, #0
 8006866:	d103      	bne.n	8006870 <processJoinAccept+0x25c>
		LMIC.rxDelay = 1;
 8006868:	4b05      	ldr	r3, [pc, #20]	@ (8006880 <processJoinAccept+0x26c>)
 800686a:	2201      	movs	r2, #1
 800686c:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
	reportEvent(EV_JOINED);
 8006870:	2006      	movs	r0, #6
 8006872:	f7ff f9b9 	bl	8005be8 <reportEvent>
	return 1;
 8006876:	2301      	movs	r3, #1
}
 8006878:	4618      	mov	r0, r3
 800687a:	3718      	adds	r7, #24
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	200002e0 	.word	0x200002e0
 8006884:	080065fd 	.word	0x080065fd
 8006888:	08005bd5 	.word	0x08005bd5
 800688c:	200002f4 	.word	0x200002f4
 8006890:	20000429 	.word	0x20000429
 8006894:	20000428 	.word	0x20000428
 8006898:	2000042f 	.word	0x2000042f
 800689c:	2000042c 	.word	0x2000042c
 80068a0:	200003e4 	.word	0x200003e4
 80068a4:	200003d4 	.word	0x200003d4

080068a8 <processRx2Jacc>:

static void processRx2Jacc(xref2osjob_t osjob)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
	if (LMIC.dataLen == 0)
 80068b0:	4b07      	ldr	r3, [pc, #28]	@ (80068d0 <processRx2Jacc+0x28>)
 80068b2:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d103      	bne.n	80068c2 <processRx2Jacc+0x1a>
		LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 80068ba:	4b05      	ldr	r3, [pc, #20]	@ (80068d0 <processRx2Jacc+0x28>)
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	processJoinAccept();
 80068c2:	f7ff fea7 	bl	8006614 <processJoinAccept>
}
 80068c6:	bf00      	nop
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	200002e0 	.word	0x200002e0

080068d4 <setupRx2Jacc>:

static void setupRx2Jacc(xref2osjob_t osjob)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
	LMIC.osjob.func = FUNC_ADDR(processRx2Jacc);
 80068dc:	4b04      	ldr	r3, [pc, #16]	@ (80068f0 <setupRx2Jacc+0x1c>)
 80068de:	4a05      	ldr	r2, [pc, #20]	@ (80068f4 <setupRx2Jacc+0x20>)
 80068e0:	61da      	str	r2, [r3, #28]
	setupRx2();
 80068e2:	f7ff fdcf 	bl	8006484 <setupRx2>
}
 80068e6:	bf00      	nop
 80068e8:	3708      	adds	r7, #8
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	200002e0 	.word	0x200002e0
 80068f4:	080068a9 	.word	0x080068a9

080068f8 <processRx1Jacc>:

static void processRx1Jacc(xref2osjob_t osjob)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
	if (LMIC.dataLen == 0 || !processJoinAccept())
 8006900:	4b08      	ldr	r3, [pc, #32]	@ (8006924 <processRx1Jacc+0x2c>)
 8006902:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8006906:	2b00      	cmp	r3, #0
 8006908:	d004      	beq.n	8006914 <processRx1Jacc+0x1c>
 800690a:	f7ff fe83 	bl	8006614 <processJoinAccept>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d103      	bne.n	800691c <processRx1Jacc+0x24>
		schedRx2(DELAY_JACC2_osticks, FUNC_ADDR(setupRx2Jacc));
 8006914:	4904      	ldr	r1, [pc, #16]	@ (8006928 <processRx1Jacc+0x30>)
 8006916:	4805      	ldr	r0, [pc, #20]	@ (800692c <processRx1Jacc+0x34>)
 8006918:	f7ff fdd4 	bl	80064c4 <schedRx2>
}
 800691c:	bf00      	nop
 800691e:	3708      	adds	r7, #8
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	200002e0 	.word	0x200002e0
 8006928:	080068d5 	.word	0x080068d5
 800692c:	0002ee00 	.word	0x0002ee00

08006930 <setupRx1Jacc>:

static void setupRx1Jacc(xref2osjob_t osjob)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
	setupRx1(FUNC_ADDR(processRx1Jacc));
 8006938:	4803      	ldr	r0, [pc, #12]	@ (8006948 <setupRx1Jacc+0x18>)
 800693a:	f7ff fdeb 	bl	8006514 <setupRx1>
}
 800693e:	bf00      	nop
 8006940:	3708      	adds	r7, #8
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	080068f9 	.word	0x080068f9

0800694c <jreqDone>:

static void jreqDone(xref2osjob_t osjob)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
	txDone(DELAY_JACC1_osticks, FUNC_ADDR(setupRx1Jacc));
 8006954:	4903      	ldr	r1, [pc, #12]	@ (8006964 <jreqDone+0x18>)
 8006956:	4804      	ldr	r0, [pc, #16]	@ (8006968 <jreqDone+0x1c>)
 8006958:	f7ff fdfe 	bl	8006558 <txDone>
}
 800695c:	bf00      	nop
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	08006931 	.word	0x08006931
 8006968:	00027100 	.word	0x00027100

0800696c <processRx2DnDataDelay>:

// Fwd decl.
static bit_t processDnData(void);

static void processRx2DnDataDelay(xref2osjob_t osjob)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
	processDnData();
 8006974:	f000 fbc6 	bl	8007104 <processDnData>
}
 8006978:	bf00      	nop
 800697a:	3708      	adds	r7, #8
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <processRx2DnData>:

static void processRx2DnData(xref2osjob_t osjob)
{
 8006980:	b590      	push	{r4, r7, lr}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
	if (LMIC.dataLen == 0) {
 8006988:	4b0f      	ldr	r3, [pc, #60]	@ (80069c8 <processRx2DnData+0x48>)
 800698a:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 800698e:	2b00      	cmp	r3, #0
 8006990:	d115      	bne.n	80069be <processRx2DnData+0x3e>
		LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 8006992:	4b0d      	ldr	r3, [pc, #52]	@ (80069c8 <processRx2DnData+0x48>)
 8006994:	2200      	movs	r2, #0
 8006996:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		// Delay callback processing to avoid up TX while gateway is txing our missed frame! 
		// Since DNW2 uses SF12 by default we wait 3 secs.
		os_setTimedCallback(&LMIC.osjob,
				(os_getTime() + DNW2_SAFETY_ZONE + rndDelay(2)),
 800699a:	f001 faf5 	bl	8007f88 <os_getTime>
 800699e:	4603      	mov	r3, r0
 80069a0:	f503 34bb 	add.w	r4, r3, #95744	@ 0x17600
 80069a4:	f504 7480 	add.w	r4, r4, #256	@ 0x100
 80069a8:	2002      	movs	r0, #2
 80069aa:	f7fe fd4f 	bl	800544c <rndDelay>
 80069ae:	4603      	mov	r3, r0
		os_setTimedCallback(&LMIC.osjob,
 80069b0:	4423      	add	r3, r4
 80069b2:	4a06      	ldr	r2, [pc, #24]	@ (80069cc <processRx2DnData+0x4c>)
 80069b4:	4619      	mov	r1, r3
 80069b6:	4806      	ldr	r0, [pc, #24]	@ (80069d0 <processRx2DnData+0x50>)
 80069b8:	f001 fb50 	bl	800805c <os_setTimedCallback>
				FUNC_ADDR(processRx2DnDataDelay));
		return;
 80069bc:	e001      	b.n	80069c2 <processRx2DnData+0x42>
	}
	processDnData();
 80069be:	f000 fba1 	bl	8007104 <processDnData>
}
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd90      	pop	{r4, r7, pc}
 80069c8:	200002e0 	.word	0x200002e0
 80069cc:	0800696d 	.word	0x0800696d
 80069d0:	200002f4 	.word	0x200002f4

080069d4 <setupRx2DnData>:

static void setupRx2DnData(xref2osjob_t osjob)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
	LMIC.osjob.func = FUNC_ADDR(processRx2DnData);
 80069dc:	4b04      	ldr	r3, [pc, #16]	@ (80069f0 <setupRx2DnData+0x1c>)
 80069de:	4a05      	ldr	r2, [pc, #20]	@ (80069f4 <setupRx2DnData+0x20>)
 80069e0:	61da      	str	r2, [r3, #28]
	setupRx2();
 80069e2:	f7ff fd4f 	bl	8006484 <setupRx2>
}
 80069e6:	bf00      	nop
 80069e8:	3708      	adds	r7, #8
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	200002e0 	.word	0x200002e0
 80069f4:	08006981 	.word	0x08006981

080069f8 <processRx1DnData>:

static void processRx1DnData(xref2osjob_t osjob)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
	if (LMIC.dataLen == 0 || !processDnData())
 8006a00:	4b0d      	ldr	r3, [pc, #52]	@ (8006a38 <processRx1DnData+0x40>)
 8006a02:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d004      	beq.n	8006a14 <processRx1DnData+0x1c>
 8006a0a:	f000 fb7b 	bl	8007104 <processDnData>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10c      	bne.n	8006a2e <processRx1DnData+0x36>
		schedRx2(sec2osticks(LMIC.rxDelay + (int )DELAY_EXTDNW2),
 8006a14:	4b08      	ldr	r3, [pc, #32]	@ (8006a38 <processRx1DnData+0x40>)
 8006a16:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006a22:	fb02 f303 	mul.w	r3, r2, r3
 8006a26:	4905      	ldr	r1, [pc, #20]	@ (8006a3c <processRx1DnData+0x44>)
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7ff fd4b 	bl	80064c4 <schedRx2>
				FUNC_ADDR(setupRx2DnData));
}
 8006a2e:	bf00      	nop
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	200002e0 	.word	0x200002e0
 8006a3c:	080069d5 	.word	0x080069d5

08006a40 <setupRx1DnData>:

static void setupRx1DnData(xref2osjob_t osjob)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
	setupRx1(FUNC_ADDR(processRx1DnData));
 8006a48:	4803      	ldr	r0, [pc, #12]	@ (8006a58 <setupRx1DnData+0x18>)
 8006a4a:	f7ff fd63 	bl	8006514 <setupRx1>
}
 8006a4e:	bf00      	nop
 8006a50:	3708      	adds	r7, #8
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	080069f9 	.word	0x080069f9

08006a5c <updataDone>:

static void updataDone(xref2osjob_t osjob)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
	txDone(sec2osticks(LMIC.rxDelay), FUNC_ADDR(setupRx1DnData));
 8006a64:	4b07      	ldr	r3, [pc, #28]	@ (8006a84 <updataDone+0x28>)
 8006a66:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006a70:	fb02 f303 	mul.w	r3, r2, r3
 8006a74:	4904      	ldr	r1, [pc, #16]	@ (8006a88 <updataDone+0x2c>)
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7ff fd6e 	bl	8006558 <txDone>
}
 8006a7c:	bf00      	nop
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	200002e0 	.word	0x200002e0
 8006a88:	08006a41 	.word	0x08006a41

08006a8c <buildDataFrame>:

// ======================================== 

static void buildDataFrame(void)
{
 8006a8c:	b590      	push	{r4, r7, lr}
 8006a8e:	b087      	sub	sp, #28
 8006a90:	af02      	add	r7, sp, #8
	bit_t txdata = ((LMIC.opmode & (OP_TXDATA | OP_POLL)) != OP_POLL);
 8006a92:	4ba3      	ldr	r3, [pc, #652]	@ (8006d20 <buildDataFrame+0x294>)
 8006a94:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006a98:	f003 0318 	and.w	r3, r3, #24
 8006a9c:	2b10      	cmp	r3, #16
 8006a9e:	bf14      	ite	ne
 8006aa0:	2301      	movne	r3, #1
 8006aa2:	2300      	moveq	r3, #0
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	73fb      	strb	r3, [r7, #15]
	u1_t dlen = txdata ? LMIC.pendTxLen : 0;
 8006aa8:	7bfb      	ldrb	r3, [r7, #15]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <buildDataFrame+0x2a>
 8006aae:	4b9c      	ldr	r3, [pc, #624]	@ (8006d20 <buildDataFrame+0x294>)
 8006ab0:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 8006ab4:	e000      	b.n	8006ab8 <buildDataFrame+0x2c>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	71bb      	strb	r3, [r7, #6]

	// Piggyback MAC options
	// Prioritize by importance
	int end = OFF_DAT_OPTS;
 8006aba:	2308      	movs	r3, #8
 8006abc:	60bb      	str	r3, [r7, #8]
	if ((LMIC.opmode & (OP_TRACK | OP_PINGABLE)) == (OP_TRACK | OP_PINGABLE)) {
 8006abe:	4b98      	ldr	r3, [pc, #608]	@ (8006d20 <buildDataFrame+0x294>)
 8006ac0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	f240 4302 	movw	r3, #1026	@ 0x402
 8006aca:	4013      	ands	r3, r2
 8006acc:	f240 4202 	movw	r2, #1026	@ 0x402
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d11c      	bne.n	8006b0e <buildDataFrame+0x82>
		// Indicate pingability in every UP frame
		LMIC.frame[end] = MCMD_PING_IND;
 8006ad4:	4a92      	ldr	r2, [pc, #584]	@ (8006d20 <buildDataFrame+0x294>)
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	4413      	add	r3, r2
 8006ada:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006ade:	2210      	movs	r2, #16
 8006ae0:	701a      	strb	r2, [r3, #0]
		LMIC.frame[end + 1] = LMIC.ping.dr | (LMIC.ping.intvExp << 4);
 8006ae2:	4b8f      	ldr	r3, [pc, #572]	@ (8006d20 <buildDataFrame+0x294>)
 8006ae4:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8006ae8:	b25a      	sxtb	r2, r3
 8006aea:	4b8d      	ldr	r3, [pc, #564]	@ (8006d20 <buildDataFrame+0x294>)
 8006aec:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8006af0:	011b      	lsls	r3, r3, #4
 8006af2:	b25b      	sxtb	r3, r3
 8006af4:	4313      	orrs	r3, r2
 8006af6:	b25a      	sxtb	r2, r3
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	3301      	adds	r3, #1
 8006afc:	b2d1      	uxtb	r1, r2
 8006afe:	4a88      	ldr	r2, [pc, #544]	@ (8006d20 <buildDataFrame+0x294>)
 8006b00:	4413      	add	r3, r2
 8006b02:	460a      	mov	r2, r1
 8006b04:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		end += 2;
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	3302      	adds	r3, #2
 8006b0c:	60bb      	str	r3, [r7, #8]
	}
	if (LMIC.dutyCapAns) {
 8006b0e:	4b84      	ldr	r3, [pc, #528]	@ (8006d20 <buildDataFrame+0x294>)
 8006b10:	f893 3129 	ldrb.w	r3, [r3, #297]	@ 0x129
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d00d      	beq.n	8006b34 <buildDataFrame+0xa8>
		LMIC.frame[end] = MCMD_DCAP_ANS;
 8006b18:	4a81      	ldr	r2, [pc, #516]	@ (8006d20 <buildDataFrame+0x294>)
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006b22:	2204      	movs	r2, #4
 8006b24:	701a      	strb	r2, [r3, #0]
		end += 1;
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	60bb      	str	r3, [r7, #8]
		LMIC.dutyCapAns = 0;
 8006b2c:	4b7c      	ldr	r3, [pc, #496]	@ (8006d20 <buildDataFrame+0x294>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
	}
	if (LMIC.dn2Ans) {
 8006b34:	4b7a      	ldr	r3, [pc, #488]	@ (8006d20 <buildDataFrame+0x294>)
 8006b36:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d01a      	beq.n	8006b74 <buildDataFrame+0xe8>
		LMIC.frame[end + 0] = MCMD_DN2P_ANS;
 8006b3e:	4a78      	ldr	r2, [pc, #480]	@ (8006d20 <buildDataFrame+0x294>)
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	4413      	add	r3, r2
 8006b44:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006b48:	2205      	movs	r2, #5
 8006b4a:	701a      	strb	r2, [r3, #0]
		LMIC.frame[end + 1] = LMIC.dn2Ans & ~MCMD_DN2P_ANS_RFU;
 8006b4c:	4b74      	ldr	r3, [pc, #464]	@ (8006d20 <buildDataFrame+0x294>)
 8006b4e:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	3301      	adds	r3, #1
 8006b56:	f002 0203 	and.w	r2, r2, #3
 8006b5a:	b2d1      	uxtb	r1, r2
 8006b5c:	4a70      	ldr	r2, [pc, #448]	@ (8006d20 <buildDataFrame+0x294>)
 8006b5e:	4413      	add	r3, r2
 8006b60:	460a      	mov	r2, r1
 8006b62:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		end += 2;
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	3302      	adds	r3, #2
 8006b6a:	60bb      	str	r3, [r7, #8]
		LMIC.dn2Ans = 0;
 8006b6c:	4b6c      	ldr	r3, [pc, #432]	@ (8006d20 <buildDataFrame+0x294>)
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
	}
	if (LMIC.devsAns) {  // answer to device status
 8006b74:	4b6a      	ldr	r3, [pc, #424]	@ (8006d20 <buildDataFrame+0x294>)
 8006b76:	f893 3126 	ldrb.w	r3, [r3, #294]	@ 0x126
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d021      	beq.n	8006bc2 <buildDataFrame+0x136>
		LMIC.frame[end + 0] = MCMD_DEVS_ANS;
 8006b7e:	4a68      	ldr	r2, [pc, #416]	@ (8006d20 <buildDataFrame+0x294>)
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	4413      	add	r3, r2
 8006b84:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006b88:	2206      	movs	r2, #6
 8006b8a:	701a      	strb	r2, [r3, #0]
		LMIC.frame[end + 1] = os_getBattLevel();
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	1c5c      	adds	r4, r3, #1
 8006b90:	f7fe f869 	bl	8004c66 <os_getBattLevel>
 8006b94:	4603      	mov	r3, r0
 8006b96:	461a      	mov	r2, r3
 8006b98:	4b61      	ldr	r3, [pc, #388]	@ (8006d20 <buildDataFrame+0x294>)
 8006b9a:	4423      	add	r3, r4
 8006b9c:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		LMIC.frame[end + 2] = LMIC.margin;
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	3302      	adds	r3, #2
 8006ba4:	4a5e      	ldr	r2, [pc, #376]	@ (8006d20 <buildDataFrame+0x294>)
 8006ba6:	f892 1124 	ldrb.w	r1, [r2, #292]	@ 0x124
 8006baa:	4a5d      	ldr	r2, [pc, #372]	@ (8006d20 <buildDataFrame+0x294>)
 8006bac:	4413      	add	r3, r2
 8006bae:	460a      	mov	r2, r1
 8006bb0:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		end += 3;
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	3303      	adds	r3, #3
 8006bb8:	60bb      	str	r3, [r7, #8]
		LMIC.devsAns = 0;
 8006bba:	4b59      	ldr	r3, [pc, #356]	@ (8006d20 <buildDataFrame+0x294>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
	}
	if (LMIC.ladrAns) {  // answer to ADR change
 8006bc2:	4b57      	ldr	r3, [pc, #348]	@ (8006d20 <buildDataFrame+0x294>)
 8006bc4:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d01a      	beq.n	8006c02 <buildDataFrame+0x176>
		LMIC.frame[end + 0] = MCMD_LADR_ANS;
 8006bcc:	4a54      	ldr	r2, [pc, #336]	@ (8006d20 <buildDataFrame+0x294>)
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006bd6:	2203      	movs	r2, #3
 8006bd8:	701a      	strb	r2, [r3, #0]
		LMIC.frame[end + 1] = LMIC.ladrAns & ~MCMD_LADR_ANS_RFU;
 8006bda:	4b51      	ldr	r3, [pc, #324]	@ (8006d20 <buildDataFrame+0x294>)
 8006bdc:	f893 2125 	ldrb.w	r2, [r3, #293]	@ 0x125
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	3301      	adds	r3, #1
 8006be4:	f002 0207 	and.w	r2, r2, #7
 8006be8:	b2d1      	uxtb	r1, r2
 8006bea:	4a4d      	ldr	r2, [pc, #308]	@ (8006d20 <buildDataFrame+0x294>)
 8006bec:	4413      	add	r3, r2
 8006bee:	460a      	mov	r2, r1
 8006bf0:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		end += 2;
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	3302      	adds	r3, #2
 8006bf8:	60bb      	str	r3, [r7, #8]
		LMIC.ladrAns = 0;
 8006bfa:	4b49      	ldr	r3, [pc, #292]	@ (8006d20 <buildDataFrame+0x294>)
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
	}
	if (LMIC.bcninfoTries > 0) {
 8006c02:	4b47      	ldr	r3, [pc, #284]	@ (8006d20 <buildDataFrame+0x294>)
 8006c04:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d009      	beq.n	8006c20 <buildDataFrame+0x194>
		LMIC.frame[end] = MCMD_BCNI_REQ;
 8006c0c:	4a44      	ldr	r2, [pc, #272]	@ (8006d20 <buildDataFrame+0x294>)
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	4413      	add	r3, r2
 8006c12:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006c16:	2212      	movs	r2, #18
 8006c18:	701a      	strb	r2, [r3, #0]
		end += 1;
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	60bb      	str	r3, [r7, #8]
	}
	if (LMIC.adrChanged) {
 8006c20:	4b3f      	ldr	r3, [pc, #252]	@ (8006d20 <buildDataFrame+0x294>)
 8006c22:	f893 3122 	ldrb.w	r3, [r3, #290]	@ 0x122
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00c      	beq.n	8006c44 <buildDataFrame+0x1b8>
		if (LMIC.adrAckReq < 0)
 8006c2a:	4b3d      	ldr	r3, [pc, #244]	@ (8006d20 <buildDataFrame+0x294>)
 8006c2c:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	da03      	bge.n	8006c3c <buildDataFrame+0x1b0>
			LMIC.adrAckReq = 0;
 8006c34:	4b3a      	ldr	r3, [pc, #232]	@ (8006d20 <buildDataFrame+0x294>)
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
		LMIC.adrChanged = 0;
 8006c3c:	4b38      	ldr	r3, [pc, #224]	@ (8006d20 <buildDataFrame+0x294>)
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
	}
	if (LMIC.pingSetAns != 0) {
 8006c44:	4b36      	ldr	r3, [pc, #216]	@ (8006d20 <buildDataFrame+0x294>)
 8006c46:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d01a      	beq.n	8006c84 <buildDataFrame+0x1f8>
		LMIC.frame[end + 0] = MCMD_PING_ANS;
 8006c4e:	4a34      	ldr	r2, [pc, #208]	@ (8006d20 <buildDataFrame+0x294>)
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006c58:	2211      	movs	r2, #17
 8006c5a:	701a      	strb	r2, [r3, #0]
		LMIC.frame[end + 1] = LMIC.pingSetAns & ~MCMD_PING_ANS_RFU;
 8006c5c:	4b30      	ldr	r3, [pc, #192]	@ (8006d20 <buildDataFrame+0x294>)
 8006c5e:	f893 2133 	ldrb.w	r2, [r3, #307]	@ 0x133
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	3301      	adds	r3, #1
 8006c66:	f002 0201 	and.w	r2, r2, #1
 8006c6a:	b2d1      	uxtb	r1, r2
 8006c6c:	4a2c      	ldr	r2, [pc, #176]	@ (8006d20 <buildDataFrame+0x294>)
 8006c6e:	4413      	add	r3, r2
 8006c70:	460a      	mov	r2, r1
 8006c72:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		end += 2;
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	3302      	adds	r3, #2
 8006c7a:	60bb      	str	r3, [r7, #8]
		LMIC.pingSetAns = 0;
 8006c7c:	4b28      	ldr	r3, [pc, #160]	@ (8006d20 <buildDataFrame+0x294>)
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
	}
	if (LMIC.snchAns) {
 8006c84:	4b26      	ldr	r3, [pc, #152]	@ (8006d20 <buildDataFrame+0x294>)
 8006c86:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d01a      	beq.n	8006cc4 <buildDataFrame+0x238>
		LMIC.frame[end + 0] = MCMD_SNCH_ANS;
 8006c8e:	4a24      	ldr	r2, [pc, #144]	@ (8006d20 <buildDataFrame+0x294>)
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	4413      	add	r3, r2
 8006c94:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006c98:	2207      	movs	r2, #7
 8006c9a:	701a      	strb	r2, [r3, #0]
		LMIC.frame[end + 1] = LMIC.snchAns & ~MCMD_SNCH_ANS_RFU;
 8006c9c:	4b20      	ldr	r3, [pc, #128]	@ (8006d20 <buildDataFrame+0x294>)
 8006c9e:	f893 212a 	ldrb.w	r2, [r3, #298]	@ 0x12a
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	f002 0203 	and.w	r2, r2, #3
 8006caa:	b2d1      	uxtb	r1, r2
 8006cac:	4a1c      	ldr	r2, [pc, #112]	@ (8006d20 <buildDataFrame+0x294>)
 8006cae:	4413      	add	r3, r2
 8006cb0:	460a      	mov	r2, r1
 8006cb2:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
		end += 2;
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	3302      	adds	r3, #2
 8006cba:	60bb      	str	r3, [r7, #8]
		LMIC.snchAns = 0;
 8006cbc:	4b18      	ldr	r3, [pc, #96]	@ (8006d20 <buildDataFrame+0x294>)
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
	}
	ASSERT(end <= OFF_DAT_OPTS + 16);
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	2b18      	cmp	r3, #24
 8006cc8:	dd01      	ble.n	8006cce <buildDataFrame+0x242>
 8006cca:	f7fd fd7d 	bl	80047c8 <hal_failed>

	u1_t flen = end + (txdata ? 5 + dlen : 4);
 8006cce:	7bfb      	ldrb	r3, [r7, #15]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d003      	beq.n	8006cdc <buildDataFrame+0x250>
 8006cd4:	79bb      	ldrb	r3, [r7, #6]
 8006cd6:	3305      	adds	r3, #5
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	e000      	b.n	8006cde <buildDataFrame+0x252>
 8006cdc:	2304      	movs	r3, #4
 8006cde:	68ba      	ldr	r2, [r7, #8]
 8006ce0:	b2d2      	uxtb	r2, r2
 8006ce2:	4413      	add	r3, r2
 8006ce4:	71fb      	strb	r3, [r7, #7]
	if (flen > MAX_LEN_FRAME) {
 8006ce6:	79fb      	ldrb	r3, [r7, #7]
 8006ce8:	2b40      	cmp	r3, #64	@ 0x40
 8006cea:	d905      	bls.n	8006cf8 <buildDataFrame+0x26c>
		// Options and payload too big - delay payload
		txdata = 0;
 8006cec:	2300      	movs	r3, #0
 8006cee:	73fb      	strb	r3, [r7, #15]
		flen = end + 4;
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	3304      	adds	r3, #4
 8006cf6:	71fb      	strb	r3, [r7, #7]
	}
	LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DAUP | HDR_MAJOR_V1;
 8006cf8:	4b09      	ldr	r3, [pc, #36]	@ (8006d20 <buildDataFrame+0x294>)
 8006cfa:	2240      	movs	r2, #64	@ 0x40
 8006cfc:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
	LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 8006d00:	4b07      	ldr	r3, [pc, #28]	@ (8006d20 <buildDataFrame+0x294>)
 8006d02:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 8006d06:	4b06      	ldr	r3, [pc, #24]	@ (8006d20 <buildDataFrame+0x294>)
 8006d08:	f893 3127 	ldrb.w	r3, [r3, #295]	@ 0x127
			| (LMIC.adrAckReq >= 0 ? FCT_ADRARQ : 0) | (end - OFF_DAT_OPTS));
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	b25b      	sxtb	r3, r3
 8006d12:	4a03      	ldr	r2, [pc, #12]	@ (8006d20 <buildDataFrame+0x294>)
 8006d14:	f992 2121 	ldrsb.w	r2, [r2, #289]	@ 0x121
 8006d18:	2a00      	cmp	r2, #0
 8006d1a:	db03      	blt.n	8006d24 <buildDataFrame+0x298>
 8006d1c:	2240      	movs	r2, #64	@ 0x40
 8006d1e:	e002      	b.n	8006d26 <buildDataFrame+0x29a>
 8006d20:	200002e0 	.word	0x200002e0
 8006d24:	2200      	movs	r2, #0
 8006d26:	4313      	orrs	r3, r2
 8006d28:	b25a      	sxtb	r2, r3
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	3b08      	subs	r3, #8
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	b25b      	sxtb	r3, r3
 8006d34:	4313      	orrs	r3, r2
 8006d36:	b25b      	sxtb	r3, r3
 8006d38:	b2da      	uxtb	r2, r3
	LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 8006d3a:	4b40      	ldr	r3, [pc, #256]	@ (8006e3c <buildDataFrame+0x3b0>)
 8006d3c:	f883 214d 	strb.w	r2, [r3, #333]	@ 0x14d
	os_wlsbf4(LMIC.frame + OFF_DAT_ADDR, LMIC.devaddr);
 8006d40:	4a3f      	ldr	r2, [pc, #252]	@ (8006e40 <buildDataFrame+0x3b4>)
 8006d42:	4b3e      	ldr	r3, [pc, #248]	@ (8006e3c <buildDataFrame+0x3b0>)
 8006d44:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006d48:	4619      	mov	r1, r3
 8006d4a:	4610      	mov	r0, r2
 8006d4c:	f7fd ff49 	bl	8004be2 <os_wlsbf4>

	if (LMIC.txCnt == 0) {
 8006d50:	4b3a      	ldr	r3, [pc, #232]	@ (8006e3c <buildDataFrame+0x3b0>)
 8006d52:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d106      	bne.n	8006d68 <buildDataFrame+0x2dc>
		LMIC.seqnoUp += 1;
 8006d5a:	4b38      	ldr	r3, [pc, #224]	@ (8006e3c <buildDataFrame+0x3b0>)
 8006d5c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8006d60:	3301      	adds	r3, #1
 8006d62:	4a36      	ldr	r2, [pc, #216]	@ (8006e3c <buildDataFrame+0x3b0>)
 8006d64:	f8c2 311c 	str.w	r3, [r2, #284]	@ 0x11c
						e_.info = LMIC.seqnoUp-1,
						e_.info2 = ((LMIC.txCnt+1) |
								(DRADJUST[LMIC.txCnt+1] << 8) |
								((LMIC.datarate|DR_PAGE)<<16))));
	}
	os_wlsbf2(LMIC.frame + OFF_DAT_SEQNO, LMIC.seqnoUp - 1);
 8006d68:	4a36      	ldr	r2, [pc, #216]	@ (8006e44 <buildDataFrame+0x3b8>)
 8006d6a:	4b34      	ldr	r3, [pc, #208]	@ (8006e3c <buildDataFrame+0x3b0>)
 8006d6c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	3b01      	subs	r3, #1
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	4619      	mov	r1, r3
 8006d78:	4610      	mov	r0, r2
 8006d7a:	f7fd ff1b 	bl	8004bb4 <os_wlsbf2>

	// Clear pending DN confirmation
	LMIC.dnConf = 0;
 8006d7e:	4b2f      	ldr	r3, [pc, #188]	@ (8006e3c <buildDataFrame+0x3b0>)
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120

	if (txdata) {
 8006d86:	7bfb      	ldrb	r3, [r7, #15]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d03e      	beq.n	8006e0a <buildDataFrame+0x37e>
		if (LMIC.pendTxConf) {
 8006d8c:	4b2b      	ldr	r3, [pc, #172]	@ (8006e3c <buildDataFrame+0x3b0>)
 8006d8e:	f893 30bb 	ldrb.w	r3, [r3, #187]	@ 0xbb
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00c      	beq.n	8006db0 <buildDataFrame+0x324>
			// Confirmed only makes sense if we have a payload (or at least a port)
			LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DCUP | HDR_MAJOR_V1;
 8006d96:	4b29      	ldr	r3, [pc, #164]	@ (8006e3c <buildDataFrame+0x3b0>)
 8006d98:	2280      	movs	r2, #128	@ 0x80
 8006d9a:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
			if (LMIC.txCnt == 0)
 8006d9e:	4b27      	ldr	r3, [pc, #156]	@ (8006e3c <buildDataFrame+0x3b0>)
 8006da0:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d103      	bne.n	8006db0 <buildDataFrame+0x324>
				LMIC.txCnt = 1;
 8006da8:	4b24      	ldr	r3, [pc, #144]	@ (8006e3c <buildDataFrame+0x3b0>)
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		}
		LMIC.frame[end] = LMIC.pendTxPort;
 8006db0:	4b22      	ldr	r3, [pc, #136]	@ (8006e3c <buildDataFrame+0x3b0>)
 8006db2:	f893 10ba 	ldrb.w	r1, [r3, #186]	@ 0xba
 8006db6:	4a21      	ldr	r2, [pc, #132]	@ (8006e3c <buildDataFrame+0x3b0>)
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	4413      	add	r3, r2
 8006dbc:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006dc0:	460a      	mov	r2, r1
 8006dc2:	701a      	strb	r2, [r3, #0]
		os_copyMem(LMIC.frame + end + 1, LMIC.pendTxData, dlen);
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	4a1f      	ldr	r2, [pc, #124]	@ (8006e48 <buildDataFrame+0x3bc>)
 8006dca:	4413      	add	r3, r2
 8006dcc:	79ba      	ldrb	r2, [r7, #6]
 8006dce:	491f      	ldr	r1, [pc, #124]	@ (8006e4c <buildDataFrame+0x3c0>)
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f007 fd0b 	bl	800e7ec <memcpy>
		aes_cipher(LMIC.pendTxPort == 0 ? LMIC.nwkKey : LMIC.artKey,
 8006dd6:	4b19      	ldr	r3, [pc, #100]	@ (8006e3c <buildDataFrame+0x3b0>)
 8006dd8:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d101      	bne.n	8006de4 <buildDataFrame+0x358>
 8006de0:	481b      	ldr	r0, [pc, #108]	@ (8006e50 <buildDataFrame+0x3c4>)
 8006de2:	e000      	b.n	8006de6 <buildDataFrame+0x35a>
 8006de4:	481b      	ldr	r0, [pc, #108]	@ (8006e54 <buildDataFrame+0x3c8>)
 8006de6:	4b15      	ldr	r3, [pc, #84]	@ (8006e3c <buildDataFrame+0x3b0>)
 8006de8:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
				LMIC.devaddr, LMIC.seqnoUp - 1,
 8006dec:	4b13      	ldr	r3, [pc, #76]	@ (8006e3c <buildDataFrame+0x3b0>)
 8006dee:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
		aes_cipher(LMIC.pendTxPort == 0 ? LMIC.nwkKey : LMIC.artKey,
 8006df2:	1e5c      	subs	r4, r3, #1
				/*up*/0, LMIC.frame + end + 1, dlen);
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	3301      	adds	r3, #1
		aes_cipher(LMIC.pendTxPort == 0 ? LMIC.nwkKey : LMIC.artKey,
 8006df8:	4a13      	ldr	r2, [pc, #76]	@ (8006e48 <buildDataFrame+0x3bc>)
 8006dfa:	4413      	add	r3, r2
 8006dfc:	79ba      	ldrb	r2, [r7, #6]
 8006dfe:	9201      	str	r2, [sp, #4]
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	2300      	movs	r3, #0
 8006e04:	4622      	mov	r2, r4
 8006e06:	f7fe f853 	bl	8004eb0 <aes_cipher>
	}
	aes_appendMic(LMIC.nwkKey, LMIC.devaddr, LMIC.seqnoUp - 1, /*up*/0,
 8006e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8006e3c <buildDataFrame+0x3b0>)
 8006e0c:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 8006e10:	4b0a      	ldr	r3, [pc, #40]	@ (8006e3c <buildDataFrame+0x3b0>)
 8006e12:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8006e16:	1e5a      	subs	r2, r3, #1
 8006e18:	79fb      	ldrb	r3, [r7, #7]
 8006e1a:	3b04      	subs	r3, #4
 8006e1c:	9301      	str	r3, [sp, #4]
 8006e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8006e48 <buildDataFrame+0x3bc>)
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	2300      	movs	r3, #0
 8006e24:	480a      	ldr	r0, [pc, #40]	@ (8006e50 <buildDataFrame+0x3c4>)
 8006e26:	f7fd ffc5 	bl	8004db4 <aes_appendMic>
					e_.fct = LMIC.frame[LORA::OFF_DAT_FCT],
					e_.port = LMIC.pendTxPort,
					e_.plen = txdata ? dlen : 0,
					e_.opts.length = end-LORA::OFF_DAT_OPTS,
					memcpy(&e_.opts[0], LMIC.frame+LORA::OFF_DAT_OPTS, end-LORA::OFF_DAT_OPTS)));
	LMIC.dataLen = flen;
 8006e2a:	4a04      	ldr	r2, [pc, #16]	@ (8006e3c <buildDataFrame+0x3b0>)
 8006e2c:	79fb      	ldrb	r3, [r7, #7]
 8006e2e:	f882 3147 	strb.w	r3, [r2, #327]	@ 0x147
}
 8006e32:	bf00      	nop
 8006e34:	3714      	adds	r7, #20
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd90      	pop	{r4, r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	200002e0 	.word	0x200002e0
 8006e40:	20000429 	.word	0x20000429
 8006e44:	2000042e 	.word	0x2000042e
 8006e48:	20000428 	.word	0x20000428
 8006e4c:	2000039d 	.word	0x2000039d
 8006e50:	200003d4 	.word	0x200003d4
 8006e54:	200003e4 	.word	0x200003e4

08006e58 <onBcnRx>:

// Callback from HAL during scan mode or when job timer expires.
static void onBcnRx(xref2osjob_t job)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
	// If we arrive via job timer make sure to put radio to rest.
	os_radio(RADIO_RST);
 8006e60:	2000      	movs	r0, #0
 8006e62:	f001 feb7 	bl	8008bd4 <os_radio>
	os_clearCallback(&LMIC.osjob);
 8006e66:	4823      	ldr	r0, [pc, #140]	@ (8006ef4 <onBcnRx+0x9c>)
 8006e68:	f001 f8b4 	bl	8007fd4 <os_clearCallback>
	if (LMIC.dataLen == 0) {
 8006e6c:	4b22      	ldr	r3, [pc, #136]	@ (8006ef8 <onBcnRx+0xa0>)
 8006e6e:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10c      	bne.n	8006e90 <onBcnRx+0x38>
		// Nothing received - timeout
		LMIC.opmode &= ~(OP_SCAN | OP_TRACK);
 8006e76:	4b20      	ldr	r3, [pc, #128]	@ (8006ef8 <onBcnRx+0xa0>)
 8006e78:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006e7c:	f023 0303 	bic.w	r3, r3, #3
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	4b1d      	ldr	r3, [pc, #116]	@ (8006ef8 <onBcnRx+0xa0>)
 8006e84:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		reportEvent(EV_SCAN_TIMEOUT);
 8006e88:	2001      	movs	r0, #1
 8006e8a:	f7fe fead 	bl	8005be8 <reportEvent>
		return;
 8006e8e:	e02d      	b.n	8006eec <onBcnRx+0x94>
	}
	if (decodeBeacon() <= 0) {
 8006e90:	f7fe ff2e 	bl	8005cf0 <decodeBeacon>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	dc0f      	bgt.n	8006eba <onBcnRx+0x62>
		// Something is wrong with the beacon - continue scan
		LMIC.dataLen = 0;
 8006e9a:	4b17      	ldr	r3, [pc, #92]	@ (8006ef8 <onBcnRx+0xa0>)
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
		os_radio(RADIO_RXON);
 8006ea2:	2003      	movs	r0, #3
 8006ea4:	f001 fe96 	bl	8008bd4 <os_radio>
		os_setTimedCallback(&LMIC.osjob, LMIC.bcninfo.txtime,
 8006ea8:	4b13      	ldr	r3, [pc, #76]	@ (8006ef8 <onBcnRx+0xa0>)
 8006eaa:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8006eae:	4a13      	ldr	r2, [pc, #76]	@ (8006efc <onBcnRx+0xa4>)
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	4810      	ldr	r0, [pc, #64]	@ (8006ef4 <onBcnRx+0x9c>)
 8006eb4:	f001 f8d2 	bl	800805c <os_setTimedCallback>
				FUNC_ADDR(onBcnRx));
		return;
 8006eb8:	e018      	b.n	8006eec <onBcnRx+0x94>
	}
	// Found our 1st beacon
	// We don't have a previous beacon to calc some drift - assume
	// an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
	calcBcnRxWindowFromMillis(13, 1);
 8006eba:	2101      	movs	r1, #1
 8006ebc:	200d      	movs	r0, #13
 8006ebe:	f7fe f983 	bl	80051c8 <calcBcnRxWindowFromMillis>
	LMIC.opmode &= ~OP_SCAN;          // turn SCAN off
 8006ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ef8 <onBcnRx+0xa0>)
 8006ec4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006ec8:	f023 0301 	bic.w	r3, r3, #1
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	4b0a      	ldr	r3, [pc, #40]	@ (8006ef8 <onBcnRx+0xa0>)
 8006ed0:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	LMIC.opmode |= OP_TRACK;         // auto enable tracking
 8006ed4:	4b08      	ldr	r3, [pc, #32]	@ (8006ef8 <onBcnRx+0xa0>)
 8006ed6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006eda:	f043 0302 	orr.w	r3, r3, #2
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	4b05      	ldr	r3, [pc, #20]	@ (8006ef8 <onBcnRx+0xa0>)
 8006ee2:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	reportEvent(EV_BEACON_FOUND);    // can be disabled in callback
 8006ee6:	2002      	movs	r0, #2
 8006ee8:	f7fe fe7e 	bl	8005be8 <reportEvent>
}
 8006eec:	3708      	adds	r7, #8
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	200002f4 	.word	0x200002f4
 8006ef8:	200002e0 	.word	0x200002e0
 8006efc:	08006e59 	.word	0x08006e59

08006f00 <startScan>:
// netid defines when scan stops (any or specific beacon)
// This mode ends with events: EV_SCAN_TIMEOUT/EV_SCAN_BEACON
// Implicitely cancels any pending TX/RX transaction.
// Also cancels an onpoing joining procedure.
static void startScan(void)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	af00      	add	r7, sp, #0
	ASSERT(LMIC.devaddr != 0 && (LMIC.opmode & OP_JOINING) == 0);
 8006f04:	4b27      	ldr	r3, [pc, #156]	@ (8006fa4 <startScan+0xa4>)
 8006f06:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d006      	beq.n	8006f1c <startScan+0x1c>
 8006f0e:	4b25      	ldr	r3, [pc, #148]	@ (8006fa4 <startScan+0xa4>)
 8006f10:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006f14:	f003 0304 	and.w	r3, r3, #4
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d001      	beq.n	8006f20 <startScan+0x20>
 8006f1c:	f7fd fc54 	bl	80047c8 <hal_failed>
	if ((LMIC.opmode & OP_SHUTDOWN) != 0)
 8006f20:	4b20      	ldr	r3, [pc, #128]	@ (8006fa4 <startScan+0xa4>)
 8006f22:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d137      	bne.n	8006f9e <startScan+0x9e>
		return;
	// Cancel onging TX/RX transaction
	LMIC.txCnt = LMIC.dnConf = LMIC.bcninfo.flags = 0;
 8006f2e:	4b1d      	ldr	r3, [pc, #116]	@ (8006fa4 <startScan+0xa4>)
 8006f30:	2200      	movs	r2, #0
 8006f32:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
 8006f36:	4b1b      	ldr	r3, [pc, #108]	@ (8006fa4 <startScan+0xa4>)
 8006f38:	f893 2196 	ldrb.w	r2, [r3, #406]	@ 0x196
 8006f3c:	4b19      	ldr	r3, [pc, #100]	@ (8006fa4 <startScan+0xa4>)
 8006f3e:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
 8006f42:	4b18      	ldr	r3, [pc, #96]	@ (8006fa4 <startScan+0xa4>)
 8006f44:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 8006f48:	4b16      	ldr	r3, [pc, #88]	@ (8006fa4 <startScan+0xa4>)
 8006f4a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	LMIC.opmode = (LMIC.opmode | OP_SCAN) & ~(OP_TXRXPEND);
 8006f4e:	4b15      	ldr	r3, [pc, #84]	@ (8006fa4 <startScan+0xa4>)
 8006f50:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8006f54:	f043 0301 	orr.w	r3, r3, #1
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f5e:	b29a      	uxth	r2, r3
 8006f60:	4b10      	ldr	r3, [pc, #64]	@ (8006fa4 <startScan+0xa4>)
 8006f62:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	setBcnRxParams();
 8006f66:	f7fe fd71 	bl	8005a4c <setBcnRxParams>
	LMIC.rxtime = LMIC.bcninfo.txtime =
			os_getTime() + sec2osticks(BCN_INTV_sec + 1);
 8006f6a:	f001 f80d 	bl	8007f88 <os_getTime>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	f503 137b 	add.w	r3, r3, #4112384	@ 0x3ec000
 8006f74:	f503 5374 	add.w	r3, r3, #15616	@ 0x3d00
	LMIC.rxtime = LMIC.bcninfo.txtime =
 8006f78:	4a0a      	ldr	r2, [pc, #40]	@ (8006fa4 <startScan+0xa4>)
 8006f7a:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
 8006f7e:	4b09      	ldr	r3, [pc, #36]	@ (8006fa4 <startScan+0xa4>)
 8006f80:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8006f84:	4a07      	ldr	r2, [pc, #28]	@ (8006fa4 <startScan+0xa4>)
 8006f86:	6053      	str	r3, [r2, #4]
	os_setTimedCallback(&LMIC.osjob, LMIC.rxtime, FUNC_ADDR(onBcnRx));
 8006f88:	4b06      	ldr	r3, [pc, #24]	@ (8006fa4 <startScan+0xa4>)
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	4a06      	ldr	r2, [pc, #24]	@ (8006fa8 <startScan+0xa8>)
 8006f8e:	4619      	mov	r1, r3
 8006f90:	4806      	ldr	r0, [pc, #24]	@ (8006fac <startScan+0xac>)
 8006f92:	f001 f863 	bl	800805c <os_setTimedCallback>
	os_radio(RADIO_RXON);
 8006f96:	2003      	movs	r0, #3
 8006f98:	f001 fe1c 	bl	8008bd4 <os_radio>
 8006f9c:	e000      	b.n	8006fa0 <startScan+0xa0>
		return;
 8006f9e:	bf00      	nop
}
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	200002e0 	.word	0x200002e0
 8006fa8:	08006e59 	.word	0x08006e59
 8006fac:	200002f4 	.word	0x200002f4

08006fb0 <buildJoinRequest>:
// Join stuff
//
// ================================================================================

static void buildJoinRequest(u1_t ftype)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	71fb      	strb	r3, [r7, #7]
	// Do not use pendTxData since we might have a pending
	// user level frame in there. Use RX holding area instead.
	xref2u1_t d = LMIC.frame;
 8006fba:	4b16      	ldr	r3, [pc, #88]	@ (8007014 <buildJoinRequest+0x64>)
 8006fbc:	60fb      	str	r3, [r7, #12]
	d[OFF_JR_HDR] = ftype;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	79fa      	ldrb	r2, [r7, #7]
 8006fc2:	701a      	strb	r2, [r3, #0]
	os_getArtEui(d + OFF_JR_ARTEUI);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f000 fd33 	bl	8007a34 <os_getArtEui>
	os_getDevEui(d + OFF_JR_DEVEUI);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	3309      	adds	r3, #9
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f000 fd42 	bl	8007a5c <os_getDevEui>
	os_wlsbf2(d + OFF_JR_DEVNONCE, LMIC.devNonce);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	3311      	adds	r3, #17
 8006fdc:	4a0e      	ldr	r2, [pc, #56]	@ (8007018 <buildJoinRequest+0x68>)
 8006fde:	f8b2 20f2 	ldrh.w	r2, [r2, #242]	@ 0xf2
 8006fe2:	4611      	mov	r1, r2
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7fd fde5 	bl	8004bb4 <os_wlsbf2>
	aes_appendMic0(d, OFF_JR_MIC);
 8006fea:	2113      	movs	r1, #19
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f7fd ff09 	bl	8004e04 <aes_appendMic0>
					e_.oldaddr = LMIC.devaddr,
					e_.mic = Base::lsbf4(&d[LORA::OFF_JR_MIC]),
					e_.reason = ((LMIC.opmode & OP_REJOIN) != 0
							? EV::joininfo_t::REJOIN_REQUEST
							: EV::joininfo_t::REQUEST)));
	LMIC.dataLen = LEN_JR;
 8006ff2:	4b09      	ldr	r3, [pc, #36]	@ (8007018 <buildJoinRequest+0x68>)
 8006ff4:	2217      	movs	r2, #23
 8006ff6:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
	LMIC.devNonce++;
 8006ffa:	4b07      	ldr	r3, [pc, #28]	@ (8007018 <buildJoinRequest+0x68>)
 8006ffc:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 8007000:	3301      	adds	r3, #1
 8007002:	b29a      	uxth	r2, r3
 8007004:	4b04      	ldr	r3, [pc, #16]	@ (8007018 <buildJoinRequest+0x68>)
 8007006:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
	DO_DEVDB(LMIC.devNonce,devNonce);
}
 800700a:	bf00      	nop
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	20000428 	.word	0x20000428
 8007018:	200002e0 	.word	0x200002e0

0800701c <startJoining>:

static void startJoining(xref2osjob_t osjob)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
	reportEvent(EV_JOINING);
 8007024:	2005      	movs	r0, #5
 8007026:	f7fe fddf 	bl	8005be8 <reportEvent>
}
 800702a:	bf00      	nop
 800702c:	3708      	adds	r7, #8
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
	...

08007034 <LMIC_startJoining>:

// Start join procedure if not already joined.
bit_t LMIC_startJoining(void)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	af00      	add	r7, sp, #0
	if (LMIC.devaddr == 0) {
 8007038:	4b20      	ldr	r3, [pc, #128]	@ (80070bc <LMIC_startJoining+0x88>)
 800703a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800703e:	2b00      	cmp	r3, #0
 8007040:	d138      	bne.n	80070b4 <LMIC_startJoining+0x80>
		// There should be no TX/RX going on
		ASSERT((LMIC.opmode & (OP_POLL | OP_TXRXPEND)) == 0);
 8007042:	4b1e      	ldr	r3, [pc, #120]	@ (80070bc <LMIC_startJoining+0x88>)
 8007044:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007048:	f003 0390 	and.w	r3, r3, #144	@ 0x90
 800704c:	2b00      	cmp	r3, #0
 800704e:	d001      	beq.n	8007054 <LMIC_startJoining+0x20>
 8007050:	f7fd fbba 	bl	80047c8 <hal_failed>
		// Lift any previous duty limitation
		LMIC.globalDutyRate = 0;
 8007054:	4b19      	ldr	r3, [pc, #100]	@ (80070bc <LMIC_startJoining+0x88>)
 8007056:	2200      	movs	r2, #0
 8007058:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
		// Cancel scanning
		LMIC.opmode &= ~(OP_SCAN | OP_REJOIN | OP_LINKDEAD | OP_NEXTCHNL);
 800705c:	4b17      	ldr	r3, [pc, #92]	@ (80070bc <LMIC_startJoining+0x88>)
 800705e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007062:	f423 53c1 	bic.w	r3, r3, #6176	@ 0x1820
 8007066:	f023 0301 	bic.w	r3, r3, #1
 800706a:	b29a      	uxth	r2, r3
 800706c:	4b13      	ldr	r3, [pc, #76]	@ (80070bc <LMIC_startJoining+0x88>)
 800706e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		// Setup state
		LMIC.rejoinCnt = LMIC.txCnt = LMIC.pendTxConf = 0;
 8007072:	4b12      	ldr	r3, [pc, #72]	@ (80070bc <LMIC_startJoining+0x88>)
 8007074:	2200      	movs	r2, #0
 8007076:	f883 20bb 	strb.w	r2, [r3, #187]	@ 0xbb
 800707a:	4b10      	ldr	r3, [pc, #64]	@ (80070bc <LMIC_startJoining+0x88>)
 800707c:	f893 20bb 	ldrb.w	r2, [r3, #187]	@ 0xbb
 8007080:	4b0e      	ldr	r3, [pc, #56]	@ (80070bc <LMIC_startJoining+0x88>)
 8007082:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
 8007086:	4b0d      	ldr	r3, [pc, #52]	@ (80070bc <LMIC_startJoining+0x88>)
 8007088:	f893 2144 	ldrb.w	r2, [r3, #324]	@ 0x144
 800708c:	4b0b      	ldr	r3, [pc, #44]	@ (80070bc <LMIC_startJoining+0x88>)
 800708e:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
		initJoinLoop();
 8007092:	f7fe fd01 	bl	8005a98 <initJoinLoop>
		LMIC.opmode |= OP_JOINING;
 8007096:	4b09      	ldr	r3, [pc, #36]	@ (80070bc <LMIC_startJoining+0x88>)
 8007098:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800709c:	f043 0304 	orr.w	r3, r3, #4
 80070a0:	b29a      	uxth	r2, r3
 80070a2:	4b06      	ldr	r3, [pc, #24]	@ (80070bc <LMIC_startJoining+0x88>)
 80070a4:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		// reportEvent will call engineUpdate which then starts sending JOIN REQUESTS
		os_setCallback(&LMIC.osjob, FUNC_ADDR(startJoining));
 80070a8:	4905      	ldr	r1, [pc, #20]	@ (80070c0 <LMIC_startJoining+0x8c>)
 80070aa:	4806      	ldr	r0, [pc, #24]	@ (80070c4 <LMIC_startJoining+0x90>)
 80070ac:	f000 ffb0 	bl	8008010 <os_setCallback>
		return 1;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e000      	b.n	80070b6 <LMIC_startJoining+0x82>
	}
	return 0; // already joined
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	200002e0 	.word	0x200002e0
 80070c0:	0800701d 	.word	0x0800701d
 80070c4:	200002f4 	.word	0x200002f4

080070c8 <processPingRx>:
//
//
// ================================================================================

static void processPingRx(xref2osjob_t osjob)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
	if (LMIC.dataLen != 0) {
 80070d0:	4b0b      	ldr	r3, [pc, #44]	@ (8007100 <processPingRx+0x38>)
 80070d2:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00c      	beq.n	80070f4 <processPingRx+0x2c>
		LMIC.txrxFlags = TXRX_PING;
 80070da:	4b09      	ldr	r3, [pc, #36]	@ (8007100 <processPingRx+0x38>)
 80070dc:	2204      	movs	r2, #4
 80070de:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		if (decodeFrame()) {
 80070e2:	f7fe fe99 	bl	8005e18 <decodeFrame>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d003      	beq.n	80070f4 <processPingRx+0x2c>
			reportEvent(EV_RXCOMPLETE);
 80070ec:	200d      	movs	r0, #13
 80070ee:	f7fe fd7b 	bl	8005be8 <reportEvent>
			return;
 80070f2:	e001      	b.n	80070f8 <processPingRx+0x30>
		}
	}
	// Pick next ping slot
	engineUpdate();
 80070f4:	f000 fa2a 	bl	800754c <engineUpdate>
}
 80070f8:	3708      	adds	r7, #8
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	200002e0 	.word	0x200002e0

08007104 <processDnData>:

static bit_t processDnData(void)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	af00      	add	r7, sp, #0
	ASSERT((LMIC.opmode & OP_TXRXPEND) != 0);
 8007108:	4b76      	ldr	r3, [pc, #472]	@ (80072e4 <processDnData+0x1e0>)
 800710a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800710e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007112:	2b00      	cmp	r3, #0
 8007114:	d101      	bne.n	800711a <processDnData+0x16>
 8007116:	f7fd fb57 	bl	80047c8 <hal_failed>

	if (LMIC.dataLen == 0) {
 800711a:	4b72      	ldr	r3, [pc, #456]	@ (80072e4 <processDnData+0x1e0>)
 800711c:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8007120:	2b00      	cmp	r3, #0
 8007122:	f040 80ce 	bne.w	80072c2 <processDnData+0x1be>
		norx: if (LMIC.txCnt != 0) {
 8007126:	bf00      	nop
 8007128:	e000      	b.n	800712c <processDnData+0x28>
		return 1;
	}
	if (!decodeFrame()) {
		if ((LMIC.txrxFlags & TXRX_DNW1) != 0)
			return 0;
		goto norx;
 800712a:	bf00      	nop
		norx: if (LMIC.txCnt != 0) {
 800712c:	4b6d      	ldr	r3, [pc, #436]	@ (80072e4 <processDnData+0x1e0>)
 800712e:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8007132:	2b00      	cmp	r3, #0
 8007134:	d038      	beq.n	80071a8 <processDnData+0xa4>
			if (LMIC.txCnt < TXCONF_ATTEMPTS) {
 8007136:	4b6b      	ldr	r3, [pc, #428]	@ (80072e4 <processDnData+0x1e0>)
 8007138:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 800713c:	2b07      	cmp	r3, #7
 800713e:	d82e      	bhi.n	800719e <processDnData+0x9a>
				LMIC.txCnt += 1;
 8007140:	4b68      	ldr	r3, [pc, #416]	@ (80072e4 <processDnData+0x1e0>)
 8007142:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8007146:	3301      	adds	r3, #1
 8007148:	b2da      	uxtb	r2, r3
 800714a:	4b66      	ldr	r3, [pc, #408]	@ (80072e4 <processDnData+0x1e0>)
 800714c:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
				setDrTxpow(DRCHG_NOACK,
 8007150:	4b64      	ldr	r3, [pc, #400]	@ (80072e4 <processDnData+0x1e0>)
 8007152:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
						lowerDR(LMIC.datarate, DRADJUST[LMIC.txCnt]),
 8007156:	4a63      	ldr	r2, [pc, #396]	@ (80072e4 <processDnData+0x1e0>)
 8007158:	f892 2144 	ldrb.w	r2, [r2, #324]	@ 0x144
 800715c:	4611      	mov	r1, r2
 800715e:	4a62      	ldr	r2, [pc, #392]	@ (80072e8 <processDnData+0x1e4>)
 8007160:	5c52      	ldrb	r2, [r2, r1]
				setDrTxpow(DRCHG_NOACK,
 8007162:	4611      	mov	r1, r2
 8007164:	4618      	mov	r0, r3
 8007166:	f7fd fcbd 	bl	8004ae4 <lowerDR>
 800716a:	4603      	mov	r3, r0
 800716c:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 8007170:	4619      	mov	r1, r3
 8007172:	2002      	movs	r0, #2
 8007174:	f7fe f9ea 	bl	800554c <setDrTxpow>
				txDelay(LMIC.rxtime, RETRY_PERIOD_secs);
 8007178:	4b5a      	ldr	r3, [pc, #360]	@ (80072e4 <processDnData+0x1e0>)
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	2103      	movs	r1, #3
 800717e:	4618      	mov	r0, r3
 8007180:	f7fe f9a2 	bl	80054c8 <txDelay>
				LMIC.opmode &= ~OP_TXRXPEND;
 8007184:	4b57      	ldr	r3, [pc, #348]	@ (80072e4 <processDnData+0x1e0>)
 8007186:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800718a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800718e:	b29a      	uxth	r2, r3
 8007190:	4b54      	ldr	r3, [pc, #336]	@ (80072e4 <processDnData+0x1e0>)
 8007192:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
				engineUpdate();
 8007196:	f000 f9d9 	bl	800754c <engineUpdate>
				return 1;
 800719a:	2301      	movs	r3, #1
 800719c:	e09f      	b.n	80072de <processDnData+0x1da>
			LMIC.txrxFlags = TXRX_NACK | TXRX_NOPORT;
 800719e:	4b51      	ldr	r3, [pc, #324]	@ (80072e4 <processDnData+0x1e0>)
 80071a0:	2260      	movs	r2, #96	@ 0x60
 80071a2:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
 80071a6:	e003      	b.n	80071b0 <processDnData+0xac>
			LMIC.txrxFlags = TXRX_NOPORT;
 80071a8:	4b4e      	ldr	r3, [pc, #312]	@ (80072e4 <processDnData+0x1e0>)
 80071aa:	2220      	movs	r2, #32
 80071ac:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		if (LMIC.adrAckReq != LINK_CHECK_OFF)
 80071b0:	4b4c      	ldr	r3, [pc, #304]	@ (80072e4 <processDnData+0x1e0>)
 80071b2:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 80071b6:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 80071ba:	d009      	beq.n	80071d0 <processDnData+0xcc>
			LMIC.adrAckReq += 1;
 80071bc:	4b49      	ldr	r3, [pc, #292]	@ (80072e4 <processDnData+0x1e0>)
 80071be:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	3301      	adds	r3, #1
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	b25a      	sxtb	r2, r3
 80071ca:	4b46      	ldr	r3, [pc, #280]	@ (80072e4 <processDnData+0x1e0>)
 80071cc:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
		LMIC.dataBeg = LMIC.dataLen = 0;
 80071d0:	4b44      	ldr	r3, [pc, #272]	@ (80072e4 <processDnData+0x1e0>)
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 80071d8:	4b42      	ldr	r3, [pc, #264]	@ (80072e4 <processDnData+0x1e0>)
 80071da:	f893 2147 	ldrb.w	r2, [r3, #327]	@ 0x147
 80071de:	4b41      	ldr	r3, [pc, #260]	@ (80072e4 <processDnData+0x1e0>)
 80071e0:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
 80071e4:	e000      	b.n	80071e8 <processDnData+0xe4>
	}
	goto txcomplete;
 80071e6:	bf00      	nop
		txcomplete: LMIC.opmode &= ~(OP_TXDATA | OP_TXRXPEND);
 80071e8:	4b3e      	ldr	r3, [pc, #248]	@ (80072e4 <processDnData+0x1e0>)
 80071ea:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80071ee:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	4b3b      	ldr	r3, [pc, #236]	@ (80072e4 <processDnData+0x1e0>)
 80071f6:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		if ((LMIC.txrxFlags & (TXRX_DNW1 | TXRX_DNW2 | TXRX_PING)) != 0
 80071fa:	4b3a      	ldr	r3, [pc, #232]	@ (80072e4 <processDnData+0x1e0>)
 80071fc:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8007200:	f003 0307 	and.w	r3, r3, #7
 8007204:	2b00      	cmp	r3, #0
 8007206:	d012      	beq.n	800722e <processDnData+0x12a>
				&& (LMIC.opmode & OP_LINKDEAD) != 0) {
 8007208:	4b36      	ldr	r3, [pc, #216]	@ (80072e4 <processDnData+0x1e0>)
 800720a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800720e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00b      	beq.n	800722e <processDnData+0x12a>
			LMIC.opmode &= ~OP_LINKDEAD;
 8007216:	4b33      	ldr	r3, [pc, #204]	@ (80072e4 <processDnData+0x1e0>)
 8007218:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800721c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007220:	b29a      	uxth	r2, r3
 8007222:	4b30      	ldr	r3, [pc, #192]	@ (80072e4 <processDnData+0x1e0>)
 8007224:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			reportEvent(EV_LINK_ALIVE);
 8007228:	200f      	movs	r0, #15
 800722a:	f7fe fcdd 	bl	8005be8 <reportEvent>
		reportEvent(EV_TXCOMPLETE);
 800722e:	200a      	movs	r0, #10
 8007230:	f7fe fcda 	bl	8005be8 <reportEvent>
		if (LMIC.adrAckReq > LINK_CHECK_DEAD) {
 8007234:	4b2b      	ldr	r3, [pc, #172]	@ (80072e4 <processDnData+0x1e0>)
 8007236:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 800723a:	2b18      	cmp	r3, #24
 800723c:	dd1c      	ble.n	8007278 <processDnData+0x174>
			setDrTxpow(DRCHG_NOADRACK, decDR((dr_t) LMIC.datarate), KEEP_TXPOW);
 800723e:	4b29      	ldr	r3, [pc, #164]	@ (80072e4 <processDnData+0x1e0>)
 8007240:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8007244:	4618      	mov	r0, r3
 8007246:	f7fd fc1f 	bl	8004a88 <decDR>
 800724a:	4603      	mov	r3, r0
 800724c:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 8007250:	4619      	mov	r1, r3
 8007252:	2003      	movs	r0, #3
 8007254:	f7fe f97a 	bl	800554c <setDrTxpow>
			LMIC.adrAckReq = LINK_CHECK_CONT;
 8007258:	4b22      	ldr	r3, [pc, #136]	@ (80072e4 <processDnData+0x1e0>)
 800725a:	220c      	movs	r2, #12
 800725c:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
			LMIC.opmode |= OP_REJOIN | OP_LINKDEAD;
 8007260:	4b20      	ldr	r3, [pc, #128]	@ (80072e4 <processDnData+0x1e0>)
 8007262:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007266:	f443 5381 	orr.w	r3, r3, #4128	@ 0x1020
 800726a:	b29a      	uxth	r2, r3
 800726c:	4b1d      	ldr	r3, [pc, #116]	@ (80072e4 <processDnData+0x1e0>)
 800726e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			reportEvent(EV_LINK_DEAD);
 8007272:	200e      	movs	r0, #14
 8007274:	f7fe fcb8 	bl	8005be8 <reportEvent>
		if (LMIC.bcninfoTries > 0) {
 8007278:	4b1a      	ldr	r3, [pc, #104]	@ (80072e4 <processDnData+0x1e0>)
 800727a:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 800727e:	2b00      	cmp	r3, #0
 8007280:	d01d      	beq.n	80072be <processDnData+0x1ba>
			if ((LMIC.opmode & OP_TRACK) != 0) {
 8007282:	4b18      	ldr	r3, [pc, #96]	@ (80072e4 <processDnData+0x1e0>)
 8007284:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007288:	f003 0302 	and.w	r3, r3, #2
 800728c:	2b00      	cmp	r3, #0
 800728e:	d007      	beq.n	80072a0 <processDnData+0x19c>
				reportEvent(EV_BEACON_FOUND);
 8007290:	2002      	movs	r0, #2
 8007292:	f7fe fca9 	bl	8005be8 <reportEvent>
				LMIC.bcninfoTries = 0;
 8007296:	4b13      	ldr	r3, [pc, #76]	@ (80072e4 <processDnData+0x1e0>)
 8007298:	2200      	movs	r2, #0
 800729a:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
 800729e:	e00e      	b.n	80072be <processDnData+0x1ba>
			} else if (--LMIC.bcninfoTries == 0) {
 80072a0:	4b10      	ldr	r3, [pc, #64]	@ (80072e4 <processDnData+0x1e0>)
 80072a2:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 80072a6:	3b01      	subs	r3, #1
 80072a8:	b2da      	uxtb	r2, r3
 80072aa:	4b0e      	ldr	r3, [pc, #56]	@ (80072e4 <processDnData+0x1e0>)
 80072ac:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
 80072b0:	4b0c      	ldr	r3, [pc, #48]	@ (80072e4 <processDnData+0x1e0>)
 80072b2:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d101      	bne.n	80072be <processDnData+0x1ba>
				startScan();   // NWK did not answer - try scan
 80072ba:	f7ff fe21 	bl	8006f00 <startScan>
		return 1;
 80072be:	2301      	movs	r3, #1
 80072c0:	e00d      	b.n	80072de <processDnData+0x1da>
	if (!decodeFrame()) {
 80072c2:	f7fe fda9 	bl	8005e18 <decodeFrame>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d18c      	bne.n	80071e6 <processDnData+0xe2>
		if ((LMIC.txrxFlags & TXRX_DNW1) != 0)
 80072cc:	4b05      	ldr	r3, [pc, #20]	@ (80072e4 <processDnData+0x1e0>)
 80072ce:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f43f af27 	beq.w	800712a <processDnData+0x26>
			return 0;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	200002e0 	.word	0x200002e0
 80072e8:	0800fcb4 	.word	0x0800fcb4

080072ec <processBeacon>:

static void processBeacon(xref2osjob_t osjob)
{
 80072ec:	b590      	push	{r4, r7, lr}
 80072ee:	b087      	sub	sp, #28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
	ostime_t lasttx = LMIC.bcninfo.txtime; // save here - decodeBeacon might overwrite
 80072f4:	4b81      	ldr	r3, [pc, #516]	@ (80074fc <processBeacon+0x210>)
 80072f6:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80072fa:	60fb      	str	r3, [r7, #12]
	u1_t flags = LMIC.bcninfo.flags;
 80072fc:	4b7f      	ldr	r3, [pc, #508]	@ (80074fc <processBeacon+0x210>)
 80072fe:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8007302:	72fb      	strb	r3, [r7, #11]
	ev_t ev;

	if (LMIC.dataLen != 0 && decodeBeacon() >= 1) {
 8007304:	4b7d      	ldr	r3, [pc, #500]	@ (80074fc <processBeacon+0x210>)
 8007306:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 800730a:	2b00      	cmp	r3, #0
 800730c:	f000 8087 	beq.w	800741e <processBeacon+0x132>
 8007310:	f7fe fcee 	bl	8005cf0 <decodeBeacon>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	f340 8081 	ble.w	800741e <processBeacon+0x132>
		ev = EV_BEACON_TRACKED;
 800731c:	2304      	movs	r3, #4
 800731e:	75fb      	strb	r3, [r7, #23]
		if ((flags & (BCN_PARTIAL | BCN_FULL)) == 0) {
 8007320:	7afb      	ldrb	r3, [r7, #11]
 8007322:	f003 0303 	and.w	r3, r3, #3
 8007326:	2b00      	cmp	r3, #0
 8007328:	d104      	bne.n	8007334 <processBeacon+0x48>
			// We don't have a previous beacon to calc some drift - assume
			// an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
			calcBcnRxWindowFromMillis(13, 0);
 800732a:	2100      	movs	r1, #0
 800732c:	200d      	movs	r0, #13
 800732e:	f7fd ff4b 	bl	80051c8 <calcBcnRxWindowFromMillis>
			goto rev;
 8007332:	e0d2      	b.n	80074da <processBeacon+0x1ee>
		}
		// We have a previous BEACON to calculate some drift
		s2_t drift = BCN_INTV_osticks - (LMIC.bcninfo.txtime - lasttx);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	b29a      	uxth	r2, r3
 8007338:	4b70      	ldr	r3, [pc, #448]	@ (80074fc <processBeacon+0x210>)
 800733a:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 800733e:	b29b      	uxth	r3, r3
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	b29b      	uxth	r3, r3
 8007344:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8007348:	b29b      	uxth	r3, r3
 800734a:	82bb      	strh	r3, [r7, #20]
		if (LMIC.missedBcns > 0) {
 800734c:	4b6b      	ldr	r3, [pc, #428]	@ (80074fc <processBeacon+0x210>)
 800734e:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8007352:	2b00      	cmp	r3, #0
 8007354:	d013      	beq.n	800737e <processBeacon+0x92>
			drift = LMIC.drift + (drift - LMIC.drift) / (LMIC.missedBcns + 1);
 8007356:	4b69      	ldr	r3, [pc, #420]	@ (80074fc <processBeacon+0x210>)
 8007358:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 800735c:	b29a      	uxth	r2, r3
 800735e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007362:	4966      	ldr	r1, [pc, #408]	@ (80074fc <processBeacon+0x210>)
 8007364:	f9b1 10b4 	ldrsh.w	r1, [r1, #180]	@ 0xb4
 8007368:	1a59      	subs	r1, r3, r1
 800736a:	4b64      	ldr	r3, [pc, #400]	@ (80074fc <processBeacon+0x210>)
 800736c:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8007370:	3301      	adds	r3, #1
 8007372:	fb91 f3f3 	sdiv	r3, r1, r3
 8007376:	b29b      	uxth	r3, r3
 8007378:	4413      	add	r3, r2
 800737a:	b29b      	uxth	r3, r3
 800737c:	82bb      	strh	r3, [r7, #20]
		}
		if ((LMIC.bcninfo.flags & BCN_NODRIFT) == 0) {
 800737e:	4b5f      	ldr	r3, [pc, #380]	@ (80074fc <processBeacon+0x210>)
 8007380:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8007384:	f003 0304 	and.w	r3, r3, #4
 8007388:	2b00      	cmp	r3, #0
 800738a:	d127      	bne.n	80073dc <processBeacon+0xf0>
			s2_t diff = LMIC.drift - drift;
 800738c:	4b5b      	ldr	r3, [pc, #364]	@ (80074fc <processBeacon+0x210>)
 800738e:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 8007392:	b29a      	uxth	r2, r3
 8007394:	8abb      	ldrh	r3, [r7, #20]
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	b29b      	uxth	r3, r3
 800739a:	827b      	strh	r3, [r7, #18]
			if (diff < 0)
 800739c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	da03      	bge.n	80073ac <processBeacon+0xc0>
				diff = -diff;
 80073a4:	8a7b      	ldrh	r3, [r7, #18]
 80073a6:	425b      	negs	r3, r3
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	827b      	strh	r3, [r7, #18]
			LMIC.lastDriftDiff = diff;
 80073ac:	4a53      	ldr	r2, [pc, #332]	@ (80074fc <processBeacon+0x210>)
 80073ae:	8a7b      	ldrh	r3, [r7, #18]
 80073b0:	f8a2 30b6 	strh.w	r3, [r2, #182]	@ 0xb6
			if (LMIC.maxDriftDiff < diff)
 80073b4:	4b51      	ldr	r3, [pc, #324]	@ (80074fc <processBeacon+0x210>)
 80073b6:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 80073ba:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80073be:	429a      	cmp	r2, r3
 80073c0:	dd03      	ble.n	80073ca <processBeacon+0xde>
				LMIC.maxDriftDiff = diff;
 80073c2:	4a4e      	ldr	r2, [pc, #312]	@ (80074fc <processBeacon+0x210>)
 80073c4:	8a7b      	ldrh	r3, [r7, #18]
 80073c6:	f8a2 30b8 	strh.w	r3, [r2, #184]	@ 0xb8
			LMIC.bcninfo.flags &= ~BCN_NODDIFF;
 80073ca:	4b4c      	ldr	r3, [pc, #304]	@ (80074fc <processBeacon+0x210>)
 80073cc:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 80073d0:	f023 0308 	bic.w	r3, r3, #8
 80073d4:	b2da      	uxtb	r2, r3
 80073d6:	4b49      	ldr	r3, [pc, #292]	@ (80074fc <processBeacon+0x210>)
 80073d8:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
		}
		LMIC.drift = drift;
 80073dc:	4a47      	ldr	r2, [pc, #284]	@ (80074fc <processBeacon+0x210>)
 80073de:	8abb      	ldrh	r3, [r7, #20]
 80073e0:	f8a2 30b4 	strh.w	r3, [r2, #180]	@ 0xb4
		LMIC.missedBcns = LMIC.rejoinCnt = 0;
 80073e4:	4b45      	ldr	r3, [pc, #276]	@ (80074fc <processBeacon+0x210>)
 80073e6:	2200      	movs	r2, #0
 80073e8:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
 80073ec:	4b43      	ldr	r3, [pc, #268]	@ (80074fc <processBeacon+0x210>)
 80073ee:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 80073f2:	4b42      	ldr	r3, [pc, #264]	@ (80074fc <processBeacon+0x210>)
 80073f4:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
		LMIC.bcninfo.flags &= ~BCN_NODRIFT;
 80073f8:	4b40      	ldr	r3, [pc, #256]	@ (80074fc <processBeacon+0x210>)
 80073fa:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 80073fe:	f023 0304 	bic.w	r3, r3, #4
 8007402:	b2da      	uxtb	r2, r3
 8007404:	4b3d      	ldr	r3, [pc, #244]	@ (80074fc <processBeacon+0x210>)
 8007406:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
		EV(devCond,INFO,(e_.reason = EV::devCond_t::CLOCK_DRIFT,
						e_.eui = MAIN::CDEV->getEui(),
						e_.info = drift,
						e_.info2 = /*occasion BEACON*/0));
		ASSERT((LMIC.bcninfo.flags & (BCN_PARTIAL | BCN_FULL)) != 0);
 800740a:	4b3c      	ldr	r3, [pc, #240]	@ (80074fc <processBeacon+0x210>)
 800740c:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8007410:	f003 0303 	and.w	r3, r3, #3
 8007414:	2b00      	cmp	r3, #0
 8007416:	d14c      	bne.n	80074b2 <processBeacon+0x1c6>
 8007418:	f7fd f9d6 	bl	80047c8 <hal_failed>
	if (LMIC.dataLen != 0 && decodeBeacon() >= 1) {
 800741c:	e049      	b.n	80074b2 <processBeacon+0x1c6>
	} else {
		ev = EV_BEACON_MISSED;
 800741e:	2303      	movs	r3, #3
 8007420:	75fb      	strb	r3, [r7, #23]
		LMIC.bcninfo.txtime += BCN_INTV_osticks - LMIC.drift;
 8007422:	4b36      	ldr	r3, [pc, #216]	@ (80074fc <processBeacon+0x210>)
 8007424:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8007428:	4b34      	ldr	r3, [pc, #208]	@ (80074fc <processBeacon+0x210>)
 800742a:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 800742e:	f5c3 137a 	rsb	r3, r3, #4096000	@ 0x3e8000
 8007432:	4413      	add	r3, r2
 8007434:	4a31      	ldr	r2, [pc, #196]	@ (80074fc <processBeacon+0x210>)
 8007436:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
		LMIC.bcninfo.time += BCN_INTV_sec;
 800743a:	4b30      	ldr	r3, [pc, #192]	@ (80074fc <processBeacon+0x210>)
 800743c:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8007440:	3380      	adds	r3, #128	@ 0x80
 8007442:	4a2e      	ldr	r2, [pc, #184]	@ (80074fc <processBeacon+0x210>)
 8007444:	f8c2 3198 	str.w	r3, [r2, #408]	@ 0x198
		LMIC.missedBcns++;
 8007448:	4b2c      	ldr	r3, [pc, #176]	@ (80074fc <processBeacon+0x210>)
 800744a:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 800744e:	3301      	adds	r3, #1
 8007450:	b2da      	uxtb	r2, r3
 8007452:	4b2a      	ldr	r3, [pc, #168]	@ (80074fc <processBeacon+0x210>)
 8007454:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
		// Delay any possible TX after surmised beacon - it's there although we missed it
		txDelay(LMIC.bcninfo.txtime + BCN_RESERVE_osticks, 4);
 8007458:	4b28      	ldr	r3, [pc, #160]	@ (80074fc <processBeacon+0x210>)
 800745a:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 800745e:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 8007462:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8007466:	2104      	movs	r1, #4
 8007468:	4618      	mov	r0, r3
 800746a:	f7fe f82d 	bl	80054c8 <txDelay>
		if (LMIC.missedBcns > MAX_MISSED_BCNS)
 800746e:	4b23      	ldr	r3, [pc, #140]	@ (80074fc <processBeacon+0x210>)
 8007470:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8007474:	2b14      	cmp	r3, #20
 8007476:	d908      	bls.n	800748a <processBeacon+0x19e>
			LMIC.opmode |= OP_REJOIN;  // try if we can roam to another network
 8007478:	4b20      	ldr	r3, [pc, #128]	@ (80074fc <processBeacon+0x210>)
 800747a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800747e:	f043 0320 	orr.w	r3, r3, #32
 8007482:	b29a      	uxth	r2, r3
 8007484:	4b1d      	ldr	r3, [pc, #116]	@ (80074fc <processBeacon+0x210>)
 8007486:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
		if (LMIC.bcnRxsyms > MAX_RXSYMS) {
 800748a:	4b1c      	ldr	r3, [pc, #112]	@ (80074fc <processBeacon+0x210>)
 800748c:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 8007490:	2b64      	cmp	r3, #100	@ 0x64
 8007492:	d90f      	bls.n	80074b4 <processBeacon+0x1c8>
			LMIC.opmode &= ~(OP_TRACK | OP_PINGABLE | OP_PINGINI | OP_REJOIN);
 8007494:	4b19      	ldr	r3, [pc, #100]	@ (80074fc <processBeacon+0x210>)
 8007496:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800749a:	f423 63c4 	bic.w	r3, r3, #1568	@ 0x620
 800749e:	f023 0302 	bic.w	r3, r3, #2
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	4b15      	ldr	r3, [pc, #84]	@ (80074fc <processBeacon+0x210>)
 80074a6:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			reportEvent(EV_LOST_TSYNC);
 80074aa:	200b      	movs	r0, #11
 80074ac:	f7fe fb9c 	bl	8005be8 <reportEvent>
			return;
 80074b0:	e021      	b.n	80074f6 <processBeacon+0x20a>
	if (LMIC.dataLen != 0 && decodeBeacon() >= 1) {
 80074b2:	bf00      	nop
		}
	}
	LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks
 80074b4:	4b11      	ldr	r3, [pc, #68]	@ (80074fc <processBeacon+0x210>)
 80074b6:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80074ba:	f503 147a 	add.w	r4, r3, #4096000	@ 0x3e8000
			- calcRxWindow(0, DR_BCN);
 80074be:	2103      	movs	r1, #3
 80074c0:	2000      	movs	r0, #0
 80074c2:	f7fd fe2d 	bl	8005120 <calcRxWindow>
 80074c6:	4603      	mov	r3, r0
 80074c8:	1ae3      	subs	r3, r4, r3
	LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks
 80074ca:	4a0c      	ldr	r2, [pc, #48]	@ (80074fc <processBeacon+0x210>)
 80074cc:	f8c2 318c 	str.w	r3, [r2, #396]	@ 0x18c
	LMIC.bcnRxsyms = LMIC.rxsyms;
 80074d0:	4b0a      	ldr	r3, [pc, #40]	@ (80074fc <processBeacon+0x210>)
 80074d2:	7c1a      	ldrb	r2, [r3, #16]
 80074d4:	4b09      	ldr	r3, [pc, #36]	@ (80074fc <processBeacon+0x210>)
 80074d6:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
	rev:
#if CFG_us915
    LMIC.bcnChnl = (LMIC.bcnChnl+1) & 7;
#endif
	if ((LMIC.opmode & OP_PINGINI) != 0)
 80074da:	4b08      	ldr	r3, [pc, #32]	@ (80074fc <processBeacon+0x210>)
 80074dc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80074e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d002      	beq.n	80074ee <processBeacon+0x202>
		rxschedInit(&LMIC.ping);  // note: reuses LMIC.frame buffer!
 80074e8:	4805      	ldr	r0, [pc, #20]	@ (8007500 <processBeacon+0x214>)
 80074ea:	f7fd fef3 	bl	80052d4 <rxschedInit>
	reportEvent(ev);
 80074ee:	7dfb      	ldrb	r3, [r7, #23]
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7fe fb79 	bl	8005be8 <reportEvent>
}
 80074f6:	371c      	adds	r7, #28
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd90      	pop	{r4, r7, pc}
 80074fc:	200002e0 	.word	0x200002e0
 8007500:	20000414 	.word	0x20000414

08007504 <startRxBcn>:

static void startRxBcn(xref2osjob_t osjob)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
	LMIC.osjob.func = FUNC_ADDR(processBeacon);
 800750c:	4b04      	ldr	r3, [pc, #16]	@ (8007520 <startRxBcn+0x1c>)
 800750e:	4a05      	ldr	r2, [pc, #20]	@ (8007524 <startRxBcn+0x20>)
 8007510:	61da      	str	r2, [r3, #28]
	os_radio(RADIO_RX);
 8007512:	2002      	movs	r0, #2
 8007514:	f001 fb5e 	bl	8008bd4 <os_radio>
}
 8007518:	bf00      	nop
 800751a:	3708      	adds	r7, #8
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	200002e0 	.word	0x200002e0
 8007524:	080072ed 	.word	0x080072ed

08007528 <startRxPing>:

static void startRxPing(xref2osjob_t osjob)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
	LMIC.osjob.func = FUNC_ADDR(processPingRx);
 8007530:	4b04      	ldr	r3, [pc, #16]	@ (8007544 <startRxPing+0x1c>)
 8007532:	4a05      	ldr	r2, [pc, #20]	@ (8007548 <startRxPing+0x20>)
 8007534:	61da      	str	r2, [r3, #28]
	os_radio(RADIO_RX);
 8007536:	2002      	movs	r0, #2
 8007538:	f001 fb4c 	bl	8008bd4 <os_radio>
}
 800753c:	bf00      	nop
 800753e:	3708      	adds	r7, #8
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	200002e0 	.word	0x200002e0
 8007548:	080070c9 	.word	0x080070c9

0800754c <engineUpdate>:

// Decide what to do next for the MAC layer of a device
static void engineUpdate(void)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b086      	sub	sp, #24
 8007550:	af00      	add	r7, sp, #0
	// Check for ongoing state: scan or TX/RX transaction
	if ((LMIC.opmode & (OP_SCAN | OP_TXRXPEND | OP_SHUTDOWN)) != 0)
 8007552:	4b90      	ldr	r3, [pc, #576]	@ (8007794 <engineUpdate+0x248>)
 8007554:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007558:	f003 03c1 	and.w	r3, r3, #193	@ 0xc1
 800755c:	2b00      	cmp	r3, #0
 800755e:	f040 81ab 	bne.w	80078b8 <engineUpdate+0x36c>
		return;

	if (LMIC.devaddr == 0 && (LMIC.opmode & OP_JOINING) == 0) {
 8007562:	4b8c      	ldr	r3, [pc, #560]	@ (8007794 <engineUpdate+0x248>)
 8007564:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8007568:	2b00      	cmp	r3, #0
 800756a:	d109      	bne.n	8007580 <engineUpdate+0x34>
 800756c:	4b89      	ldr	r3, [pc, #548]	@ (8007794 <engineUpdate+0x248>)
 800756e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007572:	f003 0304 	and.w	r3, r3, #4
 8007576:	2b00      	cmp	r3, #0
 8007578:	d102      	bne.n	8007580 <engineUpdate+0x34>
		LMIC_startJoining();
 800757a:	f7ff fd5b 	bl	8007034 <LMIC_startJoining>
		return;
 800757e:	e19e      	b.n	80078be <engineUpdate+0x372>
	}

	ostime_t now = os_getTime();
 8007580:	f000 fd02 	bl	8007f88 <os_getTime>
 8007584:	60b8      	str	r0, [r7, #8]
	ostime_t rxtime = 0;
 8007586:	2300      	movs	r3, #0
 8007588:	617b      	str	r3, [r7, #20]
	ostime_t txbeg = 0;
 800758a:	2300      	movs	r3, #0
 800758c:	613b      	str	r3, [r7, #16]

	if ((LMIC.opmode & OP_TRACK) != 0) {
 800758e:	4b81      	ldr	r3, [pc, #516]	@ (8007794 <engineUpdate+0x248>)
 8007590:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007594:	f003 0302 	and.w	r3, r3, #2
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00f      	beq.n	80075bc <engineUpdate+0x70>
		// We are tracking a beacon
		ASSERT(now + RX_RAMPUP - LMIC.bcnRxtime <= 0);
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80075a2:	4b7c      	ldr	r3, [pc, #496]	@ (8007794 <engineUpdate+0x248>)
 80075a4:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	dd01      	ble.n	80075b2 <engineUpdate+0x66>
 80075ae:	f7fd f90b 	bl	80047c8 <hal_failed>
		rxtime = LMIC.bcnRxtime - RX_RAMPUP;
 80075b2:	4b78      	ldr	r3, [pc, #480]	@ (8007794 <engineUpdate+0x248>)
 80075b4:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 80075b8:	3b40      	subs	r3, #64	@ 0x40
 80075ba:	617b      	str	r3, [r7, #20]
	}

	if ((LMIC.opmode & (OP_JOINING | OP_REJOIN | OP_TXDATA | OP_POLL)) != 0) {
 80075bc:	4b75      	ldr	r3, [pc, #468]	@ (8007794 <engineUpdate+0x248>)
 80075be:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80075c2:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	f000 80f2 	beq.w	80077b0 <engineUpdate+0x264>
		// Need to TX some data...
		// Assuming txChnl points to channel which first becomes available again.
		bit_t jacc = ((LMIC.opmode & (OP_JOINING | OP_REJOIN)) != 0 ? 1 : 0);
 80075cc:	4b71      	ldr	r3, [pc, #452]	@ (8007794 <engineUpdate+0x248>)
 80075ce:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80075d2:	f003 0324 	and.w	r3, r3, #36	@ 0x24
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	bf14      	ite	ne
 80075da:	2301      	movne	r3, #1
 80075dc:	2300      	moveq	r3, #0
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	71fb      	strb	r3, [r7, #7]
		// Find next suitable channel and return availability time
		if ((LMIC.opmode & OP_NEXTCHNL) != 0) {
 80075e2:	4b6c      	ldr	r3, [pc, #432]	@ (8007794 <engineUpdate+0x248>)
 80075e4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80075e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d012      	beq.n	8007616 <engineUpdate+0xca>
			txbeg = LMIC.txend = nextTx(now);
 80075f0:	68b8      	ldr	r0, [r7, #8]
 80075f2:	f7fe f98f 	bl	8005914 <nextTx>
 80075f6:	4603      	mov	r3, r0
 80075f8:	4a66      	ldr	r2, [pc, #408]	@ (8007794 <engineUpdate+0x248>)
 80075fa:	6013      	str	r3, [r2, #0]
 80075fc:	4b65      	ldr	r3, [pc, #404]	@ (8007794 <engineUpdate+0x248>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	613b      	str	r3, [r7, #16]
			LMIC.opmode &= ~OP_NEXTCHNL;
 8007602:	4b64      	ldr	r3, [pc, #400]	@ (8007794 <engineUpdate+0x248>)
 8007604:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007608:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800760c:	b29a      	uxth	r2, r3
 800760e:	4b61      	ldr	r3, [pc, #388]	@ (8007794 <engineUpdate+0x248>)
 8007610:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8007614:	e002      	b.n	800761c <engineUpdate+0xd0>
		} else {
			txbeg = LMIC.txend;
 8007616:	4b5f      	ldr	r3, [pc, #380]	@ (8007794 <engineUpdate+0x248>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	613b      	str	r3, [r7, #16]
		}
		// Delayed TX or waiting for duty cycle?
		if ((LMIC.globalDutyRate != 0 || (LMIC.opmode & OP_RNDTX) != 0)
 800761c:	4b5d      	ldr	r3, [pc, #372]	@ (8007794 <engineUpdate+0x248>)
 800761e:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 8007622:	2b00      	cmp	r3, #0
 8007624:	d106      	bne.n	8007634 <engineUpdate+0xe8>
 8007626:	4b5b      	ldr	r3, [pc, #364]	@ (8007794 <engineUpdate+0x248>)
 8007628:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800762c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00a      	beq.n	800764a <engineUpdate+0xfe>
				&& (txbeg - LMIC.globalDutyAvail) < 0)
 8007634:	4b57      	ldr	r3, [pc, #348]	@ (8007794 <engineUpdate+0x248>)
 8007636:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800763a:	693a      	ldr	r2, [r7, #16]
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	2b00      	cmp	r3, #0
 8007640:	da03      	bge.n	800764a <engineUpdate+0xfe>
			txbeg = LMIC.globalDutyAvail;
 8007642:	4b54      	ldr	r3, [pc, #336]	@ (8007794 <engineUpdate+0x248>)
 8007644:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007648:	613b      	str	r3, [r7, #16]
		// If we're tracking a beacon...
		// then make sure TX-RX transaction is complete before beacon
		if ((LMIC.opmode & OP_TRACK) != 0
 800764a:	4b52      	ldr	r3, [pc, #328]	@ (8007794 <engineUpdate+0x248>)
 800764c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8007650:	f003 0302 	and.w	r3, r3, #2
 8007654:	2b00      	cmp	r3, #0
 8007656:	d017      	beq.n	8007688 <engineUpdate+0x13c>
				&& txbeg + (jacc ? JOIN_GUARD_osticks : TXRX_GUARD_osticks)
 8007658:	79fb      	ldrb	r3, [r7, #7]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d001      	beq.n	8007662 <engineUpdate+0x116>
 800765e:	4a4e      	ldr	r2, [pc, #312]	@ (8007798 <engineUpdate+0x24c>)
 8007660:	e000      	b.n	8007664 <engineUpdate+0x118>
 8007662:	4a4e      	ldr	r2, [pc, #312]	@ (800779c <engineUpdate+0x250>)
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	441a      	add	r2, r3
						- rxtime > 0) {
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	1ad3      	subs	r3, r2, r3
				&& txbeg + (jacc ? JOIN_GUARD_osticks : TXRX_GUARD_osticks)
 800766c:	2b00      	cmp	r3, #0
 800766e:	dd0b      	ble.n	8007688 <engineUpdate+0x13c>
			// Not enough time to complete TX-RX before beacon - postpone after beacon.
			// In order to avoid clustering of postponed TX right after beacon randomize start!
			txDelay(rxtime + BCN_RESERVE_osticks, 16);
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 8007676:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800767a:	2110      	movs	r1, #16
 800767c:	4618      	mov	r0, r3
 800767e:	f7fd ff23 	bl	80054c8 <txDelay>
			txbeg = 0;
 8007682:	2300      	movs	r3, #0
 8007684:	613b      	str	r3, [r7, #16]
			goto checkrx;
 8007686:	e09b      	b.n	80077c0 <engineUpdate+0x274>
		}
		// Earliest possible time vs overhead to setup radio
		if (txbeg - (now + TX_RAMPUP) < 0) {
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	3340      	adds	r3, #64	@ 0x40
 800768c:	693a      	ldr	r2, [r7, #16]
 800768e:	1ad3      	subs	r3, r2, r3
 8007690:	2b00      	cmp	r3, #0
 8007692:	da70      	bge.n	8007776 <engineUpdate+0x22a>
			// We could send right now!
			txbeg = now;
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	613b      	str	r3, [r7, #16]
			dr_t txdr = (dr_t) LMIC.datarate;
 8007698:	4b3e      	ldr	r3, [pc, #248]	@ (8007794 <engineUpdate+0x248>)
 800769a:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800769e:	73fb      	strb	r3, [r7, #15]
			if (jacc) {
 80076a0:	79fb      	ldrb	r3, [r7, #7]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d01d      	beq.n	80076e2 <engineUpdate+0x196>
				u1_t ftype;
				if ((LMIC.opmode & OP_REJOIN) != 0) {
 80076a6:	4b3b      	ldr	r3, [pc, #236]	@ (8007794 <engineUpdate+0x248>)
 80076a8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80076ac:	f003 0320 	and.w	r3, r3, #32
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00c      	beq.n	80076ce <engineUpdate+0x182>
					txdr = lowerDR(txdr, LMIC.rejoinCnt);
 80076b4:	4b37      	ldr	r3, [pc, #220]	@ (8007794 <engineUpdate+0x248>)
 80076b6:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 80076ba:	7bfb      	ldrb	r3, [r7, #15]
 80076bc:	4611      	mov	r1, r2
 80076be:	4618      	mov	r0, r3
 80076c0:	f7fd fa10 	bl	8004ae4 <lowerDR>
 80076c4:	4603      	mov	r3, r0
 80076c6:	73fb      	strb	r3, [r7, #15]
					ftype = HDR_FTYPE_REJOIN;
 80076c8:	23c0      	movs	r3, #192	@ 0xc0
 80076ca:	73bb      	strb	r3, [r7, #14]
 80076cc:	e001      	b.n	80076d2 <engineUpdate+0x186>
				} else {
					ftype = HDR_FTYPE_JREQ;
 80076ce:	2300      	movs	r3, #0
 80076d0:	73bb      	strb	r3, [r7, #14]
				}
				buildJoinRequest(ftype);
 80076d2:	7bbb      	ldrb	r3, [r7, #14]
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7ff fc6b 	bl	8006fb0 <buildJoinRequest>
				LMIC.osjob.func = FUNC_ADDR(jreqDone);
 80076da:	4b2e      	ldr	r3, [pc, #184]	@ (8007794 <engineUpdate+0x248>)
 80076dc:	4a30      	ldr	r2, [pc, #192]	@ (80077a0 <engineUpdate+0x254>)
 80076de:	61da      	str	r2, [r3, #28]
 80076e0:	e01d      	b.n	800771e <engineUpdate+0x1d2>
			} else {
				if (LMIC.seqnoDn >= 0xFFFFFF80) {
 80076e2:	4b2c      	ldr	r3, [pc, #176]	@ (8007794 <engineUpdate+0x248>)
 80076e4:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80076e8:	f113 0f81 	cmn.w	r3, #129	@ 0x81
 80076ec:	d907      	bls.n	80076fe <engineUpdate+0x1b2>
									e_.eui = MAIN::CDEV->getEui(),
									e_.info = LMIC.seqnoDn,
									e_.info2 = 0));
					// Device has to react! NWK will not roll over and just stop sending.
					// Thus, we have N frames to detect a possible lock up.
					reset: os_setCallback(&LMIC.osjob, FUNC_ADDR(runReset));
 80076ee:	bf00      	nop
 80076f0:	e000      	b.n	80076f4 <engineUpdate+0x1a8>
					EV(specCond, ERR, (e_.reason = EV::specCond_t::UPSEQNO_ROLL_OVER,
									e_.eui = MAIN::CDEV->getEui(),
									e_.info2 = LMIC.seqnoUp));
					// Do not run RESET event callback from here!
					// App code might do some stuff after send unaware of RESET.
					goto reset;
 80076f2:	bf00      	nop
					reset: os_setCallback(&LMIC.osjob, FUNC_ADDR(runReset));
 80076f4:	492b      	ldr	r1, [pc, #172]	@ (80077a4 <engineUpdate+0x258>)
 80076f6:	482c      	ldr	r0, [pc, #176]	@ (80077a8 <engineUpdate+0x25c>)
 80076f8:	f000 fc8a 	bl	8008010 <os_setCallback>
					return;
 80076fc:	e0df      	b.n	80078be <engineUpdate+0x372>
				if ((LMIC.txCnt == 0 && LMIC.seqnoUp == 0xFFFFFFFF)) {
 80076fe:	4b25      	ldr	r3, [pc, #148]	@ (8007794 <engineUpdate+0x248>)
 8007700:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8007704:	2b00      	cmp	r3, #0
 8007706:	d105      	bne.n	8007714 <engineUpdate+0x1c8>
 8007708:	4b22      	ldr	r3, [pc, #136]	@ (8007794 <engineUpdate+0x248>)
 800770a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800770e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007712:	d0ee      	beq.n	80076f2 <engineUpdate+0x1a6>
				}
				buildDataFrame();
 8007714:	f7ff f9ba 	bl	8006a8c <buildDataFrame>
				LMIC.osjob.func = FUNC_ADDR(updataDone);
 8007718:	4b1e      	ldr	r3, [pc, #120]	@ (8007794 <engineUpdate+0x248>)
 800771a:	4a24      	ldr	r2, [pc, #144]	@ (80077ac <engineUpdate+0x260>)
 800771c:	61da      	str	r2, [r3, #28]
			}
			LMIC.rps = setCr(updr2rps(txdr), (cr_t) LMIC.errcr);
 800771e:	7bfb      	ldrb	r3, [r7, #15]
 8007720:	4618      	mov	r0, r3
 8007722:	f7fd f98b 	bl	8004a3c <updr2rps>
 8007726:	4603      	mov	r3, r0
 8007728:	461a      	mov	r2, r3
 800772a:	4b1a      	ldr	r3, [pc, #104]	@ (8007794 <engineUpdate+0x248>)
 800772c:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8007730:	4619      	mov	r1, r3
 8007732:	4610      	mov	r0, r2
 8007734:	f7fd f91c 	bl	8004970 <setCr>
 8007738:	4603      	mov	r3, r0
 800773a:	461a      	mov	r2, r3
 800773c:	4b15      	ldr	r3, [pc, #84]	@ (8007794 <engineUpdate+0x248>)
 800773e:	81da      	strh	r2, [r3, #14]
			LMIC.dndr = txdr; // carry TX datarate (can be != LMIC.datarate) over to txDone/setupRx1
 8007740:	4a14      	ldr	r2, [pc, #80]	@ (8007794 <engineUpdate+0x248>)
 8007742:	7bfb      	ldrb	r3, [r7, #15]
 8007744:	7453      	strb	r3, [r2, #17]
			LMIC.opmode = (LMIC.opmode & ~(OP_POLL | OP_RNDTX)) | OP_TXRXPEND
 8007746:	4b13      	ldr	r3, [pc, #76]	@ (8007794 <engineUpdate+0x248>)
 8007748:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800774c:	b21b      	sxth	r3, r3
					| OP_NEXTCHNL;
 800774e:	f423 6319 	bic.w	r3, r3, #2448	@ 0x990
 8007752:	b21b      	sxth	r3, r3
 8007754:	f443 6308 	orr.w	r3, r3, #2176	@ 0x880
 8007758:	b21b      	sxth	r3, r3
 800775a:	b29a      	uxth	r2, r3
			LMIC.opmode = (LMIC.opmode & ~(OP_POLL | OP_RNDTX)) | OP_TXRXPEND
 800775c:	4b0d      	ldr	r3, [pc, #52]	@ (8007794 <engineUpdate+0x248>)
 800775e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
			updateTx(txbeg);
 8007762:	6938      	ldr	r0, [r7, #16]
 8007764:	f7fe f88c 	bl	8005880 <updateTx>
			reportEvent(EV_TXSTART);
 8007768:	2011      	movs	r0, #17
 800776a:	f7fe fa3d 	bl	8005be8 <reportEvent>
			os_radio(RADIO_TX);
 800776e:	2001      	movs	r0, #1
 8007770:	f001 fa30 	bl	8008bd4 <os_radio>
			return;
 8007774:	e0a3      	b.n	80078be <engineUpdate+0x372>
		}
		// Cannot yet TX
		if ((LMIC.opmode & OP_TRACK) == 0)
 8007776:	4b07      	ldr	r3, [pc, #28]	@ (8007794 <engineUpdate+0x248>)
 8007778:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800777c:	f003 0302 	and.w	r3, r3, #2
 8007780:	2b00      	cmp	r3, #0
 8007782:	f000 808c 	beq.w	800789e <engineUpdate+0x352>
			goto txdelay;
		// We don't track the beacon - nothing else to do - so wait for the time to TX
		// Consider RX tasks
		if (txbeg == 0) // zero indicates no TX pending
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d119      	bne.n	80077c0 <engineUpdate+0x274>
			txbeg += 1; // TX delayed by one tick (insignificant amount of time)
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	3301      	adds	r3, #1
 8007790:	613b      	str	r3, [r7, #16]
 8007792:	e015      	b.n	80077c0 <engineUpdate+0x274>
 8007794:	200002e0 	.word	0x200002e0
 8007798:	00046500 	.word	0x00046500
 800779c:	0002ee00 	.word	0x0002ee00
 80077a0:	0800694d 	.word	0x0800694d
 80077a4:	08005c07 	.word	0x08005c07
 80077a8:	200002f4 	.word	0x200002f4
 80077ac:	08006a5d 	.word	0x08006a5d
	} else {
		// No TX pending - no scheduled RX
		if ((LMIC.opmode & OP_TRACK) == 0)
 80077b0:	4b44      	ldr	r3, [pc, #272]	@ (80078c4 <engineUpdate+0x378>)
 80077b2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80077b6:	f003 0302 	and.w	r3, r3, #2
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d07e      	beq.n	80078bc <engineUpdate+0x370>
			return;
	}

	// Are we pingable?
	checkrx: if ((LMIC.opmode & OP_PINGINI) != 0) {
 80077be:	bf00      	nop
 80077c0:	4b40      	ldr	r3, [pc, #256]	@ (80078c4 <engineUpdate+0x378>)
 80077c2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80077c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d041      	beq.n	8007852 <engineUpdate+0x306>
		// One more RX slot in this beacon period?
		if (rxschedNext(&LMIC.ping, now + RX_RAMPUP)) {
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	3340      	adds	r3, #64	@ 0x40
 80077d2:	4619      	mov	r1, r3
 80077d4:	483c      	ldr	r0, [pc, #240]	@ (80078c8 <engineUpdate+0x37c>)
 80077d6:	f7fd fdeb 	bl	80053b0 <rxschedNext>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d038      	beq.n	8007852 <engineUpdate+0x306>
			if (txbeg != 0 && (txbeg - LMIC.ping.rxtime) < 0)
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d006      	beq.n	80077f4 <engineUpdate+0x2a8>
 80077e6:	4b37      	ldr	r3, [pc, #220]	@ (80078c4 <engineUpdate+0x378>)
 80077e8:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 80077ec:	693a      	ldr	r2, [r7, #16]
 80077ee:	1ad3      	subs	r3, r2, r3
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	db56      	blt.n	80078a2 <engineUpdate+0x356>
				goto txdelay;
			LMIC.rxsyms = LMIC.ping.rxsyms;
 80077f4:	4b33      	ldr	r3, [pc, #204]	@ (80078c4 <engineUpdate+0x378>)
 80077f6:	f893 2137 	ldrb.w	r2, [r3, #311]	@ 0x137
 80077fa:	4b32      	ldr	r3, [pc, #200]	@ (80078c4 <engineUpdate+0x378>)
 80077fc:	741a      	strb	r2, [r3, #16]
			LMIC.rxtime = LMIC.ping.rxtime;
 80077fe:	4b31      	ldr	r3, [pc, #196]	@ (80078c4 <engineUpdate+0x378>)
 8007800:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8007804:	4a2f      	ldr	r2, [pc, #188]	@ (80078c4 <engineUpdate+0x378>)
 8007806:	6053      	str	r3, [r2, #4]
			LMIC.freq = LMIC.ping.freq;
 8007808:	4b2e      	ldr	r3, [pc, #184]	@ (80078c4 <engineUpdate+0x378>)
 800780a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800780e:	4a2d      	ldr	r2, [pc, #180]	@ (80078c4 <engineUpdate+0x378>)
 8007810:	6093      	str	r3, [r2, #8]
			LMIC.rps = dndr2rps(LMIC.ping.dr);
 8007812:	4b2c      	ldr	r3, [pc, #176]	@ (80078c4 <engineUpdate+0x378>)
 8007814:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8007818:	4618      	mov	r0, r3
 800781a:	f7fd f921 	bl	8004a60 <dndr2rps>
 800781e:	4603      	mov	r3, r0
 8007820:	461a      	mov	r2, r3
 8007822:	4b28      	ldr	r3, [pc, #160]	@ (80078c4 <engineUpdate+0x378>)
 8007824:	81da      	strh	r2, [r3, #14]
			LMIC.dataLen = 0;
 8007826:	4b27      	ldr	r3, [pc, #156]	@ (80078c4 <engineUpdate+0x378>)
 8007828:	2200      	movs	r2, #0
 800782a:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
			ASSERT(LMIC.rxtime - now+RX_RAMPUP >= 0);
 800782e:	4b25      	ldr	r3, [pc, #148]	@ (80078c4 <engineUpdate+0x378>)
 8007830:	685a      	ldr	r2, [r3, #4]
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	1ad3      	subs	r3, r2, r3
 8007836:	f113 0f40 	cmn.w	r3, #64	@ 0x40
 800783a:	da01      	bge.n	8007840 <engineUpdate+0x2f4>
 800783c:	f7fc ffc4 	bl	80047c8 <hal_failed>
			os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP,
 8007840:	4b20      	ldr	r3, [pc, #128]	@ (80078c4 <engineUpdate+0x378>)
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	3b40      	subs	r3, #64	@ 0x40
 8007846:	4a21      	ldr	r2, [pc, #132]	@ (80078cc <engineUpdate+0x380>)
 8007848:	4619      	mov	r1, r3
 800784a:	4821      	ldr	r0, [pc, #132]	@ (80078d0 <engineUpdate+0x384>)
 800784c:	f000 fc06 	bl	800805c <os_setTimedCallback>
					FUNC_ADDR(startRxPing));
			return;
 8007850:	e035      	b.n	80078be <engineUpdate+0x372>
		}
		// no - just wait for the beacon
	}

	if (txbeg != 0 && (txbeg - rxtime) < 0)
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d004      	beq.n	8007862 <engineUpdate+0x316>
 8007858:	693a      	ldr	r2, [r7, #16]
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	2b00      	cmp	r3, #0
 8007860:	db21      	blt.n	80078a6 <engineUpdate+0x35a>
		goto txdelay;

	setBcnRxParams();
 8007862:	f7fe f8f3 	bl	8005a4c <setBcnRxParams>
	LMIC.rxsyms = LMIC.bcnRxsyms;
 8007866:	4b17      	ldr	r3, [pc, #92]	@ (80078c4 <engineUpdate+0x378>)
 8007868:	f893 2189 	ldrb.w	r2, [r3, #393]	@ 0x189
 800786c:	4b15      	ldr	r3, [pc, #84]	@ (80078c4 <engineUpdate+0x378>)
 800786e:	741a      	strb	r2, [r3, #16]
	LMIC.rxtime = LMIC.bcnRxtime;
 8007870:	4b14      	ldr	r3, [pc, #80]	@ (80078c4 <engineUpdate+0x378>)
 8007872:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8007876:	4a13      	ldr	r2, [pc, #76]	@ (80078c4 <engineUpdate+0x378>)
 8007878:	6053      	str	r3, [r2, #4]
	if (now - rxtime >= 0) {
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	2b00      	cmp	r3, #0
 8007882:	db06      	blt.n	8007892 <engineUpdate+0x346>
		LMIC.osjob.func = FUNC_ADDR(processBeacon);
 8007884:	4b0f      	ldr	r3, [pc, #60]	@ (80078c4 <engineUpdate+0x378>)
 8007886:	4a13      	ldr	r2, [pc, #76]	@ (80078d4 <engineUpdate+0x388>)
 8007888:	61da      	str	r2, [r3, #28]
		os_radio(RADIO_RX);
 800788a:	2002      	movs	r0, #2
 800788c:	f001 f9a2 	bl	8008bd4 <os_radio>
		return;
 8007890:	e015      	b.n	80078be <engineUpdate+0x372>
	}
	os_setTimedCallback(&LMIC.osjob, rxtime, FUNC_ADDR(startRxBcn));
 8007892:	4a11      	ldr	r2, [pc, #68]	@ (80078d8 <engineUpdate+0x38c>)
 8007894:	6979      	ldr	r1, [r7, #20]
 8007896:	480e      	ldr	r0, [pc, #56]	@ (80078d0 <engineUpdate+0x384>)
 8007898:	f000 fbe0 	bl	800805c <os_setTimedCallback>
	return;
 800789c:	e00f      	b.n	80078be <engineUpdate+0x372>
			goto txdelay;
 800789e:	bf00      	nop
 80078a0:	e002      	b.n	80078a8 <engineUpdate+0x35c>
				goto txdelay;
 80078a2:	bf00      	nop
 80078a4:	e000      	b.n	80078a8 <engineUpdate+0x35c>
		goto txdelay;
 80078a6:	bf00      	nop

	txdelay: EV(devCond, INFO, (e_.reason = EV::devCond_t::TX_DELAY,
					e_.eui = MAIN::CDEV->getEui(),
					e_.info = osticks2ms(txbeg-now),
					e_.info2 = LMIC.seqnoUp-1));
	os_setTimedCallback(&LMIC.osjob, txbeg - TX_RAMPUP,
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	3b40      	subs	r3, #64	@ 0x40
 80078ac:	4a0b      	ldr	r2, [pc, #44]	@ (80078dc <engineUpdate+0x390>)
 80078ae:	4619      	mov	r1, r3
 80078b0:	4807      	ldr	r0, [pc, #28]	@ (80078d0 <engineUpdate+0x384>)
 80078b2:	f000 fbd3 	bl	800805c <os_setTimedCallback>
 80078b6:	e002      	b.n	80078be <engineUpdate+0x372>
		return;
 80078b8:	bf00      	nop
 80078ba:	e000      	b.n	80078be <engineUpdate+0x372>
			return;
 80078bc:	bf00      	nop
			FUNC_ADDR(runEngineUpdate));
}
 80078be:	3718      	adds	r7, #24
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	200002e0 	.word	0x200002e0
 80078c8:	20000414 	.word	0x20000414
 80078cc:	08007529 	.word	0x08007529
 80078d0:	200002f4 	.word	0x200002f4
 80078d4:	080072ed 	.word	0x080072ed
 80078d8:	08007505 	.word	0x08007505
 80078dc:	08005bd5 	.word	0x08005bd5

080078e0 <LMIC_reset>:
	os_radio(RADIO_RST);
	LMIC.opmode |= OP_SHUTDOWN;
}

void LMIC_reset(void)
{
 80078e0:	b598      	push	{r3, r4, r7, lr}
 80078e2:	af00      	add	r7, sp, #0
	EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
					e_.eui = MAIN::CDEV->getEui(),
					e_.info = EV_RESET));
	os_radio(RADIO_RST);
 80078e4:	2000      	movs	r0, #0
 80078e6:	f001 f975 	bl	8008bd4 <os_radio>
	os_clearCallback(&LMIC.osjob);
 80078ea:	4821      	ldr	r0, [pc, #132]	@ (8007970 <LMIC_reset+0x90>)
 80078ec:	f000 fb72 	bl	8007fd4 <os_clearCallback>

	os_clearMem((xref2u1_t )&LMIC, SIZEOFEXPR(LMIC));
 80078f0:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 80078f4:	2100      	movs	r1, #0
 80078f6:	481f      	ldr	r0, [pc, #124]	@ (8007974 <LMIC_reset+0x94>)
 80078f8:	f006 ff4b 	bl	800e792 <memset>
	LMIC.devaddr = 0;
 80078fc:	4b1d      	ldr	r3, [pc, #116]	@ (8007974 <LMIC_reset+0x94>)
 80078fe:	2200      	movs	r2, #0
 8007900:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
	LMIC.devNonce = os_getRndU2();
 8007904:	f001 f86a 	bl	80089dc <radio_rand1>
 8007908:	4603      	mov	r3, r0
 800790a:	021b      	lsls	r3, r3, #8
 800790c:	b21c      	sxth	r4, r3
 800790e:	f001 f865 	bl	80089dc <radio_rand1>
 8007912:	4603      	mov	r3, r0
 8007914:	b21b      	sxth	r3, r3
 8007916:	4323      	orrs	r3, r4
 8007918:	b21b      	sxth	r3, r3
 800791a:	b29a      	uxth	r2, r3
 800791c:	4b15      	ldr	r3, [pc, #84]	@ (8007974 <LMIC_reset+0x94>)
 800791e:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
	LMIC.opmode = OP_NONE;
 8007922:	4b14      	ldr	r3, [pc, #80]	@ (8007974 <LMIC_reset+0x94>)
 8007924:	2200      	movs	r2, #0
 8007926:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	LMIC.errcr = CR_4_5;
 800792a:	4b12      	ldr	r3, [pc, #72]	@ (8007974 <LMIC_reset+0x94>)
 800792c:	2200      	movs	r2, #0
 800792e:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
	LMIC.adrEnabled = FCT_ADREN;
 8007932:	4b10      	ldr	r3, [pc, #64]	@ (8007974 <LMIC_reset+0x94>)
 8007934:	2280      	movs	r2, #128	@ 0x80
 8007936:	f883 2127 	strb.w	r2, [r3, #295]	@ 0x127
	LMIC.dn2Dr = DR_DNW2;   // we need this for 2nd DN window of join accept
 800793a:	4b0e      	ldr	r3, [pc, #56]	@ (8007974 <LMIC_reset+0x94>)
 800793c:	2200      	movs	r2, #0
 800793e:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
	LMIC.dn2Freq = FREQ_DNW2; // ditto
 8007942:	4b0c      	ldr	r3, [pc, #48]	@ (8007974 <LMIC_reset+0x94>)
 8007944:	4a0c      	ldr	r2, [pc, #48]	@ (8007978 <LMIC_reset+0x98>)
 8007946:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
	LMIC.rxDelay = DELAY_DNW1;
 800794a:	4b0a      	ldr	r3, [pc, #40]	@ (8007974 <LMIC_reset+0x94>)
 800794c:	2201      	movs	r2, #1
 800794e:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
	LMIC.ping.freq = FREQ_PING; // defaults for ping
 8007952:	4b08      	ldr	r3, [pc, #32]	@ (8007974 <LMIC_reset+0x94>)
 8007954:	4a08      	ldr	r2, [pc, #32]	@ (8007978 <LMIC_reset+0x98>)
 8007956:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
	LMIC.ping.dr = DR_PING;   // ditto
 800795a:	4b06      	ldr	r3, [pc, #24]	@ (8007974 <LMIC_reset+0x94>)
 800795c:	2203      	movs	r2, #3
 800795e:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
	LMIC.ping.intvExp = 0xFF;
 8007962:	4b04      	ldr	r3, [pc, #16]	@ (8007974 <LMIC_reset+0x94>)
 8007964:	22ff      	movs	r2, #255	@ 0xff
 8007966:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
#if defined(CFG_us915)
    initDefaultChannels();
#endif
	DO_DEVDB(LMIC.devaddr, devaddr);DO_DEVDB(LMIC.devNonce, devNonce);DO_DEVDB(LMIC.dn2Dr, dn2Dr);DO_DEVDB(LMIC.dn2Freq, dn2Freq);DO_DEVDB(LMIC.ping.freq, pingFreq);DO_DEVDB(LMIC.ping.dr, pingDr);DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
}
 800796a:	bf00      	nop
 800796c:	bd98      	pop	{r3, r4, r7, pc}
 800796e:	bf00      	nop
 8007970:	200002f4 	.word	0x200002f4
 8007974:	200002e0 	.word	0x200002e0
 8007978:	33d3e608 	.word	0x33d3e608

0800797c <LMIC_init>:

void LMIC_init(void)
{
 800797c:	b480      	push	{r7}
 800797e:	af00      	add	r7, sp, #0
	LMIC.opmode = OP_SHUTDOWN;
 8007980:	4b04      	ldr	r3, [pc, #16]	@ (8007994 <LMIC_init+0x18>)
 8007982:	2240      	movs	r2, #64	@ 0x40
 8007984:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
}
 8007988:	bf00      	nop
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	200002e0 	.word	0x200002e0

08007998 <LMIC_setTxData>:
	os_radio(RADIO_RST);
	engineUpdate();
}

void LMIC_setTxData(void)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	af00      	add	r7, sp, #0
	LMIC.opmode |= OP_TXDATA;
 800799c:	4b0b      	ldr	r3, [pc, #44]	@ (80079cc <LMIC_setTxData+0x34>)
 800799e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80079a2:	f043 0308 	orr.w	r3, r3, #8
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	4b08      	ldr	r3, [pc, #32]	@ (80079cc <LMIC_setTxData+0x34>)
 80079aa:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	if ((LMIC.opmode & OP_JOINING) == 0)
 80079ae:	4b07      	ldr	r3, [pc, #28]	@ (80079cc <LMIC_setTxData+0x34>)
 80079b0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80079b4:	f003 0304 	and.w	r3, r3, #4
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d103      	bne.n	80079c4 <LMIC_setTxData+0x2c>
		LMIC.txCnt = 0;             // cancel any ongoing TX/RX retries
 80079bc:	4b03      	ldr	r3, [pc, #12]	@ (80079cc <LMIC_setTxData+0x34>)
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	engineUpdate();
 80079c4:	f7ff fdc2 	bl	800754c <engineUpdate>
}
 80079c8:	bf00      	nop
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	200002e0 	.word	0x200002e0

080079d0 <LMIC_setTxData2>:

//
int LMIC_setTxData2(u1_t port, xref2u1_t data, u1_t dlen, u1_t confirmed)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6039      	str	r1, [r7, #0]
 80079d8:	4611      	mov	r1, r2
 80079da:	461a      	mov	r2, r3
 80079dc:	4603      	mov	r3, r0
 80079de:	71fb      	strb	r3, [r7, #7]
 80079e0:	460b      	mov	r3, r1
 80079e2:	71bb      	strb	r3, [r7, #6]
 80079e4:	4613      	mov	r3, r2
 80079e6:	717b      	strb	r3, [r7, #5]
	if (dlen > SIZEOFEXPR(LMIC.pendTxData))
 80079e8:	79bb      	ldrb	r3, [r7, #6]
 80079ea:	2b34      	cmp	r3, #52	@ 0x34
 80079ec:	d902      	bls.n	80079f4 <LMIC_setTxData2+0x24>
		return -2;
 80079ee:	f06f 0301 	mvn.w	r3, #1
 80079f2:	e017      	b.n	8007a24 <LMIC_setTxData2+0x54>
	if (data != (xref2u1_t) 0)
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d005      	beq.n	8007a06 <LMIC_setTxData2+0x36>
		os_copyMem(LMIC.pendTxData, data, dlen);
 80079fa:	79bb      	ldrb	r3, [r7, #6]
 80079fc:	461a      	mov	r2, r3
 80079fe:	6839      	ldr	r1, [r7, #0]
 8007a00:	480a      	ldr	r0, [pc, #40]	@ (8007a2c <LMIC_setTxData2+0x5c>)
 8007a02:	f006 fef3 	bl	800e7ec <memcpy>
	LMIC.pendTxConf = confirmed;
 8007a06:	4a0a      	ldr	r2, [pc, #40]	@ (8007a30 <LMIC_setTxData2+0x60>)
 8007a08:	797b      	ldrb	r3, [r7, #5]
 8007a0a:	f882 30bb 	strb.w	r3, [r2, #187]	@ 0xbb
	LMIC.pendTxPort = port;
 8007a0e:	4a08      	ldr	r2, [pc, #32]	@ (8007a30 <LMIC_setTxData2+0x60>)
 8007a10:	79fb      	ldrb	r3, [r7, #7]
 8007a12:	f882 30ba 	strb.w	r3, [r2, #186]	@ 0xba
	LMIC.pendTxLen = dlen;
 8007a16:	4a06      	ldr	r2, [pc, #24]	@ (8007a30 <LMIC_setTxData2+0x60>)
 8007a18:	79bb      	ldrb	r3, [r7, #6]
 8007a1a:	f882 30bc 	strb.w	r3, [r2, #188]	@ 0xbc
	LMIC_setTxData();
 8007a1e:	f7ff ffbb 	bl	8007998 <LMIC_setTxData>
	return 0;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3708      	adds	r7, #8
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	2000039d 	.word	0x2000039d
 8007a30:	200002e0 	.word	0x200002e0

08007a34 <os_getArtEui>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// provide application router ID (8 bytes, LSBF)
void os_getArtEui(u1_t *buf)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
	memcpy(buf, APPEUI, 8);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4906      	ldr	r1, [pc, #24]	@ (8007a58 <os_getArtEui+0x24>)
 8007a40:	461a      	mov	r2, r3
 8007a42:	460b      	mov	r3, r1
 8007a44:	cb03      	ldmia	r3!, {r0, r1}
 8007a46:	6010      	str	r0, [r2, #0]
 8007a48:	6051      	str	r1, [r2, #4]
}
 8007a4a:	bf00      	nop
 8007a4c:	370c      	adds	r7, #12
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	0800fd10 	.word	0x0800fd10

08007a5c <os_getDevEui>:

// provide device ID (8 bytes, LSBF)
void os_getDevEui(u1_t *buf)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
	memcpy(buf, DEVEUI, 8);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4906      	ldr	r1, [pc, #24]	@ (8007a80 <os_getDevEui+0x24>)
 8007a68:	461a      	mov	r2, r3
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	cb03      	ldmia	r3!, {r0, r1}
 8007a6e:	6010      	str	r0, [r2, #0]
 8007a70:	6051      	str	r1, [r2, #4]
}
 8007a72:	bf00      	nop
 8007a74:	370c      	adds	r7, #12
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	0800fd18 	.word	0x0800fd18

08007a84 <os_getDevKey>:

// provide device key (16 bytes)
void os_getDevKey(u1_t *buf)
{
 8007a84:	b4b0      	push	{r4, r5, r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
	memcpy(buf, DEVKEY, 16);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a06      	ldr	r2, [pc, #24]	@ (8007aa8 <os_getDevKey+0x24>)
 8007a90:	461c      	mov	r4, r3
 8007a92:	4615      	mov	r5, r2
 8007a94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a96:	6020      	str	r0, [r4, #0]
 8007a98:	6061      	str	r1, [r4, #4]
 8007a9a:	60a2      	str	r2, [r4, #8]
 8007a9c:	60e3      	str	r3, [r4, #12]
}
 8007a9e:	bf00      	nop
 8007aa0:	370c      	adds	r7, #12
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bcb0      	pop	{r4, r5, r7}
 8007aa6:	4770      	bx	lr
 8007aa8:	0800fd20 	.word	0x0800fd20

08007aac <initsensor>:

void initsensor()
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	af00      	add	r7, sp, #0
	// Here you init your sensors
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8007ab0:	217f      	movs	r1, #127	@ 0x7f
 8007ab2:	4804      	ldr	r0, [pc, #16]	@ (8007ac4 <initsensor+0x18>)
 8007ab4:	f002 fe86 	bl	800a7c4 <HAL_ADCEx_Calibration_Start>
	bme68x_start(&data, &hi2c1);
 8007ab8:	4903      	ldr	r1, [pc, #12]	@ (8007ac8 <initsensor+0x1c>)
 8007aba:	4804      	ldr	r0, [pc, #16]	@ (8007acc <initsensor+0x20>)
 8007abc:	f7fc f80a 	bl	8003ad4 <bme68x_start>
}
 8007ac0:	bf00      	nop
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	20000084 	.word	0x20000084
 8007ac8:	2000028c 	.word	0x2000028c
 8007acc:	20000494 	.word	0x20000494

08007ad0 <initfunc>:

void initfunc(osjob_t *j)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
	// initialize sensor hardware
	initsensor();
 8007ad8:	f7ff ffe8 	bl	8007aac <initsensor>
	// reset MAC state
	LMIC_reset();
 8007adc:	f7ff ff00 	bl	80078e0 <LMIC_reset>
	// start joining
	LMIC_startJoining();
 8007ae0:	f7ff faa8 	bl	8007034 <LMIC_startJoining>
	// init done - onEvent() callback will be invoked...
}
 8007ae4:	bf00      	nop
 8007ae6:	3708      	adds	r7, #8
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <readsensor>:

u2_t readsensor()
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
	if (bme68x_single_measure(&data) == 0) {
 8007af2:	480d      	ldr	r0, [pc, #52]	@ (8007b28 <readsensor+0x3c>)
 8007af4:	f7fc f83e 	bl	8003b74 <bme68x_single_measure>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d106      	bne.n	8007b0c <readsensor+0x20>
		// Measurement is successful, so continue with IAQ
		data.iaq_score = bme68x_iaq(); // Calculate IAQ
 8007afe:	f7fc fab9 	bl	8004074 <bme68x_iaq>
 8007b02:	eef0 7a40 	vmov.f32	s15, s0
 8007b06:	4b08      	ldr	r3, [pc, #32]	@ (8007b28 <readsensor+0x3c>)
 8007b08:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	u2_t value = (u2_t) data.temperature;
 8007b0c:	4b06      	ldr	r3, [pc, #24]	@ (8007b28 <readsensor+0x3c>)
 8007b0e:	edd3 7a03 	vldr	s15, [r3, #12]
 8007b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b16:	ee17 3a90 	vmov	r3, s15
 8007b1a:	80fb      	strh	r3, [r7, #6]
	return value; /// read from everything ...make your own sensor
 8007b1c:	88fb      	ldrh	r3, [r7, #6]
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3708      	adds	r7, #8
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	20000494 	.word	0x20000494

08007b2c <reportfunc>:

static osjob_t reportjob;
// report sensor value every minute
static void reportfunc(osjob_t *j)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
	// read sensor
	u2_t val = readsensor();
 8007b34:	f7ff ffda 	bl	8007aec <readsensor>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	81fb      	strh	r3, [r7, #14]
	debug_valdec("val = ", val);
 8007b3c:	89fb      	ldrh	r3, [r7, #14]
 8007b3e:	4619      	mov	r1, r3
 8007b40:	4819      	ldr	r0, [pc, #100]	@ (8007ba8 <reportfunc+0x7c>)
 8007b42:	f7fc fb99 	bl	8004278 <debug_valdec>
	// prepare and schedule data for transmission
	LMIC.frame[0] = 0;
 8007b46:	4b19      	ldr	r3, [pc, #100]	@ (8007bac <reportfunc+0x80>)
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
	LMIC.frame[1] = 0x67;
 8007b4e:	4b17      	ldr	r3, [pc, #92]	@ (8007bac <reportfunc+0x80>)
 8007b50:	2267      	movs	r2, #103	@ 0x67
 8007b52:	f883 2149 	strb.w	r2, [r3, #329]	@ 0x149
	val *= 10;
 8007b56:	89fb      	ldrh	r3, [r7, #14]
 8007b58:	461a      	mov	r2, r3
 8007b5a:	0092      	lsls	r2, r2, #2
 8007b5c:	4413      	add	r3, r2
 8007b5e:	005b      	lsls	r3, r3, #1
 8007b60:	81fb      	strh	r3, [r7, #14]
	// val /= 100;
	LMIC.frame[2] = val >> 8;
 8007b62:	89fb      	ldrh	r3, [r7, #14]
 8007b64:	0a1b      	lsrs	r3, r3, #8
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	b2da      	uxtb	r2, r3
 8007b6a:	4b10      	ldr	r3, [pc, #64]	@ (8007bac <reportfunc+0x80>)
 8007b6c:	f883 214a 	strb.w	r2, [r3, #330]	@ 0x14a
	LMIC.frame[3] = val;
 8007b70:	89fb      	ldrh	r3, [r7, #14]
 8007b72:	b2da      	uxtb	r2, r3
 8007b74:	4b0d      	ldr	r3, [pc, #52]	@ (8007bac <reportfunc+0x80>)
 8007b76:	f883 214b 	strb.w	r2, [r3, #331]	@ 0x14b
	// La fonction LMIC_setTxData2 envoie
	LMIC_setTxData2(1, LMIC.frame, 4, 0);
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	2204      	movs	r2, #4
 8007b7e:	490c      	ldr	r1, [pc, #48]	@ (8007bb0 <reportfunc+0x84>)
 8007b80:	2001      	movs	r0, #1
 8007b82:	f7ff ff25 	bl	80079d0 <LMIC_setTxData2>
	// la trame Lora : LMIC.frame
	// (port 1, 2 bytes, unconfirmed)
	// reschedule job in 15 seconds
	os_setTimedCallback(j, os_getTime() + sec2osticks(15), reportfunc);
 8007b86:	f000 f9ff 	bl	8007f88 <os_getTime>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	f503 23ea 	add.w	r3, r3, #479232	@ 0x75000
 8007b90:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8007b94:	4a07      	ldr	r2, [pc, #28]	@ (8007bb4 <reportfunc+0x88>)
 8007b96:	4619      	mov	r1, r3
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 fa5f 	bl	800805c <os_setTimedCallback>
}
 8007b9e:	bf00      	nop
 8007ba0:	3710      	adds	r7, #16
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	0800e9dc 	.word	0x0800e9dc
 8007bac:	200002e0 	.word	0x200002e0
 8007bb0:	20000428 	.word	0x20000428
 8007bb4:	08007b2d 	.word	0x08007b2d

08007bb8 <blinkfunc>:
}

static osjob_t blinkjob;
static u1_t ledstate = 0;
static void blinkfunc(osjob_t *j)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
	// toggle LED
	ledstate = !ledstate;
 8007bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8007bfc <blinkfunc+0x44>)
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	bf0c      	ite	eq
 8007bc8:	2301      	moveq	r3, #1
 8007bca:	2300      	movne	r3, #0
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	461a      	mov	r2, r3
 8007bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8007bfc <blinkfunc+0x44>)
 8007bd2:	701a      	strb	r2, [r3, #0]
	debug_led(ledstate);
 8007bd4:	4b09      	ldr	r3, [pc, #36]	@ (8007bfc <blinkfunc+0x44>)
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7fc fa9b 	bl	8004114 <debug_led>
	// reschedule blink job
	os_setTimedCallback(j, os_getTime() + ms2osticks(100), blinkfunc);
 8007bde:	f000 f9d3 	bl	8007f88 <os_getTime>
 8007be2:	4603      	mov	r3, r0
 8007be4:	f503 6348 	add.w	r3, r3, #3200	@ 0xc80
 8007be8:	4a05      	ldr	r2, [pc, #20]	@ (8007c00 <blinkfunc+0x48>)
 8007bea:	4619      	mov	r1, r3
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 fa35 	bl	800805c <os_setTimedCallback>
}
 8007bf2:	bf00      	nop
 8007bf4:	3708      	adds	r7, #8
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	200004c8 	.word	0x200004c8
 8007c00:	08007bb9 	.word	0x08007bb9

08007c04 <onEvent>:

//////////////////////////////////////////////////
// LMIC EVENT CALLBACK
//////////////////////////////////////////////////
void onEvent(ev_t ev)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	71fb      	strb	r3, [r7, #7]
	debug_event(ev);
 8007c0e:	79fb      	ldrb	r3, [r7, #7]
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7fc fbbf 	bl	8004394 <debug_event>
	switch (ev) {
 8007c16:	79fb      	ldrb	r3, [r7, #7]
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	2b0e      	cmp	r3, #14
 8007c1c:	f200 8093 	bhi.w	8007d46 <onEvent+0x142>
 8007c20:	a201      	add	r2, pc, #4	@ (adr r2, 8007c28 <onEvent+0x24>)
 8007c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c26:	bf00      	nop
 8007c28:	08007c8f 	.word	0x08007c8f
 8007c2c:	08007c97 	.word	0x08007c97
 8007c30:	08007c9f 	.word	0x08007c9f
 8007c34:	08007ca7 	.word	0x08007ca7
 8007c38:	08007c65 	.word	0x08007c65
 8007c3c:	08007c73 	.word	0x08007c73
 8007c40:	08007caf 	.word	0x08007caf
 8007c44:	08007c87 	.word	0x08007c87
 8007c48:	08007cb7 	.word	0x08007cb7
 8007c4c:	08007cbf 	.word	0x08007cbf
 8007c50:	08007d1f 	.word	0x08007d1f
 8007c54:	08007d27 	.word	0x08007d27
 8007c58:	08007d2f 	.word	0x08007d2f
 8007c5c:	08007d37 	.word	0x08007d37
 8007c60:	08007d3f 	.word	0x08007d3f
	// network joined, session established
	case EV_JOINING:
		debug_str("try joining\r\n");
 8007c64:	483c      	ldr	r0, [pc, #240]	@ (8007d58 <onEvent+0x154>)
 8007c66:	f7fc fadd 	bl	8004224 <debug_str>
		blinkfunc(&blinkjob);
 8007c6a:	483c      	ldr	r0, [pc, #240]	@ (8007d5c <onEvent+0x158>)
 8007c6c:	f7ff ffa4 	bl	8007bb8 <blinkfunc>
		break;
 8007c70:	e06e      	b.n	8007d50 <onEvent+0x14c>
	case EV_JOINED:
		// kick-off periodic sensor job
		os_clearCallback(&blinkjob);
 8007c72:	483a      	ldr	r0, [pc, #232]	@ (8007d5c <onEvent+0x158>)
 8007c74:	f000 f9ae 	bl	8007fd4 <os_clearCallback>
		debug_led(1);
 8007c78:	2001      	movs	r0, #1
 8007c7a:	f7fc fa4b 	bl	8004114 <debug_led>
		reportfunc(&reportjob);
 8007c7e:	4838      	ldr	r0, [pc, #224]	@ (8007d60 <onEvent+0x15c>)
 8007c80:	f7ff ff54 	bl	8007b2c <reportfunc>
		break;
 8007c84:	e064      	b.n	8007d50 <onEvent+0x14c>
	case EV_JOIN_FAILED:
		debug_str("join failed\r\n");
 8007c86:	4837      	ldr	r0, [pc, #220]	@ (8007d64 <onEvent+0x160>)
 8007c88:	f7fc facc 	bl	8004224 <debug_str>
		break;
 8007c8c:	e060      	b.n	8007d50 <onEvent+0x14c>
	case EV_SCAN_TIMEOUT:
		debug_str("EV_SCAN_TIMEOUT\r\n");
 8007c8e:	4836      	ldr	r0, [pc, #216]	@ (8007d68 <onEvent+0x164>)
 8007c90:	f7fc fac8 	bl	8004224 <debug_str>
		break;
 8007c94:	e05c      	b.n	8007d50 <onEvent+0x14c>
	case EV_BEACON_FOUND:
		debug_str("EV_BEACON_FOUND\r\n");
 8007c96:	4835      	ldr	r0, [pc, #212]	@ (8007d6c <onEvent+0x168>)
 8007c98:	f7fc fac4 	bl	8004224 <debug_str>
		break;
 8007c9c:	e058      	b.n	8007d50 <onEvent+0x14c>
	case EV_BEACON_MISSED:
		debug_str("EV_BEACON_MISSED\r\n");
 8007c9e:	4834      	ldr	r0, [pc, #208]	@ (8007d70 <onEvent+0x16c>)
 8007ca0:	f7fc fac0 	bl	8004224 <debug_str>
		break;
 8007ca4:	e054      	b.n	8007d50 <onEvent+0x14c>
	case EV_BEACON_TRACKED:
		debug_str("EV_BEACON_TRACKED\r\n");
 8007ca6:	4833      	ldr	r0, [pc, #204]	@ (8007d74 <onEvent+0x170>)
 8007ca8:	f7fc fabc 	bl	8004224 <debug_str>
		break;
 8007cac:	e050      	b.n	8007d50 <onEvent+0x14c>
	case EV_RFU1:
		debug_str("EV_RFU1\r\n");
 8007cae:	4832      	ldr	r0, [pc, #200]	@ (8007d78 <onEvent+0x174>)
 8007cb0:	f7fc fab8 	bl	8004224 <debug_str>
		break;
 8007cb4:	e04c      	b.n	8007d50 <onEvent+0x14c>
	case EV_REJOIN_FAILED:
		debug_str("EV_REJOIN_FAILED\r\n");
 8007cb6:	4831      	ldr	r0, [pc, #196]	@ (8007d7c <onEvent+0x178>)
 8007cb8:	f7fc fab4 	bl	8004224 <debug_str>
		break;
 8007cbc:	e048      	b.n	8007d50 <onEvent+0x14c>
	case EV_TXCOMPLETE:
		debug_str("EV_TXCOMPLETE (includes waiting for RX windows)\r\n");
 8007cbe:	4830      	ldr	r0, [pc, #192]	@ (8007d80 <onEvent+0x17c>)
 8007cc0:	f7fc fab0 	bl	8004224 <debug_str>
		if (LMIC.txrxFlags & TXRX_ACK)
 8007cc4:	4b2f      	ldr	r3, [pc, #188]	@ (8007d84 <onEvent+0x180>)
 8007cc6:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8007cca:	b25b      	sxtb	r3, r3
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	da02      	bge.n	8007cd6 <onEvent+0xd2>
			debug_str("Received ack\r\n");
 8007cd0:	482d      	ldr	r0, [pc, #180]	@ (8007d88 <onEvent+0x184>)
 8007cd2:	f7fc faa7 	bl	8004224 <debug_str>
		if (LMIC.dataLen) {
 8007cd6:	4b2b      	ldr	r3, [pc, #172]	@ (8007d84 <onEvent+0x180>)
 8007cd8:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d036      	beq.n	8007d4e <onEvent+0x14a>
			debug_valdec("Received bytes of payload\r\n:", LMIC.dataLen);
 8007ce0:	4b28      	ldr	r3, [pc, #160]	@ (8007d84 <onEvent+0x180>)
 8007ce2:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	4828      	ldr	r0, [pc, #160]	@ (8007d8c <onEvent+0x188>)
 8007cea:	f7fc fac5 	bl	8004278 <debug_valdec>
			debug_val("Data = :", LMIC.frame[LMIC.dataBeg]);
 8007cee:	4b25      	ldr	r3, [pc, #148]	@ (8007d84 <onEvent+0x180>)
 8007cf0:	f893 3146 	ldrb.w	r3, [r3, #326]	@ 0x146
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	4b23      	ldr	r3, [pc, #140]	@ (8007d84 <onEvent+0x180>)
 8007cf8:	4413      	add	r3, r2
 8007cfa:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8007cfe:	4619      	mov	r1, r3
 8007d00:	4823      	ldr	r0, [pc, #140]	@ (8007d90 <onEvent+0x18c>)
 8007d02:	f7fc faa4 	bl	800424e <debug_val>
			debug_led(LMIC.frame[LMIC.dataBeg]);
 8007d06:	4b1f      	ldr	r3, [pc, #124]	@ (8007d84 <onEvent+0x180>)
 8007d08:	f893 3146 	ldrb.w	r3, [r3, #326]	@ 0x146
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8007d84 <onEvent+0x180>)
 8007d10:	4413      	add	r3, r2
 8007d12:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8007d16:	4618      	mov	r0, r3
 8007d18:	f7fc f9fc 	bl	8004114 <debug_led>
		}
		break;
 8007d1c:	e017      	b.n	8007d4e <onEvent+0x14a>
	case EV_LOST_TSYNC:
		debug_str("EV_LOST_TSYNC\r\n");
 8007d1e:	481d      	ldr	r0, [pc, #116]	@ (8007d94 <onEvent+0x190>)
 8007d20:	f7fc fa80 	bl	8004224 <debug_str>
		break;
 8007d24:	e014      	b.n	8007d50 <onEvent+0x14c>
	case EV_RESET:
		debug_str("EV_RESET\r\n");
 8007d26:	481c      	ldr	r0, [pc, #112]	@ (8007d98 <onEvent+0x194>)
 8007d28:	f7fc fa7c 	bl	8004224 <debug_str>
		break;
 8007d2c:	e010      	b.n	8007d50 <onEvent+0x14c>
	case EV_RXCOMPLETE:
		// data received in ping slot
		debug_str("EV_RXCOMPLETE\r\n");
 8007d2e:	481b      	ldr	r0, [pc, #108]	@ (8007d9c <onEvent+0x198>)
 8007d30:	f7fc fa78 	bl	8004224 <debug_str>
		break;
 8007d34:	e00c      	b.n	8007d50 <onEvent+0x14c>
	case EV_LINK_DEAD:
		debug_str("EV_LINK_DEAD\r\n");
 8007d36:	481a      	ldr	r0, [pc, #104]	@ (8007da0 <onEvent+0x19c>)
 8007d38:	f7fc fa74 	bl	8004224 <debug_str>
		break;
 8007d3c:	e008      	b.n	8007d50 <onEvent+0x14c>
	case EV_LINK_ALIVE:
		debug_str("EV_LINK_ALIVE\r\n");
 8007d3e:	4819      	ldr	r0, [pc, #100]	@ (8007da4 <onEvent+0x1a0>)
 8007d40:	f7fc fa70 	bl	8004224 <debug_str>
		break;
 8007d44:	e004      	b.n	8007d50 <onEvent+0x14c>
	default:
		debug_str("Unknown event\r\n");
 8007d46:	4818      	ldr	r0, [pc, #96]	@ (8007da8 <onEvent+0x1a4>)
 8007d48:	f7fc fa6c 	bl	8004224 <debug_str>
		break;
 8007d4c:	e000      	b.n	8007d50 <onEvent+0x14c>
		break;
 8007d4e:	bf00      	nop
	}
}
 8007d50:	bf00      	nop
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	0800e9fc 	.word	0x0800e9fc
 8007d5c:	200004bc 	.word	0x200004bc
 8007d60:	200004b0 	.word	0x200004b0
 8007d64:	0800ea0c 	.word	0x0800ea0c
 8007d68:	0800ea1c 	.word	0x0800ea1c
 8007d6c:	0800ea30 	.word	0x0800ea30
 8007d70:	0800ea44 	.word	0x0800ea44
 8007d74:	0800ea58 	.word	0x0800ea58
 8007d78:	0800ea6c 	.word	0x0800ea6c
 8007d7c:	0800ea78 	.word	0x0800ea78
 8007d80:	0800ea8c 	.word	0x0800ea8c
 8007d84:	200002e0 	.word	0x200002e0
 8007d88:	0800eac0 	.word	0x0800eac0
 8007d8c:	0800ead0 	.word	0x0800ead0
 8007d90:	0800eaf0 	.word	0x0800eaf0
 8007d94:	0800eafc 	.word	0x0800eafc
 8007d98:	0800eb0c 	.word	0x0800eb0c
 8007d9c:	0800eb18 	.word	0x0800eb18
 8007da0:	0800eb28 	.word	0x0800eb28
 8007da4:	0800eb38 	.word	0x0800eb38
 8007da8:	0800eb48 	.word	0x0800eb48

08007dac <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8007db2:	f001 f9ae 	bl	8009112 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8007db6:	f000 f83b 	bl	8007e30 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8007dba:	f7fc fb09 	bl	80043d0 <MX_GPIO_Init>
	MX_SPI3_Init();
 8007dbe:	f000 ff35 	bl	8008c2c <MX_SPI3_Init>
	MX_TIM7_Init();
 8007dc2:	f001 f87b 	bl	8008ebc <MX_TIM7_Init>
	MX_ADC1_Init();
 8007dc6:	f7f8 ffe9 	bl	8000d9c <MX_ADC1_Init>
	MX_TIM6_Init();
 8007dca:	f001 f83f 	bl	8008e4c <MX_TIM6_Init>
	MX_I2C1_Init();
 8007dce:	f7fc fd03 	bl	80047d8 <MX_I2C1_Init>
	MX_USART2_UART_Init();
 8007dd2:	f001 f8ed 	bl	8008fb0 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim6);
 8007dd6:	4812      	ldr	r0, [pc, #72]	@ (8007e20 <main+0x74>)
 8007dd8:	f005 fd44 	bl	800d864 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);   // <----------- change to your setup
 8007ddc:	4811      	ldr	r0, [pc, #68]	@ (8007e24 <main+0x78>)
 8007dde:	f005 fd41 	bl	800d864 <HAL_TIM_Base_Start_IT>
	__HAL_SPI_ENABLE(&hspi3);        // <----------- change to your setup
 8007de2:	4b11      	ldr	r3, [pc, #68]	@ (8007e28 <main+0x7c>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	4b0f      	ldr	r3, [pc, #60]	@ (8007e28 <main+0x7c>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007df0:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(Alim_temp_GPIO_Port, Alim_temp_Pin, GPIO_PIN_SET);
 8007df2:	2201      	movs	r2, #1
 8007df4:	2180      	movs	r1, #128	@ 0x80
 8007df6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007dfa:	f002 fff1 	bl	800ade0 <HAL_GPIO_WritePin>
	osjob_t initjob;
	// initialize runtime env
	os_init();
 8007dfe:	f000 f8b1 	bl	8007f64 <os_init>
	// initialize debug library
	debug_init();
 8007e02:	f7fc f97d 	bl	8004100 <debug_init>
	// setup initial job
	os_setCallback(&initjob, initfunc);
 8007e06:	1d3b      	adds	r3, r7, #4
 8007e08:	4908      	ldr	r1, [pc, #32]	@ (8007e2c <main+0x80>)
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f000 f900 	bl	8008010 <os_setCallback>
	// execute scheduled jobs and events
	os_runloop();
 8007e10:	f000 f95a 	bl	80080c8 <os_runloop>
	// (not reached)
	return 0;
 8007e14:	2300      	movs	r3, #0

		}
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	20000548 	.word	0x20000548
 8007e24:	20000594 	.word	0x20000594
 8007e28:	200004e4 	.word	0x200004e4
 8007e2c:	08007ad1 	.word	0x08007ad1

08007e30 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b096      	sub	sp, #88	@ 0x58
 8007e34:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8007e36:	f107 0314 	add.w	r3, r7, #20
 8007e3a:	2244      	movs	r2, #68	@ 0x44
 8007e3c:	2100      	movs	r1, #0
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f006 fca7 	bl	800e792 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8007e44:	463b      	mov	r3, r7
 8007e46:	2200      	movs	r2, #0
 8007e48:	601a      	str	r2, [r3, #0]
 8007e4a:	605a      	str	r2, [r3, #4]
 8007e4c:	609a      	str	r2, [r3, #8]
 8007e4e:	60da      	str	r2, [r3, #12]
 8007e50:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8007e52:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8007e56:	f003 ff11 	bl	800bc7c <HAL_PWREx_ControlVoltageScaling>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d001      	beq.n	8007e64 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8007e60:	f000 f87a 	bl	8007f58 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007e64:	2302      	movs	r3, #2
 8007e66:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007e68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007e6c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007e6e:	2310      	movs	r3, #16
 8007e70:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007e72:	2302      	movs	r3, #2
 8007e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007e76:	2302      	movs	r3, #2
 8007e78:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8007e7e:	230a      	movs	r3, #10
 8007e80:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8007e82:	2307      	movs	r3, #7
 8007e84:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8007e86:	2302      	movs	r3, #2
 8007e88:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007e8a:	2302      	movs	r3, #2
 8007e8c:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8007e8e:	f107 0314 	add.w	r3, r7, #20
 8007e92:	4618      	mov	r0, r3
 8007e94:	f003 ff48 	bl	800bd28 <HAL_RCC_OscConfig>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d001      	beq.n	8007ea2 <SystemClock_Config+0x72>
		Error_Handler();
 8007e9e:	f000 f85b 	bl	8007f58 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8007ea2:	230f      	movs	r3, #15
 8007ea4:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8007eb6:	463b      	mov	r3, r7
 8007eb8:	2104      	movs	r1, #4
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f004 fb48 	bl	800c550 <HAL_RCC_ClockConfig>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d001      	beq.n	8007eca <SystemClock_Config+0x9a>
		Error_Handler();
 8007ec6:	f000 f847 	bl	8007f58 <Error_Handler>
	}
}
 8007eca:	bf00      	nop
 8007ecc:	3758      	adds	r7, #88	@ 0x58
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
	...

08007ed4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
	if (htim == &htim6) {
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4a09      	ldr	r2, [pc, #36]	@ (8007f04 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d102      	bne.n	8007eea <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_ADC_Start_IT(&hadc1);
 8007ee4:	4808      	ldr	r0, [pc, #32]	@ (8007f08 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8007ee6:	f001 fcef 	bl	80098c8 <HAL_ADC_Start_IT>
	}
	if (htim->Instance == htim7.Instance) {
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	4b07      	ldr	r3, [pc, #28]	@ (8007f0c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d101      	bne.n	8007efa <HAL_TIM_PeriodElapsedCallback+0x26>
		hal_ticksplusplus();
 8007ef6:	f7fc fbab 	bl	8004650 <hal_ticksplusplus>
	}
}
 8007efa:	bf00      	nop
 8007efc:	3708      	adds	r7, #8
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	20000548 	.word	0x20000548
 8007f08:	20000084 	.word	0x20000084
 8007f0c:	20000594 	.word	0x20000594

08007f10 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a0c      	ldr	r2, [pc, #48]	@ (8007f4c <HAL_ADC_ConvCpltCallback+0x3c>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d110      	bne.n	8007f42 <HAL_ADC_ConvCpltCallback+0x32>
		n_temp = HAL_ADC_GetValue(&hadc1);
 8007f20:	480a      	ldr	r0, [pc, #40]	@ (8007f4c <HAL_ADC_ConvCpltCallback+0x3c>)
 8007f22:	f001 fd85 	bl	8009a30 <HAL_ADC_GetValue>
 8007f26:	4603      	mov	r3, r0
 8007f28:	4a09      	ldr	r2, [pc, #36]	@ (8007f50 <HAL_ADC_ConvCpltCallback+0x40>)
 8007f2a:	6013      	str	r3, [r2, #0]
		temp = 188686 - 147 * n_temp;
 8007f2c:	4b08      	ldr	r3, [pc, #32]	@ (8007f50 <HAL_ADC_ConvCpltCallback+0x40>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2293      	movs	r2, #147	@ 0x93
 8007f32:	fb02 f303 	mul.w	r3, r2, r3
 8007f36:	f5c3 3338 	rsb	r3, r3, #188416	@ 0x2e000
 8007f3a:	f503 7387 	add.w	r3, r3, #270	@ 0x10e
 8007f3e:	4a05      	ldr	r2, [pc, #20]	@ (8007f54 <HAL_ADC_ConvCpltCallback+0x44>)
 8007f40:	6013      	str	r3, [r2, #0]
	}
}
 8007f42:	bf00      	nop
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	20000084 	.word	0x20000084
 8007f50:	2000048c 	.word	0x2000048c
 8007f54:	20000490 	.word	0x20000490

08007f58 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007f5c:	b672      	cpsid	i
}
 8007f5e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8007f60:	bf00      	nop
 8007f62:	e7fd      	b.n	8007f60 <Error_Handler+0x8>

08007f64 <os_init>:
	osjob_t *scheduledjobs;
	osjob_t *runnablejobs;
} OS;

void os_init()
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	af00      	add	r7, sp, #0
	memset(&OS, 0x00, sizeof(OS));
 8007f68:	2208      	movs	r2, #8
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	4805      	ldr	r0, [pc, #20]	@ (8007f84 <os_init+0x20>)
 8007f6e:	f006 fc10 	bl	800e792 <memset>
	hal_init();
 8007f72:	f7fc fc13 	bl	800479c <hal_init>
	radio_init();
 8007f76:	f000 fcbd 	bl	80088f4 <radio_init>
	LMIC_init();
 8007f7a:	f7ff fcff 	bl	800797c <LMIC_init>
}
 8007f7e:	bf00      	nop
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	200004cc 	.word	0x200004cc

08007f88 <os_getTime>:

ostime_t os_getTime()
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	af00      	add	r7, sp, #0
	return hal_ticks();
 8007f8c:	f7fc fb30 	bl	80045f0 <hal_ticks>
 8007f90:	4603      	mov	r3, r0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <unlinkjob>:

// unlink job from queue, return if removed
static int unlinkjob(osjob_t **pnext, osjob_t *job)
{
 8007f96:	b480      	push	{r7}
 8007f98:	b083      	sub	sp, #12
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
 8007f9e:	6039      	str	r1, [r7, #0]
	for (; *pnext; pnext = &((*pnext)->next)) {
 8007fa0:	e00d      	b.n	8007fbe <unlinkjob+0x28>
		if (*pnext == job) { // unlink
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	683a      	ldr	r2, [r7, #0]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d105      	bne.n	8007fb8 <unlinkjob+0x22>
			*pnext = job->next;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	601a      	str	r2, [r3, #0]
			return 1;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e007      	b.n	8007fc8 <unlinkjob+0x32>
	for (; *pnext; pnext = &((*pnext)->next)) {
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	607b      	str	r3, [r7, #4]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d1ed      	bne.n	8007fa2 <unlinkjob+0xc>
		}
	}
	return 0;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	370c      	adds	r7, #12
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <os_clearCallback>:

// clear scheduled job
void os_clearCallback(osjob_t *job)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
	hal_disableIRQs();
 8007fdc:	f7fc fbb2 	bl	8004744 <hal_disableIRQs>
	unlinkjob(&OS.scheduledjobs, job) || unlinkjob(&OS.runnablejobs, job);
 8007fe0:	6879      	ldr	r1, [r7, #4]
 8007fe2:	4809      	ldr	r0, [pc, #36]	@ (8008008 <os_clearCallback+0x34>)
 8007fe4:	f7ff ffd7 	bl	8007f96 <unlinkjob>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d105      	bne.n	8007ffa <os_clearCallback+0x26>
 8007fee:	6879      	ldr	r1, [r7, #4]
 8007ff0:	4806      	ldr	r0, [pc, #24]	@ (800800c <os_clearCallback+0x38>)
 8007ff2:	f7ff ffd0 	bl	8007f96 <unlinkjob>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
	hal_enableIRQs();
 8007ffa:	f7fc fbb3 	bl	8004764 <hal_enableIRQs>
}
 8007ffe:	bf00      	nop
 8008000:	3708      	adds	r7, #8
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	200004cc 	.word	0x200004cc
 800800c:	200004d0 	.word	0x200004d0

08008010 <os_setCallback>:

// schedule immediately runnable job
void os_setCallback(osjob_t *job, osjobcb_t cb)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
	osjob_t **pnext;
	hal_disableIRQs();
 800801a:	f7fc fb93 	bl	8004744 <hal_disableIRQs>
	// remove if job was already queued
	unlinkjob(&OS.runnablejobs, job);
 800801e:	6879      	ldr	r1, [r7, #4]
 8008020:	480d      	ldr	r0, [pc, #52]	@ (8008058 <os_setCallback+0x48>)
 8008022:	f7ff ffb8 	bl	8007f96 <unlinkjob>
	// fill-in job
	job->func = cb;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	683a      	ldr	r2, [r7, #0]
 800802a:	609a      	str	r2, [r3, #8]
	job->next = NULL;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	601a      	str	r2, [r3, #0]
	// add to end of run queue
	for (pnext = &OS.runnablejobs; *pnext; pnext = &((*pnext)->next))
 8008032:	4b09      	ldr	r3, [pc, #36]	@ (8008058 <os_setCallback+0x48>)
 8008034:	60fb      	str	r3, [r7, #12]
 8008036:	e002      	b.n	800803e <os_setCallback+0x2e>
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	60fb      	str	r3, [r7, #12]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d1f8      	bne.n	8008038 <os_setCallback+0x28>
		;
	*pnext = job;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	601a      	str	r2, [r3, #0]
	hal_enableIRQs();
 800804c:	f7fc fb8a 	bl	8004764 <hal_enableIRQs>
}
 8008050:	bf00      	nop
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	200004d0 	.word	0x200004d0

0800805c <os_setTimedCallback>:

// schedule timed job
void os_setTimedCallback(osjob_t *job, ostime_t time, osjobcb_t cb)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b086      	sub	sp, #24
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
	osjob_t **pnext;
	hal_disableIRQs();
 8008068:	f7fc fb6c 	bl	8004744 <hal_disableIRQs>
	// remove if job was already queued
	unlinkjob(&OS.scheduledjobs, job);
 800806c:	68f9      	ldr	r1, [r7, #12]
 800806e:	4815      	ldr	r0, [pc, #84]	@ (80080c4 <os_setTimedCallback+0x68>)
 8008070:	f7ff ff91 	bl	8007f96 <unlinkjob>
	// fill-in job
	job->deadline = time;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	68ba      	ldr	r2, [r7, #8]
 8008078:	605a      	str	r2, [r3, #4]
	job->func = cb;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	609a      	str	r2, [r3, #8]
	job->next = NULL;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2200      	movs	r2, #0
 8008084:	601a      	str	r2, [r3, #0]
	// insert into schedule
	for (pnext = &OS.scheduledjobs; *pnext; pnext = &((*pnext)->next)) {
 8008086:	4b0f      	ldr	r3, [pc, #60]	@ (80080c4 <os_setTimedCallback+0x68>)
 8008088:	617b      	str	r3, [r7, #20]
 800808a:	e00e      	b.n	80080aa <os_setTimedCallback+0x4e>
		if ((*pnext)->deadline - time > 0) { // (cmp diff, not abs!)
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	685a      	ldr	r2, [r3, #4]
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	2b00      	cmp	r3, #0
 8008098:	dd04      	ble.n	80080a4 <os_setTimedCallback+0x48>
			// enqueue before next element and stop
			job->next = *pnext;
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	601a      	str	r2, [r3, #0]
			break;
 80080a2:	e006      	b.n	80080b2 <os_setTimedCallback+0x56>
	for (pnext = &OS.scheduledjobs; *pnext; pnext = &((*pnext)->next)) {
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	617b      	str	r3, [r7, #20]
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1ec      	bne.n	800808c <os_setTimedCallback+0x30>
		}
	}
	*pnext = job;
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	601a      	str	r2, [r3, #0]
	hal_enableIRQs();
 80080b8:	f7fc fb54 	bl	8004764 <hal_enableIRQs>
}
 80080bc:	bf00      	nop
 80080be:	3718      	adds	r7, #24
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	200004cc 	.word	0x200004cc

080080c8 <os_runloop>:

// execute jobs from timer and from run queue
void os_runloop()
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
	while (1) {
		osjob_t *j = NULL;
 80080ce:	2300      	movs	r3, #0
 80080d0:	607b      	str	r3, [r7, #4]
		hal_disableIRQs();
 80080d2:	f7fc fb37 	bl	8004744 <hal_disableIRQs>
		// check for runnable jobs
		if (OS.runnablejobs) {
 80080d6:	4b16      	ldr	r3, [pc, #88]	@ (8008130 <os_runloop+0x68>)
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d007      	beq.n	80080ee <os_runloop+0x26>
			j = OS.runnablejobs;
 80080de:	4b14      	ldr	r3, [pc, #80]	@ (8008130 <os_runloop+0x68>)
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	607b      	str	r3, [r7, #4]
			OS.runnablejobs = j->next;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a11      	ldr	r2, [pc, #68]	@ (8008130 <os_runloop+0x68>)
 80080ea:	6053      	str	r3, [r2, #4]
 80080ec:	e016      	b.n	800811c <os_runloop+0x54>
		} else if (OS.scheduledjobs
 80080ee:	4b10      	ldr	r3, [pc, #64]	@ (8008130 <os_runloop+0x68>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d010      	beq.n	8008118 <os_runloop+0x50>
				&& hal_checkTimer(OS.scheduledjobs->deadline)) { // check for expired timed jobs
 80080f6:	4b0e      	ldr	r3, [pc, #56]	@ (8008130 <os_runloop+0x68>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7fc fae3 	bl	80046c8 <hal_checkTimer>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d007      	beq.n	8008118 <os_runloop+0x50>
			j = OS.scheduledjobs;
 8008108:	4b09      	ldr	r3, [pc, #36]	@ (8008130 <os_runloop+0x68>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	607b      	str	r3, [r7, #4]
			OS.scheduledjobs = j->next;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a07      	ldr	r2, [pc, #28]	@ (8008130 <os_runloop+0x68>)
 8008114:	6013      	str	r3, [r2, #0]
 8008116:	e001      	b.n	800811c <os_runloop+0x54>
		} else { // nothing pending
			hal_sleep(); // wake by irq (timer already restarted)
 8008118:	f7fc fb38 	bl	800478c <hal_sleep>
		}
		hal_enableIRQs();
 800811c:	f7fc fb22 	bl	8004764 <hal_enableIRQs>
		if (j) { // run job callback
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d0d3      	beq.n	80080ce <os_runloop+0x6>
			j->func(j);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	4798      	blx	r3
	while (1) {
 800812e:	e7ce      	b.n	80080ce <os_runloop+0x6>
 8008130:	200004cc 	.word	0x200004cc

08008134 <writeReg>:
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif

static void writeReg(u1_t addr, u1_t data)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	4603      	mov	r3, r0
 800813c:	460a      	mov	r2, r1
 800813e:	71fb      	strb	r3, [r7, #7]
 8008140:	4613      	mov	r3, r2
 8008142:	71bb      	strb	r3, [r7, #6]
	hal_pin_nss(0);
 8008144:	2000      	movs	r0, #0
 8008146:	f7fc f9cb 	bl	80044e0 <hal_pin_nss>
	hal_spi(addr | 0x80);
 800814a:	79fb      	ldrb	r3, [r7, #7]
 800814c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008150:	b2db      	uxtb	r3, r3
 8008152:	4618      	mov	r0, r3
 8008154:	f7fc fa26 	bl	80045a4 <hal_spi>
	hal_spi(data);
 8008158:	79bb      	ldrb	r3, [r7, #6]
 800815a:	4618      	mov	r0, r3
 800815c:	f7fc fa22 	bl	80045a4 <hal_spi>
	hal_pin_nss(1);
 8008160:	2001      	movs	r0, #1
 8008162:	f7fc f9bd 	bl	80044e0 <hal_pin_nss>
}
 8008166:	bf00      	nop
 8008168:	3708      	adds	r7, #8
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <readReg>:

static u1_t readReg(u1_t addr)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b084      	sub	sp, #16
 8008172:	af00      	add	r7, sp, #0
 8008174:	4603      	mov	r3, r0
 8008176:	71fb      	strb	r3, [r7, #7]
	hal_pin_nss(0);
 8008178:	2000      	movs	r0, #0
 800817a:	f7fc f9b1 	bl	80044e0 <hal_pin_nss>
	hal_spi(addr & 0x7F);
 800817e:	79fb      	ldrb	r3, [r7, #7]
 8008180:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008184:	b2db      	uxtb	r3, r3
 8008186:	4618      	mov	r0, r3
 8008188:	f7fc fa0c 	bl	80045a4 <hal_spi>
	u1_t val = hal_spi(0x00);
 800818c:	2000      	movs	r0, #0
 800818e:	f7fc fa09 	bl	80045a4 <hal_spi>
 8008192:	4603      	mov	r3, r0
 8008194:	73fb      	strb	r3, [r7, #15]
	hal_pin_nss(1);
 8008196:	2001      	movs	r0, #1
 8008198:	f7fc f9a2 	bl	80044e0 <hal_pin_nss>
	return val;
 800819c:	7bfb      	ldrb	r3, [r7, #15]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <writeBuf>:

static void writeBuf(u1_t addr, xref2u1_t buf, u1_t len)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b084      	sub	sp, #16
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	4603      	mov	r3, r0
 80081ae:	6039      	str	r1, [r7, #0]
 80081b0:	71fb      	strb	r3, [r7, #7]
 80081b2:	4613      	mov	r3, r2
 80081b4:	71bb      	strb	r3, [r7, #6]
	hal_pin_nss(0);
 80081b6:	2000      	movs	r0, #0
 80081b8:	f7fc f992 	bl	80044e0 <hal_pin_nss>
	hal_spi(addr | 0x80);
 80081bc:	79fb      	ldrb	r3, [r7, #7]
 80081be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7fc f9ed 	bl	80045a4 <hal_spi>
	for (u1_t i = 0; i < len; i++) {
 80081ca:	2300      	movs	r3, #0
 80081cc:	73fb      	strb	r3, [r7, #15]
 80081ce:	e009      	b.n	80081e4 <writeBuf+0x3e>
		hal_spi(buf[i]);
 80081d0:	7bfb      	ldrb	r3, [r7, #15]
 80081d2:	683a      	ldr	r2, [r7, #0]
 80081d4:	4413      	add	r3, r2
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	4618      	mov	r0, r3
 80081da:	f7fc f9e3 	bl	80045a4 <hal_spi>
	for (u1_t i = 0; i < len; i++) {
 80081de:	7bfb      	ldrb	r3, [r7, #15]
 80081e0:	3301      	adds	r3, #1
 80081e2:	73fb      	strb	r3, [r7, #15]
 80081e4:	7bfa      	ldrb	r2, [r7, #15]
 80081e6:	79bb      	ldrb	r3, [r7, #6]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d3f1      	bcc.n	80081d0 <writeBuf+0x2a>
	}
	hal_pin_nss(1);
 80081ec:	2001      	movs	r0, #1
 80081ee:	f7fc f977 	bl	80044e0 <hal_pin_nss>
}
 80081f2:	bf00      	nop
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <readBuf>:

static void readBuf(u1_t addr, xref2u1_t buf, u1_t len)
{
 80081fa:	b590      	push	{r4, r7, lr}
 80081fc:	b085      	sub	sp, #20
 80081fe:	af00      	add	r7, sp, #0
 8008200:	4603      	mov	r3, r0
 8008202:	6039      	str	r1, [r7, #0]
 8008204:	71fb      	strb	r3, [r7, #7]
 8008206:	4613      	mov	r3, r2
 8008208:	71bb      	strb	r3, [r7, #6]
	hal_pin_nss(0);
 800820a:	2000      	movs	r0, #0
 800820c:	f7fc f968 	bl	80044e0 <hal_pin_nss>
	hal_spi(addr & 0x7F);
 8008210:	79fb      	ldrb	r3, [r7, #7]
 8008212:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008216:	b2db      	uxtb	r3, r3
 8008218:	4618      	mov	r0, r3
 800821a:	f7fc f9c3 	bl	80045a4 <hal_spi>
	for (u1_t i = 0; i < len; i++) {
 800821e:	2300      	movs	r3, #0
 8008220:	73fb      	strb	r3, [r7, #15]
 8008222:	e00a      	b.n	800823a <readBuf+0x40>
		buf[i] = hal_spi(0x00);
 8008224:	7bfb      	ldrb	r3, [r7, #15]
 8008226:	683a      	ldr	r2, [r7, #0]
 8008228:	18d4      	adds	r4, r2, r3
 800822a:	2000      	movs	r0, #0
 800822c:	f7fc f9ba 	bl	80045a4 <hal_spi>
 8008230:	4603      	mov	r3, r0
 8008232:	7023      	strb	r3, [r4, #0]
	for (u1_t i = 0; i < len; i++) {
 8008234:	7bfb      	ldrb	r3, [r7, #15]
 8008236:	3301      	adds	r3, #1
 8008238:	73fb      	strb	r3, [r7, #15]
 800823a:	7bfa      	ldrb	r2, [r7, #15]
 800823c:	79bb      	ldrb	r3, [r7, #6]
 800823e:	429a      	cmp	r2, r3
 8008240:	d3f0      	bcc.n	8008224 <readBuf+0x2a>
	}
	hal_pin_nss(1);
 8008242:	2001      	movs	r0, #1
 8008244:	f7fc f94c 	bl	80044e0 <hal_pin_nss>
}
 8008248:	bf00      	nop
 800824a:	3714      	adds	r7, #20
 800824c:	46bd      	mov	sp, r7
 800824e:	bd90      	pop	{r4, r7, pc}

08008250 <opmode>:

static void opmode(u1_t mode)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	4603      	mov	r3, r0
 8008258:	71fb      	strb	r3, [r7, #7]
	writeReg(RegOpMode, (readReg(RegOpMode) & ~OPMODE_MASK) | mode);
 800825a:	2001      	movs	r0, #1
 800825c:	f7ff ff87 	bl	800816e <readReg>
 8008260:	4603      	mov	r3, r0
 8008262:	b25b      	sxtb	r3, r3
 8008264:	f023 0307 	bic.w	r3, r3, #7
 8008268:	b25a      	sxtb	r2, r3
 800826a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800826e:	4313      	orrs	r3, r2
 8008270:	b25b      	sxtb	r3, r3
 8008272:	b2db      	uxtb	r3, r3
 8008274:	4619      	mov	r1, r3
 8008276:	2001      	movs	r0, #1
 8008278:	f7ff ff5c 	bl	8008134 <writeReg>
}
 800827c:	bf00      	nop
 800827e:	3708      	adds	r7, #8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <opmodeLora>:

static void opmodeLora()
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
	u1_t u = OPMODE_LORA;
 800828a:	2380      	movs	r3, #128	@ 0x80
 800828c:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
	u |= 0x8;   // TBD: sx1276 high freq
 800828e:	79fb      	ldrb	r3, [r7, #7]
 8008290:	f043 0308 	orr.w	r3, r3, #8
 8008294:	71fb      	strb	r3, [r7, #7]
#endif
	writeReg(RegOpMode, u);
 8008296:	79fb      	ldrb	r3, [r7, #7]
 8008298:	4619      	mov	r1, r3
 800829a:	2001      	movs	r0, #1
 800829c:	f7ff ff4a 	bl	8008134 <writeReg>
}
 80082a0:	bf00      	nop
 80082a2:	3708      	adds	r7, #8
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <opmodeFSK>:

static void opmodeFSK()
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
	u1_t u = 0;
 80082ae:	2300      	movs	r3, #0
 80082b0:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
	u |= 0x8;   // TBD: sx1276 high freq
 80082b2:	79fb      	ldrb	r3, [r7, #7]
 80082b4:	f043 0308 	orr.w	r3, r3, #8
 80082b8:	71fb      	strb	r3, [r7, #7]
#endif
	writeReg(RegOpMode, u);
 80082ba:	79fb      	ldrb	r3, [r7, #7]
 80082bc:	4619      	mov	r1, r3
 80082be:	2001      	movs	r0, #1
 80082c0:	f7ff ff38 	bl	8008134 <writeReg>
}
 80082c4:	bf00      	nop
 80082c6:	3708      	adds	r7, #8
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <configLoraModem>:

// configure LoRa modem (cfg1, cfg2)
static void configLoraModem()
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
	sf_t sf = getSf(LMIC.rps);
 80082d2:	4b54      	ldr	r3, [pc, #336]	@ (8008424 <configLoraModem+0x158>)
 80082d4:	89db      	ldrh	r3, [r3, #14]
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7fc fb16 	bl	8004908 <getSf>
 80082dc:	4603      	mov	r3, r0
 80082de:	713b      	strb	r3, [r7, #4]

#ifdef CFG_sx1276_radio
	u1_t mc1 = 0, mc2 = 0, mc3 = 0;
 80082e0:	2300      	movs	r3, #0
 80082e2:	71fb      	strb	r3, [r7, #7]
 80082e4:	2300      	movs	r3, #0
 80082e6:	71bb      	strb	r3, [r7, #6]
 80082e8:	2300      	movs	r3, #0
 80082ea:	717b      	strb	r3, [r7, #5]

	switch (getBw(LMIC.rps)) {
 80082ec:	4b4d      	ldr	r3, [pc, #308]	@ (8008424 <configLoraModem+0x158>)
 80082ee:	89db      	ldrh	r3, [r3, #14]
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7fc fb19 	bl	8004928 <getBw>
 80082f6:	4603      	mov	r3, r0
 80082f8:	2b02      	cmp	r3, #2
 80082fa:	d010      	beq.n	800831e <configLoraModem+0x52>
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	dc13      	bgt.n	8008328 <configLoraModem+0x5c>
 8008300:	2b00      	cmp	r3, #0
 8008302:	d002      	beq.n	800830a <configLoraModem+0x3e>
 8008304:	2b01      	cmp	r3, #1
 8008306:	d005      	beq.n	8008314 <configLoraModem+0x48>
 8008308:	e00e      	b.n	8008328 <configLoraModem+0x5c>
	case BW125:
		mc1 |= SX1276_MC1_BW_125;
 800830a:	79fb      	ldrb	r3, [r7, #7]
 800830c:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8008310:	71fb      	strb	r3, [r7, #7]
		break;
 8008312:	e00b      	b.n	800832c <configLoraModem+0x60>
	case BW250:
		mc1 |= SX1276_MC1_BW_250;
 8008314:	79fb      	ldrb	r3, [r7, #7]
 8008316:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800831a:	71fb      	strb	r3, [r7, #7]
		break;
 800831c:	e006      	b.n	800832c <configLoraModem+0x60>
	case BW500:
		mc1 |= SX1276_MC1_BW_500;
 800831e:	79fb      	ldrb	r3, [r7, #7]
 8008320:	f063 036f 	orn	r3, r3, #111	@ 0x6f
 8008324:	71fb      	strb	r3, [r7, #7]
		break;
 8008326:	e001      	b.n	800832c <configLoraModem+0x60>
	default:
		ASSERT(0);
 8008328:	f7fc fa4e 	bl	80047c8 <hal_failed>
	}
	switch (getCr(LMIC.rps)) {
 800832c:	4b3d      	ldr	r3, [pc, #244]	@ (8008424 <configLoraModem+0x158>)
 800832e:	89db      	ldrh	r3, [r3, #14]
 8008330:	4618      	mov	r0, r3
 8008332:	f7fc fb0b 	bl	800494c <getCr>
 8008336:	4603      	mov	r3, r0
 8008338:	2b03      	cmp	r3, #3
 800833a:	d81f      	bhi.n	800837c <configLoraModem+0xb0>
 800833c:	a201      	add	r2, pc, #4	@ (adr r2, 8008344 <configLoraModem+0x78>)
 800833e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008342:	bf00      	nop
 8008344:	08008355 	.word	0x08008355
 8008348:	0800835f 	.word	0x0800835f
 800834c:	08008369 	.word	0x08008369
 8008350:	08008373 	.word	0x08008373
	case CR_4_5:
		mc1 |= SX1276_MC1_CR_4_5;
 8008354:	79fb      	ldrb	r3, [r7, #7]
 8008356:	f043 0302 	orr.w	r3, r3, #2
 800835a:	71fb      	strb	r3, [r7, #7]
		break;
 800835c:	e010      	b.n	8008380 <configLoraModem+0xb4>
	case CR_4_6:
		mc1 |= SX1276_MC1_CR_4_6;
 800835e:	79fb      	ldrb	r3, [r7, #7]
 8008360:	f043 0304 	orr.w	r3, r3, #4
 8008364:	71fb      	strb	r3, [r7, #7]
		break;
 8008366:	e00b      	b.n	8008380 <configLoraModem+0xb4>
	case CR_4_7:
		mc1 |= SX1276_MC1_CR_4_7;
 8008368:	79fb      	ldrb	r3, [r7, #7]
 800836a:	f043 0306 	orr.w	r3, r3, #6
 800836e:	71fb      	strb	r3, [r7, #7]
		break;
 8008370:	e006      	b.n	8008380 <configLoraModem+0xb4>
	case CR_4_8:
		mc1 |= SX1276_MC1_CR_4_8;
 8008372:	79fb      	ldrb	r3, [r7, #7]
 8008374:	f043 0308 	orr.w	r3, r3, #8
 8008378:	71fb      	strb	r3, [r7, #7]
		break;
 800837a:	e001      	b.n	8008380 <configLoraModem+0xb4>
	default:
		ASSERT(0);
 800837c:	f7fc fa24 	bl	80047c8 <hal_failed>
	}

	if (getIh(LMIC.rps)) {
 8008380:	4b28      	ldr	r3, [pc, #160]	@ (8008424 <configLoraModem+0x158>)
 8008382:	89db      	ldrh	r3, [r3, #14]
 8008384:	4618      	mov	r0, r3
 8008386:	f7fc fb33 	bl	80049f0 <getIh>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d00e      	beq.n	80083ae <configLoraModem+0xe2>
		mc1 |= SX1276_MC1_IMPLICIT_HEADER_MODE_ON;
 8008390:	79fb      	ldrb	r3, [r7, #7]
 8008392:	f043 0301 	orr.w	r3, r3, #1
 8008396:	71fb      	strb	r3, [r7, #7]
		writeReg(LORARegPayloadLength, getIh(LMIC.rps)); // required length
 8008398:	4b22      	ldr	r3, [pc, #136]	@ (8008424 <configLoraModem+0x158>)
 800839a:	89db      	ldrh	r3, [r3, #14]
 800839c:	4618      	mov	r0, r3
 800839e:	f7fc fb27 	bl	80049f0 <getIh>
 80083a2:	4603      	mov	r3, r0
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	4619      	mov	r1, r3
 80083a8:	2022      	movs	r0, #34	@ 0x22
 80083aa:	f7ff fec3 	bl	8008134 <writeReg>
	}
	// set ModemConfig1
	writeReg(LORARegModemConfig1, mc1);
 80083ae:	79fb      	ldrb	r3, [r7, #7]
 80083b0:	4619      	mov	r1, r3
 80083b2:	201d      	movs	r0, #29
 80083b4:	f7ff febe 	bl	8008134 <writeReg>

	mc2 = (SX1272_MC2_SF7 + ((sf - 1) << 4));
 80083b8:	793b      	ldrb	r3, [r7, #4]
 80083ba:	3b01      	subs	r3, #1
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	011b      	lsls	r3, r3, #4
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	3370      	adds	r3, #112	@ 0x70
 80083c4:	71bb      	strb	r3, [r7, #6]
	if (getNocrc(LMIC.rps) == 0) {
 80083c6:	4b17      	ldr	r3, [pc, #92]	@ (8008424 <configLoraModem+0x158>)
 80083c8:	89db      	ldrh	r3, [r3, #14]
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7fc fae9 	bl	80049a2 <getNocrc>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d103      	bne.n	80083de <configLoraModem+0x112>
		mc2 |= SX1276_MC2_RX_PAYLOAD_CRCON;
 80083d6:	79bb      	ldrb	r3, [r7, #6]
 80083d8:	f043 0304 	orr.w	r3, r3, #4
 80083dc:	71bb      	strb	r3, [r7, #6]
	}
	writeReg(LORARegModemConfig2, mc2);
 80083de:	79bb      	ldrb	r3, [r7, #6]
 80083e0:	4619      	mov	r1, r3
 80083e2:	201e      	movs	r0, #30
 80083e4:	f7ff fea6 	bl	8008134 <writeReg>

	mc3 = SX1276_MC3_AGCAUTO;
 80083e8:	2304      	movs	r3, #4
 80083ea:	717b      	strb	r3, [r7, #5]
	if ((sf == SF11 || sf == SF12) && getBw(LMIC.rps) == BW125) {
 80083ec:	793b      	ldrb	r3, [r7, #4]
 80083ee:	2b05      	cmp	r3, #5
 80083f0:	d002      	beq.n	80083f8 <configLoraModem+0x12c>
 80083f2:	793b      	ldrb	r3, [r7, #4]
 80083f4:	2b06      	cmp	r3, #6
 80083f6:	d10b      	bne.n	8008410 <configLoraModem+0x144>
 80083f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008424 <configLoraModem+0x158>)
 80083fa:	89db      	ldrh	r3, [r3, #14]
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7fc fa93 	bl	8004928 <getBw>
 8008402:	4603      	mov	r3, r0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d103      	bne.n	8008410 <configLoraModem+0x144>
		mc3 |= SX1276_MC3_LOW_DATA_RATE_OPTIMIZE;
 8008408:	797b      	ldrb	r3, [r7, #5]
 800840a:	f043 0308 	orr.w	r3, r3, #8
 800840e:	717b      	strb	r3, [r7, #5]
	}
	writeReg(LORARegModemConfig3, mc3);
 8008410:	797b      	ldrb	r3, [r7, #5]
 8008412:	4619      	mov	r1, r3
 8008414:	2026      	movs	r0, #38	@ 0x26
 8008416:	f7ff fe8d 	bl	8008134 <writeReg>
#endif

#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 800841a:	bf00      	nop
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	200002e0 	.word	0x200002e0

08008428 <configChannel>:

static void configChannel()
{
 8008428:	b5b0      	push	{r4, r5, r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
	// set frequency: FQ = (FRF * 32 Mhz) / (2 ^ 19)
	u8_t frf = ((u8_t) LMIC.freq << 19) / 32000000;
 800842e:	4c1b      	ldr	r4, [pc, #108]	@ (800849c <configChannel+0x74>)
 8008430:	68a4      	ldr	r4, [r4, #8]
 8008432:	2500      	movs	r5, #0
 8008434:	4622      	mov	r2, r4
 8008436:	462b      	mov	r3, r5
 8008438:	0b51      	lsrs	r1, r2, #13
 800843a:	04d0      	lsls	r0, r2, #19
 800843c:	4a18      	ldr	r2, [pc, #96]	@ (80084a0 <configChannel+0x78>)
 800843e:	f04f 0300 	mov.w	r3, #0
 8008442:	f7f8 fb33 	bl	8000aac <__aeabi_uldivmod>
 8008446:	4602      	mov	r2, r0
 8008448:	460b      	mov	r3, r1
 800844a:	e9c7 2300 	strd	r2, r3, [r7]
	writeReg(RegFrfMsb, (u1_t) (frf >> 16));
 800844e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008452:	f04f 0200 	mov.w	r2, #0
 8008456:	f04f 0300 	mov.w	r3, #0
 800845a:	0c02      	lsrs	r2, r0, #16
 800845c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008460:	0c0b      	lsrs	r3, r1, #16
 8008462:	b2d3      	uxtb	r3, r2
 8008464:	4619      	mov	r1, r3
 8008466:	2006      	movs	r0, #6
 8008468:	f7ff fe64 	bl	8008134 <writeReg>
	writeReg(RegFrfMid, (u1_t) (frf >> 8));
 800846c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008470:	f04f 0200 	mov.w	r2, #0
 8008474:	f04f 0300 	mov.w	r3, #0
 8008478:	0a02      	lsrs	r2, r0, #8
 800847a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800847e:	0a0b      	lsrs	r3, r1, #8
 8008480:	b2d3      	uxtb	r3, r2
 8008482:	4619      	mov	r1, r3
 8008484:	2007      	movs	r0, #7
 8008486:	f7ff fe55 	bl	8008134 <writeReg>
	writeReg(RegFrfLsb, (u1_t) (frf >> 0));
 800848a:	783b      	ldrb	r3, [r7, #0]
 800848c:	4619      	mov	r1, r3
 800848e:	2008      	movs	r0, #8
 8008490:	f7ff fe50 	bl	8008134 <writeReg>
}
 8008494:	bf00      	nop
 8008496:	3708      	adds	r7, #8
 8008498:	46bd      	mov	sp, r7
 800849a:	bdb0      	pop	{r4, r5, r7, pc}
 800849c:	200002e0 	.word	0x200002e0
 80084a0:	01e84800 	.word	0x01e84800

080084a4 <configPower>:

static void configPower()
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b082      	sub	sp, #8
 80084a8:	af00      	add	r7, sp, #0
#ifdef CFG_sx1276_radio
	// no boost used for now
	s1_t pw = (s1_t) LMIC.txpow;
 80084aa:	4b15      	ldr	r3, [pc, #84]	@ (8008500 <configPower+0x5c>)
 80084ac:	7c9b      	ldrb	r3, [r3, #18]
 80084ae:	71fb      	strb	r3, [r7, #7]
	if (pw >= 17) {
 80084b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084b4:	2b10      	cmp	r3, #16
 80084b6:	dd02      	ble.n	80084be <configPower+0x1a>
		pw = 15;
 80084b8:	230f      	movs	r3, #15
 80084ba:	71fb      	strb	r3, [r7, #7]
 80084bc:	e005      	b.n	80084ca <configPower+0x26>
	} else if (pw < 2) {
 80084be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	dc01      	bgt.n	80084ca <configPower+0x26>
		pw = 2;
 80084c6:	2302      	movs	r3, #2
 80084c8:	71fb      	strb	r3, [r7, #7]
	}
	// check board type for BOOST pin
	writeReg(RegPaConfig, (u1_t) (0x80 | (pw & 0xf)));
 80084ca:	79fb      	ldrb	r3, [r7, #7]
 80084cc:	f003 030f 	and.w	r3, r3, #15
 80084d0:	b25b      	sxtb	r3, r3
 80084d2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80084d6:	b25b      	sxtb	r3, r3
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	4619      	mov	r1, r3
 80084dc:	2009      	movs	r0, #9
 80084de:	f7ff fe29 	bl	8008134 <writeReg>
	writeReg(RegPaDac, readReg(RegPaDac) | 0x4);
 80084e2:	205a      	movs	r0, #90	@ 0x5a
 80084e4:	f7ff fe43 	bl	800816e <readReg>
 80084e8:	4603      	mov	r3, r0
 80084ea:	f043 0304 	orr.w	r3, r3, #4
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	4619      	mov	r1, r3
 80084f2:	205a      	movs	r0, #90	@ 0x5a
 80084f4:	f7ff fe1e 	bl	8008134 <writeReg>
    }
    writeReg(RegPaConfig, (u1_t)(0x80|(pw-2)));
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 80084f8:	bf00      	nop
 80084fa:	3708      	adds	r7, #8
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	200002e0 	.word	0x200002e0

08008504 <txfsk>:

static void txfsk()
{
 8008504:	b580      	push	{r7, lr}
 8008506:	af00      	add	r7, sp, #0
	// select FSK modem (from sleep mode)
	writeReg(RegOpMode, 0x10); // FSK, BT=0.5
 8008508:	2110      	movs	r1, #16
 800850a:	2001      	movs	r0, #1
 800850c:	f7ff fe12 	bl	8008134 <writeReg>
	ASSERT(readReg(RegOpMode) == 0x10);
 8008510:	2001      	movs	r0, #1
 8008512:	f7ff fe2c 	bl	800816e <readReg>
 8008516:	4603      	mov	r3, r0
 8008518:	2b10      	cmp	r3, #16
 800851a:	d001      	beq.n	8008520 <txfsk+0x1c>
 800851c:	f7fc f954 	bl	80047c8 <hal_failed>
	// enter standby mode (required for FIFO loading))
	opmode(OPMODE_STANDBY);
 8008520:	2001      	movs	r0, #1
 8008522:	f7ff fe95 	bl	8008250 <opmode>
	// set bitrate
	writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 8008526:	2102      	movs	r1, #2
 8008528:	2002      	movs	r0, #2
 800852a:	f7ff fe03 	bl	8008134 <writeReg>
	writeReg(FSKRegBitrateLsb, 0x80);
 800852e:	2180      	movs	r1, #128	@ 0x80
 8008530:	2003      	movs	r0, #3
 8008532:	f7ff fdff 	bl	8008134 <writeReg>
	// set frequency deviation
	writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 8008536:	2101      	movs	r1, #1
 8008538:	2004      	movs	r0, #4
 800853a:	f7ff fdfb 	bl	8008134 <writeReg>
	writeReg(FSKRegFdevLsb, 0x99);
 800853e:	2199      	movs	r1, #153	@ 0x99
 8008540:	2005      	movs	r0, #5
 8008542:	f7ff fdf7 	bl	8008134 <writeReg>
	// frame and packet handler settings
	writeReg(FSKRegPreambleMsb, 0x00);
 8008546:	2100      	movs	r1, #0
 8008548:	2025      	movs	r0, #37	@ 0x25
 800854a:	f7ff fdf3 	bl	8008134 <writeReg>
	writeReg(FSKRegPreambleLsb, 0x05);
 800854e:	2105      	movs	r1, #5
 8008550:	2026      	movs	r0, #38	@ 0x26
 8008552:	f7ff fdef 	bl	8008134 <writeReg>
	writeReg(FSKRegSyncConfig, 0x12);
 8008556:	2112      	movs	r1, #18
 8008558:	2027      	movs	r0, #39	@ 0x27
 800855a:	f7ff fdeb 	bl	8008134 <writeReg>
	writeReg(FSKRegPacketConfig1, 0xD0);
 800855e:	21d0      	movs	r1, #208	@ 0xd0
 8008560:	2030      	movs	r0, #48	@ 0x30
 8008562:	f7ff fde7 	bl	8008134 <writeReg>
	writeReg(FSKRegPacketConfig2, 0x40);
 8008566:	2140      	movs	r1, #64	@ 0x40
 8008568:	2031      	movs	r0, #49	@ 0x31
 800856a:	f7ff fde3 	bl	8008134 <writeReg>
	writeReg(FSKRegSyncValue1, 0xC1);
 800856e:	21c1      	movs	r1, #193	@ 0xc1
 8008570:	2028      	movs	r0, #40	@ 0x28
 8008572:	f7ff fddf 	bl	8008134 <writeReg>
	writeReg(FSKRegSyncValue2, 0x94);
 8008576:	2194      	movs	r1, #148	@ 0x94
 8008578:	2029      	movs	r0, #41	@ 0x29
 800857a:	f7ff fddb 	bl	8008134 <writeReg>
	writeReg(FSKRegSyncValue3, 0xC1);
 800857e:	21c1      	movs	r1, #193	@ 0xc1
 8008580:	202a      	movs	r0, #42	@ 0x2a
 8008582:	f7ff fdd7 	bl	8008134 <writeReg>
	// configure frequency
	configChannel();
 8008586:	f7ff ff4f 	bl	8008428 <configChannel>
	// configure output power
	configPower();
 800858a:	f7ff ff8b 	bl	80084a4 <configPower>

	// set the IRQ mapping DIO0=PacketSent DIO1=NOP DIO2=NOP
	writeReg(RegDioMapping1,
 800858e:	2134      	movs	r1, #52	@ 0x34
 8008590:	2040      	movs	r0, #64	@ 0x40
 8008592:	f7ff fdcf 	bl	8008134 <writeReg>
			MAP_DIO0_FSK_READY | MAP_DIO1_FSK_NOP | MAP_DIO2_FSK_TXNOP);

	// initialize the payload size and address pointers    
	writeReg(FSKRegPayloadLength, LMIC.dataLen + 1); // (insert length byte into payload))
 8008596:	4b10      	ldr	r3, [pc, #64]	@ (80085d8 <txfsk+0xd4>)
 8008598:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 800859c:	3301      	adds	r3, #1
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	4619      	mov	r1, r3
 80085a2:	2032      	movs	r0, #50	@ 0x32
 80085a4:	f7ff fdc6 	bl	8008134 <writeReg>

	// download length byte and buffer to the radio FIFO
	writeReg(RegFifo, LMIC.dataLen);
 80085a8:	4b0b      	ldr	r3, [pc, #44]	@ (80085d8 <txfsk+0xd4>)
 80085aa:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80085ae:	4619      	mov	r1, r3
 80085b0:	2000      	movs	r0, #0
 80085b2:	f7ff fdbf 	bl	8008134 <writeReg>
	writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 80085b6:	4b08      	ldr	r3, [pc, #32]	@ (80085d8 <txfsk+0xd4>)
 80085b8:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80085bc:	461a      	mov	r2, r3
 80085be:	4907      	ldr	r1, [pc, #28]	@ (80085dc <txfsk+0xd8>)
 80085c0:	2000      	movs	r0, #0
 80085c2:	f7ff fdf0 	bl	80081a6 <writeBuf>

	// enable antenna switch for TX
	hal_pin_rxtx(1);
 80085c6:	2001      	movs	r0, #1
 80085c8:	f7fb ff7f 	bl	80044ca <hal_pin_rxtx>

	// now we actually start the transmission
	opmode(OPMODE_TX);
 80085cc:	2003      	movs	r0, #3
 80085ce:	f7ff fe3f 	bl	8008250 <opmode>
}
 80085d2:	bf00      	nop
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	200002e0 	.word	0x200002e0
 80085dc:	20000428 	.word	0x20000428

080085e0 <txlora>:

static void txlora()
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	af00      	add	r7, sp, #0
	// select LoRa modem (from sleep mode)
	//writeReg(RegOpMode, OPMODE_LORA);
	opmodeLora();
 80085e4:	f7ff fe4e 	bl	8008284 <opmodeLora>
	ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 80085e8:	2001      	movs	r0, #1
 80085ea:	f7ff fdc0 	bl	800816e <readReg>
 80085ee:	4603      	mov	r3, r0
 80085f0:	b25b      	sxtb	r3, r3
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	db01      	blt.n	80085fa <txlora+0x1a>
 80085f6:	f7fc f8e7 	bl	80047c8 <hal_failed>

	// enter standby mode (required for FIFO loading))
	opmode(OPMODE_STANDBY);
 80085fa:	2001      	movs	r0, #1
 80085fc:	f7ff fe28 	bl	8008250 <opmode>
	// configure LoRa modem (cfg1, cfg2)
	configLoraModem();
 8008600:	f7ff fe64 	bl	80082cc <configLoraModem>
	// configure frequency
	configChannel();
 8008604:	f7ff ff10 	bl	8008428 <configChannel>
	// configure output power
	writeReg(RegPaRamp, (readReg(RegPaRamp) & 0xF0) | 0x08); // set PA ramp-up time 50 uSec
 8008608:	200a      	movs	r0, #10
 800860a:	f7ff fdb0 	bl	800816e <readReg>
 800860e:	4603      	mov	r3, r0
 8008610:	b25b      	sxtb	r3, r3
 8008612:	f023 030f 	bic.w	r3, r3, #15
 8008616:	b25b      	sxtb	r3, r3
 8008618:	f043 0308 	orr.w	r3, r3, #8
 800861c:	b25b      	sxtb	r3, r3
 800861e:	b2db      	uxtb	r3, r3
 8008620:	4619      	mov	r1, r3
 8008622:	200a      	movs	r0, #10
 8008624:	f7ff fd86 	bl	8008134 <writeReg>
	configPower();
 8008628:	f7ff ff3c 	bl	80084a4 <configPower>
	// set sync word
	writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 800862c:	2134      	movs	r1, #52	@ 0x34
 800862e:	2039      	movs	r0, #57	@ 0x39
 8008630:	f7ff fd80 	bl	8008134 <writeReg>

	// set the IRQ mapping DIO0=TxDone DIO1=NOP DIO2=NOP
	writeReg(RegDioMapping1,
 8008634:	21f0      	movs	r1, #240	@ 0xf0
 8008636:	2040      	movs	r0, #64	@ 0x40
 8008638:	f7ff fd7c 	bl	8008134 <writeReg>
			MAP_DIO0_LORA_TXDONE | MAP_DIO1_LORA_NOP | MAP_DIO2_LORA_NOP);
	// clear all radio IRQ flags
	writeReg(LORARegIrqFlags, 0xFF);
 800863c:	21ff      	movs	r1, #255	@ 0xff
 800863e:	2012      	movs	r0, #18
 8008640:	f7ff fd78 	bl	8008134 <writeReg>
	// mask all IRQs but TxDone
	writeReg(LORARegIrqFlagsMask, ~IRQ_LORA_TXDONE_MASK);
 8008644:	21f7      	movs	r1, #247	@ 0xf7
 8008646:	2011      	movs	r0, #17
 8008648:	f7ff fd74 	bl	8008134 <writeReg>

	// initialize the payload size and address pointers    
	writeReg(LORARegFifoTxBaseAddr, 0x00);
 800864c:	2100      	movs	r1, #0
 800864e:	200e      	movs	r0, #14
 8008650:	f7ff fd70 	bl	8008134 <writeReg>
	writeReg(LORARegFifoAddrPtr, 0x00);
 8008654:	2100      	movs	r1, #0
 8008656:	200d      	movs	r0, #13
 8008658:	f7ff fd6c 	bl	8008134 <writeReg>
	writeReg(LORARegPayloadLength, LMIC.dataLen);
 800865c:	4b0b      	ldr	r3, [pc, #44]	@ (800868c <txlora+0xac>)
 800865e:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8008662:	4619      	mov	r1, r3
 8008664:	2022      	movs	r0, #34	@ 0x22
 8008666:	f7ff fd65 	bl	8008134 <writeReg>

	// download buffer to the radio FIFO
	writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 800866a:	4b08      	ldr	r3, [pc, #32]	@ (800868c <txlora+0xac>)
 800866c:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8008670:	461a      	mov	r2, r3
 8008672:	4907      	ldr	r1, [pc, #28]	@ (8008690 <txlora+0xb0>)
 8008674:	2000      	movs	r0, #0
 8008676:	f7ff fd96 	bl	80081a6 <writeBuf>

	// enable antenna switch for TX
	hal_pin_rxtx(1);
 800867a:	2001      	movs	r0, #1
 800867c:	f7fb ff25 	bl	80044ca <hal_pin_rxtx>

	// now we actually start the transmission
	opmode(OPMODE_TX);
 8008680:	2003      	movs	r0, #3
 8008682:	f7ff fde5 	bl	8008250 <opmode>
}
 8008686:	bf00      	nop
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	200002e0 	.word	0x200002e0
 8008690:	20000428 	.word	0x20000428

08008694 <starttx>:

// start transmitter (buf=LMIC.frame, len=LMIC.dataLen)
static void starttx()
{
 8008694:	b580      	push	{r7, lr}
 8008696:	af00      	add	r7, sp, #0
	ASSERT((readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP);
 8008698:	2001      	movs	r0, #1
 800869a:	f7ff fd68 	bl	800816e <readReg>
 800869e:	4603      	mov	r3, r0
 80086a0:	f003 0307 	and.w	r3, r3, #7
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d001      	beq.n	80086ac <starttx+0x18>
 80086a8:	f7fc f88e 	bl	80047c8 <hal_failed>
	if (getSf(LMIC.rps) == FSK) { // FSK modem
 80086ac:	4b07      	ldr	r3, [pc, #28]	@ (80086cc <starttx+0x38>)
 80086ae:	89db      	ldrh	r3, [r3, #14]
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7fc f929 	bl	8004908 <getSf>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d102      	bne.n	80086c2 <starttx+0x2e>
		txfsk();
 80086bc:	f7ff ff22 	bl	8008504 <txfsk>
	} else { // LoRa modem
		txlora();
	}
	// the radio will go back to STANDBY mode as soon as the TX is finished
	// the corresponding IRQ will inform us about completion.
}
 80086c0:	e001      	b.n	80086c6 <starttx+0x32>
		txlora();
 80086c2:	f7ff ff8d 	bl	80085e0 <txlora>
}
 80086c6:	bf00      	nop
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	200002e0 	.word	0x200002e0

080086d0 <rxlora>:
		| IRQ_LORA_RXTOUT_MASK, [RXMODE_SCAN] = IRQ_LORA_RXDONE_MASK,
		[RXMODE_RSSI] = 0x00, };

// start LoRa receiver (time=LMIC.rxtime, timeout=LMIC.rxsyms, result=LMIC.frame[LMIC.dataLen])
static void rxlora(u1_t rxmode)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	4603      	mov	r3, r0
 80086d8:	71fb      	strb	r3, [r7, #7]
	// select LoRa modem (from sleep mode)
	opmodeLora();
 80086da:	f7ff fdd3 	bl	8008284 <opmodeLora>
	ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 80086de:	2001      	movs	r0, #1
 80086e0:	f7ff fd45 	bl	800816e <readReg>
 80086e4:	4603      	mov	r3, r0
 80086e6:	b25b      	sxtb	r3, r3
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	db01      	blt.n	80086f0 <rxlora+0x20>
 80086ec:	f7fc f86c 	bl	80047c8 <hal_failed>
	// enter standby mode (warm up))
	opmode(OPMODE_STANDBY);
 80086f0:	2001      	movs	r0, #1
 80086f2:	f7ff fdad 	bl	8008250 <opmode>
	// don't use MAC settings at startup
	if (rxmode == RXMODE_RSSI) { // use fixed settings for rssi scan
 80086f6:	79fb      	ldrb	r3, [r7, #7]
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d108      	bne.n	800870e <rxlora+0x3e>
		writeReg(LORARegModemConfig1, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG1);
 80086fc:	210a      	movs	r1, #10
 80086fe:	201d      	movs	r0, #29
 8008700:	f7ff fd18 	bl	8008134 <writeReg>
		writeReg(LORARegModemConfig2, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG2);
 8008704:	2170      	movs	r1, #112	@ 0x70
 8008706:	201e      	movs	r0, #30
 8008708:	f7ff fd14 	bl	8008134 <writeReg>
 800870c:	e003      	b.n	8008716 <rxlora+0x46>
	} else { // single or continuous rx mode
		// configure LoRa modem (cfg1, cfg2)
		configLoraModem();
 800870e:	f7ff fddd 	bl	80082cc <configLoraModem>
		// configure frequency
		configChannel();
 8008712:	f7ff fe89 	bl	8008428 <configChannel>
	}
	// set LNA gain
	writeReg(RegLna, LNA_RX_GAIN);
 8008716:	2121      	movs	r1, #33	@ 0x21
 8008718:	200c      	movs	r0, #12
 800871a:	f7ff fd0b 	bl	8008134 <writeReg>
	// set max payload size
	writeReg(LORARegPayloadMaxLength, 64);
 800871e:	2140      	movs	r1, #64	@ 0x40
 8008720:	2023      	movs	r0, #35	@ 0x23
 8008722:	f7ff fd07 	bl	8008134 <writeReg>
	// use inverted I/Q signal (prevent mote-to-mote communication)

	// XXX: use flag to switch on/off inversion
	if (LMIC.noRXIQinversion) {
 8008726:	4b26      	ldr	r3, [pc, #152]	@ (80087c0 <rxlora+0xf0>)
 8008728:	f893 31a8 	ldrb.w	r3, [r3, #424]	@ 0x1a8
 800872c:	2b00      	cmp	r3, #0
 800872e:	d00b      	beq.n	8008748 <rxlora+0x78>
		writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ) & ~(1 << 6));
 8008730:	2033      	movs	r0, #51	@ 0x33
 8008732:	f7ff fd1c 	bl	800816e <readReg>
 8008736:	4603      	mov	r3, r0
 8008738:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800873c:	b2db      	uxtb	r3, r3
 800873e:	4619      	mov	r1, r3
 8008740:	2033      	movs	r0, #51	@ 0x33
 8008742:	f7ff fcf7 	bl	8008134 <writeReg>
 8008746:	e00a      	b.n	800875e <rxlora+0x8e>
	} else {
		writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ) | (1 << 6));
 8008748:	2033      	movs	r0, #51	@ 0x33
 800874a:	f7ff fd10 	bl	800816e <readReg>
 800874e:	4603      	mov	r3, r0
 8008750:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008754:	b2db      	uxtb	r3, r3
 8008756:	4619      	mov	r1, r3
 8008758:	2033      	movs	r0, #51	@ 0x33
 800875a:	f7ff fceb 	bl	8008134 <writeReg>
	}

	// set symbol timeout (for single rx)
	writeReg(LORARegSymbTimeoutLsb, LMIC.rxsyms);
 800875e:	4b18      	ldr	r3, [pc, #96]	@ (80087c0 <rxlora+0xf0>)
 8008760:	7c1b      	ldrb	r3, [r3, #16]
 8008762:	4619      	mov	r1, r3
 8008764:	201f      	movs	r0, #31
 8008766:	f7ff fce5 	bl	8008134 <writeReg>
	// set sync word
	writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 800876a:	2134      	movs	r1, #52	@ 0x34
 800876c:	2039      	movs	r0, #57	@ 0x39
 800876e:	f7ff fce1 	bl	8008134 <writeReg>

	// configure DIO mapping DIO0=RxDone DIO1=RxTout DIO2=NOP
	writeReg(RegDioMapping1,
 8008772:	21c0      	movs	r1, #192	@ 0xc0
 8008774:	2040      	movs	r0, #64	@ 0x40
 8008776:	f7ff fcdd 	bl	8008134 <writeReg>
			MAP_DIO0_LORA_RXDONE | MAP_DIO1_LORA_RXTOUT | MAP_DIO2_LORA_NOP);
	// clear all radio IRQ flags
	writeReg(LORARegIrqFlags, 0xFF);
 800877a:	21ff      	movs	r1, #255	@ 0xff
 800877c:	2012      	movs	r0, #18
 800877e:	f7ff fcd9 	bl	8008134 <writeReg>
	// enable required radio IRQs
	writeReg(LORARegIrqFlagsMask, ~rxlorairqmask[rxmode]);
 8008782:	79fb      	ldrb	r3, [r7, #7]
 8008784:	4a0f      	ldr	r2, [pc, #60]	@ (80087c4 <rxlora+0xf4>)
 8008786:	5cd3      	ldrb	r3, [r2, r3]
 8008788:	43db      	mvns	r3, r3
 800878a:	b2db      	uxtb	r3, r3
 800878c:	4619      	mov	r1, r3
 800878e:	2011      	movs	r0, #17
 8008790:	f7ff fcd0 	bl	8008134 <writeReg>

	// enable antenna switch for RX
	hal_pin_rxtx(0);
 8008794:	2000      	movs	r0, #0
 8008796:	f7fb fe98 	bl	80044ca <hal_pin_rxtx>

	// now instruct the radio to receive
	if (rxmode == RXMODE_SINGLE) { // single rx
 800879a:	79fb      	ldrb	r3, [r7, #7]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d108      	bne.n	80087b2 <rxlora+0xe2>
		hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 80087a0:	4b07      	ldr	r3, [pc, #28]	@ (80087c0 <rxlora+0xf0>)
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7fb ff7e 	bl	80046a6 <hal_waitUntil>
		opmode(OPMODE_RX_SINGLE);
 80087aa:	2006      	movs	r0, #6
 80087ac:	f7ff fd50 	bl	8008250 <opmode>
	} else { // continous rx (scan or rssi)
		opmode(OPMODE_RX);
	}
}
 80087b0:	e002      	b.n	80087b8 <rxlora+0xe8>
		opmode(OPMODE_RX);
 80087b2:	2005      	movs	r0, #5
 80087b4:	f7ff fd4c 	bl	8008250 <opmode>
}
 80087b8:	bf00      	nop
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	200002e0 	.word	0x200002e0
 80087c4:	0800fd30 	.word	0x0800fd30

080087c8 <rxfsk>:

static void rxfsk(u1_t rxmode)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	4603      	mov	r3, r0
 80087d0:	71fb      	strb	r3, [r7, #7]
	// only single rx (no continuous scanning, no noise sampling)
	ASSERT(rxmode == RXMODE_SINGLE);
 80087d2:	79fb      	ldrb	r3, [r7, #7]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d001      	beq.n	80087dc <rxfsk+0x14>
 80087d8:	f7fb fff6 	bl	80047c8 <hal_failed>
	// select FSK modem (from sleep mode)
	//writeReg(RegOpMode, 0x00); // (not LoRa)
	opmodeFSK();
 80087dc:	f7ff fd64 	bl	80082a8 <opmodeFSK>
	ASSERT((readReg(RegOpMode) & OPMODE_LORA) == 0);
 80087e0:	2001      	movs	r0, #1
 80087e2:	f7ff fcc4 	bl	800816e <readReg>
 80087e6:	4603      	mov	r3, r0
 80087e8:	b25b      	sxtb	r3, r3
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	da01      	bge.n	80087f2 <rxfsk+0x2a>
 80087ee:	f7fb ffeb 	bl	80047c8 <hal_failed>
	// enter standby mode (warm up))
	opmode(OPMODE_STANDBY);
 80087f2:	2001      	movs	r0, #1
 80087f4:	f7ff fd2c 	bl	8008250 <opmode>
	// configure frequency
	configChannel();
 80087f8:	f7ff fe16 	bl	8008428 <configChannel>
	// set LNA gain
	//writeReg(RegLna, 0x20|0x03); // max gain, boost enable
	writeReg(RegLna, LNA_RX_GAIN);
 80087fc:	2121      	movs	r1, #33	@ 0x21
 80087fe:	200c      	movs	r0, #12
 8008800:	f7ff fc98 	bl	8008134 <writeReg>
	// configure receiver
	writeReg(FSKRegRxConfig, 0x1E); // AFC auto, AGC, trigger on preamble?!?
 8008804:	211e      	movs	r1, #30
 8008806:	200d      	movs	r0, #13
 8008808:	f7ff fc94 	bl	8008134 <writeReg>
	// set receiver bandwidth
	writeReg(FSKRegRxBw, 0x0B); // 50kHz SSb
 800880c:	210b      	movs	r1, #11
 800880e:	2012      	movs	r0, #18
 8008810:	f7ff fc90 	bl	8008134 <writeReg>
	// set AFC bandwidth
	writeReg(FSKRegAfcBw, 0x12); // 83.3kHz SSB
 8008814:	2112      	movs	r1, #18
 8008816:	2013      	movs	r0, #19
 8008818:	f7ff fc8c 	bl	8008134 <writeReg>
	// set preamble detection
	writeReg(FSKRegPreambleDetect, 0xAA); // enable, 2 bytes, 10 chip errors
 800881c:	21aa      	movs	r1, #170	@ 0xaa
 800881e:	201f      	movs	r0, #31
 8008820:	f7ff fc88 	bl	8008134 <writeReg>
	// set sync config
	writeReg(FSKRegSyncConfig, 0x12); // no auto restart, preamble 0xAA, enable, fill FIFO, 3 bytes sync
 8008824:	2112      	movs	r1, #18
 8008826:	2027      	movs	r0, #39	@ 0x27
 8008828:	f7ff fc84 	bl	8008134 <writeReg>
	// set packet config
	writeReg(FSKRegPacketConfig1, 0xD8); // var-length, whitening, crc, no auto-clear, no adr filter
 800882c:	21d8      	movs	r1, #216	@ 0xd8
 800882e:	2030      	movs	r0, #48	@ 0x30
 8008830:	f7ff fc80 	bl	8008134 <writeReg>
	writeReg(FSKRegPacketConfig2, 0x40); // packet mode
 8008834:	2140      	movs	r1, #64	@ 0x40
 8008836:	2031      	movs	r0, #49	@ 0x31
 8008838:	f7ff fc7c 	bl	8008134 <writeReg>
	// set sync value
	writeReg(FSKRegSyncValue1, 0xC1);
 800883c:	21c1      	movs	r1, #193	@ 0xc1
 800883e:	2028      	movs	r0, #40	@ 0x28
 8008840:	f7ff fc78 	bl	8008134 <writeReg>
	writeReg(FSKRegSyncValue2, 0x94);
 8008844:	2194      	movs	r1, #148	@ 0x94
 8008846:	2029      	movs	r0, #41	@ 0x29
 8008848:	f7ff fc74 	bl	8008134 <writeReg>
	writeReg(FSKRegSyncValue3, 0xC1);
 800884c:	21c1      	movs	r1, #193	@ 0xc1
 800884e:	202a      	movs	r0, #42	@ 0x2a
 8008850:	f7ff fc70 	bl	8008134 <writeReg>
	// set preamble timeout
	writeReg(FSKRegRxTimeout2, 0xFF);    //(LMIC.rxsyms+1)/2);
 8008854:	21ff      	movs	r1, #255	@ 0xff
 8008856:	2021      	movs	r0, #33	@ 0x21
 8008858:	f7ff fc6c 	bl	8008134 <writeReg>
	// set bitrate
	writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 800885c:	2102      	movs	r1, #2
 800885e:	2002      	movs	r0, #2
 8008860:	f7ff fc68 	bl	8008134 <writeReg>
	writeReg(FSKRegBitrateLsb, 0x80);
 8008864:	2180      	movs	r1, #128	@ 0x80
 8008866:	2003      	movs	r0, #3
 8008868:	f7ff fc64 	bl	8008134 <writeReg>
	// set frequency deviation
	writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 800886c:	2101      	movs	r1, #1
 800886e:	2004      	movs	r0, #4
 8008870:	f7ff fc60 	bl	8008134 <writeReg>
	writeReg(FSKRegFdevLsb, 0x99);
 8008874:	2199      	movs	r1, #153	@ 0x99
 8008876:	2005      	movs	r0, #5
 8008878:	f7ff fc5c 	bl	8008134 <writeReg>

	// configure DIO mapping DIO0=PayloadReady DIO1=NOP DIO2=TimeOut
	writeReg(RegDioMapping1,
 800887c:	2138      	movs	r1, #56	@ 0x38
 800887e:	2040      	movs	r0, #64	@ 0x40
 8008880:	f7ff fc58 	bl	8008134 <writeReg>
			MAP_DIO0_FSK_READY | MAP_DIO1_FSK_NOP | MAP_DIO2_FSK_TIMEOUT);

	// enable antenna switch for RX
	hal_pin_rxtx(0);
 8008884:	2000      	movs	r0, #0
 8008886:	f7fb fe20 	bl	80044ca <hal_pin_rxtx>

	// now instruct the radio to receive
	hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 800888a:	4b06      	ldr	r3, [pc, #24]	@ (80088a4 <rxfsk+0xdc>)
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	4618      	mov	r0, r3
 8008890:	f7fb ff09 	bl	80046a6 <hal_waitUntil>
	opmode(OPMODE_RX); // no single rx mode available in FSK
 8008894:	2005      	movs	r0, #5
 8008896:	f7ff fcdb 	bl	8008250 <opmode>
}
 800889a:	bf00      	nop
 800889c:	3708      	adds	r7, #8
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	200002e0 	.word	0x200002e0

080088a8 <startrx>:

static void startrx(u1_t rxmode)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	4603      	mov	r3, r0
 80088b0:	71fb      	strb	r3, [r7, #7]
	ASSERT((readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP);
 80088b2:	2001      	movs	r0, #1
 80088b4:	f7ff fc5b 	bl	800816e <readReg>
 80088b8:	4603      	mov	r3, r0
 80088ba:	f003 0307 	and.w	r3, r3, #7
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d001      	beq.n	80088c6 <startrx+0x1e>
 80088c2:	f7fb ff81 	bl	80047c8 <hal_failed>
	if (getSf(LMIC.rps) == FSK) { // FSK modem
 80088c6:	4b0a      	ldr	r3, [pc, #40]	@ (80088f0 <startrx+0x48>)
 80088c8:	89db      	ldrh	r3, [r3, #14]
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7fc f81c 	bl	8004908 <getSf>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d104      	bne.n	80088e0 <startrx+0x38>
		rxfsk(rxmode);
 80088d6:	79fb      	ldrb	r3, [r7, #7]
 80088d8:	4618      	mov	r0, r3
 80088da:	f7ff ff75 	bl	80087c8 <rxfsk>
	} else { // LoRa modem
		rxlora(rxmode);
	}
	// the radio will go back to STANDBY mode as soon as the RX is finished
	// or timed out, and the corresponding IRQ will inform us about completion.
}
 80088de:	e003      	b.n	80088e8 <startrx+0x40>
		rxlora(rxmode);
 80088e0:	79fb      	ldrb	r3, [r7, #7]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7ff fef4 	bl	80086d0 <rxlora>
}
 80088e8:	bf00      	nop
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	200002e0 	.word	0x200002e0

080088f4 <radio_init>:

// get random seed from wideband noise rssi
void radio_init()
{
 80088f4:	b590      	push	{r4, r7, lr}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
	hal_disableIRQs();
 80088fa:	f7fb ff23 	bl	8004744 <hal_disableIRQs>

	// manually reset radio
#ifdef CFG_sx1276_radio
	hal_pin_rst(0); // drive RST pin low
 80088fe:	2000      	movs	r0, #0
 8008900:	f7fb fdff 	bl	8004502 <hal_pin_rst>
#else
    hal_pin_rst(1); // drive RST pin high
#endif
	hal_waitUntil(os_getTime() + ms2osticks(1)); // wait >100us
 8008904:	f7ff fb40 	bl	8007f88 <os_getTime>
 8008908:	4603      	mov	r3, r0
 800890a:	3320      	adds	r3, #32
 800890c:	4618      	mov	r0, r3
 800890e:	f7fb feca 	bl	80046a6 <hal_waitUntil>
	hal_pin_rst(2); // configure RST pin floating!
 8008912:	2002      	movs	r0, #2
 8008914:	f7fb fdf5 	bl	8004502 <hal_pin_rst>
	hal_waitUntil(os_getTime() + ms2osticks(5)); // wait 5ms
 8008918:	f7ff fb36 	bl	8007f88 <os_getTime>
 800891c:	4603      	mov	r3, r0
 800891e:	33a0      	adds	r3, #160	@ 0xa0
 8008920:	4618      	mov	r0, r3
 8008922:	f7fb fec0 	bl	80046a6 <hal_waitUntil>

	opmode(OPMODE_SLEEP);
 8008926:	2000      	movs	r0, #0
 8008928:	f7ff fc92 	bl	8008250 <opmode>

	// some sanity checks, e.g., read version number
	u1_t v = readReg(RegVersion);
 800892c:	2042      	movs	r0, #66	@ 0x42
 800892e:	f7ff fc1e 	bl	800816e <readReg>
 8008932:	4603      	mov	r3, r0
 8008934:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
	ASSERT(v == 0x12);
 8008936:	79fb      	ldrb	r3, [r7, #7]
 8008938:	2b12      	cmp	r3, #18
 800893a:	d001      	beq.n	8008940 <radio_init+0x4c>
 800893c:	f7fb ff44 	bl	80047c8 <hal_failed>
    ASSERT(v == 0x22);
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif
	// seed 15-byte randomness via noise rssi
	rxlora(RXMODE_RSSI);
 8008940:	2002      	movs	r0, #2
 8008942:	f7ff fec5 	bl	80086d0 <rxlora>
	while ((readReg(RegOpMode) & OPMODE_MASK) != OPMODE_RX)
 8008946:	bf00      	nop
 8008948:	2001      	movs	r0, #1
 800894a:	f7ff fc10 	bl	800816e <readReg>
 800894e:	4603      	mov	r3, r0
 8008950:	f003 0307 	and.w	r3, r3, #7
 8008954:	2b05      	cmp	r3, #5
 8008956:	d1f7      	bne.n	8008948 <radio_init+0x54>
		; // continuous rx
	for (int i = 1; i < 16; i++) {
 8008958:	2301      	movs	r3, #1
 800895a:	60fb      	str	r3, [r7, #12]
 800895c:	e02c      	b.n	80089b8 <radio_init+0xc4>
		for (int j = 0; j < 8; j++) {
 800895e:	2300      	movs	r3, #0
 8008960:	60bb      	str	r3, [r7, #8]
 8008962:	e023      	b.n	80089ac <radio_init+0xb8>
			u1_t b; // wait for two non-identical subsequent least-significant bits
			while ((b = readReg(LORARegRssiWideband) & 0x01)
 8008964:	bf00      	nop
 8008966:	202c      	movs	r0, #44	@ 0x2c
 8008968:	f7ff fc01 	bl	800816e <readReg>
 800896c:	4603      	mov	r3, r0
 800896e:	f003 0301 	and.w	r3, r3, #1
 8008972:	71bb      	strb	r3, [r7, #6]
 8008974:	79bc      	ldrb	r4, [r7, #6]
					== (readReg(LORARegRssiWideband) & 0x01))
 8008976:	202c      	movs	r0, #44	@ 0x2c
 8008978:	f7ff fbf9 	bl	800816e <readReg>
 800897c:	4603      	mov	r3, r0
 800897e:	f003 0301 	and.w	r3, r3, #1
 8008982:	429c      	cmp	r4, r3
 8008984:	d0ef      	beq.n	8008966 <radio_init+0x72>
				;
			randbuf[i] = (randbuf[i] << 1) | b;
 8008986:	4a14      	ldr	r2, [pc, #80]	@ (80089d8 <radio_init+0xe4>)
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	4413      	add	r3, r2
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	005b      	lsls	r3, r3, #1
 8008990:	b25a      	sxtb	r2, r3
 8008992:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008996:	4313      	orrs	r3, r2
 8008998:	b25b      	sxtb	r3, r3
 800899a:	b2d9      	uxtb	r1, r3
 800899c:	4a0e      	ldr	r2, [pc, #56]	@ (80089d8 <radio_init+0xe4>)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	4413      	add	r3, r2
 80089a2:	460a      	mov	r2, r1
 80089a4:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++) {
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	3301      	adds	r3, #1
 80089aa:	60bb      	str	r3, [r7, #8]
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	2b07      	cmp	r3, #7
 80089b0:	ddd8      	ble.n	8008964 <radio_init+0x70>
	for (int i = 1; i < 16; i++) {
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	3301      	adds	r3, #1
 80089b6:	60fb      	str	r3, [r7, #12]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2b0f      	cmp	r3, #15
 80089bc:	ddcf      	ble.n	800895e <radio_init+0x6a>
		}
	}
	randbuf[0] = 16; // set initial index
 80089be:	4b06      	ldr	r3, [pc, #24]	@ (80089d8 <radio_init+0xe4>)
 80089c0:	2210      	movs	r2, #16
 80089c2:	701a      	strb	r2, [r3, #0]
    // Launch Rx chain calibration for HF band 
    writeReg(FSKRegImageCal, (readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_MASK)|RF_IMAGECAL_IMAGECAL_START);
    while((readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_RUNNING) == RF_IMAGECAL_IMAGECAL_RUNNING) { ; }
#endif /* CFG_sx1276mb1_board */

	opmode(OPMODE_SLEEP);
 80089c4:	2000      	movs	r0, #0
 80089c6:	f7ff fc43 	bl	8008250 <opmode>

	hal_enableIRQs();
 80089ca:	f7fb fecb 	bl	8004764 <hal_enableIRQs>
}
 80089ce:	bf00      	nop
 80089d0:	3714      	adds	r7, #20
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd90      	pop	{r4, r7, pc}
 80089d6:	bf00      	nop
 80089d8:	200004d4 	.word	0x200004d4

080089dc <radio_rand1>:

// return next random byte derived from seed buffer
// (buf[0] holds index of next byte to be returned)
u1_t radio_rand1()
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
	u1_t i = randbuf[0];
 80089e2:	4b10      	ldr	r3, [pc, #64]	@ (8008a24 <radio_rand1+0x48>)
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	71fb      	strb	r3, [r7, #7]
	ASSERT(i != 0);
 80089e8:	79fb      	ldrb	r3, [r7, #7]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d101      	bne.n	80089f2 <radio_rand1+0x16>
 80089ee:	f7fb feeb 	bl	80047c8 <hal_failed>
	if (i == 16) {
 80089f2:	79fb      	ldrb	r3, [r7, #7]
 80089f4:	2b10      	cmp	r3, #16
 80089f6:	d106      	bne.n	8008a06 <radio_rand1+0x2a>
		os_aes(AES_ENC, randbuf, 16); // encrypt seed with any key
 80089f8:	2210      	movs	r2, #16
 80089fa:	490a      	ldr	r1, [pc, #40]	@ (8008a24 <radio_rand1+0x48>)
 80089fc:	2000      	movs	r0, #0
 80089fe:	f7f8 fb1b 	bl	8001038 <os_aes>
		i = 0;
 8008a02:	2300      	movs	r3, #0
 8008a04:	71fb      	strb	r3, [r7, #7]
	}
	u1_t v = randbuf[i++];
 8008a06:	79fb      	ldrb	r3, [r7, #7]
 8008a08:	1c5a      	adds	r2, r3, #1
 8008a0a:	71fa      	strb	r2, [r7, #7]
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	4b05      	ldr	r3, [pc, #20]	@ (8008a24 <radio_rand1+0x48>)
 8008a10:	5c9b      	ldrb	r3, [r3, r2]
 8008a12:	71bb      	strb	r3, [r7, #6]
	randbuf[0] = i;
 8008a14:	4a03      	ldr	r2, [pc, #12]	@ (8008a24 <radio_rand1+0x48>)
 8008a16:	79fb      	ldrb	r3, [r7, #7]
 8008a18:	7013      	strb	r3, [r2, #0]
	return v;
 8008a1a:	79bb      	ldrb	r3, [r7, #6]
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3708      	adds	r7, #8
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	200004d4 	.word	0x200004d4

08008a28 <radio_irq_handler>:
		};

// called by hal ext IRQ handler
// (radio goes to stanby mode after tx/rx operations)
void radio_irq_handler(u1_t dio)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	4603      	mov	r3, r0
 8008a30:	71fb      	strb	r3, [r7, #7]
    u1_t s = readReg(RegOpMode);
    u1_t c = readReg(LORARegModemConfig2);
    opmode(OPMODE_TX);
    return;
#else /* ! CFG_TxContinuousMode */
	ostime_t now = os_getTime();
 8008a32:	f7ff faa9 	bl	8007f88 <os_getTime>
 8008a36:	60f8      	str	r0, [r7, #12]
	if ((readReg(RegOpMode) & OPMODE_LORA) != 0) { // LORA modem
 8008a38:	2001      	movs	r0, #1
 8008a3a:	f7ff fb98 	bl	800816e <readReg>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	b25b      	sxtb	r3, r3
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	da74      	bge.n	8008b30 <radio_irq_handler+0x108>
		u1_t flags = readReg(LORARegIrqFlags);
 8008a46:	2012      	movs	r0, #18
 8008a48:	f7ff fb91 	bl	800816e <readReg>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	727b      	strb	r3, [r7, #9]
		if (flags & IRQ_LORA_TXDONE_MASK) {
 8008a50:	7a7b      	ldrb	r3, [r7, #9]
 8008a52:	f003 0308 	and.w	r3, r3, #8
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d004      	beq.n	8008a64 <radio_irq_handler+0x3c>
			// save exact tx time
			LMIC.txend = now - us2osticks(43); // TXDONE FIXUP
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	3b01      	subs	r3, #1
 8008a5e:	4a59      	ldr	r2, [pc, #356]	@ (8008bc4 <radio_irq_handler+0x19c>)
 8008a60:	6013      	str	r3, [r2, #0]
 8008a62:	e05c      	b.n	8008b1e <radio_irq_handler+0xf6>
		} else if (flags & IRQ_LORA_RXDONE_MASK) {
 8008a64:	7a7b      	ldrb	r3, [r7, #9]
 8008a66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d04f      	beq.n	8008b0e <radio_irq_handler+0xe6>
			// save exact rx time
			if (getBw(LMIC.rps) == BW125) {
 8008a6e:	4b55      	ldr	r3, [pc, #340]	@ (8008bc4 <radio_irq_handler+0x19c>)
 8008a70:	89db      	ldrh	r3, [r3, #14]
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7fb ff58 	bl	8004928 <getBw>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d10d      	bne.n	8008a9a <radio_irq_handler+0x72>
				now -= LORA_RXDONE_FIXUP[getSf(LMIC.rps)];
 8008a7e:	4b51      	ldr	r3, [pc, #324]	@ (8008bc4 <radio_irq_handler+0x19c>)
 8008a80:	89db      	ldrh	r3, [r3, #14]
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7fb ff40 	bl	8004908 <getSf>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	4b4e      	ldr	r3, [pc, #312]	@ (8008bc8 <radio_irq_handler+0x1a0>)
 8008a8e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008a92:	461a      	mov	r2, r3
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	1a9b      	subs	r3, r3, r2
 8008a98:	60fb      	str	r3, [r7, #12]
			}
			LMIC.rxtime = now;
 8008a9a:	4a4a      	ldr	r2, [pc, #296]	@ (8008bc4 <radio_irq_handler+0x19c>)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	6053      	str	r3, [r2, #4]
			// read the PDU and inform the MAC that we received something
			LMIC.dataLen =
					(readReg(LORARegModemConfig1)
 8008aa0:	201d      	movs	r0, #29
 8008aa2:	f7ff fb64 	bl	800816e <readReg>
 8008aa6:	4603      	mov	r3, r0
							& SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
 8008aa8:	f003 0304 	and.w	r3, r3, #4
			LMIC.dataLen =
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d005      	beq.n	8008abc <radio_irq_handler+0x94>
							readReg(LORARegPayloadLength) :
 8008ab0:	2022      	movs	r0, #34	@ 0x22
 8008ab2:	f7ff fb5c 	bl	800816e <readReg>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	461a      	mov	r2, r3
 8008aba:	e004      	b.n	8008ac6 <radio_irq_handler+0x9e>
							readReg(LORARegRxNbBytes);
 8008abc:	2013      	movs	r0, #19
 8008abe:	f7ff fb56 	bl	800816e <readReg>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	461a      	mov	r2, r3
			LMIC.dataLen =
 8008ac6:	4b3f      	ldr	r3, [pc, #252]	@ (8008bc4 <radio_irq_handler+0x19c>)
 8008ac8:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
			// set FIFO read address pointer
			writeReg(LORARegFifoAddrPtr, readReg(LORARegFifoRxCurrentAddr));
 8008acc:	2010      	movs	r0, #16
 8008ace:	f7ff fb4e 	bl	800816e <readReg>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	200d      	movs	r0, #13
 8008ad8:	f7ff fb2c 	bl	8008134 <writeReg>
			// now read the FIFO
			readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8008adc:	4b39      	ldr	r3, [pc, #228]	@ (8008bc4 <radio_irq_handler+0x19c>)
 8008ade:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	4939      	ldr	r1, [pc, #228]	@ (8008bcc <radio_irq_handler+0x1a4>)
 8008ae6:	2000      	movs	r0, #0
 8008ae8:	f7ff fb87 	bl	80081fa <readBuf>
			// read rx quality parameters
			LMIC.snr = readReg(LORARegPktSnrValue); // SNR [dB] * 4
 8008aec:	2019      	movs	r0, #25
 8008aee:	f7ff fb3e 	bl	800816e <readReg>
 8008af2:	4603      	mov	r3, r0
 8008af4:	b25a      	sxtb	r2, r3
 8008af6:	4b33      	ldr	r3, [pc, #204]	@ (8008bc4 <radio_irq_handler+0x19c>)
 8008af8:	735a      	strb	r2, [r3, #13]
			LMIC.rssi = readReg(LORARegPktRssiValue) - 125 + 64; // RSSI [dBm] (-196...+63)
 8008afa:	201a      	movs	r0, #26
 8008afc:	f7ff fb37 	bl	800816e <readReg>
 8008b00:	4603      	mov	r3, r0
 8008b02:	3b3d      	subs	r3, #61	@ 0x3d
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	b25a      	sxtb	r2, r3
 8008b08:	4b2e      	ldr	r3, [pc, #184]	@ (8008bc4 <radio_irq_handler+0x19c>)
 8008b0a:	731a      	strb	r2, [r3, #12]
 8008b0c:	e007      	b.n	8008b1e <radio_irq_handler+0xf6>
		} else if (flags & IRQ_LORA_RXTOUT_MASK) {
 8008b0e:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	da03      	bge.n	8008b1e <radio_irq_handler+0xf6>
			// indicate timeout
			LMIC.dataLen = 0;
 8008b16:	4b2b      	ldr	r3, [pc, #172]	@ (8008bc4 <radio_irq_handler+0x19c>)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
		}
		// mask all radio IRQs
		writeReg(LORARegIrqFlagsMask, 0xFF);
 8008b1e:	21ff      	movs	r1, #255	@ 0xff
 8008b20:	2011      	movs	r0, #17
 8008b22:	f7ff fb07 	bl	8008134 <writeReg>
		// clear radio IRQ flags
		writeReg(LORARegIrqFlags, 0xFF);
 8008b26:	21ff      	movs	r1, #255	@ 0xff
 8008b28:	2012      	movs	r0, #18
 8008b2a:	f7ff fb03 	bl	8008134 <writeReg>
 8008b2e:	e03c      	b.n	8008baa <radio_irq_handler+0x182>
	} else { // FSK modem
		u1_t flags1 = readReg(FSKRegIrqFlags1);
 8008b30:	203e      	movs	r0, #62	@ 0x3e
 8008b32:	f7ff fb1c 	bl	800816e <readReg>
 8008b36:	4603      	mov	r3, r0
 8008b38:	72fb      	strb	r3, [r7, #11]
		u1_t flags2 = readReg(FSKRegIrqFlags2);
 8008b3a:	203f      	movs	r0, #63	@ 0x3f
 8008b3c:	f7ff fb17 	bl	800816e <readReg>
 8008b40:	4603      	mov	r3, r0
 8008b42:	72bb      	strb	r3, [r7, #10]
		if (flags2 & IRQ_FSK2_PACKETSENT_MASK) {
 8008b44:	7abb      	ldrb	r3, [r7, #10]
 8008b46:	f003 0308 	and.w	r3, r3, #8
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d003      	beq.n	8008b56 <radio_irq_handler+0x12e>
			// save exact tx time
			LMIC.txend = now;
 8008b4e:	4a1d      	ldr	r2, [pc, #116]	@ (8008bc4 <radio_irq_handler+0x19c>)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	6013      	str	r3, [r2, #0]
 8008b54:	e029      	b.n	8008baa <radio_irq_handler+0x182>
		} else if (flags2 & IRQ_FSK2_PAYLOADREADY_MASK) {
 8008b56:	7abb      	ldrb	r3, [r7, #10]
 8008b58:	f003 0304 	and.w	r3, r3, #4
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d019      	beq.n	8008b94 <radio_irq_handler+0x16c>
			// save exact rx time
			LMIC.rxtime = now;
 8008b60:	4a18      	ldr	r2, [pc, #96]	@ (8008bc4 <radio_irq_handler+0x19c>)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6053      	str	r3, [r2, #4]
			// read the PDU and inform the MAC that we received something
			LMIC.dataLen = readReg(FSKRegPayloadLength);
 8008b66:	2032      	movs	r0, #50	@ 0x32
 8008b68:	f7ff fb01 	bl	800816e <readReg>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	461a      	mov	r2, r3
 8008b70:	4b14      	ldr	r3, [pc, #80]	@ (8008bc4 <radio_irq_handler+0x19c>)
 8008b72:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
			// now read the FIFO
			readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8008b76:	4b13      	ldr	r3, [pc, #76]	@ (8008bc4 <radio_irq_handler+0x19c>)
 8008b78:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	4913      	ldr	r1, [pc, #76]	@ (8008bcc <radio_irq_handler+0x1a4>)
 8008b80:	2000      	movs	r0, #0
 8008b82:	f7ff fb3a 	bl	80081fa <readBuf>
			// read rx quality parameters
			LMIC.snr = 0; // determine snr
 8008b86:	4b0f      	ldr	r3, [pc, #60]	@ (8008bc4 <radio_irq_handler+0x19c>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	735a      	strb	r2, [r3, #13]
			LMIC.rssi = 0; // determine rssi
 8008b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8008bc4 <radio_irq_handler+0x19c>)
 8008b8e:	2200      	movs	r2, #0
 8008b90:	731a      	strb	r2, [r3, #12]
 8008b92:	e00a      	b.n	8008baa <radio_irq_handler+0x182>
		} else if (flags1 & IRQ_FSK1_TIMEOUT_MASK) {
 8008b94:	7afb      	ldrb	r3, [r7, #11]
 8008b96:	f003 0304 	and.w	r3, r3, #4
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d004      	beq.n	8008ba8 <radio_irq_handler+0x180>
			// indicate timeout
			LMIC.dataLen = 0;
 8008b9e:	4b09      	ldr	r3, [pc, #36]	@ (8008bc4 <radio_irq_handler+0x19c>)
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 8008ba6:	e000      	b.n	8008baa <radio_irq_handler+0x182>
		} else {
			while (1)
 8008ba8:	e7fe      	b.n	8008ba8 <radio_irq_handler+0x180>
				;
		}
	}
	// go from stanby to sleep
	opmode(OPMODE_SLEEP);
 8008baa:	2000      	movs	r0, #0
 8008bac:	f7ff fb50 	bl	8008250 <opmode>
	// run os job (use preset func ptr)
	os_setCallback(&LMIC.osjob, LMIC.osjob.func);
 8008bb0:	4b04      	ldr	r3, [pc, #16]	@ (8008bc4 <radio_irq_handler+0x19c>)
 8008bb2:	69db      	ldr	r3, [r3, #28]
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	4806      	ldr	r0, [pc, #24]	@ (8008bd0 <radio_irq_handler+0x1a8>)
 8008bb8:	f7ff fa2a 	bl	8008010 <os_setCallback>
#endif /* ! CFG_TxContinuousMode */
}
 8008bbc:	bf00      	nop
 8008bbe:	3710      	adds	r7, #16
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	200002e0 	.word	0x200002e0
 8008bc8:	0800fd34 	.word	0x0800fd34
 8008bcc:	20000428 	.word	0x20000428
 8008bd0:	200002f4 	.word	0x200002f4

08008bd4 <os_radio>:

void os_radio(u1_t mode)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	4603      	mov	r3, r0
 8008bdc:	71fb      	strb	r3, [r7, #7]
	hal_disableIRQs();
 8008bde:	f7fb fdb1 	bl	8004744 <hal_disableIRQs>
	switch (mode) {
 8008be2:	79fb      	ldrb	r3, [r7, #7]
 8008be4:	2b03      	cmp	r3, #3
 8008be6:	d81a      	bhi.n	8008c1e <os_radio+0x4a>
 8008be8:	a201      	add	r2, pc, #4	@ (adr r2, 8008bf0 <os_radio+0x1c>)
 8008bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bee:	bf00      	nop
 8008bf0:	08008c01 	.word	0x08008c01
 8008bf4:	08008c09 	.word	0x08008c09
 8008bf8:	08008c0f 	.word	0x08008c0f
 8008bfc:	08008c17 	.word	0x08008c17
	case RADIO_RST:
		// put radio to sleep
		opmode(OPMODE_SLEEP);
 8008c00:	2000      	movs	r0, #0
 8008c02:	f7ff fb25 	bl	8008250 <opmode>
		break;
 8008c06:	e00a      	b.n	8008c1e <os_radio+0x4a>

	case RADIO_TX:
		// transmit frame now
		starttx(); // buf=LMIC.frame, len=LMIC.dataLen
 8008c08:	f7ff fd44 	bl	8008694 <starttx>
		break;
 8008c0c:	e007      	b.n	8008c1e <os_radio+0x4a>

	case RADIO_RX:
		// receive frame now (exactly at rxtime)
		startrx(RXMODE_SINGLE); // buf=LMIC.frame, time=LMIC.rxtime, timeout=LMIC.rxsyms
 8008c0e:	2000      	movs	r0, #0
 8008c10:	f7ff fe4a 	bl	80088a8 <startrx>
		break;
 8008c14:	e003      	b.n	8008c1e <os_radio+0x4a>

	case RADIO_RXON:
		// start scanning for beacon now
		startrx(RXMODE_SCAN); // buf=LMIC.frame
 8008c16:	2001      	movs	r0, #1
 8008c18:	f7ff fe46 	bl	80088a8 <startrx>
		break;
 8008c1c:	bf00      	nop
	}
	hal_enableIRQs();
 8008c1e:	f7fb fda1 	bl	8004764 <hal_enableIRQs>
}
 8008c22:	bf00      	nop
 8008c24:	3708      	adds	r7, #8
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop

08008c2c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8008c30:	4b1b      	ldr	r3, [pc, #108]	@ (8008ca0 <MX_SPI3_Init+0x74>)
 8008c32:	4a1c      	ldr	r2, [pc, #112]	@ (8008ca4 <MX_SPI3_Init+0x78>)
 8008c34:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8008c36:	4b1a      	ldr	r3, [pc, #104]	@ (8008ca0 <MX_SPI3_Init+0x74>)
 8008c38:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8008c3c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8008c3e:	4b18      	ldr	r3, [pc, #96]	@ (8008ca0 <MX_SPI3_Init+0x74>)
 8008c40:	2200      	movs	r2, #0
 8008c42:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8008c44:	4b16      	ldr	r3, [pc, #88]	@ (8008ca0 <MX_SPI3_Init+0x74>)
 8008c46:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8008c4a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008c4c:	4b14      	ldr	r3, [pc, #80]	@ (8008ca0 <MX_SPI3_Init+0x74>)
 8008c4e:	2200      	movs	r2, #0
 8008c50:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008c52:	4b13      	ldr	r3, [pc, #76]	@ (8008ca0 <MX_SPI3_Init+0x74>)
 8008c54:	2200      	movs	r2, #0
 8008c56:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8008c58:	4b11      	ldr	r3, [pc, #68]	@ (8008ca0 <MX_SPI3_Init+0x74>)
 8008c5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c5e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8008c60:	4b0f      	ldr	r3, [pc, #60]	@ (8008ca0 <MX_SPI3_Init+0x74>)
 8008c62:	2228      	movs	r2, #40	@ 0x28
 8008c64:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008c66:	4b0e      	ldr	r3, [pc, #56]	@ (8008ca0 <MX_SPI3_Init+0x74>)
 8008c68:	2200      	movs	r2, #0
 8008c6a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8008c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8008ca0 <MX_SPI3_Init+0x74>)
 8008c6e:	2200      	movs	r2, #0
 8008c70:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c72:	4b0b      	ldr	r3, [pc, #44]	@ (8008ca0 <MX_SPI3_Init+0x74>)
 8008c74:	2200      	movs	r2, #0
 8008c76:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8008c78:	4b09      	ldr	r3, [pc, #36]	@ (8008ca0 <MX_SPI3_Init+0x74>)
 8008c7a:	2207      	movs	r2, #7
 8008c7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008c7e:	4b08      	ldr	r3, [pc, #32]	@ (8008ca0 <MX_SPI3_Init+0x74>)
 8008c80:	2200      	movs	r2, #0
 8008c82:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008c84:	4b06      	ldr	r3, [pc, #24]	@ (8008ca0 <MX_SPI3_Init+0x74>)
 8008c86:	2208      	movs	r2, #8
 8008c88:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8008c8a:	4805      	ldr	r0, [pc, #20]	@ (8008ca0 <MX_SPI3_Init+0x74>)
 8008c8c:	f004 f96c 	bl	800cf68 <HAL_SPI_Init>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d001      	beq.n	8008c9a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8008c96:	f7ff f95f 	bl	8007f58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8008c9a:	bf00      	nop
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	200004e4 	.word	0x200004e4
 8008ca4:	40003c00 	.word	0x40003c00

08008ca8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b08a      	sub	sp, #40	@ 0x28
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cb0:	f107 0314 	add.w	r3, r7, #20
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	601a      	str	r2, [r3, #0]
 8008cb8:	605a      	str	r2, [r3, #4]
 8008cba:	609a      	str	r2, [r3, #8]
 8008cbc:	60da      	str	r2, [r3, #12]
 8008cbe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a17      	ldr	r2, [pc, #92]	@ (8008d24 <HAL_SPI_MspInit+0x7c>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d127      	bne.n	8008d1a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008cca:	4b17      	ldr	r3, [pc, #92]	@ (8008d28 <HAL_SPI_MspInit+0x80>)
 8008ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cce:	4a16      	ldr	r2, [pc, #88]	@ (8008d28 <HAL_SPI_MspInit+0x80>)
 8008cd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8008cd6:	4b14      	ldr	r3, [pc, #80]	@ (8008d28 <HAL_SPI_MspInit+0x80>)
 8008cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008cde:	613b      	str	r3, [r7, #16]
 8008ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ce2:	4b11      	ldr	r3, [pc, #68]	@ (8008d28 <HAL_SPI_MspInit+0x80>)
 8008ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ce6:	4a10      	ldr	r2, [pc, #64]	@ (8008d28 <HAL_SPI_MspInit+0x80>)
 8008ce8:	f043 0302 	orr.w	r3, r3, #2
 8008cec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008cee:	4b0e      	ldr	r3, [pc, #56]	@ (8008d28 <HAL_SPI_MspInit+0x80>)
 8008cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cf2:	f003 0302 	and.w	r3, r3, #2
 8008cf6:	60fb      	str	r3, [r7, #12]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8008cfa:	2338      	movs	r3, #56	@ 0x38
 8008cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cfe:	2302      	movs	r3, #2
 8008d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d02:	2300      	movs	r3, #0
 8008d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d06:	2303      	movs	r3, #3
 8008d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008d0a:	2306      	movs	r3, #6
 8008d0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d0e:	f107 0314 	add.w	r3, r7, #20
 8008d12:	4619      	mov	r1, r3
 8008d14:	4805      	ldr	r0, [pc, #20]	@ (8008d2c <HAL_SPI_MspInit+0x84>)
 8008d16:	f001 fef9 	bl	800ab0c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8008d1a:	bf00      	nop
 8008d1c:	3728      	adds	r7, #40	@ 0x28
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	40003c00 	.word	0x40003c00
 8008d28:	40021000 	.word	0x40021000
 8008d2c:	48000400 	.word	0x48000400

08008d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d36:	4b0f      	ldr	r3, [pc, #60]	@ (8008d74 <HAL_MspInit+0x44>)
 8008d38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d3a:	4a0e      	ldr	r2, [pc, #56]	@ (8008d74 <HAL_MspInit+0x44>)
 8008d3c:	f043 0301 	orr.w	r3, r3, #1
 8008d40:	6613      	str	r3, [r2, #96]	@ 0x60
 8008d42:	4b0c      	ldr	r3, [pc, #48]	@ (8008d74 <HAL_MspInit+0x44>)
 8008d44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d46:	f003 0301 	and.w	r3, r3, #1
 8008d4a:	607b      	str	r3, [r7, #4]
 8008d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008d4e:	4b09      	ldr	r3, [pc, #36]	@ (8008d74 <HAL_MspInit+0x44>)
 8008d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d52:	4a08      	ldr	r2, [pc, #32]	@ (8008d74 <HAL_MspInit+0x44>)
 8008d54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d58:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d5a:	4b06      	ldr	r3, [pc, #24]	@ (8008d74 <HAL_MspInit+0x44>)
 8008d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d62:	603b      	str	r3, [r7, #0]
 8008d64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008d66:	bf00      	nop
 8008d68:	370c      	adds	r7, #12
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	40021000 	.word	0x40021000

08008d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8008d7c:	bf00      	nop
 8008d7e:	e7fd      	b.n	8008d7c <NMI_Handler+0x4>

08008d80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008d80:	b480      	push	{r7}
 8008d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008d84:	bf00      	nop
 8008d86:	e7fd      	b.n	8008d84 <HardFault_Handler+0x4>

08008d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008d8c:	bf00      	nop
 8008d8e:	e7fd      	b.n	8008d8c <MemManage_Handler+0x4>

08008d90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008d90:	b480      	push	{r7}
 8008d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008d94:	bf00      	nop
 8008d96:	e7fd      	b.n	8008d94 <BusFault_Handler+0x4>

08008d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008d9c:	bf00      	nop
 8008d9e:	e7fd      	b.n	8008d9c <UsageFault_Handler+0x4>

08008da0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008da0:	b480      	push	{r7}
 8008da2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008da4:	bf00      	nop
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr

08008dae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008dae:	b480      	push	{r7}
 8008db0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008db2:	bf00      	nop
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008dc0:	bf00      	nop
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr

08008dca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008dce:	f000 f9f5 	bl	80091bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008dd2:	bf00      	nop
 8008dd4:	bd80      	pop	{r7, pc}
	...

08008dd8 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8008ddc:	4802      	ldr	r0, [pc, #8]	@ (8008de8 <ADC1_IRQHandler+0x10>)
 8008dde:	f000 fe34 	bl	8009a4a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8008de2:	bf00      	nop
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop
 8008de8:	20000084 	.word	0x20000084

08008dec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8008df0:	2040      	movs	r0, #64	@ 0x40
 8008df2:	f002 f80d 	bl	800ae10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIO1_Pin);
 8008df6:	2080      	movs	r0, #128	@ 0x80
 8008df8:	f002 f80a 	bl	800ae10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8008dfc:	bf00      	nop
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8008e04:	4802      	ldr	r0, [pc, #8]	@ (8008e10 <TIM6_DAC_IRQHandler+0x10>)
 8008e06:	f004 fd81 	bl	800d90c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8008e0a:	bf00      	nop
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	20000548 	.word	0x20000548

08008e14 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8008e18:	4802      	ldr	r0, [pc, #8]	@ (8008e24 <TIM7_IRQHandler+0x10>)
 8008e1a:	f004 fd77 	bl	800d90c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8008e1e:	bf00      	nop
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	20000594 	.word	0x20000594

08008e28 <SystemInit>:
 * @brief  Setup the microcontroller system.
 * @retval None
 */

void SystemInit(void)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 8008e2c:	4b06      	ldr	r3, [pc, #24]	@ (8008e48 <SystemInit+0x20>)
 8008e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e32:	4a05      	ldr	r2, [pc, #20]	@ (8008e48 <SystemInit+0x20>)
 8008e34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008e38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8008e3c:	bf00      	nop
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop
 8008e48:	e000ed00 	.word	0xe000ed00

08008e4c <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008e52:	1d3b      	adds	r3, r7, #4
 8008e54:	2200      	movs	r2, #0
 8008e56:	601a      	str	r2, [r3, #0]
 8008e58:	605a      	str	r2, [r3, #4]
 8008e5a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8008e5c:	4b15      	ldr	r3, [pc, #84]	@ (8008eb4 <MX_TIM6_Init+0x68>)
 8008e5e:	4a16      	ldr	r2, [pc, #88]	@ (8008eb8 <MX_TIM6_Init+0x6c>)
 8008e60:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1222-1;
 8008e62:	4b14      	ldr	r3, [pc, #80]	@ (8008eb4 <MX_TIM6_Init+0x68>)
 8008e64:	f240 42c5 	movw	r2, #1221	@ 0x4c5
 8008e68:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008e6a:	4b12      	ldr	r3, [pc, #72]	@ (8008eb4 <MX_TIM6_Init+0x68>)
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65521-1;
 8008e70:	4b10      	ldr	r3, [pc, #64]	@ (8008eb4 <MX_TIM6_Init+0x68>)
 8008e72:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8008e76:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008e78:	4b0e      	ldr	r3, [pc, #56]	@ (8008eb4 <MX_TIM6_Init+0x68>)
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8008e7e:	480d      	ldr	r0, [pc, #52]	@ (8008eb4 <MX_TIM6_Init+0x68>)
 8008e80:	f004 fc98 	bl	800d7b4 <HAL_TIM_Base_Init>
 8008e84:	4603      	mov	r3, r0
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d001      	beq.n	8008e8e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8008e8a:	f7ff f865 	bl	8007f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008e92:	2300      	movs	r3, #0
 8008e94:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8008e96:	1d3b      	adds	r3, r7, #4
 8008e98:	4619      	mov	r1, r3
 8008e9a:	4806      	ldr	r0, [pc, #24]	@ (8008eb4 <MX_TIM6_Init+0x68>)
 8008e9c:	f004 fed6 	bl	800dc4c <HAL_TIMEx_MasterConfigSynchronization>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d001      	beq.n	8008eaa <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8008ea6:	f7ff f857 	bl	8007f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8008eaa:	bf00      	nop
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	20000548 	.word	0x20000548
 8008eb8:	40001000 	.word	0x40001000

08008ebc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008ec2:	1d3b      	adds	r3, r7, #4
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	601a      	str	r2, [r3, #0]
 8008ec8:	605a      	str	r2, [r3, #4]
 8008eca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8008ecc:	4b15      	ldr	r3, [pc, #84]	@ (8008f24 <MX_TIM7_Init+0x68>)
 8008ece:	4a16      	ldr	r2, [pc, #88]	@ (8008f28 <MX_TIM7_Init+0x6c>)
 8008ed0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2500-1;
 8008ed2:	4b14      	ldr	r3, [pc, #80]	@ (8008f24 <MX_TIM7_Init+0x68>)
 8008ed4:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8008ed8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008eda:	4b12      	ldr	r3, [pc, #72]	@ (8008f24 <MX_TIM7_Init+0x68>)
 8008edc:	2200      	movs	r2, #0
 8008ede:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8008ee0:	4b10      	ldr	r3, [pc, #64]	@ (8008f24 <MX_TIM7_Init+0x68>)
 8008ee2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008ee6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8008f24 <MX_TIM7_Init+0x68>)
 8008eea:	2200      	movs	r2, #0
 8008eec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8008eee:	480d      	ldr	r0, [pc, #52]	@ (8008f24 <MX_TIM7_Init+0x68>)
 8008ef0:	f004 fc60 	bl	800d7b4 <HAL_TIM_Base_Init>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d001      	beq.n	8008efe <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8008efa:	f7ff f82d 	bl	8007f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008efe:	2300      	movs	r3, #0
 8008f00:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008f02:	2300      	movs	r3, #0
 8008f04:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8008f06:	1d3b      	adds	r3, r7, #4
 8008f08:	4619      	mov	r1, r3
 8008f0a:	4806      	ldr	r0, [pc, #24]	@ (8008f24 <MX_TIM7_Init+0x68>)
 8008f0c:	f004 fe9e 	bl	800dc4c <HAL_TIMEx_MasterConfigSynchronization>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d001      	beq.n	8008f1a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8008f16:	f7ff f81f 	bl	8007f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8008f1a:	bf00      	nop
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	20000594 	.word	0x20000594
 8008f28:	40001400 	.word	0x40001400

08008f2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a1a      	ldr	r2, [pc, #104]	@ (8008fa4 <HAL_TIM_Base_MspInit+0x78>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d114      	bne.n	8008f68 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8008f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8008fa8 <HAL_TIM_Base_MspInit+0x7c>)
 8008f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f42:	4a19      	ldr	r2, [pc, #100]	@ (8008fa8 <HAL_TIM_Base_MspInit+0x7c>)
 8008f44:	f043 0310 	orr.w	r3, r3, #16
 8008f48:	6593      	str	r3, [r2, #88]	@ 0x58
 8008f4a:	4b17      	ldr	r3, [pc, #92]	@ (8008fa8 <HAL_TIM_Base_MspInit+0x7c>)
 8008f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f4e:	f003 0310 	and.w	r3, r3, #16
 8008f52:	60fb      	str	r3, [r7, #12]
 8008f54:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8008f56:	2200      	movs	r2, #0
 8008f58:	2100      	movs	r1, #0
 8008f5a:	2036      	movs	r0, #54	@ 0x36
 8008f5c:	f001 fd9f 	bl	800aa9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8008f60:	2036      	movs	r0, #54	@ 0x36
 8008f62:	f001 fdb8 	bl	800aad6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8008f66:	e018      	b.n	8008f9a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a0f      	ldr	r2, [pc, #60]	@ (8008fac <HAL_TIM_Base_MspInit+0x80>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d113      	bne.n	8008f9a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8008f72:	4b0d      	ldr	r3, [pc, #52]	@ (8008fa8 <HAL_TIM_Base_MspInit+0x7c>)
 8008f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f76:	4a0c      	ldr	r2, [pc, #48]	@ (8008fa8 <HAL_TIM_Base_MspInit+0x7c>)
 8008f78:	f043 0320 	orr.w	r3, r3, #32
 8008f7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8008fa8 <HAL_TIM_Base_MspInit+0x7c>)
 8008f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f82:	f003 0320 	and.w	r3, r3, #32
 8008f86:	60bb      	str	r3, [r7, #8]
 8008f88:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	2037      	movs	r0, #55	@ 0x37
 8008f90:	f001 fd85 	bl	800aa9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8008f94:	2037      	movs	r0, #55	@ 0x37
 8008f96:	f001 fd9e 	bl	800aad6 <HAL_NVIC_EnableIRQ>
}
 8008f9a:	bf00      	nop
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	40001000 	.word	0x40001000
 8008fa8:	40021000 	.word	0x40021000
 8008fac:	40001400 	.word	0x40001400

08008fb0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008fb4:	4b14      	ldr	r3, [pc, #80]	@ (8009008 <MX_USART2_UART_Init+0x58>)
 8008fb6:	4a15      	ldr	r2, [pc, #84]	@ (800900c <MX_USART2_UART_Init+0x5c>)
 8008fb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008fba:	4b13      	ldr	r3, [pc, #76]	@ (8009008 <MX_USART2_UART_Init+0x58>)
 8008fbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008fc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008fc2:	4b11      	ldr	r3, [pc, #68]	@ (8009008 <MX_USART2_UART_Init+0x58>)
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8009008 <MX_USART2_UART_Init+0x58>)
 8008fca:	2200      	movs	r2, #0
 8008fcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008fce:	4b0e      	ldr	r3, [pc, #56]	@ (8009008 <MX_USART2_UART_Init+0x58>)
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8009008 <MX_USART2_UART_Init+0x58>)
 8008fd6:	220c      	movs	r2, #12
 8008fd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008fda:	4b0b      	ldr	r3, [pc, #44]	@ (8009008 <MX_USART2_UART_Init+0x58>)
 8008fdc:	2200      	movs	r2, #0
 8008fde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008fe0:	4b09      	ldr	r3, [pc, #36]	@ (8009008 <MX_USART2_UART_Init+0x58>)
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008fe6:	4b08      	ldr	r3, [pc, #32]	@ (8009008 <MX_USART2_UART_Init+0x58>)
 8008fe8:	2200      	movs	r2, #0
 8008fea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008fec:	4b06      	ldr	r3, [pc, #24]	@ (8009008 <MX_USART2_UART_Init+0x58>)
 8008fee:	2200      	movs	r2, #0
 8008ff0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008ff2:	4805      	ldr	r0, [pc, #20]	@ (8009008 <MX_USART2_UART_Init+0x58>)
 8008ff4:	f004 feae 	bl	800dd54 <HAL_UART_Init>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d001      	beq.n	8009002 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8008ffe:	f7fe ffab 	bl	8007f58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8009002:	bf00      	nop
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	200005e0 	.word	0x200005e0
 800900c:	40004400 	.word	0x40004400

08009010 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b09e      	sub	sp, #120	@ 0x78
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009018:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800901c:	2200      	movs	r2, #0
 800901e:	601a      	str	r2, [r3, #0]
 8009020:	605a      	str	r2, [r3, #4]
 8009022:	609a      	str	r2, [r3, #8]
 8009024:	60da      	str	r2, [r3, #12]
 8009026:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009028:	f107 0310 	add.w	r3, r7, #16
 800902c:	2254      	movs	r2, #84	@ 0x54
 800902e:	2100      	movs	r1, #0
 8009030:	4618      	mov	r0, r3
 8009032:	f005 fbae 	bl	800e792 <memset>
  if(uartHandle->Instance==USART2)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4a1f      	ldr	r2, [pc, #124]	@ (80090b8 <HAL_UART_MspInit+0xa8>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d136      	bne.n	80090ae <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8009040:	2302      	movs	r3, #2
 8009042:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8009044:	2300      	movs	r3, #0
 8009046:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009048:	f107 0310 	add.w	r3, r7, #16
 800904c:	4618      	mov	r0, r3
 800904e:	f003 fca3 	bl	800c998 <HAL_RCCEx_PeriphCLKConfig>
 8009052:	4603      	mov	r3, r0
 8009054:	2b00      	cmp	r3, #0
 8009056:	d001      	beq.n	800905c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8009058:	f7fe ff7e 	bl	8007f58 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800905c:	4b17      	ldr	r3, [pc, #92]	@ (80090bc <HAL_UART_MspInit+0xac>)
 800905e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009060:	4a16      	ldr	r2, [pc, #88]	@ (80090bc <HAL_UART_MspInit+0xac>)
 8009062:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009066:	6593      	str	r3, [r2, #88]	@ 0x58
 8009068:	4b14      	ldr	r3, [pc, #80]	@ (80090bc <HAL_UART_MspInit+0xac>)
 800906a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800906c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009070:	60fb      	str	r3, [r7, #12]
 8009072:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009074:	4b11      	ldr	r3, [pc, #68]	@ (80090bc <HAL_UART_MspInit+0xac>)
 8009076:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009078:	4a10      	ldr	r2, [pc, #64]	@ (80090bc <HAL_UART_MspInit+0xac>)
 800907a:	f043 0301 	orr.w	r3, r3, #1
 800907e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009080:	4b0e      	ldr	r3, [pc, #56]	@ (80090bc <HAL_UART_MspInit+0xac>)
 8009082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009084:	f003 0301 	and.w	r3, r3, #1
 8009088:	60bb      	str	r3, [r7, #8]
 800908a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800908c:	230c      	movs	r3, #12
 800908e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009090:	2302      	movs	r3, #2
 8009092:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009094:	2300      	movs	r3, #0
 8009096:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009098:	2303      	movs	r3, #3
 800909a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800909c:	2307      	movs	r3, #7
 800909e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090a0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80090a4:	4619      	mov	r1, r3
 80090a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80090aa:	f001 fd2f 	bl	800ab0c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80090ae:	bf00      	nop
 80090b0:	3778      	adds	r7, #120	@ 0x78
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	40004400 	.word	0x40004400
 80090bc:	40021000 	.word	0x40021000

080090c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80090c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80090f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80090c4:	f7ff feb0 	bl	8008e28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80090c8:	480c      	ldr	r0, [pc, #48]	@ (80090fc <LoopForever+0x6>)
  ldr r1, =_edata
 80090ca:	490d      	ldr	r1, [pc, #52]	@ (8009100 <LoopForever+0xa>)
  ldr r2, =_sidata
 80090cc:	4a0d      	ldr	r2, [pc, #52]	@ (8009104 <LoopForever+0xe>)
  movs r3, #0
 80090ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80090d0:	e002      	b.n	80090d8 <LoopCopyDataInit>

080090d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80090d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80090d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80090d6:	3304      	adds	r3, #4

080090d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80090d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80090da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80090dc:	d3f9      	bcc.n	80090d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80090de:	4a0a      	ldr	r2, [pc, #40]	@ (8009108 <LoopForever+0x12>)
  ldr r4, =_ebss
 80090e0:	4c0a      	ldr	r4, [pc, #40]	@ (800910c <LoopForever+0x16>)
  movs r3, #0
 80090e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80090e4:	e001      	b.n	80090ea <LoopFillZerobss>

080090e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80090e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80090e8:	3204      	adds	r2, #4

080090ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80090ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80090ec:	d3fb      	bcc.n	80090e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80090ee:	f005 fb59 	bl	800e7a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80090f2:	f7fe fe5b 	bl	8007dac <main>

080090f6 <LoopForever>:

LoopForever:
    b LoopForever
 80090f6:	e7fe      	b.n	80090f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80090f8:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80090fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009100:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8009104:	0800fd9c 	.word	0x0800fd9c
  ldr r2, =_sbss
 8009108:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800910c:	2000066c 	.word	0x2000066c

08009110 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009110:	e7fe      	b.n	8009110 <CAN1_RX0_IRQHandler>

08009112 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b082      	sub	sp, #8
 8009116:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009118:	2300      	movs	r3, #0
 800911a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800911c:	2003      	movs	r0, #3
 800911e:	f001 fcb3 	bl	800aa88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009122:	200f      	movs	r0, #15
 8009124:	f000 f80e 	bl	8009144 <HAL_InitTick>
 8009128:	4603      	mov	r3, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d002      	beq.n	8009134 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800912e:	2301      	movs	r3, #1
 8009130:	71fb      	strb	r3, [r7, #7]
 8009132:	e001      	b.n	8009138 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009134:	f7ff fdfc 	bl	8008d30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009138:	79fb      	ldrb	r3, [r7, #7]
}
 800913a:	4618      	mov	r0, r3
 800913c:	3708      	adds	r7, #8
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
	...

08009144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800914c:	2300      	movs	r3, #0
 800914e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8009150:	4b17      	ldr	r3, [pc, #92]	@ (80091b0 <HAL_InitTick+0x6c>)
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d023      	beq.n	80091a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8009158:	4b16      	ldr	r3, [pc, #88]	@ (80091b4 <HAL_InitTick+0x70>)
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	4b14      	ldr	r3, [pc, #80]	@ (80091b0 <HAL_InitTick+0x6c>)
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	4619      	mov	r1, r3
 8009162:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009166:	fbb3 f3f1 	udiv	r3, r3, r1
 800916a:	fbb2 f3f3 	udiv	r3, r2, r3
 800916e:	4618      	mov	r0, r3
 8009170:	f001 fcbf 	bl	800aaf2 <HAL_SYSTICK_Config>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	d10f      	bne.n	800919a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2b0f      	cmp	r3, #15
 800917e:	d809      	bhi.n	8009194 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009180:	2200      	movs	r2, #0
 8009182:	6879      	ldr	r1, [r7, #4]
 8009184:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009188:	f001 fc89 	bl	800aa9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800918c:	4a0a      	ldr	r2, [pc, #40]	@ (80091b8 <HAL_InitTick+0x74>)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6013      	str	r3, [r2, #0]
 8009192:	e007      	b.n	80091a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	73fb      	strb	r3, [r7, #15]
 8009198:	e004      	b.n	80091a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	73fb      	strb	r3, [r7, #15]
 800919e:	e001      	b.n	80091a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80091a0:	2301      	movs	r3, #1
 80091a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80091a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	20000064 	.word	0x20000064
 80091b4:	2000005c 	.word	0x2000005c
 80091b8:	20000060 	.word	0x20000060

080091bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80091bc:	b480      	push	{r7}
 80091be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80091c0:	4b06      	ldr	r3, [pc, #24]	@ (80091dc <HAL_IncTick+0x20>)
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	461a      	mov	r2, r3
 80091c6:	4b06      	ldr	r3, [pc, #24]	@ (80091e0 <HAL_IncTick+0x24>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4413      	add	r3, r2
 80091cc:	4a04      	ldr	r2, [pc, #16]	@ (80091e0 <HAL_IncTick+0x24>)
 80091ce:	6013      	str	r3, [r2, #0]
}
 80091d0:	bf00      	nop
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop
 80091dc:	20000064 	.word	0x20000064
 80091e0:	20000668 	.word	0x20000668

080091e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80091e4:	b480      	push	{r7}
 80091e6:	af00      	add	r7, sp, #0
  return uwTick;
 80091e8:	4b03      	ldr	r3, [pc, #12]	@ (80091f8 <HAL_GetTick+0x14>)
 80091ea:	681b      	ldr	r3, [r3, #0]
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr
 80091f6:	bf00      	nop
 80091f8:	20000668 	.word	0x20000668

080091fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009204:	f7ff ffee 	bl	80091e4 <HAL_GetTick>
 8009208:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009214:	d005      	beq.n	8009222 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8009216:	4b0a      	ldr	r3, [pc, #40]	@ (8009240 <HAL_Delay+0x44>)
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	461a      	mov	r2, r3
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	4413      	add	r3, r2
 8009220:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009222:	bf00      	nop
 8009224:	f7ff ffde 	bl	80091e4 <HAL_GetTick>
 8009228:	4602      	mov	r2, r0
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	1ad3      	subs	r3, r2, r3
 800922e:	68fa      	ldr	r2, [r7, #12]
 8009230:	429a      	cmp	r2, r3
 8009232:	d8f7      	bhi.n	8009224 <HAL_Delay+0x28>
  {
  }
}
 8009234:	bf00      	nop
 8009236:	bf00      	nop
 8009238:	3710      	adds	r7, #16
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	20000064 	.word	0x20000064

08009244 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	431a      	orrs	r2, r3
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	609a      	str	r2, [r3, #8]
}
 800925e:	bf00      	nop
 8009260:	370c      	adds	r7, #12
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr

0800926a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800926a:	b480      	push	{r7}
 800926c:	b083      	sub	sp, #12
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
 8009272:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	431a      	orrs	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	609a      	str	r2, [r3, #8]
}
 8009284:	bf00      	nop
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b087      	sub	sp, #28
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	607a      	str	r2, [r7, #4]
 80092b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	3360      	adds	r3, #96	@ 0x60
 80092be:	461a      	mov	r2, r3
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	4413      	add	r3, r2
 80092c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	4b08      	ldr	r3, [pc, #32]	@ (80092f0 <LL_ADC_SetOffset+0x44>)
 80092ce:	4013      	ands	r3, r2
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80092d6:	683a      	ldr	r2, [r7, #0]
 80092d8:	430a      	orrs	r2, r1
 80092da:	4313      	orrs	r3, r2
 80092dc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80092e4:	bf00      	nop
 80092e6:	371c      	adds	r7, #28
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr
 80092f0:	03fff000 	.word	0x03fff000

080092f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b085      	sub	sp, #20
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	3360      	adds	r3, #96	@ 0x60
 8009302:	461a      	mov	r2, r3
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	4413      	add	r3, r2
 800930a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8009314:	4618      	mov	r0, r3
 8009316:	3714      	adds	r7, #20
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8009320:	b480      	push	{r7}
 8009322:	b087      	sub	sp, #28
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	60b9      	str	r1, [r7, #8]
 800932a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	3360      	adds	r3, #96	@ 0x60
 8009330:	461a      	mov	r2, r3
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	009b      	lsls	r3, r3, #2
 8009336:	4413      	add	r3, r2
 8009338:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	431a      	orrs	r2, r3
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800934a:	bf00      	nop
 800934c:	371c      	adds	r7, #28
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr

08009356 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8009356:	b480      	push	{r7}
 8009358:	b083      	sub	sp, #12
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	68db      	ldr	r3, [r3, #12]
 8009362:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009366:	2b00      	cmp	r3, #0
 8009368:	d101      	bne.n	800936e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800936a:	2301      	movs	r3, #1
 800936c:	e000      	b.n	8009370 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	370c      	adds	r7, #12
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800937c:	b480      	push	{r7}
 800937e:	b087      	sub	sp, #28
 8009380:	af00      	add	r7, sp, #0
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	3330      	adds	r3, #48	@ 0x30
 800938c:	461a      	mov	r2, r3
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	0a1b      	lsrs	r3, r3, #8
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	f003 030c 	and.w	r3, r3, #12
 8009398:	4413      	add	r3, r2
 800939a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	f003 031f 	and.w	r3, r3, #31
 80093a6:	211f      	movs	r1, #31
 80093a8:	fa01 f303 	lsl.w	r3, r1, r3
 80093ac:	43db      	mvns	r3, r3
 80093ae:	401a      	ands	r2, r3
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	0e9b      	lsrs	r3, r3, #26
 80093b4:	f003 011f 	and.w	r1, r3, #31
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	f003 031f 	and.w	r3, r3, #31
 80093be:	fa01 f303 	lsl.w	r3, r1, r3
 80093c2:	431a      	orrs	r2, r3
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80093c8:	bf00      	nop
 80093ca:	371c      	adds	r7, #28
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093e0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d101      	bne.n	80093ec <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80093e8:	2301      	movs	r3, #1
 80093ea:	e000      	b.n	80093ee <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80093ec:	2300      	movs	r3, #0
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	370c      	adds	r7, #12
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr

080093fa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80093fa:	b480      	push	{r7}
 80093fc:	b087      	sub	sp, #28
 80093fe:	af00      	add	r7, sp, #0
 8009400:	60f8      	str	r0, [r7, #12]
 8009402:	60b9      	str	r1, [r7, #8]
 8009404:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	3314      	adds	r3, #20
 800940a:	461a      	mov	r2, r3
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	0e5b      	lsrs	r3, r3, #25
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	f003 0304 	and.w	r3, r3, #4
 8009416:	4413      	add	r3, r2
 8009418:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	0d1b      	lsrs	r3, r3, #20
 8009422:	f003 031f 	and.w	r3, r3, #31
 8009426:	2107      	movs	r1, #7
 8009428:	fa01 f303 	lsl.w	r3, r1, r3
 800942c:	43db      	mvns	r3, r3
 800942e:	401a      	ands	r2, r3
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	0d1b      	lsrs	r3, r3, #20
 8009434:	f003 031f 	and.w	r3, r3, #31
 8009438:	6879      	ldr	r1, [r7, #4]
 800943a:	fa01 f303 	lsl.w	r3, r1, r3
 800943e:	431a      	orrs	r2, r3
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8009444:	bf00      	nop
 8009446:	371c      	adds	r7, #28
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8009450:	b480      	push	{r7}
 8009452:	b085      	sub	sp, #20
 8009454:	af00      	add	r7, sp, #0
 8009456:	60f8      	str	r0, [r7, #12]
 8009458:	60b9      	str	r1, [r7, #8]
 800945a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009468:	43db      	mvns	r3, r3
 800946a:	401a      	ands	r2, r3
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f003 0318 	and.w	r3, r3, #24
 8009472:	4908      	ldr	r1, [pc, #32]	@ (8009494 <LL_ADC_SetChannelSingleDiff+0x44>)
 8009474:	40d9      	lsrs	r1, r3
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	400b      	ands	r3, r1
 800947a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800947e:	431a      	orrs	r2, r3
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8009486:	bf00      	nop
 8009488:	3714      	adds	r7, #20
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr
 8009492:	bf00      	nop
 8009494:	0007ffff 	.word	0x0007ffff

08009498 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80094a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	6093      	str	r3, [r2, #8]
}
 80094b0:	bf00      	nop
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80094cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094d0:	d101      	bne.n	80094d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80094d2:	2301      	movs	r3, #1
 80094d4:	e000      	b.n	80094d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	689b      	ldr	r3, [r3, #8]
 80094f0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80094f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80094f8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8009500:	bf00      	nop
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800951c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009520:	d101      	bne.n	8009526 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8009522:	2301      	movs	r3, #1
 8009524:	e000      	b.n	8009528 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8009526:	2300      	movs	r3, #0
}
 8009528:	4618      	mov	r0, r3
 800952a:	370c      	adds	r7, #12
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009544:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009548:	f043 0201 	orr.w	r2, r3, #1
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8009550:	bf00      	nop
 8009552:	370c      	adds	r7, #12
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr

0800955c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800956c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009570:	f043 0202 	orr.w	r2, r3, #2
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8009578:	bf00      	nop
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	f003 0301 	and.w	r3, r3, #1
 8009594:	2b01      	cmp	r3, #1
 8009596:	d101      	bne.n	800959c <LL_ADC_IsEnabled+0x18>
 8009598:	2301      	movs	r3, #1
 800959a:	e000      	b.n	800959e <LL_ADC_IsEnabled+0x1a>
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	370c      	adds	r7, #12
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr

080095aa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80095aa:	b480      	push	{r7}
 80095ac:	b083      	sub	sp, #12
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	f003 0302 	and.w	r3, r3, #2
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d101      	bne.n	80095c2 <LL_ADC_IsDisableOngoing+0x18>
 80095be:	2301      	movs	r3, #1
 80095c0:	e000      	b.n	80095c4 <LL_ADC_IsDisableOngoing+0x1a>
 80095c2:	2300      	movs	r3, #0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	370c      	adds	r7, #12
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr

080095d0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b083      	sub	sp, #12
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80095e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80095e4:	f043 0204 	orr.w	r2, r3, #4
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80095ec:	bf00      	nop
 80095ee:	370c      	adds	r7, #12
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	f003 0304 	and.w	r3, r3, #4
 8009608:	2b04      	cmp	r3, #4
 800960a:	d101      	bne.n	8009610 <LL_ADC_REG_IsConversionOngoing+0x18>
 800960c:	2301      	movs	r3, #1
 800960e:	e000      	b.n	8009612 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	370c      	adds	r7, #12
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr

0800961e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800961e:	b480      	push	{r7}
 8009620:	b083      	sub	sp, #12
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	f003 0308 	and.w	r3, r3, #8
 800962e:	2b08      	cmp	r3, #8
 8009630:	d101      	bne.n	8009636 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8009632:	2301      	movs	r3, #1
 8009634:	e000      	b.n	8009638 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b088      	sub	sp, #32
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800964c:	2300      	movs	r3, #0
 800964e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8009650:	2300      	movs	r3, #0
 8009652:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d101      	bne.n	800965e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800965a:	2301      	movs	r3, #1
 800965c:	e126      	b.n	80098ac <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	691b      	ldr	r3, [r3, #16]
 8009662:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009668:	2b00      	cmp	r3, #0
 800966a:	d109      	bne.n	8009680 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f7f7 fbf9 	bl	8000e64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2200      	movs	r2, #0
 8009676:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4618      	mov	r0, r3
 8009686:	f7ff ff19 	bl	80094bc <LL_ADC_IsDeepPowerDownEnabled>
 800968a:	4603      	mov	r3, r0
 800968c:	2b00      	cmp	r3, #0
 800968e:	d004      	beq.n	800969a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4618      	mov	r0, r3
 8009696:	f7ff feff 	bl	8009498 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4618      	mov	r0, r3
 80096a0:	f7ff ff34 	bl	800950c <LL_ADC_IsInternalRegulatorEnabled>
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d115      	bne.n	80096d6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7ff ff18 	bl	80094e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80096b4:	4b7f      	ldr	r3, [pc, #508]	@ (80098b4 <HAL_ADC_Init+0x270>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	099b      	lsrs	r3, r3, #6
 80096ba:	4a7f      	ldr	r2, [pc, #508]	@ (80098b8 <HAL_ADC_Init+0x274>)
 80096bc:	fba2 2303 	umull	r2, r3, r2, r3
 80096c0:	099b      	lsrs	r3, r3, #6
 80096c2:	3301      	adds	r3, #1
 80096c4:	005b      	lsls	r3, r3, #1
 80096c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80096c8:	e002      	b.n	80096d0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	3b01      	subs	r3, #1
 80096ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1f9      	bne.n	80096ca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4618      	mov	r0, r3
 80096dc:	f7ff ff16 	bl	800950c <LL_ADC_IsInternalRegulatorEnabled>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d10d      	bne.n	8009702 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096ea:	f043 0210 	orr.w	r2, r3, #16
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096f6:	f043 0201 	orr.w	r2, r3, #1
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80096fe:	2301      	movs	r3, #1
 8009700:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4618      	mov	r0, r3
 8009708:	f7ff ff76 	bl	80095f8 <LL_ADC_REG_IsConversionOngoing>
 800970c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009712:	f003 0310 	and.w	r3, r3, #16
 8009716:	2b00      	cmp	r3, #0
 8009718:	f040 80bf 	bne.w	800989a <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	2b00      	cmp	r3, #0
 8009720:	f040 80bb 	bne.w	800989a <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009728:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800972c:	f043 0202 	orr.w	r2, r3, #2
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4618      	mov	r0, r3
 800973a:	f7ff ff23 	bl	8009584 <LL_ADC_IsEnabled>
 800973e:	4603      	mov	r3, r0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d10b      	bne.n	800975c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009744:	485d      	ldr	r0, [pc, #372]	@ (80098bc <HAL_ADC_Init+0x278>)
 8009746:	f7ff ff1d 	bl	8009584 <LL_ADC_IsEnabled>
 800974a:	4603      	mov	r3, r0
 800974c:	2b00      	cmp	r3, #0
 800974e:	d105      	bne.n	800975c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	4619      	mov	r1, r3
 8009756:	485a      	ldr	r0, [pc, #360]	@ (80098c0 <HAL_ADC_Init+0x27c>)
 8009758:	f7ff fd74 	bl	8009244 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	7e5b      	ldrb	r3, [r3, #25]
 8009760:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009766:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800976c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8009772:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f893 3020 	ldrb.w	r3, [r3, #32]
 800977a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800977c:	4313      	orrs	r3, r2
 800977e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009786:	2b01      	cmp	r3, #1
 8009788:	d106      	bne.n	8009798 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800978e:	3b01      	subs	r3, #1
 8009790:	045b      	lsls	r3, r3, #17
 8009792:	69ba      	ldr	r2, [r7, #24]
 8009794:	4313      	orrs	r3, r2
 8009796:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800979c:	2b00      	cmp	r3, #0
 800979e:	d009      	beq.n	80097b4 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097a4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ac:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80097ae:	69ba      	ldr	r2, [r7, #24]
 80097b0:	4313      	orrs	r3, r2
 80097b2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	68da      	ldr	r2, [r3, #12]
 80097ba:	4b42      	ldr	r3, [pc, #264]	@ (80098c4 <HAL_ADC_Init+0x280>)
 80097bc:	4013      	ands	r3, r2
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	6812      	ldr	r2, [r2, #0]
 80097c2:	69b9      	ldr	r1, [r7, #24]
 80097c4:	430b      	orrs	r3, r1
 80097c6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7ff ff26 	bl	800961e <LL_ADC_INJ_IsConversionOngoing>
 80097d2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d13d      	bne.n	8009856 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d13a      	bne.n	8009856 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80097e4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80097ec:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80097ee:	4313      	orrs	r3, r2
 80097f0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80097fc:	f023 0302 	bic.w	r3, r3, #2
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	6812      	ldr	r2, [r2, #0]
 8009804:	69b9      	ldr	r1, [r7, #24]
 8009806:	430b      	orrs	r3, r1
 8009808:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009810:	2b01      	cmp	r3, #1
 8009812:	d118      	bne.n	8009846 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	691b      	ldr	r3, [r3, #16]
 800981a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800981e:	f023 0304 	bic.w	r3, r3, #4
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800982a:	4311      	orrs	r1, r2
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8009830:	4311      	orrs	r1, r2
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009836:	430a      	orrs	r2, r1
 8009838:	431a      	orrs	r2, r3
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f042 0201 	orr.w	r2, r2, #1
 8009842:	611a      	str	r2, [r3, #16]
 8009844:	e007      	b.n	8009856 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	691a      	ldr	r2, [r3, #16]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f022 0201 	bic.w	r2, r2, #1
 8009854:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	691b      	ldr	r3, [r3, #16]
 800985a:	2b01      	cmp	r3, #1
 800985c:	d10c      	bne.n	8009878 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009864:	f023 010f 	bic.w	r1, r3, #15
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	69db      	ldr	r3, [r3, #28]
 800986c:	1e5a      	subs	r2, r3, #1
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	430a      	orrs	r2, r1
 8009874:	631a      	str	r2, [r3, #48]	@ 0x30
 8009876:	e007      	b.n	8009888 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f022 020f 	bic.w	r2, r2, #15
 8009886:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800988c:	f023 0303 	bic.w	r3, r3, #3
 8009890:	f043 0201 	orr.w	r2, r3, #1
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	655a      	str	r2, [r3, #84]	@ 0x54
 8009898:	e007      	b.n	80098aa <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800989e:	f043 0210 	orr.w	r2, r3, #16
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80098a6:	2301      	movs	r3, #1
 80098a8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80098aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3720      	adds	r7, #32
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}
 80098b4:	2000005c 	.word	0x2000005c
 80098b8:	053e2d63 	.word	0x053e2d63
 80098bc:	50040000 	.word	0x50040000
 80098c0:	50040300 	.word	0x50040300
 80098c4:	fff0c007 	.word	0xfff0c007

080098c8 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7ff fe8f 	bl	80095f8 <LL_ADC_REG_IsConversionOngoing>
 80098da:	4603      	mov	r3, r0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	f040 80a0 	bne.w	8009a22 <HAL_ADC_Start_IT+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d101      	bne.n	80098f0 <HAL_ADC_Start_IT+0x28>
 80098ec:	2302      	movs	r3, #2
 80098ee:	e09b      	b.n	8009a28 <HAL_ADC_Start_IT+0x160>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 fe51 	bl	800a5a0 <ADC_Enable>
 80098fe:	4603      	mov	r3, r0
 8009900:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8009902:	7bfb      	ldrb	r3, [r7, #15]
 8009904:	2b00      	cmp	r3, #0
 8009906:	f040 8087 	bne.w	8009a18 <HAL_ADC_Start_IT+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800990e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009912:	f023 0301 	bic.w	r3, r3, #1
 8009916:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009922:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009926:	2b00      	cmp	r3, #0
 8009928:	d006      	beq.n	8009938 <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800992e:	f023 0206 	bic.w	r2, r3, #6
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	659a      	str	r2, [r3, #88]	@ 0x58
 8009936:	e002      	b.n	800993e <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2200      	movs	r2, #0
 800993c:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	221c      	movs	r2, #28
 8009944:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2200      	movs	r2, #0
 800994a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	685a      	ldr	r2, [r3, #4]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f022 021c 	bic.w	r2, r2, #28
 800995c:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	695b      	ldr	r3, [r3, #20]
 8009962:	2b08      	cmp	r3, #8
 8009964:	d108      	bne.n	8009978 <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	685a      	ldr	r2, [r3, #4]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f042 0208 	orr.w	r2, r2, #8
 8009974:	605a      	str	r2, [r3, #4]
          break;
 8009976:	e008      	b.n	800998a <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	685a      	ldr	r2, [r3, #4]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f042 0204 	orr.w	r2, r2, #4
 8009986:	605a      	str	r2, [r3, #4]
          break;
 8009988:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800998e:	2b00      	cmp	r3, #0
 8009990:	d107      	bne.n	80099a2 <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	685a      	ldr	r2, [r3, #4]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f042 0210 	orr.w	r2, r2, #16
 80099a0:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d02d      	beq.n	8009a0c <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099b4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80099b8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	695b      	ldr	r3, [r3, #20]
 80099c4:	2b08      	cmp	r3, #8
 80099c6:	d110      	bne.n	80099ea <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	685a      	ldr	r2, [r3, #4]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f022 0220 	bic.w	r2, r2, #32
 80099d6:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	685a      	ldr	r2, [r3, #4]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80099e6:	605a      	str	r2, [r3, #4]
            break;
 80099e8:	e010      	b.n	8009a0c <HAL_ADC_Start_IT+0x144>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	685a      	ldr	r2, [r3, #4]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80099f8:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	685a      	ldr	r2, [r3, #4]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f042 0220 	orr.w	r2, r2, #32
 8009a08:	605a      	str	r2, [r3, #4]
            break;
 8009a0a:	bf00      	nop
        }
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4618      	mov	r0, r3
 8009a12:	f7ff fddd 	bl	80095d0 <LL_ADC_REG_StartConversion>
 8009a16:	e006      	b.n	8009a26 <HAL_ADC_Start_IT+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8009a20:	e001      	b.n	8009a26 <HAL_ADC_Start_IT+0x15e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009a22:	2302      	movs	r3, #2
 8009a24:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8009a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3710      	adds	r7, #16
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	370c      	adds	r7, #12
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr

08009a4a <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b088      	sub	sp, #32
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8009a52:	2300      	movs	r3, #0
 8009a54:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	f003 0302 	and.w	r3, r3, #2
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d017      	beq.n	8009aa0 <HAL_ADC_IRQHandler+0x56>
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	f003 0302 	and.w	r3, r3, #2
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d012      	beq.n	8009aa0 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a7e:	f003 0310 	and.w	r3, r3, #16
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d105      	bne.n	8009a92 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a8a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 ff1e 	bl	800a8d4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2202      	movs	r2, #2
 8009a9e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	f003 0304 	and.w	r3, r3, #4
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d004      	beq.n	8009ab4 <HAL_ADC_IRQHandler+0x6a>
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	f003 0304 	and.w	r3, r3, #4
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d109      	bne.n	8009ac8 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009ab4:	69bb      	ldr	r3, [r7, #24]
 8009ab6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d05e      	beq.n	8009b7c <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	f003 0308 	and.w	r3, r3, #8
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d059      	beq.n	8009b7c <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009acc:	f003 0310 	and.w	r3, r3, #16
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d105      	bne.n	8009ae0 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ad8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f7ff fc36 	bl	8009356 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d03e      	beq.n	8009b6e <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d135      	bne.n	8009b6e <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f003 0308 	and.w	r3, r3, #8
 8009b0c:	2b08      	cmp	r3, #8
 8009b0e:	d12e      	bne.n	8009b6e <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7ff fd6f 	bl	80095f8 <LL_ADC_REG_IsConversionOngoing>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d11a      	bne.n	8009b56 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	685a      	ldr	r2, [r3, #4]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f022 020c 	bic.w	r2, r2, #12
 8009b2e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d112      	bne.n	8009b6e <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b4c:	f043 0201 	orr.w	r2, r3, #1
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	655a      	str	r2, [r3, #84]	@ 0x54
 8009b54:	e00b      	b.n	8009b6e <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b5a:	f043 0210 	orr.w	r2, r3, #16
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b66:	f043 0201 	orr.w	r2, r3, #1
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f7fe f9ce 	bl	8007f10 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	220c      	movs	r2, #12
 8009b7a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8009b7c:	69bb      	ldr	r3, [r7, #24]
 8009b7e:	f003 0320 	and.w	r3, r3, #32
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d004      	beq.n	8009b90 <HAL_ADC_IRQHandler+0x146>
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	f003 0320 	and.w	r3, r3, #32
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d109      	bne.n	8009ba4 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d072      	beq.n	8009c80 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d06d      	beq.n	8009c80 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ba8:	f003 0310 	and.w	r3, r3, #16
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d105      	bne.n	8009bbc <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bb4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f7ff fc07 	bl	80093d4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8009bc6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7ff fbc2 	bl	8009356 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009bd2:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d047      	beq.n	8009c72 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d007      	beq.n	8009bfc <HAL_ADC_IRQHandler+0x1b2>
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d03f      	beq.n	8009c72 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d13a      	bne.n	8009c72 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c06:	2b40      	cmp	r3, #64	@ 0x40
 8009c08:	d133      	bne.n	8009c72 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d12e      	bne.n	8009c72 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7ff fd00 	bl	800961e <LL_ADC_INJ_IsConversionOngoing>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d11a      	bne.n	8009c5a <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	685a      	ldr	r2, [r3, #4]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8009c32:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c38:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d112      	bne.n	8009c72 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c50:	f043 0201 	orr.w	r2, r3, #1
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	655a      	str	r2, [r3, #84]	@ 0x54
 8009c58:	e00b      	b.n	8009c72 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c5e:	f043 0210 	orr.w	r2, r3, #16
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c6a:	f043 0201 	orr.w	r2, r3, #1
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 fe06 	bl	800a884 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2260      	movs	r2, #96	@ 0x60
 8009c7e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d011      	beq.n	8009cae <HAL_ADC_IRQHandler+0x264>
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d00c      	beq.n	8009cae <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c98:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 f886 	bl	8009db2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	2280      	movs	r2, #128	@ 0x80
 8009cac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8009cae:	69bb      	ldr	r3, [r7, #24]
 8009cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d012      	beq.n	8009cde <HAL_ADC_IRQHandler+0x294>
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d00d      	beq.n	8009cde <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cc6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 fdec 	bl	800a8ac <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009cdc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d012      	beq.n	8009d0e <HAL_ADC_IRQHandler+0x2c4>
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00d      	beq.n	8009d0e <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cf6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 fdde 	bl	800a8c0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009d0c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8009d0e:	69bb      	ldr	r3, [r7, #24]
 8009d10:	f003 0310 	and.w	r3, r3, #16
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d02a      	beq.n	8009d6e <HAL_ADC_IRQHandler+0x324>
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	f003 0310 	and.w	r3, r3, #16
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d025      	beq.n	8009d6e <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d102      	bne.n	8009d30 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	61fb      	str	r3, [r7, #28]
 8009d2e:	e008      	b.n	8009d42 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	f003 0301 	and.w	r3, r3, #1
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d001      	beq.n	8009d42 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8009d42:	69fb      	ldr	r3, [r7, #28]
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d10e      	bne.n	8009d66 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d4c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d58:	f043 0202 	orr.w	r2, r3, #2
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 f830 	bl	8009dc6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	2210      	movs	r2, #16
 8009d6c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8009d6e:	69bb      	ldr	r3, [r7, #24]
 8009d70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d018      	beq.n	8009daa <HAL_ADC_IRQHandler+0x360>
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d013      	beq.n	8009daa <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d86:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d92:	f043 0208 	orr.w	r2, r3, #8
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009da2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 fd77 	bl	800a898 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8009daa:	bf00      	nop
 8009dac:	3720      	adds	r7, #32
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8009db2:	b480      	push	{r7}
 8009db4:	b083      	sub	sp, #12
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8009dba:	bf00      	nop
 8009dbc:	370c      	adds	r7, #12
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr

08009dc6 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009dc6:	b480      	push	{r7}
 8009dc8:	b083      	sub	sp, #12
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8009dce:	bf00      	nop
 8009dd0:	370c      	adds	r7, #12
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr
	...

08009ddc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b0b6      	sub	sp, #216	@ 0xd8
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009de6:	2300      	movs	r3, #0
 8009de8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8009dec:	2300      	movs	r3, #0
 8009dee:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d101      	bne.n	8009dfe <HAL_ADC_ConfigChannel+0x22>
 8009dfa:	2302      	movs	r3, #2
 8009dfc:	e3bb      	b.n	800a576 <HAL_ADC_ConfigChannel+0x79a>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2201      	movs	r2, #1
 8009e02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7ff fbf4 	bl	80095f8 <LL_ADC_REG_IsConversionOngoing>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	f040 83a0 	bne.w	800a558 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	2b05      	cmp	r3, #5
 8009e26:	d824      	bhi.n	8009e72 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	3b02      	subs	r3, #2
 8009e2e:	2b03      	cmp	r3, #3
 8009e30:	d81b      	bhi.n	8009e6a <HAL_ADC_ConfigChannel+0x8e>
 8009e32:	a201      	add	r2, pc, #4	@ (adr r2, 8009e38 <HAL_ADC_ConfigChannel+0x5c>)
 8009e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e38:	08009e49 	.word	0x08009e49
 8009e3c:	08009e51 	.word	0x08009e51
 8009e40:	08009e59 	.word	0x08009e59
 8009e44:	08009e61 	.word	0x08009e61
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8009e48:	230c      	movs	r3, #12
 8009e4a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8009e4e:	e010      	b.n	8009e72 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8009e50:	2312      	movs	r3, #18
 8009e52:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8009e56:	e00c      	b.n	8009e72 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8009e58:	2318      	movs	r3, #24
 8009e5a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8009e5e:	e008      	b.n	8009e72 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8009e60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009e64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8009e68:	e003      	b.n	8009e72 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8009e6a:	2306      	movs	r3, #6
 8009e6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8009e70:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6818      	ldr	r0, [r3, #0]
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8009e80:	f7ff fa7c 	bl	800937c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f7ff fbb5 	bl	80095f8 <LL_ADC_REG_IsConversionOngoing>
 8009e8e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7ff fbc1 	bl	800961e <LL_ADC_INJ_IsConversionOngoing>
 8009e9c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009ea0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	f040 81a4 	bne.w	800a1f2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009eaa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	f040 819f 	bne.w	800a1f2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6818      	ldr	r0, [r3, #0]
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	6819      	ldr	r1, [r3, #0]
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	f7ff fa9a 	bl	80093fa <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	695a      	ldr	r2, [r3, #20]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	08db      	lsrs	r3, r3, #3
 8009ed2:	f003 0303 	and.w	r3, r3, #3
 8009ed6:	005b      	lsls	r3, r3, #1
 8009ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8009edc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	691b      	ldr	r3, [r3, #16]
 8009ee4:	2b04      	cmp	r3, #4
 8009ee6:	d00a      	beq.n	8009efe <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6818      	ldr	r0, [r3, #0]
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	6919      	ldr	r1, [r3, #16]
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009ef8:	f7ff f9d8 	bl	80092ac <LL_ADC_SetOffset>
 8009efc:	e179      	b.n	800a1f2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2100      	movs	r1, #0
 8009f04:	4618      	mov	r0, r3
 8009f06:	f7ff f9f5 	bl	80092f4 <LL_ADC_GetOffsetChannel>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d10a      	bne.n	8009f2a <HAL_ADC_ConfigChannel+0x14e>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	2100      	movs	r1, #0
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f7ff f9ea 	bl	80092f4 <LL_ADC_GetOffsetChannel>
 8009f20:	4603      	mov	r3, r0
 8009f22:	0e9b      	lsrs	r3, r3, #26
 8009f24:	f003 021f 	and.w	r2, r3, #31
 8009f28:	e01e      	b.n	8009f68 <HAL_ADC_ConfigChannel+0x18c>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	2100      	movs	r1, #0
 8009f30:	4618      	mov	r0, r3
 8009f32:	f7ff f9df 	bl	80092f4 <LL_ADC_GetOffsetChannel>
 8009f36:	4603      	mov	r3, r0
 8009f38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009f40:	fa93 f3a3 	rbit	r3, r3
 8009f44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8009f48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009f4c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8009f50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d101      	bne.n	8009f5c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8009f58:	2320      	movs	r3, #32
 8009f5a:	e004      	b.n	8009f66 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8009f5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009f60:	fab3 f383 	clz	r3, r3
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d105      	bne.n	8009f80 <HAL_ADC_ConfigChannel+0x1a4>
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	0e9b      	lsrs	r3, r3, #26
 8009f7a:	f003 031f 	and.w	r3, r3, #31
 8009f7e:	e018      	b.n	8009fb2 <HAL_ADC_ConfigChannel+0x1d6>
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f8c:	fa93 f3a3 	rbit	r3, r3
 8009f90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8009f94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009f98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8009f9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d101      	bne.n	8009fa8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8009fa4:	2320      	movs	r3, #32
 8009fa6:	e004      	b.n	8009fb2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8009fa8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009fac:	fab3 f383 	clz	r3, r3
 8009fb0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d106      	bne.n	8009fc4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7ff f9ae 	bl	8009320 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	2101      	movs	r1, #1
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7ff f992 	bl	80092f4 <LL_ADC_GetOffsetChannel>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d10a      	bne.n	8009ff0 <HAL_ADC_ConfigChannel+0x214>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	2101      	movs	r1, #1
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7ff f987 	bl	80092f4 <LL_ADC_GetOffsetChannel>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	0e9b      	lsrs	r3, r3, #26
 8009fea:	f003 021f 	and.w	r2, r3, #31
 8009fee:	e01e      	b.n	800a02e <HAL_ADC_ConfigChannel+0x252>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2101      	movs	r1, #1
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f7ff f97c 	bl	80092f4 <LL_ADC_GetOffsetChannel>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a002:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a006:	fa93 f3a3 	rbit	r3, r3
 800a00a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800a00e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a012:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800a016:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d101      	bne.n	800a022 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800a01e:	2320      	movs	r3, #32
 800a020:	e004      	b.n	800a02c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800a022:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a026:	fab3 f383 	clz	r3, r3
 800a02a:	b2db      	uxtb	r3, r3
 800a02c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a036:	2b00      	cmp	r3, #0
 800a038:	d105      	bne.n	800a046 <HAL_ADC_ConfigChannel+0x26a>
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	0e9b      	lsrs	r3, r3, #26
 800a040:	f003 031f 	and.w	r3, r3, #31
 800a044:	e018      	b.n	800a078 <HAL_ADC_ConfigChannel+0x29c>
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a04e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a052:	fa93 f3a3 	rbit	r3, r3
 800a056:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800a05a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a05e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800a062:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a066:	2b00      	cmp	r3, #0
 800a068:	d101      	bne.n	800a06e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800a06a:	2320      	movs	r3, #32
 800a06c:	e004      	b.n	800a078 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800a06e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a072:	fab3 f383 	clz	r3, r3
 800a076:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800a078:	429a      	cmp	r2, r3
 800a07a:	d106      	bne.n	800a08a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2200      	movs	r2, #0
 800a082:	2101      	movs	r1, #1
 800a084:	4618      	mov	r0, r3
 800a086:	f7ff f94b 	bl	8009320 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2102      	movs	r1, #2
 800a090:	4618      	mov	r0, r3
 800a092:	f7ff f92f 	bl	80092f4 <LL_ADC_GetOffsetChannel>
 800a096:	4603      	mov	r3, r0
 800a098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d10a      	bne.n	800a0b6 <HAL_ADC_ConfigChannel+0x2da>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	2102      	movs	r1, #2
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7ff f924 	bl	80092f4 <LL_ADC_GetOffsetChannel>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	0e9b      	lsrs	r3, r3, #26
 800a0b0:	f003 021f 	and.w	r2, r3, #31
 800a0b4:	e01e      	b.n	800a0f4 <HAL_ADC_ConfigChannel+0x318>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	2102      	movs	r1, #2
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7ff f919 	bl	80092f4 <LL_ADC_GetOffsetChannel>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a0cc:	fa93 f3a3 	rbit	r3, r3
 800a0d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800a0d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a0d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800a0dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d101      	bne.n	800a0e8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800a0e4:	2320      	movs	r3, #32
 800a0e6:	e004      	b.n	800a0f2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800a0e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a0ec:	fab3 f383 	clz	r3, r3
 800a0f0:	b2db      	uxtb	r3, r3
 800a0f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d105      	bne.n	800a10c <HAL_ADC_ConfigChannel+0x330>
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	0e9b      	lsrs	r3, r3, #26
 800a106:	f003 031f 	and.w	r3, r3, #31
 800a10a:	e014      	b.n	800a136 <HAL_ADC_ConfigChannel+0x35a>
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a112:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a114:	fa93 f3a3 	rbit	r3, r3
 800a118:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800a11a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a11c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800a120:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a124:	2b00      	cmp	r3, #0
 800a126:	d101      	bne.n	800a12c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800a128:	2320      	movs	r3, #32
 800a12a:	e004      	b.n	800a136 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800a12c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a130:	fab3 f383 	clz	r3, r3
 800a134:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800a136:	429a      	cmp	r2, r3
 800a138:	d106      	bne.n	800a148 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	2200      	movs	r2, #0
 800a140:	2102      	movs	r1, #2
 800a142:	4618      	mov	r0, r3
 800a144:	f7ff f8ec 	bl	8009320 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	2103      	movs	r1, #3
 800a14e:	4618      	mov	r0, r3
 800a150:	f7ff f8d0 	bl	80092f4 <LL_ADC_GetOffsetChannel>
 800a154:	4603      	mov	r3, r0
 800a156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d10a      	bne.n	800a174 <HAL_ADC_ConfigChannel+0x398>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	2103      	movs	r1, #3
 800a164:	4618      	mov	r0, r3
 800a166:	f7ff f8c5 	bl	80092f4 <LL_ADC_GetOffsetChannel>
 800a16a:	4603      	mov	r3, r0
 800a16c:	0e9b      	lsrs	r3, r3, #26
 800a16e:	f003 021f 	and.w	r2, r3, #31
 800a172:	e017      	b.n	800a1a4 <HAL_ADC_ConfigChannel+0x3c8>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	2103      	movs	r1, #3
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7ff f8ba 	bl	80092f4 <LL_ADC_GetOffsetChannel>
 800a180:	4603      	mov	r3, r0
 800a182:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a184:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a186:	fa93 f3a3 	rbit	r3, r3
 800a18a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800a18c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a18e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800a190:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a192:	2b00      	cmp	r3, #0
 800a194:	d101      	bne.n	800a19a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800a196:	2320      	movs	r3, #32
 800a198:	e003      	b.n	800a1a2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800a19a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a19c:	fab3 f383 	clz	r3, r3
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d105      	bne.n	800a1bc <HAL_ADC_ConfigChannel+0x3e0>
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	0e9b      	lsrs	r3, r3, #26
 800a1b6:	f003 031f 	and.w	r3, r3, #31
 800a1ba:	e011      	b.n	800a1e0 <HAL_ADC_ConfigChannel+0x404>
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a1c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a1c4:	fa93 f3a3 	rbit	r3, r3
 800a1c8:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800a1ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a1cc:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800a1ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d101      	bne.n	800a1d8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800a1d4:	2320      	movs	r3, #32
 800a1d6:	e003      	b.n	800a1e0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800a1d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a1da:	fab3 f383 	clz	r3, r3
 800a1de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d106      	bne.n	800a1f2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	2103      	movs	r1, #3
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f7ff f897 	bl	8009320 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7ff f9c4 	bl	8009584 <LL_ADC_IsEnabled>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	f040 8140 	bne.w	800a484 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6818      	ldr	r0, [r3, #0]
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	6819      	ldr	r1, [r3, #0]
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	461a      	mov	r2, r3
 800a212:	f7ff f91d 	bl	8009450 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	4a8f      	ldr	r2, [pc, #572]	@ (800a458 <HAL_ADC_ConfigChannel+0x67c>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	f040 8131 	bne.w	800a484 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d10b      	bne.n	800a24a <HAL_ADC_ConfigChannel+0x46e>
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	0e9b      	lsrs	r3, r3, #26
 800a238:	3301      	adds	r3, #1
 800a23a:	f003 031f 	and.w	r3, r3, #31
 800a23e:	2b09      	cmp	r3, #9
 800a240:	bf94      	ite	ls
 800a242:	2301      	movls	r3, #1
 800a244:	2300      	movhi	r3, #0
 800a246:	b2db      	uxtb	r3, r3
 800a248:	e019      	b.n	800a27e <HAL_ADC_ConfigChannel+0x4a2>
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a250:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a252:	fa93 f3a3 	rbit	r3, r3
 800a256:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800a258:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a25a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800a25c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d101      	bne.n	800a266 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800a262:	2320      	movs	r3, #32
 800a264:	e003      	b.n	800a26e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800a266:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a268:	fab3 f383 	clz	r3, r3
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	3301      	adds	r3, #1
 800a270:	f003 031f 	and.w	r3, r3, #31
 800a274:	2b09      	cmp	r3, #9
 800a276:	bf94      	ite	ls
 800a278:	2301      	movls	r3, #1
 800a27a:	2300      	movhi	r3, #0
 800a27c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d079      	beq.n	800a376 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d107      	bne.n	800a29e <HAL_ADC_ConfigChannel+0x4c2>
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	0e9b      	lsrs	r3, r3, #26
 800a294:	3301      	adds	r3, #1
 800a296:	069b      	lsls	r3, r3, #26
 800a298:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a29c:	e015      	b.n	800a2ca <HAL_ADC_ConfigChannel+0x4ee>
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a2a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2a6:	fa93 f3a3 	rbit	r3, r3
 800a2aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800a2ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a2ae:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800a2b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d101      	bne.n	800a2ba <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800a2b6:	2320      	movs	r3, #32
 800a2b8:	e003      	b.n	800a2c2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800a2ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2bc:	fab3 f383 	clz	r3, r3
 800a2c0:	b2db      	uxtb	r3, r3
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	069b      	lsls	r3, r3, #26
 800a2c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d109      	bne.n	800a2ea <HAL_ADC_ConfigChannel+0x50e>
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	0e9b      	lsrs	r3, r3, #26
 800a2dc:	3301      	adds	r3, #1
 800a2de:	f003 031f 	and.w	r3, r3, #31
 800a2e2:	2101      	movs	r1, #1
 800a2e4:	fa01 f303 	lsl.w	r3, r1, r3
 800a2e8:	e017      	b.n	800a31a <HAL_ADC_ConfigChannel+0x53e>
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a2f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2f2:	fa93 f3a3 	rbit	r3, r3
 800a2f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800a2f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2fa:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800a2fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d101      	bne.n	800a306 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800a302:	2320      	movs	r3, #32
 800a304:	e003      	b.n	800a30e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800a306:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a308:	fab3 f383 	clz	r3, r3
 800a30c:	b2db      	uxtb	r3, r3
 800a30e:	3301      	adds	r3, #1
 800a310:	f003 031f 	and.w	r3, r3, #31
 800a314:	2101      	movs	r1, #1
 800a316:	fa01 f303 	lsl.w	r3, r1, r3
 800a31a:	ea42 0103 	orr.w	r1, r2, r3
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a326:	2b00      	cmp	r3, #0
 800a328:	d10a      	bne.n	800a340 <HAL_ADC_ConfigChannel+0x564>
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	0e9b      	lsrs	r3, r3, #26
 800a330:	3301      	adds	r3, #1
 800a332:	f003 021f 	and.w	r2, r3, #31
 800a336:	4613      	mov	r3, r2
 800a338:	005b      	lsls	r3, r3, #1
 800a33a:	4413      	add	r3, r2
 800a33c:	051b      	lsls	r3, r3, #20
 800a33e:	e018      	b.n	800a372 <HAL_ADC_ConfigChannel+0x596>
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a348:	fa93 f3a3 	rbit	r3, r3
 800a34c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800a34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a350:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800a352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a354:	2b00      	cmp	r3, #0
 800a356:	d101      	bne.n	800a35c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800a358:	2320      	movs	r3, #32
 800a35a:	e003      	b.n	800a364 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800a35c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a35e:	fab3 f383 	clz	r3, r3
 800a362:	b2db      	uxtb	r3, r3
 800a364:	3301      	adds	r3, #1
 800a366:	f003 021f 	and.w	r2, r3, #31
 800a36a:	4613      	mov	r3, r2
 800a36c:	005b      	lsls	r3, r3, #1
 800a36e:	4413      	add	r3, r2
 800a370:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a372:	430b      	orrs	r3, r1
 800a374:	e081      	b.n	800a47a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d107      	bne.n	800a392 <HAL_ADC_ConfigChannel+0x5b6>
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	0e9b      	lsrs	r3, r3, #26
 800a388:	3301      	adds	r3, #1
 800a38a:	069b      	lsls	r3, r3, #26
 800a38c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a390:	e015      	b.n	800a3be <HAL_ADC_ConfigChannel+0x5e2>
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a39a:	fa93 f3a3 	rbit	r3, r3
 800a39e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800a3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800a3a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d101      	bne.n	800a3ae <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800a3aa:	2320      	movs	r3, #32
 800a3ac:	e003      	b.n	800a3b6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800a3ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3b0:	fab3 f383 	clz	r3, r3
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	069b      	lsls	r3, r3, #26
 800a3ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d109      	bne.n	800a3de <HAL_ADC_ConfigChannel+0x602>
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	0e9b      	lsrs	r3, r3, #26
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	f003 031f 	and.w	r3, r3, #31
 800a3d6:	2101      	movs	r1, #1
 800a3d8:	fa01 f303 	lsl.w	r3, r1, r3
 800a3dc:	e017      	b.n	800a40e <HAL_ADC_ConfigChannel+0x632>
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3e4:	69fb      	ldr	r3, [r7, #28]
 800a3e6:	fa93 f3a3 	rbit	r3, r3
 800a3ea:	61bb      	str	r3, [r7, #24]
  return result;
 800a3ec:	69bb      	ldr	r3, [r7, #24]
 800a3ee:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800a3f0:	6a3b      	ldr	r3, [r7, #32]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d101      	bne.n	800a3fa <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800a3f6:	2320      	movs	r3, #32
 800a3f8:	e003      	b.n	800a402 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800a3fa:	6a3b      	ldr	r3, [r7, #32]
 800a3fc:	fab3 f383 	clz	r3, r3
 800a400:	b2db      	uxtb	r3, r3
 800a402:	3301      	adds	r3, #1
 800a404:	f003 031f 	and.w	r3, r3, #31
 800a408:	2101      	movs	r1, #1
 800a40a:	fa01 f303 	lsl.w	r3, r1, r3
 800a40e:	ea42 0103 	orr.w	r1, r2, r3
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d10d      	bne.n	800a43a <HAL_ADC_ConfigChannel+0x65e>
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	0e9b      	lsrs	r3, r3, #26
 800a424:	3301      	adds	r3, #1
 800a426:	f003 021f 	and.w	r2, r3, #31
 800a42a:	4613      	mov	r3, r2
 800a42c:	005b      	lsls	r3, r3, #1
 800a42e:	4413      	add	r3, r2
 800a430:	3b1e      	subs	r3, #30
 800a432:	051b      	lsls	r3, r3, #20
 800a434:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a438:	e01e      	b.n	800a478 <HAL_ADC_ConfigChannel+0x69c>
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	fa93 f3a3 	rbit	r3, r3
 800a446:	60fb      	str	r3, [r7, #12]
  return result;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d104      	bne.n	800a45c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800a452:	2320      	movs	r3, #32
 800a454:	e006      	b.n	800a464 <HAL_ADC_ConfigChannel+0x688>
 800a456:	bf00      	nop
 800a458:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	fab3 f383 	clz	r3, r3
 800a462:	b2db      	uxtb	r3, r3
 800a464:	3301      	adds	r3, #1
 800a466:	f003 021f 	and.w	r2, r3, #31
 800a46a:	4613      	mov	r3, r2
 800a46c:	005b      	lsls	r3, r3, #1
 800a46e:	4413      	add	r3, r2
 800a470:	3b1e      	subs	r3, #30
 800a472:	051b      	lsls	r3, r3, #20
 800a474:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a478:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800a47a:	683a      	ldr	r2, [r7, #0]
 800a47c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a47e:	4619      	mov	r1, r3
 800a480:	f7fe ffbb 	bl	80093fa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	4b3d      	ldr	r3, [pc, #244]	@ (800a580 <HAL_ADC_ConfigChannel+0x7a4>)
 800a48a:	4013      	ands	r3, r2
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d06c      	beq.n	800a56a <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a490:	483c      	ldr	r0, [pc, #240]	@ (800a584 <HAL_ADC_ConfigChannel+0x7a8>)
 800a492:	f7fe fefd 	bl	8009290 <LL_ADC_GetCommonPathInternalCh>
 800a496:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4a3a      	ldr	r2, [pc, #232]	@ (800a588 <HAL_ADC_ConfigChannel+0x7ac>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d127      	bne.n	800a4f4 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800a4a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a4a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d121      	bne.n	800a4f4 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a35      	ldr	r2, [pc, #212]	@ (800a58c <HAL_ADC_ConfigChannel+0x7b0>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d157      	bne.n	800a56a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a4ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a4be:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	482f      	ldr	r0, [pc, #188]	@ (800a584 <HAL_ADC_ConfigChannel+0x7a8>)
 800a4c6:	f7fe fed0 	bl	800926a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a4ca:	4b31      	ldr	r3, [pc, #196]	@ (800a590 <HAL_ADC_ConfigChannel+0x7b4>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	099b      	lsrs	r3, r3, #6
 800a4d0:	4a30      	ldr	r2, [pc, #192]	@ (800a594 <HAL_ADC_ConfigChannel+0x7b8>)
 800a4d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a4d6:	099b      	lsrs	r3, r3, #6
 800a4d8:	1c5a      	adds	r2, r3, #1
 800a4da:	4613      	mov	r3, r2
 800a4dc:	005b      	lsls	r3, r3, #1
 800a4de:	4413      	add	r3, r2
 800a4e0:	009b      	lsls	r3, r3, #2
 800a4e2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800a4e4:	e002      	b.n	800a4ec <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	3b01      	subs	r3, #1
 800a4ea:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d1f9      	bne.n	800a4e6 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a4f2:	e03a      	b.n	800a56a <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a27      	ldr	r2, [pc, #156]	@ (800a598 <HAL_ADC_ConfigChannel+0x7bc>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d113      	bne.n	800a526 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800a4fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a502:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a506:	2b00      	cmp	r3, #0
 800a508:	d10d      	bne.n	800a526 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4a1f      	ldr	r2, [pc, #124]	@ (800a58c <HAL_ADC_ConfigChannel+0x7b0>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d12a      	bne.n	800a56a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a514:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a518:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a51c:	4619      	mov	r1, r3
 800a51e:	4819      	ldr	r0, [pc, #100]	@ (800a584 <HAL_ADC_ConfigChannel+0x7a8>)
 800a520:	f7fe fea3 	bl	800926a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a524:	e021      	b.n	800a56a <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a1c      	ldr	r2, [pc, #112]	@ (800a59c <HAL_ADC_ConfigChannel+0x7c0>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d11c      	bne.n	800a56a <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800a530:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a534:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d116      	bne.n	800a56a <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a12      	ldr	r2, [pc, #72]	@ (800a58c <HAL_ADC_ConfigChannel+0x7b0>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d111      	bne.n	800a56a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a546:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a54a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a54e:	4619      	mov	r1, r3
 800a550:	480c      	ldr	r0, [pc, #48]	@ (800a584 <HAL_ADC_ConfigChannel+0x7a8>)
 800a552:	f7fe fe8a 	bl	800926a <LL_ADC_SetCommonPathInternalCh>
 800a556:	e008      	b.n	800a56a <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a55c:	f043 0220 	orr.w	r2, r3, #32
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800a564:	2301      	movs	r3, #1
 800a566:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2200      	movs	r2, #0
 800a56e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800a572:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800a576:	4618      	mov	r0, r3
 800a578:	37d8      	adds	r7, #216	@ 0xd8
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
 800a57e:	bf00      	nop
 800a580:	80080000 	.word	0x80080000
 800a584:	50040300 	.word	0x50040300
 800a588:	c7520000 	.word	0xc7520000
 800a58c:	50040000 	.word	0x50040000
 800a590:	2000005c 	.word	0x2000005c
 800a594:	053e2d63 	.word	0x053e2d63
 800a598:	cb840000 	.word	0xcb840000
 800a59c:	80000001 	.word	0x80000001

0800a5a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7fe ffe7 	bl	8009584 <LL_ADC_IsEnabled>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d169      	bne.n	800a690 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	689a      	ldr	r2, [r3, #8]
 800a5c2:	4b36      	ldr	r3, [pc, #216]	@ (800a69c <ADC_Enable+0xfc>)
 800a5c4:	4013      	ands	r3, r2
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00d      	beq.n	800a5e6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5ce:	f043 0210 	orr.w	r2, r3, #16
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5da:	f043 0201 	orr.w	r2, r3, #1
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e055      	b.n	800a692 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7fe ffa2 	bl	8009534 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800a5f0:	482b      	ldr	r0, [pc, #172]	@ (800a6a0 <ADC_Enable+0x100>)
 800a5f2:	f7fe fe4d 	bl	8009290 <LL_ADC_GetCommonPathInternalCh>
 800a5f6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800a5f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d013      	beq.n	800a628 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a600:	4b28      	ldr	r3, [pc, #160]	@ (800a6a4 <ADC_Enable+0x104>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	099b      	lsrs	r3, r3, #6
 800a606:	4a28      	ldr	r2, [pc, #160]	@ (800a6a8 <ADC_Enable+0x108>)
 800a608:	fba2 2303 	umull	r2, r3, r2, r3
 800a60c:	099b      	lsrs	r3, r3, #6
 800a60e:	1c5a      	adds	r2, r3, #1
 800a610:	4613      	mov	r3, r2
 800a612:	005b      	lsls	r3, r3, #1
 800a614:	4413      	add	r3, r2
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800a61a:	e002      	b.n	800a622 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	3b01      	subs	r3, #1
 800a620:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d1f9      	bne.n	800a61c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800a628:	f7fe fddc 	bl	80091e4 <HAL_GetTick>
 800a62c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a62e:	e028      	b.n	800a682 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4618      	mov	r0, r3
 800a636:	f7fe ffa5 	bl	8009584 <LL_ADC_IsEnabled>
 800a63a:	4603      	mov	r3, r0
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d104      	bne.n	800a64a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4618      	mov	r0, r3
 800a646:	f7fe ff75 	bl	8009534 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a64a:	f7fe fdcb 	bl	80091e4 <HAL_GetTick>
 800a64e:	4602      	mov	r2, r0
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	1ad3      	subs	r3, r2, r3
 800a654:	2b02      	cmp	r3, #2
 800a656:	d914      	bls.n	800a682 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f003 0301 	and.w	r3, r3, #1
 800a662:	2b01      	cmp	r3, #1
 800a664:	d00d      	beq.n	800a682 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a66a:	f043 0210 	orr.w	r2, r3, #16
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a676:	f043 0201 	orr.w	r2, r3, #1
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800a67e:	2301      	movs	r3, #1
 800a680:	e007      	b.n	800a692 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f003 0301 	and.w	r3, r3, #1
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	d1cf      	bne.n	800a630 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a690:	2300      	movs	r3, #0
}
 800a692:	4618      	mov	r0, r3
 800a694:	3710      	adds	r7, #16
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop
 800a69c:	8000003f 	.word	0x8000003f
 800a6a0:	50040300 	.word	0x50040300
 800a6a4:	2000005c 	.word	0x2000005c
 800a6a8:	053e2d63 	.word	0x053e2d63

0800a6ac <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f7fe ff76 	bl	80095aa <LL_ADC_IsDisableOngoing>
 800a6be:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f7fe ff5d 	bl	8009584 <LL_ADC_IsEnabled>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d047      	beq.n	800a760 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d144      	bne.n	800a760 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	689b      	ldr	r3, [r3, #8]
 800a6dc:	f003 030d 	and.w	r3, r3, #13
 800a6e0:	2b01      	cmp	r3, #1
 800a6e2:	d10c      	bne.n	800a6fe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f7fe ff37 	bl	800955c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	2203      	movs	r2, #3
 800a6f4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800a6f6:	f7fe fd75 	bl	80091e4 <HAL_GetTick>
 800a6fa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a6fc:	e029      	b.n	800a752 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a702:	f043 0210 	orr.w	r2, r3, #16
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a70e:	f043 0201 	orr.w	r2, r3, #1
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800a716:	2301      	movs	r3, #1
 800a718:	e023      	b.n	800a762 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800a71a:	f7fe fd63 	bl	80091e4 <HAL_GetTick>
 800a71e:	4602      	mov	r2, r0
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	1ad3      	subs	r3, r2, r3
 800a724:	2b02      	cmp	r3, #2
 800a726:	d914      	bls.n	800a752 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	689b      	ldr	r3, [r3, #8]
 800a72e:	f003 0301 	and.w	r3, r3, #1
 800a732:	2b00      	cmp	r3, #0
 800a734:	d00d      	beq.n	800a752 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a73a:	f043 0210 	orr.w	r2, r3, #16
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a746:	f043 0201 	orr.w	r2, r3, #1
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800a74e:	2301      	movs	r3, #1
 800a750:	e007      	b.n	800a762 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	f003 0301 	and.w	r3, r3, #1
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d1dc      	bne.n	800a71a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a760:	2300      	movs	r3, #0
}
 800a762:	4618      	mov	r0, r3
 800a764:	3710      	adds	r7, #16
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <LL_ADC_StartCalibration>:
{
 800a76a:	b480      	push	{r7}
 800a76c:	b083      	sub	sp, #12
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
 800a772:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	689b      	ldr	r3, [r3, #8]
 800a778:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800a77c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a780:	683a      	ldr	r2, [r7, #0]
 800a782:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800a786:	4313      	orrs	r3, r2
 800a788:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	609a      	str	r2, [r3, #8]
}
 800a790:	bf00      	nop
 800a792:	370c      	adds	r7, #12
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr

0800a79c <LL_ADC_IsCalibrationOnGoing>:
{
 800a79c:	b480      	push	{r7}
 800a79e:	b083      	sub	sp, #12
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a7ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a7b0:	d101      	bne.n	800a7b6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	e000      	b.n	800a7b8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800a7b6:	2300      	movs	r3, #0
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	370c      	adds	r7, #12
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr

0800a7c4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d101      	bne.n	800a7e0 <HAL_ADCEx_Calibration_Start+0x1c>
 800a7dc:	2302      	movs	r3, #2
 800a7de:	e04d      	b.n	800a87c <HAL_ADCEx_Calibration_Start+0xb8>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f7ff ff5f 	bl	800a6ac <ADC_Disable>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800a7f2:	7bfb      	ldrb	r3, [r7, #15]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d136      	bne.n	800a866 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7fc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800a800:	f023 0302 	bic.w	r3, r3, #2
 800a804:	f043 0202 	orr.w	r2, r3, #2
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	6839      	ldr	r1, [r7, #0]
 800a812:	4618      	mov	r0, r3
 800a814:	f7ff ffa9 	bl	800a76a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800a818:	e014      	b.n	800a844 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	3301      	adds	r3, #1
 800a81e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 800a826:	d30d      	bcc.n	800a844 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a82c:	f023 0312 	bic.w	r3, r3, #18
 800a830:	f043 0210 	orr.w	r2, r3, #16
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 800a840:	2301      	movs	r3, #1
 800a842:	e01b      	b.n	800a87c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4618      	mov	r0, r3
 800a84a:	f7ff ffa7 	bl	800a79c <LL_ADC_IsCalibrationOnGoing>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d1e2      	bne.n	800a81a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a858:	f023 0303 	bic.w	r3, r3, #3
 800a85c:	f043 0201 	orr.w	r2, r3, #1
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	655a      	str	r2, [r3, #84]	@ 0x54
 800a864:	e005      	b.n	800a872 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a86a:	f043 0210 	orr.w	r2, r3, #16
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2200      	movs	r2, #0
 800a876:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800a87a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3710      	adds	r7, #16
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800a88c:	bf00      	nop
 800a88e:	370c      	adds	r7, #12
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800a8a0:	bf00      	nop
 800a8a2:	370c      	adds	r7, #12
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr

0800a8ac <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800a8b4:	bf00      	nop
 800a8b6:	370c      	adds	r7, #12
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800a8c8:	bf00      	nop
 800a8ca:	370c      	adds	r7, #12
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr

0800a8d4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b083      	sub	sp, #12
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800a8dc:	bf00      	nop
 800a8de:	370c      	adds	r7, #12
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr

0800a8e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b085      	sub	sp, #20
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f003 0307 	and.w	r3, r3, #7
 800a8f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a8f8:	4b0c      	ldr	r3, [pc, #48]	@ (800a92c <__NVIC_SetPriorityGrouping+0x44>)
 800a8fa:	68db      	ldr	r3, [r3, #12]
 800a8fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a8fe:	68ba      	ldr	r2, [r7, #8]
 800a900:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a904:	4013      	ands	r3, r2
 800a906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a910:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a914:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a91a:	4a04      	ldr	r2, [pc, #16]	@ (800a92c <__NVIC_SetPriorityGrouping+0x44>)
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	60d3      	str	r3, [r2, #12]
}
 800a920:	bf00      	nop
 800a922:	3714      	adds	r7, #20
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr
 800a92c:	e000ed00 	.word	0xe000ed00

0800a930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a930:	b480      	push	{r7}
 800a932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a934:	4b04      	ldr	r3, [pc, #16]	@ (800a948 <__NVIC_GetPriorityGrouping+0x18>)
 800a936:	68db      	ldr	r3, [r3, #12]
 800a938:	0a1b      	lsrs	r3, r3, #8
 800a93a:	f003 0307 	and.w	r3, r3, #7
}
 800a93e:	4618      	mov	r0, r3
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr
 800a948:	e000ed00 	.word	0xe000ed00

0800a94c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b083      	sub	sp, #12
 800a950:	af00      	add	r7, sp, #0
 800a952:	4603      	mov	r3, r0
 800a954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	db0b      	blt.n	800a976 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a95e:	79fb      	ldrb	r3, [r7, #7]
 800a960:	f003 021f 	and.w	r2, r3, #31
 800a964:	4907      	ldr	r1, [pc, #28]	@ (800a984 <__NVIC_EnableIRQ+0x38>)
 800a966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a96a:	095b      	lsrs	r3, r3, #5
 800a96c:	2001      	movs	r0, #1
 800a96e:	fa00 f202 	lsl.w	r2, r0, r2
 800a972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800a976:	bf00      	nop
 800a978:	370c      	adds	r7, #12
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr
 800a982:	bf00      	nop
 800a984:	e000e100 	.word	0xe000e100

0800a988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a988:	b480      	push	{r7}
 800a98a:	b083      	sub	sp, #12
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	4603      	mov	r3, r0
 800a990:	6039      	str	r1, [r7, #0]
 800a992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	db0a      	blt.n	800a9b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	b2da      	uxtb	r2, r3
 800a9a0:	490c      	ldr	r1, [pc, #48]	@ (800a9d4 <__NVIC_SetPriority+0x4c>)
 800a9a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a9a6:	0112      	lsls	r2, r2, #4
 800a9a8:	b2d2      	uxtb	r2, r2
 800a9aa:	440b      	add	r3, r1
 800a9ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a9b0:	e00a      	b.n	800a9c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	b2da      	uxtb	r2, r3
 800a9b6:	4908      	ldr	r1, [pc, #32]	@ (800a9d8 <__NVIC_SetPriority+0x50>)
 800a9b8:	79fb      	ldrb	r3, [r7, #7]
 800a9ba:	f003 030f 	and.w	r3, r3, #15
 800a9be:	3b04      	subs	r3, #4
 800a9c0:	0112      	lsls	r2, r2, #4
 800a9c2:	b2d2      	uxtb	r2, r2
 800a9c4:	440b      	add	r3, r1
 800a9c6:	761a      	strb	r2, [r3, #24]
}
 800a9c8:	bf00      	nop
 800a9ca:	370c      	adds	r7, #12
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr
 800a9d4:	e000e100 	.word	0xe000e100
 800a9d8:	e000ed00 	.word	0xe000ed00

0800a9dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b089      	sub	sp, #36	@ 0x24
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	60b9      	str	r1, [r7, #8]
 800a9e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f003 0307 	and.w	r3, r3, #7
 800a9ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a9f0:	69fb      	ldr	r3, [r7, #28]
 800a9f2:	f1c3 0307 	rsb	r3, r3, #7
 800a9f6:	2b04      	cmp	r3, #4
 800a9f8:	bf28      	it	cs
 800a9fa:	2304      	movcs	r3, #4
 800a9fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a9fe:	69fb      	ldr	r3, [r7, #28]
 800aa00:	3304      	adds	r3, #4
 800aa02:	2b06      	cmp	r3, #6
 800aa04:	d902      	bls.n	800aa0c <NVIC_EncodePriority+0x30>
 800aa06:	69fb      	ldr	r3, [r7, #28]
 800aa08:	3b03      	subs	r3, #3
 800aa0a:	e000      	b.n	800aa0e <NVIC_EncodePriority+0x32>
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800aa10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aa14:	69bb      	ldr	r3, [r7, #24]
 800aa16:	fa02 f303 	lsl.w	r3, r2, r3
 800aa1a:	43da      	mvns	r2, r3
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	401a      	ands	r2, r3
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800aa24:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	fa01 f303 	lsl.w	r3, r1, r3
 800aa2e:	43d9      	mvns	r1, r3
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800aa34:	4313      	orrs	r3, r2
         );
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3724      	adds	r7, #36	@ 0x24
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr
	...

0800aa44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	3b01      	subs	r3, #1
 800aa50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aa54:	d301      	bcc.n	800aa5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800aa56:	2301      	movs	r3, #1
 800aa58:	e00f      	b.n	800aa7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800aa5a:	4a0a      	ldr	r2, [pc, #40]	@ (800aa84 <SysTick_Config+0x40>)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	3b01      	subs	r3, #1
 800aa60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800aa62:	210f      	movs	r1, #15
 800aa64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa68:	f7ff ff8e 	bl	800a988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800aa6c:	4b05      	ldr	r3, [pc, #20]	@ (800aa84 <SysTick_Config+0x40>)
 800aa6e:	2200      	movs	r2, #0
 800aa70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800aa72:	4b04      	ldr	r3, [pc, #16]	@ (800aa84 <SysTick_Config+0x40>)
 800aa74:	2207      	movs	r2, #7
 800aa76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800aa78:	2300      	movs	r3, #0
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3708      	adds	r7, #8
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	bf00      	nop
 800aa84:	e000e010 	.word	0xe000e010

0800aa88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f7ff ff29 	bl	800a8e8 <__NVIC_SetPriorityGrouping>
}
 800aa96:	bf00      	nop
 800aa98:	3708      	adds	r7, #8
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800aa9e:	b580      	push	{r7, lr}
 800aaa0:	b086      	sub	sp, #24
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	60b9      	str	r1, [r7, #8]
 800aaa8:	607a      	str	r2, [r7, #4]
 800aaaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800aaac:	2300      	movs	r3, #0
 800aaae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800aab0:	f7ff ff3e 	bl	800a930 <__NVIC_GetPriorityGrouping>
 800aab4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	68b9      	ldr	r1, [r7, #8]
 800aaba:	6978      	ldr	r0, [r7, #20]
 800aabc:	f7ff ff8e 	bl	800a9dc <NVIC_EncodePriority>
 800aac0:	4602      	mov	r2, r0
 800aac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aac6:	4611      	mov	r1, r2
 800aac8:	4618      	mov	r0, r3
 800aaca:	f7ff ff5d 	bl	800a988 <__NVIC_SetPriority>
}
 800aace:	bf00      	nop
 800aad0:	3718      	adds	r7, #24
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b082      	sub	sp, #8
 800aada:	af00      	add	r7, sp, #0
 800aadc:	4603      	mov	r3, r0
 800aade:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800aae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aae4:	4618      	mov	r0, r3
 800aae6:	f7ff ff31 	bl	800a94c <__NVIC_EnableIRQ>
}
 800aaea:	bf00      	nop
 800aaec:	3708      	adds	r7, #8
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b082      	sub	sp, #8
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f7ff ffa2 	bl	800aa44 <SysTick_Config>
 800ab00:	4603      	mov	r3, r0
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3708      	adds	r7, #8
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
	...

0800ab0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b087      	sub	sp, #28
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800ab16:	2300      	movs	r3, #0
 800ab18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ab1a:	e148      	b.n	800adae <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	681a      	ldr	r2, [r3, #0]
 800ab20:	2101      	movs	r1, #1
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	fa01 f303 	lsl.w	r3, r1, r3
 800ab28:	4013      	ands	r3, r2
 800ab2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	f000 813a 	beq.w	800ada8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	f003 0303 	and.w	r3, r3, #3
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d005      	beq.n	800ab4c <HAL_GPIO_Init+0x40>
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	f003 0303 	and.w	r3, r3, #3
 800ab48:	2b02      	cmp	r3, #2
 800ab4a:	d130      	bne.n	800abae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	689b      	ldr	r3, [r3, #8]
 800ab50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	005b      	lsls	r3, r3, #1
 800ab56:	2203      	movs	r2, #3
 800ab58:	fa02 f303 	lsl.w	r3, r2, r3
 800ab5c:	43db      	mvns	r3, r3
 800ab5e:	693a      	ldr	r2, [r7, #16]
 800ab60:	4013      	ands	r3, r2
 800ab62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	68da      	ldr	r2, [r3, #12]
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	005b      	lsls	r3, r3, #1
 800ab6c:	fa02 f303 	lsl.w	r3, r2, r3
 800ab70:	693a      	ldr	r2, [r7, #16]
 800ab72:	4313      	orrs	r3, r2
 800ab74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	693a      	ldr	r2, [r7, #16]
 800ab7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ab82:	2201      	movs	r2, #1
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	fa02 f303 	lsl.w	r3, r2, r3
 800ab8a:	43db      	mvns	r3, r3
 800ab8c:	693a      	ldr	r2, [r7, #16]
 800ab8e:	4013      	ands	r3, r2
 800ab90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	091b      	lsrs	r3, r3, #4
 800ab98:	f003 0201 	and.w	r2, r3, #1
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	fa02 f303 	lsl.w	r3, r2, r3
 800aba2:	693a      	ldr	r2, [r7, #16]
 800aba4:	4313      	orrs	r3, r2
 800aba6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	693a      	ldr	r2, [r7, #16]
 800abac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	f003 0303 	and.w	r3, r3, #3
 800abb6:	2b03      	cmp	r3, #3
 800abb8:	d017      	beq.n	800abea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	005b      	lsls	r3, r3, #1
 800abc4:	2203      	movs	r2, #3
 800abc6:	fa02 f303 	lsl.w	r3, r2, r3
 800abca:	43db      	mvns	r3, r3
 800abcc:	693a      	ldr	r2, [r7, #16]
 800abce:	4013      	ands	r3, r2
 800abd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	689a      	ldr	r2, [r3, #8]
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	005b      	lsls	r3, r3, #1
 800abda:	fa02 f303 	lsl.w	r3, r2, r3
 800abde:	693a      	ldr	r2, [r7, #16]
 800abe0:	4313      	orrs	r3, r2
 800abe2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	693a      	ldr	r2, [r7, #16]
 800abe8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	f003 0303 	and.w	r3, r3, #3
 800abf2:	2b02      	cmp	r3, #2
 800abf4:	d123      	bne.n	800ac3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	08da      	lsrs	r2, r3, #3
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	3208      	adds	r2, #8
 800abfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	f003 0307 	and.w	r3, r3, #7
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	220f      	movs	r2, #15
 800ac0e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac12:	43db      	mvns	r3, r3
 800ac14:	693a      	ldr	r2, [r7, #16]
 800ac16:	4013      	ands	r3, r2
 800ac18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	691a      	ldr	r2, [r3, #16]
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	f003 0307 	and.w	r3, r3, #7
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	fa02 f303 	lsl.w	r3, r2, r3
 800ac2a:	693a      	ldr	r2, [r7, #16]
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	08da      	lsrs	r2, r3, #3
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	3208      	adds	r2, #8
 800ac38:	6939      	ldr	r1, [r7, #16]
 800ac3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	005b      	lsls	r3, r3, #1
 800ac48:	2203      	movs	r2, #3
 800ac4a:	fa02 f303 	lsl.w	r3, r2, r3
 800ac4e:	43db      	mvns	r3, r3
 800ac50:	693a      	ldr	r2, [r7, #16]
 800ac52:	4013      	ands	r3, r2
 800ac54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	f003 0203 	and.w	r2, r3, #3
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	005b      	lsls	r3, r3, #1
 800ac62:	fa02 f303 	lsl.w	r3, r2, r3
 800ac66:	693a      	ldr	r2, [r7, #16]
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	693a      	ldr	r2, [r7, #16]
 800ac70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	f000 8094 	beq.w	800ada8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ac80:	4b52      	ldr	r3, [pc, #328]	@ (800adcc <HAL_GPIO_Init+0x2c0>)
 800ac82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac84:	4a51      	ldr	r2, [pc, #324]	@ (800adcc <HAL_GPIO_Init+0x2c0>)
 800ac86:	f043 0301 	orr.w	r3, r3, #1
 800ac8a:	6613      	str	r3, [r2, #96]	@ 0x60
 800ac8c:	4b4f      	ldr	r3, [pc, #316]	@ (800adcc <HAL_GPIO_Init+0x2c0>)
 800ac8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac90:	f003 0301 	and.w	r3, r3, #1
 800ac94:	60bb      	str	r3, [r7, #8]
 800ac96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800ac98:	4a4d      	ldr	r2, [pc, #308]	@ (800add0 <HAL_GPIO_Init+0x2c4>)
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	089b      	lsrs	r3, r3, #2
 800ac9e:	3302      	adds	r3, #2
 800aca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aca4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	f003 0303 	and.w	r3, r3, #3
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	220f      	movs	r2, #15
 800acb0:	fa02 f303 	lsl.w	r3, r2, r3
 800acb4:	43db      	mvns	r3, r3
 800acb6:	693a      	ldr	r2, [r7, #16]
 800acb8:	4013      	ands	r3, r2
 800acba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800acc2:	d00d      	beq.n	800ace0 <HAL_GPIO_Init+0x1d4>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	4a43      	ldr	r2, [pc, #268]	@ (800add4 <HAL_GPIO_Init+0x2c8>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d007      	beq.n	800acdc <HAL_GPIO_Init+0x1d0>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	4a42      	ldr	r2, [pc, #264]	@ (800add8 <HAL_GPIO_Init+0x2cc>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d101      	bne.n	800acd8 <HAL_GPIO_Init+0x1cc>
 800acd4:	2302      	movs	r3, #2
 800acd6:	e004      	b.n	800ace2 <HAL_GPIO_Init+0x1d6>
 800acd8:	2307      	movs	r3, #7
 800acda:	e002      	b.n	800ace2 <HAL_GPIO_Init+0x1d6>
 800acdc:	2301      	movs	r3, #1
 800acde:	e000      	b.n	800ace2 <HAL_GPIO_Init+0x1d6>
 800ace0:	2300      	movs	r3, #0
 800ace2:	697a      	ldr	r2, [r7, #20]
 800ace4:	f002 0203 	and.w	r2, r2, #3
 800ace8:	0092      	lsls	r2, r2, #2
 800acea:	4093      	lsls	r3, r2
 800acec:	693a      	ldr	r2, [r7, #16]
 800acee:	4313      	orrs	r3, r2
 800acf0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800acf2:	4937      	ldr	r1, [pc, #220]	@ (800add0 <HAL_GPIO_Init+0x2c4>)
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	089b      	lsrs	r3, r3, #2
 800acf8:	3302      	adds	r3, #2
 800acfa:	693a      	ldr	r2, [r7, #16]
 800acfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ad00:	4b36      	ldr	r3, [pc, #216]	@ (800addc <HAL_GPIO_Init+0x2d0>)
 800ad02:	689b      	ldr	r3, [r3, #8]
 800ad04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	43db      	mvns	r3, r3
 800ad0a:	693a      	ldr	r2, [r7, #16]
 800ad0c:	4013      	ands	r3, r2
 800ad0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d003      	beq.n	800ad24 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800ad1c:	693a      	ldr	r2, [r7, #16]
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	4313      	orrs	r3, r2
 800ad22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800ad24:	4a2d      	ldr	r2, [pc, #180]	@ (800addc <HAL_GPIO_Init+0x2d0>)
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800ad2a:	4b2c      	ldr	r3, [pc, #176]	@ (800addc <HAL_GPIO_Init+0x2d0>)
 800ad2c:	68db      	ldr	r3, [r3, #12]
 800ad2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	43db      	mvns	r3, r3
 800ad34:	693a      	ldr	r2, [r7, #16]
 800ad36:	4013      	ands	r3, r2
 800ad38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	685b      	ldr	r3, [r3, #4]
 800ad3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d003      	beq.n	800ad4e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800ad46:	693a      	ldr	r2, [r7, #16]
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800ad4e:	4a23      	ldr	r2, [pc, #140]	@ (800addc <HAL_GPIO_Init+0x2d0>)
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800ad54:	4b21      	ldr	r3, [pc, #132]	@ (800addc <HAL_GPIO_Init+0x2d0>)
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	43db      	mvns	r3, r3
 800ad5e:	693a      	ldr	r2, [r7, #16]
 800ad60:	4013      	ands	r3, r2
 800ad62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d003      	beq.n	800ad78 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800ad70:	693a      	ldr	r2, [r7, #16]
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	4313      	orrs	r3, r2
 800ad76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800ad78:	4a18      	ldr	r2, [pc, #96]	@ (800addc <HAL_GPIO_Init+0x2d0>)
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800ad7e:	4b17      	ldr	r3, [pc, #92]	@ (800addc <HAL_GPIO_Init+0x2d0>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	43db      	mvns	r3, r3
 800ad88:	693a      	ldr	r2, [r7, #16]
 800ad8a:	4013      	ands	r3, r2
 800ad8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d003      	beq.n	800ada2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800ad9a:	693a      	ldr	r2, [r7, #16]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800ada2:	4a0e      	ldr	r2, [pc, #56]	@ (800addc <HAL_GPIO_Init+0x2d0>)
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	3301      	adds	r3, #1
 800adac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	fa22 f303 	lsr.w	r3, r2, r3
 800adb8:	2b00      	cmp	r3, #0
 800adba:	f47f aeaf 	bne.w	800ab1c <HAL_GPIO_Init+0x10>
  }
}
 800adbe:	bf00      	nop
 800adc0:	bf00      	nop
 800adc2:	371c      	adds	r7, #28
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr
 800adcc:	40021000 	.word	0x40021000
 800add0:	40010000 	.word	0x40010000
 800add4:	48000400 	.word	0x48000400
 800add8:	48000800 	.word	0x48000800
 800addc:	40010400 	.word	0x40010400

0800ade0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b083      	sub	sp, #12
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	460b      	mov	r3, r1
 800adea:	807b      	strh	r3, [r7, #2]
 800adec:	4613      	mov	r3, r2
 800adee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800adf0:	787b      	ldrb	r3, [r7, #1]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d003      	beq.n	800adfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800adf6:	887a      	ldrh	r2, [r7, #2]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800adfc:	e002      	b.n	800ae04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800adfe:	887a      	ldrh	r2, [r7, #2]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800ae04:	bf00      	nop
 800ae06:	370c      	adds	r7, #12
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	4603      	mov	r3, r0
 800ae18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800ae1a:	4b08      	ldr	r3, [pc, #32]	@ (800ae3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ae1c:	695a      	ldr	r2, [r3, #20]
 800ae1e:	88fb      	ldrh	r3, [r7, #6]
 800ae20:	4013      	ands	r3, r2
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d006      	beq.n	800ae34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ae26:	4a05      	ldr	r2, [pc, #20]	@ (800ae3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ae28:	88fb      	ldrh	r3, [r7, #6]
 800ae2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ae2c:	88fb      	ldrh	r3, [r7, #6]
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7f9 fb9c 	bl	800456c <HAL_GPIO_EXTI_Callback>
  }
}
 800ae34:	bf00      	nop
 800ae36:	3708      	adds	r7, #8
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}
 800ae3c:	40010400 	.word	0x40010400

0800ae40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d101      	bne.n	800ae52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	e08d      	b.n	800af6e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ae58:	b2db      	uxtb	r3, r3
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d106      	bne.n	800ae6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2200      	movs	r2, #0
 800ae62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f7f9 fcf6 	bl	8004858 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2224      	movs	r2, #36	@ 0x24
 800ae70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f022 0201 	bic.w	r2, r2, #1
 800ae82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	685a      	ldr	r2, [r3, #4]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800ae90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	689a      	ldr	r2, [r3, #8]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800aea0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	68db      	ldr	r3, [r3, #12]
 800aea6:	2b01      	cmp	r3, #1
 800aea8:	d107      	bne.n	800aeba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	689a      	ldr	r2, [r3, #8]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800aeb6:	609a      	str	r2, [r3, #8]
 800aeb8:	e006      	b.n	800aec8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	689a      	ldr	r2, [r3, #8]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800aec6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	68db      	ldr	r3, [r3, #12]
 800aecc:	2b02      	cmp	r3, #2
 800aece:	d108      	bne.n	800aee2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	685a      	ldr	r2, [r3, #4]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aede:	605a      	str	r2, [r3, #4]
 800aee0:	e007      	b.n	800aef2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	685a      	ldr	r2, [r3, #4]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800aef0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	687a      	ldr	r2, [r7, #4]
 800aefa:	6812      	ldr	r2, [r2, #0]
 800aefc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800af00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af04:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	68da      	ldr	r2, [r3, #12]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800af14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	691a      	ldr	r2, [r3, #16]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	695b      	ldr	r3, [r3, #20]
 800af1e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	699b      	ldr	r3, [r3, #24]
 800af26:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	430a      	orrs	r2, r1
 800af2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	69d9      	ldr	r1, [r3, #28]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6a1a      	ldr	r2, [r3, #32]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	430a      	orrs	r2, r1
 800af3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	681a      	ldr	r2, [r3, #0]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f042 0201 	orr.w	r2, r2, #1
 800af4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2220      	movs	r2, #32
 800af5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2200      	movs	r2, #0
 800af62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2200      	movs	r2, #0
 800af68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800af6c:	2300      	movs	r3, #0
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3708      	adds	r7, #8
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
	...

0800af78 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b088      	sub	sp, #32
 800af7c:	af02      	add	r7, sp, #8
 800af7e:	60f8      	str	r0, [r7, #12]
 800af80:	4608      	mov	r0, r1
 800af82:	4611      	mov	r1, r2
 800af84:	461a      	mov	r2, r3
 800af86:	4603      	mov	r3, r0
 800af88:	817b      	strh	r3, [r7, #10]
 800af8a:	460b      	mov	r3, r1
 800af8c:	813b      	strh	r3, [r7, #8]
 800af8e:	4613      	mov	r3, r2
 800af90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800af98:	b2db      	uxtb	r3, r3
 800af9a:	2b20      	cmp	r3, #32
 800af9c:	f040 80f9 	bne.w	800b192 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800afa0:	6a3b      	ldr	r3, [r7, #32]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d002      	beq.n	800afac <HAL_I2C_Mem_Write+0x34>
 800afa6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d105      	bne.n	800afb8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800afb2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800afb4:	2301      	movs	r3, #1
 800afb6:	e0ed      	b.n	800b194 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d101      	bne.n	800afc6 <HAL_I2C_Mem_Write+0x4e>
 800afc2:	2302      	movs	r3, #2
 800afc4:	e0e6      	b.n	800b194 <HAL_I2C_Mem_Write+0x21c>
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2201      	movs	r2, #1
 800afca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800afce:	f7fe f909 	bl	80091e4 <HAL_GetTick>
 800afd2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	9300      	str	r3, [sp, #0]
 800afd8:	2319      	movs	r3, #25
 800afda:	2201      	movs	r2, #1
 800afdc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800afe0:	68f8      	ldr	r0, [r7, #12]
 800afe2:	f000 fbaf 	bl	800b744 <I2C_WaitOnFlagUntilTimeout>
 800afe6:	4603      	mov	r3, r0
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d001      	beq.n	800aff0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800afec:	2301      	movs	r3, #1
 800afee:	e0d1      	b.n	800b194 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2221      	movs	r2, #33	@ 0x21
 800aff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2240      	movs	r2, #64	@ 0x40
 800affc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2200      	movs	r2, #0
 800b004:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	6a3a      	ldr	r2, [r7, #32]
 800b00a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b010:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2200      	movs	r2, #0
 800b016:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b018:	88f8      	ldrh	r0, [r7, #6]
 800b01a:	893a      	ldrh	r2, [r7, #8]
 800b01c:	8979      	ldrh	r1, [r7, #10]
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	9301      	str	r3, [sp, #4]
 800b022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b024:	9300      	str	r3, [sp, #0]
 800b026:	4603      	mov	r3, r0
 800b028:	68f8      	ldr	r0, [r7, #12]
 800b02a:	f000 fabf 	bl	800b5ac <I2C_RequestMemoryWrite>
 800b02e:	4603      	mov	r3, r0
 800b030:	2b00      	cmp	r3, #0
 800b032:	d005      	beq.n	800b040 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	2200      	movs	r2, #0
 800b038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800b03c:	2301      	movs	r3, #1
 800b03e:	e0a9      	b.n	800b194 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b044:	b29b      	uxth	r3, r3
 800b046:	2bff      	cmp	r3, #255	@ 0xff
 800b048:	d90e      	bls.n	800b068 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	22ff      	movs	r2, #255	@ 0xff
 800b04e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b054:	b2da      	uxtb	r2, r3
 800b056:	8979      	ldrh	r1, [r7, #10]
 800b058:	2300      	movs	r3, #0
 800b05a:	9300      	str	r3, [sp, #0]
 800b05c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b060:	68f8      	ldr	r0, [r7, #12]
 800b062:	f000 fd33 	bl	800bacc <I2C_TransferConfig>
 800b066:	e00f      	b.n	800b088 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b06c:	b29a      	uxth	r2, r3
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b076:	b2da      	uxtb	r2, r3
 800b078:	8979      	ldrh	r1, [r7, #10]
 800b07a:	2300      	movs	r3, #0
 800b07c:	9300      	str	r3, [sp, #0]
 800b07e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b082:	68f8      	ldr	r0, [r7, #12]
 800b084:	f000 fd22 	bl	800bacc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b088:	697a      	ldr	r2, [r7, #20]
 800b08a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b08c:	68f8      	ldr	r0, [r7, #12]
 800b08e:	f000 fbb2 	bl	800b7f6 <I2C_WaitOnTXISFlagUntilTimeout>
 800b092:	4603      	mov	r3, r0
 800b094:	2b00      	cmp	r3, #0
 800b096:	d001      	beq.n	800b09c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800b098:	2301      	movs	r3, #1
 800b09a:	e07b      	b.n	800b194 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0a0:	781a      	ldrb	r2, [r3, #0]
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0ac:	1c5a      	adds	r2, r3, #1
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	3b01      	subs	r3, #1
 800b0ba:	b29a      	uxth	r2, r3
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b0c4:	3b01      	subs	r3, #1
 800b0c6:	b29a      	uxth	r2, r3
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d034      	beq.n	800b140 <HAL_I2C_Mem_Write+0x1c8>
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d130      	bne.n	800b140 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	9300      	str	r3, [sp, #0]
 800b0e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	2180      	movs	r1, #128	@ 0x80
 800b0e8:	68f8      	ldr	r0, [r7, #12]
 800b0ea:	f000 fb2b 	bl	800b744 <I2C_WaitOnFlagUntilTimeout>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d001      	beq.n	800b0f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	e04d      	b.n	800b194 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	2bff      	cmp	r3, #255	@ 0xff
 800b100:	d90e      	bls.n	800b120 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	22ff      	movs	r2, #255	@ 0xff
 800b106:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b10c:	b2da      	uxtb	r2, r3
 800b10e:	8979      	ldrh	r1, [r7, #10]
 800b110:	2300      	movs	r3, #0
 800b112:	9300      	str	r3, [sp, #0]
 800b114:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b118:	68f8      	ldr	r0, [r7, #12]
 800b11a:	f000 fcd7 	bl	800bacc <I2C_TransferConfig>
 800b11e:	e00f      	b.n	800b140 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b124:	b29a      	uxth	r2, r3
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b12e:	b2da      	uxtb	r2, r3
 800b130:	8979      	ldrh	r1, [r7, #10]
 800b132:	2300      	movs	r3, #0
 800b134:	9300      	str	r3, [sp, #0]
 800b136:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b13a:	68f8      	ldr	r0, [r7, #12]
 800b13c:	f000 fcc6 	bl	800bacc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b144:	b29b      	uxth	r3, r3
 800b146:	2b00      	cmp	r3, #0
 800b148:	d19e      	bne.n	800b088 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b14a:	697a      	ldr	r2, [r7, #20]
 800b14c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b14e:	68f8      	ldr	r0, [r7, #12]
 800b150:	f000 fb98 	bl	800b884 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b154:	4603      	mov	r3, r0
 800b156:	2b00      	cmp	r3, #0
 800b158:	d001      	beq.n	800b15e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800b15a:	2301      	movs	r3, #1
 800b15c:	e01a      	b.n	800b194 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	2220      	movs	r2, #32
 800b164:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	6859      	ldr	r1, [r3, #4]
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681a      	ldr	r2, [r3, #0]
 800b170:	4b0a      	ldr	r3, [pc, #40]	@ (800b19c <HAL_I2C_Mem_Write+0x224>)
 800b172:	400b      	ands	r3, r1
 800b174:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	2220      	movs	r2, #32
 800b17a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2200      	movs	r2, #0
 800b182:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2200      	movs	r2, #0
 800b18a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b18e:	2300      	movs	r3, #0
 800b190:	e000      	b.n	800b194 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800b192:	2302      	movs	r3, #2
  }
}
 800b194:	4618      	mov	r0, r3
 800b196:	3718      	adds	r7, #24
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}
 800b19c:	fe00e800 	.word	0xfe00e800

0800b1a0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b088      	sub	sp, #32
 800b1a4:	af02      	add	r7, sp, #8
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	4608      	mov	r0, r1
 800b1aa:	4611      	mov	r1, r2
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	817b      	strh	r3, [r7, #10]
 800b1b2:	460b      	mov	r3, r1
 800b1b4:	813b      	strh	r3, [r7, #8]
 800b1b6:	4613      	mov	r3, r2
 800b1b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	2b20      	cmp	r3, #32
 800b1c4:	f040 80fd 	bne.w	800b3c2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800b1c8:	6a3b      	ldr	r3, [r7, #32]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d002      	beq.n	800b1d4 <HAL_I2C_Mem_Read+0x34>
 800b1ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d105      	bne.n	800b1e0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b1da:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	e0f1      	b.n	800b3c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b1e6:	2b01      	cmp	r3, #1
 800b1e8:	d101      	bne.n	800b1ee <HAL_I2C_Mem_Read+0x4e>
 800b1ea:	2302      	movs	r3, #2
 800b1ec:	e0ea      	b.n	800b3c4 <HAL_I2C_Mem_Read+0x224>
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	2201      	movs	r2, #1
 800b1f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b1f6:	f7fd fff5 	bl	80091e4 <HAL_GetTick>
 800b1fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	9300      	str	r3, [sp, #0]
 800b200:	2319      	movs	r3, #25
 800b202:	2201      	movs	r2, #1
 800b204:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b208:	68f8      	ldr	r0, [r7, #12]
 800b20a:	f000 fa9b 	bl	800b744 <I2C_WaitOnFlagUntilTimeout>
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d001      	beq.n	800b218 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800b214:	2301      	movs	r3, #1
 800b216:	e0d5      	b.n	800b3c4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2222      	movs	r2, #34	@ 0x22
 800b21c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2240      	movs	r2, #64	@ 0x40
 800b224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2200      	movs	r2, #0
 800b22c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	6a3a      	ldr	r2, [r7, #32]
 800b232:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b238:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2200      	movs	r2, #0
 800b23e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b240:	88f8      	ldrh	r0, [r7, #6]
 800b242:	893a      	ldrh	r2, [r7, #8]
 800b244:	8979      	ldrh	r1, [r7, #10]
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	9301      	str	r3, [sp, #4]
 800b24a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b24c:	9300      	str	r3, [sp, #0]
 800b24e:	4603      	mov	r3, r0
 800b250:	68f8      	ldr	r0, [r7, #12]
 800b252:	f000 f9ff 	bl	800b654 <I2C_RequestMemoryRead>
 800b256:	4603      	mov	r3, r0
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d005      	beq.n	800b268 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2200      	movs	r2, #0
 800b260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800b264:	2301      	movs	r3, #1
 800b266:	e0ad      	b.n	800b3c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	2bff      	cmp	r3, #255	@ 0xff
 800b270:	d90e      	bls.n	800b290 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2201      	movs	r2, #1
 800b276:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b27c:	b2da      	uxtb	r2, r3
 800b27e:	8979      	ldrh	r1, [r7, #10]
 800b280:	4b52      	ldr	r3, [pc, #328]	@ (800b3cc <HAL_I2C_Mem_Read+0x22c>)
 800b282:	9300      	str	r3, [sp, #0]
 800b284:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b288:	68f8      	ldr	r0, [r7, #12]
 800b28a:	f000 fc1f 	bl	800bacc <I2C_TransferConfig>
 800b28e:	e00f      	b.n	800b2b0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b294:	b29a      	uxth	r2, r3
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b29e:	b2da      	uxtb	r2, r3
 800b2a0:	8979      	ldrh	r1, [r7, #10]
 800b2a2:	4b4a      	ldr	r3, [pc, #296]	@ (800b3cc <HAL_I2C_Mem_Read+0x22c>)
 800b2a4:	9300      	str	r3, [sp, #0]
 800b2a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b2aa:	68f8      	ldr	r0, [r7, #12]
 800b2ac:	f000 fc0e 	bl	800bacc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	9300      	str	r3, [sp, #0]
 800b2b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	2104      	movs	r1, #4
 800b2ba:	68f8      	ldr	r0, [r7, #12]
 800b2bc:	f000 fa42 	bl	800b744 <I2C_WaitOnFlagUntilTimeout>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d001      	beq.n	800b2ca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	e07c      	b.n	800b3c4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2d4:	b2d2      	uxtb	r2, r2
 800b2d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2dc:	1c5a      	adds	r2, r3, #1
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b2e6:	3b01      	subs	r3, #1
 800b2e8:	b29a      	uxth	r2, r3
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2f2:	b29b      	uxth	r3, r3
 800b2f4:	3b01      	subs	r3, #1
 800b2f6:	b29a      	uxth	r2, r3
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b300:	b29b      	uxth	r3, r3
 800b302:	2b00      	cmp	r3, #0
 800b304:	d034      	beq.n	800b370 <HAL_I2C_Mem_Read+0x1d0>
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d130      	bne.n	800b370 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	9300      	str	r3, [sp, #0]
 800b312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b314:	2200      	movs	r2, #0
 800b316:	2180      	movs	r1, #128	@ 0x80
 800b318:	68f8      	ldr	r0, [r7, #12]
 800b31a:	f000 fa13 	bl	800b744 <I2C_WaitOnFlagUntilTimeout>
 800b31e:	4603      	mov	r3, r0
 800b320:	2b00      	cmp	r3, #0
 800b322:	d001      	beq.n	800b328 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800b324:	2301      	movs	r3, #1
 800b326:	e04d      	b.n	800b3c4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b32c:	b29b      	uxth	r3, r3
 800b32e:	2bff      	cmp	r3, #255	@ 0xff
 800b330:	d90e      	bls.n	800b350 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	2201      	movs	r2, #1
 800b336:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b33c:	b2da      	uxtb	r2, r3
 800b33e:	8979      	ldrh	r1, [r7, #10]
 800b340:	2300      	movs	r3, #0
 800b342:	9300      	str	r3, [sp, #0]
 800b344:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b348:	68f8      	ldr	r0, [r7, #12]
 800b34a:	f000 fbbf 	bl	800bacc <I2C_TransferConfig>
 800b34e:	e00f      	b.n	800b370 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b354:	b29a      	uxth	r2, r3
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b35e:	b2da      	uxtb	r2, r3
 800b360:	8979      	ldrh	r1, [r7, #10]
 800b362:	2300      	movs	r3, #0
 800b364:	9300      	str	r3, [sp, #0]
 800b366:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b36a:	68f8      	ldr	r0, [r7, #12]
 800b36c:	f000 fbae 	bl	800bacc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b374:	b29b      	uxth	r3, r3
 800b376:	2b00      	cmp	r3, #0
 800b378:	d19a      	bne.n	800b2b0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b37a:	697a      	ldr	r2, [r7, #20]
 800b37c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b37e:	68f8      	ldr	r0, [r7, #12]
 800b380:	f000 fa80 	bl	800b884 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b384:	4603      	mov	r3, r0
 800b386:	2b00      	cmp	r3, #0
 800b388:	d001      	beq.n	800b38e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800b38a:	2301      	movs	r3, #1
 800b38c:	e01a      	b.n	800b3c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	2220      	movs	r2, #32
 800b394:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	6859      	ldr	r1, [r3, #4]
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681a      	ldr	r2, [r3, #0]
 800b3a0:	4b0b      	ldr	r3, [pc, #44]	@ (800b3d0 <HAL_I2C_Mem_Read+0x230>)
 800b3a2:	400b      	ands	r3, r1
 800b3a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2220      	movs	r2, #32
 800b3aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	e000      	b.n	800b3c4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800b3c2:	2302      	movs	r3, #2
  }
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3718      	adds	r7, #24
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}
 800b3cc:	80002400 	.word	0x80002400
 800b3d0:	fe00e800 	.word	0xfe00e800

0800b3d4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b08a      	sub	sp, #40	@ 0x28
 800b3d8:	af02      	add	r7, sp, #8
 800b3da:	60f8      	str	r0, [r7, #12]
 800b3dc:	607a      	str	r2, [r7, #4]
 800b3de:	603b      	str	r3, [r7, #0]
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b3ee:	b2db      	uxtb	r3, r3
 800b3f0:	2b20      	cmp	r3, #32
 800b3f2:	f040 80d6 	bne.w	800b5a2 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	699b      	ldr	r3, [r3, #24]
 800b3fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b400:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b404:	d101      	bne.n	800b40a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800b406:	2302      	movs	r3, #2
 800b408:	e0cc      	b.n	800b5a4 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b410:	2b01      	cmp	r3, #1
 800b412:	d101      	bne.n	800b418 <HAL_I2C_IsDeviceReady+0x44>
 800b414:	2302      	movs	r3, #2
 800b416:	e0c5      	b.n	800b5a4 <HAL_I2C_IsDeviceReady+0x1d0>
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2201      	movs	r2, #1
 800b41c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	2224      	movs	r2, #36	@ 0x24
 800b424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2200      	movs	r2, #0
 800b42c:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	68db      	ldr	r3, [r3, #12]
 800b432:	2b01      	cmp	r3, #1
 800b434:	d107      	bne.n	800b446 <HAL_I2C_IsDeviceReady+0x72>
 800b436:	897b      	ldrh	r3, [r7, #10]
 800b438:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b43c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b440:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800b444:	e006      	b.n	800b454 <HAL_I2C_IsDeviceReady+0x80>
 800b446:	897b      	ldrh	r3, [r7, #10]
 800b448:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b44c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b450:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 800b454:	68fa      	ldr	r2, [r7, #12]
 800b456:	6812      	ldr	r2, [r2, #0]
 800b458:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800b45a:	f7fd fec3 	bl	80091e4 <HAL_GetTick>
 800b45e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	699b      	ldr	r3, [r3, #24]
 800b466:	f003 0320 	and.w	r3, r3, #32
 800b46a:	2b20      	cmp	r3, #32
 800b46c:	bf0c      	ite	eq
 800b46e:	2301      	moveq	r3, #1
 800b470:	2300      	movne	r3, #0
 800b472:	b2db      	uxtb	r3, r3
 800b474:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	699b      	ldr	r3, [r3, #24]
 800b47c:	f003 0310 	and.w	r3, r3, #16
 800b480:	2b10      	cmp	r3, #16
 800b482:	bf0c      	ite	eq
 800b484:	2301      	moveq	r3, #1
 800b486:	2300      	movne	r3, #0
 800b488:	b2db      	uxtb	r3, r3
 800b48a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800b48c:	e034      	b.n	800b4f8 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b494:	d01a      	beq.n	800b4cc <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b496:	f7fd fea5 	bl	80091e4 <HAL_GetTick>
 800b49a:	4602      	mov	r2, r0
 800b49c:	69bb      	ldr	r3, [r7, #24]
 800b49e:	1ad3      	subs	r3, r2, r3
 800b4a0:	683a      	ldr	r2, [r7, #0]
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d302      	bcc.n	800b4ac <HAL_I2C_IsDeviceReady+0xd8>
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d10f      	bne.n	800b4cc <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	2220      	movs	r2, #32
 800b4b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4b8:	f043 0220 	orr.w	r2, r3, #32
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	e06b      	b.n	800b5a4 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	699b      	ldr	r3, [r3, #24]
 800b4d2:	f003 0320 	and.w	r3, r3, #32
 800b4d6:	2b20      	cmp	r3, #32
 800b4d8:	bf0c      	ite	eq
 800b4da:	2301      	moveq	r3, #1
 800b4dc:	2300      	movne	r3, #0
 800b4de:	b2db      	uxtb	r3, r3
 800b4e0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	699b      	ldr	r3, [r3, #24]
 800b4e8:	f003 0310 	and.w	r3, r3, #16
 800b4ec:	2b10      	cmp	r3, #16
 800b4ee:	bf0c      	ite	eq
 800b4f0:	2301      	moveq	r3, #1
 800b4f2:	2300      	movne	r3, #0
 800b4f4:	b2db      	uxtb	r3, r3
 800b4f6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800b4f8:	7ffb      	ldrb	r3, [r7, #31]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d102      	bne.n	800b504 <HAL_I2C_IsDeviceReady+0x130>
 800b4fe:	7fbb      	ldrb	r3, [r7, #30]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d0c4      	beq.n	800b48e <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	699b      	ldr	r3, [r3, #24]
 800b50a:	f003 0310 	and.w	r3, r3, #16
 800b50e:	2b10      	cmp	r3, #16
 800b510:	d01a      	beq.n	800b548 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800b512:	69bb      	ldr	r3, [r7, #24]
 800b514:	9300      	str	r3, [sp, #0]
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	2200      	movs	r2, #0
 800b51a:	2120      	movs	r1, #32
 800b51c:	68f8      	ldr	r0, [r7, #12]
 800b51e:	f000 f911 	bl	800b744 <I2C_WaitOnFlagUntilTimeout>
 800b522:	4603      	mov	r3, r0
 800b524:	2b00      	cmp	r3, #0
 800b526:	d001      	beq.n	800b52c <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800b528:	2301      	movs	r3, #1
 800b52a:	e03b      	b.n	800b5a4 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	2220      	movs	r2, #32
 800b532:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2220      	movs	r2, #32
 800b538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2200      	movs	r2, #0
 800b540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 800b544:	2300      	movs	r3, #0
 800b546:	e02d      	b.n	800b5a4 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800b548:	69bb      	ldr	r3, [r7, #24]
 800b54a:	9300      	str	r3, [sp, #0]
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	2200      	movs	r2, #0
 800b550:	2120      	movs	r1, #32
 800b552:	68f8      	ldr	r0, [r7, #12]
 800b554:	f000 f8f6 	bl	800b744 <I2C_WaitOnFlagUntilTimeout>
 800b558:	4603      	mov	r3, r0
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d001      	beq.n	800b562 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800b55e:	2301      	movs	r3, #1
 800b560:	e020      	b.n	800b5a4 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	2210      	movs	r2, #16
 800b568:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	2220      	movs	r2, #32
 800b570:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	3301      	adds	r3, #1
 800b576:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	687a      	ldr	r2, [r7, #4]
 800b57c:	429a      	cmp	r2, r3
 800b57e:	f63f af56 	bhi.w	800b42e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	2220      	movs	r2, #32
 800b586:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b58e:	f043 0220 	orr.w	r2, r3, #32
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2200      	movs	r2, #0
 800b59a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800b59e:	2301      	movs	r3, #1
 800b5a0:	e000      	b.n	800b5a4 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800b5a2:	2302      	movs	r3, #2
  }
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3720      	adds	r7, #32
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}

0800b5ac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b086      	sub	sp, #24
 800b5b0:	af02      	add	r7, sp, #8
 800b5b2:	60f8      	str	r0, [r7, #12]
 800b5b4:	4608      	mov	r0, r1
 800b5b6:	4611      	mov	r1, r2
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	817b      	strh	r3, [r7, #10]
 800b5be:	460b      	mov	r3, r1
 800b5c0:	813b      	strh	r3, [r7, #8]
 800b5c2:	4613      	mov	r3, r2
 800b5c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b5c6:	88fb      	ldrh	r3, [r7, #6]
 800b5c8:	b2da      	uxtb	r2, r3
 800b5ca:	8979      	ldrh	r1, [r7, #10]
 800b5cc:	4b20      	ldr	r3, [pc, #128]	@ (800b650 <I2C_RequestMemoryWrite+0xa4>)
 800b5ce:	9300      	str	r3, [sp, #0]
 800b5d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b5d4:	68f8      	ldr	r0, [r7, #12]
 800b5d6:	f000 fa79 	bl	800bacc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b5da:	69fa      	ldr	r2, [r7, #28]
 800b5dc:	69b9      	ldr	r1, [r7, #24]
 800b5de:	68f8      	ldr	r0, [r7, #12]
 800b5e0:	f000 f909 	bl	800b7f6 <I2C_WaitOnTXISFlagUntilTimeout>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d001      	beq.n	800b5ee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	e02c      	b.n	800b648 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b5ee:	88fb      	ldrh	r3, [r7, #6]
 800b5f0:	2b01      	cmp	r3, #1
 800b5f2:	d105      	bne.n	800b600 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b5f4:	893b      	ldrh	r3, [r7, #8]
 800b5f6:	b2da      	uxtb	r2, r3
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	629a      	str	r2, [r3, #40]	@ 0x28
 800b5fe:	e015      	b.n	800b62c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b600:	893b      	ldrh	r3, [r7, #8]
 800b602:	0a1b      	lsrs	r3, r3, #8
 800b604:	b29b      	uxth	r3, r3
 800b606:	b2da      	uxtb	r2, r3
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b60e:	69fa      	ldr	r2, [r7, #28]
 800b610:	69b9      	ldr	r1, [r7, #24]
 800b612:	68f8      	ldr	r0, [r7, #12]
 800b614:	f000 f8ef 	bl	800b7f6 <I2C_WaitOnTXISFlagUntilTimeout>
 800b618:	4603      	mov	r3, r0
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d001      	beq.n	800b622 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800b61e:	2301      	movs	r3, #1
 800b620:	e012      	b.n	800b648 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b622:	893b      	ldrh	r3, [r7, #8]
 800b624:	b2da      	uxtb	r2, r3
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b62c:	69fb      	ldr	r3, [r7, #28]
 800b62e:	9300      	str	r3, [sp, #0]
 800b630:	69bb      	ldr	r3, [r7, #24]
 800b632:	2200      	movs	r2, #0
 800b634:	2180      	movs	r1, #128	@ 0x80
 800b636:	68f8      	ldr	r0, [r7, #12]
 800b638:	f000 f884 	bl	800b744 <I2C_WaitOnFlagUntilTimeout>
 800b63c:	4603      	mov	r3, r0
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d001      	beq.n	800b646 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800b642:	2301      	movs	r3, #1
 800b644:	e000      	b.n	800b648 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800b646:	2300      	movs	r3, #0
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3710      	adds	r7, #16
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}
 800b650:	80002000 	.word	0x80002000

0800b654 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b086      	sub	sp, #24
 800b658:	af02      	add	r7, sp, #8
 800b65a:	60f8      	str	r0, [r7, #12]
 800b65c:	4608      	mov	r0, r1
 800b65e:	4611      	mov	r1, r2
 800b660:	461a      	mov	r2, r3
 800b662:	4603      	mov	r3, r0
 800b664:	817b      	strh	r3, [r7, #10]
 800b666:	460b      	mov	r3, r1
 800b668:	813b      	strh	r3, [r7, #8]
 800b66a:	4613      	mov	r3, r2
 800b66c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b66e:	88fb      	ldrh	r3, [r7, #6]
 800b670:	b2da      	uxtb	r2, r3
 800b672:	8979      	ldrh	r1, [r7, #10]
 800b674:	4b20      	ldr	r3, [pc, #128]	@ (800b6f8 <I2C_RequestMemoryRead+0xa4>)
 800b676:	9300      	str	r3, [sp, #0]
 800b678:	2300      	movs	r3, #0
 800b67a:	68f8      	ldr	r0, [r7, #12]
 800b67c:	f000 fa26 	bl	800bacc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b680:	69fa      	ldr	r2, [r7, #28]
 800b682:	69b9      	ldr	r1, [r7, #24]
 800b684:	68f8      	ldr	r0, [r7, #12]
 800b686:	f000 f8b6 	bl	800b7f6 <I2C_WaitOnTXISFlagUntilTimeout>
 800b68a:	4603      	mov	r3, r0
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d001      	beq.n	800b694 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800b690:	2301      	movs	r3, #1
 800b692:	e02c      	b.n	800b6ee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b694:	88fb      	ldrh	r3, [r7, #6]
 800b696:	2b01      	cmp	r3, #1
 800b698:	d105      	bne.n	800b6a6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b69a:	893b      	ldrh	r3, [r7, #8]
 800b69c:	b2da      	uxtb	r2, r3
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	629a      	str	r2, [r3, #40]	@ 0x28
 800b6a4:	e015      	b.n	800b6d2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b6a6:	893b      	ldrh	r3, [r7, #8]
 800b6a8:	0a1b      	lsrs	r3, r3, #8
 800b6aa:	b29b      	uxth	r3, r3
 800b6ac:	b2da      	uxtb	r2, r3
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b6b4:	69fa      	ldr	r2, [r7, #28]
 800b6b6:	69b9      	ldr	r1, [r7, #24]
 800b6b8:	68f8      	ldr	r0, [r7, #12]
 800b6ba:	f000 f89c 	bl	800b7f6 <I2C_WaitOnTXISFlagUntilTimeout>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d001      	beq.n	800b6c8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	e012      	b.n	800b6ee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b6c8:	893b      	ldrh	r3, [r7, #8]
 800b6ca:	b2da      	uxtb	r2, r3
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b6d2:	69fb      	ldr	r3, [r7, #28]
 800b6d4:	9300      	str	r3, [sp, #0]
 800b6d6:	69bb      	ldr	r3, [r7, #24]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	2140      	movs	r1, #64	@ 0x40
 800b6dc:	68f8      	ldr	r0, [r7, #12]
 800b6de:	f000 f831 	bl	800b744 <I2C_WaitOnFlagUntilTimeout>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d001      	beq.n	800b6ec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	e000      	b.n	800b6ee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800b6ec:	2300      	movs	r3, #0
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3710      	adds	r7, #16
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	80002000 	.word	0x80002000

0800b6fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b083      	sub	sp, #12
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	699b      	ldr	r3, [r3, #24]
 800b70a:	f003 0302 	and.w	r3, r3, #2
 800b70e:	2b02      	cmp	r3, #2
 800b710:	d103      	bne.n	800b71a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	2200      	movs	r2, #0
 800b718:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	699b      	ldr	r3, [r3, #24]
 800b720:	f003 0301 	and.w	r3, r3, #1
 800b724:	2b01      	cmp	r3, #1
 800b726:	d007      	beq.n	800b738 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	699a      	ldr	r2, [r3, #24]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f042 0201 	orr.w	r2, r2, #1
 800b736:	619a      	str	r2, [r3, #24]
  }
}
 800b738:	bf00      	nop
 800b73a:	370c      	adds	r7, #12
 800b73c:	46bd      	mov	sp, r7
 800b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b742:	4770      	bx	lr

0800b744 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	60f8      	str	r0, [r7, #12]
 800b74c:	60b9      	str	r1, [r7, #8]
 800b74e:	603b      	str	r3, [r7, #0]
 800b750:	4613      	mov	r3, r2
 800b752:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b754:	e03b      	b.n	800b7ce <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b756:	69ba      	ldr	r2, [r7, #24]
 800b758:	6839      	ldr	r1, [r7, #0]
 800b75a:	68f8      	ldr	r0, [r7, #12]
 800b75c:	f000 f8d6 	bl	800b90c <I2C_IsErrorOccurred>
 800b760:	4603      	mov	r3, r0
 800b762:	2b00      	cmp	r3, #0
 800b764:	d001      	beq.n	800b76a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800b766:	2301      	movs	r3, #1
 800b768:	e041      	b.n	800b7ee <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b770:	d02d      	beq.n	800b7ce <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b772:	f7fd fd37 	bl	80091e4 <HAL_GetTick>
 800b776:	4602      	mov	r2, r0
 800b778:	69bb      	ldr	r3, [r7, #24]
 800b77a:	1ad3      	subs	r3, r2, r3
 800b77c:	683a      	ldr	r2, [r7, #0]
 800b77e:	429a      	cmp	r2, r3
 800b780:	d302      	bcc.n	800b788 <I2C_WaitOnFlagUntilTimeout+0x44>
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d122      	bne.n	800b7ce <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	699a      	ldr	r2, [r3, #24]
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	4013      	ands	r3, r2
 800b792:	68ba      	ldr	r2, [r7, #8]
 800b794:	429a      	cmp	r2, r3
 800b796:	bf0c      	ite	eq
 800b798:	2301      	moveq	r3, #1
 800b79a:	2300      	movne	r3, #0
 800b79c:	b2db      	uxtb	r3, r3
 800b79e:	461a      	mov	r2, r3
 800b7a0:	79fb      	ldrb	r3, [r7, #7]
 800b7a2:	429a      	cmp	r2, r3
 800b7a4:	d113      	bne.n	800b7ce <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7aa:	f043 0220 	orr.w	r2, r3, #32
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2220      	movs	r2, #32
 800b7b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	e00f      	b.n	800b7ee <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	699a      	ldr	r2, [r3, #24]
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	4013      	ands	r3, r2
 800b7d8:	68ba      	ldr	r2, [r7, #8]
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	bf0c      	ite	eq
 800b7de:	2301      	moveq	r3, #1
 800b7e0:	2300      	movne	r3, #0
 800b7e2:	b2db      	uxtb	r3, r3
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	79fb      	ldrb	r3, [r7, #7]
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d0b4      	beq.n	800b756 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b7ec:	2300      	movs	r3, #0
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}

0800b7f6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b7f6:	b580      	push	{r7, lr}
 800b7f8:	b084      	sub	sp, #16
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	60f8      	str	r0, [r7, #12]
 800b7fe:	60b9      	str	r1, [r7, #8]
 800b800:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b802:	e033      	b.n	800b86c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	68b9      	ldr	r1, [r7, #8]
 800b808:	68f8      	ldr	r0, [r7, #12]
 800b80a:	f000 f87f 	bl	800b90c <I2C_IsErrorOccurred>
 800b80e:	4603      	mov	r3, r0
 800b810:	2b00      	cmp	r3, #0
 800b812:	d001      	beq.n	800b818 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b814:	2301      	movs	r3, #1
 800b816:	e031      	b.n	800b87c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b81e:	d025      	beq.n	800b86c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b820:	f7fd fce0 	bl	80091e4 <HAL_GetTick>
 800b824:	4602      	mov	r2, r0
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	1ad3      	subs	r3, r2, r3
 800b82a:	68ba      	ldr	r2, [r7, #8]
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d302      	bcc.n	800b836 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d11a      	bne.n	800b86c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	699b      	ldr	r3, [r3, #24]
 800b83c:	f003 0302 	and.w	r3, r3, #2
 800b840:	2b02      	cmp	r3, #2
 800b842:	d013      	beq.n	800b86c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b848:	f043 0220 	orr.w	r2, r3, #32
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	2220      	movs	r2, #32
 800b854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	2200      	movs	r2, #0
 800b85c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	2200      	movs	r2, #0
 800b864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b868:	2301      	movs	r3, #1
 800b86a:	e007      	b.n	800b87c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	699b      	ldr	r3, [r3, #24]
 800b872:	f003 0302 	and.w	r3, r3, #2
 800b876:	2b02      	cmp	r3, #2
 800b878:	d1c4      	bne.n	800b804 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b87a:	2300      	movs	r3, #0
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3710      	adds	r7, #16
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
 800b88a:	60f8      	str	r0, [r7, #12]
 800b88c:	60b9      	str	r1, [r7, #8]
 800b88e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b890:	e02f      	b.n	800b8f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b892:	687a      	ldr	r2, [r7, #4]
 800b894:	68b9      	ldr	r1, [r7, #8]
 800b896:	68f8      	ldr	r0, [r7, #12]
 800b898:	f000 f838 	bl	800b90c <I2C_IsErrorOccurred>
 800b89c:	4603      	mov	r3, r0
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d001      	beq.n	800b8a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	e02d      	b.n	800b902 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8a6:	f7fd fc9d 	bl	80091e4 <HAL_GetTick>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	1ad3      	subs	r3, r2, r3
 800b8b0:	68ba      	ldr	r2, [r7, #8]
 800b8b2:	429a      	cmp	r2, r3
 800b8b4:	d302      	bcc.n	800b8bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d11a      	bne.n	800b8f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	699b      	ldr	r3, [r3, #24]
 800b8c2:	f003 0320 	and.w	r3, r3, #32
 800b8c6:	2b20      	cmp	r3, #32
 800b8c8:	d013      	beq.n	800b8f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b8ce:	f043 0220 	orr.w	r2, r3, #32
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	2220      	movs	r2, #32
 800b8da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	e007      	b.n	800b902 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	699b      	ldr	r3, [r3, #24]
 800b8f8:	f003 0320 	and.w	r3, r3, #32
 800b8fc:	2b20      	cmp	r3, #32
 800b8fe:	d1c8      	bne.n	800b892 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b900:	2300      	movs	r3, #0
}
 800b902:	4618      	mov	r0, r3
 800b904:	3710      	adds	r7, #16
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}
	...

0800b90c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b08a      	sub	sp, #40	@ 0x28
 800b910:	af00      	add	r7, sp, #0
 800b912:	60f8      	str	r0, [r7, #12]
 800b914:	60b9      	str	r1, [r7, #8]
 800b916:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b918:	2300      	movs	r3, #0
 800b91a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	699b      	ldr	r3, [r3, #24]
 800b924:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b926:	2300      	movs	r3, #0
 800b928:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b92e:	69bb      	ldr	r3, [r7, #24]
 800b930:	f003 0310 	and.w	r3, r3, #16
 800b934:	2b00      	cmp	r3, #0
 800b936:	d068      	beq.n	800ba0a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	2210      	movs	r2, #16
 800b93e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b940:	e049      	b.n	800b9d6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b948:	d045      	beq.n	800b9d6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b94a:	f7fd fc4b 	bl	80091e4 <HAL_GetTick>
 800b94e:	4602      	mov	r2, r0
 800b950:	69fb      	ldr	r3, [r7, #28]
 800b952:	1ad3      	subs	r3, r2, r3
 800b954:	68ba      	ldr	r2, [r7, #8]
 800b956:	429a      	cmp	r2, r3
 800b958:	d302      	bcc.n	800b960 <I2C_IsErrorOccurred+0x54>
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d13a      	bne.n	800b9d6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	685b      	ldr	r3, [r3, #4]
 800b966:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b96a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b972:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	699b      	ldr	r3, [r3, #24]
 800b97a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b97e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b982:	d121      	bne.n	800b9c8 <I2C_IsErrorOccurred+0xbc>
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b98a:	d01d      	beq.n	800b9c8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800b98c:	7cfb      	ldrb	r3, [r7, #19]
 800b98e:	2b20      	cmp	r3, #32
 800b990:	d01a      	beq.n	800b9c8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	685a      	ldr	r2, [r3, #4]
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b9a0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b9a2:	f7fd fc1f 	bl	80091e4 <HAL_GetTick>
 800b9a6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b9a8:	e00e      	b.n	800b9c8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b9aa:	f7fd fc1b 	bl	80091e4 <HAL_GetTick>
 800b9ae:	4602      	mov	r2, r0
 800b9b0:	69fb      	ldr	r3, [r7, #28]
 800b9b2:	1ad3      	subs	r3, r2, r3
 800b9b4:	2b19      	cmp	r3, #25
 800b9b6:	d907      	bls.n	800b9c8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b9b8:	6a3b      	ldr	r3, [r7, #32]
 800b9ba:	f043 0320 	orr.w	r3, r3, #32
 800b9be:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800b9c6:	e006      	b.n	800b9d6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	699b      	ldr	r3, [r3, #24]
 800b9ce:	f003 0320 	and.w	r3, r3, #32
 800b9d2:	2b20      	cmp	r3, #32
 800b9d4:	d1e9      	bne.n	800b9aa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	699b      	ldr	r3, [r3, #24]
 800b9dc:	f003 0320 	and.w	r3, r3, #32
 800b9e0:	2b20      	cmp	r3, #32
 800b9e2:	d003      	beq.n	800b9ec <I2C_IsErrorOccurred+0xe0>
 800b9e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d0aa      	beq.n	800b942 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b9ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d103      	bne.n	800b9fc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	2220      	movs	r2, #32
 800b9fa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b9fc:	6a3b      	ldr	r3, [r7, #32]
 800b9fe:	f043 0304 	orr.w	r3, r3, #4
 800ba02:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800ba04:	2301      	movs	r3, #1
 800ba06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	699b      	ldr	r3, [r3, #24]
 800ba10:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800ba12:	69bb      	ldr	r3, [r7, #24]
 800ba14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d00b      	beq.n	800ba34 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800ba1c:	6a3b      	ldr	r3, [r7, #32]
 800ba1e:	f043 0301 	orr.w	r3, r3, #1
 800ba22:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ba2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ba2e:	2301      	movs	r3, #1
 800ba30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800ba34:	69bb      	ldr	r3, [r7, #24]
 800ba36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d00b      	beq.n	800ba56 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800ba3e:	6a3b      	ldr	r3, [r7, #32]
 800ba40:	f043 0308 	orr.w	r3, r3, #8
 800ba44:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ba4e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ba50:	2301      	movs	r3, #1
 800ba52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ba56:	69bb      	ldr	r3, [r7, #24]
 800ba58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d00b      	beq.n	800ba78 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800ba60:	6a3b      	ldr	r3, [r7, #32]
 800ba62:	f043 0302 	orr.w	r3, r3, #2
 800ba66:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ba70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ba72:	2301      	movs	r3, #1
 800ba74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800ba78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d01c      	beq.n	800baba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ba80:	68f8      	ldr	r0, [r7, #12]
 800ba82:	f7ff fe3b 	bl	800b6fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	6859      	ldr	r1, [r3, #4]
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681a      	ldr	r2, [r3, #0]
 800ba90:	4b0d      	ldr	r3, [pc, #52]	@ (800bac8 <I2C_IsErrorOccurred+0x1bc>)
 800ba92:	400b      	ands	r3, r1
 800ba94:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ba9a:	6a3b      	ldr	r3, [r7, #32]
 800ba9c:	431a      	orrs	r2, r3
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	2220      	movs	r2, #32
 800baa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	2200      	movs	r2, #0
 800baae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2200      	movs	r2, #0
 800bab6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800baba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3728      	adds	r7, #40	@ 0x28
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	bf00      	nop
 800bac8:	fe00e800 	.word	0xfe00e800

0800bacc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800bacc:	b480      	push	{r7}
 800bace:	b087      	sub	sp, #28
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	60f8      	str	r0, [r7, #12]
 800bad4:	607b      	str	r3, [r7, #4]
 800bad6:	460b      	mov	r3, r1
 800bad8:	817b      	strh	r3, [r7, #10]
 800bada:	4613      	mov	r3, r2
 800badc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bade:	897b      	ldrh	r3, [r7, #10]
 800bae0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bae4:	7a7b      	ldrb	r3, [r7, #9]
 800bae6:	041b      	lsls	r3, r3, #16
 800bae8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800baec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800baf2:	6a3b      	ldr	r3, [r7, #32]
 800baf4:	4313      	orrs	r3, r2
 800baf6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bafa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	685a      	ldr	r2, [r3, #4]
 800bb02:	6a3b      	ldr	r3, [r7, #32]
 800bb04:	0d5b      	lsrs	r3, r3, #21
 800bb06:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800bb0a:	4b08      	ldr	r3, [pc, #32]	@ (800bb2c <I2C_TransferConfig+0x60>)
 800bb0c:	430b      	orrs	r3, r1
 800bb0e:	43db      	mvns	r3, r3
 800bb10:	ea02 0103 	and.w	r1, r2, r3
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	697a      	ldr	r2, [r7, #20]
 800bb1a:	430a      	orrs	r2, r1
 800bb1c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800bb1e:	bf00      	nop
 800bb20:	371c      	adds	r7, #28
 800bb22:	46bd      	mov	sp, r7
 800bb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb28:	4770      	bx	lr
 800bb2a:	bf00      	nop
 800bb2c:	03ff63ff 	.word	0x03ff63ff

0800bb30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b083      	sub	sp, #12
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bb40:	b2db      	uxtb	r3, r3
 800bb42:	2b20      	cmp	r3, #32
 800bb44:	d138      	bne.n	800bbb8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bb4c:	2b01      	cmp	r3, #1
 800bb4e:	d101      	bne.n	800bb54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800bb50:	2302      	movs	r3, #2
 800bb52:	e032      	b.n	800bbba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2201      	movs	r2, #1
 800bb58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2224      	movs	r2, #36	@ 0x24
 800bb60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	681a      	ldr	r2, [r3, #0]
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f022 0201 	bic.w	r2, r2, #1
 800bb72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	681a      	ldr	r2, [r3, #0]
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800bb82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	6819      	ldr	r1, [r3, #0]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	683a      	ldr	r2, [r7, #0]
 800bb90:	430a      	orrs	r2, r1
 800bb92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f042 0201 	orr.w	r2, r2, #1
 800bba2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2220      	movs	r2, #32
 800bba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	e000      	b.n	800bbba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bbb8:	2302      	movs	r3, #2
  }
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	370c      	adds	r7, #12
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc4:	4770      	bx	lr

0800bbc6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800bbc6:	b480      	push	{r7}
 800bbc8:	b085      	sub	sp, #20
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	6078      	str	r0, [r7, #4]
 800bbce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bbd6:	b2db      	uxtb	r3, r3
 800bbd8:	2b20      	cmp	r3, #32
 800bbda:	d139      	bne.n	800bc50 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bbe2:	2b01      	cmp	r3, #1
 800bbe4:	d101      	bne.n	800bbea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800bbe6:	2302      	movs	r3, #2
 800bbe8:	e033      	b.n	800bc52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2201      	movs	r2, #1
 800bbee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2224      	movs	r2, #36	@ 0x24
 800bbf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	681a      	ldr	r2, [r3, #0]
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f022 0201 	bic.w	r2, r2, #1
 800bc08:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800bc18:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	021b      	lsls	r3, r3, #8
 800bc1e:	68fa      	ldr	r2, [r7, #12]
 800bc20:	4313      	orrs	r3, r2
 800bc22:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	68fa      	ldr	r2, [r7, #12]
 800bc2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	681a      	ldr	r2, [r3, #0]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f042 0201 	orr.w	r2, r2, #1
 800bc3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2220      	movs	r2, #32
 800bc40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2200      	movs	r2, #0
 800bc48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	e000      	b.n	800bc52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800bc50:	2302      	movs	r3, #2
  }
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3714      	adds	r7, #20
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr
	...

0800bc60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800bc60:	b480      	push	{r7}
 800bc62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800bc64:	4b04      	ldr	r3, [pc, #16]	@ (800bc78 <HAL_PWREx_GetVoltageRange+0x18>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc74:	4770      	bx	lr
 800bc76:	bf00      	nop
 800bc78:	40007000 	.word	0x40007000

0800bc7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b085      	sub	sp, #20
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc8a:	d130      	bne.n	800bcee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800bc8c:	4b23      	ldr	r3, [pc, #140]	@ (800bd1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bc94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc98:	d038      	beq.n	800bd0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800bc9a:	4b20      	ldr	r3, [pc, #128]	@ (800bd1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800bca2:	4a1e      	ldr	r2, [pc, #120]	@ (800bd1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bca4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bca8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800bcaa:	4b1d      	ldr	r3, [pc, #116]	@ (800bd20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	2232      	movs	r2, #50	@ 0x32
 800bcb0:	fb02 f303 	mul.w	r3, r2, r3
 800bcb4:	4a1b      	ldr	r2, [pc, #108]	@ (800bd24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800bcb6:	fba2 2303 	umull	r2, r3, r2, r3
 800bcba:	0c9b      	lsrs	r3, r3, #18
 800bcbc:	3301      	adds	r3, #1
 800bcbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bcc0:	e002      	b.n	800bcc8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	3b01      	subs	r3, #1
 800bcc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bcc8:	4b14      	ldr	r3, [pc, #80]	@ (800bd1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bcca:	695b      	ldr	r3, [r3, #20]
 800bccc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bcd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bcd4:	d102      	bne.n	800bcdc <HAL_PWREx_ControlVoltageScaling+0x60>
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d1f2      	bne.n	800bcc2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800bcdc:	4b0f      	ldr	r3, [pc, #60]	@ (800bd1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bcde:	695b      	ldr	r3, [r3, #20]
 800bce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bce4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bce8:	d110      	bne.n	800bd0c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800bcea:	2303      	movs	r3, #3
 800bcec:	e00f      	b.n	800bd0e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800bcee:	4b0b      	ldr	r3, [pc, #44]	@ (800bd1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bcf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bcfa:	d007      	beq.n	800bd0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800bcfc:	4b07      	ldr	r3, [pc, #28]	@ (800bd1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800bd04:	4a05      	ldr	r2, [pc, #20]	@ (800bd1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800bd06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bd0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800bd0c:	2300      	movs	r3, #0
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3714      	adds	r7, #20
 800bd12:	46bd      	mov	sp, r7
 800bd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd18:	4770      	bx	lr
 800bd1a:	bf00      	nop
 800bd1c:	40007000 	.word	0x40007000
 800bd20:	2000005c 	.word	0x2000005c
 800bd24:	431bde83 	.word	0x431bde83

0800bd28 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b088      	sub	sp, #32
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d102      	bne.n	800bd3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800bd36:	2301      	movs	r3, #1
 800bd38:	f000 bc02 	b.w	800c540 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bd3c:	4b96      	ldr	r3, [pc, #600]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800bd3e:	689b      	ldr	r3, [r3, #8]
 800bd40:	f003 030c 	and.w	r3, r3, #12
 800bd44:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bd46:	4b94      	ldr	r3, [pc, #592]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800bd48:	68db      	ldr	r3, [r3, #12]
 800bd4a:	f003 0303 	and.w	r3, r3, #3
 800bd4e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f003 0310 	and.w	r3, r3, #16
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	f000 80e4 	beq.w	800bf26 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800bd5e:	69bb      	ldr	r3, [r7, #24]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d007      	beq.n	800bd74 <HAL_RCC_OscConfig+0x4c>
 800bd64:	69bb      	ldr	r3, [r7, #24]
 800bd66:	2b0c      	cmp	r3, #12
 800bd68:	f040 808b 	bne.w	800be82 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	2b01      	cmp	r3, #1
 800bd70:	f040 8087 	bne.w	800be82 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800bd74:	4b88      	ldr	r3, [pc, #544]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f003 0302 	and.w	r3, r3, #2
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d005      	beq.n	800bd8c <HAL_RCC_OscConfig+0x64>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	699b      	ldr	r3, [r3, #24]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d101      	bne.n	800bd8c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800bd88:	2301      	movs	r3, #1
 800bd8a:	e3d9      	b.n	800c540 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6a1a      	ldr	r2, [r3, #32]
 800bd90:	4b81      	ldr	r3, [pc, #516]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f003 0308 	and.w	r3, r3, #8
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d004      	beq.n	800bda6 <HAL_RCC_OscConfig+0x7e>
 800bd9c:	4b7e      	ldr	r3, [pc, #504]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bda4:	e005      	b.n	800bdb2 <HAL_RCC_OscConfig+0x8a>
 800bda6:	4b7c      	ldr	r3, [pc, #496]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800bda8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bdac:	091b      	lsrs	r3, r3, #4
 800bdae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d223      	bcs.n	800bdfe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6a1b      	ldr	r3, [r3, #32]
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f000 fd8c 	bl	800c8d8 <RCC_SetFlashLatencyFromMSIRange>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d001      	beq.n	800bdca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	e3ba      	b.n	800c540 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bdca:	4b73      	ldr	r3, [pc, #460]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	4a72      	ldr	r2, [pc, #456]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800bdd0:	f043 0308 	orr.w	r3, r3, #8
 800bdd4:	6013      	str	r3, [r2, #0]
 800bdd6:	4b70      	ldr	r3, [pc, #448]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6a1b      	ldr	r3, [r3, #32]
 800bde2:	496d      	ldr	r1, [pc, #436]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800bde4:	4313      	orrs	r3, r2
 800bde6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bde8:	4b6b      	ldr	r3, [pc, #428]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	69db      	ldr	r3, [r3, #28]
 800bdf4:	021b      	lsls	r3, r3, #8
 800bdf6:	4968      	ldr	r1, [pc, #416]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	604b      	str	r3, [r1, #4]
 800bdfc:	e025      	b.n	800be4a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bdfe:	4b66      	ldr	r3, [pc, #408]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	4a65      	ldr	r2, [pc, #404]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800be04:	f043 0308 	orr.w	r3, r3, #8
 800be08:	6013      	str	r3, [r2, #0]
 800be0a:	4b63      	ldr	r3, [pc, #396]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6a1b      	ldr	r3, [r3, #32]
 800be16:	4960      	ldr	r1, [pc, #384]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800be18:	4313      	orrs	r3, r2
 800be1a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800be1c:	4b5e      	ldr	r3, [pc, #376]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	69db      	ldr	r3, [r3, #28]
 800be28:	021b      	lsls	r3, r3, #8
 800be2a:	495b      	ldr	r1, [pc, #364]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800be2c:	4313      	orrs	r3, r2
 800be2e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800be30:	69bb      	ldr	r3, [r7, #24]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d109      	bne.n	800be4a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6a1b      	ldr	r3, [r3, #32]
 800be3a:	4618      	mov	r0, r3
 800be3c:	f000 fd4c 	bl	800c8d8 <RCC_SetFlashLatencyFromMSIRange>
 800be40:	4603      	mov	r3, r0
 800be42:	2b00      	cmp	r3, #0
 800be44:	d001      	beq.n	800be4a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800be46:	2301      	movs	r3, #1
 800be48:	e37a      	b.n	800c540 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800be4a:	f000 fc81 	bl	800c750 <HAL_RCC_GetSysClockFreq>
 800be4e:	4602      	mov	r2, r0
 800be50:	4b51      	ldr	r3, [pc, #324]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800be52:	689b      	ldr	r3, [r3, #8]
 800be54:	091b      	lsrs	r3, r3, #4
 800be56:	f003 030f 	and.w	r3, r3, #15
 800be5a:	4950      	ldr	r1, [pc, #320]	@ (800bf9c <HAL_RCC_OscConfig+0x274>)
 800be5c:	5ccb      	ldrb	r3, [r1, r3]
 800be5e:	f003 031f 	and.w	r3, r3, #31
 800be62:	fa22 f303 	lsr.w	r3, r2, r3
 800be66:	4a4e      	ldr	r2, [pc, #312]	@ (800bfa0 <HAL_RCC_OscConfig+0x278>)
 800be68:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800be6a:	4b4e      	ldr	r3, [pc, #312]	@ (800bfa4 <HAL_RCC_OscConfig+0x27c>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	4618      	mov	r0, r3
 800be70:	f7fd f968 	bl	8009144 <HAL_InitTick>
 800be74:	4603      	mov	r3, r0
 800be76:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800be78:	7bfb      	ldrb	r3, [r7, #15]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d052      	beq.n	800bf24 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800be7e:	7bfb      	ldrb	r3, [r7, #15]
 800be80:	e35e      	b.n	800c540 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	699b      	ldr	r3, [r3, #24]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d032      	beq.n	800bef0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800be8a:	4b43      	ldr	r3, [pc, #268]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	4a42      	ldr	r2, [pc, #264]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800be90:	f043 0301 	orr.w	r3, r3, #1
 800be94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800be96:	f7fd f9a5 	bl	80091e4 <HAL_GetTick>
 800be9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800be9c:	e008      	b.n	800beb0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800be9e:	f7fd f9a1 	bl	80091e4 <HAL_GetTick>
 800bea2:	4602      	mov	r2, r0
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	1ad3      	subs	r3, r2, r3
 800bea8:	2b02      	cmp	r3, #2
 800beaa:	d901      	bls.n	800beb0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800beac:	2303      	movs	r3, #3
 800beae:	e347      	b.n	800c540 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800beb0:	4b39      	ldr	r3, [pc, #228]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f003 0302 	and.w	r3, r3, #2
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d0f0      	beq.n	800be9e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bebc:	4b36      	ldr	r3, [pc, #216]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	4a35      	ldr	r2, [pc, #212]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800bec2:	f043 0308 	orr.w	r3, r3, #8
 800bec6:	6013      	str	r3, [r2, #0]
 800bec8:	4b33      	ldr	r3, [pc, #204]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6a1b      	ldr	r3, [r3, #32]
 800bed4:	4930      	ldr	r1, [pc, #192]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800bed6:	4313      	orrs	r3, r2
 800bed8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800beda:	4b2f      	ldr	r3, [pc, #188]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	69db      	ldr	r3, [r3, #28]
 800bee6:	021b      	lsls	r3, r3, #8
 800bee8:	492b      	ldr	r1, [pc, #172]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800beea:	4313      	orrs	r3, r2
 800beec:	604b      	str	r3, [r1, #4]
 800beee:	e01a      	b.n	800bf26 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800bef0:	4b29      	ldr	r3, [pc, #164]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	4a28      	ldr	r2, [pc, #160]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800bef6:	f023 0301 	bic.w	r3, r3, #1
 800befa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800befc:	f7fd f972 	bl	80091e4 <HAL_GetTick>
 800bf00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800bf02:	e008      	b.n	800bf16 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bf04:	f7fd f96e 	bl	80091e4 <HAL_GetTick>
 800bf08:	4602      	mov	r2, r0
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	1ad3      	subs	r3, r2, r3
 800bf0e:	2b02      	cmp	r3, #2
 800bf10:	d901      	bls.n	800bf16 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800bf12:	2303      	movs	r3, #3
 800bf14:	e314      	b.n	800c540 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800bf16:	4b20      	ldr	r3, [pc, #128]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f003 0302 	and.w	r3, r3, #2
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d1f0      	bne.n	800bf04 <HAL_RCC_OscConfig+0x1dc>
 800bf22:	e000      	b.n	800bf26 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800bf24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f003 0301 	and.w	r3, r3, #1
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d073      	beq.n	800c01a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800bf32:	69bb      	ldr	r3, [r7, #24]
 800bf34:	2b08      	cmp	r3, #8
 800bf36:	d005      	beq.n	800bf44 <HAL_RCC_OscConfig+0x21c>
 800bf38:	69bb      	ldr	r3, [r7, #24]
 800bf3a:	2b0c      	cmp	r3, #12
 800bf3c:	d10e      	bne.n	800bf5c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	2b03      	cmp	r3, #3
 800bf42:	d10b      	bne.n	800bf5c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bf44:	4b14      	ldr	r3, [pc, #80]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d063      	beq.n	800c018 <HAL_RCC_OscConfig+0x2f0>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d15f      	bne.n	800c018 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800bf58:	2301      	movs	r3, #1
 800bf5a:	e2f1      	b.n	800c540 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf64:	d106      	bne.n	800bf74 <HAL_RCC_OscConfig+0x24c>
 800bf66:	4b0c      	ldr	r3, [pc, #48]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	4a0b      	ldr	r2, [pc, #44]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800bf6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bf70:	6013      	str	r3, [r2, #0]
 800bf72:	e025      	b.n	800bfc0 <HAL_RCC_OscConfig+0x298>
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	685b      	ldr	r3, [r3, #4]
 800bf78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bf7c:	d114      	bne.n	800bfa8 <HAL_RCC_OscConfig+0x280>
 800bf7e:	4b06      	ldr	r3, [pc, #24]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	4a05      	ldr	r2, [pc, #20]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800bf84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bf88:	6013      	str	r3, [r2, #0]
 800bf8a:	4b03      	ldr	r3, [pc, #12]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	4a02      	ldr	r2, [pc, #8]	@ (800bf98 <HAL_RCC_OscConfig+0x270>)
 800bf90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bf94:	6013      	str	r3, [r2, #0]
 800bf96:	e013      	b.n	800bfc0 <HAL_RCC_OscConfig+0x298>
 800bf98:	40021000 	.word	0x40021000
 800bf9c:	0800fd44 	.word	0x0800fd44
 800bfa0:	2000005c 	.word	0x2000005c
 800bfa4:	20000060 	.word	0x20000060
 800bfa8:	4ba0      	ldr	r3, [pc, #640]	@ (800c22c <HAL_RCC_OscConfig+0x504>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	4a9f      	ldr	r2, [pc, #636]	@ (800c22c <HAL_RCC_OscConfig+0x504>)
 800bfae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bfb2:	6013      	str	r3, [r2, #0]
 800bfb4:	4b9d      	ldr	r3, [pc, #628]	@ (800c22c <HAL_RCC_OscConfig+0x504>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	4a9c      	ldr	r2, [pc, #624]	@ (800c22c <HAL_RCC_OscConfig+0x504>)
 800bfba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bfbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	685b      	ldr	r3, [r3, #4]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d013      	beq.n	800bff0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bfc8:	f7fd f90c 	bl	80091e4 <HAL_GetTick>
 800bfcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bfce:	e008      	b.n	800bfe2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bfd0:	f7fd f908 	bl	80091e4 <HAL_GetTick>
 800bfd4:	4602      	mov	r2, r0
 800bfd6:	693b      	ldr	r3, [r7, #16]
 800bfd8:	1ad3      	subs	r3, r2, r3
 800bfda:	2b64      	cmp	r3, #100	@ 0x64
 800bfdc:	d901      	bls.n	800bfe2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800bfde:	2303      	movs	r3, #3
 800bfe0:	e2ae      	b.n	800c540 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bfe2:	4b92      	ldr	r3, [pc, #584]	@ (800c22c <HAL_RCC_OscConfig+0x504>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d0f0      	beq.n	800bfd0 <HAL_RCC_OscConfig+0x2a8>
 800bfee:	e014      	b.n	800c01a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bff0:	f7fd f8f8 	bl	80091e4 <HAL_GetTick>
 800bff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bff6:	e008      	b.n	800c00a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bff8:	f7fd f8f4 	bl	80091e4 <HAL_GetTick>
 800bffc:	4602      	mov	r2, r0
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	1ad3      	subs	r3, r2, r3
 800c002:	2b64      	cmp	r3, #100	@ 0x64
 800c004:	d901      	bls.n	800c00a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800c006:	2303      	movs	r3, #3
 800c008:	e29a      	b.n	800c540 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c00a:	4b88      	ldr	r3, [pc, #544]	@ (800c22c <HAL_RCC_OscConfig+0x504>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c012:	2b00      	cmp	r3, #0
 800c014:	d1f0      	bne.n	800bff8 <HAL_RCC_OscConfig+0x2d0>
 800c016:	e000      	b.n	800c01a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f003 0302 	and.w	r3, r3, #2
 800c022:	2b00      	cmp	r3, #0
 800c024:	d060      	beq.n	800c0e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800c026:	69bb      	ldr	r3, [r7, #24]
 800c028:	2b04      	cmp	r3, #4
 800c02a:	d005      	beq.n	800c038 <HAL_RCC_OscConfig+0x310>
 800c02c:	69bb      	ldr	r3, [r7, #24]
 800c02e:	2b0c      	cmp	r3, #12
 800c030:	d119      	bne.n	800c066 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	2b02      	cmp	r3, #2
 800c036:	d116      	bne.n	800c066 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c038:	4b7c      	ldr	r3, [pc, #496]	@ (800c22c <HAL_RCC_OscConfig+0x504>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c040:	2b00      	cmp	r3, #0
 800c042:	d005      	beq.n	800c050 <HAL_RCC_OscConfig+0x328>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	68db      	ldr	r3, [r3, #12]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d101      	bne.n	800c050 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800c04c:	2301      	movs	r3, #1
 800c04e:	e277      	b.n	800c540 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c050:	4b76      	ldr	r3, [pc, #472]	@ (800c22c <HAL_RCC_OscConfig+0x504>)
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	691b      	ldr	r3, [r3, #16]
 800c05c:	061b      	lsls	r3, r3, #24
 800c05e:	4973      	ldr	r1, [pc, #460]	@ (800c22c <HAL_RCC_OscConfig+0x504>)
 800c060:	4313      	orrs	r3, r2
 800c062:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c064:	e040      	b.n	800c0e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	68db      	ldr	r3, [r3, #12]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d023      	beq.n	800c0b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c06e:	4b6f      	ldr	r3, [pc, #444]	@ (800c22c <HAL_RCC_OscConfig+0x504>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	4a6e      	ldr	r2, [pc, #440]	@ (800c22c <HAL_RCC_OscConfig+0x504>)
 800c074:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c07a:	f7fd f8b3 	bl	80091e4 <HAL_GetTick>
 800c07e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c080:	e008      	b.n	800c094 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c082:	f7fd f8af 	bl	80091e4 <HAL_GetTick>
 800c086:	4602      	mov	r2, r0
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	1ad3      	subs	r3, r2, r3
 800c08c:	2b02      	cmp	r3, #2
 800c08e:	d901      	bls.n	800c094 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800c090:	2303      	movs	r3, #3
 800c092:	e255      	b.n	800c540 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c094:	4b65      	ldr	r3, [pc, #404]	@ (800c22c <HAL_RCC_OscConfig+0x504>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d0f0      	beq.n	800c082 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c0a0:	4b62      	ldr	r3, [pc, #392]	@ (800c22c <HAL_RCC_OscConfig+0x504>)
 800c0a2:	685b      	ldr	r3, [r3, #4]
 800c0a4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	691b      	ldr	r3, [r3, #16]
 800c0ac:	061b      	lsls	r3, r3, #24
 800c0ae:	495f      	ldr	r1, [pc, #380]	@ (800c22c <HAL_RCC_OscConfig+0x504>)
 800c0b0:	4313      	orrs	r3, r2
 800c0b2:	604b      	str	r3, [r1, #4]
 800c0b4:	e018      	b.n	800c0e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c0b6:	4b5d      	ldr	r3, [pc, #372]	@ (800c22c <HAL_RCC_OscConfig+0x504>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	4a5c      	ldr	r2, [pc, #368]	@ (800c22c <HAL_RCC_OscConfig+0x504>)
 800c0bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c0c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0c2:	f7fd f88f 	bl	80091e4 <HAL_GetTick>
 800c0c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c0c8:	e008      	b.n	800c0dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c0ca:	f7fd f88b 	bl	80091e4 <HAL_GetTick>
 800c0ce:	4602      	mov	r2, r0
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	1ad3      	subs	r3, r2, r3
 800c0d4:	2b02      	cmp	r3, #2
 800c0d6:	d901      	bls.n	800c0dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800c0d8:	2303      	movs	r3, #3
 800c0da:	e231      	b.n	800c540 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c0dc:	4b53      	ldr	r3, [pc, #332]	@ (800c22c <HAL_RCC_OscConfig+0x504>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d1f0      	bne.n	800c0ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f003 0308 	and.w	r3, r3, #8
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d03c      	beq.n	800c16e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	695b      	ldr	r3, [r3, #20]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d01c      	beq.n	800c136 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c0fc:	4b4b      	ldr	r3, [pc, #300]	@ (800c22c <HAL_RCC_OscConfig+0x504>)
 800c0fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c102:	4a4a      	ldr	r2, [pc, #296]	@ (800c22c <HAL_RCC_OscConfig+0x504>)
 800c104:	f043 0301 	orr.w	r3, r3, #1
 800c108:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c10c:	f7fd f86a 	bl	80091e4 <HAL_GetTick>
 800c110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c112:	e008      	b.n	800c126 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c114:	f7fd f866 	bl	80091e4 <HAL_GetTick>
 800c118:	4602      	mov	r2, r0
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	1ad3      	subs	r3, r2, r3
 800c11e:	2b02      	cmp	r3, #2
 800c120:	d901      	bls.n	800c126 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800c122:	2303      	movs	r3, #3
 800c124:	e20c      	b.n	800c540 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c126:	4b41      	ldr	r3, [pc, #260]	@ (800c22c <HAL_RCC_OscConfig+0x504>)
 800c128:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c12c:	f003 0302 	and.w	r3, r3, #2
 800c130:	2b00      	cmp	r3, #0
 800c132:	d0ef      	beq.n	800c114 <HAL_RCC_OscConfig+0x3ec>
 800c134:	e01b      	b.n	800c16e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c136:	4b3d      	ldr	r3, [pc, #244]	@ (800c22c <HAL_RCC_OscConfig+0x504>)
 800c138:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c13c:	4a3b      	ldr	r2, [pc, #236]	@ (800c22c <HAL_RCC_OscConfig+0x504>)
 800c13e:	f023 0301 	bic.w	r3, r3, #1
 800c142:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c146:	f7fd f84d 	bl	80091e4 <HAL_GetTick>
 800c14a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c14c:	e008      	b.n	800c160 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c14e:	f7fd f849 	bl	80091e4 <HAL_GetTick>
 800c152:	4602      	mov	r2, r0
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	1ad3      	subs	r3, r2, r3
 800c158:	2b02      	cmp	r3, #2
 800c15a:	d901      	bls.n	800c160 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800c15c:	2303      	movs	r3, #3
 800c15e:	e1ef      	b.n	800c540 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c160:	4b32      	ldr	r3, [pc, #200]	@ (800c22c <HAL_RCC_OscConfig+0x504>)
 800c162:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c166:	f003 0302 	and.w	r3, r3, #2
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d1ef      	bne.n	800c14e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	f003 0304 	and.w	r3, r3, #4
 800c176:	2b00      	cmp	r3, #0
 800c178:	f000 80a6 	beq.w	800c2c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c17c:	2300      	movs	r3, #0
 800c17e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800c180:	4b2a      	ldr	r3, [pc, #168]	@ (800c22c <HAL_RCC_OscConfig+0x504>)
 800c182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c184:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d10d      	bne.n	800c1a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c18c:	4b27      	ldr	r3, [pc, #156]	@ (800c22c <HAL_RCC_OscConfig+0x504>)
 800c18e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c190:	4a26      	ldr	r2, [pc, #152]	@ (800c22c <HAL_RCC_OscConfig+0x504>)
 800c192:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c196:	6593      	str	r3, [r2, #88]	@ 0x58
 800c198:	4b24      	ldr	r3, [pc, #144]	@ (800c22c <HAL_RCC_OscConfig+0x504>)
 800c19a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c19c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c1a0:	60bb      	str	r3, [r7, #8]
 800c1a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c1a8:	4b21      	ldr	r3, [pc, #132]	@ (800c230 <HAL_RCC_OscConfig+0x508>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d118      	bne.n	800c1e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c1b4:	4b1e      	ldr	r3, [pc, #120]	@ (800c230 <HAL_RCC_OscConfig+0x508>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	4a1d      	ldr	r2, [pc, #116]	@ (800c230 <HAL_RCC_OscConfig+0x508>)
 800c1ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c1be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c1c0:	f7fd f810 	bl	80091e4 <HAL_GetTick>
 800c1c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c1c6:	e008      	b.n	800c1da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c1c8:	f7fd f80c 	bl	80091e4 <HAL_GetTick>
 800c1cc:	4602      	mov	r2, r0
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	1ad3      	subs	r3, r2, r3
 800c1d2:	2b02      	cmp	r3, #2
 800c1d4:	d901      	bls.n	800c1da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800c1d6:	2303      	movs	r3, #3
 800c1d8:	e1b2      	b.n	800c540 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c1da:	4b15      	ldr	r3, [pc, #84]	@ (800c230 <HAL_RCC_OscConfig+0x508>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d0f0      	beq.n	800c1c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	689b      	ldr	r3, [r3, #8]
 800c1ea:	2b01      	cmp	r3, #1
 800c1ec:	d108      	bne.n	800c200 <HAL_RCC_OscConfig+0x4d8>
 800c1ee:	4b0f      	ldr	r3, [pc, #60]	@ (800c22c <HAL_RCC_OscConfig+0x504>)
 800c1f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1f4:	4a0d      	ldr	r2, [pc, #52]	@ (800c22c <HAL_RCC_OscConfig+0x504>)
 800c1f6:	f043 0301 	orr.w	r3, r3, #1
 800c1fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c1fe:	e029      	b.n	800c254 <HAL_RCC_OscConfig+0x52c>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	689b      	ldr	r3, [r3, #8]
 800c204:	2b05      	cmp	r3, #5
 800c206:	d115      	bne.n	800c234 <HAL_RCC_OscConfig+0x50c>
 800c208:	4b08      	ldr	r3, [pc, #32]	@ (800c22c <HAL_RCC_OscConfig+0x504>)
 800c20a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c20e:	4a07      	ldr	r2, [pc, #28]	@ (800c22c <HAL_RCC_OscConfig+0x504>)
 800c210:	f043 0304 	orr.w	r3, r3, #4
 800c214:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c218:	4b04      	ldr	r3, [pc, #16]	@ (800c22c <HAL_RCC_OscConfig+0x504>)
 800c21a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c21e:	4a03      	ldr	r2, [pc, #12]	@ (800c22c <HAL_RCC_OscConfig+0x504>)
 800c220:	f043 0301 	orr.w	r3, r3, #1
 800c224:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c228:	e014      	b.n	800c254 <HAL_RCC_OscConfig+0x52c>
 800c22a:	bf00      	nop
 800c22c:	40021000 	.word	0x40021000
 800c230:	40007000 	.word	0x40007000
 800c234:	4b9a      	ldr	r3, [pc, #616]	@ (800c4a0 <HAL_RCC_OscConfig+0x778>)
 800c236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c23a:	4a99      	ldr	r2, [pc, #612]	@ (800c4a0 <HAL_RCC_OscConfig+0x778>)
 800c23c:	f023 0301 	bic.w	r3, r3, #1
 800c240:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c244:	4b96      	ldr	r3, [pc, #600]	@ (800c4a0 <HAL_RCC_OscConfig+0x778>)
 800c246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c24a:	4a95      	ldr	r2, [pc, #596]	@ (800c4a0 <HAL_RCC_OscConfig+0x778>)
 800c24c:	f023 0304 	bic.w	r3, r3, #4
 800c250:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	689b      	ldr	r3, [r3, #8]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d016      	beq.n	800c28a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c25c:	f7fc ffc2 	bl	80091e4 <HAL_GetTick>
 800c260:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c262:	e00a      	b.n	800c27a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c264:	f7fc ffbe 	bl	80091e4 <HAL_GetTick>
 800c268:	4602      	mov	r2, r0
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	1ad3      	subs	r3, r2, r3
 800c26e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c272:	4293      	cmp	r3, r2
 800c274:	d901      	bls.n	800c27a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800c276:	2303      	movs	r3, #3
 800c278:	e162      	b.n	800c540 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c27a:	4b89      	ldr	r3, [pc, #548]	@ (800c4a0 <HAL_RCC_OscConfig+0x778>)
 800c27c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c280:	f003 0302 	and.w	r3, r3, #2
 800c284:	2b00      	cmp	r3, #0
 800c286:	d0ed      	beq.n	800c264 <HAL_RCC_OscConfig+0x53c>
 800c288:	e015      	b.n	800c2b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c28a:	f7fc ffab 	bl	80091e4 <HAL_GetTick>
 800c28e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c290:	e00a      	b.n	800c2a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c292:	f7fc ffa7 	bl	80091e4 <HAL_GetTick>
 800c296:	4602      	mov	r2, r0
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	1ad3      	subs	r3, r2, r3
 800c29c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	d901      	bls.n	800c2a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800c2a4:	2303      	movs	r3, #3
 800c2a6:	e14b      	b.n	800c540 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c2a8:	4b7d      	ldr	r3, [pc, #500]	@ (800c4a0 <HAL_RCC_OscConfig+0x778>)
 800c2aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2ae:	f003 0302 	and.w	r3, r3, #2
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d1ed      	bne.n	800c292 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c2b6:	7ffb      	ldrb	r3, [r7, #31]
 800c2b8:	2b01      	cmp	r3, #1
 800c2ba:	d105      	bne.n	800c2c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c2bc:	4b78      	ldr	r3, [pc, #480]	@ (800c4a0 <HAL_RCC_OscConfig+0x778>)
 800c2be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c2c0:	4a77      	ldr	r2, [pc, #476]	@ (800c4a0 <HAL_RCC_OscConfig+0x778>)
 800c2c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c2c6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f003 0320 	and.w	r3, r3, #32
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d03c      	beq.n	800c34e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d01c      	beq.n	800c316 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c2dc:	4b70      	ldr	r3, [pc, #448]	@ (800c4a0 <HAL_RCC_OscConfig+0x778>)
 800c2de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c2e2:	4a6f      	ldr	r2, [pc, #444]	@ (800c4a0 <HAL_RCC_OscConfig+0x778>)
 800c2e4:	f043 0301 	orr.w	r3, r3, #1
 800c2e8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c2ec:	f7fc ff7a 	bl	80091e4 <HAL_GetTick>
 800c2f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c2f2:	e008      	b.n	800c306 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c2f4:	f7fc ff76 	bl	80091e4 <HAL_GetTick>
 800c2f8:	4602      	mov	r2, r0
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	1ad3      	subs	r3, r2, r3
 800c2fe:	2b02      	cmp	r3, #2
 800c300:	d901      	bls.n	800c306 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800c302:	2303      	movs	r3, #3
 800c304:	e11c      	b.n	800c540 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c306:	4b66      	ldr	r3, [pc, #408]	@ (800c4a0 <HAL_RCC_OscConfig+0x778>)
 800c308:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c30c:	f003 0302 	and.w	r3, r3, #2
 800c310:	2b00      	cmp	r3, #0
 800c312:	d0ef      	beq.n	800c2f4 <HAL_RCC_OscConfig+0x5cc>
 800c314:	e01b      	b.n	800c34e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c316:	4b62      	ldr	r3, [pc, #392]	@ (800c4a0 <HAL_RCC_OscConfig+0x778>)
 800c318:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c31c:	4a60      	ldr	r2, [pc, #384]	@ (800c4a0 <HAL_RCC_OscConfig+0x778>)
 800c31e:	f023 0301 	bic.w	r3, r3, #1
 800c322:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c326:	f7fc ff5d 	bl	80091e4 <HAL_GetTick>
 800c32a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c32c:	e008      	b.n	800c340 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c32e:	f7fc ff59 	bl	80091e4 <HAL_GetTick>
 800c332:	4602      	mov	r2, r0
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	1ad3      	subs	r3, r2, r3
 800c338:	2b02      	cmp	r3, #2
 800c33a:	d901      	bls.n	800c340 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800c33c:	2303      	movs	r3, #3
 800c33e:	e0ff      	b.n	800c540 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c340:	4b57      	ldr	r3, [pc, #348]	@ (800c4a0 <HAL_RCC_OscConfig+0x778>)
 800c342:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c346:	f003 0302 	and.w	r3, r3, #2
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d1ef      	bne.n	800c32e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c352:	2b00      	cmp	r3, #0
 800c354:	f000 80f3 	beq.w	800c53e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c35c:	2b02      	cmp	r3, #2
 800c35e:	f040 80c9 	bne.w	800c4f4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800c362:	4b4f      	ldr	r3, [pc, #316]	@ (800c4a0 <HAL_RCC_OscConfig+0x778>)
 800c364:	68db      	ldr	r3, [r3, #12]
 800c366:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	f003 0203 	and.w	r2, r3, #3
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c372:	429a      	cmp	r2, r3
 800c374:	d12c      	bne.n	800c3d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c380:	3b01      	subs	r3, #1
 800c382:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c384:	429a      	cmp	r2, r3
 800c386:	d123      	bne.n	800c3d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c392:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c394:	429a      	cmp	r2, r3
 800c396:	d11b      	bne.n	800c3d0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3a2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d113      	bne.n	800c3d0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3b2:	085b      	lsrs	r3, r3, #1
 800c3b4:	3b01      	subs	r3, #1
 800c3b6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d109      	bne.n	800c3d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c3bc:	697b      	ldr	r3, [r7, #20]
 800c3be:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3c6:	085b      	lsrs	r3, r3, #1
 800c3c8:	3b01      	subs	r3, #1
 800c3ca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d06b      	beq.n	800c4a8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c3d0:	69bb      	ldr	r3, [r7, #24]
 800c3d2:	2b0c      	cmp	r3, #12
 800c3d4:	d062      	beq.n	800c49c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c3d6:	4b32      	ldr	r3, [pc, #200]	@ (800c4a0 <HAL_RCC_OscConfig+0x778>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d001      	beq.n	800c3e6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	e0ac      	b.n	800c540 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800c3e6:	4b2e      	ldr	r3, [pc, #184]	@ (800c4a0 <HAL_RCC_OscConfig+0x778>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	4a2d      	ldr	r2, [pc, #180]	@ (800c4a0 <HAL_RCC_OscConfig+0x778>)
 800c3ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c3f0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c3f2:	f7fc fef7 	bl	80091e4 <HAL_GetTick>
 800c3f6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c3f8:	e008      	b.n	800c40c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c3fa:	f7fc fef3 	bl	80091e4 <HAL_GetTick>
 800c3fe:	4602      	mov	r2, r0
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	1ad3      	subs	r3, r2, r3
 800c404:	2b02      	cmp	r3, #2
 800c406:	d901      	bls.n	800c40c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800c408:	2303      	movs	r3, #3
 800c40a:	e099      	b.n	800c540 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c40c:	4b24      	ldr	r3, [pc, #144]	@ (800c4a0 <HAL_RCC_OscConfig+0x778>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c414:	2b00      	cmp	r3, #0
 800c416:	d1f0      	bne.n	800c3fa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c418:	4b21      	ldr	r3, [pc, #132]	@ (800c4a0 <HAL_RCC_OscConfig+0x778>)
 800c41a:	68da      	ldr	r2, [r3, #12]
 800c41c:	4b21      	ldr	r3, [pc, #132]	@ (800c4a4 <HAL_RCC_OscConfig+0x77c>)
 800c41e:	4013      	ands	r3, r2
 800c420:	687a      	ldr	r2, [r7, #4]
 800c422:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800c424:	687a      	ldr	r2, [r7, #4]
 800c426:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c428:	3a01      	subs	r2, #1
 800c42a:	0112      	lsls	r2, r2, #4
 800c42c:	4311      	orrs	r1, r2
 800c42e:	687a      	ldr	r2, [r7, #4]
 800c430:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c432:	0212      	lsls	r2, r2, #8
 800c434:	4311      	orrs	r1, r2
 800c436:	687a      	ldr	r2, [r7, #4]
 800c438:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c43a:	0852      	lsrs	r2, r2, #1
 800c43c:	3a01      	subs	r2, #1
 800c43e:	0552      	lsls	r2, r2, #21
 800c440:	4311      	orrs	r1, r2
 800c442:	687a      	ldr	r2, [r7, #4]
 800c444:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800c446:	0852      	lsrs	r2, r2, #1
 800c448:	3a01      	subs	r2, #1
 800c44a:	0652      	lsls	r2, r2, #25
 800c44c:	4311      	orrs	r1, r2
 800c44e:	687a      	ldr	r2, [r7, #4]
 800c450:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c452:	06d2      	lsls	r2, r2, #27
 800c454:	430a      	orrs	r2, r1
 800c456:	4912      	ldr	r1, [pc, #72]	@ (800c4a0 <HAL_RCC_OscConfig+0x778>)
 800c458:	4313      	orrs	r3, r2
 800c45a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c45c:	4b10      	ldr	r3, [pc, #64]	@ (800c4a0 <HAL_RCC_OscConfig+0x778>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4a0f      	ldr	r2, [pc, #60]	@ (800c4a0 <HAL_RCC_OscConfig+0x778>)
 800c462:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c466:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c468:	4b0d      	ldr	r3, [pc, #52]	@ (800c4a0 <HAL_RCC_OscConfig+0x778>)
 800c46a:	68db      	ldr	r3, [r3, #12]
 800c46c:	4a0c      	ldr	r2, [pc, #48]	@ (800c4a0 <HAL_RCC_OscConfig+0x778>)
 800c46e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c472:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c474:	f7fc feb6 	bl	80091e4 <HAL_GetTick>
 800c478:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c47a:	e008      	b.n	800c48e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c47c:	f7fc feb2 	bl	80091e4 <HAL_GetTick>
 800c480:	4602      	mov	r2, r0
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	1ad3      	subs	r3, r2, r3
 800c486:	2b02      	cmp	r3, #2
 800c488:	d901      	bls.n	800c48e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800c48a:	2303      	movs	r3, #3
 800c48c:	e058      	b.n	800c540 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c48e:	4b04      	ldr	r3, [pc, #16]	@ (800c4a0 <HAL_RCC_OscConfig+0x778>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c496:	2b00      	cmp	r3, #0
 800c498:	d0f0      	beq.n	800c47c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c49a:	e050      	b.n	800c53e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c49c:	2301      	movs	r3, #1
 800c49e:	e04f      	b.n	800c540 <HAL_RCC_OscConfig+0x818>
 800c4a0:	40021000 	.word	0x40021000
 800c4a4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c4a8:	4b27      	ldr	r3, [pc, #156]	@ (800c548 <HAL_RCC_OscConfig+0x820>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d144      	bne.n	800c53e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c4b4:	4b24      	ldr	r3, [pc, #144]	@ (800c548 <HAL_RCC_OscConfig+0x820>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	4a23      	ldr	r2, [pc, #140]	@ (800c548 <HAL_RCC_OscConfig+0x820>)
 800c4ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c4be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c4c0:	4b21      	ldr	r3, [pc, #132]	@ (800c548 <HAL_RCC_OscConfig+0x820>)
 800c4c2:	68db      	ldr	r3, [r3, #12]
 800c4c4:	4a20      	ldr	r2, [pc, #128]	@ (800c548 <HAL_RCC_OscConfig+0x820>)
 800c4c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c4ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c4cc:	f7fc fe8a 	bl	80091e4 <HAL_GetTick>
 800c4d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c4d2:	e008      	b.n	800c4e6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c4d4:	f7fc fe86 	bl	80091e4 <HAL_GetTick>
 800c4d8:	4602      	mov	r2, r0
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	1ad3      	subs	r3, r2, r3
 800c4de:	2b02      	cmp	r3, #2
 800c4e0:	d901      	bls.n	800c4e6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800c4e2:	2303      	movs	r3, #3
 800c4e4:	e02c      	b.n	800c540 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c4e6:	4b18      	ldr	r3, [pc, #96]	@ (800c548 <HAL_RCC_OscConfig+0x820>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d0f0      	beq.n	800c4d4 <HAL_RCC_OscConfig+0x7ac>
 800c4f2:	e024      	b.n	800c53e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c4f4:	69bb      	ldr	r3, [r7, #24]
 800c4f6:	2b0c      	cmp	r3, #12
 800c4f8:	d01f      	beq.n	800c53a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c4fa:	4b13      	ldr	r3, [pc, #76]	@ (800c548 <HAL_RCC_OscConfig+0x820>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	4a12      	ldr	r2, [pc, #72]	@ (800c548 <HAL_RCC_OscConfig+0x820>)
 800c500:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c504:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c506:	f7fc fe6d 	bl	80091e4 <HAL_GetTick>
 800c50a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c50c:	e008      	b.n	800c520 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c50e:	f7fc fe69 	bl	80091e4 <HAL_GetTick>
 800c512:	4602      	mov	r2, r0
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	1ad3      	subs	r3, r2, r3
 800c518:	2b02      	cmp	r3, #2
 800c51a:	d901      	bls.n	800c520 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800c51c:	2303      	movs	r3, #3
 800c51e:	e00f      	b.n	800c540 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c520:	4b09      	ldr	r3, [pc, #36]	@ (800c548 <HAL_RCC_OscConfig+0x820>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d1f0      	bne.n	800c50e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800c52c:	4b06      	ldr	r3, [pc, #24]	@ (800c548 <HAL_RCC_OscConfig+0x820>)
 800c52e:	68da      	ldr	r2, [r3, #12]
 800c530:	4905      	ldr	r1, [pc, #20]	@ (800c548 <HAL_RCC_OscConfig+0x820>)
 800c532:	4b06      	ldr	r3, [pc, #24]	@ (800c54c <HAL_RCC_OscConfig+0x824>)
 800c534:	4013      	ands	r3, r2
 800c536:	60cb      	str	r3, [r1, #12]
 800c538:	e001      	b.n	800c53e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c53a:	2301      	movs	r3, #1
 800c53c:	e000      	b.n	800c540 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800c53e:	2300      	movs	r3, #0
}
 800c540:	4618      	mov	r0, r3
 800c542:	3720      	adds	r7, #32
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}
 800c548:	40021000 	.word	0x40021000
 800c54c:	feeefffc 	.word	0xfeeefffc

0800c550 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
 800c558:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d101      	bne.n	800c564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c560:	2301      	movs	r3, #1
 800c562:	e0e7      	b.n	800c734 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c564:	4b75      	ldr	r3, [pc, #468]	@ (800c73c <HAL_RCC_ClockConfig+0x1ec>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	f003 0307 	and.w	r3, r3, #7
 800c56c:	683a      	ldr	r2, [r7, #0]
 800c56e:	429a      	cmp	r2, r3
 800c570:	d910      	bls.n	800c594 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c572:	4b72      	ldr	r3, [pc, #456]	@ (800c73c <HAL_RCC_ClockConfig+0x1ec>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f023 0207 	bic.w	r2, r3, #7
 800c57a:	4970      	ldr	r1, [pc, #448]	@ (800c73c <HAL_RCC_ClockConfig+0x1ec>)
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	4313      	orrs	r3, r2
 800c580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c582:	4b6e      	ldr	r3, [pc, #440]	@ (800c73c <HAL_RCC_ClockConfig+0x1ec>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f003 0307 	and.w	r3, r3, #7
 800c58a:	683a      	ldr	r2, [r7, #0]
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d001      	beq.n	800c594 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c590:	2301      	movs	r3, #1
 800c592:	e0cf      	b.n	800c734 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f003 0302 	and.w	r3, r3, #2
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d010      	beq.n	800c5c2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	689a      	ldr	r2, [r3, #8]
 800c5a4:	4b66      	ldr	r3, [pc, #408]	@ (800c740 <HAL_RCC_ClockConfig+0x1f0>)
 800c5a6:	689b      	ldr	r3, [r3, #8]
 800c5a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d908      	bls.n	800c5c2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c5b0:	4b63      	ldr	r3, [pc, #396]	@ (800c740 <HAL_RCC_ClockConfig+0x1f0>)
 800c5b2:	689b      	ldr	r3, [r3, #8]
 800c5b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	689b      	ldr	r3, [r3, #8]
 800c5bc:	4960      	ldr	r1, [pc, #384]	@ (800c740 <HAL_RCC_ClockConfig+0x1f0>)
 800c5be:	4313      	orrs	r3, r2
 800c5c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f003 0301 	and.w	r3, r3, #1
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d04c      	beq.n	800c668 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	2b03      	cmp	r3, #3
 800c5d4:	d107      	bne.n	800c5e6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c5d6:	4b5a      	ldr	r3, [pc, #360]	@ (800c740 <HAL_RCC_ClockConfig+0x1f0>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d121      	bne.n	800c626 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	e0a6      	b.n	800c734 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	685b      	ldr	r3, [r3, #4]
 800c5ea:	2b02      	cmp	r3, #2
 800c5ec:	d107      	bne.n	800c5fe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c5ee:	4b54      	ldr	r3, [pc, #336]	@ (800c740 <HAL_RCC_ClockConfig+0x1f0>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d115      	bne.n	800c626 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	e09a      	b.n	800c734 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	685b      	ldr	r3, [r3, #4]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d107      	bne.n	800c616 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c606:	4b4e      	ldr	r3, [pc, #312]	@ (800c740 <HAL_RCC_ClockConfig+0x1f0>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f003 0302 	and.w	r3, r3, #2
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d109      	bne.n	800c626 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800c612:	2301      	movs	r3, #1
 800c614:	e08e      	b.n	800c734 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c616:	4b4a      	ldr	r3, [pc, #296]	@ (800c740 <HAL_RCC_ClockConfig+0x1f0>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d101      	bne.n	800c626 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800c622:	2301      	movs	r3, #1
 800c624:	e086      	b.n	800c734 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c626:	4b46      	ldr	r3, [pc, #280]	@ (800c740 <HAL_RCC_ClockConfig+0x1f0>)
 800c628:	689b      	ldr	r3, [r3, #8]
 800c62a:	f023 0203 	bic.w	r2, r3, #3
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	685b      	ldr	r3, [r3, #4]
 800c632:	4943      	ldr	r1, [pc, #268]	@ (800c740 <HAL_RCC_ClockConfig+0x1f0>)
 800c634:	4313      	orrs	r3, r2
 800c636:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c638:	f7fc fdd4 	bl	80091e4 <HAL_GetTick>
 800c63c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c63e:	e00a      	b.n	800c656 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c640:	f7fc fdd0 	bl	80091e4 <HAL_GetTick>
 800c644:	4602      	mov	r2, r0
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	1ad3      	subs	r3, r2, r3
 800c64a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c64e:	4293      	cmp	r3, r2
 800c650:	d901      	bls.n	800c656 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800c652:	2303      	movs	r3, #3
 800c654:	e06e      	b.n	800c734 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c656:	4b3a      	ldr	r3, [pc, #232]	@ (800c740 <HAL_RCC_ClockConfig+0x1f0>)
 800c658:	689b      	ldr	r3, [r3, #8]
 800c65a:	f003 020c 	and.w	r2, r3, #12
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	009b      	lsls	r3, r3, #2
 800c664:	429a      	cmp	r2, r3
 800c666:	d1eb      	bne.n	800c640 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f003 0302 	and.w	r3, r3, #2
 800c670:	2b00      	cmp	r3, #0
 800c672:	d010      	beq.n	800c696 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	689a      	ldr	r2, [r3, #8]
 800c678:	4b31      	ldr	r3, [pc, #196]	@ (800c740 <HAL_RCC_ClockConfig+0x1f0>)
 800c67a:	689b      	ldr	r3, [r3, #8]
 800c67c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c680:	429a      	cmp	r2, r3
 800c682:	d208      	bcs.n	800c696 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c684:	4b2e      	ldr	r3, [pc, #184]	@ (800c740 <HAL_RCC_ClockConfig+0x1f0>)
 800c686:	689b      	ldr	r3, [r3, #8]
 800c688:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	689b      	ldr	r3, [r3, #8]
 800c690:	492b      	ldr	r1, [pc, #172]	@ (800c740 <HAL_RCC_ClockConfig+0x1f0>)
 800c692:	4313      	orrs	r3, r2
 800c694:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c696:	4b29      	ldr	r3, [pc, #164]	@ (800c73c <HAL_RCC_ClockConfig+0x1ec>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f003 0307 	and.w	r3, r3, #7
 800c69e:	683a      	ldr	r2, [r7, #0]
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	d210      	bcs.n	800c6c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c6a4:	4b25      	ldr	r3, [pc, #148]	@ (800c73c <HAL_RCC_ClockConfig+0x1ec>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f023 0207 	bic.w	r2, r3, #7
 800c6ac:	4923      	ldr	r1, [pc, #140]	@ (800c73c <HAL_RCC_ClockConfig+0x1ec>)
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	4313      	orrs	r3, r2
 800c6b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c6b4:	4b21      	ldr	r3, [pc, #132]	@ (800c73c <HAL_RCC_ClockConfig+0x1ec>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f003 0307 	and.w	r3, r3, #7
 800c6bc:	683a      	ldr	r2, [r7, #0]
 800c6be:	429a      	cmp	r2, r3
 800c6c0:	d001      	beq.n	800c6c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	e036      	b.n	800c734 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f003 0304 	and.w	r3, r3, #4
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d008      	beq.n	800c6e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c6d2:	4b1b      	ldr	r3, [pc, #108]	@ (800c740 <HAL_RCC_ClockConfig+0x1f0>)
 800c6d4:	689b      	ldr	r3, [r3, #8]
 800c6d6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	68db      	ldr	r3, [r3, #12]
 800c6de:	4918      	ldr	r1, [pc, #96]	@ (800c740 <HAL_RCC_ClockConfig+0x1f0>)
 800c6e0:	4313      	orrs	r3, r2
 800c6e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f003 0308 	and.w	r3, r3, #8
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d009      	beq.n	800c704 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c6f0:	4b13      	ldr	r3, [pc, #76]	@ (800c740 <HAL_RCC_ClockConfig+0x1f0>)
 800c6f2:	689b      	ldr	r3, [r3, #8]
 800c6f4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	691b      	ldr	r3, [r3, #16]
 800c6fc:	00db      	lsls	r3, r3, #3
 800c6fe:	4910      	ldr	r1, [pc, #64]	@ (800c740 <HAL_RCC_ClockConfig+0x1f0>)
 800c700:	4313      	orrs	r3, r2
 800c702:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c704:	f000 f824 	bl	800c750 <HAL_RCC_GetSysClockFreq>
 800c708:	4602      	mov	r2, r0
 800c70a:	4b0d      	ldr	r3, [pc, #52]	@ (800c740 <HAL_RCC_ClockConfig+0x1f0>)
 800c70c:	689b      	ldr	r3, [r3, #8]
 800c70e:	091b      	lsrs	r3, r3, #4
 800c710:	f003 030f 	and.w	r3, r3, #15
 800c714:	490b      	ldr	r1, [pc, #44]	@ (800c744 <HAL_RCC_ClockConfig+0x1f4>)
 800c716:	5ccb      	ldrb	r3, [r1, r3]
 800c718:	f003 031f 	and.w	r3, r3, #31
 800c71c:	fa22 f303 	lsr.w	r3, r2, r3
 800c720:	4a09      	ldr	r2, [pc, #36]	@ (800c748 <HAL_RCC_ClockConfig+0x1f8>)
 800c722:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800c724:	4b09      	ldr	r3, [pc, #36]	@ (800c74c <HAL_RCC_ClockConfig+0x1fc>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	4618      	mov	r0, r3
 800c72a:	f7fc fd0b 	bl	8009144 <HAL_InitTick>
 800c72e:	4603      	mov	r3, r0
 800c730:	72fb      	strb	r3, [r7, #11]

  return status;
 800c732:	7afb      	ldrb	r3, [r7, #11]
}
 800c734:	4618      	mov	r0, r3
 800c736:	3710      	adds	r7, #16
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}
 800c73c:	40022000 	.word	0x40022000
 800c740:	40021000 	.word	0x40021000
 800c744:	0800fd44 	.word	0x0800fd44
 800c748:	2000005c 	.word	0x2000005c
 800c74c:	20000060 	.word	0x20000060

0800c750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c750:	b480      	push	{r7}
 800c752:	b089      	sub	sp, #36	@ 0x24
 800c754:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800c756:	2300      	movs	r3, #0
 800c758:	61fb      	str	r3, [r7, #28]
 800c75a:	2300      	movs	r3, #0
 800c75c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c75e:	4b3e      	ldr	r3, [pc, #248]	@ (800c858 <HAL_RCC_GetSysClockFreq+0x108>)
 800c760:	689b      	ldr	r3, [r3, #8]
 800c762:	f003 030c 	and.w	r3, r3, #12
 800c766:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c768:	4b3b      	ldr	r3, [pc, #236]	@ (800c858 <HAL_RCC_GetSysClockFreq+0x108>)
 800c76a:	68db      	ldr	r3, [r3, #12]
 800c76c:	f003 0303 	and.w	r3, r3, #3
 800c770:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d005      	beq.n	800c784 <HAL_RCC_GetSysClockFreq+0x34>
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	2b0c      	cmp	r3, #12
 800c77c:	d121      	bne.n	800c7c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	2b01      	cmp	r3, #1
 800c782:	d11e      	bne.n	800c7c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800c784:	4b34      	ldr	r3, [pc, #208]	@ (800c858 <HAL_RCC_GetSysClockFreq+0x108>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f003 0308 	and.w	r3, r3, #8
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d107      	bne.n	800c7a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800c790:	4b31      	ldr	r3, [pc, #196]	@ (800c858 <HAL_RCC_GetSysClockFreq+0x108>)
 800c792:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c796:	0a1b      	lsrs	r3, r3, #8
 800c798:	f003 030f 	and.w	r3, r3, #15
 800c79c:	61fb      	str	r3, [r7, #28]
 800c79e:	e005      	b.n	800c7ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800c7a0:	4b2d      	ldr	r3, [pc, #180]	@ (800c858 <HAL_RCC_GetSysClockFreq+0x108>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	091b      	lsrs	r3, r3, #4
 800c7a6:	f003 030f 	and.w	r3, r3, #15
 800c7aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800c7ac:	4a2b      	ldr	r2, [pc, #172]	@ (800c85c <HAL_RCC_GetSysClockFreq+0x10c>)
 800c7ae:	69fb      	ldr	r3, [r7, #28]
 800c7b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c7b6:	693b      	ldr	r3, [r7, #16]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d10d      	bne.n	800c7d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800c7bc:	69fb      	ldr	r3, [r7, #28]
 800c7be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c7c0:	e00a      	b.n	800c7d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800c7c2:	693b      	ldr	r3, [r7, #16]
 800c7c4:	2b04      	cmp	r3, #4
 800c7c6:	d102      	bne.n	800c7ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c7c8:	4b25      	ldr	r3, [pc, #148]	@ (800c860 <HAL_RCC_GetSysClockFreq+0x110>)
 800c7ca:	61bb      	str	r3, [r7, #24]
 800c7cc:	e004      	b.n	800c7d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	2b08      	cmp	r3, #8
 800c7d2:	d101      	bne.n	800c7d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c7d4:	4b23      	ldr	r3, [pc, #140]	@ (800c864 <HAL_RCC_GetSysClockFreq+0x114>)
 800c7d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	2b0c      	cmp	r3, #12
 800c7dc:	d134      	bne.n	800c848 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c7de:	4b1e      	ldr	r3, [pc, #120]	@ (800c858 <HAL_RCC_GetSysClockFreq+0x108>)
 800c7e0:	68db      	ldr	r3, [r3, #12]
 800c7e2:	f003 0303 	and.w	r3, r3, #3
 800c7e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	2b02      	cmp	r3, #2
 800c7ec:	d003      	beq.n	800c7f6 <HAL_RCC_GetSysClockFreq+0xa6>
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	2b03      	cmp	r3, #3
 800c7f2:	d003      	beq.n	800c7fc <HAL_RCC_GetSysClockFreq+0xac>
 800c7f4:	e005      	b.n	800c802 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800c7f6:	4b1a      	ldr	r3, [pc, #104]	@ (800c860 <HAL_RCC_GetSysClockFreq+0x110>)
 800c7f8:	617b      	str	r3, [r7, #20]
      break;
 800c7fa:	e005      	b.n	800c808 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800c7fc:	4b19      	ldr	r3, [pc, #100]	@ (800c864 <HAL_RCC_GetSysClockFreq+0x114>)
 800c7fe:	617b      	str	r3, [r7, #20]
      break;
 800c800:	e002      	b.n	800c808 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800c802:	69fb      	ldr	r3, [r7, #28]
 800c804:	617b      	str	r3, [r7, #20]
      break;
 800c806:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c808:	4b13      	ldr	r3, [pc, #76]	@ (800c858 <HAL_RCC_GetSysClockFreq+0x108>)
 800c80a:	68db      	ldr	r3, [r3, #12]
 800c80c:	091b      	lsrs	r3, r3, #4
 800c80e:	f003 0307 	and.w	r3, r3, #7
 800c812:	3301      	adds	r3, #1
 800c814:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800c816:	4b10      	ldr	r3, [pc, #64]	@ (800c858 <HAL_RCC_GetSysClockFreq+0x108>)
 800c818:	68db      	ldr	r3, [r3, #12]
 800c81a:	0a1b      	lsrs	r3, r3, #8
 800c81c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c820:	697a      	ldr	r2, [r7, #20]
 800c822:	fb03 f202 	mul.w	r2, r3, r2
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	fbb2 f3f3 	udiv	r3, r2, r3
 800c82c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c82e:	4b0a      	ldr	r3, [pc, #40]	@ (800c858 <HAL_RCC_GetSysClockFreq+0x108>)
 800c830:	68db      	ldr	r3, [r3, #12]
 800c832:	0e5b      	lsrs	r3, r3, #25
 800c834:	f003 0303 	and.w	r3, r3, #3
 800c838:	3301      	adds	r3, #1
 800c83a:	005b      	lsls	r3, r3, #1
 800c83c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800c83e:	697a      	ldr	r2, [r7, #20]
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	fbb2 f3f3 	udiv	r3, r2, r3
 800c846:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800c848:	69bb      	ldr	r3, [r7, #24]
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	3724      	adds	r7, #36	@ 0x24
 800c84e:	46bd      	mov	sp, r7
 800c850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c854:	4770      	bx	lr
 800c856:	bf00      	nop
 800c858:	40021000 	.word	0x40021000
 800c85c:	0800fd5c 	.word	0x0800fd5c
 800c860:	00f42400 	.word	0x00f42400
 800c864:	007a1200 	.word	0x007a1200

0800c868 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c868:	b480      	push	{r7}
 800c86a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c86c:	4b03      	ldr	r3, [pc, #12]	@ (800c87c <HAL_RCC_GetHCLKFreq+0x14>)
 800c86e:	681b      	ldr	r3, [r3, #0]
}
 800c870:	4618      	mov	r0, r3
 800c872:	46bd      	mov	sp, r7
 800c874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c878:	4770      	bx	lr
 800c87a:	bf00      	nop
 800c87c:	2000005c 	.word	0x2000005c

0800c880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800c884:	f7ff fff0 	bl	800c868 <HAL_RCC_GetHCLKFreq>
 800c888:	4602      	mov	r2, r0
 800c88a:	4b06      	ldr	r3, [pc, #24]	@ (800c8a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c88c:	689b      	ldr	r3, [r3, #8]
 800c88e:	0a1b      	lsrs	r3, r3, #8
 800c890:	f003 0307 	and.w	r3, r3, #7
 800c894:	4904      	ldr	r1, [pc, #16]	@ (800c8a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c896:	5ccb      	ldrb	r3, [r1, r3]
 800c898:	f003 031f 	and.w	r3, r3, #31
 800c89c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	bd80      	pop	{r7, pc}
 800c8a4:	40021000 	.word	0x40021000
 800c8a8:	0800fd54 	.word	0x0800fd54

0800c8ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800c8b0:	f7ff ffda 	bl	800c868 <HAL_RCC_GetHCLKFreq>
 800c8b4:	4602      	mov	r2, r0
 800c8b6:	4b06      	ldr	r3, [pc, #24]	@ (800c8d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c8b8:	689b      	ldr	r3, [r3, #8]
 800c8ba:	0adb      	lsrs	r3, r3, #11
 800c8bc:	f003 0307 	and.w	r3, r3, #7
 800c8c0:	4904      	ldr	r1, [pc, #16]	@ (800c8d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c8c2:	5ccb      	ldrb	r3, [r1, r3]
 800c8c4:	f003 031f 	and.w	r3, r3, #31
 800c8c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	bd80      	pop	{r7, pc}
 800c8d0:	40021000 	.word	0x40021000
 800c8d4:	0800fd54 	.word	0x0800fd54

0800c8d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b086      	sub	sp, #24
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800c8e4:	4b2a      	ldr	r3, [pc, #168]	@ (800c990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c8e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d003      	beq.n	800c8f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800c8f0:	f7ff f9b6 	bl	800bc60 <HAL_PWREx_GetVoltageRange>
 800c8f4:	6178      	str	r0, [r7, #20]
 800c8f6:	e014      	b.n	800c922 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800c8f8:	4b25      	ldr	r3, [pc, #148]	@ (800c990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c8fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8fc:	4a24      	ldr	r2, [pc, #144]	@ (800c990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c8fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c902:	6593      	str	r3, [r2, #88]	@ 0x58
 800c904:	4b22      	ldr	r3, [pc, #136]	@ (800c990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c908:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c90c:	60fb      	str	r3, [r7, #12]
 800c90e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800c910:	f7ff f9a6 	bl	800bc60 <HAL_PWREx_GetVoltageRange>
 800c914:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800c916:	4b1e      	ldr	r3, [pc, #120]	@ (800c990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c91a:	4a1d      	ldr	r2, [pc, #116]	@ (800c990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c91c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c920:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c928:	d10b      	bne.n	800c942 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2b80      	cmp	r3, #128	@ 0x80
 800c92e:	d919      	bls.n	800c964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2ba0      	cmp	r3, #160	@ 0xa0
 800c934:	d902      	bls.n	800c93c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c936:	2302      	movs	r3, #2
 800c938:	613b      	str	r3, [r7, #16]
 800c93a:	e013      	b.n	800c964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c93c:	2301      	movs	r3, #1
 800c93e:	613b      	str	r3, [r7, #16]
 800c940:	e010      	b.n	800c964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2b80      	cmp	r3, #128	@ 0x80
 800c946:	d902      	bls.n	800c94e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800c948:	2303      	movs	r3, #3
 800c94a:	613b      	str	r3, [r7, #16]
 800c94c:	e00a      	b.n	800c964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2b80      	cmp	r3, #128	@ 0x80
 800c952:	d102      	bne.n	800c95a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c954:	2302      	movs	r3, #2
 800c956:	613b      	str	r3, [r7, #16]
 800c958:	e004      	b.n	800c964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2b70      	cmp	r3, #112	@ 0x70
 800c95e:	d101      	bne.n	800c964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c960:	2301      	movs	r3, #1
 800c962:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800c964:	4b0b      	ldr	r3, [pc, #44]	@ (800c994 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	f023 0207 	bic.w	r2, r3, #7
 800c96c:	4909      	ldr	r1, [pc, #36]	@ (800c994 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	4313      	orrs	r3, r2
 800c972:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800c974:	4b07      	ldr	r3, [pc, #28]	@ (800c994 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f003 0307 	and.w	r3, r3, #7
 800c97c:	693a      	ldr	r2, [r7, #16]
 800c97e:	429a      	cmp	r2, r3
 800c980:	d001      	beq.n	800c986 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800c982:	2301      	movs	r3, #1
 800c984:	e000      	b.n	800c988 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800c986:	2300      	movs	r3, #0
}
 800c988:	4618      	mov	r0, r3
 800c98a:	3718      	adds	r7, #24
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}
 800c990:	40021000 	.word	0x40021000
 800c994:	40022000 	.word	0x40022000

0800c998 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b086      	sub	sp, #24
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d031      	beq.n	800ca18 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9b8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c9bc:	d01a      	beq.n	800c9f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800c9be:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c9c2:	d814      	bhi.n	800c9ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d009      	beq.n	800c9dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 800c9c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c9cc:	d10f      	bne.n	800c9ee <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800c9ce:	4b5d      	ldr	r3, [pc, #372]	@ (800cb44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c9d0:	68db      	ldr	r3, [r3, #12]
 800c9d2:	4a5c      	ldr	r2, [pc, #368]	@ (800cb44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c9d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c9d8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c9da:	e00c      	b.n	800c9f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	3304      	adds	r3, #4
 800c9e0:	2100      	movs	r1, #0
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f000 f9ce 	bl	800cd84 <RCCEx_PLLSAI1_Config>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c9ec:	e003      	b.n	800c9f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	74fb      	strb	r3, [r7, #19]
      break;
 800c9f2:	e000      	b.n	800c9f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800c9f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c9f6:	7cfb      	ldrb	r3, [r7, #19]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d10b      	bne.n	800ca14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c9fc:	4b51      	ldr	r3, [pc, #324]	@ (800cb44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c9fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ca02:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca0a:	494e      	ldr	r1, [pc, #312]	@ (800cb44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ca0c:	4313      	orrs	r3, r2
 800ca0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800ca12:	e001      	b.n	800ca18 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca14:	7cfb      	ldrb	r3, [r7, #19]
 800ca16:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	f000 809e 	beq.w	800cb62 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ca26:	2300      	movs	r3, #0
 800ca28:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800ca2a:	4b46      	ldr	r3, [pc, #280]	@ (800cb44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ca2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d101      	bne.n	800ca3a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800ca36:	2301      	movs	r3, #1
 800ca38:	e000      	b.n	800ca3c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d00d      	beq.n	800ca5c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ca40:	4b40      	ldr	r3, [pc, #256]	@ (800cb44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ca42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca44:	4a3f      	ldr	r2, [pc, #252]	@ (800cb44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ca46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ca4a:	6593      	str	r3, [r2, #88]	@ 0x58
 800ca4c:	4b3d      	ldr	r3, [pc, #244]	@ (800cb44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ca4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ca54:	60bb      	str	r3, [r7, #8]
 800ca56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ca58:	2301      	movs	r3, #1
 800ca5a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ca5c:	4b3a      	ldr	r3, [pc, #232]	@ (800cb48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	4a39      	ldr	r2, [pc, #228]	@ (800cb48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800ca62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ca66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ca68:	f7fc fbbc 	bl	80091e4 <HAL_GetTick>
 800ca6c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800ca6e:	e009      	b.n	800ca84 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ca70:	f7fc fbb8 	bl	80091e4 <HAL_GetTick>
 800ca74:	4602      	mov	r2, r0
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	1ad3      	subs	r3, r2, r3
 800ca7a:	2b02      	cmp	r3, #2
 800ca7c:	d902      	bls.n	800ca84 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800ca7e:	2303      	movs	r3, #3
 800ca80:	74fb      	strb	r3, [r7, #19]
        break;
 800ca82:	e005      	b.n	800ca90 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800ca84:	4b30      	ldr	r3, [pc, #192]	@ (800cb48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d0ef      	beq.n	800ca70 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800ca90:	7cfb      	ldrb	r3, [r7, #19]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d15a      	bne.n	800cb4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ca96:	4b2b      	ldr	r3, [pc, #172]	@ (800cb44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ca98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800caa0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d01e      	beq.n	800cae6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800caac:	697a      	ldr	r2, [r7, #20]
 800caae:	429a      	cmp	r2, r3
 800cab0:	d019      	beq.n	800cae6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800cab2:	4b24      	ldr	r3, [pc, #144]	@ (800cb44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800cab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cab8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cabc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800cabe:	4b21      	ldr	r3, [pc, #132]	@ (800cb44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800cac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cac4:	4a1f      	ldr	r2, [pc, #124]	@ (800cb44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800cac6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800caca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cace:	4b1d      	ldr	r3, [pc, #116]	@ (800cb44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800cad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cad4:	4a1b      	ldr	r2, [pc, #108]	@ (800cb44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800cad6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cada:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800cade:	4a19      	ldr	r2, [pc, #100]	@ (800cb44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	f003 0301 	and.w	r3, r3, #1
 800caec:	2b00      	cmp	r3, #0
 800caee:	d016      	beq.n	800cb1e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800caf0:	f7fc fb78 	bl	80091e4 <HAL_GetTick>
 800caf4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800caf6:	e00b      	b.n	800cb10 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800caf8:	f7fc fb74 	bl	80091e4 <HAL_GetTick>
 800cafc:	4602      	mov	r2, r0
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	1ad3      	subs	r3, r2, r3
 800cb02:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cb06:	4293      	cmp	r3, r2
 800cb08:	d902      	bls.n	800cb10 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800cb0a:	2303      	movs	r3, #3
 800cb0c:	74fb      	strb	r3, [r7, #19]
            break;
 800cb0e:	e006      	b.n	800cb1e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cb10:	4b0c      	ldr	r3, [pc, #48]	@ (800cb44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800cb12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb16:	f003 0302 	and.w	r3, r3, #2
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d0ec      	beq.n	800caf8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800cb1e:	7cfb      	ldrb	r3, [r7, #19]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d10b      	bne.n	800cb3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cb24:	4b07      	ldr	r3, [pc, #28]	@ (800cb44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800cb26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb2a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb32:	4904      	ldr	r1, [pc, #16]	@ (800cb44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800cb34:	4313      	orrs	r3, r2
 800cb36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800cb3a:	e009      	b.n	800cb50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800cb3c:	7cfb      	ldrb	r3, [r7, #19]
 800cb3e:	74bb      	strb	r3, [r7, #18]
 800cb40:	e006      	b.n	800cb50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800cb42:	bf00      	nop
 800cb44:	40021000 	.word	0x40021000
 800cb48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb4c:	7cfb      	ldrb	r3, [r7, #19]
 800cb4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cb50:	7c7b      	ldrb	r3, [r7, #17]
 800cb52:	2b01      	cmp	r3, #1
 800cb54:	d105      	bne.n	800cb62 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cb56:	4b8a      	ldr	r3, [pc, #552]	@ (800cd80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cb58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb5a:	4a89      	ldr	r2, [pc, #548]	@ (800cd80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cb5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cb60:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f003 0301 	and.w	r3, r3, #1
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d00a      	beq.n	800cb84 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800cb6e:	4b84      	ldr	r3, [pc, #528]	@ (800cd80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cb70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb74:	f023 0203 	bic.w	r2, r3, #3
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	6a1b      	ldr	r3, [r3, #32]
 800cb7c:	4980      	ldr	r1, [pc, #512]	@ (800cd80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cb7e:	4313      	orrs	r3, r2
 800cb80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f003 0302 	and.w	r3, r3, #2
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d00a      	beq.n	800cba6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800cb90:	4b7b      	ldr	r3, [pc, #492]	@ (800cd80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cb92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb96:	f023 020c 	bic.w	r2, r3, #12
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb9e:	4978      	ldr	r1, [pc, #480]	@ (800cd80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cba0:	4313      	orrs	r3, r2
 800cba2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	f003 0320 	and.w	r3, r3, #32
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d00a      	beq.n	800cbc8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cbb2:	4b73      	ldr	r3, [pc, #460]	@ (800cd80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cbb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cbb8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbc0:	496f      	ldr	r1, [pc, #444]	@ (800cd80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cbc2:	4313      	orrs	r3, r2
 800cbc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d00a      	beq.n	800cbea <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cbd4:	4b6a      	ldr	r3, [pc, #424]	@ (800cd80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cbd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cbda:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbe2:	4967      	ldr	r1, [pc, #412]	@ (800cd80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d00a      	beq.n	800cc0c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cbf6:	4b62      	ldr	r3, [pc, #392]	@ (800cd80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cbf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cbfc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc04:	495e      	ldr	r1, [pc, #376]	@ (800cd80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cc06:	4313      	orrs	r3, r2
 800cc08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d00a      	beq.n	800cc2e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cc18:	4b59      	ldr	r3, [pc, #356]	@ (800cd80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cc1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc1e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc26:	4956      	ldr	r1, [pc, #344]	@ (800cd80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cc28:	4313      	orrs	r3, r2
 800cc2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d00a      	beq.n	800cc50 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cc3a:	4b51      	ldr	r3, [pc, #324]	@ (800cd80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cc3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc40:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc48:	494d      	ldr	r1, [pc, #308]	@ (800cd80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cc4a:	4313      	orrs	r3, r2
 800cc4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d028      	beq.n	800ccae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cc5c:	4b48      	ldr	r3, [pc, #288]	@ (800cd80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cc5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc62:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc6a:	4945      	ldr	r1, [pc, #276]	@ (800cd80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cc6c:	4313      	orrs	r3, r2
 800cc6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cc7a:	d106      	bne.n	800cc8a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cc7c:	4b40      	ldr	r3, [pc, #256]	@ (800cd80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cc7e:	68db      	ldr	r3, [r3, #12]
 800cc80:	4a3f      	ldr	r2, [pc, #252]	@ (800cd80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cc82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cc86:	60d3      	str	r3, [r2, #12]
 800cc88:	e011      	b.n	800ccae <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc8e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cc92:	d10c      	bne.n	800ccae <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	3304      	adds	r3, #4
 800cc98:	2101      	movs	r1, #1
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f000 f872 	bl	800cd84 <RCCEx_PLLSAI1_Config>
 800cca0:	4603      	mov	r3, r0
 800cca2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800cca4:	7cfb      	ldrb	r3, [r7, #19]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d001      	beq.n	800ccae <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800ccaa:	7cfb      	ldrb	r3, [r7, #19]
 800ccac:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d028      	beq.n	800cd0c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ccba:	4b31      	ldr	r3, [pc, #196]	@ (800cd80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ccbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ccc0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccc8:	492d      	ldr	r1, [pc, #180]	@ (800cd80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ccca:	4313      	orrs	r3, r2
 800cccc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ccd8:	d106      	bne.n	800cce8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ccda:	4b29      	ldr	r3, [pc, #164]	@ (800cd80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ccdc:	68db      	ldr	r3, [r3, #12]
 800ccde:	4a28      	ldr	r2, [pc, #160]	@ (800cd80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cce0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cce4:	60d3      	str	r3, [r2, #12]
 800cce6:	e011      	b.n	800cd0c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ccf0:	d10c      	bne.n	800cd0c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	3304      	adds	r3, #4
 800ccf6:	2101      	movs	r1, #1
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f000 f843 	bl	800cd84 <RCCEx_PLLSAI1_Config>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800cd02:	7cfb      	ldrb	r3, [r7, #19]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d001      	beq.n	800cd0c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800cd08:	7cfb      	ldrb	r3, [r7, #19]
 800cd0a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d01c      	beq.n	800cd52 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cd18:	4b19      	ldr	r3, [pc, #100]	@ (800cd80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cd1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cd1e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd26:	4916      	ldr	r1, [pc, #88]	@ (800cd80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd36:	d10c      	bne.n	800cd52 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	3304      	adds	r3, #4
 800cd3c:	2102      	movs	r1, #2
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f000 f820 	bl	800cd84 <RCCEx_PLLSAI1_Config>
 800cd44:	4603      	mov	r3, r0
 800cd46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800cd48:	7cfb      	ldrb	r3, [r7, #19]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d001      	beq.n	800cd52 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800cd4e:	7cfb      	ldrb	r3, [r7, #19]
 800cd50:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d00a      	beq.n	800cd74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cd5e:	4b08      	ldr	r3, [pc, #32]	@ (800cd80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cd60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cd64:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cd6c:	4904      	ldr	r1, [pc, #16]	@ (800cd80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800cd6e:	4313      	orrs	r3, r2
 800cd70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800cd74:	7cbb      	ldrb	r3, [r7, #18]
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3718      	adds	r7, #24
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}
 800cd7e:	bf00      	nop
 800cd80:	40021000 	.word	0x40021000

0800cd84 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b084      	sub	sp, #16
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
 800cd8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800cd92:	4b74      	ldr	r3, [pc, #464]	@ (800cf64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cd94:	68db      	ldr	r3, [r3, #12]
 800cd96:	f003 0303 	and.w	r3, r3, #3
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d018      	beq.n	800cdd0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800cd9e:	4b71      	ldr	r3, [pc, #452]	@ (800cf64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cda0:	68db      	ldr	r3, [r3, #12]
 800cda2:	f003 0203 	and.w	r2, r3, #3
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	429a      	cmp	r2, r3
 800cdac:	d10d      	bne.n	800cdca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
       ||
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d009      	beq.n	800cdca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800cdb6:	4b6b      	ldr	r3, [pc, #428]	@ (800cf64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cdb8:	68db      	ldr	r3, [r3, #12]
 800cdba:	091b      	lsrs	r3, r3, #4
 800cdbc:	f003 0307 	and.w	r3, r3, #7
 800cdc0:	1c5a      	adds	r2, r3, #1
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	685b      	ldr	r3, [r3, #4]
       ||
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	d047      	beq.n	800ce5a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800cdca:	2301      	movs	r3, #1
 800cdcc:	73fb      	strb	r3, [r7, #15]
 800cdce:	e044      	b.n	800ce5a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	2b03      	cmp	r3, #3
 800cdd6:	d018      	beq.n	800ce0a <RCCEx_PLLSAI1_Config+0x86>
 800cdd8:	2b03      	cmp	r3, #3
 800cdda:	d825      	bhi.n	800ce28 <RCCEx_PLLSAI1_Config+0xa4>
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	d002      	beq.n	800cde6 <RCCEx_PLLSAI1_Config+0x62>
 800cde0:	2b02      	cmp	r3, #2
 800cde2:	d009      	beq.n	800cdf8 <RCCEx_PLLSAI1_Config+0x74>
 800cde4:	e020      	b.n	800ce28 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800cde6:	4b5f      	ldr	r3, [pc, #380]	@ (800cf64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	f003 0302 	and.w	r3, r3, #2
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d11d      	bne.n	800ce2e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cdf6:	e01a      	b.n	800ce2e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800cdf8:	4b5a      	ldr	r3, [pc, #360]	@ (800cf64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d116      	bne.n	800ce32 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800ce04:	2301      	movs	r3, #1
 800ce06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ce08:	e013      	b.n	800ce32 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800ce0a:	4b56      	ldr	r3, [pc, #344]	@ (800cf64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d10f      	bne.n	800ce36 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800ce16:	4b53      	ldr	r3, [pc, #332]	@ (800cf64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d109      	bne.n	800ce36 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800ce22:	2301      	movs	r3, #1
 800ce24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ce26:	e006      	b.n	800ce36 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800ce28:	2301      	movs	r3, #1
 800ce2a:	73fb      	strb	r3, [r7, #15]
      break;
 800ce2c:	e004      	b.n	800ce38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ce2e:	bf00      	nop
 800ce30:	e002      	b.n	800ce38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ce32:	bf00      	nop
 800ce34:	e000      	b.n	800ce38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ce36:	bf00      	nop
    }

    if(status == HAL_OK)
 800ce38:	7bfb      	ldrb	r3, [r7, #15]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d10d      	bne.n	800ce5a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800ce3e:	4b49      	ldr	r3, [pc, #292]	@ (800cf64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ce40:	68db      	ldr	r3, [r3, #12]
 800ce42:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6819      	ldr	r1, [r3, #0]
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	685b      	ldr	r3, [r3, #4]
 800ce4e:	3b01      	subs	r3, #1
 800ce50:	011b      	lsls	r3, r3, #4
 800ce52:	430b      	orrs	r3, r1
 800ce54:	4943      	ldr	r1, [pc, #268]	@ (800cf64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ce56:	4313      	orrs	r3, r2
 800ce58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800ce5a:	7bfb      	ldrb	r3, [r7, #15]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d17c      	bne.n	800cf5a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800ce60:	4b40      	ldr	r3, [pc, #256]	@ (800cf64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	4a3f      	ldr	r2, [pc, #252]	@ (800cf64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ce66:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ce6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce6c:	f7fc f9ba 	bl	80091e4 <HAL_GetTick>
 800ce70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ce72:	e009      	b.n	800ce88 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ce74:	f7fc f9b6 	bl	80091e4 <HAL_GetTick>
 800ce78:	4602      	mov	r2, r0
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	1ad3      	subs	r3, r2, r3
 800ce7e:	2b02      	cmp	r3, #2
 800ce80:	d902      	bls.n	800ce88 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800ce82:	2303      	movs	r3, #3
 800ce84:	73fb      	strb	r3, [r7, #15]
        break;
 800ce86:	e005      	b.n	800ce94 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ce88:	4b36      	ldr	r3, [pc, #216]	@ (800cf64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d1ef      	bne.n	800ce74 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800ce94:	7bfb      	ldrb	r3, [r7, #15]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d15f      	bne.n	800cf5a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d110      	bne.n	800cec2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cea0:	4b30      	ldr	r3, [pc, #192]	@ (800cf64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cea2:	691b      	ldr	r3, [r3, #16]
 800cea4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800cea8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800ceac:	687a      	ldr	r2, [r7, #4]
 800ceae:	6892      	ldr	r2, [r2, #8]
 800ceb0:	0211      	lsls	r1, r2, #8
 800ceb2:	687a      	ldr	r2, [r7, #4]
 800ceb4:	68d2      	ldr	r2, [r2, #12]
 800ceb6:	06d2      	lsls	r2, r2, #27
 800ceb8:	430a      	orrs	r2, r1
 800ceba:	492a      	ldr	r1, [pc, #168]	@ (800cf64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cebc:	4313      	orrs	r3, r2
 800cebe:	610b      	str	r3, [r1, #16]
 800cec0:	e027      	b.n	800cf12 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	2b01      	cmp	r3, #1
 800cec6:	d112      	bne.n	800ceee <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cec8:	4b26      	ldr	r3, [pc, #152]	@ (800cf64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ceca:	691b      	ldr	r3, [r3, #16]
 800cecc:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800ced0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800ced4:	687a      	ldr	r2, [r7, #4]
 800ced6:	6892      	ldr	r2, [r2, #8]
 800ced8:	0211      	lsls	r1, r2, #8
 800ceda:	687a      	ldr	r2, [r7, #4]
 800cedc:	6912      	ldr	r2, [r2, #16]
 800cede:	0852      	lsrs	r2, r2, #1
 800cee0:	3a01      	subs	r2, #1
 800cee2:	0552      	lsls	r2, r2, #21
 800cee4:	430a      	orrs	r2, r1
 800cee6:	491f      	ldr	r1, [pc, #124]	@ (800cf64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cee8:	4313      	orrs	r3, r2
 800ceea:	610b      	str	r3, [r1, #16]
 800ceec:	e011      	b.n	800cf12 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ceee:	4b1d      	ldr	r3, [pc, #116]	@ (800cf64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cef0:	691b      	ldr	r3, [r3, #16]
 800cef2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800cef6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800cefa:	687a      	ldr	r2, [r7, #4]
 800cefc:	6892      	ldr	r2, [r2, #8]
 800cefe:	0211      	lsls	r1, r2, #8
 800cf00:	687a      	ldr	r2, [r7, #4]
 800cf02:	6952      	ldr	r2, [r2, #20]
 800cf04:	0852      	lsrs	r2, r2, #1
 800cf06:	3a01      	subs	r2, #1
 800cf08:	0652      	lsls	r2, r2, #25
 800cf0a:	430a      	orrs	r2, r1
 800cf0c:	4915      	ldr	r1, [pc, #84]	@ (800cf64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cf0e:	4313      	orrs	r3, r2
 800cf10:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800cf12:	4b14      	ldr	r3, [pc, #80]	@ (800cf64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	4a13      	ldr	r2, [pc, #76]	@ (800cf64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cf18:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800cf1c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cf1e:	f7fc f961 	bl	80091e4 <HAL_GetTick>
 800cf22:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800cf24:	e009      	b.n	800cf3a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cf26:	f7fc f95d 	bl	80091e4 <HAL_GetTick>
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	1ad3      	subs	r3, r2, r3
 800cf30:	2b02      	cmp	r3, #2
 800cf32:	d902      	bls.n	800cf3a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800cf34:	2303      	movs	r3, #3
 800cf36:	73fb      	strb	r3, [r7, #15]
          break;
 800cf38:	e005      	b.n	800cf46 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800cf3a:	4b0a      	ldr	r3, [pc, #40]	@ (800cf64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d0ef      	beq.n	800cf26 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800cf46:	7bfb      	ldrb	r3, [r7, #15]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d106      	bne.n	800cf5a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800cf4c:	4b05      	ldr	r3, [pc, #20]	@ (800cf64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cf4e:	691a      	ldr	r2, [r3, #16]
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	699b      	ldr	r3, [r3, #24]
 800cf54:	4903      	ldr	r1, [pc, #12]	@ (800cf64 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cf56:	4313      	orrs	r3, r2
 800cf58:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800cf5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3710      	adds	r7, #16
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}
 800cf64:	40021000 	.word	0x40021000

0800cf68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b084      	sub	sp, #16
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d101      	bne.n	800cf7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cf76:	2301      	movs	r3, #1
 800cf78:	e095      	b.n	800d0a6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d108      	bne.n	800cf94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	685b      	ldr	r3, [r3, #4]
 800cf86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800cf8a:	d009      	beq.n	800cfa0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2200      	movs	r2, #0
 800cf90:	61da      	str	r2, [r3, #28]
 800cf92:	e005      	b.n	800cfa0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2200      	movs	r2, #0
 800cf98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800cfac:	b2db      	uxtb	r3, r3
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d106      	bne.n	800cfc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f7fb fe74 	bl	8008ca8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2202      	movs	r2, #2
 800cfc4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	681a      	ldr	r2, [r3, #0]
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cfd6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	68db      	ldr	r3, [r3, #12]
 800cfdc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800cfe0:	d902      	bls.n	800cfe8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	60fb      	str	r3, [r7, #12]
 800cfe6:	e002      	b.n	800cfee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800cfe8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cfec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	68db      	ldr	r3, [r3, #12]
 800cff2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800cff6:	d007      	beq.n	800d008 <HAL_SPI_Init+0xa0>
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	68db      	ldr	r3, [r3, #12]
 800cffc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d000:	d002      	beq.n	800d008 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2200      	movs	r2, #0
 800d006:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	685b      	ldr	r3, [r3, #4]
 800d00c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	689b      	ldr	r3, [r3, #8]
 800d014:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800d018:	431a      	orrs	r2, r3
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	691b      	ldr	r3, [r3, #16]
 800d01e:	f003 0302 	and.w	r3, r3, #2
 800d022:	431a      	orrs	r2, r3
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	695b      	ldr	r3, [r3, #20]
 800d028:	f003 0301 	and.w	r3, r3, #1
 800d02c:	431a      	orrs	r2, r3
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	699b      	ldr	r3, [r3, #24]
 800d032:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d036:	431a      	orrs	r2, r3
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	69db      	ldr	r3, [r3, #28]
 800d03c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d040:	431a      	orrs	r2, r3
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6a1b      	ldr	r3, [r3, #32]
 800d046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d04a:	ea42 0103 	orr.w	r1, r2, r3
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d052:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	430a      	orrs	r2, r1
 800d05c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	699b      	ldr	r3, [r3, #24]
 800d062:	0c1b      	lsrs	r3, r3, #16
 800d064:	f003 0204 	and.w	r2, r3, #4
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d06c:	f003 0310 	and.w	r3, r3, #16
 800d070:	431a      	orrs	r2, r3
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d076:	f003 0308 	and.w	r3, r3, #8
 800d07a:	431a      	orrs	r2, r3
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	68db      	ldr	r3, [r3, #12]
 800d080:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800d084:	ea42 0103 	orr.w	r1, r2, r3
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	430a      	orrs	r2, r1
 800d094:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2200      	movs	r2, #0
 800d09a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2201      	movs	r2, #1
 800d0a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800d0a4:	2300      	movs	r3, #0
}
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	3710      	adds	r7, #16
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}

0800d0ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800d0ae:	b580      	push	{r7, lr}
 800d0b0:	b08a      	sub	sp, #40	@ 0x28
 800d0b2:	af00      	add	r7, sp, #0
 800d0b4:	60f8      	str	r0, [r7, #12]
 800d0b6:	60b9      	str	r1, [r7, #8]
 800d0b8:	607a      	str	r2, [r7, #4]
 800d0ba:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d0bc:	2301      	movs	r3, #1
 800d0be:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d0c0:	f7fc f890 	bl	80091e4 <HAL_GetTick>
 800d0c4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d0cc:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	685b      	ldr	r3, [r3, #4]
 800d0d2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800d0d4:	887b      	ldrh	r3, [r7, #2]
 800d0d6:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800d0d8:	887b      	ldrh	r3, [r7, #2]
 800d0da:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d0dc:	7ffb      	ldrb	r3, [r7, #31]
 800d0de:	2b01      	cmp	r3, #1
 800d0e0:	d00c      	beq.n	800d0fc <HAL_SPI_TransmitReceive+0x4e>
 800d0e2:	69bb      	ldr	r3, [r7, #24]
 800d0e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d0e8:	d106      	bne.n	800d0f8 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	689b      	ldr	r3, [r3, #8]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d102      	bne.n	800d0f8 <HAL_SPI_TransmitReceive+0x4a>
 800d0f2:	7ffb      	ldrb	r3, [r7, #31]
 800d0f4:	2b04      	cmp	r3, #4
 800d0f6:	d001      	beq.n	800d0fc <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800d0f8:	2302      	movs	r3, #2
 800d0fa:	e1f3      	b.n	800d4e4 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d005      	beq.n	800d10e <HAL_SPI_TransmitReceive+0x60>
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d002      	beq.n	800d10e <HAL_SPI_TransmitReceive+0x60>
 800d108:	887b      	ldrh	r3, [r7, #2]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d101      	bne.n	800d112 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800d10e:	2301      	movs	r3, #1
 800d110:	e1e8      	b.n	800d4e4 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800d118:	2b01      	cmp	r3, #1
 800d11a:	d101      	bne.n	800d120 <HAL_SPI_TransmitReceive+0x72>
 800d11c:	2302      	movs	r3, #2
 800d11e:	e1e1      	b.n	800d4e4 <HAL_SPI_TransmitReceive+0x436>
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	2201      	movs	r2, #1
 800d124:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d12e:	b2db      	uxtb	r3, r3
 800d130:	2b04      	cmp	r3, #4
 800d132:	d003      	beq.n	800d13c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	2205      	movs	r2, #5
 800d138:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	2200      	movs	r2, #0
 800d140:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	687a      	ldr	r2, [r7, #4]
 800d146:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	887a      	ldrh	r2, [r7, #2]
 800d14c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	887a      	ldrh	r2, [r7, #2]
 800d154:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	68ba      	ldr	r2, [r7, #8]
 800d15c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	887a      	ldrh	r2, [r7, #2]
 800d162:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	887a      	ldrh	r2, [r7, #2]
 800d168:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	2200      	movs	r2, #0
 800d16e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2200      	movs	r2, #0
 800d174:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	68db      	ldr	r3, [r3, #12]
 800d17a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d17e:	d802      	bhi.n	800d186 <HAL_SPI_TransmitReceive+0xd8>
 800d180:	8abb      	ldrh	r3, [r7, #20]
 800d182:	2b01      	cmp	r3, #1
 800d184:	d908      	bls.n	800d198 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	685a      	ldr	r2, [r3, #4]
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d194:	605a      	str	r2, [r3, #4]
 800d196:	e007      	b.n	800d1a8 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	685a      	ldr	r2, [r3, #4]
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d1a6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1b2:	2b40      	cmp	r3, #64	@ 0x40
 800d1b4:	d007      	beq.n	800d1c6 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	681a      	ldr	r2, [r3, #0]
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d1c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	68db      	ldr	r3, [r3, #12]
 800d1ca:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d1ce:	f240 8083 	bls.w	800d2d8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	685b      	ldr	r3, [r3, #4]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d002      	beq.n	800d1e0 <HAL_SPI_TransmitReceive+0x132>
 800d1da:	8afb      	ldrh	r3, [r7, #22]
 800d1dc:	2b01      	cmp	r3, #1
 800d1de:	d16f      	bne.n	800d2c0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1e4:	881a      	ldrh	r2, [r3, #0]
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1f0:	1c9a      	adds	r2, r3, #2
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d1fa:	b29b      	uxth	r3, r3
 800d1fc:	3b01      	subs	r3, #1
 800d1fe:	b29a      	uxth	r2, r3
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d204:	e05c      	b.n	800d2c0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	689b      	ldr	r3, [r3, #8]
 800d20c:	f003 0302 	and.w	r3, r3, #2
 800d210:	2b02      	cmp	r3, #2
 800d212:	d11b      	bne.n	800d24c <HAL_SPI_TransmitReceive+0x19e>
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d218:	b29b      	uxth	r3, r3
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d016      	beq.n	800d24c <HAL_SPI_TransmitReceive+0x19e>
 800d21e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d220:	2b01      	cmp	r3, #1
 800d222:	d113      	bne.n	800d24c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d228:	881a      	ldrh	r2, [r3, #0]
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d234:	1c9a      	adds	r2, r3, #2
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d23e:	b29b      	uxth	r3, r3
 800d240:	3b01      	subs	r3, #1
 800d242:	b29a      	uxth	r2, r3
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d248:	2300      	movs	r3, #0
 800d24a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	689b      	ldr	r3, [r3, #8]
 800d252:	f003 0301 	and.w	r3, r3, #1
 800d256:	2b01      	cmp	r3, #1
 800d258:	d11c      	bne.n	800d294 <HAL_SPI_TransmitReceive+0x1e6>
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d260:	b29b      	uxth	r3, r3
 800d262:	2b00      	cmp	r3, #0
 800d264:	d016      	beq.n	800d294 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	68da      	ldr	r2, [r3, #12]
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d270:	b292      	uxth	r2, r2
 800d272:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d278:	1c9a      	adds	r2, r3, #2
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d284:	b29b      	uxth	r3, r3
 800d286:	3b01      	subs	r3, #1
 800d288:	b29a      	uxth	r2, r3
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d290:	2301      	movs	r3, #1
 800d292:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d294:	f7fb ffa6 	bl	80091e4 <HAL_GetTick>
 800d298:	4602      	mov	r2, r0
 800d29a:	6a3b      	ldr	r3, [r7, #32]
 800d29c:	1ad3      	subs	r3, r2, r3
 800d29e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2a0:	429a      	cmp	r2, r3
 800d2a2:	d80d      	bhi.n	800d2c0 <HAL_SPI_TransmitReceive+0x212>
 800d2a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d2aa:	d009      	beq.n	800d2c0 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	2201      	movs	r2, #1
 800d2b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800d2bc:	2303      	movs	r3, #3
 800d2be:	e111      	b.n	800d4e4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d2c4:	b29b      	uxth	r3, r3
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d19d      	bne.n	800d206 <HAL_SPI_TransmitReceive+0x158>
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d2d0:	b29b      	uxth	r3, r3
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d197      	bne.n	800d206 <HAL_SPI_TransmitReceive+0x158>
 800d2d6:	e0e5      	b.n	800d4a4 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	685b      	ldr	r3, [r3, #4]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d003      	beq.n	800d2e8 <HAL_SPI_TransmitReceive+0x23a>
 800d2e0:	8afb      	ldrh	r3, [r7, #22]
 800d2e2:	2b01      	cmp	r3, #1
 800d2e4:	f040 80d1 	bne.w	800d48a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d2ec:	b29b      	uxth	r3, r3
 800d2ee:	2b01      	cmp	r3, #1
 800d2f0:	d912      	bls.n	800d318 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2f6:	881a      	ldrh	r2, [r3, #0]
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d302:	1c9a      	adds	r2, r3, #2
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d30c:	b29b      	uxth	r3, r3
 800d30e:	3b02      	subs	r3, #2
 800d310:	b29a      	uxth	r2, r3
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d316:	e0b8      	b.n	800d48a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	330c      	adds	r3, #12
 800d322:	7812      	ldrb	r2, [r2, #0]
 800d324:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d32a:	1c5a      	adds	r2, r3, #1
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d334:	b29b      	uxth	r3, r3
 800d336:	3b01      	subs	r3, #1
 800d338:	b29a      	uxth	r2, r3
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d33e:	e0a4      	b.n	800d48a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	689b      	ldr	r3, [r3, #8]
 800d346:	f003 0302 	and.w	r3, r3, #2
 800d34a:	2b02      	cmp	r3, #2
 800d34c:	d134      	bne.n	800d3b8 <HAL_SPI_TransmitReceive+0x30a>
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d352:	b29b      	uxth	r3, r3
 800d354:	2b00      	cmp	r3, #0
 800d356:	d02f      	beq.n	800d3b8 <HAL_SPI_TransmitReceive+0x30a>
 800d358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d35a:	2b01      	cmp	r3, #1
 800d35c:	d12c      	bne.n	800d3b8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d362:	b29b      	uxth	r3, r3
 800d364:	2b01      	cmp	r3, #1
 800d366:	d912      	bls.n	800d38e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d36c:	881a      	ldrh	r2, [r3, #0]
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d378:	1c9a      	adds	r2, r3, #2
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d382:	b29b      	uxth	r3, r3
 800d384:	3b02      	subs	r3, #2
 800d386:	b29a      	uxth	r2, r3
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d38c:	e012      	b.n	800d3b4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	330c      	adds	r3, #12
 800d398:	7812      	ldrb	r2, [r2, #0]
 800d39a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3a0:	1c5a      	adds	r2, r3, #1
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d3aa:	b29b      	uxth	r3, r3
 800d3ac:	3b01      	subs	r3, #1
 800d3ae:	b29a      	uxth	r2, r3
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	689b      	ldr	r3, [r3, #8]
 800d3be:	f003 0301 	and.w	r3, r3, #1
 800d3c2:	2b01      	cmp	r3, #1
 800d3c4:	d148      	bne.n	800d458 <HAL_SPI_TransmitReceive+0x3aa>
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d3cc:	b29b      	uxth	r3, r3
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d042      	beq.n	800d458 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d3d8:	b29b      	uxth	r3, r3
 800d3da:	2b01      	cmp	r3, #1
 800d3dc:	d923      	bls.n	800d426 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	68da      	ldr	r2, [r3, #12]
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3e8:	b292      	uxth	r2, r2
 800d3ea:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3f0:	1c9a      	adds	r2, r3, #2
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d3fc:	b29b      	uxth	r3, r3
 800d3fe:	3b02      	subs	r3, #2
 800d400:	b29a      	uxth	r2, r3
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d40e:	b29b      	uxth	r3, r3
 800d410:	2b01      	cmp	r3, #1
 800d412:	d81f      	bhi.n	800d454 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	685a      	ldr	r2, [r3, #4]
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d422:	605a      	str	r2, [r3, #4]
 800d424:	e016      	b.n	800d454 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f103 020c 	add.w	r2, r3, #12
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d432:	7812      	ldrb	r2, [r2, #0]
 800d434:	b2d2      	uxtb	r2, r2
 800d436:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d43c:	1c5a      	adds	r2, r3, #1
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d448:	b29b      	uxth	r3, r3
 800d44a:	3b01      	subs	r3, #1
 800d44c:	b29a      	uxth	r2, r3
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d454:	2301      	movs	r3, #1
 800d456:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d458:	f7fb fec4 	bl	80091e4 <HAL_GetTick>
 800d45c:	4602      	mov	r2, r0
 800d45e:	6a3b      	ldr	r3, [r7, #32]
 800d460:	1ad3      	subs	r3, r2, r3
 800d462:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d464:	429a      	cmp	r2, r3
 800d466:	d803      	bhi.n	800d470 <HAL_SPI_TransmitReceive+0x3c2>
 800d468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d46a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d46e:	d102      	bne.n	800d476 <HAL_SPI_TransmitReceive+0x3c8>
 800d470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d472:	2b00      	cmp	r3, #0
 800d474:	d109      	bne.n	800d48a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	2201      	movs	r2, #1
 800d47a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	2200      	movs	r2, #0
 800d482:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800d486:	2303      	movs	r3, #3
 800d488:	e02c      	b.n	800d4e4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d48e:	b29b      	uxth	r3, r3
 800d490:	2b00      	cmp	r3, #0
 800d492:	f47f af55 	bne.w	800d340 <HAL_SPI_TransmitReceive+0x292>
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d49c:	b29b      	uxth	r3, r3
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	f47f af4e 	bne.w	800d340 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d4a4:	6a3a      	ldr	r2, [r7, #32]
 800d4a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d4a8:	68f8      	ldr	r0, [r7, #12]
 800d4aa:	f000 f93d 	bl	800d728 <SPI_EndRxTxTransaction>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d008      	beq.n	800d4c6 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	2220      	movs	r2, #32
 800d4b8:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	2200      	movs	r2, #0
 800d4be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	e00e      	b.n	800d4e4 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	2201      	movs	r2, #1
 800d4ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d001      	beq.n	800d4e2 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800d4de:	2301      	movs	r3, #1
 800d4e0:	e000      	b.n	800d4e4 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800d4e2:	2300      	movs	r3, #0
  }
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	3728      	adds	r7, #40	@ 0x28
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}

0800d4ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b088      	sub	sp, #32
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	60f8      	str	r0, [r7, #12]
 800d4f4:	60b9      	str	r1, [r7, #8]
 800d4f6:	603b      	str	r3, [r7, #0]
 800d4f8:	4613      	mov	r3, r2
 800d4fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d4fc:	f7fb fe72 	bl	80091e4 <HAL_GetTick>
 800d500:	4602      	mov	r2, r0
 800d502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d504:	1a9b      	subs	r3, r3, r2
 800d506:	683a      	ldr	r2, [r7, #0]
 800d508:	4413      	add	r3, r2
 800d50a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d50c:	f7fb fe6a 	bl	80091e4 <HAL_GetTick>
 800d510:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d512:	4b39      	ldr	r3, [pc, #228]	@ (800d5f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	015b      	lsls	r3, r3, #5
 800d518:	0d1b      	lsrs	r3, r3, #20
 800d51a:	69fa      	ldr	r2, [r7, #28]
 800d51c:	fb02 f303 	mul.w	r3, r2, r3
 800d520:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d522:	e054      	b.n	800d5ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d52a:	d050      	beq.n	800d5ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d52c:	f7fb fe5a 	bl	80091e4 <HAL_GetTick>
 800d530:	4602      	mov	r2, r0
 800d532:	69bb      	ldr	r3, [r7, #24]
 800d534:	1ad3      	subs	r3, r2, r3
 800d536:	69fa      	ldr	r2, [r7, #28]
 800d538:	429a      	cmp	r2, r3
 800d53a:	d902      	bls.n	800d542 <SPI_WaitFlagStateUntilTimeout+0x56>
 800d53c:	69fb      	ldr	r3, [r7, #28]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d13d      	bne.n	800d5be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	685a      	ldr	r2, [r3, #4]
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d550:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	685b      	ldr	r3, [r3, #4]
 800d556:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d55a:	d111      	bne.n	800d580 <SPI_WaitFlagStateUntilTimeout+0x94>
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	689b      	ldr	r3, [r3, #8]
 800d560:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d564:	d004      	beq.n	800d570 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	689b      	ldr	r3, [r3, #8]
 800d56a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d56e:	d107      	bne.n	800d580 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	681a      	ldr	r2, [r3, #0]
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d57e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d584:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d588:	d10f      	bne.n	800d5aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	681a      	ldr	r2, [r3, #0]
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d598:	601a      	str	r2, [r3, #0]
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	681a      	ldr	r2, [r3, #0]
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d5a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	2201      	movs	r2, #1
 800d5ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800d5ba:	2303      	movs	r3, #3
 800d5bc:	e017      	b.n	800d5ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d101      	bne.n	800d5c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	3b01      	subs	r3, #1
 800d5cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	689a      	ldr	r2, [r3, #8]
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	4013      	ands	r3, r2
 800d5d8:	68ba      	ldr	r2, [r7, #8]
 800d5da:	429a      	cmp	r2, r3
 800d5dc:	bf0c      	ite	eq
 800d5de:	2301      	moveq	r3, #1
 800d5e0:	2300      	movne	r3, #0
 800d5e2:	b2db      	uxtb	r3, r3
 800d5e4:	461a      	mov	r2, r3
 800d5e6:	79fb      	ldrb	r3, [r7, #7]
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	d19b      	bne.n	800d524 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d5ec:	2300      	movs	r3, #0
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	3720      	adds	r7, #32
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}
 800d5f6:	bf00      	nop
 800d5f8:	2000005c 	.word	0x2000005c

0800d5fc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b08a      	sub	sp, #40	@ 0x28
 800d600:	af00      	add	r7, sp, #0
 800d602:	60f8      	str	r0, [r7, #12]
 800d604:	60b9      	str	r1, [r7, #8]
 800d606:	607a      	str	r2, [r7, #4]
 800d608:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800d60a:	2300      	movs	r3, #0
 800d60c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800d60e:	f7fb fde9 	bl	80091e4 <HAL_GetTick>
 800d612:	4602      	mov	r2, r0
 800d614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d616:	1a9b      	subs	r3, r3, r2
 800d618:	683a      	ldr	r2, [r7, #0]
 800d61a:	4413      	add	r3, r2
 800d61c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800d61e:	f7fb fde1 	bl	80091e4 <HAL_GetTick>
 800d622:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	330c      	adds	r3, #12
 800d62a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d62c:	4b3d      	ldr	r3, [pc, #244]	@ (800d724 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800d62e:	681a      	ldr	r2, [r3, #0]
 800d630:	4613      	mov	r3, r2
 800d632:	009b      	lsls	r3, r3, #2
 800d634:	4413      	add	r3, r2
 800d636:	00da      	lsls	r2, r3, #3
 800d638:	1ad3      	subs	r3, r2, r3
 800d63a:	0d1b      	lsrs	r3, r3, #20
 800d63c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d63e:	fb02 f303 	mul.w	r3, r2, r3
 800d642:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800d644:	e060      	b.n	800d708 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800d64c:	d107      	bne.n	800d65e <SPI_WaitFifoStateUntilTimeout+0x62>
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d104      	bne.n	800d65e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800d654:	69fb      	ldr	r3, [r7, #28]
 800d656:	781b      	ldrb	r3, [r3, #0]
 800d658:	b2db      	uxtb	r3, r3
 800d65a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800d65c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d664:	d050      	beq.n	800d708 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d666:	f7fb fdbd 	bl	80091e4 <HAL_GetTick>
 800d66a:	4602      	mov	r2, r0
 800d66c:	6a3b      	ldr	r3, [r7, #32]
 800d66e:	1ad3      	subs	r3, r2, r3
 800d670:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d672:	429a      	cmp	r2, r3
 800d674:	d902      	bls.n	800d67c <SPI_WaitFifoStateUntilTimeout+0x80>
 800d676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d13d      	bne.n	800d6f8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	685a      	ldr	r2, [r3, #4]
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d68a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	685b      	ldr	r3, [r3, #4]
 800d690:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d694:	d111      	bne.n	800d6ba <SPI_WaitFifoStateUntilTimeout+0xbe>
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	689b      	ldr	r3, [r3, #8]
 800d69a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d69e:	d004      	beq.n	800d6aa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	689b      	ldr	r3, [r3, #8]
 800d6a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d6a8:	d107      	bne.n	800d6ba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	681a      	ldr	r2, [r3, #0]
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d6b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d6c2:	d10f      	bne.n	800d6e4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	681a      	ldr	r2, [r3, #0]
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d6d2:	601a      	str	r2, [r3, #0]
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	681a      	ldr	r2, [r3, #0]
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d6e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	2201      	movs	r2, #1
 800d6e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800d6f4:	2303      	movs	r3, #3
 800d6f6:	e010      	b.n	800d71a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d6f8:	69bb      	ldr	r3, [r7, #24]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d101      	bne.n	800d702 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800d6fe:	2300      	movs	r3, #0
 800d700:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800d702:	69bb      	ldr	r3, [r7, #24]
 800d704:	3b01      	subs	r3, #1
 800d706:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	689a      	ldr	r2, [r3, #8]
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	4013      	ands	r3, r2
 800d712:	687a      	ldr	r2, [r7, #4]
 800d714:	429a      	cmp	r2, r3
 800d716:	d196      	bne.n	800d646 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800d718:	2300      	movs	r3, #0
}
 800d71a:	4618      	mov	r0, r3
 800d71c:	3728      	adds	r7, #40	@ 0x28
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}
 800d722:	bf00      	nop
 800d724:	2000005c 	.word	0x2000005c

0800d728 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b086      	sub	sp, #24
 800d72c:	af02      	add	r7, sp, #8
 800d72e:	60f8      	str	r0, [r7, #12]
 800d730:	60b9      	str	r1, [r7, #8]
 800d732:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	9300      	str	r3, [sp, #0]
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	2200      	movs	r2, #0
 800d73c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800d740:	68f8      	ldr	r0, [r7, #12]
 800d742:	f7ff ff5b 	bl	800d5fc <SPI_WaitFifoStateUntilTimeout>
 800d746:	4603      	mov	r3, r0
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d007      	beq.n	800d75c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d750:	f043 0220 	orr.w	r2, r3, #32
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d758:	2303      	movs	r3, #3
 800d75a:	e027      	b.n	800d7ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	9300      	str	r3, [sp, #0]
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	2200      	movs	r2, #0
 800d764:	2180      	movs	r1, #128	@ 0x80
 800d766:	68f8      	ldr	r0, [r7, #12]
 800d768:	f7ff fec0 	bl	800d4ec <SPI_WaitFlagStateUntilTimeout>
 800d76c:	4603      	mov	r3, r0
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d007      	beq.n	800d782 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d776:	f043 0220 	orr.w	r2, r3, #32
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d77e:	2303      	movs	r3, #3
 800d780:	e014      	b.n	800d7ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	9300      	str	r3, [sp, #0]
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	2200      	movs	r2, #0
 800d78a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800d78e:	68f8      	ldr	r0, [r7, #12]
 800d790:	f7ff ff34 	bl	800d5fc <SPI_WaitFifoStateUntilTimeout>
 800d794:	4603      	mov	r3, r0
 800d796:	2b00      	cmp	r3, #0
 800d798:	d007      	beq.n	800d7aa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d79e:	f043 0220 	orr.w	r2, r3, #32
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d7a6:	2303      	movs	r3, #3
 800d7a8:	e000      	b.n	800d7ac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800d7aa:	2300      	movs	r3, #0
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3710      	adds	r7, #16
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}

0800d7b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b082      	sub	sp, #8
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d101      	bne.n	800d7c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d7c2:	2301      	movs	r3, #1
 800d7c4:	e049      	b.n	800d85a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d7cc:	b2db      	uxtb	r3, r3
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d106      	bne.n	800d7e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f7fb fba6 	bl	8008f2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2202      	movs	r2, #2
 800d7e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681a      	ldr	r2, [r3, #0]
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	3304      	adds	r3, #4
 800d7f0:	4619      	mov	r1, r3
 800d7f2:	4610      	mov	r0, r2
 800d7f4:	f000 f9ba 	bl	800db6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2201      	movs	r2, #1
 800d7fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2201      	movs	r2, #1
 800d804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2201      	movs	r2, #1
 800d80c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2201      	movs	r2, #1
 800d814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2201      	movs	r2, #1
 800d81c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	2201      	movs	r2, #1
 800d824:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2201      	movs	r2, #1
 800d82c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2201      	movs	r2, #1
 800d834:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2201      	movs	r2, #1
 800d83c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2201      	movs	r2, #1
 800d844:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2201      	movs	r2, #1
 800d84c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2201      	movs	r2, #1
 800d854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d858:	2300      	movs	r3, #0
}
 800d85a:	4618      	mov	r0, r3
 800d85c:	3708      	adds	r7, #8
 800d85e:	46bd      	mov	sp, r7
 800d860:	bd80      	pop	{r7, pc}
	...

0800d864 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d864:	b480      	push	{r7}
 800d866:	b085      	sub	sp, #20
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d872:	b2db      	uxtb	r3, r3
 800d874:	2b01      	cmp	r3, #1
 800d876:	d001      	beq.n	800d87c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d878:	2301      	movs	r3, #1
 800d87a:	e03b      	b.n	800d8f4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2202      	movs	r2, #2
 800d880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	68da      	ldr	r2, [r3, #12]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f042 0201 	orr.w	r2, r2, #1
 800d892:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	4a19      	ldr	r2, [pc, #100]	@ (800d900 <HAL_TIM_Base_Start_IT+0x9c>)
 800d89a:	4293      	cmp	r3, r2
 800d89c:	d009      	beq.n	800d8b2 <HAL_TIM_Base_Start_IT+0x4e>
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d8a6:	d004      	beq.n	800d8b2 <HAL_TIM_Base_Start_IT+0x4e>
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	4a15      	ldr	r2, [pc, #84]	@ (800d904 <HAL_TIM_Base_Start_IT+0xa0>)
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	d115      	bne.n	800d8de <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	689a      	ldr	r2, [r3, #8]
 800d8b8:	4b13      	ldr	r3, [pc, #76]	@ (800d908 <HAL_TIM_Base_Start_IT+0xa4>)
 800d8ba:	4013      	ands	r3, r2
 800d8bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	2b06      	cmp	r3, #6
 800d8c2:	d015      	beq.n	800d8f0 <HAL_TIM_Base_Start_IT+0x8c>
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d8ca:	d011      	beq.n	800d8f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	681a      	ldr	r2, [r3, #0]
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	f042 0201 	orr.w	r2, r2, #1
 800d8da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d8dc:	e008      	b.n	800d8f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	681a      	ldr	r2, [r3, #0]
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	f042 0201 	orr.w	r2, r2, #1
 800d8ec:	601a      	str	r2, [r3, #0]
 800d8ee:	e000      	b.n	800d8f2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d8f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d8f2:	2300      	movs	r3, #0
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3714      	adds	r7, #20
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fe:	4770      	bx	lr
 800d900:	40012c00 	.word	0x40012c00
 800d904:	40014000 	.word	0x40014000
 800d908:	00010007 	.word	0x00010007

0800d90c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b084      	sub	sp, #16
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	68db      	ldr	r3, [r3, #12]
 800d91a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	691b      	ldr	r3, [r3, #16]
 800d922:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	f003 0302 	and.w	r3, r3, #2
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d020      	beq.n	800d970 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	f003 0302 	and.w	r3, r3, #2
 800d934:	2b00      	cmp	r3, #0
 800d936:	d01b      	beq.n	800d970 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	f06f 0202 	mvn.w	r2, #2
 800d940:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2201      	movs	r2, #1
 800d946:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	699b      	ldr	r3, [r3, #24]
 800d94e:	f003 0303 	and.w	r3, r3, #3
 800d952:	2b00      	cmp	r3, #0
 800d954:	d003      	beq.n	800d95e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f000 f8e9 	bl	800db2e <HAL_TIM_IC_CaptureCallback>
 800d95c:	e005      	b.n	800d96a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f000 f8db 	bl	800db1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d964:	6878      	ldr	r0, [r7, #4]
 800d966:	f000 f8ec 	bl	800db42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2200      	movs	r2, #0
 800d96e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	f003 0304 	and.w	r3, r3, #4
 800d976:	2b00      	cmp	r3, #0
 800d978:	d020      	beq.n	800d9bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	f003 0304 	and.w	r3, r3, #4
 800d980:	2b00      	cmp	r3, #0
 800d982:	d01b      	beq.n	800d9bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	f06f 0204 	mvn.w	r2, #4
 800d98c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	2202      	movs	r2, #2
 800d992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	699b      	ldr	r3, [r3, #24]
 800d99a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d003      	beq.n	800d9aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	f000 f8c3 	bl	800db2e <HAL_TIM_IC_CaptureCallback>
 800d9a8:	e005      	b.n	800d9b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f000 f8b5 	bl	800db1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f000 f8c6 	bl	800db42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	f003 0308 	and.w	r3, r3, #8
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d020      	beq.n	800da08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	f003 0308 	and.w	r3, r3, #8
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d01b      	beq.n	800da08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	f06f 0208 	mvn.w	r2, #8
 800d9d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2204      	movs	r2, #4
 800d9de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	69db      	ldr	r3, [r3, #28]
 800d9e6:	f003 0303 	and.w	r3, r3, #3
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d003      	beq.n	800d9f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	f000 f89d 	bl	800db2e <HAL_TIM_IC_CaptureCallback>
 800d9f4:	e005      	b.n	800da02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f000 f88f 	bl	800db1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f000 f8a0 	bl	800db42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2200      	movs	r2, #0
 800da06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800da08:	68bb      	ldr	r3, [r7, #8]
 800da0a:	f003 0310 	and.w	r3, r3, #16
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d020      	beq.n	800da54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	f003 0310 	and.w	r3, r3, #16
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d01b      	beq.n	800da54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	f06f 0210 	mvn.w	r2, #16
 800da24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2208      	movs	r2, #8
 800da2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	69db      	ldr	r3, [r3, #28]
 800da32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800da36:	2b00      	cmp	r3, #0
 800da38:	d003      	beq.n	800da42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	f000 f877 	bl	800db2e <HAL_TIM_IC_CaptureCallback>
 800da40:	e005      	b.n	800da4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f000 f869 	bl	800db1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f000 f87a 	bl	800db42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2200      	movs	r2, #0
 800da52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800da54:	68bb      	ldr	r3, [r7, #8]
 800da56:	f003 0301 	and.w	r3, r3, #1
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d00c      	beq.n	800da78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	f003 0301 	and.w	r3, r3, #1
 800da64:	2b00      	cmp	r3, #0
 800da66:	d007      	beq.n	800da78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	f06f 0201 	mvn.w	r2, #1
 800da70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f7fa fa2e 	bl	8007ed4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d104      	bne.n	800da8c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d00c      	beq.n	800daa6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da92:	2b00      	cmp	r3, #0
 800da94:	d007      	beq.n	800daa6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800da9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800daa0:	6878      	ldr	r0, [r7, #4]
 800daa2:	f000 f943 	bl	800dd2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800daac:	2b00      	cmp	r3, #0
 800daae:	d00c      	beq.n	800daca <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d007      	beq.n	800daca <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800dac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f000 f93b 	bl	800dd40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d00c      	beq.n	800daee <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d007      	beq.n	800daee <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800dae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f000 f834 	bl	800db56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	f003 0320 	and.w	r3, r3, #32
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d00c      	beq.n	800db12 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	f003 0320 	and.w	r3, r3, #32
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d007      	beq.n	800db12 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	f06f 0220 	mvn.w	r2, #32
 800db0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800db0c:	6878      	ldr	r0, [r7, #4]
 800db0e:	f000 f903 	bl	800dd18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800db12:	bf00      	nop
 800db14:	3710      	adds	r7, #16
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}

0800db1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800db1a:	b480      	push	{r7}
 800db1c:	b083      	sub	sp, #12
 800db1e:	af00      	add	r7, sp, #0
 800db20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800db22:	bf00      	nop
 800db24:	370c      	adds	r7, #12
 800db26:	46bd      	mov	sp, r7
 800db28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2c:	4770      	bx	lr

0800db2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800db2e:	b480      	push	{r7}
 800db30:	b083      	sub	sp, #12
 800db32:	af00      	add	r7, sp, #0
 800db34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800db36:	bf00      	nop
 800db38:	370c      	adds	r7, #12
 800db3a:	46bd      	mov	sp, r7
 800db3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db40:	4770      	bx	lr

0800db42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800db42:	b480      	push	{r7}
 800db44:	b083      	sub	sp, #12
 800db46:	af00      	add	r7, sp, #0
 800db48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800db4a:	bf00      	nop
 800db4c:	370c      	adds	r7, #12
 800db4e:	46bd      	mov	sp, r7
 800db50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db54:	4770      	bx	lr

0800db56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800db56:	b480      	push	{r7}
 800db58:	b083      	sub	sp, #12
 800db5a:	af00      	add	r7, sp, #0
 800db5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800db5e:	bf00      	nop
 800db60:	370c      	adds	r7, #12
 800db62:	46bd      	mov	sp, r7
 800db64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db68:	4770      	bx	lr
	...

0800db6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800db6c:	b480      	push	{r7}
 800db6e:	b085      	sub	sp, #20
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
 800db74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	4a30      	ldr	r2, [pc, #192]	@ (800dc40 <TIM_Base_SetConfig+0xd4>)
 800db80:	4293      	cmp	r3, r2
 800db82:	d003      	beq.n	800db8c <TIM_Base_SetConfig+0x20>
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db8a:	d108      	bne.n	800db9e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800db92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	685b      	ldr	r3, [r3, #4]
 800db98:	68fa      	ldr	r2, [r7, #12]
 800db9a:	4313      	orrs	r3, r2
 800db9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	4a27      	ldr	r2, [pc, #156]	@ (800dc40 <TIM_Base_SetConfig+0xd4>)
 800dba2:	4293      	cmp	r3, r2
 800dba4:	d00b      	beq.n	800dbbe <TIM_Base_SetConfig+0x52>
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dbac:	d007      	beq.n	800dbbe <TIM_Base_SetConfig+0x52>
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	4a24      	ldr	r2, [pc, #144]	@ (800dc44 <TIM_Base_SetConfig+0xd8>)
 800dbb2:	4293      	cmp	r3, r2
 800dbb4:	d003      	beq.n	800dbbe <TIM_Base_SetConfig+0x52>
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	4a23      	ldr	r2, [pc, #140]	@ (800dc48 <TIM_Base_SetConfig+0xdc>)
 800dbba:	4293      	cmp	r3, r2
 800dbbc:	d108      	bne.n	800dbd0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dbc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	68db      	ldr	r3, [r3, #12]
 800dbca:	68fa      	ldr	r2, [r7, #12]
 800dbcc:	4313      	orrs	r3, r2
 800dbce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	695b      	ldr	r3, [r3, #20]
 800dbda:	4313      	orrs	r3, r2
 800dbdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	68fa      	ldr	r2, [r7, #12]
 800dbe2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	689a      	ldr	r2, [r3, #8]
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	681a      	ldr	r2, [r3, #0]
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	4a12      	ldr	r2, [pc, #72]	@ (800dc40 <TIM_Base_SetConfig+0xd4>)
 800dbf8:	4293      	cmp	r3, r2
 800dbfa:	d007      	beq.n	800dc0c <TIM_Base_SetConfig+0xa0>
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	4a11      	ldr	r2, [pc, #68]	@ (800dc44 <TIM_Base_SetConfig+0xd8>)
 800dc00:	4293      	cmp	r3, r2
 800dc02:	d003      	beq.n	800dc0c <TIM_Base_SetConfig+0xa0>
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	4a10      	ldr	r2, [pc, #64]	@ (800dc48 <TIM_Base_SetConfig+0xdc>)
 800dc08:	4293      	cmp	r3, r2
 800dc0a:	d103      	bne.n	800dc14 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	691a      	ldr	r2, [r3, #16]
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2201      	movs	r2, #1
 800dc18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	691b      	ldr	r3, [r3, #16]
 800dc1e:	f003 0301 	and.w	r3, r3, #1
 800dc22:	2b01      	cmp	r3, #1
 800dc24:	d105      	bne.n	800dc32 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	691b      	ldr	r3, [r3, #16]
 800dc2a:	f023 0201 	bic.w	r2, r3, #1
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	611a      	str	r2, [r3, #16]
  }
}
 800dc32:	bf00      	nop
 800dc34:	3714      	adds	r7, #20
 800dc36:	46bd      	mov	sp, r7
 800dc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3c:	4770      	bx	lr
 800dc3e:	bf00      	nop
 800dc40:	40012c00 	.word	0x40012c00
 800dc44:	40014000 	.word	0x40014000
 800dc48:	40014400 	.word	0x40014400

0800dc4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dc4c:	b480      	push	{r7}
 800dc4e:	b085      	sub	sp, #20
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
 800dc54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dc5c:	2b01      	cmp	r3, #1
 800dc5e:	d101      	bne.n	800dc64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dc60:	2302      	movs	r3, #2
 800dc62:	e04f      	b.n	800dd04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2201      	movs	r2, #1
 800dc68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2202      	movs	r2, #2
 800dc70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	685b      	ldr	r3, [r3, #4]
 800dc7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	689b      	ldr	r3, [r3, #8]
 800dc82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	4a21      	ldr	r2, [pc, #132]	@ (800dd10 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800dc8a:	4293      	cmp	r3, r2
 800dc8c:	d108      	bne.n	800dca0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800dc94:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	685b      	ldr	r3, [r3, #4]
 800dc9a:	68fa      	ldr	r2, [r7, #12]
 800dc9c:	4313      	orrs	r3, r2
 800dc9e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dca6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	68fa      	ldr	r2, [r7, #12]
 800dcae:	4313      	orrs	r3, r2
 800dcb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	68fa      	ldr	r2, [r7, #12]
 800dcb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	4a14      	ldr	r2, [pc, #80]	@ (800dd10 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800dcc0:	4293      	cmp	r3, r2
 800dcc2:	d009      	beq.n	800dcd8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dccc:	d004      	beq.n	800dcd8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	4a10      	ldr	r2, [pc, #64]	@ (800dd14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	d10c      	bne.n	800dcf2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dcde:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	689b      	ldr	r3, [r3, #8]
 800dce4:	68ba      	ldr	r2, [r7, #8]
 800dce6:	4313      	orrs	r3, r2
 800dce8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	68ba      	ldr	r2, [r7, #8]
 800dcf0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2201      	movs	r2, #1
 800dcf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800dd02:	2300      	movs	r3, #0
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3714      	adds	r7, #20
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0e:	4770      	bx	lr
 800dd10:	40012c00 	.word	0x40012c00
 800dd14:	40014000 	.word	0x40014000

0800dd18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dd18:	b480      	push	{r7}
 800dd1a:	b083      	sub	sp, #12
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dd20:	bf00      	nop
 800dd22:	370c      	adds	r7, #12
 800dd24:	46bd      	mov	sp, r7
 800dd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2a:	4770      	bx	lr

0800dd2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dd2c:	b480      	push	{r7}
 800dd2e:	b083      	sub	sp, #12
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dd34:	bf00      	nop
 800dd36:	370c      	adds	r7, #12
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3e:	4770      	bx	lr

0800dd40 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dd40:	b480      	push	{r7}
 800dd42:	b083      	sub	sp, #12
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dd48:	bf00      	nop
 800dd4a:	370c      	adds	r7, #12
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd52:	4770      	bx	lr

0800dd54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b082      	sub	sp, #8
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d101      	bne.n	800dd66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dd62:	2301      	movs	r3, #1
 800dd64:	e040      	b.n	800dde8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d106      	bne.n	800dd7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2200      	movs	r2, #0
 800dd72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f7fb f94a 	bl	8009010 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2224      	movs	r2, #36	@ 0x24
 800dd80:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	681a      	ldr	r2, [r3, #0]
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	f022 0201 	bic.w	r2, r2, #1
 800dd90:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d002      	beq.n	800dda0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f000 fade 	bl	800e35c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f000 f8af 	bl	800df04 <UART_SetConfig>
 800dda6:	4603      	mov	r3, r0
 800dda8:	2b01      	cmp	r3, #1
 800ddaa:	d101      	bne.n	800ddb0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800ddac:	2301      	movs	r3, #1
 800ddae:	e01b      	b.n	800dde8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	685a      	ldr	r2, [r3, #4]
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ddbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	689a      	ldr	r2, [r3, #8]
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ddce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	681a      	ldr	r2, [r3, #0]
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	f042 0201 	orr.w	r2, r2, #1
 800ddde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f000 fb5d 	bl	800e4a0 <UART_CheckIdleState>
 800dde6:	4603      	mov	r3, r0
}
 800dde8:	4618      	mov	r0, r3
 800ddea:	3708      	adds	r7, #8
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}

0800ddf0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b08a      	sub	sp, #40	@ 0x28
 800ddf4:	af02      	add	r7, sp, #8
 800ddf6:	60f8      	str	r0, [r7, #12]
 800ddf8:	60b9      	str	r1, [r7, #8]
 800ddfa:	603b      	str	r3, [r7, #0]
 800ddfc:	4613      	mov	r3, r2
 800ddfe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800de04:	2b20      	cmp	r3, #32
 800de06:	d177      	bne.n	800def8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800de08:	68bb      	ldr	r3, [r7, #8]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d002      	beq.n	800de14 <HAL_UART_Transmit+0x24>
 800de0e:	88fb      	ldrh	r3, [r7, #6]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d101      	bne.n	800de18 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800de14:	2301      	movs	r3, #1
 800de16:	e070      	b.n	800defa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	2200      	movs	r2, #0
 800de1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	2221      	movs	r2, #33	@ 0x21
 800de24:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800de26:	f7fb f9dd 	bl	80091e4 <HAL_GetTick>
 800de2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	88fa      	ldrh	r2, [r7, #6]
 800de30:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	88fa      	ldrh	r2, [r7, #6]
 800de38:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	689b      	ldr	r3, [r3, #8]
 800de40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800de44:	d108      	bne.n	800de58 <HAL_UART_Transmit+0x68>
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	691b      	ldr	r3, [r3, #16]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d104      	bne.n	800de58 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800de4e:	2300      	movs	r3, #0
 800de50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	61bb      	str	r3, [r7, #24]
 800de56:	e003      	b.n	800de60 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800de5c:	2300      	movs	r3, #0
 800de5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800de60:	e02f      	b.n	800dec2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	9300      	str	r3, [sp, #0]
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	2200      	movs	r2, #0
 800de6a:	2180      	movs	r1, #128	@ 0x80
 800de6c:	68f8      	ldr	r0, [r7, #12]
 800de6e:	f000 fbbf 	bl	800e5f0 <UART_WaitOnFlagUntilTimeout>
 800de72:	4603      	mov	r3, r0
 800de74:	2b00      	cmp	r3, #0
 800de76:	d004      	beq.n	800de82 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	2220      	movs	r2, #32
 800de7c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800de7e:	2303      	movs	r3, #3
 800de80:	e03b      	b.n	800defa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800de82:	69fb      	ldr	r3, [r7, #28]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d10b      	bne.n	800dea0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800de88:	69bb      	ldr	r3, [r7, #24]
 800de8a:	881a      	ldrh	r2, [r3, #0]
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800de94:	b292      	uxth	r2, r2
 800de96:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800de98:	69bb      	ldr	r3, [r7, #24]
 800de9a:	3302      	adds	r3, #2
 800de9c:	61bb      	str	r3, [r7, #24]
 800de9e:	e007      	b.n	800deb0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800dea0:	69fb      	ldr	r3, [r7, #28]
 800dea2:	781a      	ldrb	r2, [r3, #0]
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800deaa:	69fb      	ldr	r3, [r7, #28]
 800deac:	3301      	adds	r3, #1
 800deae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800deb6:	b29b      	uxth	r3, r3
 800deb8:	3b01      	subs	r3, #1
 800deba:	b29a      	uxth	r2, r3
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800dec8:	b29b      	uxth	r3, r3
 800deca:	2b00      	cmp	r3, #0
 800decc:	d1c9      	bne.n	800de62 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	9300      	str	r3, [sp, #0]
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	2200      	movs	r2, #0
 800ded6:	2140      	movs	r1, #64	@ 0x40
 800ded8:	68f8      	ldr	r0, [r7, #12]
 800deda:	f000 fb89 	bl	800e5f0 <UART_WaitOnFlagUntilTimeout>
 800dede:	4603      	mov	r3, r0
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d004      	beq.n	800deee <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	2220      	movs	r2, #32
 800dee8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800deea:	2303      	movs	r3, #3
 800deec:	e005      	b.n	800defa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	2220      	movs	r2, #32
 800def2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800def4:	2300      	movs	r3, #0
 800def6:	e000      	b.n	800defa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800def8:	2302      	movs	r3, #2
  }
}
 800defa:	4618      	mov	r0, r3
 800defc:	3720      	adds	r7, #32
 800defe:	46bd      	mov	sp, r7
 800df00:	bd80      	pop	{r7, pc}
	...

0800df04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800df04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800df08:	b08a      	sub	sp, #40	@ 0x28
 800df0a:	af00      	add	r7, sp, #0
 800df0c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800df0e:	2300      	movs	r3, #0
 800df10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	689a      	ldr	r2, [r3, #8]
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	691b      	ldr	r3, [r3, #16]
 800df1c:	431a      	orrs	r2, r3
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	695b      	ldr	r3, [r3, #20]
 800df22:	431a      	orrs	r2, r3
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	69db      	ldr	r3, [r3, #28]
 800df28:	4313      	orrs	r3, r2
 800df2a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	681a      	ldr	r2, [r3, #0]
 800df32:	4bb4      	ldr	r3, [pc, #720]	@ (800e204 <UART_SetConfig+0x300>)
 800df34:	4013      	ands	r3, r2
 800df36:	68fa      	ldr	r2, [r7, #12]
 800df38:	6812      	ldr	r2, [r2, #0]
 800df3a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800df3c:	430b      	orrs	r3, r1
 800df3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	685b      	ldr	r3, [r3, #4]
 800df46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	68da      	ldr	r2, [r3, #12]
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	430a      	orrs	r2, r1
 800df54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	699b      	ldr	r3, [r3, #24]
 800df5a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	4aa9      	ldr	r2, [pc, #676]	@ (800e208 <UART_SetConfig+0x304>)
 800df62:	4293      	cmp	r3, r2
 800df64:	d004      	beq.n	800df70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	6a1b      	ldr	r3, [r3, #32]
 800df6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800df6c:	4313      	orrs	r3, r2
 800df6e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	689b      	ldr	r3, [r3, #8]
 800df76:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800df80:	430a      	orrs	r2, r1
 800df82:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	4aa0      	ldr	r2, [pc, #640]	@ (800e20c <UART_SetConfig+0x308>)
 800df8a:	4293      	cmp	r3, r2
 800df8c:	d126      	bne.n	800dfdc <UART_SetConfig+0xd8>
 800df8e:	4ba0      	ldr	r3, [pc, #640]	@ (800e210 <UART_SetConfig+0x30c>)
 800df90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800df94:	f003 0303 	and.w	r3, r3, #3
 800df98:	2b03      	cmp	r3, #3
 800df9a:	d81b      	bhi.n	800dfd4 <UART_SetConfig+0xd0>
 800df9c:	a201      	add	r2, pc, #4	@ (adr r2, 800dfa4 <UART_SetConfig+0xa0>)
 800df9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfa2:	bf00      	nop
 800dfa4:	0800dfb5 	.word	0x0800dfb5
 800dfa8:	0800dfc5 	.word	0x0800dfc5
 800dfac:	0800dfbd 	.word	0x0800dfbd
 800dfb0:	0800dfcd 	.word	0x0800dfcd
 800dfb4:	2301      	movs	r3, #1
 800dfb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800dfba:	e080      	b.n	800e0be <UART_SetConfig+0x1ba>
 800dfbc:	2302      	movs	r3, #2
 800dfbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800dfc2:	e07c      	b.n	800e0be <UART_SetConfig+0x1ba>
 800dfc4:	2304      	movs	r3, #4
 800dfc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800dfca:	e078      	b.n	800e0be <UART_SetConfig+0x1ba>
 800dfcc:	2308      	movs	r3, #8
 800dfce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800dfd2:	e074      	b.n	800e0be <UART_SetConfig+0x1ba>
 800dfd4:	2310      	movs	r3, #16
 800dfd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800dfda:	e070      	b.n	800e0be <UART_SetConfig+0x1ba>
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	4a8c      	ldr	r2, [pc, #560]	@ (800e214 <UART_SetConfig+0x310>)
 800dfe2:	4293      	cmp	r3, r2
 800dfe4:	d138      	bne.n	800e058 <UART_SetConfig+0x154>
 800dfe6:	4b8a      	ldr	r3, [pc, #552]	@ (800e210 <UART_SetConfig+0x30c>)
 800dfe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dfec:	f003 030c 	and.w	r3, r3, #12
 800dff0:	2b0c      	cmp	r3, #12
 800dff2:	d82d      	bhi.n	800e050 <UART_SetConfig+0x14c>
 800dff4:	a201      	add	r2, pc, #4	@ (adr r2, 800dffc <UART_SetConfig+0xf8>)
 800dff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dffa:	bf00      	nop
 800dffc:	0800e031 	.word	0x0800e031
 800e000:	0800e051 	.word	0x0800e051
 800e004:	0800e051 	.word	0x0800e051
 800e008:	0800e051 	.word	0x0800e051
 800e00c:	0800e041 	.word	0x0800e041
 800e010:	0800e051 	.word	0x0800e051
 800e014:	0800e051 	.word	0x0800e051
 800e018:	0800e051 	.word	0x0800e051
 800e01c:	0800e039 	.word	0x0800e039
 800e020:	0800e051 	.word	0x0800e051
 800e024:	0800e051 	.word	0x0800e051
 800e028:	0800e051 	.word	0x0800e051
 800e02c:	0800e049 	.word	0x0800e049
 800e030:	2300      	movs	r3, #0
 800e032:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e036:	e042      	b.n	800e0be <UART_SetConfig+0x1ba>
 800e038:	2302      	movs	r3, #2
 800e03a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e03e:	e03e      	b.n	800e0be <UART_SetConfig+0x1ba>
 800e040:	2304      	movs	r3, #4
 800e042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e046:	e03a      	b.n	800e0be <UART_SetConfig+0x1ba>
 800e048:	2308      	movs	r3, #8
 800e04a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e04e:	e036      	b.n	800e0be <UART_SetConfig+0x1ba>
 800e050:	2310      	movs	r3, #16
 800e052:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e056:	e032      	b.n	800e0be <UART_SetConfig+0x1ba>
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	4a6a      	ldr	r2, [pc, #424]	@ (800e208 <UART_SetConfig+0x304>)
 800e05e:	4293      	cmp	r3, r2
 800e060:	d12a      	bne.n	800e0b8 <UART_SetConfig+0x1b4>
 800e062:	4b6b      	ldr	r3, [pc, #428]	@ (800e210 <UART_SetConfig+0x30c>)
 800e064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e068:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800e06c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e070:	d01a      	beq.n	800e0a8 <UART_SetConfig+0x1a4>
 800e072:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e076:	d81b      	bhi.n	800e0b0 <UART_SetConfig+0x1ac>
 800e078:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e07c:	d00c      	beq.n	800e098 <UART_SetConfig+0x194>
 800e07e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e082:	d815      	bhi.n	800e0b0 <UART_SetConfig+0x1ac>
 800e084:	2b00      	cmp	r3, #0
 800e086:	d003      	beq.n	800e090 <UART_SetConfig+0x18c>
 800e088:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e08c:	d008      	beq.n	800e0a0 <UART_SetConfig+0x19c>
 800e08e:	e00f      	b.n	800e0b0 <UART_SetConfig+0x1ac>
 800e090:	2300      	movs	r3, #0
 800e092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e096:	e012      	b.n	800e0be <UART_SetConfig+0x1ba>
 800e098:	2302      	movs	r3, #2
 800e09a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e09e:	e00e      	b.n	800e0be <UART_SetConfig+0x1ba>
 800e0a0:	2304      	movs	r3, #4
 800e0a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e0a6:	e00a      	b.n	800e0be <UART_SetConfig+0x1ba>
 800e0a8:	2308      	movs	r3, #8
 800e0aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e0ae:	e006      	b.n	800e0be <UART_SetConfig+0x1ba>
 800e0b0:	2310      	movs	r3, #16
 800e0b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800e0b6:	e002      	b.n	800e0be <UART_SetConfig+0x1ba>
 800e0b8:	2310      	movs	r3, #16
 800e0ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	4a51      	ldr	r2, [pc, #324]	@ (800e208 <UART_SetConfig+0x304>)
 800e0c4:	4293      	cmp	r3, r2
 800e0c6:	d17a      	bne.n	800e1be <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e0c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e0cc:	2b08      	cmp	r3, #8
 800e0ce:	d824      	bhi.n	800e11a <UART_SetConfig+0x216>
 800e0d0:	a201      	add	r2, pc, #4	@ (adr r2, 800e0d8 <UART_SetConfig+0x1d4>)
 800e0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0d6:	bf00      	nop
 800e0d8:	0800e0fd 	.word	0x0800e0fd
 800e0dc:	0800e11b 	.word	0x0800e11b
 800e0e0:	0800e105 	.word	0x0800e105
 800e0e4:	0800e11b 	.word	0x0800e11b
 800e0e8:	0800e10b 	.word	0x0800e10b
 800e0ec:	0800e11b 	.word	0x0800e11b
 800e0f0:	0800e11b 	.word	0x0800e11b
 800e0f4:	0800e11b 	.word	0x0800e11b
 800e0f8:	0800e113 	.word	0x0800e113
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e0fc:	f7fe fbc0 	bl	800c880 <HAL_RCC_GetPCLK1Freq>
 800e100:	61f8      	str	r0, [r7, #28]
        break;
 800e102:	e010      	b.n	800e126 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e104:	4b44      	ldr	r3, [pc, #272]	@ (800e218 <UART_SetConfig+0x314>)
 800e106:	61fb      	str	r3, [r7, #28]
        break;
 800e108:	e00d      	b.n	800e126 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e10a:	f7fe fb21 	bl	800c750 <HAL_RCC_GetSysClockFreq>
 800e10e:	61f8      	str	r0, [r7, #28]
        break;
 800e110:	e009      	b.n	800e126 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e112:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e116:	61fb      	str	r3, [r7, #28]
        break;
 800e118:	e005      	b.n	800e126 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800e11a:	2300      	movs	r3, #0
 800e11c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e11e:	2301      	movs	r3, #1
 800e120:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800e124:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e126:	69fb      	ldr	r3, [r7, #28]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	f000 8107 	beq.w	800e33c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	685a      	ldr	r2, [r3, #4]
 800e132:	4613      	mov	r3, r2
 800e134:	005b      	lsls	r3, r3, #1
 800e136:	4413      	add	r3, r2
 800e138:	69fa      	ldr	r2, [r7, #28]
 800e13a:	429a      	cmp	r2, r3
 800e13c:	d305      	bcc.n	800e14a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	685b      	ldr	r3, [r3, #4]
 800e142:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e144:	69fa      	ldr	r2, [r7, #28]
 800e146:	429a      	cmp	r2, r3
 800e148:	d903      	bls.n	800e152 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800e14a:	2301      	movs	r3, #1
 800e14c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800e150:	e0f4      	b.n	800e33c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800e152:	69fb      	ldr	r3, [r7, #28]
 800e154:	2200      	movs	r2, #0
 800e156:	461c      	mov	r4, r3
 800e158:	4615      	mov	r5, r2
 800e15a:	f04f 0200 	mov.w	r2, #0
 800e15e:	f04f 0300 	mov.w	r3, #0
 800e162:	022b      	lsls	r3, r5, #8
 800e164:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800e168:	0222      	lsls	r2, r4, #8
 800e16a:	68f9      	ldr	r1, [r7, #12]
 800e16c:	6849      	ldr	r1, [r1, #4]
 800e16e:	0849      	lsrs	r1, r1, #1
 800e170:	2000      	movs	r0, #0
 800e172:	4688      	mov	r8, r1
 800e174:	4681      	mov	r9, r0
 800e176:	eb12 0a08 	adds.w	sl, r2, r8
 800e17a:	eb43 0b09 	adc.w	fp, r3, r9
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	685b      	ldr	r3, [r3, #4]
 800e182:	2200      	movs	r2, #0
 800e184:	603b      	str	r3, [r7, #0]
 800e186:	607a      	str	r2, [r7, #4]
 800e188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e18c:	4650      	mov	r0, sl
 800e18e:	4659      	mov	r1, fp
 800e190:	f7f2 fc8c 	bl	8000aac <__aeabi_uldivmod>
 800e194:	4602      	mov	r2, r0
 800e196:	460b      	mov	r3, r1
 800e198:	4613      	mov	r3, r2
 800e19a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e19c:	69bb      	ldr	r3, [r7, #24]
 800e19e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e1a2:	d308      	bcc.n	800e1b6 <UART_SetConfig+0x2b2>
 800e1a4:	69bb      	ldr	r3, [r7, #24]
 800e1a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e1aa:	d204      	bcs.n	800e1b6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	69ba      	ldr	r2, [r7, #24]
 800e1b2:	60da      	str	r2, [r3, #12]
 800e1b4:	e0c2      	b.n	800e33c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800e1b6:	2301      	movs	r3, #1
 800e1b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800e1bc:	e0be      	b.n	800e33c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	69db      	ldr	r3, [r3, #28]
 800e1c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e1c6:	d16a      	bne.n	800e29e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800e1c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e1cc:	2b08      	cmp	r3, #8
 800e1ce:	d834      	bhi.n	800e23a <UART_SetConfig+0x336>
 800e1d0:	a201      	add	r2, pc, #4	@ (adr r2, 800e1d8 <UART_SetConfig+0x2d4>)
 800e1d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1d6:	bf00      	nop
 800e1d8:	0800e1fd 	.word	0x0800e1fd
 800e1dc:	0800e21d 	.word	0x0800e21d
 800e1e0:	0800e225 	.word	0x0800e225
 800e1e4:	0800e23b 	.word	0x0800e23b
 800e1e8:	0800e22b 	.word	0x0800e22b
 800e1ec:	0800e23b 	.word	0x0800e23b
 800e1f0:	0800e23b 	.word	0x0800e23b
 800e1f4:	0800e23b 	.word	0x0800e23b
 800e1f8:	0800e233 	.word	0x0800e233
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e1fc:	f7fe fb40 	bl	800c880 <HAL_RCC_GetPCLK1Freq>
 800e200:	61f8      	str	r0, [r7, #28]
        break;
 800e202:	e020      	b.n	800e246 <UART_SetConfig+0x342>
 800e204:	efff69f3 	.word	0xefff69f3
 800e208:	40008000 	.word	0x40008000
 800e20c:	40013800 	.word	0x40013800
 800e210:	40021000 	.word	0x40021000
 800e214:	40004400 	.word	0x40004400
 800e218:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e21c:	f7fe fb46 	bl	800c8ac <HAL_RCC_GetPCLK2Freq>
 800e220:	61f8      	str	r0, [r7, #28]
        break;
 800e222:	e010      	b.n	800e246 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e224:	4b4c      	ldr	r3, [pc, #304]	@ (800e358 <UART_SetConfig+0x454>)
 800e226:	61fb      	str	r3, [r7, #28]
        break;
 800e228:	e00d      	b.n	800e246 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e22a:	f7fe fa91 	bl	800c750 <HAL_RCC_GetSysClockFreq>
 800e22e:	61f8      	str	r0, [r7, #28]
        break;
 800e230:	e009      	b.n	800e246 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e232:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e236:	61fb      	str	r3, [r7, #28]
        break;
 800e238:	e005      	b.n	800e246 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800e23a:	2300      	movs	r3, #0
 800e23c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e23e:	2301      	movs	r3, #1
 800e240:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800e244:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e246:	69fb      	ldr	r3, [r7, #28]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d077      	beq.n	800e33c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e24c:	69fb      	ldr	r3, [r7, #28]
 800e24e:	005a      	lsls	r2, r3, #1
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	685b      	ldr	r3, [r3, #4]
 800e254:	085b      	lsrs	r3, r3, #1
 800e256:	441a      	add	r2, r3
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	685b      	ldr	r3, [r3, #4]
 800e25c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e260:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e262:	69bb      	ldr	r3, [r7, #24]
 800e264:	2b0f      	cmp	r3, #15
 800e266:	d916      	bls.n	800e296 <UART_SetConfig+0x392>
 800e268:	69bb      	ldr	r3, [r7, #24]
 800e26a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e26e:	d212      	bcs.n	800e296 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e270:	69bb      	ldr	r3, [r7, #24]
 800e272:	b29b      	uxth	r3, r3
 800e274:	f023 030f 	bic.w	r3, r3, #15
 800e278:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e27a:	69bb      	ldr	r3, [r7, #24]
 800e27c:	085b      	lsrs	r3, r3, #1
 800e27e:	b29b      	uxth	r3, r3
 800e280:	f003 0307 	and.w	r3, r3, #7
 800e284:	b29a      	uxth	r2, r3
 800e286:	8afb      	ldrh	r3, [r7, #22]
 800e288:	4313      	orrs	r3, r2
 800e28a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	8afa      	ldrh	r2, [r7, #22]
 800e292:	60da      	str	r2, [r3, #12]
 800e294:	e052      	b.n	800e33c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800e296:	2301      	movs	r3, #1
 800e298:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800e29c:	e04e      	b.n	800e33c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e29e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e2a2:	2b08      	cmp	r3, #8
 800e2a4:	d827      	bhi.n	800e2f6 <UART_SetConfig+0x3f2>
 800e2a6:	a201      	add	r2, pc, #4	@ (adr r2, 800e2ac <UART_SetConfig+0x3a8>)
 800e2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2ac:	0800e2d1 	.word	0x0800e2d1
 800e2b0:	0800e2d9 	.word	0x0800e2d9
 800e2b4:	0800e2e1 	.word	0x0800e2e1
 800e2b8:	0800e2f7 	.word	0x0800e2f7
 800e2bc:	0800e2e7 	.word	0x0800e2e7
 800e2c0:	0800e2f7 	.word	0x0800e2f7
 800e2c4:	0800e2f7 	.word	0x0800e2f7
 800e2c8:	0800e2f7 	.word	0x0800e2f7
 800e2cc:	0800e2ef 	.word	0x0800e2ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e2d0:	f7fe fad6 	bl	800c880 <HAL_RCC_GetPCLK1Freq>
 800e2d4:	61f8      	str	r0, [r7, #28]
        break;
 800e2d6:	e014      	b.n	800e302 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e2d8:	f7fe fae8 	bl	800c8ac <HAL_RCC_GetPCLK2Freq>
 800e2dc:	61f8      	str	r0, [r7, #28]
        break;
 800e2de:	e010      	b.n	800e302 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e2e0:	4b1d      	ldr	r3, [pc, #116]	@ (800e358 <UART_SetConfig+0x454>)
 800e2e2:	61fb      	str	r3, [r7, #28]
        break;
 800e2e4:	e00d      	b.n	800e302 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e2e6:	f7fe fa33 	bl	800c750 <HAL_RCC_GetSysClockFreq>
 800e2ea:	61f8      	str	r0, [r7, #28]
        break;
 800e2ec:	e009      	b.n	800e302 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e2ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e2f2:	61fb      	str	r3, [r7, #28]
        break;
 800e2f4:	e005      	b.n	800e302 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e2fa:	2301      	movs	r3, #1
 800e2fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800e300:	bf00      	nop
    }

    if (pclk != 0U)
 800e302:	69fb      	ldr	r3, [r7, #28]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d019      	beq.n	800e33c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	685b      	ldr	r3, [r3, #4]
 800e30c:	085a      	lsrs	r2, r3, #1
 800e30e:	69fb      	ldr	r3, [r7, #28]
 800e310:	441a      	add	r2, r3
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	685b      	ldr	r3, [r3, #4]
 800e316:	fbb2 f3f3 	udiv	r3, r2, r3
 800e31a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e31c:	69bb      	ldr	r3, [r7, #24]
 800e31e:	2b0f      	cmp	r3, #15
 800e320:	d909      	bls.n	800e336 <UART_SetConfig+0x432>
 800e322:	69bb      	ldr	r3, [r7, #24]
 800e324:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e328:	d205      	bcs.n	800e336 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e32a:	69bb      	ldr	r3, [r7, #24]
 800e32c:	b29a      	uxth	r2, r3
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	60da      	str	r2, [r3, #12]
 800e334:	e002      	b.n	800e33c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800e336:	2301      	movs	r3, #1
 800e338:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	2200      	movs	r2, #0
 800e340:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	2200      	movs	r2, #0
 800e346:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800e348:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800e34c:	4618      	mov	r0, r3
 800e34e:	3728      	adds	r7, #40	@ 0x28
 800e350:	46bd      	mov	sp, r7
 800e352:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e356:	bf00      	nop
 800e358:	00f42400 	.word	0x00f42400

0800e35c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e35c:	b480      	push	{r7}
 800e35e:	b083      	sub	sp, #12
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e368:	f003 0308 	and.w	r3, r3, #8
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d00a      	beq.n	800e386 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	685b      	ldr	r3, [r3, #4]
 800e376:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	430a      	orrs	r2, r1
 800e384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e38a:	f003 0301 	and.w	r3, r3, #1
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d00a      	beq.n	800e3a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	685b      	ldr	r3, [r3, #4]
 800e398:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	430a      	orrs	r2, r1
 800e3a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3ac:	f003 0302 	and.w	r3, r3, #2
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d00a      	beq.n	800e3ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	685b      	ldr	r3, [r3, #4]
 800e3ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	430a      	orrs	r2, r1
 800e3c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3ce:	f003 0304 	and.w	r3, r3, #4
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d00a      	beq.n	800e3ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	685b      	ldr	r3, [r3, #4]
 800e3dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	430a      	orrs	r2, r1
 800e3ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3f0:	f003 0310 	and.w	r3, r3, #16
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d00a      	beq.n	800e40e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	689b      	ldr	r3, [r3, #8]
 800e3fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	430a      	orrs	r2, r1
 800e40c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e412:	f003 0320 	and.w	r3, r3, #32
 800e416:	2b00      	cmp	r3, #0
 800e418:	d00a      	beq.n	800e430 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	689b      	ldr	r3, [r3, #8]
 800e420:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	430a      	orrs	r2, r1
 800e42e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d01a      	beq.n	800e472 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	685b      	ldr	r3, [r3, #4]
 800e442:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	430a      	orrs	r2, r1
 800e450:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e456:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e45a:	d10a      	bne.n	800e472 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	685b      	ldr	r3, [r3, #4]
 800e462:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	430a      	orrs	r2, r1
 800e470:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d00a      	beq.n	800e494 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	685b      	ldr	r3, [r3, #4]
 800e484:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	430a      	orrs	r2, r1
 800e492:	605a      	str	r2, [r3, #4]
  }
}
 800e494:	bf00      	nop
 800e496:	370c      	adds	r7, #12
 800e498:	46bd      	mov	sp, r7
 800e49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49e:	4770      	bx	lr

0800e4a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b098      	sub	sp, #96	@ 0x60
 800e4a4:	af02      	add	r7, sp, #8
 800e4a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e4b0:	f7fa fe98 	bl	80091e4 <HAL_GetTick>
 800e4b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	f003 0308 	and.w	r3, r3, #8
 800e4c0:	2b08      	cmp	r3, #8
 800e4c2:	d12e      	bne.n	800e522 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e4c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e4c8:	9300      	str	r3, [sp, #0]
 800e4ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f000 f88c 	bl	800e5f0 <UART_WaitOnFlagUntilTimeout>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d021      	beq.n	800e522 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4e6:	e853 3f00 	ldrex	r3, [r3]
 800e4ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e4ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e4f2:	653b      	str	r3, [r7, #80]	@ 0x50
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	461a      	mov	r2, r3
 800e4fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e4fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800e4fe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e500:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e502:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e504:	e841 2300 	strex	r3, r2, [r1]
 800e508:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e50a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d1e6      	bne.n	800e4de <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2220      	movs	r2, #32
 800e514:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	2200      	movs	r2, #0
 800e51a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e51e:	2303      	movs	r3, #3
 800e520:	e062      	b.n	800e5e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	f003 0304 	and.w	r3, r3, #4
 800e52c:	2b04      	cmp	r3, #4
 800e52e:	d149      	bne.n	800e5c4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e530:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e534:	9300      	str	r3, [sp, #0]
 800e536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e538:	2200      	movs	r2, #0
 800e53a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e53e:	6878      	ldr	r0, [r7, #4]
 800e540:	f000 f856 	bl	800e5f0 <UART_WaitOnFlagUntilTimeout>
 800e544:	4603      	mov	r3, r0
 800e546:	2b00      	cmp	r3, #0
 800e548:	d03c      	beq.n	800e5c4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e552:	e853 3f00 	ldrex	r3, [r3]
 800e556:	623b      	str	r3, [r7, #32]
   return(result);
 800e558:	6a3b      	ldr	r3, [r7, #32]
 800e55a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e55e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	461a      	mov	r2, r3
 800e566:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e568:	633b      	str	r3, [r7, #48]	@ 0x30
 800e56a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e56c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e56e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e570:	e841 2300 	strex	r3, r2, [r1]
 800e574:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d1e6      	bne.n	800e54a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	3308      	adds	r3, #8
 800e582:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e584:	693b      	ldr	r3, [r7, #16]
 800e586:	e853 3f00 	ldrex	r3, [r3]
 800e58a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	f023 0301 	bic.w	r3, r3, #1
 800e592:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	3308      	adds	r3, #8
 800e59a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e59c:	61fa      	str	r2, [r7, #28]
 800e59e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5a0:	69b9      	ldr	r1, [r7, #24]
 800e5a2:	69fa      	ldr	r2, [r7, #28]
 800e5a4:	e841 2300 	strex	r3, r2, [r1]
 800e5a8:	617b      	str	r3, [r7, #20]
   return(result);
 800e5aa:	697b      	ldr	r3, [r7, #20]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d1e5      	bne.n	800e57c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2220      	movs	r2, #32
 800e5b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e5c0:	2303      	movs	r3, #3
 800e5c2:	e011      	b.n	800e5e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	2220      	movs	r2, #32
 800e5c8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	2220      	movs	r2, #32
 800e5ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2200      	movs	r2, #0
 800e5dc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800e5e6:	2300      	movs	r3, #0
}
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	3758      	adds	r7, #88	@ 0x58
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	bd80      	pop	{r7, pc}

0800e5f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b084      	sub	sp, #16
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	60f8      	str	r0, [r7, #12]
 800e5f8:	60b9      	str	r1, [r7, #8]
 800e5fa:	603b      	str	r3, [r7, #0]
 800e5fc:	4613      	mov	r3, r2
 800e5fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e600:	e04f      	b.n	800e6a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e602:	69bb      	ldr	r3, [r7, #24]
 800e604:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e608:	d04b      	beq.n	800e6a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e60a:	f7fa fdeb 	bl	80091e4 <HAL_GetTick>
 800e60e:	4602      	mov	r2, r0
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	1ad3      	subs	r3, r2, r3
 800e614:	69ba      	ldr	r2, [r7, #24]
 800e616:	429a      	cmp	r2, r3
 800e618:	d302      	bcc.n	800e620 <UART_WaitOnFlagUntilTimeout+0x30>
 800e61a:	69bb      	ldr	r3, [r7, #24]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d101      	bne.n	800e624 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e620:	2303      	movs	r3, #3
 800e622:	e04e      	b.n	800e6c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	f003 0304 	and.w	r3, r3, #4
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d037      	beq.n	800e6a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	2b80      	cmp	r3, #128	@ 0x80
 800e636:	d034      	beq.n	800e6a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e638:	68bb      	ldr	r3, [r7, #8]
 800e63a:	2b40      	cmp	r3, #64	@ 0x40
 800e63c:	d031      	beq.n	800e6a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	69db      	ldr	r3, [r3, #28]
 800e644:	f003 0308 	and.w	r3, r3, #8
 800e648:	2b08      	cmp	r3, #8
 800e64a:	d110      	bne.n	800e66e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	2208      	movs	r2, #8
 800e652:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e654:	68f8      	ldr	r0, [r7, #12]
 800e656:	f000 f838 	bl	800e6ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	2208      	movs	r2, #8
 800e65e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	2200      	movs	r2, #0
 800e666:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800e66a:	2301      	movs	r3, #1
 800e66c:	e029      	b.n	800e6c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	69db      	ldr	r3, [r3, #28]
 800e674:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e678:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e67c:	d111      	bne.n	800e6a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e686:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e688:	68f8      	ldr	r0, [r7, #12]
 800e68a:	f000 f81e 	bl	800e6ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	2220      	movs	r2, #32
 800e692:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	2200      	movs	r2, #0
 800e69a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800e69e:	2303      	movs	r3, #3
 800e6a0:	e00f      	b.n	800e6c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	69da      	ldr	r2, [r3, #28]
 800e6a8:	68bb      	ldr	r3, [r7, #8]
 800e6aa:	4013      	ands	r3, r2
 800e6ac:	68ba      	ldr	r2, [r7, #8]
 800e6ae:	429a      	cmp	r2, r3
 800e6b0:	bf0c      	ite	eq
 800e6b2:	2301      	moveq	r3, #1
 800e6b4:	2300      	movne	r3, #0
 800e6b6:	b2db      	uxtb	r3, r3
 800e6b8:	461a      	mov	r2, r3
 800e6ba:	79fb      	ldrb	r3, [r7, #7]
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d0a0      	beq.n	800e602 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e6c0:	2300      	movs	r3, #0
}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	3710      	adds	r7, #16
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}

0800e6ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e6ca:	b480      	push	{r7}
 800e6cc:	b095      	sub	sp, #84	@ 0x54
 800e6ce:	af00      	add	r7, sp, #0
 800e6d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6da:	e853 3f00 	ldrex	r3, [r3]
 800e6de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e6e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e6e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	461a      	mov	r2, r3
 800e6ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e6f0:	643b      	str	r3, [r7, #64]	@ 0x40
 800e6f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e6f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e6f8:	e841 2300 	strex	r3, r2, [r1]
 800e6fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e6fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e700:	2b00      	cmp	r3, #0
 800e702:	d1e6      	bne.n	800e6d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	3308      	adds	r3, #8
 800e70a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e70c:	6a3b      	ldr	r3, [r7, #32]
 800e70e:	e853 3f00 	ldrex	r3, [r3]
 800e712:	61fb      	str	r3, [r7, #28]
   return(result);
 800e714:	69fb      	ldr	r3, [r7, #28]
 800e716:	f023 0301 	bic.w	r3, r3, #1
 800e71a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	3308      	adds	r3, #8
 800e722:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e724:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e726:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e728:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e72a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e72c:	e841 2300 	strex	r3, r2, [r1]
 800e730:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e734:	2b00      	cmp	r3, #0
 800e736:	d1e5      	bne.n	800e704 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e73c:	2b01      	cmp	r3, #1
 800e73e:	d118      	bne.n	800e772 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	e853 3f00 	ldrex	r3, [r3]
 800e74c:	60bb      	str	r3, [r7, #8]
   return(result);
 800e74e:	68bb      	ldr	r3, [r7, #8]
 800e750:	f023 0310 	bic.w	r3, r3, #16
 800e754:	647b      	str	r3, [r7, #68]	@ 0x44
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	461a      	mov	r2, r3
 800e75c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e75e:	61bb      	str	r3, [r7, #24]
 800e760:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e762:	6979      	ldr	r1, [r7, #20]
 800e764:	69ba      	ldr	r2, [r7, #24]
 800e766:	e841 2300 	strex	r3, r2, [r1]
 800e76a:	613b      	str	r3, [r7, #16]
   return(result);
 800e76c:	693b      	ldr	r3, [r7, #16]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d1e6      	bne.n	800e740 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	2220      	movs	r2, #32
 800e776:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	2200      	movs	r2, #0
 800e77e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2200      	movs	r2, #0
 800e784:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800e786:	bf00      	nop
 800e788:	3754      	adds	r7, #84	@ 0x54
 800e78a:	46bd      	mov	sp, r7
 800e78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e790:	4770      	bx	lr

0800e792 <memset>:
 800e792:	4402      	add	r2, r0
 800e794:	4603      	mov	r3, r0
 800e796:	4293      	cmp	r3, r2
 800e798:	d100      	bne.n	800e79c <memset+0xa>
 800e79a:	4770      	bx	lr
 800e79c:	f803 1b01 	strb.w	r1, [r3], #1
 800e7a0:	e7f9      	b.n	800e796 <memset+0x4>
	...

0800e7a4 <__libc_init_array>:
 800e7a4:	b570      	push	{r4, r5, r6, lr}
 800e7a6:	4d0d      	ldr	r5, [pc, #52]	@ (800e7dc <__libc_init_array+0x38>)
 800e7a8:	4c0d      	ldr	r4, [pc, #52]	@ (800e7e0 <__libc_init_array+0x3c>)
 800e7aa:	1b64      	subs	r4, r4, r5
 800e7ac:	10a4      	asrs	r4, r4, #2
 800e7ae:	2600      	movs	r6, #0
 800e7b0:	42a6      	cmp	r6, r4
 800e7b2:	d109      	bne.n	800e7c8 <__libc_init_array+0x24>
 800e7b4:	4d0b      	ldr	r5, [pc, #44]	@ (800e7e4 <__libc_init_array+0x40>)
 800e7b6:	4c0c      	ldr	r4, [pc, #48]	@ (800e7e8 <__libc_init_array+0x44>)
 800e7b8:	f000 f826 	bl	800e808 <_init>
 800e7bc:	1b64      	subs	r4, r4, r5
 800e7be:	10a4      	asrs	r4, r4, #2
 800e7c0:	2600      	movs	r6, #0
 800e7c2:	42a6      	cmp	r6, r4
 800e7c4:	d105      	bne.n	800e7d2 <__libc_init_array+0x2e>
 800e7c6:	bd70      	pop	{r4, r5, r6, pc}
 800e7c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7cc:	4798      	blx	r3
 800e7ce:	3601      	adds	r6, #1
 800e7d0:	e7ee      	b.n	800e7b0 <__libc_init_array+0xc>
 800e7d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7d6:	4798      	blx	r3
 800e7d8:	3601      	adds	r6, #1
 800e7da:	e7f2      	b.n	800e7c2 <__libc_init_array+0x1e>
 800e7dc:	0800fd94 	.word	0x0800fd94
 800e7e0:	0800fd94 	.word	0x0800fd94
 800e7e4:	0800fd94 	.word	0x0800fd94
 800e7e8:	0800fd98 	.word	0x0800fd98

0800e7ec <memcpy>:
 800e7ec:	440a      	add	r2, r1
 800e7ee:	4291      	cmp	r1, r2
 800e7f0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800e7f4:	d100      	bne.n	800e7f8 <memcpy+0xc>
 800e7f6:	4770      	bx	lr
 800e7f8:	b510      	push	{r4, lr}
 800e7fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e7fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e802:	4291      	cmp	r1, r2
 800e804:	d1f9      	bne.n	800e7fa <memcpy+0xe>
 800e806:	bd10      	pop	{r4, pc}

0800e808 <_init>:
 800e808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e80a:	bf00      	nop
 800e80c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e80e:	bc08      	pop	{r3}
 800e810:	469e      	mov	lr, r3
 800e812:	4770      	bx	lr

0800e814 <_fini>:
 800e814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e816:	bf00      	nop
 800e818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e81a:	bc08      	pop	{r3}
 800e81c:	469e      	mov	lr, r3
 800e81e:	4770      	bx	lr
